<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Block</title>
    <url>/2021/05/19/Block/</url>
    <content><![CDATA[<h5 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h5><ul>
<li>将<code>函数</code>及其<code>执行上下文（函数执行环境）</code>封装起来的<code>对象</code></li>
<li>Block内部有<code>isa</code> 指针，所以说其本质也是OC对象</li>
<li>Block的调用即是<code>函数的调用</code></li>
</ul>
<p>新建方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span>(^blk)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;MCBlock&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    blk();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>clang</code> 编译器编译 <code>clang -rewrite-objc main.m</code>  将代码转换成 <code>C++</code> 源码</p>
<h5 id="main-block-impl-0"><a href="#main-block-impl-0" class="headerlink" title="__main_block_impl_0"></a>__main_block_impl_0</h5><p>编译后的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, struct __main_block_desc_0 *desc, <span class="keyword">int</span> flags=<span class="number">0</span>) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;MCBlock&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(struct __main_block_impl_0)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span>(*blk)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA));</span><br><span class="line">    ((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先看 <code>Block</code> 语法部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^&#123;</span><br><span class="line">    printf(&quot;MCBlock&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>转换后的源码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;MCBlock&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 <code>Block</code> 使用的匿名函数实际上被作为简单的 C 语言函数来处理，<code>__main_block_func_0</code>  <code>main</code> 是 <code>Block</code> 语法所属的函数名，<code>0</code> 是 <code>Block</code> 语法在该函数出现的顺序值</p>
<p><code>__cself</code> 相当于指向自身实例的变量 <code>self</code> ，是指向 <code>Block</code> 值的变量</p>
<p>参数声明部分，结构体 <code>__main_block_impl_0</code> 声明如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, struct __main_block_desc_0 *desc, <span class="keyword">int</span> flags=<span class="number">0</span>) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>转换后的源码中，一并写入了其构造函数，除去构造函数，该结构体有两个成员变量</p>
<p>第一个成员变量 <code>struct __block_impl impl</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> &#123;</span></span><br><span class="line">  <span class="keyword">void</span> *isa;</span><br><span class="line">  <span class="keyword">int</span> Flags; 		 <span class="comment">//标记位</span></span><br><span class="line">  <span class="keyword">int</span> Reserved;	 <span class="comment">//预留位</span></span><br><span class="line">  <span class="keyword">void</span> *FuncPtr; <span class="comment">//函数指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>第二个成员变量 <code>struct __main_block_desc_0* Desc</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> reserved;		<span class="comment">//预留位</span></span><br><span class="line">  <span class="keyword">size_t</span> Block_size;	<span class="comment">//结构体大小</span></span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(struct __main_block_impl_0)&#125;;</span><br></pre></td></tr></table></figure>

<p>再看下 <code>__main_block_impl_0</code> 构造函数部分</p>
<p>先看下函数的调用 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span>(*blk)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA));</span><br></pre></td></tr></table></figure>

<p>转换比较多，去掉转换部分</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> *<span class="title">blk</span> =</span> </span><br><span class="line">  __main_block_impl_0(__main_block_func_0, &amp;__main_block_desc_0_DATA)</span><br></pre></td></tr></table></figure>

<p>第一个参数是 C 语言函数指针，第二个参数 block 描述</p>
<p>结构体根据构造函数，会像下面进行初始化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">Flags = <span class="number">0</span>;</span><br><span class="line">Reserved = <span class="number">0</span>;</span><br><span class="line">FuncPtr = __main_block_func_0;</span><br><span class="line">Desc = &amp;__main_block_desc_0_DATA;</span><br></pre></td></tr></table></figure>

<p>将函数指针 <code>__main_block_func_0</code> 赋值给成员变量 <code>FuncPtr</code></p>
<p>使用 <code>Block</code> 的部分</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">blk();</span><br></pre></td></tr></table></figure>

<p>转换成源代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">((void (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);</span><br><span class="line">    return 0;</span><br></pre></td></tr></table></figure>

<p>去掉转换的部分</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(*blk-&gt;impl.FuncPtr)(blk);</span><br></pre></td></tr></table></figure>

<p>通过函数指针找到函数执行体，这就是简单的使用函数指针调用函数</p>
<h5 id="捕获变量"><a href="#捕获变量" class="headerlink" title="捕获变量"></a>捕获变量</h5><ul>
<li>Block捕获值，内部结构体会新增同名成员变量，保存传进来的值</li>
<li>对基本数据类型的局部变量捕获其值</li>
<li>对于对象类型的局部变量连同所有权修饰符一起截获</li>
<li>以指针形式截获静态局部变量</li>
<li>不截获全局变量、静态全局变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;全局变量</span><br><span class="line">int global_var &#x3D; 4;</span><br><span class="line">&#x2F;&#x2F;静态全局变量</span><br><span class="line">static int static_global_var &#x3D; 5;</span><br><span class="line">- (void)method</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;基本数据类型局部变量</span><br><span class="line">    int var &#x3D; 1;</span><br><span class="line">    &#x2F;&#x2F;对象类型局部变量</span><br><span class="line">    __unsafe_unretained id unsafe_obj &#x3D; nil;</span><br><span class="line">    __strong id strong_obj &#x3D; nil;</span><br><span class="line">    &#x2F;&#x2F;静态局部变量</span><br><span class="line">    static int static_var &#x3D; 3;</span><br><span class="line">    void(^Block)(void) &#x3D; ^(void) &#123;</span><br><span class="line">        NSLog(@&quot;局部变量&lt;基本数据类型&gt; var %d&quot;, var);</span><br><span class="line">        NSLog(@&quot;局部变量&lt;__unsafe_unretained 对象类型&gt; var %@&quot;, unsafe_obj);</span><br><span class="line">        NSLog(@&quot;局部变量&lt;__strong 对象类型&gt; var %@&quot;, strong_obj);</span><br><span class="line">        NSLog(@&quot;静态变量 %d&quot;, static_var);</span><br><span class="line">        NSLog(@&quot;全局变量 %d&quot;, global_var);</span><br><span class="line">        NSLog(@&quot;静态全局变量 %d&quot;, static_global_var);</span><br><span class="line">    &#125;;</span><br><span class="line">    Block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>clang</code> 编译源码 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> global_var = <span class="number">4</span>;</span><br><span class="line"><span class="comment">//对全局变量、静态全局变量不截获</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> static_global_var = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">MCBlock__method_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">MCBlock__method_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  <span class="keyword">int</span> var; <span class="comment">//捕获局部变量</span></span><br><span class="line">  __unsafe_unretained id unsafe_obj;<span class="comment">//连同所有权修饰符一起截获</span></span><br><span class="line">  __strong id strong_obj;</span><br><span class="line">  <span class="keyword">int</span> *static_var; <span class="comment">//以指针针形式截获静态局部变量</span></span><br><span class="line">  __MCBlock__method_block_impl_0(<span class="keyword">void</span> *fp, struct __MCBlock__method_block_desc_0 *desc, <span class="keyword">int</span> _var, __unsafe_unretained id _unsafe_obj, __strong id _strong_obj, <span class="keyword">int</span> *_static_var, <span class="keyword">int</span> flags=<span class="number">0</span>) : var(_var), unsafe_obj(_unsafe_obj), strong_obj(_strong_obj), static_var(_static_var) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dmy = <span class="number">256</span>;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt = <span class="string">&quot;val = %d&quot;</span>;</span><br><span class="line">    <span class="keyword">void</span> (^blk)(<span class="keyword">void</span>) = ^&#123; <span class="built_in">printf</span>(fmt, val); &#125;;</span><br><span class="line">    val = <span class="number">2</span>;</span><br><span class="line">    fmt = <span class="string">&quot;value changed. val = %d&quot;</span>;</span><br><span class="line">    blk();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果 <code>val = 10</code></p>
<p><code>clang</code> 编译源码 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *fmt;</span><br><span class="line">  <span class="keyword">int</span> val;</span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, struct __main_block_desc_0 *desc, <span class="keyword">const</span> <span class="keyword">char</span> *_fmt, <span class="keyword">int</span> _val, <span class="keyword">int</span> flags=<span class="number">0</span>) : fmt(_fmt), val(_val) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *fmt = __cself-&gt;fmt; <span class="comment">// bound by copy</span></span><br><span class="line">  <span class="keyword">int</span> val = __cself-&gt;val; <span class="comment">// bound by copy</span></span><br><span class="line"> <span class="built_in">printf</span>(fmt, val); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(struct __main_block_impl_0)&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dmy = <span class="number">256</span>;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt = <span class="string">&quot;val = %d&quot;</span>;</span><br><span class="line">    <span class="keyword">void</span> (*blk)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, fmt, val));</span><br><span class="line">    val = <span class="number">2</span>;</span><br><span class="line">    fmt = <span class="string">&quot;value changed. val = %d&quot;</span>;</span><br><span class="line">    ((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">IMAGE_INFO</span> &#123;</span> <span class="keyword">unsigned</span> version; <span class="keyword">unsigned</span> flag; &#125; _OBJC_IMAGE_INFO = &#123; <span class="number">0</span>, <span class="number">2</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到 <code>Block</code> 语法表达式中使用的局部变量追加到了 <code>__main_block_impl_0</code> 中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *fmt;</span><br><span class="line">  <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>Block</code> 的匿名函数实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">^&#123; <span class="built_in">printf</span>(fmt, val); &#125;;</span><br></pre></td></tr></table></figure>

<p>转换成以下函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *fmt = __cself-&gt;fmt; <span class="comment">// bound by copy</span></span><br><span class="line">  <span class="keyword">int</span> val = __cself-&gt;val; <span class="comment">// bound by copy</span></span><br><span class="line"> <span class="built_in">printf</span>(fmt, val); &#125;</span><br></pre></td></tr></table></figure>

<p>执行 <code>Block</code> 时，<code>Block</code> 语法表达式中使用的局部变量被保存到 <code>Block</code> 的结构体实例（ 即<code>Block</code> 自身）中</p>
<h5 id="block"><a href="#block" class="headerlink" title="__block"></a>__block</h5><p><code>__block</code> 说明符类似于 <code>auto</code> <code>static</code> 用于指定将变量值设置到哪个存储域中</p>
<p>例如，<code>auto</code> 表示作为自动变量存储在栈中，<code>static</code> 表示作为静态变量存储在数据区中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __block <span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">void</span> (^blk)(<span class="keyword">void</span>) = ^&#123;val = <span class="number">1</span>;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>clang</code> 编译后</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">Block_byref_val_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">void</span> *__isa;</span><br><span class="line">__Block_byref_val_0 *__forwarding;</span><br><span class="line"> <span class="keyword">int</span> __flags;</span><br><span class="line"> <span class="keyword">int</span> __size;</span><br><span class="line"> <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  __Block_byref_val_0 *val; <span class="comment">// by ref</span></span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, struct __main_block_desc_0 *desc, __Block_byref_val_0 *_val, <span class="keyword">int</span> flags=<span class="number">0</span>) : val(_val-&gt;__forwarding) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">  __Block_byref_val_0 *val = __cself-&gt;val; <span class="comment">// bound by ref</span></span><br><span class="line">(val-&gt;__forwarding-&gt;val) = <span class="number">1</span>;&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;_Block_object_assign((<span class="keyword">void</span>*)&amp;dst-&gt;val, (<span class="keyword">void</span>*)src-&gt;val, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_dispose_0(struct __main_block_impl_0*src) &#123;_Block_object_dispose((<span class="keyword">void</span>*)src-&gt;val, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">  <span class="keyword">void</span> (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);</span><br><span class="line">  <span class="keyword">void</span> (*dispose)(struct __main_block_impl_0*);</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __attribute__((__blocks__(byref))) __Block_byref_val_0 val = &#123;(<span class="keyword">void</span>*)<span class="number">0</span>,(__Block_byref_val_0 *)&amp;val, <span class="number">0</span>, <span class="keyword">sizeof</span>(__Block_byref_val_0), <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">void</span> (*blk)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_val_0 *)&amp;val, <span class="number">570425344</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看声明部分 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">__attribute__((__blocks__(byref))) __Block_byref_val_0 val = &#123;(<span class="keyword">void</span>*)<span class="number">0</span>,(__Block_byref_val_0 *)&amp;val, <span class="number">0</span>, <span class="keyword">sizeof</span>(__Block_byref_val_0), <span class="number">10</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>简化后</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">__Block_byref_val_0 val = &#123;<span class="number">0</span>,&amp;val, <span class="number">0</span>, <span class="keyword">sizeof</span>(__Block_byref_val_0), <span class="number">10</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>局部变量加上 <code>__block</code> 修饰后，变成了结构体实例 <code>__Block_byref_val_0</code> ，保存原始变量的指针和值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">Block_byref_val_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">void</span> *__isa;</span><br><span class="line">__Block_byref_val_0 *__forwarding;</span><br><span class="line"> <span class="keyword">int</span> __flags;</span><br><span class="line"> <span class="keyword">int</span> __size;</span><br><span class="line"> <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> (*blk)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_val_0 *)&amp;val, <span class="number">570425344</span>));</span><br></pre></td></tr></table></figure>

<p><code>__main_block_impl_0</code> 中，将变量 <code>val</code> 生成的结构体对象的指针地址，传给 <code>Block</code> ，然后 <code>Block</code> 内部就可以对外界的变量进行操作了</p>
<p>查看给 <code>__block</code> 变量赋值部分 <code>^&#123;val = 1;&#125;;</code></p>
<p>转换后的源码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">  __Block_byref_val_0 *val = __cself-&gt;val; <span class="comment">// bound by ref</span></span><br><span class="line">(val-&gt;__forwarding-&gt;val) = <span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure>

<p><code>__Block_byref_val_0</code> 结构体实例的成员变量 <code>__forwarding</code> 持有指向该实例自身的指针。</p>
<p>通过成员变量 <code>__forwarding</code> 访问成员变量 <code>val</code></p>
<p><img src="/2021/05/19/Block/forwarding.png" alt="forwarding"></p>
<ul>
<li>一般情况下，对被截获的变量进行赋值操作需要添加 <code>__block</code> 修饰符</li>
<li>基本数据类型和对象类型的局部变量进行赋值时需要加 <code>__block</code> 修饰符</li>
<li>静态局部变量、静态全局变量、全局变量，进行赋值时不需要加 <code>__block</code> 修饰符</li>
</ul>
<h5 id="Block类型"><a href="#Block类型" class="headerlink" title="Block类型"></a>Block类型</h5><ul>
<li>_NSConcreteGlobalBlock（NSGlobalBlock）全局 <code>Block</code> ，存储在程序的数据区（.data区）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void(^blk)(void) &#x3D; ^&#123;</span><br><span class="line">    printf(&quot;MCBlock\n&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">NSLog(@&quot;%@&quot;, blk);</span><br></pre></td></tr></table></figure>

<p>此时的 <code>Block</code> 无参也无返回值，属于全局 <code>Block</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;__NSGlobalBlock__: 0x100004030&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>_NSConcreteStackBlock（NSStackBlock）栈 <code>Block</code> ，存放在栈上</p>
</li>
<li><p>_NSConcreteMallocBlock（NSMallocBlock）堆 <code>Block </code>，存储在堆上</p>
</li>
</ul>
<p>不使用外部变量的 Block 是全局 Block</p>
<p>使用外部变量并且未进行 copy 操作的 Block 是栈 Block</p>
<p>对栈 Block 进行 copy 操作，就是堆 Block，对全局 Block 进行 copy，仍是全局 Block</p>
<p>对 Block 的 copy 操作</p>
<p><img src="/2021/05/19/Block/copy.png" alt="copy"></p>
<p>对栈上Block进行copy操作，copy结果-&gt;在堆上产生一个Block</p>
<p><img src="/2021/05/19/Block/block2.png" alt="block2"></p>
<p><code>Block</code>  在栈上时 <code>__Block_byref_val_0</code> 结构体内 <code>__forwarding</code> 指针指向结构体自己</p>
<p><code>Block</code> 被复制到堆中时，<code>__Block_byref_val_0</code> 结构体也被复制到堆中一份</p>
<p>栈上 <code>__Block_byref_val_0</code> 结构体中的  <code>__forwarding</code>  指针指向堆中 <code>__Block_byref_val_0</code> 结构体</p>
<p>堆上  <code>__Block_byref_val_0</code> 结构体中的  <code>__forwarding</code>  指针指向结构体自己</p>
<ul>
<li><code>__forwarding</code> 指针存在的意义：</li>
</ul>
<p>不论在任何内存位置，都可以顺利访问同一个 <code>__block</code> 变量</p>
<p>无论 <code>__block</code> 变量配置在栈上还是堆上时，都能正确的访问 <code>__block</code> 变量</p>
]]></content>
  </entry>
  <entry>
    <title>Flutter.cn</title>
    <url>/2022/02/16/FlutterCn%EF%BC%88%E4%B8%80%EF%BC%89Flutter%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h4 id="横向或纵向布局多个-widgets"><a href="#横向或纵向布局多个-widgets" class="headerlink" title="横向或纵向布局多个 widgets"></a>横向或纵向布局多个 widgets</h4><p>可以指定 Row 或 Column 如何在水平或者垂直方向上对齐其子项</p>
<p>可以指定子 widgets 如何占用 Row 或 Column 的可用空间</p>
<h5 id="对齐widgets"><a href="#对齐widgets" class="headerlink" title="对齐widgets"></a>对齐widgets</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/rendering.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">//设置为true，可以看到可视布局</span></span><br><span class="line">  debugPaintSizeEnabled = <span class="keyword">true</span>;</span><br><span class="line">  runApp(<span class="keyword">const</span> LayoutDemo());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LayoutDemo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> LayoutDemo(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter layout demo&#x27;</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">&#x27;Flutter layout demo&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: buildRow(),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置主轴对齐方式为spaceEvenly，会将剩余空间在每个图像之间、之前和之后均匀划分</span></span><br><span class="line">  Widget buildRow() =&gt;</span><br><span class="line">      Row(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">        children: [</span><br><span class="line">          Image.asset(<span class="string">&#x27;img/pic1.jpg&#x27;</span>),</span><br><span class="line">          Image.asset(<span class="string">&#x27;img/pic2.jpg&#x27;</span>),</span><br><span class="line">          Image.asset(<span class="string">&#x27;img/pic3.jpg&#x27;</span>),</span><br><span class="line">        ],</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  Widget buildColumn() =&gt;</span><br><span class="line">      Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">        children: [</span><br><span class="line">          Image.asset(<span class="string">&#x27;img/pic1.jpg&#x27;</span>),</span><br><span class="line">          Image.asset(<span class="string">&#x27;img/pic2.jpg&#x27;</span>),</span><br><span class="line">          Image.asset(<span class="string">&#x27;img/pic3.jpg&#x27;</span>),</span><br><span class="line">        ],</span><br><span class="line">      );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="调整widgets大小"><a href="#调整widgets大小" class="headerlink" title="调整widgets大小"></a>调整widgets大小</h5><p>当某个布局太大而超出屏幕时，受影响的边缘会出现黄色和黑色条纹图案</p>
<p>通过使用 Expanded widget 可以调整 widgets 的大小以适合行或列</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Row(</span><br><span class="line">  crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">  children: [</span><br><span class="line">    Expanded(</span><br><span class="line">      child: Image.asset(<span class="string">&#x27;images/pic1.jpg&#x27;</span>),</span><br><span class="line">    ),</span><br><span class="line">    Expanded(</span><br><span class="line">      child: Image.asset(<span class="string">&#x27;images/pic2.jpg&#x27;</span>),</span><br><span class="line">    ),</span><br><span class="line">    Expanded(</span><br><span class="line">      child: Image.asset(<span class="string">&#x27;images/pic3.jpg&#x27;</span>),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>想要一个 widget 占用空间是兄弟项的两倍，可以使用 Expanded widget 的 flex 属性</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Row(</span><br><span class="line">  crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">  children: [</span><br><span class="line">    Expanded(</span><br><span class="line">      child: Image.asset(<span class="string">&#x27;images/pic1.jpg&#x27;</span>),</span><br><span class="line">    ),</span><br><span class="line">    Expanded(</span><br><span class="line">      flex: <span class="number">2</span>,</span><br><span class="line">      child: Image.asset(<span class="string">&#x27;images/pic2.jpg&#x27;</span>),</span><br><span class="line">    ),</span><br><span class="line">    Expanded(</span><br><span class="line">      child: Image.asset(<span class="string">&#x27;images/pic3.jpg&#x27;</span>),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="/FlutterCn%EF%BC%88%E4%B8%80%EF%BC%89Flutter%E5%B8%83%E5%B1%80/WeChat648aa69a2338cc1da9a5cdded93f8f16.png" alt="WeChat648aa69a2338cc1da9a5cdded93f8f16"></p>
<h5 id="组合widgets"><a href="#组合widgets" class="headerlink" title="组合widgets"></a>组合widgets</h5><p>默认情况下，行或列沿其主轴会占用尽可能多的空间，如果要将子项紧密组合在一起，将 mainAxisSize 设置为 MainAxisSize.min </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Row(</span><br><span class="line">  mainAxisSize: MainAxisSize.min,</span><br><span class="line">  children: [</span><br><span class="line">    Icon(Icons.star, color: Colors.green[<span class="number">500</span>]),</span><br><span class="line">    Icon(Icons.star, color: Colors.green[<span class="number">500</span>]),</span><br><span class="line">    Icon(Icons.star, color: Colors.green[<span class="number">500</span>]),</span><br><span class="line">    <span class="keyword">const</span> Icon(Icons.star, color: Colors.black),</span><br><span class="line">    <span class="keyword">const</span> Icon(Icons.star, color: Colors.black),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="/FlutterCn%EF%BC%88%E4%B8%80%EF%BC%89Flutter%E5%B8%83%E5%B1%80/WeChat9db897d81b3faa8300e97c87f80796cb.png" alt="WeChat9db897d81b3faa8300e97c87f80796cb"></p>
<h5 id="嵌套行和列"><a href="#嵌套行和列" class="headerlink" title="嵌套行和列"></a>嵌套行和列</h5><blockquote>
<p>为了最大限度地减少高度嵌套的布局代码可能导致的视觉错乱，可以在变量和函数中实现UI的各个部分</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stars = Row(</span><br><span class="line">  mainAxisSize: MainAxisSize.min,</span><br><span class="line">  children: [</span><br><span class="line">    Icon(Icons.star, color: Colors.green[<span class="number">500</span>]),</span><br><span class="line">    Icon(Icons.star, color: Colors.green[<span class="number">500</span>]),</span><br><span class="line">    Icon(Icons.star, color: Colors.green[<span class="number">500</span>]),</span><br><span class="line">    <span class="keyword">const</span> Icon(Icons.star, color: Colors.black),</span><br><span class="line">    <span class="keyword">const</span> Icon(Icons.star, color: Colors.black),</span><br><span class="line">  ],</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> ratings = Container(</span><br><span class="line">  padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">20</span>),</span><br><span class="line">  child: Row(</span><br><span class="line">    mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">    children: [</span><br><span class="line">      stars,</span><br><span class="line">      <span class="keyword">const</span> Text(</span><br><span class="line">        <span class="string">&#x27;170 Reviews&#x27;</span>,</span><br><span class="line">        style: TextStyle(</span><br><span class="line">          color: Colors.black,</span><br><span class="line">          fontWeight: FontWeight.w800,</span><br><span class="line">          fontFamily: <span class="string">&#x27;Roboto&#x27;</span>,</span><br><span class="line">          letterSpacing: <span class="number">0.5</span>,</span><br><span class="line">          fontSize: <span class="number">20</span>,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="通用布局-widgets"><a href="#通用布局-widgets" class="headerlink" title="通用布局 widgets"></a>通用布局 widgets</h4><p>下面 widget 会分为两类：widgets 库中的标准 widgets 和 Material 库中的 widgets，任何app都可以使用 widget库，但是 Material 库中的组件只能在 Material app 中使用</p>
<h5 id="标准-widgets"><a href="#标准-widgets" class="headerlink" title="标准 widgets"></a>标准 widgets</h5><p>Container：向 widget 增加 padding、margins、borders、background color 或者其他的“装饰”</p>
<p>GridView：将 widget 展示为一个可滚动的网格</p>
<p>ListView：将 widget 展示为一个可滚动的列表</p>
<p>Stack：将 widget 覆盖在另一个的上面</p>
<h5 id="Material-widgets"><a href="#Material-widgets" class="headerlink" title="Material widgets"></a>Material widgets</h5><p>Card：将相关信息整理到一个有圆角和阴影的盒子中</p>
<p>ListTitle：将最多三行的文本、可选的导语以及后面的图标组织在一行中</p>
<h5 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h5><p>许多布局都可以随意的用 Container，它可以将使用了 padding 或者增加了 borders/margins 的 widget 分开。你可以通过将整个布局放到一个 Container 中，并且改变它的背景色或者图片，来改变设备的背景</p>
<p>增加 padding、margins、borders<br>改变背景色或者图片<br>只包含一个子 widget，但是这个子 widget 可以是行、列或者是 widget 树的根 widget</p>
<p><img src="/FlutterCn%EF%BC%88%E4%B8%80%EF%BC%89Flutter%E5%B8%83%E5%B1%80/WeChatdc556c1945581f068555467d6a960f5b.png" alt="WeChatdc556c1945581f068555467d6a960f5b"></p>
<h5 id="GridView"><a href="#GridView" class="headerlink" title="GridView"></a>GridView</h5><p>GridView 将 widget 作为二维列表展示，提供了两个预制的列表，或者可以自定义网格，GridView 检测到内容太长而无法适应渲染盒时，就会自动支持滚动</p>
<p>GridView.count 允许你制定列的数量 GridView.extent 允许你制定单元格最大宽度</p>
<p>demo：gird_and_list、Flutter Gallery 中的  <a href="https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/lib/demo/material/grid_list_demo.dart">grid_list_demo.dart</a></p>
<h4 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h4><p><a href="https://dart.cn/guides">Dart中文文档</a></p>
<p><a href="https://flutter.cn/docs/development/ui/widgets/layout">布局 Layout widgets</a></p>
<p><a href="https://flutter.cn/docs/development/ui/widgets/material">Material组件 Material Components widgets</a></p>
<p><a href="https://flutter.cn/docs/development/ui/advanced/gestures">Flutter中的手势</a></p>
<p><a href="https://flutter.cn/docs/development/tools/devtools/inspector#debugging-layout-issues-visually">使用Flutter inspector工具</a></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter (一) 环境配置</title>
    <url>/2021/10/12/Flutter%EF%BC%88%E4%B8%80%EF%BC%89%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="安装-Android-Studio"><a href="#安装-Android-Studio" class="headerlink" title="安装 Android Studio"></a>安装 Android Studio</h4><p><a href="%5Bhttps://developer.android.google.cn/studio%5D(https://links.jianshu.com/go?to=https://developer.android.google.cn/studio)">下载地址</a></p>
<p><a href="%5Bhttps://www.cnblogs.com/mengtaoadmin/p/11184052.html%5D(https://links.jianshu.com/go?to=https://www.cnblogs.com/mengtaoadmin/p/11184052.html)">Mac 上安装 Android Studio</a></p>
<h4 id="下载-Flutter-SDK"><a href="#下载-Flutter-SDK" class="headerlink" title="下载 Flutter SDK"></a>下载 Flutter SDK</h4><ul>
<li><p>方式1：<a href="https://flutter.dev/docs/get-started/install/macos">官网下载</a></p>
</li>
<li><p>方式2：</p>
</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git clone -b beta <span class="symbol">https:</span>/<span class="regexp">/github.com/flutter</span><span class="regexp">/flutter.git</span></span><br></pre></td></tr></table></figure>

<p>放在 opt 目录下 <code>/opt/flutter</code></p>
<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p><code>./zshrc</code> 中配置环境变量，配置完成后执行 <code>source ~/.zshrc</code></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Flutter 镜像配置</span></span><br><span class="line">export PUB_HOSTED_URL=<span class="symbol">https:</span>/<span class="regexp">/pub.flutter-io.cn</span></span><br><span class="line"><span class="regexp">export FLUTTER_STORAGE_BASE_URL=https:/</span><span class="regexp">/storage.flutter-io.cn</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#Flutter 配置</span></span><br><span class="line"><span class="regexp">export FLUTTER=/opt</span><span class="regexp">/flutter/bin</span></span><br><span class="line">export PATH=$FLUTTER<span class="symbol">:</span>$PATH</span><br></pre></td></tr></table></figure>

<p>Flutter 有一个 doctor 检测指令，查看配置是否完成</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure>

<p>报错</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[!] Android toolchain - develop <span class="keyword">for</span> Android devices (Android SDK version <span class="number">31.0</span>.<span class="number">0</span>)</span><br><span class="line">    ✗ cmdline-tools component is missing</span><br><span class="line">      Run <span class="string">`path/to/sdkmanager --install &quot;cmdline-tools;latest&quot;`</span></span><br><span class="line">      See <span class="symbol">https:</span>/<span class="regexp">/developer.android.com/studio</span><span class="regexp">/command-line for more details.</span></span><br><span class="line"><span class="regexp">    ✗ Android license status unknown.</span></span><br><span class="line"><span class="regexp">      Run `flutter doctor --android-licenses` to accept the SDK licenses.</span></span><br><span class="line"><span class="regexp">      See https:/</span><span class="regexp">/flutter.dev/docs</span><span class="regexp">/get-started/install</span><span class="regexp">/macos#android-setup for more details.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>解决 cmdline-tools component is missing 问题</li>
</ul>
<p>打开 Android Studio，Preferences-Appearance &amp; Beahvior-System Settings-Android SDK-SDK Tools</p>
<p>勾选 Android SDK Command-line Tools (latest)  OK</p>
<ul>
<li>解决 Android license status unknown 问题</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">flutter doctor --android-licenses</span><br><span class="line"><span class="comment">#然后一直选择y</span></span><br></pre></td></tr></table></figure>

<ul>
<li>安装 Flutter 插件</li>
</ul>
<p>Preferences-Plugins 找到 Flutter 插件安装</p>
<p><a href="https://flutterchina.club/setup-macos/">Flutter中文网搭建Flutter开发环境</a><br><a href="https://www.jianshu.com/p/7662c2b1501f">Flutter专题目录汇总</a><br><a href="https://flutter.dev/docs">Flutter 官方文档: </a><br><a href="https://github.com/flutter/flutter">Flutter github 地址: </a><br><a href="https://flutterchina.club/">Flutter 中文网: </a><br><a href="https://juejin.im/tag/Flutter">Flutter 掘金标签: </a><br><a href="https://zhuanlan.zhihu.com/p/37232700">Flutter 仿写项目</a></p>
<p><a href="https://github.com/alibaba/flutter-go">阿里巴巴 flutter-go</a>：包含 flutter 常用140+组件的demo演示与中文文档<br><a href="https://gitee.com/qingdongmeng/flutter-do">老孟flutter</a><br><a href="https://docs.flutter.dev/development/tools/sdk/releases?tab=macos">Flutter SDK releases</a></p>
<p><a href="https://github.com/flutter/samples">Flutter samples</a></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>FXForms</title>
    <url>/2021/12/06/FXForms/</url>
    <content><![CDATA[<h4 id="FXForms"><a href="#FXForms" class="headerlink" title="FXForms"></a>FXForms</h4><p>FXForms 框架提供了一个 FXFormViewController 视图控制器类，可以直接写继承于这个类的 ViewController 来便捷创建表单界面</p>
<p>FxForms 是通过节点配置的方式来进行表单创建的，表单中的每一个 Cell 都是一个节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface RootFormViewController : FXFormViewController</span><br><span class="line">@end</span><br><span class="line">@implementation RootFormViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">  	&#x2F;&#x2F;节点信息设置</span><br><span class="line">    self.formController.form &#x3D; [MyForm new];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<h5 id="配置节点"><a href="#配置节点" class="headerlink" title="配置节点"></a>配置节点</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface MyForm : NSObject&lt;FXForm&gt;</span><br><span class="line">@property (nonatomic, copy) NSString *email;</span><br><span class="line">@property (nonatomic, copy) NSString *password;</span><br><span class="line">@property (nonatomic, assign) BOOL remember;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p>上面的 MyForm 类定义了一些属性，如果不进行节点信息配置，FXForms 会自动根据节点属性来推断节点类型，NSString 类型的属性会被自动推断成带文本框的 Cell，BOOL 类型的属性会被自动推断成带 UISwitch 控件的 Cell</p>
<p><img src="/FXForms/WeChat8a22183ff8df3019ca8b1cca696d5910.png" alt="WeChat8a22183ff8df3019ca8b1cca696d5910"></p>
<h5 id="配置节点属性"><a href="#配置节点属性" class="headerlink" title="配置节点属性"></a>配置节点属性</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@implementation MyForm</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方法名必须是 属性名+Field 返回为NSDictionary字典 字典中为节点的配置信息</span><br><span class="line">- (NSDictionary *)emailField &#123;</span><br><span class="line">    &#x2F;&#x2F;配置节点的类型 点击后 将弹出时间选择控件</span><br><span class="line">    return @&#123;FXFormFieldType: FXFormFieldTypeDate&#125;;</span><br><span class="line">&#125;</span><br><span class="line">- (NSDictionary *)passwordField &#123;</span><br><span class="line">    &#x2F;&#x2F;设置节点名称</span><br><span class="line">    return @&#123;FXFormFieldTitle: @&quot;名称&quot;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">- (NSDictionary *)rememberField &#123;</span><br><span class="line">    &#x2F;&#x2F;设置节点头视图名称</span><br><span class="line">    return @&#123;FXFormFieldHeader: @&quot;配置&quot;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<h5 id="返回字典中可以配置的属性"><a href="#返回字典中可以配置的属性" class="headerlink" title="返回字典中可以配置的属性"></a>返回字典中可以配置的属性</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;配置此节点的标识符</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldKey;</span><br><span class="line">&#x2F;&#x2F;配置此节点的类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldType; </span><br><span class="line">&#x2F;&#x2F;指定当前节点属性对应的类 (一般不需设置)</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldClass;</span><br><span class="line">&#x2F;&#x2F;设置当前节点对应的cell类</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldCell;</span><br><span class="line">&#x2F;&#x2F;设置当前节点显示的名称(不设置默认为驼峰的属性名 eg:Email)</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTitle;</span><br><span class="line">&#x2F;&#x2F;设置当前节点的placeHolder</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldPlaceholder;</span><br><span class="line">&#x2F;&#x2F;设置节点上默认显示的文字</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldDefaultValue; </span><br><span class="line">&#x2F;&#x2F;设置选项数组 这个属性的设置 必须配合特定配型的cell使用</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldOptions;</span><br><span class="line">&#x2F;&#x2F;如果某个节点是一个数组 则FXFormFieldTemplate可以用来设置数组中节点的属性</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTemplate;</span><br><span class="line">&#x2F;&#x2F;进行类型转换</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldValueTransformer;</span><br><span class="line">&#x2F;&#x2F;设置节点的触发方法</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldAction;</span><br><span class="line">&#x2F;&#x2F;连接StoryboardSegue</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldSegue;</span><br><span class="line">&#x2F;&#x2F;设置节点头部内容</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldHeader;</span><br><span class="line">&#x2F;&#x2F;设置节点尾部内容</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldFooter;</span><br><span class="line">&#x2F;&#x2F;设置是否是内嵌节点 对于父节点或者数组类界定 这个如果设置为@YES 则会在当前界面中展示表单 如果设置为@NO，则会在新的视图控制器中展示</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldInline;</span><br><span class="line">&#x2F;&#x2F;对于数组类型的节点，设置是否支持排序 设置为@YES则为支持排序</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldSortable;</span><br><span class="line">&#x2F;&#x2F;设置选中cell后跳转的ViewController</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldViewController;</span><br></pre></td></tr></table></figure>

<h5 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;默认的节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeDefault;</span><br><span class="line">&#x2F;&#x2F;文本标签节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeLabel;</span><br><span class="line">&#x2F;&#x2F;输入框节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeText;</span><br><span class="line">&#x2F;&#x2F;长文本输入节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeLongText; </span><br><span class="line">&#x2F;&#x2F;URL节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeURL;</span><br><span class="line">&#x2F;&#x2F;Email节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeEmail; </span><br><span class="line">&#x2F;&#x2F;号码节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypePhone; </span><br><span class="line">&#x2F;&#x2F;密码框节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypePassword;</span><br><span class="line">&#x2F;&#x2F;数字节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeNumber;</span><br><span class="line">&#x2F;&#x2F;只允许输入整数的节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeInteger;</span><br><span class="line">&#x2F;&#x2F;无符号整数节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeUnsigned; </span><br><span class="line">&#x2F;&#x2F;浮点节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeFloat;</span><br><span class="line">&#x2F;&#x2F;BOOL节点类型 默认带UISwitch控件</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeBoolean;</span><br><span class="line">&#x2F;&#x2F;选项节点类型 默认带对号符号</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeOption;</span><br><span class="line">&#x2F;&#x2F;日期节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeDate;</span><br><span class="line">&#x2F;&#x2F;时间节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeTime;</span><br><span class="line">&#x2F;&#x2F;日期时间节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeDateTime;</span><br><span class="line">&#x2F;&#x2F;图片节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeImage;</span><br></pre></td></tr></table></figure>

<h5 id="FXForms中也提供了许多封装好的cell"><a href="#FXForms中也提供了许多封装好的cell" class="headerlink" title="FXForms中也提供了许多封装好的cell"></a>FXForms中也提供了许多封装好的cell</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;默认的cell</span><br><span class="line">@interface FXFormDefaultCell : FXFormBaseCell</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带文本输入框的cell</span><br><span class="line">@interface FXFormTextFieldCell : FXFormBaseCell</span><br><span class="line">@property (nonatomic, readonly) UITextField *textField;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带文本输入视图的cell</span><br><span class="line">@interface FXFormTextViewCell : FXFormBaseCell</span><br><span class="line">@property (nonatomic, readonly) UITextView *textView;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带UISwitch控件的cell</span><br><span class="line">@interface FXFormSwitchCell : FXFormBaseCell</span><br><span class="line">@property (nonatomic, readonly) UISwitch *switchControl;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带UIStepper控件的cell</span><br><span class="line">@interface FXFormStepperCell : FXFormBaseCell</span><br><span class="line">@property (nonatomic, readonly) UIStepper *stepper;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带UISlider控件的cell</span><br><span class="line">@interface FXFormSliderCell : FXFormBaseCell</span><br><span class="line">@property (nonatomic, readonly) UISlider *slider;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带日期选择控件的cell</span><br><span class="line">@interface FXFormDatePickerCell : FXFormBaseCell</span><br><span class="line">@property (nonatomic, readonly) UIDatePicker *datePicker;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带图片选择控件的cell</span><br><span class="line">@interface FXFormImagePickerCell : FXFormBaseCell</span><br><span class="line">@property (nonatomic, readonly) UIImageView *imagePickerView;</span><br><span class="line">@property (nonatomic, readonly) UIImagePickerController *imagePickerController;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带自定义PickerView的cell</span><br><span class="line">@interface FXFormOptionPickerCell : FXFormBaseCell</span><br><span class="line">@property (nonatomic, readonly) UIPickerView *pickerView;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带UISegmentedControl控件的cell</span><br><span class="line">@interface FXFormOptionSegmentsCell : FXFormBaseCell</span><br><span class="line">@property (nonatomic, readonly) UISegmentedControl *segmentedControl;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<h5 id="通过协议方式进行节点配置"><a href="#通过协议方式进行节点配置" class="headerlink" title="通过协议方式进行节点配置"></a>通过协议方式进行节点配置</h5><p>也可以不创建属性，使用 FXForms 协议的方法，完成节点的创建和配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@implementation MyForm</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建与配置节点</span><br><span class="line">- (NSArray *)fields</span><br><span class="line">&#123;</span><br><span class="line">    return @[</span><br><span class="line">             &#x2F;&#x2F;这里面配置字典的方法和属性字典的配置方法一一致</span><br><span class="line">             @&#123;FXFormFieldKey: @&quot;email&quot;, FXFormFieldTitle: @&quot;email&quot;&#125;,</span><br><span class="line">             @&#123;FXFormFieldKey: @&quot;phone&quot;, FXFormFieldTitle: @&quot;phone&quot;&#125;,</span><br><span class="line">             @&#123;FXFormFieldKey: @&quot;address&quot;, FXFormFieldTitle: @&quot;address&quot;&#125;,</span><br><span class="line">             @&#123;FXFormFieldKey: @&quot;name&quot;, FXFormFieldTitle: @&quot;name&quot;&#125;</span><br><span class="line">             ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p>fields 方法中可以直接进行节点的创建和配置</p>
<p>FXForms 协议中还提供了两个方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;这个方法用于配置额外的节点，如果需要某些节点不对应任何属性，可以在这个方法中配置</span><br><span class="line">- (NSArray *)extraFields;</span><br><span class="line">&#x2F;&#x2F;这个方法需要返回一个字符串数组，如果需要某些属性不对应节点，即有属性的存在，但是不生成cell，可以将属性名传入返回</span><br><span class="line">- (NSArray *)excludedFields;</span><br></pre></td></tr></table></figure>

<p>节点还可以进行复合，将一个节点的配置作为属性，设置给另一个节点配置类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;子节点信息配置类</span><br><span class="line">@interface SubForm : NSObject&lt;FXForm&gt;</span><br><span class="line">@property(nonatomic,assign)NSInteger age;</span><br><span class="line">@property(nonatomic,assign)NSDate * date;</span><br><span class="line">@end</span><br><span class="line">@implementation SubForm</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;父节点信息配置类</span><br><span class="line">@interface MyForm : NSObject&lt;FXForm&gt;</span><br><span class="line">@property(nonatomic,strong)NSString * email;</span><br><span class="line">@property(nonatomic,strong)NSString * passwd;</span><br><span class="line">@property(nonatomic,assign)BOOL rememberMe;</span><br><span class="line">&#x2F;&#x2F;其中有属性为子节点</span><br><span class="line">@property(nonatomic,strong)SubForm * subForm;</span><br><span class="line">@end</span><br><span class="line">@implementation MyForm</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<h5 id="自定义视图"><a href="#自定义视图" class="headerlink" title="自定义视图"></a>自定义视图</h5><p>创建的视图控制器不是继承于 FXFormViewController，也可以使用 FXForms 来快捷创建表单视图，需要遵守 FXFormControllerDelegate 协议</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface ViewController : UIViewController&lt;FXFormControllerDelegate&gt;</span><br><span class="line">&#x2F;&#x2F;系统的tableView</span><br><span class="line">@property(nonatomic,strong)UITableView * tableView;</span><br><span class="line">&#x2F;&#x2F;FX表单控制器</span><br><span class="line">@property(nonatomic,strong)FXFormController * formController;</span><br><span class="line">@end</span><br><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    self.tableView &#x3D; [[UITableView alloc]initWithFrame:self.view.frame style:UITableViewStyleGrouped];</span><br><span class="line">    self.formController &#x3D; [[FXFormController alloc] init];</span><br><span class="line">    self.formController.tableView &#x3D; self.tableView;</span><br><span class="line">    self.formController.delegate &#x3D; self;</span><br><span class="line">    self.formController.form &#x3D; [[MyForm alloc] init];</span><br><span class="line">    [self.view addSubview:self.tableView];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<h5 id="Cell-属性设置"><a href="#Cell-属性设置" class="headerlink" title="Cell 属性设置"></a>Cell 属性设置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-(NSDictionary *)passwdField&#123;</span><br><span class="line">    return @&#123;@&quot;textLabel.textColor&quot;:[UIColor redColor]&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="ViewController-页面跳转"><a href="#ViewController-页面跳转" class="headerlink" title="ViewController 页面跳转"></a>ViewController 页面跳转</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface RegistrationForm : NSObject &lt;FXForm&gt;</span><br><span class="line">@property (nonatomic, readonly) TermsViewController *termsAndConditions;</span><br><span class="line">@property (nonatomic, readonly) PrivacyPolicyViewController *privacyPolicy;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@implementation RegistrationForm</span><br><span class="line">- (NSArray *)fields</span><br><span class="line">&#123;</span><br><span class="line">    return @[</span><br><span class="line">    	@&#123;FXFormFieldKey: @&quot;termsAndConditions&quot;, FXFormFieldHeader: @&quot;Legal&quot;&#125;,</span><br><span class="line">    	@&quot;privacyPolicy&quot;,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p><img src="/FXForms/WeChat49fb789e1986ffb8541ec06c2e2c0ae4.png" alt="WeChat49fb789e1986ffb8541ec06c2e2c0ae4"></p>
<p>点击跳转到 TermsViewController 控制器</p>
<h5 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@implementation RegistrationForm</span><br><span class="line">- (NSArray *)fields</span><br><span class="line">&#123;</span><br><span class="line">    return @[</span><br><span class="line">    	@&#123;FXFormFieldTitle: @&quot;Submit&quot;, FXFormFieldHeader: @&quot;&quot;, FXFormFieldAction: @&quot;submitRegistrationForm:&quot;&#125;</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface RootFormViewController : FXFormViewController</span><br><span class="line">@end</span><br><span class="line">  </span><br><span class="line">@implementation RootFormViewController</span><br><span class="line">- (void)submitRegistrationForm:(UITableViewCell&lt;FXFormFieldCell&gt; *)cell</span><br><span class="line">&#123;</span><br><span class="line">  	&#x2F;&#x2F;获取表单数据</span><br><span class="line">  	RegistrationForm *form &#x3D; cell.field.form;</span><br><span class="line">&#125;</span><br><span class="line">@end </span><br><span class="line"></span><br></pre></td></tr></table></figure>











<p><a href="%5Bhttps://github.com/nicklockwood/FXForms%5D(https://www.oschina.net/action/GoToLink?url=https://github.com/nicklockwood/FXForms)">FxForms</a></p>
<p><a href="https://my.oschina.net/u/2340880/blog/705221">iOS中表单视图 FXForms</a></p>
]]></content>
  </entry>
  <entry>
    <title>Flutter（二）Hello Flutter</title>
    <url>/2021/10/12/Flutter%EF%BC%88%E4%BA%8C%EF%BC%89Hello-Flutter/</url>
    <content><![CDATA[<h4 id="创建-Flutter-工程"><a href="#创建-Flutter-工程" class="headerlink" title="创建 Flutter 工程"></a>创建 Flutter 工程</h4><p>Android Studio - New Flutter Project </p>
<p>Project Type：</p>
<ul>
<li><p>Application：创建一个 Flutter 应用工程</p>
</li>
<li><p>Plugin：为了给 Android 和 iOS 提供插件应用（暴露的接口）的时候使用</p>
</li>
<li><p>Package：创建一个 Dart 组件发布到 pub 来提供便捷开发，类似一些第三方库</p>
</li>
<li><p>Module：一般用来做混合开发，嵌入到 Android 和 iOS 工程中</p>
</li>
</ul>
<p>终端命令行方式创建：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">flutter create flutter_demo</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter run</span><br></pre></td></tr></table></figure>



<ul>
<li>添加安卓模拟器</li>
</ul>
<p>AVD Manager 添加模拟器</p>
<p>选择安卓模拟器运行卡在 <code>Running Gradle task &#39;assembleDebug&#39;...</code></p>
<p>原因是 Gradle 的 Maven 仓库在国外</p>
<p>修改项目下的 build .gradle 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">google()</span><br><span class="line">mavenCentral()</span><br></pre></td></tr></table></figure>

<p>修改为阿里云镜像</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/google&#x27;</span> &#125;</span><br><span class="line">maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/jcenter&#x27;</span> &#125;</span><br><span class="line">maven &#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/groups/public&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ext.kotlin_version = <span class="string">&#x27;1.3.50&#x27;</span></span><br><span class="line">    repositories &#123;</span><br><span class="line">        /<span class="regexp">/google()</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/mavenCentral()</span></span><br><span class="line"><span class="regexp">	 maven &#123; url &#x27;https:/</span><span class="regexp">/maven.aliyun.com/repository</span><span class="regexp">/google&#x27; &#125;</span></span><br><span class="line"><span class="regexp">	 maven &#123; url &#x27;https:/</span><span class="regexp">/maven.aliyun.com/repository</span><span class="regexp">/jcenter&#x27; &#125;</span></span><br><span class="line"><span class="regexp">	 maven &#123; url &#x27;http:/</span><span class="regexp">/maven.aliyun.com/nexus</span><span class="regexp">/content/groups</span><span class="regexp">/public&#x27; &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    dependencies &#123;</span></span><br><span class="line"><span class="regexp">        classpath &#x27;com.android.tools.build:gradle:4.1.0&#x27;</span></span><br><span class="line"><span class="regexp">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">allprojects &#123;</span></span><br><span class="line"><span class="regexp">    repositories &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/google()</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/mavenCentral()</span></span><br><span class="line"><span class="regexp">	 maven &#123; url &#x27;https:/</span><span class="regexp">/maven.aliyun.com/repository</span><span class="regexp">/google&#x27; &#125;</span></span><br><span class="line"><span class="regexp">	 maven &#123; url &#x27;https:/</span><span class="regexp">/maven.aliyun.com/repository</span><span class="regexp">/jcenter&#x27; &#125;</span></span><br><span class="line"><span class="regexp">	 maven &#123; url &#x27;http:/</span><span class="regexp">/maven.aliyun.com/nexus</span><span class="regexp">/content/groups</span><span class="regexp">/public&#x27; &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p>修改 Flutter 安装目录中的 flutter.gradle 文件</p>
<p><code>/opt/flutter/packages/flutter_tools/gradle/flutter.gradle</code></p>
<h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p><code>Command + o</code> : 全局搜索</p>
<p><code>command + option + l</code> : 格式化代码</p>
<p><code>command + l</code> : 注释代码</p>
<p><code>command + -</code> : 折叠和展开代码</p>
<p><code>command + [</code> : 代码返回</p>
<p><code>command + ]</code> : 代码前进</p>
<p><code>cmd + C / cmd + delete</code> : 删除行</p>
<p><code>ctr + alt + I</code>: 自动缩进对齐</p>
<p><code>opt + sft + up/down</code> : 上下移动代码</p>
<p><code>ctrl + tab</code>: 切换文件</p>
<p><code>shift + command + enter</code> : 行尾自动添加分号，if后面自动加“(){ }”</p>
<p><code>cmd + N</code> : 快速生成getter／setter方法，构造方法，toString()方法等</p>
<p><code>cmd + J</code> : 快速生成模版代码块，如if,while,return</p>
<p><code>opt + cmd + T</code> : Surround with快速调出if,for,try…catch,while等环绕代码</p>
<p><code>opt + ctr + o</code>: 删除未使用的import</p>
<p><code>option + enter</code>: 自动导入用到的包</p>
<p><code>stless</code>: 创建新的 <code>StatelessWidget</code></p>
<p><code>stful</code>: 创建新的 <code>StatefulWidget</code></p>
<h4 id="Flutter-工程"><a href="#Flutter-工程" class="headerlink" title="Flutter 工程"></a>Flutter 工程</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/导入系统包，作用类似 #import &lt;UIKit/</span>UIKit.h&gt;</span><br><span class="line">import <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Welcome to Flutter&#x27;</span>,</span><br><span class="line">      home: <span class="keyword">new</span> Scaffold(</span><br><span class="line">        appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">          title: <span class="keyword">new</span> Text(<span class="string">&#x27;Welcome to Flutter&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: <span class="keyword">new</span> Center(</span><br><span class="line">          child: <span class="keyword">new</span> Text(<span class="string">&#x27;Hello World&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>创建一个 Material APP ，Material 是一种标准的移动端和 web 端的视觉设计语言</p>
</li>
<li><p>man 函数使用了 =&gt; 符号，这是 Dart 中单行函数或方法的简写</p>
</li>
<li><p>该程序继承了 StatelessWidget，将会使本身也成为一个 widget</p>
</li>
<li><p>Scaffold 是 Material APP，中提供的一个 widget，它提供了默认的导航栏、标题和包含主屏幕 widget 树的 body 属性</p>
</li>
<li><p>widget 的主要工作是提供一个 build() 方法来描述如果根据其它较低级别的 widget 来显示自己</p>
</li>
</ul>
<h5 id="文本组件-Text-Widget"><a href="#文本组件-Text-Widget" class="headerlink" title="文本组件 Text Widget"></a>文本组件 Text Widget</h5><p>main.dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;Model/base_widget.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;Model/hello_flutter_demo.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;Model/listView_demo.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(App());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,<span class="comment">//右上角 debug 角标显示</span></span><br><span class="line">      home: Home(),</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primaryColor: Colors.blue, <span class="comment">//主题颜色</span></span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(<span class="comment">//类似 nav</span></span><br><span class="line">      backgroundColor: Colors.grey[<span class="number">100</span>], <span class="comment">//页面背景颜色</span></span><br><span class="line">      appBar: AppBar(<span class="comment">// 导航栏</span></span><br><span class="line">        title: Text(<span class="string">&quot;Demo&quot;</span>),</span><br><span class="line">        foregroundColor: Colors.black,  <span class="comment">//appBar上标题文字背景</span></span><br><span class="line">        backgroundColor: Colors.yellow, <span class="comment">//AppBar背景</span></span><br><span class="line">      ),</span><br><span class="line">      body: MyWidget(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hello_flutter_demo.dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> _textStyle = TextStyle(color: Colors.red, fontSize: <span class="number">40</span>, fontWeight: FontWeight.bold);</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Text(</span><br><span class="line">          <span class="string">&quot;Hello Flutter&quot;</span>,</span><br><span class="line">          textDirection: TextDirection.ltr,</span><br><span class="line">          style: _textStyle),</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>base_widget.dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/cupertino.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/painting.dart&#x27;</span>;</span><br><span class="line"><span class="comment">//文本显示</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextDemo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> TextStyle _textStyle = TextStyle(</span><br><span class="line">    fontSize: <span class="number">16.0</span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> _title = <span class="string">&quot;标题&quot;</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> _name  = <span class="string">&quot;名字&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Text(</span><br><span class="line">      <span class="string">&quot;《<span class="subst">$&#123; _title &#125;</span>》-- <span class="subst">$_name</span> 123445&quot;</span>,</span><br><span class="line">      textAlign: TextAlign.center,</span><br><span class="line">      style: _textStyle,</span><br><span class="line">      maxLines: <span class="number">4</span>,</span><br><span class="line">      overflow: TextOverflow.ellipsis,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//富文本显示</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RichTextDemo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> RichText(</span><br><span class="line">      text: TextSpan(</span><br><span class="line">        text: <span class="string">&quot;富文本文字测试&quot;</span>,</span><br><span class="line">        style: TextStyle(fontSize: <span class="number">30</span>, color: Colors.black),</span><br><span class="line">        children: &lt;TextSpan&gt; [</span><br><span class="line">          TextSpan(</span><br><span class="line">            text: <span class="string">&quot;文本1&quot;</span>,</span><br><span class="line">            style: TextStyle(fontSize: <span class="number">10</span>, color: Colors.red),</span><br><span class="line">          ),</span><br><span class="line">          TextSpan(</span><br><span class="line">            text: <span class="string">&quot;文本2&quot;</span>,</span><br><span class="line">            style: TextStyle(fontSize: <span class="number">15</span>, color: Colors.green),</span><br><span class="line">          ),</span><br><span class="line">          TextSpan(</span><br><span class="line">            text: <span class="string">&quot;文本3&quot;</span>,</span><br><span class="line">            style: TextStyle(fontSize: <span class="number">20</span>, color: Colors.blue),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseWidgetDmoe</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: Colors.yellow,</span><br><span class="line">      child: Row(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Container(</span><br><span class="line">            width: <span class="number">100</span>,</span><br><span class="line">            height: <span class="number">100</span>,</span><br><span class="line">            <span class="comment">//padding: EdgeInsets.only(left: 30, right: 30, top: 10, bottom: 10),</span></span><br><span class="line">            padding: EdgeInsets.all(<span class="number">30</span>),</span><br><span class="line">            color: Colors.red,</span><br><span class="line">            child: Icon(</span><br><span class="line">              Icons.add,</span><br><span class="line">              size: <span class="number">45</span>,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/10/12/Flutter%EF%BC%88%E4%BA%8C%EF%BC%89Hello-Flutter/richText.jpg" alt="richText"></p>
<p>Text 的构造方法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Text(<span class="keyword">this</span>.data, &#123;  <span class="comment">//Text显示的内容</span></span><br><span class="line">Key key,</span><br><span class="line"><span class="keyword">this</span>.style, <span class="comment">//Text显示的样式</span></span><br><span class="line"><span class="keyword">this</span>.textAlign,<span class="comment">//文本应该如何水平对齐,TextAlign.start,end 或者center</span></span><br><span class="line"><span class="keyword">this</span>.textDirection, <span class="comment">//文本方向,TextDirection.ltr\TextDirection.rtl</span></span><br><span class="line"><span class="keyword">this</span>.locale,</span><br><span class="line"><span class="keyword">this</span>.softWrap,  <span class="comment">//是否自动换行，若为false，文字将不考虑容器大小，单行显示，超出屏幕部分将默认截断处理</span></span><br><span class="line"><span class="keyword">this</span>.overflow, <span class="comment">//当文字超出屏幕的时候，如何处理,TextOverflow.clip(裁剪)\TextOverflow.fade(渐隐)\TextOverflow.ellipsis(省略号)</span></span><br><span class="line"><span class="keyword">this</span>.textScaleFactor, <span class="comment">//字体显示倍率，上面的例子使用的字体大小是20.0，将字体设置成10.0，然后倍率为2</span></span><br><span class="line"><span class="keyword">this</span>.maxLines, <span class="comment">//最大行数设置</span></span><br><span class="line"><span class="keyword">this</span>.semanticsLabel,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>TextStyle 属性</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TextStyle(&#123;</span><br><span class="line">  <span class="keyword">this</span>.inherit: <span class="keyword">true</span>,  <span class="comment">// 为false的时候不显示</span></span><br><span class="line">  <span class="keyword">this</span>.color,          <span class="comment">// 颜色 </span></span><br><span class="line">  <span class="keyword">this</span>.fontSize,       <span class="comment">// 字号</span></span><br><span class="line">  <span class="keyword">this</span>.fontWeight,     <span class="comment">// 字重，加粗也用这个字段  FontWeight.w700</span></span><br><span class="line">  <span class="keyword">this</span>.fontStyle,      <span class="comment">// FontStyle.normal  FontStyle.italic斜体</span></span><br><span class="line">  <span class="keyword">this</span>.letterSpacing,  <span class="comment">// 字符间距  就是单个字母或者汉字之间的间隔，可以是负数</span></span><br><span class="line">  <span class="keyword">this</span>.wordSpacing,    <span class="comment">// 字间距 句字之间的间距</span></span><br><span class="line">  <span class="keyword">this</span>.textBaseline,   <span class="comment">// 基线，两个值，字面意思是一个用来排字母的，一人用来排表意字的（类似中文）</span></span><br><span class="line">  <span class="keyword">this</span>.height,         <span class="comment">// 当用来Text控件上时，行高（会乘以fontSize,所以不以设置过大）</span></span><br><span class="line">  <span class="keyword">this</span>.decoration,     <span class="comment">// 添加上划线，下划线，删除线 </span></span><br><span class="line">  <span class="keyword">this</span>.decorationColor,<span class="comment">// 划线的颜色</span></span><br><span class="line">  <span class="keyword">this</span>.decorationStyle,<span class="comment">// 这个style可能控制画实线，虚线，两条线，点, 波浪线等</span></span><br><span class="line">  <span class="keyword">this</span>.debugLabel,</span><br><span class="line">  <span class="built_in">String</span> fontFamily,   <span class="comment">// 字体</span></span><br><span class="line">  <span class="built_in">String</span> package,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="列表-ListView"><a href="#列表-ListView" class="headerlink" title="列表 ListView"></a>列表 ListView</h5><p>Car.dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Car(&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.name,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.imageUrl,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> imageUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模型数组</span></span><br><span class="line"><span class="keyword">final</span> <span class="built_in">List</span>&lt;Car&gt; datas = [</span><br><span class="line">  Car(</span><br><span class="line">    name: <span class="string">&#x27;保时捷918 Spyder&#x27;</span>,</span><br><span class="line">    imageUrl:</span><br><span class="line">    <span class="string">&#x27;https://upload-images.jianshu.io/upload_images/2990730-7d8be6ebc4c7c95b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#x27;</span>,</span><br><span class="line">  ),</span><br><span class="line">  Car(</span><br><span class="line">    name: <span class="string">&#x27;兰博基尼Aventador&#x27;</span>,</span><br><span class="line">    imageUrl:</span><br><span class="line">    <span class="string">&#x27;https://upload-images.jianshu.io/upload_images/2990730-e3bfd824f30afaac?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>listView_demo.dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;Car.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListViewDemo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Widget _cellForRow(BuildContext contex, <span class="built_in">int</span> index) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: Colors.white,</span><br><span class="line">      margin: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">      child: Column(</span><br><span class="line">        children: [</span><br><span class="line">          Image.network(</span><br><span class="line">              datas[index].imageUrl</span><br><span class="line">          ),</span><br><span class="line">          SizedBox(</span><br><span class="line">            height: <span class="number">10</span>,</span><br><span class="line">          ),</span><br><span class="line">          Text(</span><br><span class="line">              datas[index].name,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                fontWeight: FontWeight.w400,</span><br><span class="line">                fontSize: <span class="number">18</span>,</span><br><span class="line">                fontStyle: FontStyle.values[<span class="number">1</span>],</span><br><span class="line">              ),</span><br><span class="line">          ),</span><br><span class="line">          Container(height: <span class="number">20</span>,)</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.builder(</span><br><span class="line">      itemCount: datas.length,</span><br><span class="line">      itemBuilder: _cellForRow,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/10/12/Flutter%EF%BC%88%E4%BA%8C%EF%BC%89Hello-Flutter/listView.jpg" alt="listView"></p>
<h5 id="使用-packages"><a href="#使用-packages" class="headerlink" title="使用 packages"></a>使用 packages</h5><p>pubspec 文件管理 Flutter 应用程序的 assets（资源，如图片、package等）在 pubspec.yaml 中，将 english_word 添加到依赖项列表</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">dependencies:</span></span><br><span class="line">  <span class="symbol">flutter:</span></span><br><span class="line">    <span class="symbol">sdk:</span> flutter</span><br><span class="line"></span><br><span class="line">  <span class="symbol">cupertino_icons:</span> ^<span class="number">0</span>.<span class="number">1.0</span></span><br><span class="line">  <span class="symbol">english_words:</span> ^<span class="number">4.0</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>Android Studio 编辑器视图中查看 pubspec.yaml 时，点击右上角 Pub get，将会将依赖包安装到项目，可以在控制台看到 flutter package get </p>
<p>或者在 Terminal 中输入 flutter package get  安装依赖包</p>
<p>安装成功后在 lib/main.dart 中，引入 english_words</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:english_words/english_words.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h4 id="报错问题"><a href="#报错问题" class="headerlink" title="报错问题"></a>报错问题</h4><h5 id="1-flutter-pub-get-安装包卡住"><a href="#1-flutter-pub-get-安装包卡住" class="headerlink" title="1. flutter pub get 安装包卡住"></a>1. flutter pub get 安装包卡住</h5><p>网上好多说需要配置国内镜像就可以了，在 <code>~/.bash_profile</code> 添加 </p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 官方提供的国内镜像</span></span><br><span class="line">export PUB_HOSTED_URL=<span class="symbol">https:</span>/<span class="regexp">/pub.flutter-io.cn</span></span><br><span class="line"><span class="regexp">export FLUTTER_STORAGE_BASE_URL=https:/</span><span class="regexp">/storage.flutter-io.cn</span></span><br></pre></td></tr></table></figure>

<p><code>source ~/.bash_profile</code></p>
<p>可配置了还是会卡住，直接下载 package 配置本地路径了</p>
<p><code>https://pub.flutter-io.cn</code> 搜索包 <code>english_word</code> 下载最新版本</p>
<p> 放到项目目录 <code>plugin/english_words</code></p>
<p>pubspec.yaml 中配置包路径</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">dependencies:</span></span><br><span class="line">  <span class="symbol">flutter:</span></span><br><span class="line">    <span class="symbol">sdk:</span> flutter</span><br><span class="line"></span><br><span class="line">  <span class="symbol">cupertino_icons:</span> ^<span class="number">0</span>.<span class="number">1.0</span></span><br><span class="line">  <span class="symbol">english_words:</span> </span><br><span class="line">  	<span class="symbol">path:</span>  plugin/english_words/</span><br></pre></td></tr></table></figure>











<p><a href="https://gitee.com/other_other/flutter.git">hello_flutter</a></p>
<p><a href="https://www.jianshu.com/p/41f1d9d6079c">配置Flutter环境ForMac</a></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+GitHub 搭建博客</title>
    <url>/2020/11/17/Hexo-GitHub-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装node.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>
<p>查看版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<p>npm是node.js的包管理工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>Hexo是一个快速、简洁高效博客框架</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>安装完成后桌面建一个blog文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;Desktop &amp;&amp; mkdir blog &amp;&amp; cd blog</span><br></pre></td></tr></table></figure>
<p>初始化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>安装依赖包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>新建的框架目录如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|--_config.yml      &#x2F;&#x2F;网站的配置信息</span><br><span class="line">|--package.json     &#x2F;&#x2F;项目包信息</span><br><span class="line">|--scaffolds        &#x2F;&#x2F;模板文件，Hexo根据scaffolds中的模板来新建文件</span><br><span class="line">|--source           &#x2F;&#x2F;存放用户资源的地方</span><br><span class="line">|  |--_drafts       &#x2F;&#x2F;存放草稿</span><br><span class="line">|  |--_posts        &#x2F;&#x2F;存放文章</span><br><span class="line">|--themes           &#x2F;&#x2F;主题文件夹</span><br></pre></td></tr></table></figure>
<h4 id="部署到GitHub-Pages"><a href="#部署到GitHub-Pages" class="headerlink" title="部署到GitHub Pages"></a>部署到GitHub Pages</h4><p>安装 hexo-deployer-git工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>修改_config.yml中的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;caodaxun&#x2F;caodaxun.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>
<p>查看 <code>https://caodaxun.github.io</code> 是否部署成功</p>
<h4 id="安装-NexT-主题"><a href="#安装-NexT-主题" class="headerlink" title="安装 NexT 主题"></a>安装 NexT 主题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>
<p>主题更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm update hexo-theme-next</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd themes&#x2F;next &amp;&amp; git pull</span><br></pre></td></tr></table></figure>

<h4 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h4><h5 id="配置添加文章自动打开编辑器"><a href="#配置添加文章自动打开编辑器" class="headerlink" title="配置添加文章自动打开编辑器"></a>配置添加文章自动打开编辑器</h5><p>blog 目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir scripts &amp;&amp; touch open.js</span><br></pre></td></tr></table></figure>

<p>添加代码保存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var exec &#x3D; require(&#39;child_process&#39;).exec;</span><br><span class="line">hexo.on(&#39;new&#39;, function(data)&#123;</span><br><span class="line">    exec(&#39;open -a &quot;&#x2F;Applications&#x2F;Typora.app&quot; &#39; + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>新建文章  <code>hexo new &quot;Test&quot;</code>  会自动打开 Typora 编辑器</p>
<p>写完后生成静态网页部署到 <code>github</code> 上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g -d				#直接生成页面发布</span><br></pre></td></tr></table></figure>

<h5 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h5><p>调试的时候可以边修改，边刷新查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean			#清除缓存</span><br><span class="line">hexo g				#生成静态页面</span><br><span class="line">hexo s --debug  #调试模式 http:&#x2F;&#x2F;localhost:4000&#x2F;进行访问</span><br></pre></td></tr></table></figure>

<p>调试模式有时会出现端口占用情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lsof -i :4000</span><br><span class="line">sudo kill -9 进程PID</span><br></pre></td></tr></table></figure>

<h5 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h5><p>安装插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-marked</span><br></pre></td></tr></table></figure>

<p>修改  <code>config.yml</code>  配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure>

<p>之后就可以使用 <code>![图片](image.jpg)</code> 访问图片了</p>
<h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h4><h5 id="添加菜单"><a href="#添加菜单" class="headerlink" title="添加菜单"></a>添加菜单</h5><p><code>hexo new page</code>添加页面，添加后文件在 <code>source/</code> 目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new about &quot;about&quot;</span><br></pre></td></tr></table></figure>

<p>配置标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2020-11-18 12:42:18</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>配置分类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2020-11-18 12:31:50</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>给文章配置分类和标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 测试下</span><br><span class="line">date: 2020-11-17 15:02:26</span><br><span class="line">tags: </span><br><span class="line">    - 标签1</span><br><span class="line">categories: </span><br><span class="line">    - 分类1</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>修改主题配置<code>themes/next/_ocnfig.yml</code>，|| 后面的是图片名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">    home: &#x2F; || fa fa-home</span><br><span class="line">    archives: &#x2F;archives || fa fa-archive</span><br><span class="line">    categories: &#x2F;categories || fa fa-th</span><br><span class="line">    tags: &#x2F;tags || fa fa-tags</span><br><span class="line">    about: &#x2F;about || fa fa-user</span><br></pre></td></tr></table></figure>

<h5 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p><code>config.yml</code> 新增</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<p>修改主题配置文件 <code>themes/next/_config.yml</code> 修改 <code>local_search</code>的 <code>enable</code> 为<code>true</code></p>
<h5 id="添加背景动画"><a href="#添加背景动画" class="headerlink" title="添加背景动画"></a>添加背景动画</h5><p>进入 <code>Hexo</code> ，带 <code>scaffolds  source  themes  _config.yml  package.json</code>目录</p>
<p>新建 <code>footer.swig</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script color&#x3D;&quot;0,0,255&quot; opacity&#x3D;&quot;0.5&quot; zIndex&#x3D;&quot;-1&quot; count&#x3D;&quot;99&quot; src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;canvas-nest.js@1&#x2F;dist&#x2F;canvas-nest.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><code>themes/next/_config.yml</code> 修改 <code>custom_file_path</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">footer: source&#x2F;_data&#x2F;footer.swig</span><br></pre></td></tr></table></figure>

<p>查看图：</p>
<p><img src="/2020/11/17/Hexo-GitHub-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/%E8%83%8C%E6%99%AF.png" alt="背景"></p>
<h4 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-blog-encrypt --save</span><br></pre></td></tr></table></figure>

<p>或者直接在 <code>package.json</code> 中直接配置依赖，再 <code>npm install</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;hexo-blog-encrypt&quot;: &quot;3.0.13&quot;,</span><br></pre></td></tr></table></figure>

<p><code>config.yml</code>中添加 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Security</span><br><span class="line">encrypt:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure>

<p>将<code>password</code>添加到文章信息头</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">password: xxxxxx</span><br><span class="line">abstract: 输入密码</span><br><span class="line">message: 输入密码</span><br></pre></td></tr></table></figure>

<h4 id="备份博客源文件"><a href="#备份博客源文件" class="headerlink" title="备份博客源文件"></a>备份博客源文件</h4><p>直接放码云了，码云上新建仓库 Hexo</p>
<p>本地新建同名文件 Hexo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd Hexo </span><br><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>本地和远程绑定 &amp;&amp; 拉取远程代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin https:&#x2F;&#x2F;gitee.com&#x2F;xxxx&#x2F;hexo.git</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>

<p>新建或修改 <code>.gitignore</code> 文件，加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*.log</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br></pre></td></tr></table></figure>

<p>把 Blog 里面的代码拖到 Hexo 文件，提交到码云</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;提交备份&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>远程代码有更新时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>

<p>还是直接用 SourceTree 工具吧，Git命令一段时间不用就会忘</p>
<h4 id="报错问题"><a href="#报错问题" class="headerlink" title="报错问题"></a>报错问题</h4><ul>
<li>SSL_ERROR_SYSCALL in connection to github.com:443</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;caodaxun&#x2F;caodaxun.github.io&#x2F;&#39;: LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (&#x2F;Users&#x2F;xx&#x2F;Desktop&#x2F;Hexo&#x2F;node_modules&#x2F;hexo-deployer-git&#x2F;node_modules&#x2F;hexo-util&#x2F;lib&#x2F;spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:310:20)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal&#x2F;child_process.js:275:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#39;s wrong. Maybe you can find the solution here: %s https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;troubleshooting.html</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<p>把 hexo 项目根目录下的 _config.yml 文件中把仓库地址 https 改为 ssh 地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519-sk -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>

<p>直接回车，会在 <code>~/.ssh</code> 目录生成 <code>id_ed25519</code> 和 <code>id_ed25519.pub</code> 文件</p>
<p>拷贝文件内容 <code>pbcopy &lt; ~/.ssh/id_ed25519.pub</code> 或直接打开拷贝，到 git 上添加 sshkey</p>
<p><a href="https://hexo.io/zh-cn/docs/">Hexo</a></p>
<p><a href="https://github.com/theme-next/hexo-theme-next">theme-next</a></p>
]]></content>
  </entry>
  <entry>
    <title>KVO KVC</title>
    <url>/2021/07/06/KVO-KVC/</url>
    <content><![CDATA[<h4 id="KVC"><a href="#KVC" class="headerlink" title="KVC"></a>KVC</h4><p><code>KVC</code> 键值编码，一种间接访问对象属性的机制，通过字符串访问对象属性</p>
<h5 id="setValue-forKey"><a href="#setValue-forKey" class="headerlink" title="setValue:forKey"></a>setValue:forKey</h5><p>查找对应 key 的 setter 方法，顺序为：<code>set&lt;Key&gt; -&gt; _set&lt;Key&gt; -&gt; setIs&lt;Key&gt;</code></p>
<p>查找到则直接设置属性的 value</p>
<p>如果没有，检查 <code>accessInstanceVariableDirectly</code> 是否允许访问成员变量</p>
<p>如果 YES，则查找实例变量，顺序为：<code>_&lt;Key&gt; -&gt; _is&lt;Key&gt; -&gt; &lt;Key&gt; -&gt; &lt;isKey&gt;</code></p>
<p>找到实例变量则赋值，否则执行 <code>setValueforUndefineKey:</code> 方法，抛出 <code>NSUndefinedKeyException</code></p>
<h5 id="valueforKey"><a href="#valueforKey" class="headerlink" title="valueforKey:"></a>valueforKey:</h5><p>查找对应 key 的 getter 方法，顺序为：<code>get&lt;Key&gt; -&gt; &lt;key&gt; -&gt; is&lt;Key&gt; -&gt; _&lt;Key&gt;</code></p>
<p>查找到直接返回结果</p>
<p>如果没有，检查 <code>accessInstanceVariableDirectly</code> 是否允许访问成员变量</p>
<p>如果 YES，则查找实例变量，顺序为：<code>_&lt;Key&gt; -&gt; _is&lt;Key&gt; -&gt; &lt;Key&gt; -&gt; &lt;isKey&gt;</code></p>
<p>查找到直接返回结果，否则执行 <code>valueForUndefinedKey:</code> 方法，抛出 <code>NSUndefinedKeyException</code></p>
<h4 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h4><p><code>KeyValueObserving</code> 键值观察者，可以监听对象属性的改变</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.person &#x3D; [[LGPerson alloc] init];</span><br><span class="line">self.person.age &#x3D; 1;</span><br><span class="line">NSKeyValueObservingOptions options &#x3D; NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld;</span><br><span class="line">[self.person addObserver:self forKeyPath:@&quot;age&quot; options:options context:@&quot;1&quot;];</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</span><br><span class="line">    self.person.age &#x3D; 20;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context &#123;</span><br><span class="line">    NSLog(@&quot;%@ %@ %@ %@&quot;, keyPath, object, change, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加观察者后，KVO 会在运行时动态创建一个子类 <code>NSKVONotifing_XXX</code>，将对象的 isa 指向新创建的类</p>
<p>修改对象属性时，会先调用子类 <code>NSKVONotifing_XXX</code> 的 setter 方法</p>
<p>子类 setter 内部会调用：</p>
<ol>
<li><code>willChangeValueForKey:</code></li>
<li>父类原来的 setter</li>
<li><code>didChangeValueForKey:</code></li>
<li>内部会触发监听器的监听方法 <code>(observeValueForKeyPath:ofObject:change:context:)</code></li>
</ol>
<h4 id="Swift-KVO"><a href="#Swift-KVO" class="headerlink" title="Swift KVO"></a>Swift KVO</h4><p>kVO 是一个纯 OC 特性，swift class 需要在声明时加 <code>@objcMembers</code> 关键字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@objcMembers class OCClass: NSObject &#123;</span><br><span class="line">    dynamic var name: String</span><br><span class="line">    init(name: String) &#123;</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>观察的闭包需要强引用，否则函数离开这个观察闭包后会被回收</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var occlass: OCClass?</span><br><span class="line">var observation: NSKeyValueObservation?</span><br><span class="line">  </span><br><span class="line">occlass &#x3D; OCClass(name: &quot;aa&quot;)</span><br><span class="line">observation &#x3D; occlass!.observe(\.name) &#123; obj, changed in</span><br><span class="line">    let new &#x3D; obj.name</span><br><span class="line">    print(&quot;new:\(new)&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">override func touchesBegan(_ touches: Set&lt;UITouch&gt;, with event: UIEvent?) &#123;</span><br><span class="line">    occlass?.name &#x3D; &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><h5 id="1、直接修改成员变量会触发-KVO-吗"><a href="#1、直接修改成员变量会触发-KVO-吗" class="headerlink" title="1、直接修改成员变量会触发 KVO 吗"></a>1、直接修改成员变量会触发 KVO 吗</h5><p>不会，没有调用重写后的 set 方法</p>
<h5 id="2、手动触发-KVO"><a href="#2、手动触发-KVO" class="headerlink" title="2、手动触发 KVO"></a>2、手动触发 KVO</h5><p>手动调用 <code>willChangeValueForKey:</code> ，<code>didChangeValueForKey:</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[self.person willChangeValueForKey:@&quot;age&quot;];</span><br><span class="line">self.person-&gt;_age &#x3D; 2;</span><br><span class="line">[self.person didChangeValueForKey:@&quot;age&quot;];</span><br></pre></td></tr></table></figure>

<h5 id="3、如何对可变数组进行-KVO"><a href="#3、如何对可变数组进行-KVO" class="headerlink" title="3、如何对可变数组进行 KVO"></a>3、如何对可变数组进行 KVO</h5><p>可变数组添加元素 <code>addObject:</code> 是不会调用 <code>setter</code> 方法的，不会触发 KVO 通知回调</p>
<p>需要使用 <code>mutableArrayValueForKey</code> 获取要操作的可变数组，添加元素</p>
<p>  <code>[[self mutableArrayValueForKey:@“arr”] addObject:item]</code> </p>
]]></content>
  </entry>
  <entry>
    <title>OC对象底层原理</title>
    <url>/2020/11/19/OC%E5%AF%B9%E8%B1%A1%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p><code>NSObject</code> 对象的底层就是一个包含了一个指针的结构体，那么它的大小是不是就是8字节（64位下指针类型占8个字节）？</p>
</blockquote>
<h4 id="class-getInstanceSize"><a href="#class-getInstanceSize" class="headerlink" title="class_getInstanceSize"></a>class_getInstanceSize</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &lt;objc&#x2F;runtime.h&gt;</span><br></pre></td></tr></table></figure>

<p><code>class_getInstanceSize ()</code>可以计算一个类的实例对象实际所需要的空间大小，也就是计算类所对应的结构体的大小</p>
<p>系统在为类的结构体分配内存时内存对齐，以一个指针的长度作为对齐系数，64位系统指针长度为8个字节，类所对应的结构体，头部肯定是一个 <code>isa</code> 指针</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">size_t size &#x3D; class_getInstanceSize([NSObject class]);</span><br><span class="line">NSLog(@&quot;NSObject对象大小：%zd&quot;, size); &#x2F;&#x2F;8</span><br></pre></td></tr></table></figure>

<h4 id="malloc-size"><a href="#malloc-size" class="headerlink" title="malloc_size()"></a>malloc_size()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &lt;malloc&#x2F;malloc.h&gt;</span><br></pre></td></tr></table></figure>

<p><code>malloc_size()</code>，函数的参数是一个指针，可以计算指针所指向内存空间的大小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NSObject *obj &#x3D; [[NSObject alloc] init];</span><br><span class="line">size_t size2 &#x3D; malloc_size((__bridge const void *)(obj));</span><br><span class="line">NSLog(@&quot;对象obj所指向的的内存空间大小：%zd&quot;,size2); &#x2F;&#x2F;16</span><br></pre></td></tr></table></figure>

<p>系统为实例对象分配的内存空间，最小为16个字节</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">instanceSize</span><span class="params">(<span class="keyword">size_t</span> extraBytes)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实例对象内部成员变量所占空间大小 extraBytes通常为0</span></span><br><span class="line">    <span class="keyword">size_t</span> size = alignedInstanceSize() + extraBytes;</span><br><span class="line">    <span class="comment">// CF requires all objects be at least 16 bytes.</span></span><br><span class="line">    <span class="keyword">if</span> (size &lt; <span class="number">16</span>) size = <span class="number">16</span>; <span class="comment">//系统为该实例对象分配的内存空间大小</span></span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p><code>class_getInstanceSize</code> 获取类的实例对象内存大小，本质就是获取实例对象中成员变量的内存大小</p>
<p><code>malloc_size</code> 得到一个指针所指向的内存空间的大小，系统实际分配内存，利用这个可以得到对象所占用的内存大小</p>
<p><code>sizeof()</code> 获取数据类型或变量占用空间大小，这是一个运算符</p>
<p><code>[NSObject alloc]</code> 之后，系统为其分配了16个字节的内存，最终 <code>obj</code> 对象实际使用了其中8个字节内存（也就是其内部的那个 <code>isa</code> 指针所用的8个字节，64位系统下）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface Student : NSObject</span><br><span class="line">&#123;</span><br><span class="line">   @public</span><br><span class="line">    int _age;   &#x2F;&#x2F;4个字节</span><br><span class="line">    int _no;    &#x2F;&#x2F;4个字节</span><br><span class="line">    int _grade; &#x2F;&#x2F;4个字节</span><br><span class="line">&#125; </span><br><span class="line">Student *std &#x3D; [[Student alloc] init];</span><br><span class="line">size_t size &#x3D; class_getInstanceSize([Student class]); &#x2F;&#x2F;24</span><br><span class="line">size_t size &#x3D; malloc_size((__bridge const void *)(std)); &#x2F;&#x2F;32</span><br></pre></td></tr></table></figure>

<p><code>Student</code> 结构体所有成员变量所需要的总空间为20个字节，根据内存对齐的原则，最后结构体所需要的空间应该是8的倍数，也就是24个字节；实际系统分配内存大小是16的倍数32个字节</p>
<h4 id="LLDB查看内存"><a href="#LLDB查看内存" class="headerlink" title="LLDB查看内存"></a>LLDB查看内存</h4><p><img src="/2020/11/19/OC%E5%AF%B9%E8%B1%A1%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/alloc.png" alt="alloc"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x281442fa0-0x281442fa0-0x281442fa0</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(lldb) po p</span><br><span class="line">&lt;LGPerson: <span class="number">0x281442fa0</span>&gt;</span><br><span class="line">(lldb) x p</span><br><span class="line"><span class="number">0x281442fa0</span>: <span class="number">2</span>d <span class="number">17</span> d7 <span class="number">02</span> a1 <span class="number">41</span> <span class="number">00</span> <span class="number">00</span> <span class="number">28</span> c0 d6 <span class="number">02</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  -....A..(.......</span><br><span class="line"><span class="number">0x281442fb0</span>: <span class="number">0</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">64</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  ........d.......</span><br><span class="line">(lldb) po <span class="number">0x0a</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">(lldb) po <span class="number">0x64</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line">(lldb) po <span class="number">0x0102d6c028</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>前8位<code>2d 17 d7 02 a1 41 00 00</code> 是<code>isa</code>的内存8个字节</p>
<p><code>0a 00 00 00</code> 是 <code>age</code> 占4个字节</p>
<p><code>64 00 00 00</code> 是 <code>height</code> 占4个字节</p>
<p><code>28 c0 d6 02 01 00 00 00</code> 是 <code>name</code> 占8个字节</p>
<h4 id="alloc-init"><a href="#alloc-init" class="headerlink" title="alloc init"></a>alloc init</h4><img src="allocinit.png" alt="allocinit" style="zoom:80%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ (id)alloc &#123;</span><br><span class="line">    return _objc_rootAlloc(self);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_objc_rootAlloc(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    return callAlloc(cls, false&#x2F;*checkNil*&#x2F;, true&#x2F;*allocWithZone*&#x2F;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static ALWAYS_INLINE id</span><br><span class="line">callAlloc(Class cls, bool checkNil, bool allocWithZone&#x3D;false)</span><br><span class="line">&#123;</span><br><span class="line">#if __OBJC2__</span><br><span class="line">    if (slowpath(checkNil &amp;&amp; !cls)) return nil;</span><br><span class="line">    if (fastpath(!cls-&gt;ISA()-&gt;hasCustomAWZ())) &#123;</span><br><span class="line">        return _objc_rootAllocWithZone(cls, nil);</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; No shortcuts available.</span><br><span class="line">    if (allocWithZone) &#123;</span><br><span class="line">        return ((id(*)(id, SEL, struct _NSZone *))objc_msgSend)(cls, @selector(allocWithZone:), nil);</span><br><span class="line">    &#125;</span><br><span class="line">    return ((id(*)(id, SEL))objc_msgSend)(cls, @selector(alloc));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id</span><br><span class="line">_objc_rootAllocWithZone(Class cls, malloc_zone_t *zone __unused)&#x2F;&#x2F; alloc 源码 第四步</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; allocWithZone under __OBJC2__ ignores the zone parameter</span><br><span class="line">    &#x2F;&#x2F;zone 参数不再使用 类创建实例内存空间</span><br><span class="line">    return _class_createInstanceFromZone(cls, 0, nil,</span><br><span class="line">                                         OBJECT_CONSTRUCT_CALL_BADALLOC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>alloc 的核心操作：</p>
<p><code>cls-&gt;instanceSize</code>：计算需要开辟内存空间大小</p>
<p><code>calloc</code>：申请内存，返回指针地址</p>
<p><code>objc-&gt;initInstanceIsa</code>：将类与 isa 关联</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static ALWAYS_INLINE id</span><br><span class="line">_class_createInstanceFromZone(Class cls, size_t extraBytes, void *zone,</span><br><span class="line">                              int construct_flags &#x3D; OBJECT_CONSTRUCT_NONE,</span><br><span class="line">                              bool cxxConstruct &#x3D; true,</span><br><span class="line">                              size_t *outAllocatedSize &#x3D; nil)&#x2F;&#x2F; alloc 源码 第五步</span><br><span class="line">&#123;</span><br><span class="line">    ASSERT(cls-&gt;isRealized()); &#x2F;&#x2F;检查是否已经实现</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Read class&#39;s info bits all at once for performance</span><br><span class="line">    &#x2F;&#x2F;一次性读取类的位信息以提高性能</span><br><span class="line">    bool hasCxxCtor &#x3D; cxxConstruct &amp;&amp; cls-&gt;hasCxxCtor();</span><br><span class="line">    bool hasCxxDtor &#x3D; cls-&gt;hasCxxDtor();</span><br><span class="line">    bool fast &#x3D; cls-&gt;canAllocNonpointer();</span><br><span class="line">    size_t size;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;计算需要开辟的内存大小，传入的extraBytes 为 0</span><br><span class="line">    size &#x3D; cls-&gt;instanceSize(extraBytes);</span><br><span class="line">    if (outAllocatedSize) *outAllocatedSize &#x3D; size;</span><br><span class="line"></span><br><span class="line">    id obj;</span><br><span class="line">    if (zone) &#123;</span><br><span class="line">        obj &#x3D; (id)malloc_zone_calloc((malloc_zone_t *)zone, 1, size);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;申请内存</span><br><span class="line">        obj &#x3D; (id)calloc(1, size);</span><br><span class="line">    &#125;</span><br><span class="line">    if (slowpath(!obj)) &#123;</span><br><span class="line">        if (construct_flags &amp; OBJECT_CONSTRUCT_CALL_BADALLOC) &#123;</span><br><span class="line">            return _objc_callBadAllocHandler(cls);</span><br><span class="line">        &#125;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!zone &amp;&amp; fast) &#123;</span><br><span class="line">        &#x2F;&#x2F;将 cls类 与 obj指针（即isa） 关联</span><br><span class="line">        obj-&gt;initInstanceIsa(cls, hasCxxDtor);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; Use raw pointer isa on the assumption that they might be</span><br><span class="line">        &#x2F;&#x2F; doing something weird with the zone or RR.</span><br><span class="line">        obj-&gt;initIsa(cls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (fastpath(!hasCxxCtor)) &#123;</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    construct_flags |&#x3D; OBJECT_CONSTRUCT_FREE_ONFAILURE;</span><br><span class="line">    return object_cxxConstructFromClass(obj, cls, construct_flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><a href="https://blog.csdn.net/u013480070/article/details/88365141">OC对象的本质（上）：OC对象的底层实现原理</a><br><a href="https://opensource.apple.com/tarballs/objc4/">objc4-781</a><br><a href="https://juejin.im/post/5d9c829df265da5ba46f49c9#heading-8">objc4-756.2源码编译</a><br><a href="https://www.jianshu.com/p/d4f4769eaa1a">macOS 10.15最新objc源码编译调试</a></p>
]]></content>
  </entry>
  <entry>
    <title>Python</title>
    <url>/2021/03/02/Python/</url>
    <content><![CDATA[<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p><code>r&#39;&#39; </code> 表示 <code>&#39;&#39;</code>  内部的字符串不转义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(r&#39;\\\t\\&#39;)</span><br><span class="line">\\\t\\</span><br></pre></td></tr></table></figure>

<p>多行输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&#39;&#39;&#39;line1</span><br><span class="line">line2</span><br><span class="line">line3&#39;&#39;&#39;)</span><br></pre></td></tr></table></figure>

<p>输入 让用户输入并存放到一个变量里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; name &#x3D; input()</span><br><span class="line">John</span><br><span class="line">&gt;&gt;&gt; print(name)</span><br><span class="line">John</span><br><span class="line">字符串提示输入 </span><br><span class="line">&gt;&gt;&gt; name &#x3D; input(&#39;please enter your name: &#39;)</span><br><span class="line">please enter your name: J</span><br></pre></td></tr></table></figure>

<h5 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h5><p>% 运算符就是用来格式化字符串的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#39;Hello, %s&#39; % &#39;world&#39;)</span><br><span class="line">Hello, world</span><br></pre></td></tr></table></figure>

<p>占位符：%d 整数  %f 浮点数 %s 字符串 %x 十六进制数</p>
<p>如果字符串里面有 % ，需要转义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;growth rate: %d %%&#39; % 7</span><br></pre></td></tr></table></figure>

<h5 id="list-列表"><a href="#list-列表" class="headerlink" title="list 列表"></a>list 列表</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classmate &#x3D; [&#39;Michael&#39;, &#39;Bob&#39;]</span><br><span class="line">print(classmate, len(classmate), classmate[0])</span><br></pre></td></tr></table></figure>

<p>取最后一个元素 <code>classmate[-1]</code> 倒数第 2 个 <code>classmate[-2]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;追加元素</span><br><span class="line">classmate.append(&#39;Adam&#39;)</span><br><span class="line">&#x2F;&#x2F;插入元素到指定位置</span><br><span class="line">classmate.insert(1, &#39;Jack&#39;)</span><br><span class="line">&#x2F;&#x2F;删除最后元素</span><br><span class="line">classmate.pop()</span><br><span class="line">&#x2F;&#x2F;删除指定位置元素</span><br><span class="line">classmate.pop(1)</span><br><span class="line">&#x2F;&#x2F;替换元素</span><br><span class="line">classmate[1] &#x3D; &#39;Sarah&#39;</span><br></pre></td></tr></table></figure>

<p>list 里面元素类型可以不同，list 元素也可以是 list，取的时候  <code>s[2][1]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">L &#x3D; [&#39;Apple&#39;, 123, True]</span><br><span class="line">s &#x3D; [&#39;python&#39;, &#39;java&#39;, [&#39;asp&#39;, &#39;php&#39;], &#39;scheme&#39;]</span><br></pre></td></tr></table></figure>

<h5 id="tuple-元组"><a href="#tuple-元组" class="headerlink" title="tuple 元组"></a>tuple 元组</h5><p>初始化后不能修改，tuple 有元素是 list， list 可以变</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classmates &#x3D; (&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;)</span><br></pre></td></tr></table></figure>

<h5 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">age &#x3D; 3</span><br><span class="line">if age &gt;&#x3D; 18:</span><br><span class="line">    print(&#39;adult&#39;)</span><br><span class="line">elif age &gt;&#x3D; 6:</span><br><span class="line">    print(&#39;teenager&#39;)</span><br><span class="line">else:</span><br><span class="line">    print(&#39;kid&#39;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if x:</span><br><span class="line">    print(&#39;True&#39;)</span><br></pre></td></tr></table></figure>

<h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">names &#x3D; [&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;]</span><br><span class="line">for name in names:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure>

<p>range() 函数，可以生成一个整数序列，通过 list() 函数可以转换成 list</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list(range(5))</span><br><span class="line">[0, 1, 2, 3, 4]</span><br></pre></td></tr></table></figure>

<h5 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h5><p>get() 方法，如果 key 不存在，可以返回 None，或者自己指定的 value</p>
<p>pop(key) 删除一个 key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d &#x3D; &#123;&#39;Michael&#39;: 95, &#39;Bob&#39;: 75, &#39;Tracy&#39;: 85&#125;</span><br><span class="line">d.get(&#39;Thomas&#39;)</span><br><span class="line">d.get(&#39;Thomas&#39;, -1)</span><br><span class="line">d.pop(&#39;Bob&#39;)</span><br></pre></td></tr></table></figure>

<h5 id="set-集合"><a href="#set-集合" class="headerlink" title="set 集合"></a>set 集合</h5><p>没有重复的 key，重复元素会自动过滤</p>
<p>add(key) 添加元素</p>
<p>remove(key) 删除元素</p>
<p>两个 set 可以做数学意义上的交集、并集</p>
<p>创建一个 set 需要提供一个 list 作为集合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; set([1, 2, 3])</span><br><span class="line">s &#x3D; set([1, 1, 2, 2, 3, 3])</span><br><span class="line">s.add(4)</span><br><span class="line">s1 &#x3D; set([4, 5, 6])</span><br><span class="line">s &amp; s1</span><br></pre></td></tr></table></figure>

<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def my_abs(x):</span><br><span class="line">    if x &gt;&#x3D; 0:</span><br><span class="line">        return x</span><br><span class="line">    else:</span><br><span class="line">        return -x</span><br></pre></td></tr></table></figure>

<p>定义空函数什么也不做，pass 用来做占位符，还没写好的函数可以先放一个 pass</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def nop():</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>

<p>参数类型检查 isinstance 内置函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def my_abs(x):</span><br><span class="line">    if not isinstance(x, (int, float)):</span><br><span class="line">        raise TypeError(&#39;bad operand type&#39;)</span><br><span class="line">    if x &gt;&#x3D; 0:</span><br><span class="line">        return x</span><br><span class="line">    else:</span><br><span class="line">        return -x</span><br></pre></td></tr></table></figure>

<h5 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import math</span><br><span class="line">def move(x, y, step, angle&#x3D;0):</span><br><span class="line">    nx &#x3D; x + step * math.cos(angle)</span><br><span class="line">    ny &#x3D; y - step * math.sin(angle)</span><br><span class="line">    return nx, ny</span><br></pre></td></tr></table></figure>

<p>同时获得返回值，返回一个tuple</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x, y &#x3D; move(100, 100, 60, math.pi &#x2F; 6)</span><br></pre></td></tr></table></figure>

<h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><p>调用 power(5)，power(5, 3)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def power(x, n&#x3D;2):</span><br><span class="line">    s &#x3D; 1</span><br><span class="line">    while n &gt; 0:</span><br><span class="line">        n &#x3D; n - 1</span><br><span class="line">        s &#x3D; s * x</span><br><span class="line">    return s</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def enroll(name, gender, age&#x3D;6, city&#x3D;&#39;Beijing&#39;):</span><br><span class="line">    print(&#39;name:&#39;, name)</span><br><span class="line">    print(&#39;gender:&#39;, gender)</span><br><span class="line">    print(&#39;age:&#39;, age)</span><br><span class="line">    print(&#39;city:&#39;, city)</span><br><span class="line"></span><br><span class="line">enroll(&#39;Bob&#39;, &#39;M&#39;, 7) city参数依然是默认</span><br><span class="line">enroll(&#39;Adam&#39;, &#39;M&#39;, city&#x3D;&#39;Tianjin’) age默认 city用传的值</span><br></pre></td></tr></table></figure>

<h5 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def calc(numbers):</span><br><span class="line">    sum &#x3D; 0</span><br><span class="line">    for n in numbers:</span><br><span class="line">        sum &#x3D; sum + n * n</span><br><span class="line">    return sum</span><br></pre></td></tr></table></figure>

<p>调用的时候传入 list 或 tuple</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">calc([1, 2, 3])</span><br><span class="line">calc((1, 3, 5, 7))</span><br></pre></td></tr></table></figure>

<p>改成可变参数，参数前面加一个 * ，函数内部 nubmers 接收的是一个 tuple</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def calc(*numbers):</span><br><span class="line">    sum &#x3D; 0</span><br><span class="line">    for n in numbers:</span><br><span class="line">        sum &#x3D; sum + n * n</span><br><span class="line">    return sum</span><br></pre></td></tr></table></figure>

<p>调用可以传任意参数，或者 0 个参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">calc(1, 2)</span><br><span class="line">calc()</span><br></pre></td></tr></table></figure>

<h5 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h5><p>除了必选参数 name 和 age 外，还接受关键字参数 kw</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def person(name, age, **kw):</span><br><span class="line">    print(&#39;name:&#39;, name, &#39;age:&#39;, age, &#39;other:&#39;, kw)</span><br></pre></td></tr></table></figure>

<p>可以传入任意个数关键字参数，关键字参数在函数内部自动组装为一个 dict</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">person(&#39;Bob&#39;, 35, city&#x3D;&#39;Beijing&#39;)</span><br><span class="line">person(&#39;Adam&#39;, 45, gender&#x3D;&#39;M&#39;, job&#x3D;&#39;Engineer&#39;)</span><br><span class="line"></span><br><span class="line">extra &#x3D; &#123;&#39;city&#39;: &#39;Beijing&#39;, &#39;job&#39;: &#39;Engineer&#39;&#125;</span><br><span class="line">person(&#39;Jack&#39;, 24, city&#x3D;extra[&#39;city&#39;], job&#x3D;extra[&#39;job&#39;])</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;把 extra dict 所有 key-value 用关键字参数传入，kw 将获得一个 dict</span><br><span class="line">person(&#39;Jack&#39;, 24, **extra)</span><br><span class="line">&#x2F;&#x2F;name: Jack age: 24 other: &#123;&#39;city&#39;: &#39;Beijing&#39;, &#39;job&#39;: &#39;Engineer&#39;&#125;</span><br></pre></td></tr></table></figure>

<p>检查参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def person(name, age, **kw):</span><br><span class="line">    if &#39;city&#39; in kw:</span><br><span class="line">        # 有city参数</span><br><span class="line">               pass</span><br><span class="line">    if &#39;job&#39; in kw:</span><br><span class="line">        # 有job参数</span><br><span class="line">               pass</span><br><span class="line">    print(&#39;name:&#39;, name, &#39;age:&#39;, age, &#39;other:&#39;, kw)</span><br></pre></td></tr></table></figure>

<h5 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h5><p>限制关键字参数名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def person(name, age, *, city, job):</span><br><span class="line">    print(name, age, city, job)</span><br><span class="line">    </span><br><span class="line">&gt;&gt;&gt; person(&#39;Jack&#39;, 24, city&#x3D;&#39;Beijing&#39;, job&#x3D;&#39;Engineer&#39;)</span><br></pre></td></tr></table></figure>

<p>如果已经有一个可变参数，后面命名关键字参数就不需要特殊分隔符 * 了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def person(name, age, *args, city, job):</span><br><span class="line">    print(name, age, args, city, job)</span><br></pre></td></tr></table></figure>

<p>调用需要加参数名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">person(&#39;Jack&#39;, 24, job&#x3D;&#39;Engineer&#39;)</span><br></pre></td></tr></table></figure>

<h5 id="参数组合"><a href="#参数组合" class="headerlink" title="参数组合"></a>参数组合</h5><p>必选参数、默认参数、可变参数、命名关键字参数、关键字参数，5种参数可以组合使用</p>
<p>顺序必须是：必选参数、默认参数、可变参数、命名关键字参数、关键字参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def f1(a, b, c&#x3D;0, *args, **kw):</span><br><span class="line">    print(&#39;a &#x3D;&#39;, a, &#39;b &#x3D;&#39;, b, &#39;c &#x3D;&#39;, c, &#39;args &#x3D;&#39;, args, &#39;kw &#x3D;&#39;, kw)</span><br><span class="line"></span><br><span class="line">def f2(a, b, c&#x3D;0, *, d, **kw):</span><br><span class="line">    print(&#39;a &#x3D;&#39;, a, &#39;b &#x3D;&#39;, b, &#39;c &#x3D;&#39;, c, &#39;d &#x3D;&#39;, d, &#39;kw &#x3D;&#39;, kw)</span><br></pre></td></tr></table></figure>

<p>不要用太多组合，否则理解性很差</p>
<h4 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h4><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>L[0:3] 从索引 0 开始取，直到索引 3 为止，不包括 3，如果第一个索引是0，可以省略 L[:3]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">L &#x3D; [&#39;Michael&#39;, &#39;Sarah&#39;, &#39;Tracy&#39;, &#39;Bob&#39;, &#39;Jack&#39;]</span><br><span class="line">print(L[0:3])</span><br></pre></td></tr></table></figure>

<p>支持倒数切片 L[-1] 取倒数第一个元素</p>
<p>0-99的数列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">L &#x3D; list(range(100))</span><br><span class="line">取前10个数   L[:10]</span><br><span class="line">取后10个数   L[-10:]</span><br><span class="line">取前11-20个数 L[10：20]</span><br><span class="line">前10个数每两个取一个  L[:10:2]</span><br><span class="line">所有数每5个取一个  L[::5]</span><br><span class="line">原样复制一个 list  L[:]</span><br></pre></td></tr></table></figure>

<p>tuple 和 str 也可以用切片操作</p>
<h5 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;</span><br><span class="line">for key in d:</span><br><span class="line">	print(key)</span><br><span class="line">	</span><br><span class="line">for value in d.values()</span><br><span class="line">for k, v in d.items()</span><br></pre></td></tr></table></figure>

<p>使用<code>for</code>循环时，只要作用于一个可迭代对象，<code>for</code>循环就可以正常运行</p>
<p>通过 collections 模块的 Iterable 类型判断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections import Iterable</span><br><span class="line">isinstance(&#39;abc&#39;, Iterable)</span><br><span class="line">isinstance([1, 2, 3], Iterable)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i, value in enumerate([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]):</span><br><span class="line">	print(i, value)</span><br></pre></td></tr></table></figure>

<h5 id="列表生成"><a href="#列表生成" class="headerlink" title="列表生成"></a>列表生成</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L &#x3D; [&#39;Hello&#39;, &#39;World&#39;, &#39;IBM&#39;, &#39;Apple&#39;]</span><br><span class="line">&gt;&gt;&gt; [s.lower() for s in L]</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;, &#39;ibm&#39;, &#39;apple&#39;]</span><br></pre></td></tr></table></figure>

<p>要生成 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list(range(1, 11))</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br></pre></td></tr></table></figure>

<p>生成 [1x1, 2x2, 3x3, …, 10x10]</p>
<p>生成列表时 把要生成的元素x*x放到前面 后面for循环就可以把list创建出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [x * x for x in range(1, 11)]</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure>

<p>循环后面还可以加上 if 判断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[x * x for x in range(1, 11) if x % 2 &#x3D;&#x3D; 0]</span><br></pre></td></tr></table></figure>

<p>还可以使用两层循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [m + n for m in &#39;ABC&#39; for n in &#39;XYZ&#39;]</span><br><span class="line">[&#39;AX&#39;, &#39;AY&#39;, &#39;AZ&#39;, &#39;BX&#39;, &#39;BY&#39;, &#39;BZ&#39;, &#39;CX&#39;, &#39;CY&#39;, &#39;CZ&#39;]</span><br></pre></td></tr></table></figure>

<h5 id="生成器-generator"><a href="#生成器-generator" class="headerlink" title="生成器 generator"></a>生成器 generator</h5><p>把列表生成式的 [] 改成 ()，就创建了一个 generator</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g &#x3D; (x * x for x in range(10))</span><br><span class="line">    print(g) &#x2F;&#x2F;&lt;generator object &lt;genexpr&gt; at 0x7f9c13a0bba0&gt;</span><br><span class="line">    for n in g:</span><br><span class="line">        print(n)</span><br></pre></td></tr></table></figure>

<p>generator 在每次调用 next() 的时候执行，遇到 yield 语句返回，再次执行的时候从上次返回的 yield 语句处继续执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def odd():</span><br><span class="line">    print(&#39;step 1&#39;)</span><br><span class="line">    yield 1</span><br><span class="line">    print(&#39;step 2&#39;)</span><br><span class="line">    yield(3)</span><br><span class="line">    print(&#39;step 3&#39;)</span><br><span class="line">    yield(5)</span><br></pre></td></tr></table></figure>

<p>调用时首先生成一个 generator 对象 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">o &#x3D; odd()</span><br><span class="line">next(o)</span><br><span class="line">next(o)</span><br></pre></td></tr></table></figure>

<h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><p>可直接作用于 for 循环的对象称为可迭代对象： <code>Iterable</code></p>
<p>使用 isinstance()，判断一个对象是否是 Iterable</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections.abc import Iterable</span><br><span class="line">isinstance([], Iterable)</span><br><span class="line">isinstance(&#39;abc&#39;, Iterable)</span><br></pre></td></tr></table></figure>

<p>生成器不但可以作用于 for 循环，还可以被 next 函数不断调用返回下一个值，知道最后抛出 StopIteration 错误表示无法继续返回下一个值</p>
<p>可以被 next() 函数调用并返回下一个值的对象称为迭代器：<code> Iterator</code></p>
<p>把 list、dict、str 等 Iterable 变成 Iterator 可以使用 iter() 函数</p>
<h5 id="函数式变成"><a href="#函数式变成" class="headerlink" title="函数式变成"></a>函数式变成</h5><ul>
<li>高阶函数</li>
<li>返回函数</li>
<li>匿名函数</li>
<li>装饰器</li>
</ul>
<p>函数对象有一个  <code>__name__</code> 属性，可以拿到函数的名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def now():</span><br><span class="line">...     print(&#39;2015-3-25&#39;)</span><br><span class="line">&gt;&gt;&gt; now.__name__</span><br></pre></td></tr></table></figure>

<p>代码运行期间动态增加功能的方式，称为装饰器 Decorator</p>
<ul>
<li>偏函数</li>
</ul>
<h5 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h5><p>用包来组织模块，每个包目录下都有一个 <code>__init__.py</code>，文件，必须存在，否则 python 就把这个目录当成一个普通目录，而不是一个包，可以是空文件</p>
<ul>
<li>使用模块</li>
</ul>
<p>以内建的 sys 模块为例， 编写一个 hello 模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-  </span><br><span class="line"></span><br><span class="line">&#39; a test module &#39; # 任何模块代码的第一个字符串都被视为模块的文档注释</span><br><span class="line"></span><br><span class="line">__author__ &#x3D; &#39;Michael Liao&#39;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">    args &#x3D; sys.argv</span><br><span class="line">    if len(args)&#x3D;&#x3D;1:</span><br><span class="line">        print(&#39;Hello, world!&#39;)</span><br><span class="line">    elif len(args)&#x3D;&#x3D;2:</span><br><span class="line">        print(&#39;Hello, %s!&#39; % args[1])</span><br><span class="line">    else:</span><br><span class="line">        print(&#39;Too many arguments!&#39;)</span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&#39;__main__&#39;:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure>

<p>第 1 行 第 2 行是标准注释</p>
<ul>
<li>模块搜索路径</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import sys</span><br><span class="line">&gt;&gt;&gt; sys.path</span><br></pre></td></tr></table></figure>

<h5 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h5><ul>
<li>创建 Logger 记录器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger &#x3D; logging.getLogger()</span><br></pre></td></tr></table></figure>

<p>设置日志级别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger.setLevel(logging.INFO)</span><br></pre></td></tr></table></figure>

<ul>
<li>Handler 处理器</li>
</ul>
<p>常用三种 StreamHandler、FileHandler、NullHandler</p>
<p>创建 StreamHandler 之后，可以设置日志级别，设置格式化器 Formatter，增加或删除过滤器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console_handler &#x3D; logging.StreamHandler()</span><br><span class="line"># 指定日志级别 低于WARN级别日志将被忽略</span><br><span class="line">console_handler.setLevel(logging.WARN)</span><br><span class="line"># 设置一个格式化器 formatter</span><br><span class="line">console_handler.setFormatter(formatter_name)</span><br><span class="line"># 增加过滤器</span><br><span class="line">console_handler.addFilter(filter_name)</span><br><span class="line"># 删除过滤器</span><br><span class="line">console_handler.removeFilter(filter_name)</span><br></pre></td></tr></table></figure>

<p>jd_logger.py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import logging</span><br><span class="line">import logging.handlers</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">日志模块</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">LOG_FILENAME &#x3D; &#39;..&#x2F;jd_seckill.log&#39;</span><br><span class="line">logger &#x3D; logging.getLogger()</span><br><span class="line"></span><br><span class="line">def set_logger():</span><br><span class="line">    logger.setLevel(logging.INFO)</span><br><span class="line">    formatter &#x3D; logging.Formatter(&#39;%(asctime)s - %(process)d-%(threadName)s - &#39;</span><br><span class="line">                                  &#39;%(pathname)s[line:%(lineno)d] - %(levelname)s: %(message)s&#39;)</span><br><span class="line">    console_handler &#x3D; logging.StreamHandler()</span><br><span class="line">    console_handler.setFormatter(formatter)</span><br><span class="line">    logger.addHandler(console_handler)</span><br><span class="line">    file_handler &#x3D; logging.handlers.RotatingFileHandler(</span><br><span class="line">        LOG_FILENAME, maxBytes&#x3D;10485760, backupCount&#x3D;5, encoding&#x3D;&quot;utf-8&quot;)</span><br><span class="line">    file_handler.setFormatter(formatter)</span><br><span class="line">    logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set_logger()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%(levelno)s 打印日志级别的数值 </span><br><span class="line">%(levelname)s 打印日志级别名称</span><br><span class="line">%(pathname)s 打印当前执行程序的路径 </span><br><span class="line">%(filename)s 打印当前执行程序名称</span><br><span class="line">%(funcName)s 打印日志的当前函数 </span><br><span class="line">%(lineno)d 打印日志的当前行号 </span><br><span class="line">%(asctime)s 打印日志的时间 </span><br><span class="line">%(thread)d 打印线程id </span><br><span class="line">%(threadName)s 打印线程名称</span><br><span class="line">%(process)d 打印进程ID</span><br><span class="line">%(message)s 打印日志信息</span><br></pre></td></tr></table></figure>







<h4 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h4><h5 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h5><p>(object) 表示从哪个类继承下来的</p>
<p>第一个参数固定self 表示创建实例本身</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Student(object) </span><br><span class="line">	def __init__(self, name, score):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.score &#x3D; score</span><br><span class="line">  def print_score(self):</span><br><span class="line">        print(&#39;%s: %s&#39; % (self.name, self.score))</span><br></pre></td></tr></table></figure>

<p>有了init方法 创建实例的时候就不能传空参数了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bart &#x3D; Student(&#39;Bart&#39;, 59)</span><br></pre></td></tr></table></figure>

<h5 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h5><p>如果要让内部属性不被外部访问，名称前加两个下划线 <code>__</code>，就变成私有变量，这样外部就不能访问了，如果要外部访问可以增加 get 方法</p>
<p>添加 get set 方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def get_name(self):</span><br><span class="line">    return self.__name</span><br><span class="line">def get_score(self):</span><br><span class="line">    return self.__score</span><br><span class="line">def set_score(self, score):</span><br><span class="line">    self.__score &#x3D; score</span><br></pre></td></tr></table></figure>

<ul>
<li>对象信息</li>
</ul>
<p>type()  判断对象类型、isinstance()</p>
<p>获取对象所有属性和方法 dir()， 返回包含字符串的 list</p>
<ul>
<li>实例属性和类属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    name &#x3D; &#39;Student&#39; # 类属性</span><br></pre></td></tr></table></figure>

<h4 id="面向对象高级编程"><a href="#面向对象高级编程" class="headerlink" title="面向对象高级编程"></a>面向对象高级编程</h4><h4 id="错误、调试和测试"><a href="#错误、调试和测试" class="headerlink" title="错误、调试和测试"></a>错误、调试和测试</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(&#39;try...&#39;)</span><br><span class="line">    r &#x3D; 10 &#x2F; int(&#39;a&#39;)</span><br><span class="line">    print(&#39;result:&#39;, r)</span><br><span class="line">except ValueError as e:</span><br><span class="line">    print(&#39;ValueError:&#39;, e)</span><br><span class="line">except ZeroDivisionError as e:</span><br><span class="line">    print(&#39;ZeroDivisionError:&#39;, e)</span><br><span class="line">finally:</span><br><span class="line">    print(&#39;finally...&#39;)</span><br><span class="line">print(&#39;END&#39;)</span><br></pre></td></tr></table></figure>

<p>Python 所有的错误都是从 BaseException 类派生的</p>
<p>常见的错误类型和继承关系 <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy">https://docs.python.org/3/library/exceptions.html#exception-hierarchy</a></p>
<ul>
<li>记录错误</li>
</ul>
<p>内置的 logging 模块可以非常容易的记录错误，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># err_logging.py</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">def foo(s):</span><br><span class="line">    return 10 &#x2F; int(s)</span><br><span class="line">def bar(s):</span><br><span class="line">    return foo(s) * 2</span><br><span class="line">def main():</span><br><span class="line">    try:</span><br><span class="line">        bar(&#39;0&#39;)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        logging.exception(e)</span><br><span class="line">main()</span><br><span class="line">print(&#39;END&#39;)</span><br></pre></td></tr></table></figure>

<p>通过配置 loging 还可以把错误记录到日志文件里</p>
<p>抛出错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># err_raise.py</span><br><span class="line">class FooError(ValueError):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def foo(s):</span><br><span class="line">    n &#x3D; int(s)</span><br><span class="line">    if n&#x3D;&#x3D;0:</span><br><span class="line">        raise FooError(&#39;invalid value: %s&#39; % s)</span><br><span class="line">    return 10 &#x2F; n</span><br><span class="line"></span><br><span class="line">foo(&#39;0&#39;)</span><br></pre></td></tr></table></figure>











<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4>]]></content>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战</title>
    <url>/2021/02/26/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="8-验证码识别"><a href="#8-验证码识别" class="headerlink" title="8. 验证码识别"></a>8. 验证码识别</h4><h4 id="9-代理的使用"><a href="#9-代理的使用" class="headerlink" title="9. 代理的使用"></a>9. 代理的使用</h4><h4 id="10-模拟登录"><a href="#10-模拟登录" class="headerlink" title="10. 模拟登录"></a>10. 模拟登录</h4><h4 id="11-App-的爬取"><a href="#11-App-的爬取" class="headerlink" title="11. App 的爬取"></a>11. App 的爬取</h4><h4 id="12-pyspider-框架使用"><a href="#12-pyspider-框架使用" class="headerlink" title="12. pyspider 框架使用"></a>12. pyspider 框架使用</h4><h4 id="13-Scrapy-框架使用"><a href="#13-Scrapy-框架使用" class="headerlink" title="13. Scrapy 框架使用"></a>13. Scrapy 框架使用</h4><h4 id="14-分布式爬虫"><a href="#14-分布式爬虫" class="headerlink" title="14. 分布式爬虫"></a>14. 分布式爬虫</h4><h4 id="15-分布式爬虫部署"><a href="#15-分布式爬虫部署" class="headerlink" title="15. 分布式爬虫部署"></a>15. 分布式爬虫部署</h4>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Runtime底层原理</title>
    <url>/2020/12/01/Runtime%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h4 id="通过SEL找到IMP"><a href="#通过SEL找到IMP" class="headerlink" title="通过SEL找到IMP"></a>通过SEL找到IMP</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL class_respondsToSelector(Class cls, SEL sel)</span><br><span class="line">&#123;</span><br><span class="line">    return class_respondsToSelector_inst(cls, sel, nil);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><a href="https://opensource.apple.com/tarballs/objc4/">苹果源码下载地址</a></p>
]]></content>
  </entry>
  <entry>
    <title>RxSwift（一）</title>
    <url>/2021/09/03/RxSwift%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h4 id="1-Observable"><a href="#1-Observable" class="headerlink" title="1 Observable"></a>1 Observable</h4><p><code>Observable&lt;T&gt;</code> 可观察序列 可以异步地产生一系列的Event(事件)</p>
<p>这些Event还可以携带数据</p>
<p>还需要有一个 Observer(订阅者)来订阅它，这样这个订阅者才能接收 <code>Observable&lt;T&gt;</code> 发出的Event</p>
<h5 id="1-1-创建Observable序列"><a href="#1-1-创建Observable序列" class="headerlink" title="1.1 创建Observable序列"></a>1.1 创建Observable序列</h5><ol>
<li>just() 方法</li>
</ol>
<p>传入一个默认值初始化，下面指定了这个Observable所发出的事件携带的数据类型必须是Int类型的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable&lt;Int&gt;.just(5)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>of() 方法</li>
</ol>
<p>接收可变数量的参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>from() 方法</li>
</ol>
<p>接收数组参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable.from([&quot;A&quot;, &quot;B&quot;])</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>empty()方法</li>
</ol>
<p>创建一个空内容的Observable序列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable&lt;Int&gt;.empty()</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>never()方法</li>
</ol>
<p>创建永远不会发出Event的Observable</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable&lt;Int&gt;.never()</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>error()方法</li>
</ol>
<p>不做任何操作，只发送error的Observable</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum MyError: Error &#123;</span><br><span class="line">   case A</span><br><span class="line">   case B</span><br><span class="line">&#125;</span><br><span class="line">let observable &#x3D; Observable&lt;Int&gt;.error(MyError.A)</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>range()方法</li>
</ol>
<p>指定起始值和结束值，创建范围内所有值作为初始值的 Observable 序列，下面两种方法创建的 Observable 序列都是一样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;使用range()</span><br><span class="line">let observable &#x3D; Observable.range(start: 1, count: 5)</span><br><span class="line">&#x2F;&#x2F;使用of()</span><br><span class="line">let observable &#x3D; Observable.of(1, 2, 3 ,4 ,5)</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>repeatElement()方法</li>
</ol>
<p>创建可以无限发送给定元素的Event的Observable序列，永不终止</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable.repeatElement(1)</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>generate()方法</li>
</ol>
<p>只有当提供的所有判断条件为true的时候才会给出动作的Observable序列，下面两种方法创建的 Observable 序列都是一样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable.generate(</span><br><span class="line">    initialState: 0,</span><br><span class="line">    condition: &#123; $0 &lt;&#x3D; 10 &#125;,</span><br><span class="line">    iterate: &#123; $0 + 2&#125;</span><br><span class="line">)</span><br><span class="line">let observable &#x3D; Observable.of(0 , 2 ,4 ,6 ,8 ,10)</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>creat()方法</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable&lt;String&gt;.create &#123; observer in</span><br><span class="line">    observer.onNext(&quot;hangge.com&quot;)</span><br><span class="line">    observer.onCompleted()</span><br><span class="line">    return Disposables.create()</span><br><span class="line">&#125;</span><br><span class="line">observable.subscribe(&#123;</span><br><span class="line">    print($0)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="11">
<li>defferred()方法</li>
</ol>
<p>相当于创建一个Observable工厂，传入一个block来延迟执行Observable序列创建行为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var isOdd &#x3D; true</span><br><span class="line">&#x2F;&#x2F;使用 deferred 方法延迟 Observable 序列的初始化</span><br><span class="line">let factory: Observable&lt;Int&gt; &#x3D; Observable.deferred &#123;</span><br><span class="line">    isOdd &#x3D; !isOdd</span><br><span class="line">    &#x2F;&#x2F;根据isOdd参数，决定创建并返回的是奇数Observable、还是偶数Observable</span><br><span class="line">    if isOdd &#123;</span><br><span class="line">        return Observable.of(1, 3, 5, 7)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return Observable.of(2, 4, 6, 8)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;第1次订阅测试</span><br><span class="line">factory.subscribe(&#123; event in</span><br><span class="line">    print(&quot;\(isOdd)&quot;, event)</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;第2次订阅测试</span><br><span class="line">factory.subscribe(&#123; event in</span><br><span class="line">    print(&quot;\(isOdd)&quot;, event)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="12">
<li>interval()方法</li>
</ol>
<p>每隔一段特定时间，发出索引数的元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable&lt;Int&gt;.interval(RxTimeInterval.seconds(1), scheduler: MainScheduler.instance)</span><br><span class="line">  </span><br><span class="line">observable.subscribe &#123; event in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="13">
<li>timer()</li>
</ol>
<p>两种用法，一种是创建的 Observable 序列经过设定时间后，产生唯一元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable&lt;Int&gt;.timer(RxTimeInterval.seconds(5), scheduler: MainScheduler.instance)</span><br><span class="line">observable.subscribe &#123; event in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">next(0)</span><br><span class="line">completed</span><br></pre></td></tr></table></figure>

<p>另一种是创建的 Observable 序列在经过设定时间后，每隔一段时间产生一个元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;5秒后，每隔1秒发出一个元素</span><br><span class="line">let observable &#x3D; Observable&lt;Int&gt;.timer(RxTimeInterval.seconds(5), period: RxTimeInterval.seconds(1), scheduler: MainScheduler.instance)</span><br><span class="line">observable.subscribe &#123; event in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-订阅-Observable"><a href="#1-2-订阅-Observable" class="headerlink" title="1.2 订阅 Observable"></a>1.2 订阅 Observable</h5><p>有了Observable，还要使用subscribe()来订阅它，接收它发出的Event</p>
<ul>
<li>第一种</li>
</ul>
<p>使用 subscribe() 订阅 Observable 对象，数据发送完毕后自动发一个 .completed 时间出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">observable.subscribe &#123; event in</span><br><span class="line">  	&#x2F;&#x2F;想要获取event数据，可以通过event.element</span><br><span class="line">  	print(event)</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">next(A)</span><br><span class="line">next(B)</span><br><span class="line">next(C)</span><br><span class="line">completed</span><br></pre></td></tr></table></figure>

<ul>
<li>第二种</li>
</ul>
<p>对event进行分类，通过不同block处理不同event，会把event的数据直接解包出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">observable.subscribe &#123; element in</span><br><span class="line">    print(element)</span><br><span class="line">&#125; onError: &#123; error in</span><br><span class="line">    print(error)</span><br><span class="line">&#125; onCompleted: &#123;</span><br><span class="line">    print(&quot;completed&quot;)</span><br><span class="line">&#125; onDisposed: &#123;</span><br><span class="line">    print(&quot;disposed&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-3-监听事件生命周期"><a href="#1-3-监听事件生命周期" class="headerlink" title="1.3 监听事件生命周期"></a>1.3 监听事件生命周期</h5><p>doOn方法监听事件生命周期，会在事件发送前被调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">observable.do(onNext: &#123; (element) in</span><br><span class="line">    print(element)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="1-4-Observable-销毁"><a href="#1-4-Observable-销毁" class="headerlink" title="1.4 Observable 销毁"></a>1.4 Observable 销毁</h5><ol>
<li>通过dispose()取消订阅</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subscription &#x3D; observable.subscribe &#123; (event) in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;</span><br><span class="line">subscription.dispose()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>DisposeBag</li>
</ol>
<p>DisposeBag会在自己快要dealloc的时候，对里面所有订阅行为都调用dispose()方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">let disposeBag &#x3D; DisposeBag()</span><br><span class="line">observable.subscribe &#123; (event) in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h4 id="2-观察者"><a href="#2-观察者" class="headerlink" title="2 观察者"></a>2 观察者</h4><p>观察者（Observer）作用就是监听事件，对事件作出响应，或者说任何响应事件的行为都是观察者</p>
<h5 id="2-1-subscribe、bind方法中创建观察者"><a href="#2-1-subscribe、bind方法中创建观察者" class="headerlink" title="2.1 subscribe、bind方法中创建观察者"></a>2.1 subscribe、bind方法中创建观察者</h5><p>最直接的方法就是在subscribe方法后描述事件发生时，需要如何作出响应</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">observable.subscribe(onNext: &#123; element in</span><br><span class="line">    print(element)</span><br><span class="line">&#125;, onError: &#123; error in</span><br><span class="line">    print(error)</span><br><span class="line">&#125;, onCompleted: &#123;</span><br><span class="line">    print(&quot;completed&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>bind</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable&lt;Int&gt;.interval(RxTimeInterval.seconds(1),</span><br><span class="line">                                          scheduler: MainScheduler.instance)</span><br><span class="line">observable</span><br><span class="line">    .map &#123; &quot;当前索引数:\($0)&quot; &#125;</span><br><span class="line">    .bind &#123; [weak self] (text) in</span><br><span class="line">        self?.label.text &#x3D; text</span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="2-2-使用-AnyObserver-创建观察者"><a href="#2-2-使用-AnyObserver-创建观察者" class="headerlink" title="2.2 使用 AnyObserver 创建观察者"></a>2.2 使用 AnyObserver 创建观察者</h5><p>配合 subscribe 使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observer: AnyObserver&lt;String&gt; &#x3D; AnyObserver &#123; event in</span><br><span class="line">    switch event &#123;</span><br><span class="line">    case .next(let data):</span><br><span class="line">        print(data)</span><br><span class="line">    case .error(let error):</span><br><span class="line">        print(error)</span><br><span class="line">    case .completed:</span><br><span class="line">        print(&quot;complete&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let observable &#x3D; Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">observable.subscribe(observer)</span><br></pre></td></tr></table></figure>

<p>配合 bindTo 使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observer: AnyObserver&lt;String&gt; &#x3D; AnyObserver &#123;[weak self] event in</span><br><span class="line">    switch event &#123;</span><br><span class="line">    case .next(let text):</span><br><span class="line">        self?.label.text &#x3D; text</span><br><span class="line">    default:</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let observable &#x3D; Observable&lt;Int&gt;.interval(RxTimeInterval.seconds(1),</span><br><span class="line">                                          scheduler: MainScheduler.instance)</span><br><span class="line">observable</span><br><span class="line">    .map &#123; &quot;当前索引数:\($0)&quot; &#125;</span><br><span class="line">    .bind(to: observer)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="2-3-使用-Binder-创建观察者"><a href="#2-3-使用-Binder-创建观察者" class="headerlink" title="2.3 使用 Binder 创建观察者"></a>2.3 使用 Binder 创建观察者</h5><p>Binder不会处理错误事件<br>确保绑定都是在给定的Schedule上执行，默认MainSchedule</p>
<p>上面示例中，label 文字显示就是一个典型的观察者，它在响应事件时，只会处理 next 事件，且更新 UI 的操作需要在主线程上执行，更好的方案是使用 Binder</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observer: Binder&lt;String&gt; &#x3D; Binder(label) &#123; view, text in</span><br><span class="line">	  view.text &#x3D; text</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">observable</span><br><span class="line">    .map &#123; &quot;当前索引数：\($0 )&quot;&#125;</span><br><span class="line">    .bind(to: observer)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<ul>
<li>Binder 在 RxCocoa 中的应用</li>
</ul>
<p>RxCocoa 对许多 UI 控件进行扩展，利用 Binder 将控件属性变成观察者</p>
<h5 id="2-4-自定义可绑定属性"><a href="#2-4-自定义可绑定属性" class="headerlink" title="2.4 自定义可绑定属性"></a>2.4 自定义可绑定属性</h5><p>方法一： 通过对 UI 类进行扩展</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension UILabel &#123;</span><br><span class="line">    public var fontSize: Binder&lt;CGFloat&gt; &#123;</span><br><span class="line">        return Binder(self) &#123; label, fontSize in</span><br><span class="line">            label.font &#x3D; UIFont.systemFont(ofSize: fontSize)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：通过对 Reactive 类进行扩展</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension Reactive where Base: UILabel &#123;</span><br><span class="line">    public var fontSize: Binder&lt;CGFloat&gt; &#123;</span><br><span class="line">        return Binder(self.base) &#123; label, fontSize in</span><br><span class="line">            label.font &#x3D; UIFont.systemFont(ofSize: fontSize)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-Subject"><a href="#3-Subject" class="headerlink" title="3 Subject"></a>3 Subject</h4><p>创建Observable的时候要预先把将要发出的数据都准备好，等到有人订阅时再将数据通过Event发送出去<br>但有时希望Observable动态的获得或者产生新数据，再通过Event发送出去-这些使用Subject来实现</p>
<p>Subject既是订阅者，也是Observable<br>订阅者：因为它能动态接收新值<br>又是一个Observable：因为当Subjects有了新值后，就会通过Event将新值发送给所有订阅者</p>
<h5 id="3-1-PublishSubject"><a href="#3-1-PublishSubject" class="headerlink" title="3.1 PublishSubject"></a>3.1 PublishSubject</h5><p>不需要初始值就能创建<br>PublishSubject的订阅者，可以收到订阅后Subject发出的新的Event，不会收到订阅前发出的Event</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;没有任何订阅者 这条不会输出</span><br><span class="line">subject.onNext(&quot;11&quot;)</span><br><span class="line"></span><br><span class="line">subject.subscribe(onNext: &#123; string in</span><br><span class="line">    print(&quot;第一次订阅：&quot;, string)</span><br><span class="line">&#125;, onCompleted: &#123;</span><br><span class="line">    print(&quot;第一次订阅：completed&quot;)</span><br><span class="line">&#125;).disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;有订阅会输出</span><br><span class="line">subject.onNext(&quot;22&quot;)</span><br><span class="line"></span><br><span class="line">subject.subscribe(onNext: &#123; string in</span><br><span class="line">    print(&quot;第二次订阅：&quot;, string)</span><br><span class="line">&#125;, onCompleted: &#123;</span><br><span class="line">    print(&quot;第二次订阅：completed&quot;)</span><br><span class="line">&#125;).disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;有订阅会输出</span><br><span class="line">subject.onNext(&quot;33&quot;)</span><br><span class="line">subject.onCompleted()</span><br><span class="line">subject.onNext(&quot;44&quot;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;完成后所有订阅(包括结束后订阅) 都能收到 complete 事件</span><br><span class="line">subject.subscribe(onNext: &#123; string in</span><br><span class="line">    print(&quot;第三次订阅：&quot;, string)</span><br><span class="line">&#125;, onCompleted: &#123;</span><br><span class="line">    print(&quot;第三次订阅：completed&quot;)</span><br><span class="line">&#125;).disposed(by: disposeBag)</span><br><span class="line">  </span><br><span class="line">结果</span><br><span class="line">第一次订阅： 22</span><br><span class="line">第一次订阅： 33</span><br><span class="line">第二次订阅： 33</span><br><span class="line">第一次订阅：completed</span><br><span class="line">第二次订阅：completed</span><br><span class="line">第三次订阅：completed</span><br></pre></td></tr></table></figure>

<h5 id="3-2-BehaviorSubject"><a href="#3-2-BehaviorSubject" class="headerlink" title="3.2 BehaviorSubject"></a>3.2 BehaviorSubject</h5><p>BehaviorSubject需要通过初始值创建<br>订阅者订阅它的时候，立即收到BehaviorSubject发出的Event，之后正常一样收到之后发出的新的Event</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject &#x3D; BehaviorSubject(value: &quot;111&quot;)</span><br><span class="line"></span><br><span class="line">subject.subscribe(onNext: &#123; string in</span><br><span class="line">    print(&quot;第1次订阅：&quot;, string)</span><br><span class="line">&#125;).disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject.onNext(&quot;222&quot;)</span><br><span class="line">&#x2F;&#x2F;发送error</span><br><span class="line">subject.onError(NSError(domain: &quot;local&quot;, code: 0, userInfo: nil))</span><br><span class="line"></span><br><span class="line">subject.subscribe(onNext: &#123; string in</span><br><span class="line">    print(&quot;第2次订阅：&quot;, string)</span><br><span class="line">&#125;).disposed(by: disposeBag)</span><br><span class="line">  </span><br><span class="line">输出</span><br><span class="line">第1次订阅： 111</span><br><span class="line">第1次订阅： 222</span><br><span class="line">Unhandled error happened: Error Domain&#x3D;local Code&#x3D;0 &quot;(null)&quot;</span><br><span class="line">Unhandled error happened: Error Domain&#x3D;local Code&#x3D;0 &quot;(null)&quot;</span><br></pre></td></tr></table></figure>

<h5 id="3-3-ReplaySubject"><a href="#3-3-ReplaySubject" class="headerlink" title="3.3 ReplaySubject"></a>3.3 ReplaySubject</h5><p>创建时需要设置一个bufferSize，表示对发送过的Event的缓存个数</p>
<p>如bufferSize设置为2，发出3个.next的Event，那么后面两个会缓存起来，如果一个Subject订阅了这个 ReplaySubject，那立即会收到缓存的两个.next的Event</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject &#x3D; ReplaySubject&lt;String&gt;.create(bufferSize: 2)</span><br><span class="line">        </span><br><span class="line">subject.onNext(&quot;111&quot;)</span><br><span class="line">subject.onNext(&quot;222&quot;)</span><br><span class="line">subject.onNext(&quot;333&quot;)</span><br><span class="line"></span><br><span class="line">subject.subscribe &#123; event in</span><br><span class="line">    print(&quot;第1次订阅：&quot;, event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject.onNext(&quot;444&quot;)</span><br><span class="line"></span><br><span class="line">subject.subscribe &#123; event in</span><br><span class="line">    print(&quot;第2次订阅：&quot;, event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject.onCompleted()</span><br><span class="line"></span><br><span class="line">subject.subscribe &#123; event in</span><br><span class="line">    print(&quot;第3次订阅：&quot;, event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line">  </span><br><span class="line">结果：</span><br><span class="line">第1次订阅： next(222)</span><br><span class="line">第1次订阅： next(333)</span><br><span class="line">第1次订阅： next(444)</span><br><span class="line">第2次订阅： next(333)</span><br><span class="line">第2次订阅： next(444)</span><br><span class="line">第1次订阅： completed</span><br><span class="line">第2次订阅： completed</span><br><span class="line">第3次订阅： next(333)</span><br><span class="line">第3次订阅： next(444)</span><br><span class="line">第3次订阅： completed</span><br></pre></td></tr></table></figure>

<h5 id="3-4-BehaviorRelay"><a href="#3-4-BehaviorRelay" class="headerlink" title="3.4 BehaviorRelay"></a>3.4 BehaviorRelay</h5><p>BehaviorRelay 有一个 value 属性，我们通过这个属性可以获取最新值。而通过它的 accept() 方法可以对值进行修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject &#x3D; BehaviorRelay&lt;String&gt;(value: &quot;111&quot;)</span><br><span class="line">&#x2F;&#x2F;修改value值</span><br><span class="line">subject.accept(&quot;222&quot;)</span><br><span class="line">subject.subscribe &#123;</span><br><span class="line">    print(&quot;第1次订阅：&quot;, $0)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line">subject.accept(&quot;333&quot;)</span><br><span class="line">subject.subscribe &#123;</span><br><span class="line">    print(&quot;第2次订阅：&quot;, $0)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line">subject.accept(&quot;444&quot;)</span><br><span class="line">  </span><br><span class="line">结果：</span><br><span class="line">第1次订阅： next(222)</span><br><span class="line">第1次订阅： next(333)</span><br><span class="line">第2次订阅： next(333)</span><br><span class="line">第1次订阅： next(444)</span><br><span class="line">第2次订阅： next(444)</span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
  </entry>
  <entry>
    <title>RxSwift（四）</title>
    <url>/2021/09/09/RxSwift%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h4 id="1-URLSession"><a href="#1-URLSession" class="headerlink" title="1 URLSession"></a>1 URLSession</h4><h5 id="1-1-rx-response-请求数据"><a href="#1-1-rx-response-请求数据" class="headerlink" title="1.1 rx.response 请求数据"></a>1.1 rx.response 请求数据</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let urlString &#x3D; &quot;https:&#x2F;&#x2F;www.douban.com&#x2F;j&#x2F;app&#x2F;radio&#x2F;channels&quot;</span><br><span class="line">let url &#x3D; URL(string: urlString)!</span><br><span class="line">let request &#x3D; URLRequest(url: url)</span><br><span class="line">URLSession.shared.rx.response(request: request)</span><br><span class="line">    .subscribe(onNext: &#123; (response, data) in</span><br><span class="line">        if 200 ..&lt; 300 ~&#x3D; response.statusCode &#123;</span><br><span class="line">            let str &#x3D; String(data: data, encoding: String.Encoding.utf8)</span><br><span class="line">            print(&quot;返回数据：\(str ?? &quot;&quot;)&quot;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            print(&quot;请求失败&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="1-2-rx-data"><a href="#1-2-rx-data" class="headerlink" title="1.2 rx.data"></a>1.2 rx.data</h5><p>如果不需要获取底层 response，只需知道是否请求成功，以及返回结果，建议使用 rx.data</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">URLSession.shared.rx.data(request: request)</span><br><span class="line">    .subscribe(onNext: &#123; data in</span><br><span class="line">        print(&quot;请求成功&quot;)</span><br><span class="line">    &#125;, onError: &#123; error in</span><br><span class="line">        print(&quot;请求失败：&quot;, error)</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<p>将结果转换为JSON</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">URLSession.shared.rx.data(request: request)</span><br><span class="line">    .map &#123;</span><br><span class="line">        try JSONSerialization.jsonObject(with: $0, options: .allowFragments) as! [String: Any]</span><br><span class="line">    &#125;</span><br><span class="line">    .subscribe(onNext: &#123; data in</span><br><span class="line">        print(&quot;请求成功&quot;)</span><br><span class="line">    &#125;, onError: &#123; error in</span><br><span class="line">        print(&quot;请求失败：&quot;, error)</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="1-3-手动发起-取消请求"><a href="#1-3-手动发起-取消请求" class="headerlink" title="1.3 手动发起/取消请求"></a>1.3 手动发起/取消请求</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">startButton.rx.tap</span><br><span class="line">    .flatMap &#123;</span><br><span class="line">        URLSession.shared.rx.data(request: request)</span><br><span class="line">            .takeUntil(self.cancelButton.rx.tap)</span><br><span class="line">    &#125;</span><br><span class="line">    .subscribe(onNext: &#123; data in</span><br><span class="line">    &#125;, onError: &#123;error in</span><br><span class="line">        print(&quot;请求失败：&quot;, error)</span><br><span class="line">    &#125;).disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="1-4-转JSON"><a href="#1-4-转JSON" class="headerlink" title="1.4 转JSON"></a>1.4 转JSON</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">URLSession.shared.rx.data(request: request)</span><br><span class="line">    .map &#123;</span><br><span class="line">        try JSONSerialization.jsonObject(with: $0, options: .allowFragments) as! [String: Any]</span><br><span class="line">    &#125;</span><br><span class="line">    .subscribe(onNext: &#123; data in</span><br><span class="line">        print(&quot;请求成功&quot;)</span><br><span class="line">    &#125;, onError: &#123; error in</span><br><span class="line">        print(&quot;请求失败：&quot;, error)</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<p>直接使用 rx.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">URLSession.shared.rx.json(request: request)</span><br><span class="line">    .subscribe(onNext: &#123; data in</span><br><span class="line">        let json &#x3D; data as! [String: Any]</span><br><span class="line">        print(&quot;请求成功&quot;)</span><br><span class="line">    &#125;, onError: &#123; error in</span><br><span class="line">        print(&quot;请求失败：&quot;, error)</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

































<p><a href="https://www.hangge.com/blog/cache/detail_2010.html">URLSession使用</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/11/14/hello-world/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="48e31149c438b31829246723271e19d6d0977e5f2df026e3e65f815a03a2237e">ccbf2489ed1a233f216cac1e5dda3d49363c641c556918697fb036546f666b01c7abc45d1943ee9d3408364bd5f46f8570100184557ff9fee405fe56e18b4fd58e086651cbf73064170efc9aedd861898b24a00cfcc3fee3b474b0b571c30f593250c8f7c8c24e627500f5e8c161baa4c36a516fbada282e10e2387441140a89de99961057f1486af8d17c1f891e290c2c1c5834a44d398955fca41b52fb113d52fce8c82f3f05d861bc4bac05e6bedc4f572f4aef60c81250f6758ca5c6611de62bf8a78acd96a3d3f49673040ff9a410ba932192472a21992fc57c329690bc2c930b6950232c8079bcc8ddac7252699cfb36533216ae373b44d02cb7dbb4a1bbdf2a5e938afd1e3e78bf0916f51f3b449809c5267d2fe5850bd5d31e97afbf96342e61c7f87ee5a43ab33c86fe76453bc1072ce91df88fe7bca55722dc893aaf79418c66ff77d76ac7d6699810b133b7758a0be14aef449fd343ef1376fec2a73cd20c02d407df46c6ab7fd86511af99f4916779688c557125b40cbc82d9a249aa9b9e285ae0fb9e258cabb6cce3597958eeb95ab18ec0b3c07943c054b7b28bc0f4f77ba12cb76eee3df04b6b4ff322bd34c093a1c4ab7d9db74fc47592f389f280fefcce7fd4e0fce2945368e91bbeb02eb882822c402116acb46283ed0d86be720cb21722ff1f1cb64b8756d3214951ec4c7e97d97d203d97dbef79d7fda19260dd8e107b7339d846d15442a16ed2459d3ee85104594bf30ef9aec082bc407db0dabf770cb13f65cbdba76e70922c7bef6362c59fc80949ce7d9362744c5ef31b35189aef8be5acdca2c5630d0b36c5804884fc0f5827390f969081366873895550e5ef0e82b9eb65951d778000a330e3194c8f9f8760736124680b64ae82376e8245dc6a52c348f70707047ec801acee613dc826321cf7be399c6c2efe2f3fd80523450630915846b4b1f409c6629c786e98d35f0fc7e1a816a62ee722c313c88d72c14770f86767afd07db1628b298924f7d1e6fb6a03372460f87fce293ab1b6e0c50abce375e6d257dc17edc2a955339e6d4fda9309e309b1f2b9e9d35744b8003e3945d5d1467a4b6bf791e7218e4bba0ce339c6ebfc4016ae63e6674c7be5dc978290a08f4f716affb3615ca0e7120135937acc9a0b5e398ce3bbf3db2b275da049032ea9e66e3b782e646fdbdb15914c5832bd0a25a6d0158a32e028fc89aa33fb2fc29d6f8cfb3a98eff80dbcdac046c93720fe854e9273d01aa0c4ae930aa312a87b272dc0351862bdbfc193657968cea438ace70d5ebb7ab440132f23c9807c6578b6139577b6089bf5b4a7c8cdc25fdbee69dfa8ecaeae3a7a28773f198292b0ea59234da65d8a450898ca3d913d2963c1cf324a597995654a144129bb631716b4b6d5b6d8af08ccf3ee99a36d6a0d00d2dfe87511b5e02ba24d990270cf8819a771ed282e1e762932d29fed355bb5900992107c58998647ce327deca6f8edc198581d008eef7bcc94e4422e5162140b60d115ce3c7ee1da3a8a2769d893f4f863c11bbb4c569591d9f1e86ac8ca7fba4a32182c227ad1f6861891b0d89fa4fb3630e25b844fe195228b85308437f5837a88715f2cb9061d4b8000559c6cd3e78f26b8a165765edc61e9eced4d00290061df3e6cdf03e381feafa39a22b783b5f1a5014eed3d2eb4f70fc18be3336ee03f928d26ea73ad8db238230805141c010104611b1bd269170cae8b6d493bbb2288ca13eeabd3100001e5d6e58c66704754be022a30f20ad2a09153260f2508c8f045e52b3a8520d86cf8d0eaf119c65c86c19e05117bd7c8c2b01a8fe78afb98efb0fd2f5ac5f0eeff18deb100a7645ab8f847d1d96de3bcea8223f0d3881da12b14ea767d6b15ad3d1f33eb8bf7c3dffb0f430b05470c25ea80b0933240dfe7bbfbd3767ceacec4430b8b51d7fe5c5afb271f4dd9c68c35dab8d49b6961c6255924f086a97d759c62a41111625b6c2ae4331fea540e7c5c95ba470756f6989f333a022cdcd55dbd1f05fc27cff68bc5aed07e3a2f37fd360a452ddf3555b1d2c86a8f8c6d06ed0c880b442a8aade2daf8b853f1a7447abfad5194047ac1436768deaf8b5f1265cf0bf5827fe5fdc314b6768bfcc490c7847a1de34fd40603b110af9c537d5de2d9bdfd12ed8f874e96a3d23749f72a795ffcfdcb3bf0469b756e4a1f3743014ccff1530ea0e7904e54ac5774b30fdaa4d582307ab5db6baf258a4ef88d5cf8e294a1e261967f3a27604463e1f3612a35ebd64104d0fa22f156db0b1995d7333fe3190f9c0ffb110aabec61f094c42124de30bfa166d8be884a7171ec575847b6666abe260e2bab7686ac226fc4ac854d179ddf1f48170785db3ef2fa21a17e8a9db4eaa21888fac829f404a16b097bd856e6bf1873bd7c73b75dfc413449f4c0f5639eaa8fe917ab368adf6c856f915c73065650719b2ec5fb9554b37b99057f6a9526f2b59978c1b56d3973053c71d19305c6ca2d8d730502ffc827d96b0f1c223816bdbb0018a2f4f9e5dba04a37f46f19f8a5dec321967b545d7399d0b6918c7d0fa1bf31b0e39b99c32e5533bd1e2499dae2ae1b2d959c3938fdcc3e39b4546fcc002366877219e177edfd62f7e36e35294885c03bf00b1cb0747c738c590a06c722854d814ab789a4a43662901dac610b95d092f2ce434158fb263384edbf59a3e9d2cec30ee92ab9492bab918b91af9f17ca807f71d4c5be3bcf364108e4d627cfa7ebc57651920ecc15922ef17ac102540b079fe215fd5163653f5b7b6ea6ed73f60bf967106bbc92b3c45e62e5ad90ede233f1f7587e39f508b7fb753c2f4bf27848107f2d0ca317e340e0f6c607fb8dbb9ce76aa8a4238fed6070fe07fc019d3eaa2c467e5d9c283e4ab975bf55cc61447621e30fa9b1476c028e5e68c25abdeadd97e791862cb281862cdd08488563233f8d9f0cbb47288714475f334669a8f84793164754abb59541e7d3b2595354c9f7283c4e56169190a61faeb83f93c149e8c83fd3c58cbfdaab6e304139ff97c5604fa4d714abf41c48d02b4600a4975bd758f60d689f319fdb9b5bb067800250c9b0185cc260993e3e711981</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Encrypt</category>
      </categories>
      <tags>
        <tag>Encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>objc-781编译</title>
    <url>/2020/12/04/objc-781%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">macOS 10.15.7</span><br><span class="line"></span><br><span class="line">Xcode 11.3.1</span><br><span class="line"></span><br><span class="line">objc4-781</span><br></pre></td></tr></table></figure>



<h4 id="Runtime源码下载"><a href="#Runtime源码下载" class="headerlink" title="Runtime源码下载"></a>Runtime源码下载</h4><p><a href="https://opensource.apple.com/">Apple Open Source</a> 选择最新 <code>macOS</code> 系统 <code>10.15.6</code> ，搜索 <code>objc</code> 看到最新 <code>objc4</code>文件为 <code>objc4-787.1</code>，右边可以直接下载压缩包</p>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/AppleOpenSource.jpg" alt="AppleOpenSource"></p>
<p>可以下载历史版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;opensource.apple.com&#x2F;tarballs&#x2F;objc4&#x2F;</span><br></pre></td></tr></table></figure>



<h4 id="下载依赖文件"><a href="#下载依赖文件" class="headerlink" title="下载依赖文件"></a>下载依赖文件</h4><p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/%E4%BE%9D%E8%B5%96%E6%96%87%E4%BB%B6.png" alt="依赖文件"></p>
<h4 id="Runtime源码编译"><a href="#Runtime源码编译" class="headerlink" title="Runtime源码编译"></a>Runtime源码编译</h4><p>【1】<code>unable to find sdk macosx.internal</code></p>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/macosx.jpg" alt="macosx"></p>
<p>修改 <code>Base SDK</code> 选择 <code>macOS</code></p>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/baseSDK.png" alt="baseSDK"></p>
<p>【2】<code>file not foud</code></p>
<p>【2.1】<code>sys/reason.h file not found objc-os.h</code></p>
<p>根目录创建 <code>Common</code> 文件夹，创建 <code>sys</code> 文件 ，加入文件 <code>xnu-6153141.1/bsd/sys/reason.h</code></p>
<p>设置文件检索路径，<code>Header Search Path</code> 添加 <code>$(SRCROOT)/Common</code></p>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/searchPath.png" alt="searchPath"></p>
<p>【2.2】其它 <code>file not found</code></p>
<ul>
<li>mach-o/dyld_priv.h file not found`</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dyld-750.6&#x2F;include&#x2F;mach-o&#x2F;dyld_priv.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>os/lock_private.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libplatform-220.100.1&#x2F;private&#x2F;os&#x2F;lock_private.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>os/base_private.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libplatform-220.100.1&#x2F;private&#x2F;os&#x2F;base_private.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>pthread/tsd_private.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libpthread-416.100.3&#x2F;private&#x2F;tsd_private.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>System/machine/cpu_capabilities.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xnu-6153.141.1&#x2F;osfmk&#x2F;machine&#x2F;cpu_capabilities.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>os/tsd.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xnu-6153.141.1&#x2F;libsyscall&#x2F;os&#x2F;tsd.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>pthread/spinlock_private.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libpthread-416.100.3&#x2F;private&#x2F;spinlock_private.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>System/pthread_machdep.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Libc-583&#x2F;pthreads&#x2F;pthread_machdep.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>CrashReporterClient.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Libc-997.90.3&#x2F;include&#x2F;CrashReporterClient.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>objc-shared-cache.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dyld-750.6&#x2F;include&#x2F;objc-shared-cache.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>_simple.h file not found</code> </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libplatform-220.100.1&#x2F;private&#x2F;_simple.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>kern/restartable.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xnu-6153.141.1&#x2F;osfmk&#x2F;kern&#x2F;restartable.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Block_private.h file not found</code> </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libclosure-74&#x2F;Block_private.h</span><br></pre></td></tr></table></figure>



<p>【3】<code>pthread_machdep.h</code> 3处报错</p>
<p>将 193 行</p>
<p> <code>typedef int pthread_lock_t;</code></p>
<p>到 244 行</p>
<p><code>#define _pthread_setspecific_direct(key, val) pthread_setspecific(key, val)</code> 注释</p>
<p>替换为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#if TARGET_IPHONE_SIMULATOR || defined(__ppc__) || defined(__ppc64__) || \</span><br><span class="line">    (defined(__arm__) &amp;&amp; !defined(_ARM_ARCH_7) &amp;&amp; defined(_ARM_ARCH_6) &amp;&amp; defined(__thumb__))</span><br><span class="line">#define _pthread_getspecific_direct(key) pthread_getspecific((key))</span><br><span class="line">#define _pthread_setspecific_direct(key, val) pthread_setspecific((key), (val))</span><br><span class="line">#else</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>





<p>【4】<code>dyld_priv.h</code> 报错 <code>Expected&#39;,&#39;</code></p>
<p> 删掉 <code>, bridgeos(3.0)</code></p>
<p>【5】<code>lock_private.h</code> 报错 <code>Expected&#39;,&#39;</code></p>
<p>删掉 <code>, bridgeos(4.0)</code></p>
<p>【6】<code>Use of undeclared identifier &#39;DYLD_MACOSX_VERSION_10_11&#39;</code></p>
<p><code>dyld_priv.h</code> 顶部加入宏</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define DYLD_MACOSX_VERSION_10_11 0x000A0B00</span><br><span class="line">#define DYLD_MACOSX_VERSION_10_12 0x000A0C00</span><br><span class="line">#define DYLD_MACOSX_VERSION_10_13 0x000A0D00</span><br><span class="line">#define DYLD_MACOSX_VERSION_10_14 0x000A0E00</span><br></pre></td></tr></table></figure>



<p>【7】<code>Use of undeclared identifier &#39;CRGetCrashLogMessage&#39;</code></p>
<p><code>target -&gt; Build Setting -&gt; Preprocessor Macros</code></p>
<p> 添加 <code>LIBC_NO_LIBCRASHREPORTERCLIENT</code></p>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/macros.png" alt="macros"></p>
<p>【8】<code>Mismatch in debug-ness macros</code></p>
<p>注释 <code>#error mismatch in debug-ness macros</code></p>
<p>【9】</p>
<p><code>can&#39;t open order file: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.0.sdk/AppleInternal/OrderFiles/libobjc.order</code></p>
<p><code>target -&gt; Build Settings</code> 搜索 <code>Order File</code> 添加 <code>$(SRCROOT)/libobjc.order</code></p>
<p>【10】<code>library not found for -lCrashReporterClient</code></p>
<p><code>target -&gt; Build Settings -&gt; Other Linker Flags</code> 删掉  <code>CrashReporterClient</code></p>
<p>【11】<code>SDK &quot;macosx.internal&quot; cannot be located</code></p>
<p><code>target -&gt; objc -&gt; Build Phase -&gt; Run Script(markgc)</code> 将脚本的 <code>macosx.internal</code> 修改为 <code>macosx</code></p>
<p>Build Success</p>
<h4 id="编译调试"><a href="#编译调试" class="headerlink" title="编译调试"></a>编译调试</h4><p>新建 <code>Target</code> 来进行调试</p>
<ul>
<li><code>File -&gt; New -&gt; Target</code> <code>Test</code></li>
</ul>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/target.png" alt="target"></p>
<ul>
<li>绑定二进制依赖关系</li>
</ul>
<p><code>TARGETS -&gt; Test -&gt; Build Phases</code></p>
<p> <img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/depend.png" alt="target"></p>
<p>还需要设置 <code>target -&gt; objc -&gt; Build Settings -&gt; Enable Hardened Runtime -&gt; NO</code></p>
<p>注意 <code>Compile Sources</code> 中 <code>main.m</code> 位置在前面</p>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/compile.png" alt="compile"></p>
<p><a href="https://opensource.apple.com/release/mac-os-x-1062.html">Libc-583</a></p>
<p><a href="https://opensource.apple.com/release/os-x-1095.html"> Libc-997.90.3</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">dyld-750.6</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">libauto-187</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">libclosure-74</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">libdispatch-1173.100.2</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">xnu-6153.141.1</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">libpthread-416.100.3</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">libplatform-220.100.1</a></p>
<p><a href="https://opensource.apple.com/release/os-x-1095.html">launchd-842.92.1</a></p>
<p><a href="https://www.jianshu.com/p/28150fa0c085">objc4-750编译</a></p>
<p><a href="https://gitee.com/other_other/objc-781.git">objc4-781可编译代码</a></p>
<p><a href="https://github.com/chenjialin1016/objc4-debugTest">xcode12 objc4-781可编译代码</a></p>
]]></content>
  </entry>
  <entry>
    <title>_objc_init</title>
    <url>/2020/12/25/objc-init/</url>
    <content><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>什么时候调用 <code>load</code></p>
<p>子类和父类及分类 <code>load</code> 方法调用顺序</p>
<p>子类和父类及分类 <code>initialize</code> 方法调用顺序</p>
<p><code>load</code> 方法调用是在应用程序 <code>main</code> 函数之前，应用启动时 <code>dyld</code> 处理完 <code>image</code> 镜像文件，通过回调传给 <code>runtime</code> ，交由 <code>runtime</code> 在 <code>load_images</code> 方法中调用</p>
<p>从系统库 <code>libSystem</code> 的 <code>runtime</code> 的入口函数 <code>_objc_init</code> 开始</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _objc_init(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> initialized = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (initialized) <span class="keyword">return</span>;</span><br><span class="line">    initialized = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// fixme defer initialization until an objc-using image is found?</span></span><br><span class="line">    <span class="comment">//读取影响运行时的环境变量</span></span><br><span class="line">    environ_init();</span><br><span class="line">    tls_init();</span><br><span class="line">    <span class="comment">//运行C C++静态构造函数</span></span><br><span class="line">    static_init();</span><br><span class="line">    runtime_init();</span><br><span class="line">    <span class="comment">//初始化libobjc的异常处理系统</span></span><br><span class="line">    exception_init();</span><br><span class="line">    cache_init();</span><br><span class="line">    _imp_implementationWithBlock_init();</span><br><span class="line">		<span class="comment">//注册回调函数</span></span><br><span class="line">    _dyld_objc_notify_register(&amp;map_images, load_images, unmap_image);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __OBJC2__</span></span><br><span class="line">    didCallDyldNotifyRegister = <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="map-images"><a href="#map-images" class="headerlink" title="map_images"></a>map_images</h4><p>主要将 Mach-O 中的类信息加载到内存</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">map_images(<span class="keyword">unsigned</span> count, <span class="keyword">const</span> <span class="keyword">char</span> * <span class="keyword">const</span> paths[],</span><br><span class="line">           <span class="keyword">const</span> struct mach_header * <span class="keyword">const</span> mhdrs[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">mutex_locker_t</span> <span class="title">lock</span><span class="params">(runtimeLock)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> map_images_nolock(count, paths, mhdrs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>map_images_nolock</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> </span><br><span class="line">map_images_nolock(<span class="keyword">unsigned</span> mhCount, <span class="keyword">const</span> <span class="keyword">char</span> * <span class="keyword">const</span> mhPaths[],</span><br><span class="line">                  <span class="keyword">const</span> struct mach_header * <span class="keyword">const</span> mhdrs[])</span><br><span class="line">&#123;</span><br><span class="line">		... <span class="comment">//省略代码</span></span><br><span class="line">		<span class="keyword">if</span> (hCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      	<span class="comment">//读取镜像文件</span></span><br><span class="line">        _read_images(hList, hCount, totalClasses, unoptimizedTotalClasses);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="read-images"><a href="#read-images" class="headerlink" title="_read_images"></a>_read_images</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _read_images(header_info **hList, <span class="keyword">uint32_t</span> hCount, <span class="keyword">int</span> totalClasses, <span class="keyword">int</span> unoptimizedTotalClasses)</span><br><span class="line">&#123;</span><br><span class="line">		...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>_read_images</code> 内部做了几件事情</p>
<p>【1】重新初始化 <code>TaggedPointer</code> 环境，创建 <code>gdb_objc_realized_classes</code> 表</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!doneOnce) &#123;</span><br><span class="line">    doneOnce = YES;</span><br><span class="line">    launchTime = YES;</span><br><span class="line">    <span class="keyword">if</span> (DisableTaggedPointers) &#123;</span><br><span class="line">        disableTaggedPointers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    initializeTaggedPointerObfuscator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PrintConnecting) &#123;</span><br><span class="line">        _objc_inform(<span class="string">&quot;CLASS: found %d classes during launch&quot;</span>, totalClasses);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// namedClasses</span></span><br><span class="line">    <span class="comment">// Preoptimized classes don&#x27;t go in this table.</span></span><br><span class="line">    <span class="comment">// 4/3 is NXMapTable&#x27;s load factor</span></span><br><span class="line">    <span class="keyword">int</span> namedClassesSize = </span><br><span class="line">        (isPreoptimized() ? unoptimizedTotalClasses : totalClasses) * <span class="number">4</span> / <span class="number">3</span>;</span><br><span class="line">    gdb_objc_realized_classes =</span><br><span class="line">        NXCreateMapTable(NXStrValueMapPrototype, namedClassesSize);</span><br><span class="line"></span><br><span class="line">    ts.<span class="built_in">log</span>(<span class="string">&quot;IMAGE TIMES: first time tasks&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>。。。</p>
<h4 id="loadImages"><a href="#loadImages" class="headerlink" title="loadImages"></a>loadImages</h4><p>【1】进入 <code>load_images</code> 方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">load_images(<span class="keyword">const</span> <span class="keyword">char</span> *path __unused, <span class="keyword">const</span> struct mach_header *mh)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!didInitialAttachCategories &amp;&amp; didCallDyldNotifyRegister) &#123;</span><br><span class="line">        didInitialAttachCategories = <span class="literal">true</span>;</span><br><span class="line">        loadAllCategories();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return without taking locks if there are no +load methods here.</span></span><br><span class="line">    <span class="keyword">if</span> (!hasLoadMethods((<span class="keyword">const</span> headerType *)mh)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">recursive_mutex_locker_t</span> <span class="title">lock</span><span class="params">(loadMethodLock)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Discover load methods</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">mutex_locker_t</span> <span class="title">lock2</span><span class="params">(runtimeLock)</span></span>;</span><br><span class="line">        prepare_load_methods((<span class="keyword">const</span> headerType *)mh);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Call +load methods (without runtimeLock - re-entrant)</span></span><br><span class="line">    call_load_methods();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>prepare</code> 加载完所有 <code>load</code>   -&gt;  <code>call_load_methods()</code> 调用 <code>load</code> 方法</p>
<h5 id="prepare-load-methods"><a href="#prepare-load-methods" class="headerlink" title="prepare_load_methods"></a><code>prepare_load_methods</code></h5><p>【2】<code>prepare_load_methods</code> 实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare_load_methods</span><span class="params">(<span class="keyword">const</span> headerType *mhdr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> count, i;</span><br><span class="line"></span><br><span class="line">    runtimeLock.assertLocked();</span><br><span class="line">		<span class="comment">//拿到当前类的列表</span></span><br><span class="line">    <span class="keyword">classref_t</span> <span class="keyword">const</span> *classlist = </span><br><span class="line">        _getObjc2NonlazyClassList(mhdr, &amp;count);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        schedule_class_load(remapClass(classlist[i]));</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">//拿到分类列表</span></span><br><span class="line">    <span class="keyword">category_t</span> * <span class="keyword">const</span> *categorylist = _getObjc2NonlazyCategoryList(mhdr, &amp;count);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">category_t</span> *cat = categorylist[i];</span><br><span class="line">        Class cls = remapClass(cat-&gt;cls);</span><br><span class="line">        <span class="keyword">if</span> (!cls) <span class="keyword">continue</span>;  <span class="comment">// category for ignored weak-linked class</span></span><br><span class="line">        <span class="keyword">if</span> (cls-&gt;isSwiftStable()) &#123;</span><br><span class="line">            _objc_fatal(<span class="string">&quot;Swift class extensions and categories on Swift &quot;</span></span><br><span class="line">                        <span class="string">&quot;classes are not allowed to have +load methods&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        realizeClassWithoutSwift(cls, nil);</span><br><span class="line">        ASSERT(cls-&gt;ISA()-&gt;isRealized());</span><br><span class="line">        add_category_to_loadable_list(cat);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【2.1】进入 <code>schedule_class_load</code> 方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">schedule_class_load</span><span class="params">(Class cls)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cls) <span class="keyword">return</span>;</span><br><span class="line">    ASSERT(cls-&gt;isRealized());  <span class="comment">// _read_images should realize</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cls-&gt;data()-&gt;flags &amp; RW_LOADED) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ensure superclass-first ordering 递归加载 类 父类</span></span><br><span class="line">    schedule_class_load(cls-&gt;superclass);</span><br><span class="line"></span><br><span class="line">    add_class_to_loadable_list(cls);</span><br><span class="line">    cls-&gt;setInfo(RW_LOADED); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>递归加载类、父类，加载完毕后添加到 <code>loadable_list</code> 表，</p>
<p>继续查看 <code>add_class_to_loadable_list</code> 方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_class_to_loadable_list</span><span class="params">(Class cls)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IMP method;</span><br><span class="line"></span><br><span class="line">    loadMethodLock.assertLocked();</span><br><span class="line"></span><br><span class="line">    method = cls-&gt;getLoadMethod();</span><br><span class="line">    <span class="keyword">if</span> (!method) <span class="keyword">return</span>;  <span class="comment">// Don&#x27;t bother if cls has no +load method</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (PrintLoading) &#123;</span><br><span class="line">        _objc_inform(<span class="string">&quot;LOAD: class &#x27;%s&#x27; scheduled for +load&quot;</span>, </span><br><span class="line">                     cls-&gt;nameForLogging());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (loadable_classes_used == loadable_classes_allocated) &#123;</span><br><span class="line">        loadable_classes_allocated = loadable_classes_allocated*<span class="number">2</span> + <span class="number">16</span>;</span><br><span class="line">        loadable_classes = (struct loadable_class *)</span><br><span class="line">            <span class="built_in">realloc</span>(loadable_classes,</span><br><span class="line">                              loadable_classes_allocated *</span><br><span class="line">                              <span class="keyword">sizeof</span>(struct loadable_class));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    loadable_classes[loadable_classes_used].cls = cls;</span><br><span class="line">    loadable_classes[loadable_classes_used].method = method;</span><br><span class="line">    loadable_classes_used++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">loadable_class</span> &#123;</span></span><br><span class="line">    Class cls;  <span class="comment">// may be nil</span></span><br><span class="line">    IMP method;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>loadable_list</code> 表中存储的结构体 <code>loadable_class</code> ，包含当前类 <code>cls</code> ，和该类的 <code>load</code> 方法 <code>IMP</code></p>
<p><code>method = cls-&gt;getLoadMethod();</code> 就是获取到该类的 <code>load</code> 方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">IMP </span><br><span class="line">objc_class::getLoadMethod()</span><br><span class="line">&#123;</span><br><span class="line">    runtimeLock.assertLocked();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">method_list_t</span> *mlist;</span><br><span class="line"></span><br><span class="line">    ASSERT(isRealized());</span><br><span class="line">    ASSERT(ISA()-&gt;isRealized());</span><br><span class="line">    ASSERT(!isMetaClass());</span><br><span class="line">    ASSERT(ISA()-&gt;isMetaClass());</span><br><span class="line"></span><br><span class="line">    mlist = ISA()-&gt;data()-&gt;ro()-&gt;baseMethods();</span><br><span class="line">    <span class="keyword">if</span> (mlist) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; meth : *mlist) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *name = sel_cname(meth.name);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(name, <span class="string">&quot;load&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> meth.imp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以 <code>schedule_class_load</code> 就是先获取父类，再递归调用 <code>schedule_class_load</code> 方法，把父类的父类 -&gt; 父类 -&gt; 子类，这些类和的 <code>load</code> 方法加入到 <code>loadable_classes</code> 表中</p>
<p>所以类的 <code>+(load)</code> 方法执行顺序：是从父类到子类</p>
<p>回到【2】在执行 <code>schedule_class_load</code> 添加完类后，继续处理分类，分类调用 <code>_category_getLoadMethod</code> 方法获取到分类中重写的 <code>load</code> 方法，调用 <code>add_category_to_loadable_list</code> 方法，把分类和分类的 <code>load</code> 方法添加到 <code>loadable_categories</code> 表中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">loadable_category</span> &#123;</span></span><br><span class="line">    Category cat;  <span class="comment">// may be nil</span></span><br><span class="line">    IMP method;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>总结 <code>prepare_load_methods</code>：</p>
<p>1、处理类：递归先父类再子类，获取类和类的<code>load</code> 方法，合成结构体 <code>loadable_class</code> ，添加到 <code>loadable_classes</code> 表中</p>
<p>2、处理分类：获取分类<code>load</code> 方法，合成结构体 <code>loadable_category</code> ，添加到 <code>loadable_categories</code> 表中</p>
<h5 id="call-load-methods"><a href="#call-load-methods" class="headerlink" title="call_load_methods"></a>call_load_methods</h5><p>【3】进入 <code>call_load_methods</code> 方法，<code>load</code> 方法的调用部分</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_load_methods</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> loading = NO;</span><br><span class="line">    <span class="keyword">bool</span> more_categories;</span><br><span class="line"></span><br><span class="line">    loadMethodLock.assertLocked();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Re-entrant calls do nothing; the outermost call will finish the job.</span></span><br><span class="line">    <span class="keyword">if</span> (loading) <span class="keyword">return</span>;</span><br><span class="line">    loading = YES;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> *pool = objc_autoreleasePoolPush();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 1. Repeatedly call class +loads until there aren&#x27;t any more</span></span><br><span class="line">        <span class="keyword">while</span> (loadable_classes_used &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            call_class_loads();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. Call category +loads ONCE</span></span><br><span class="line">        more_categories = call_category_loads();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. Run more +loads if there are classes OR more untried categories</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (loadable_classes_used &gt; <span class="number">0</span>  ||  more_categories);</span><br><span class="line"></span><br><span class="line">    objc_autoreleasePoolPop(pool);</span><br><span class="line"></span><br><span class="line">    loading = NO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到有个 <code>do-while</code> 循环，<code>do-while</code> 循环里面会产生很多临时变量和函数，放到自动释放池里面，节省内存</p>
<p><code>do-while</code> 循环体部分可以看到 <code>load</code> 方法的调用是先调用主类，再调用分类的；下面<code>call_class_loads</code> 方法内</p>
<p>部从 <code>loadable_classes</code> 获取到类调用 <code>load</code> 方法也是先父类再子类</p>
<p>【3.1】查看 <code>call_class_loads</code> 方法实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">call_class_loads</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Detach current loadable list.</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">loadable_class</span> *<span class="title">classes</span> =</span> loadable_classes;</span><br><span class="line">    <span class="keyword">int</span> used = loadable_classes_used;</span><br><span class="line">    loadable_classes = nil;</span><br><span class="line">    loadable_classes_allocated = <span class="number">0</span>;</span><br><span class="line">    loadable_classes_used = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Call all +loads for the detached list.</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; used; i++) &#123;</span><br><span class="line">        Class cls = classes[i].cls;</span><br><span class="line">        <span class="keyword">load_method_t</span> load_method = (<span class="keyword">load_method_t</span>)classes[i].method;</span><br><span class="line">        <span class="keyword">if</span> (!cls) <span class="keyword">continue</span>; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (PrintLoading) &#123;</span><br><span class="line">            _objc_inform(<span class="string">&quot;LOAD: +[%s load]\n&quot;</span>, cls-&gt;nameForLogging());</span><br><span class="line">        &#125;</span><br><span class="line">        (*load_method)(cls, @selector(load));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Destroy the detached list.</span></span><br><span class="line">    <span class="keyword">if</span> (classes) <span class="built_in">free</span>(classes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从之前存储好的标 <code>loadable_classes</code> 中取出 <code>Class</code> 和 对应的 <code>load</code> 方法，直接调用</p>
<p>【3.2】<code>call_category_loads</code></p>
<p>从 <code>loadable_categories</code> 表中取出<code>loadable_category</code> ，通过 <code>_category_getClass</code> 获取分类对应的类，直接调用 <code>load</code> 方法</p>
<p><a href="https://www.jianshu.com/p/ea680941e084">深入APP启动之dyld、map_images、load_images</a></p>
]]></content>
  </entry>
  <entry>
    <title>《Flutter实战第二版》九：动画</title>
    <url>/2022/01/18/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%B9%9D%EF%BC%9A%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>《Flutter实战第二版》八：事件处理与通知</title>
    <url>/2022/01/18/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%AB%EF%BC%9A%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E4%B8%8E%E9%80%9A%E7%9F%A5/</url>
    <content><![CDATA[<h3 id="8-事件处理与通知"><a href="#8-事件处理与通知" class="headerlink" title="8 事件处理与通知"></a>8 事件处理与通知</h3><h4 id="8-1-原始指针事件处理"><a href="#8-1-原始指针事件处理" class="headerlink" title="8.1 原始指针事件处理"></a>8.1 原始指针事件处理</h4><p>Flutter 中可以使用 Listener 来监听原始触摸事件</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Listener(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  <span class="keyword">this</span>.onPointerDown, <span class="comment">//手指按下回调</span></span><br><span class="line">  <span class="keyword">this</span>.onPointerMove, <span class="comment">//手指移动回调</span></span><br><span class="line">  <span class="keyword">this</span>.onPointerUp,<span class="comment">//手指抬起回调</span></span><br><span class="line">  <span class="keyword">this</span>.onPointerCancel,<span class="comment">//触摸事件取消回调</span></span><br><span class="line">  <span class="keyword">this</span>.behavior = HitTestBehavior.deferToChild, <span class="comment">//先忽略此参数，后面小节会专门介绍</span></span><br><span class="line">  Widget child</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<p>手指在容器上移动时查看手指相对于容器的位置</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_DemoState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Demo</span>&gt; </span>&#123;</span><br><span class="line">  PointerEvent? _event;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;标题&#x27;</span>)),</span><br><span class="line">      body: Listener(</span><br><span class="line">        child: Container(</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">          width: <span class="number">300.0</span>,</span><br><span class="line">          height: <span class="number">150.0</span>,</span><br><span class="line">          child: Text(<span class="string">&#x27;<span class="subst">$&#123;_event?.localPosition ?? <span class="string">&#x27;&#x27;</span>&#125;</span>&#x27;</span>,style: TextStyle(color: Colors.white)),</span><br><span class="line">        ),</span><br><span class="line">        onPointerDown: (PointerDownEvent event) =&gt; setState(() =&gt; _event = event),</span><br><span class="line">        onPointerMove: (PointerMoveEvent event) =&gt; setState(() =&gt; _event = event),</span><br><span class="line">        onPointerUp: (PointerUpEvent event) =&gt; setState(() =&gt; _event = event),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》八：事件处理与通知/WeChat2b7b8f8ebecd7a3a530fce169a8d1389.png" alt="WeChat2b7b8f8ebecd7a3a530fce169a8d1389" style="zoom:80%;" />

<p>PointerEvent 类中包括当前指针的一些信息<br>position：指针相对于全局坐标的偏移<br>localPosition：指针相对于本身布局坐标系的偏移<br>delta：两次指针移动事件（PointerMoveEvent）的距离<br>pressure：按压力度，如果手机不支持压力传感器，则始终为1<br>orientation：指针移动方向，是一个角度值</p>
<ul>
<li>忽略指针事件</li>
</ul>
<p>如果不想让某个子树响应 PointerEvent 的话，可以使用 IgnorePointer 和 AbsorbPointer，两个组件都能阻止子树接收指针事件；不同在于 AbsorbPointer 会参与命中测试（Hit Test）IgnorePointer 不会，意味着 AbsorbPointer 本身是可以接收指针事件的（但其子树不行）</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Listener(</span><br><span class="line">  child: AbsorbPointer(</span><br><span class="line">    child: Listener(</span><br><span class="line">      child: Container(</span><br><span class="line">        color: Colors.red,</span><br><span class="line">        width: <span class="number">200.0</span>,</span><br><span class="line">        height: <span class="number">100.0</span>,</span><br><span class="line">      ),</span><br><span class="line">      onPointerDown: (event)=&gt;<span class="built_in">print</span>(<span class="string">&quot;in&quot;</span>),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">  onPointerDown: (event)=&gt;<span class="built_in">print</span>(<span class="string">&quot;up&quot;</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>点击 Container 会输出 up，换成 IgnorePointer 两个都不会输出</p>
<h4 id="8-2-手势识别"><a href="#8-2-手势识别" class="headerlink" title="8.2 手势识别"></a>8.2 手势识别</h4><h5 id="8-2-1-GestureDetector"><a href="#8-2-1-GestureDetector" class="headerlink" title="8.2.1 GestureDetector"></a>8.2.1 GestureDetector</h5><p>手势识别的功能性组件，内部封装了 Listener</p>
<ul>
<li>点击、双击、长按</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_DemoState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Demo</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> _operation = <span class="string">&quot;No Gesture detected!&quot;</span>; <span class="comment">//保存事件名</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;标题&#x27;</span>)),</span><br><span class="line">      body: GestureDetector(</span><br><span class="line">        child: Container(</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">          width: <span class="number">200.0</span>,</span><br><span class="line">          height: <span class="number">100.0</span>,</span><br><span class="line">          child: Text( _operation, style: TextStyle(color: Colors.white)),</span><br><span class="line">        ),</span><br><span class="line">        onTap: () =&gt; updateText(<span class="string">&quot;Tap&quot;</span>), <span class="comment">//点击</span></span><br><span class="line">        onDoubleTap: () =&gt; updateText(<span class="string">&quot;DoubleTap&quot;</span>), <span class="comment">//双击</span></span><br><span class="line">        onLongPress: () =&gt; updateText(<span class="string">&quot;LongPress&quot;</span>), <span class="comment">//长按</span></span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> updateText(<span class="built_in">String</span> text) &#123;</span><br><span class="line">    <span class="comment">//更新显示的事件名</span></span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _operation = text;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>拖动、滑动</li>
</ul>
<p>GestureDetector 会将要监听的组件的原点（左上角）作为本次手势的原点</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_DemoState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Demo</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">double</span> _top = <span class="number">0.0</span>; <span class="comment">//距顶部的偏移</span></span><br><span class="line">  <span class="built_in">double</span> _left = <span class="number">0.0</span>;<span class="comment">//距左边的偏移</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;标题&#x27;</span>)),</span><br><span class="line">      body: Stack(</span><br><span class="line">        children: [</span><br><span class="line">          Positioned(</span><br><span class="line">            top: _top,</span><br><span class="line">            left: _left,</span><br><span class="line">            child: GestureDetector(</span><br><span class="line">              child: CircleAvatar(child: Text(<span class="string">&#x27;A&#x27;</span>)),</span><br><span class="line">              <span class="comment">//手指按下时会触发此回调</span></span><br><span class="line">              onPanDown: (DragDownDetails e) &#123;</span><br><span class="line">                <span class="comment">//打印手指按下的位置(相对于屏幕)</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;用户手指按下：<span class="subst">$&#123;e.globalPosition&#125;</span>&quot;</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="comment">//手指滑动时会触发此回调</span></span><br><span class="line">              onPanUpdate: (DragUpdateDetails e) &#123;</span><br><span class="line">                <span class="comment">//用户手指滑动时，更新偏移，重新构建</span></span><br><span class="line">                setState(() &#123;</span><br><span class="line">                  _left += e.delta.dx;</span><br><span class="line">                  _top += e.delta.dy;</span><br><span class="line">                &#125;);</span><br><span class="line">              &#125;,</span><br><span class="line">              onPanEnd: (DragEndDetails e)&#123;</span><br><span class="line">                <span class="comment">//打印滑动结束时在x、y轴上的速度</span></span><br><span class="line">                <span class="built_in">print</span>(e.velocity);</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》八：事件处理与通知/WeChat086c3a31a2342c497e33c9b744b41fc2.png" alt="WeChat086c3a31a2342c497e33c9b744b41fc2" style="zoom:80%;" />

<p>DragDownDetails.globalPosition：用户按下时，按下位置相对于屏幕（非父组件）原点（左上角）的偏移</p>
<p>DragUpdateDetails.delta：屏幕上滑动时，会对次触发 Update 事件，delta 指一次 Update 事件的滑动的偏移量</p>
<p>DragEndDetails.velocity：用户抬起手指时的滑动速度</p>
<ul>
<li>单一方向拖动</li>
</ul>
<p>GestureDetector 可以只识别特定方向的手势事件</p>
<p>改成只能沿垂直方向拖动</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">child: GestureDetector(</span><br><span class="line">    child: CircleAvatar(child: Text(<span class="string">&quot;A&quot;</span>)),</span><br><span class="line">    <span class="comment">//垂直方向拖动事件</span></span><br><span class="line">    onVerticalDragUpdate: (DragUpdateDetails details) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _top += details.delta.dy;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>缩放</li>
</ul>
<p>GestureDetector 可以监听缩放事件</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_Scale</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _Scale(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ScaleState createState() =&gt; _ScaleState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ScaleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">_Scale</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">double</span> _width = <span class="number">200.0</span>; <span class="comment">//通过修改图片宽度来达到缩放效果</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: GestureDetector(</span><br><span class="line">        <span class="comment">//指定宽度，高度自适应</span></span><br><span class="line">        child: Image.asset(<span class="string">&quot;./images/sea.png&quot;</span>, width: _width),</span><br><span class="line">        onScaleUpdate: (ScaleUpdateDetails details) &#123;</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            <span class="comment">//缩放倍数在0.8到10倍之间</span></span><br><span class="line">            _width=<span class="number">200</span>*details.scale.clamp(<span class="number">.8</span>, <span class="number">10.0</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="8-2-2-GestureRecognizer"><a href="#8-2-2-GestureRecognizer" class="headerlink" title="8.2.2 GestureRecognizer"></a>8.2.2 GestureRecognizer</h5><p>GestureDetector 内部是使用一个或多个 Gesturerecognizer 来识别各种手势的</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="comment">//用到GestureRecognizer的话一定要调用其dispose方法释放资源</span></span><br><span class="line">    _tapGestureRecognizer.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">Widget _recognizeChild() &#123;</span><br><span class="line"><span class="keyword">return</span> Positioned(</span><br><span class="line">  top: <span class="number">20</span>,</span><br><span class="line">  child: Text.rich(</span><br><span class="line">    TextSpan(</span><br><span class="line">      children: [</span><br><span class="line">        TextSpan(text: <span class="string">&#x27;你好世界&#x27;</span>),</span><br><span class="line">        TextSpan(</span><br><span class="line">          text: <span class="string">&#x27;你好世界&#x27;</span>,</span><br><span class="line">          style: TextStyle(</span><br><span class="line">            fontSize: <span class="number">30.0</span>,</span><br><span class="line">            color: _toggle ? Colors.blue : Colors.red,</span><br><span class="line">          ),</span><br><span class="line">          recognizer: _tapGestureRecognizer</span><br><span class="line">            ..onTap = () &#123;</span><br><span class="line">              setState(() &#123;</span><br><span class="line">                _toggle = !_toggle;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">        ),</span><br><span class="line">        TextSpan(text: <span class="string">&#x27;你好世界&#x27;</span>),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用GestureRecognizer后一定要调用其dispose()方法来释放资源</p>
<h4 id="8-3-Flutter-事件机制"><a href="#8-3-Flutter-事件机制" class="headerlink" title="8.3 Flutter 事件机制"></a>8.3 Flutter 事件机制</h4><h4 id="8-4-手势原理与手势冲突"><a href="#8-4-手势原理与手势冲突" class="headerlink" title="8.4 手势原理与手势冲突"></a>8.4 手势原理与手势冲突</h4><h4 id="8-5-事件总线"><a href="#8-5-事件总线" class="headerlink" title="8.5 事件总线"></a>8.5 事件总线</h4><h4 id="8-6-通知-Notification"><a href="#8-6-通知-Notification" class="headerlink" title="8.6 通知 Notification"></a>8.6 通知 Notification</h4>]]></content>
  </entry>
  <entry>
    <title>《Flutter实战第二版》十三：国际化</title>
    <url>/2022/03/02/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%8D%81%E4%B8%89%EF%BC%9A%E5%9B%BD%E9%99%85%E5%8C%96/</url>
    <content><![CDATA[<h5 id="13-1-2-支持国际化"><a href="#13-1-2-支持国际化" class="headerlink" title="13.1.2 支持国际化"></a>13.1.2 支持国际化</h5><p>pubspec.yaml 添加 flutter_localizations 的依赖包</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  flutter:</span><br><span class="line">    sdk: flutter</span><br><span class="line">  flutter_localizations:</span><br><span class="line">    sdk: flutter</span><br></pre></td></tr></table></figure>

<p>指定 MaterialApp 的 localizationsDelegates 和 supportedLocales</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_localizations/flutter_localizations.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      localizationsDelegates: [</span><br><span class="line">        GlobalMaterialLocalizations.delegate,</span><br><span class="line">        GlobalWidgetsLocalizations.delegate,</span><br><span class="line">      ],</span><br><span class="line">      supportedLocales: [</span><br><span class="line">        Locale(<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;US&#x27;</span>),<span class="comment">// 美国英语 Locale 包括语言和国家两个标志</span></span><br><span class="line">        Locale(<span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;CN&#x27;</span>),<span class="comment">// 中文简体</span></span><br><span class="line">        <span class="comment">//其它Locales</span></span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与 MaterialApp 类为入口的应用不同，对基于 WidgetsApp 类为入口的应用进行国际化时不需要 GlobalMaterialLocalizations.delegate</p>
<p>GlobalMaterialLocalizations.delegate 为 Material 组件库提供的本地化的字符串和其它值，可以使 Material 组件支持多语言<br>GlobalWidgetsLocalizations.delegate 定义组件默认的文本方向，从左到右或从右到左<br>supportedLocales 应用支持的语言列表</p>
<h5 id="13-1-3-获取当前区域-Locale"><a href="#13-1-3-获取当前区域-Locale" class="headerlink" title="13.1.3 获取当前区域 Locale"></a>13.1.3 获取当前区域 Locale</h5><p>Locale 类是用来标识用户的语言环境的，包括语言和国家两个标志</p>
<p>获取当前区域 Locale</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Locale myLocale = Localizations.localeOf(context);</span><br></pre></td></tr></table></figure>

<h5 id="13-1-4-监听系统语言切换"><a href="#13-1-4-监听系统语言切换" class="headerlink" title="13.1.4 监听系统语言切换"></a>13.1.4 监听系统语言切换</h5><p>当更改系统语言设置时，APP 中的 Localizations 组件会重新构建，Localizations.localeOf(context) 获取的 Locale 就会更新，最终界面会重新 build</p>
<p>可以通过 localeResolutionCallback 或 localeListResolutionCallback 回调来监听 Locale 改变事件</p>
<h4 id="13-3-使用-Intl-包"><a href="#13-3-使用-Intl-包" class="headerlink" title="13.3 使用 Intl 包"></a>13.3 使用 Intl 包</h4><h5 id="13-3-1-添加依赖"><a href="#13-3-1-添加依赖" class="headerlink" title="13.3.1 添加依赖"></a>13.3.1 添加依赖</h5><p>使用 Intl 包可以非常轻松的实现国际化</p>
<p>添加两个依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  intl: ^0.17.0 </span><br><span class="line">dev_dependencies:</span><br><span class="line">  intl_generator:  0.2.1 </span><br></pre></td></tr></table></figure>

<p>intl_generator 组要包含了一些工具，开发阶段主要作用是从代码中提取要国际化的字符串到单独的 arb 文件，和根据 arb 文件生成对应语言的 dart 代码。而 intl 包主要是引用和加载 intl——generator 生成后的 dart 代码</p>
<h5 id="13-3-2-创建必要目录"><a href="#13-3-2-创建必要目录" class="headerlink" title="13.3.2 创建必要目录"></a>13.3.2 创建必要目录</h5><p>根目录创建 l10n-arb 目录，保存接下来通过 intl_generator 命令生成的 arb 文件</p>
<p>lib 目录下创建 l10n 目录，保存从 arb 文件生成的 dart 代码文件</p>
<h5 id="13-3-3-实现-Localizations-和-Delegate-类"><a href="#13-3-3-实现-Localizations-和-Delegate-类" class="headerlink" title="13.3.3 实现 Localizations 和 Delegate 类"></a>13.3.3 实现 Localizations 和 Delegate 类</h5>]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>《Flutter实战第二版》十五：一个完整的Flutter应用</title>
    <url>/2022/01/28/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%8D%81%E4%BA%94%EF%BC%9A%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84Flutter%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h3 id="15-一个完整的-Flutter-应用"><a href="#15-一个完整的-Flutter-应用" class="headerlink" title="15 一个完整的 Flutter 应用"></a>15 一个完整的 Flutter 应用</h3><h4 id="15-1-Github-客户端示例"><a href="#15-1-Github-客户端示例" class="headerlink" title="15.1 Github 客户端示例"></a>15.1 Github 客户端示例</h4><p>需要实现功能：</p>
<p>Github 账号登录、退出登录<br>登录后查看自己项目主页<br>支持换肤<br>支持多语言<br>登录状态持久化</p>
<h4 id="15-2-APP-代码结构"><a href="#15-2-APP-代码结构" class="headerlink" title="15.2 APP 代码结构"></a>15.2 APP 代码结构</h4><img src="《Flutter实战第二版》十五：一个完整的Flutter应用/WeChat3794f9d995c042b43f483a645aedb4d0.png" alt="WeChat3794f9d995c042b43f483a645aedb4d0" style="zoom:76%;" />

<p>l10n-arg 文件夹用于保存各国语言对应的 arb 文件</p>
<img src="《Flutter实战第二版》十五：一个完整的Flutter应用/WeChat34b91b756765ef038ab6c2be2dba0c3a.png" alt="WeChat34b91b756765ef038ab6c2be2dba0c3a"  />

<table>
<thead>
<tr>
<th>文件夹</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>common</td>
<td>一些工具类，如通用方法类、网络接口类、保存全局变量的静态类等</td>
</tr>
<tr>
<td>l10n</td>
<td>国际化相关的类都在此目录下</td>
</tr>
<tr>
<td>models</td>
<td>Json文件对应的Dart Model类会在此目录下</td>
</tr>
<tr>
<td>states</td>
<td>保存APP中需要跨组件共享的状态类</td>
</tr>
<tr>
<td>routes</td>
<td>存放所有路由页面类</td>
</tr>
<tr>
<td>widgets</td>
<td>APP内封装的一些Widget组件都在该目录下</td>
</tr>
</tbody></table>
<h4 id="15-3-Model-类定义"><a href="#15-3-Model-类定义" class="headerlink" title="15.3 Model 类定义"></a>15.3 Model 类定义</h4><ul>
<li>Github 账号信息</li>
</ul>
<p>Github API 接口返回 json 结构如下</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;login&quot;</span>: <span class="string">&quot;octocat&quot;</span>, <span class="comment">//用户登录名</span></span><br><span class="line">  <span class="string">&quot;avatar_url&quot;</span>: <span class="string">&quot;https://github.com/images/error/octocat_happy.gif&quot;</span>, <span class="comment">//用户头像地址</span></span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;User&quot;</span>, <span class="comment">//用户类型，可能是组织</span></span><br><span class="line">  <span class="string">&quot;name?&quot;</span>: <span class="string">&quot;monalisa octocat&quot;</span>, <span class="comment">//用户名字</span></span><br><span class="line">  <span class="string">&quot;company?&quot;</span>: <span class="string">&quot;GitHub&quot;</span>, <span class="comment">//公司</span></span><br><span class="line">  <span class="string">&quot;blog?&quot;</span>: <span class="string">&quot;https://github.com/blog&quot;</span>, <span class="comment">//博客地址</span></span><br><span class="line">  <span class="string">&quot;location?&quot;</span>: <span class="string">&quot;San Francisco&quot;</span>, <span class="comment">// 用户所处地理位置</span></span><br><span class="line">  <span class="string">&quot;email?&quot;</span>: <span class="string">&quot;octocat@github.com&quot;</span>, <span class="comment">// 邮箱</span></span><br><span class="line">  <span class="string">&quot;hireable?&quot;</span>: <span class="keyword">false</span>,</span><br><span class="line">  <span class="string">&quot;bio?&quot;</span>: <span class="string">&quot;There once was...&quot;</span>, <span class="comment">// 用户简介</span></span><br><span class="line">  <span class="string">&quot;public_repos&quot;</span>: <span class="number">2</span>, <span class="comment">// 公开项目数</span></span><br><span class="line">  <span class="string">&quot;followers&quot;</span>: <span class="number">20</span>, <span class="comment">//关注该用户的人数</span></span><br><span class="line">  <span class="string">&quot;following&quot;</span>: <span class="number">0</span>, <span class="comment">// 该用户关注的人数</span></span><br><span class="line">  <span class="string">&quot;created_at&quot;</span>: <span class="string">&quot;2008-01-14T04:33:35Z&quot;</span>, <span class="comment">// 账号创建时间</span></span><br><span class="line">  <span class="string">&quot;updated_at&quot;</span>: <span class="string">&quot;2008-01-14T04:33:35Z&quot;</span>, <span class="comment">// 账号信息更新时间</span></span><br><span class="line">  <span class="string">&quot;total_private_repos&quot;</span>: <span class="number">100</span>, <span class="comment">//该用户总的私有项目数(包括参与的其它组织的私有项目)</span></span><br><span class="line">  <span class="string">&quot;owned_private_repos&quot;</span>: <span class="number">100</span> <span class="comment">//该用户自己的私有项目数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>jsons 目录下创建一个 user.json 文件保存</p>
<ul>
<li>API 缓存策略信息</li>
</ul>
<p>创建 cacheConfig.json 文件缓存策略</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;enable&quot;</span>:<span class="keyword">true</span>, <span class="comment">// 是否启用缓存</span></span><br><span class="line">  <span class="string">&quot;maxAge&quot;</span>:<span class="number">1000</span>, <span class="comment">// 缓存的最长时间，单位（秒）</span></span><br><span class="line">  <span class="string">&quot;maxCount&quot;</span>:<span class="number">100</span> <span class="comment">// 最大缓存数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>用户信息</li>
</ul>
<p>profile.json </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;user?&quot;</span>:<span class="string">&quot;<span class="subst">$user</span>&quot;</span>, <span class="comment">//Github账号信息，结构见&quot;user.json&quot;</span></span><br><span class="line">  <span class="string">&quot;token?&quot;</span>:<span class="string">&quot;&quot;</span>, <span class="comment">// 登录用户的token(oauth)或密码</span></span><br><span class="line">  <span class="string">&quot;theme&quot;</span>:<span class="number">0</span>, <span class="comment">//主题索引</span></span><br><span class="line">  <span class="string">&quot;cache?&quot;</span>:<span class="string">&quot;<span class="subst">$cacheConfig</span>&quot;</span>, <span class="comment">// 缓存策略信息，结构见&quot;cacheConfig.json&quot;</span></span><br><span class="line">  <span class="string">&quot;lastLogin?&quot;</span>:<span class="string">&quot;&quot;</span>, <span class="comment">//最近一次的注销登录的用户名</span></span><br><span class="line">  <span class="string">&quot;locale?&quot;</span>:<span class="string">&quot;&quot;</span> <span class="comment">// APP语言信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>项目信息</li>
</ul>
<p>repo.json 文件保存项目信息</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="number">1296269</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Hello-World&quot;</span>, <span class="comment">//项目名称</span></span><br><span class="line">  <span class="string">&quot;full_name&quot;</span>: <span class="string">&quot;octocat/Hello-World&quot;</span>, <span class="comment">//项目完整名称</span></span><br><span class="line">  <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;<span class="subst">$user</span>&quot;</span>, <span class="comment">// 项目拥有者，结构见&quot;user.json&quot;</span></span><br><span class="line">  <span class="string">&quot;parent?&quot;</span>:<span class="string">&quot;<span class="subst">$repo</span>&quot;</span>, <span class="comment">// 如果是fork的项目，则此字段表示fork的父项目信息</span></span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="keyword">false</span>, <span class="comment">// 是否私有项目</span></span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;This your first repo!&quot;</span>, <span class="comment">//项目描述</span></span><br><span class="line">  <span class="string">&quot;fork&quot;</span>: <span class="keyword">false</span>, <span class="comment">// 该项目是否为fork的项目</span></span><br><span class="line">  <span class="string">&quot;language?&quot;</span>: <span class="string">&quot;JavaScript&quot;</span>,<span class="comment">//该项目的主要编程语言</span></span><br><span class="line">  <span class="string">&quot;forks_count&quot;</span>: <span class="number">9</span>, <span class="comment">// fork了该项目的数量</span></span><br><span class="line">  <span class="string">&quot;stargazers_count&quot;</span>: <span class="number">80</span>, <span class="comment">//该项目的star数量</span></span><br><span class="line">  <span class="string">&quot;size&quot;</span>: <span class="number">108</span>, <span class="comment">// 项目占用的存储大小</span></span><br><span class="line">  <span class="string">&quot;default_branch&quot;</span>: <span class="string">&quot;master&quot;</span>, <span class="comment">//项目的默认分支</span></span><br><span class="line">  <span class="string">&quot;open_issues_count&quot;</span>: <span class="number">2</span>, <span class="comment">//该项目当前打开的issue数量</span></span><br><span class="line">  <span class="string">&quot;pushed_at&quot;</span>: <span class="string">&quot;2011-01-26T19:06:43Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span>: <span class="string">&quot;2011-01-26T19:01:12Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;updated_at&quot;</span>: <span class="string">&quot;2011-01-26T19:14:43Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;subscribers_count?&quot;</span>: <span class="number">42</span>, <span class="comment">//订阅（关注）该项目的人数</span></span><br><span class="line">  <span class="string">&quot;license?&quot;</span>: &#123; <span class="comment">// 该项目的开源许可证</span></span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;mit&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;MIT License&quot;</span>,</span><br><span class="line">    <span class="string">&quot;spdx_id&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">    <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://api.github.com/licenses/mit&quot;</span>,</span><br><span class="line">    <span class="string">&quot;node_id&quot;</span>: <span class="string">&quot;MDc6TGljZW5zZW1pdA==&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>生成 Dart Model 类</li>
</ul>
<p>添加包 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">json_model: ^<span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">json_serializable: ^<span class="number">6.1</span><span class="number">.4</span></span><br></pre></td></tr></table></figure>

<p>根目录运行 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter packages pub run json_model</span><br></pre></td></tr></table></figure>

<p>执行后在 lib/models 文件夹下会生成相应的 Dart Model 类</p>
<img src="《Flutter实战第二版》十五：一个完整的Flutter应用/WeChatd1808cadb57d89cee1dc0a463410b7be.png" alt="WeChatd1808cadb57d89cee1dc0a463410b7be" style="zoom:80%;" />

<ul>
<li>数据持久化</li>
</ul>
<p>使用 shared_preferences 包来对登录用户的 profile 信息进行持久化，shared_preferences 是一个 Flutter 插件，通过 Android 和 iOS 平台提供的机制来实现数据持久化</p>
<h4 id="15-4-全局变量及共享状态"><a href="#15-4-全局变量及共享状态" class="headerlink" title="15.4 全局变量及共享状态"></a>15.4 全局变量及共享状态</h4><p>全局变量：单纯指会贯穿整个APP生命周期的变量，单纯保存一些信息或者封装一些全局工具和方法的对象</p>
<p>共享状态：指那些需要跨组件或跨路由共享的信息</p>
<p>区别在于共享状态发生改变时需要通知所有使用该状态的组件，全局变量不需要</p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>事件传递和响应</title>
    <url>/2021/07/20/%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E5%92%8C%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<h4 id="1、事件的传递"><a href="#1、事件的传递" class="headerlink" title="1、事件的传递"></a>1、事件的传递</h4><h5 id="1-1-事件传递流程"><a href="#1-1-事件传递流程" class="headerlink" title="1.1 事件传递流程"></a>1.1 事件传递流程</h5><p>事件发生后，系统会将事件加入到一个由 UIApplication 管理的事件队列中<br>UIApplication 会从事件队列中取出最前面的事件，分发下去，首先传给 UIWindow<br>UIWindow 会在视图层次结构中找到一个最合适的视图来处理事件</p>
<p>触摸事件的传递是从父控件传递到子控件<br>UIApplication -&gt; Window -&gt; 寻找最合适的视图来处理事件</p>
<h5 id="1-2-寻找最合适的视图"><a href="#1-2-寻找最合适的视图" class="headerlink" title="1.2 寻找最合适的视图"></a>1.2 寻找最合适的视图</h5><p>内部通过调用 <code>hitTest:withEvent</code> 方法找最终响应视图</p>
<p><code>hitTest:withEvent</code> 底层实现：</p>
<ol>
<li>判断当前控件能不能接收事件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(self.userInteractionEnabled &#x3D;&#x3D; NO || self.hidden &#x3D;&#x3D; YES || self.alpha &lt;&#x3D; 0.01)</span><br><span class="line">return  nil;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>判断触摸点在不在当前的控件上</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(![self pointInside:point withEvent:event]) return nil;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>从后往前遍历自己的子控件（最后添加的子视图先遍历）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int count &#x3D; (int)self.subviews.count;</span><br><span class="line">for (int i &#x3D; count - 1; i &gt;&#x3D; 0;i-- ) &#123;</span><br><span class="line">	UIView *childV &#x3D; self.subviews[i];</span><br><span class="line">	&#x2F;&#x2F;把当前坐标系上的点转换成子控件坐标系上的点.</span><br><span class="line">	CGPoint childP &#x3D; [self convertPoint:point toView:childV];</span><br><span class="line">	&#x2F;&#x2F;判断自己的子控件是不是最适合的View 对子view进行 hitTest</span><br><span class="line">	UIView *fitView &#x3D; [childV hitTest:childP withEvent:event];</span><br><span class="line">	&#x2F;&#x2F;如果子控件是最适合的View,直接返回</span><br><span class="line">  if (fitView) &#123;</span><br><span class="line">    return fitView;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>如果没有找到最合适的view，自己就是最合适的view</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return self</span><br></pre></td></tr></table></figure>

<h5 id="1-3-应用"><a href="#1-3-应用" class="headerlink" title="1.3 应用"></a>1.3 应用</h5><ol>
<li>扩大button的响应区域</li>
<li>子view超出了父view的bounds响应事件</li>
<li>使部分区域失去响应</li>
<li>让非scrollView区域响应scrollView拖拽事件</li>
</ol>
<p>button被view遮住了，要让button接收事件</p>
<p><img src="/2021/07/20/%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E5%92%8C%E5%93%8D%E5%BA%94/button.png" alt="button"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123;</span><br><span class="line">    &#x2F;&#x2F;return [super hitTest:point withEvent:event];</span><br><span class="line">    &#x2F;&#x2F;拿到后面的按钮</span><br><span class="line">    &#x2F;&#x2F;当点在按钮上的时候,才返回按钮,如果不在按钮上.保持系统默认做法</span><br><span class="line">    &#x2F;&#x2F;判断点在不在按钮身上</span><br><span class="line">    &#x2F;&#x2F;把当前的点转换到按钮身上的坐标系的点</span><br><span class="line">    CGPoint btnP &#x3D; [self convertPoint:point toView:self.btn];</span><br><span class="line">    if ([self.btn pointInside:btnP withEvent:event]) &#123;</span><br><span class="line">        return self.btn;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return [super hitTest:point withEvent:event];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2、事件响应"><a href="#2、事件响应" class="headerlink" title="2、事件响应"></a>2、事件响应</h4><p>传递链是用来获取第一响应者，接下来开始响应事件</p>
<p>响应链条：firstView -&gt; super view -&gt; … -&gt; viewcontroller -&gt;window -&gt; application -&gt; appdelegate</p>
<p>找到最合适的视图后，事件会从视图开始，沿着响应链 nextResponder 传递，直到找到处理事件的视图，没有处理的事件会被丢弃</p>
<p>如果有父视图，则 nextResponder指向父视图</p>
<p>响应链传递</p>
<p><img src="/2021/07/20/%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E5%92%8C%E5%93%8D%E5%BA%94/%E5%93%8D%E5%BA%94%E9%93%BE%E4%BC%A0%E9%80%92.png" alt="响应链传递"></p>
<h5 id="2-1-系统响应"><a href="#2-1-系统响应" class="headerlink" title="2.1 系统响应"></a>2.1 系统响应</h5><p>屏幕点击后，将事件交由 IOKit 处理</p>
<p>IOKit 将事件封装成一个 IOHIDEvent 对象，通过 mach port 传递给 SpringBoard 进程</p>
<p>SpringBoard 接收到触摸事件，触发主线程 RunLoop 的 source1回调</p>
<p>如果此时在桌面，则交给桌面系统消耗该事件</p>
<p>如果此时在 APP，通过 IPC（进程通信）传给 APP 进程</p>
<h5 id="2-2-APP响应"><a href="#2-2-APP响应" class="headerlink" title="2.2 APP响应"></a>2.2 APP响应</h5><p>APP 进程的 mach port 接收到 SpringBoard 触摸事件，主线程 RunLoop 被唤醒，触发 source1 回调</p>
<p>source1 内部触发了 source0 回调，将接收的 IOHIDEvent 对象封装成 UIEvent 对象</p>
<p>source0 将事件添加到 UIApplication 对象的事件队列中，开始寻找最佳响应者</p>
<h5 id="2-3-应用"><a href="#2-3-应用" class="headerlink" title="2.3 应用"></a>2.3 应用</h5><ul>
<li>利用响应链获取 view 的控制器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension UIView &#123;</span><br><span class="line">    var viewController: UIViewController? &#123;</span><br><span class="line">        var next &#x3D; next</span><br><span class="line">        var current: UIViewController?</span><br><span class="line">        while next !&#x3D; nil &#123;</span><br><span class="line">            if next is UIViewController &#123;</span><br><span class="line">                return next as? UIViewController</span><br><span class="line">            &#125;</span><br><span class="line">            next &#x3D; next?.next</span><br><span class="line">        &#125;</span><br><span class="line">        return current</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3、面试题"><a href="#3、面试题" class="headerlink" title="3、面试题"></a>3、面试题</h4><ul>
<li>APP 中间有个 button，在你手触摸屏幕点击后，到这个 button 收到点击事件，中间发生了什么？</li>
</ul>
<ol>
<li>设备将 touch 到的 UITouch 和 UIEvent 对象打包，放到当前活动的 Application 的事件队列中</li>
<li>UIApplication 会从事件队列中取出触摸事件并传递给 UIWindow</li>
<li>UIWindow 使用 hitTest:withEvent 方法查找操作所在视图</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>二进制重排</title>
    <url>/2021/07/30/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/</url>
    <content><![CDATA[<p><a href="https://mp.weixin.qq.com/s/Drmmx5JtjG3UtTFksL6Q8Q">抖音二进制重排</a></p>
]]></content>
  </entry>
  <entry>
    <title>内存管理</title>
    <url>/2021/07/23/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h4 id="内存分布"><a href="#内存分布" class="headerlink" title="内存分布"></a>内存分布</h4><p>iOS 中的内存区域从低地址到高地址：.text 段（代码区）、.data 段（已初始化全局变量、静态变量）、.bss 段（未初始化全局变量、静态变量）、堆区、栈区</p>
<img src="内存分布.png" alt="内存分布" style="zoom:40%;" />

<p>堆区：</p>
<p>低地址向高地址拓展数据结构，不连续的内存区域，先进先出，由程序员动态分配和释放，通过 alloc 分配的对象</p>
<p>缺点：手动管理，速度慢，容易产生内存碎片</p>
<p>栈区：</p>
<p>高地址向低地址拓展的数据结构，连续内存区域，后进先出，一般运行时分配，编译器自动分配并释放</p>
<p>由编译器自动分配并释放，不会产生内存碎片，速度快，缺点：内存大小限制不灵活</p>
<h4 id="TaggedPointer"><a href="#TaggedPointer" class="headerlink" title="TaggedPointer"></a>TaggedPointer</h4><p>普通对象的查找过程：从栈中找到指针，然后去堆中寻找指针对应的内存空间，进而读取值</p>
<p>64 bit 开始，引入了 TaggedPointer 技术，用于优化 NSNumber、NSDate、NSString 等小对象存储</p>
<p>TaggedPointer 通过在其最后一个 bit 位设置一个特殊标记，用于将数据直接保存到指针本身</p>
<p>TaggedPointer 指针的值不再是堆区地址，而是真正的值。所以实际上它不再是一个对象了，内存并不存储在堆中</p>
<p>将对象的指针拆分成两部分，一部分直接保存数据，另一部分作为特殊标记，表示这是一个特殊指针，不指向任何一个地址</p>
<ul>
<li>引入 TaggedPointer 对象之后，64 位 CPU 下 NSNumber 的内存变成这样</li>
</ul>
<img src="nsnumber.png" alt="nsnumber" style="zoom:60%;" />



<ul>
<li>执行以下代码，有什么区别</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dispatch_queue_t queue &#x3D; dispatch_get_global_queue(0, 0);</span><br><span class="line">for (int i &#x3D; 0; i &lt; 1000; i++) &#123;</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        self.name &#x3D; [NSString stringWithFormat:@&quot;abcdefghij&quot;];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dispatch_queue_t queue &#x3D; dispatch_get_global_queue(0, 0);</span><br><span class="line">for (int i &#x3D; 0; i &lt; 1000; i++) &#123;</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        self.name &#x3D; [NSString stringWithFormat:@&quot;abc&quot;];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个会 Crash，第二个正常运行</p>
<p>第一个多线程同时访问 name 的 setter 方法，有可能多条线程同时执行 [_name release]，连续 release 两次造成对象的过度释放，导致 Crash</p>
<p>第二个 name 指针为 TaggedPointer 类型，不存在 release 操作</p>
<p>两个 name 的底层类型不一致，第一个 name 类型是 NSCFString 类型，存储在堆上，第二个 name 类型是NSTaggedPointerString 存储在常量区</p>
<p>NSString 对于那些所需内存小于 60 位的字符串，它可以创建一个 TaggedPointer，其余则被放置在真正的 NSString 对象里，这使得常用短字符串的性能得到提升</p>
<h4 id="NONPOINTER-ISA"><a href="#NONPOINTER-ISA" class="headerlink" title="NONPOINTER_ISA"></a>NONPOINTER_ISA</h4><p>和 TaggedPointer 设计思想类似，ISA 其实并不单单是一个指针，其中一些位仍旧编码指向对象的类，一部分额外空间存储其它内容</p>
<p>ISA 指针第 1 位表示使用优化的 ISA 指针</p>
<p>64 位架构下，ISA 指针本身占 64 位，64 位存储一个内存地址显然浪费，为了提高内存利用率，剩余比特位中存储了内存管理相关的内容</p>
<ul>
<li>nonpointer：表示是否对isa开启指针优化 。0代表是纯isa指针，1代表除了地址外，还包含了类的一些信息、对象的引用计数等</li>
<li>has_assoc：关联对象标志位</li>
<li>该对象是否有C++或Objc的析构器，如果有析构函数，则需要做一些析构的逻辑处理，如果没有，则可以更快的释放对象</li>
<li>shiftcls：存在类指针的值，开启指针优化的情况下，arm64位中有33位来存储类的指针</li>
<li>magic：判断当前对象是真的对象还是一段没有初始化的空间</li>
<li>weakly_referenced：是否被指向或者曾经指向一个ARC的弱变量，没有弱引用的对象释放的更快</li>
<li>deallocating：是否正在释放</li>
<li>has_sidetable_rc：当对象引用计数大于10时，则需要进位</li>
<li>extra_rc：表示该对象的引用计数值，实际上是引用计数减一。例如：如果引用计数为10，那么extra_rc为9。如果引用计数大于10，则需要使用has_sidetable_rc</li>
</ul>
<h4 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h4><p>当引用计数存储到一定值，并不会存储到 Nonpointer_isa 位域的 extra_rc 中，而是会存储到 SideTable 散列表中</p>
<p>在 runtime 内存空间中，SideTable 是一个 hash 数组，里面存储了 SideTable</p>
<p>SideTable 的 hash 键就是一个对象 obj 的 address，因此可以说，一个 obj，对应了一个 SideTable，但一个 SideTable 会对应多个 obj，因为SideTable 的数量有限，所有会有很多 obj 公用一个 SideTable</p>
<p>SideTable结构中包含了自旋锁、引用计数表、弱引用表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct SideTable &#123;</span><br><span class="line">    spinlock_t slock;       &#x2F;&#x2F; 自旋锁</span><br><span class="line">    RefcountMap refcnts;    &#x2F;&#x2F;引用计数的Map表 key-value</span><br><span class="line">    weak_table_t weak_table;&#x2F;&#x2F;弱引用表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>为什么不直接用一张SideTable，而是用SideTables去管理多个 SideTable</li>
</ul>
<p>SideTable 里有一个自旋锁，如果把所有的类都放在同一个 SideTable，有任何一个类有改动都会对整个 table 做操作，并且在操作一个类的同时，操作别的类会被锁住等待，这样会导致操作效率和查询效率都很低。而有多个SideTable 的话，操作的都是单个 Table，并不会影响其他的 table，这就是分离锁</p>
<h5 id="retain"><a href="#retain" class="headerlink" title="retain"></a>retain</h5><p>retain 底层先判断是否是 Nonpointer_isa，如果不是，则直接操作散列表进行 +1 操作<br>如果是 Nonpointer_isa，extra_rc 引用计数+1，extra_rc只有8位，如果出现上溢出，需要借助散列表存储，一半存储在散列表中，另一半还是存储在 extra_rc 中</p>
<h5 id="release"><a href="#release" class="headerlink" title="release"></a>release</h5><p>release 底层先判断是否是 Nonpointer_isa，如果不是，则直接操作散列表进行 -1 操作<br>如果是 Nonpointer_isa，extra_rc 引用计数-1，如果引用计数出现下溢出，看散列表中是否存储引用计数，从散列表中取一半进行 -1 操作，然后存储到 extra_rc 中，如果还是下溢出，就调用 dealloc</p>
<p><a href="https://www.infoq.cn/article/deep-understanding-of-tagged-pointer/">深入理解 TaggedPointer</a></p>
]]></content>
  </entry>
  <entry>
    <title>对象和方法底层原理</title>
    <url>/2020/12/01/%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h4 id="isa指针"><a href="#isa指针" class="headerlink" title="isa指针"></a>isa指针</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LGPerson *p  &#x3D; [LGPerson alloc];</span><br><span class="line">p.name &#x3D; @&quot;aa&quot;;</span><br><span class="line"></span><br><span class="line">Class cls1 &#x3D; [LGPerson class];</span><br><span class="line">Class cls2 &#x3D; p.class;</span><br><span class="line">Class cls3 &#x3D; object_getClass(p);</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;%p %p %p&quot;, cls1, cls2, cls3); &#x2F;&#x2F;打印结果相同 只有一个类对象</span><br><span class="line"></span><br><span class="line">Class cls4 &#x3D; objcet_getClass(cls3);</span><br></pre></td></tr></table></figure>

<p>实例对象   – <code>p</code><br>类对象       – <code>cls1</code><br>元类对象   – <code>cls4</code></p>
<p>实例对象所属的类  -&gt; 类对象（<code>class</code>）<br>类对象所属的类      -&gt; 元类    （<code>meta-class</code>）<br>元类所属                  -&gt; 根元类（基类的<code>meta-class</code>）<br>根元类所属              -&gt; 自己</p>
<ul>
<li><p>根元类的父类是<code>NSObject</code> ，<code>NSObject</code> 的父类是 <code>nil</code></p>
</li>
<li><p><code>Class</code> 的 <code>superclass</code> 指向父类的 <code>class</code>，如果没有父类，<code>superclasss</code> 指针为 <code>nil</code></p>
</li>
<li><p><code>meta-class</code> 的 <code>superclass</code> 指向父类的 <code>meta-class</code>，基类的 <code>meta-class</code> 的 <code>superclass</code> 指向基类的 <code>class</code></p>
</li>
</ul>
<h4 id="实例对象调用对象方法"><a href="#实例对象调用对象方法" class="headerlink" title="实例对象调用对象方法"></a>实例对象调用对象方法</h4><p><img src="/2020/12/01/%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1%E8%B0%83%E7%94%A8%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95.png" alt="实例对象调用对象方法"></p>
<p>对于 <code>student</code> 来说，并不知道 <code>abc</code> 方法在哪里，唯一知道的就是可以去它的 <code>class对象</code> 里找</p>
<p>先通过 <code>isa</code> 指针进入 <code>Student</code> 类的 <code>class对象</code>，如果在其中找到了 <code>abc</code> 就直接进行调动，调用过程结束</p>
<p>没有找到的话，就通过<code> class对象</code>的 <code>superclass</code> 指针进入 <code>Student</code> 类的父类，也就是 <code>Person</code>类的 <code>class对象</code>，重复上一步的查找逻辑</p>
<p>一层层往上找，最终到基类，也就是 <code>NSObject</code> 类的 <code>class对象</code>，还没找到的话，由于它的 <code>superclass</code> 为 nil，最终就会报错 <code>[ERROR: unrecognized selector sent to instance]</code>，调用结束</p>
<h4 id="类对象调用类方法"><a href="#类对象调用类方法" class="headerlink" title="类对象调用类方法"></a>类对象调用类方法</h4><p><img src="/2020/12/01/%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/%E7%B1%BB%E5%AF%B9%E8%B1%A1%E8%B0%83%E7%94%A8%E7%B1%BB%E6%96%B9%E6%B3%95.png" alt="类对象调用类方法"></p>
<p>对于<code> Student</code>类来说，并不知道 <code>abc</code> 方法在哪里，我们知道类方法放在 <code>meta-class</code>对象里面</p>
<p>首先通过 <code>Student</code> 的 <code>class对象</code> 的 <code>isa</code> 指针找到其 <code>meta-class</code>对象，然后在方法列表里找是否有<code>abc</code>，如果有的话就调用，调用结束</p>
<p>如果没有的话，就通过 <code>meta-class</code> 对象的 <code>superclass</code> 指针找到 <code>Student</code> 的父类 <code>Person</code> 的<code>meta-class</code>对象，然后查找<code>abc</code>方法，如果有的话就调用，调用结束</p>
<p>没有的话，通过<code>meta-class</code>对象的<code>superclass</code>指针一层层往上查找</p>
<p>如果到了基类<code>（NSObject）</code>的<code>meta-class</code>还没找到<code>abc</code>，接下来 <code>superclass</code> 指针会找到 <code>NSObject</code> 的<code>class对象</code>，此时会继续在 <code>NSObject</code> 的 <code>class对象</code> 里面，寻找 <code>abc</code>，如果找到就会调用</p>
<p>如果没有找到，由于此时 <code>superclass</code> 是 <code>nil</code> ，最终系统会报错</p>
<h4 id="验证isa指针指向"><a href="#验证isa指针指向" class="headerlink" title="验证isa指针指向"></a>验证isa指针指向</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LGPerson *person &#x3D; [[LGPerson alloc] init];</span><br><span class="line">Class personClass &#x3D; [LGPerson class];</span><br><span class="line">Class personMetaClass &#x3D; object_getClass(personClass);</span><br><span class="line">NSLog(@&quot;%p %p %p&quot;, person, personClass, personMetaClass);</span><br></pre></td></tr></table></figure>

<p>打断点，LLDB调试打印 <code>person</code> 对象的 <code>isa</code> 指针</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(lldb) p&#x2F;x person-&gt;isa</span><br><span class="line">(Class) $1 &#x3D; 0x000001a1044bd715 LGPerson</span><br><span class="line">(lldb) p&#x2F;x personClass</span><br><span class="line">(Class) $2 &#x3D; 0x00000001044bd710 LGPerson</span><br></pre></td></tr></table></figure>

<p>通过 <code>p/x</code> 命令打印指针，<code>/</code>后面是打印参数，<code>x</code> 表示用 16 进制输出</p>
<p>可以看到输出结果并不相等</p>
<p>实例对象 <code>person 的 isa = 0x000001a1044bd715</code></p>
<p>类对象 <code>personClass = 0x00000001044bd710</code></p>
<p>从 64bit 开始，<code>isa</code> 需要进行一次位运算，才能计算出 <code>class对象</code> 的地址，系统提供了 <code>ISA_MASK</code>，在 <a href="https://opensource.apple.com/tarballs/objc4/">objc4</a> 的源码中可以找到</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">objc_object::ISA() </span><br><span class="line">&#123;</span><br><span class="line">    assert(!isTaggedPointer()); </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SUPPORT_INDEXED_ISA</span></span><br><span class="line">    <span class="keyword">if</span> (isa.nonpointer) &#123;</span><br><span class="line">        <span class="keyword">uintptr_t</span> slot = isa.indexcls;</span><br><span class="line">        <span class="keyword">return</span> classForIndex((<span class="keyword">unsigned</span>)slot);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (Class)isa.bits;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> (Class)(isa.bits &amp; ISA_MASK);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">if</span> __arm64__</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> ISA_MASK        0x0000000ffffffff8ULL</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">elif</span> __x86_64__</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> ISA_MASK        0x00007ffffffffff8ULL</span></span><br></pre></td></tr></table></figure>

<p>验证结果，通过和 <code>ISA_MASK</code>进行一次 <code>&amp;</code> 运算，得到了类对象 <code>personClass</code> 的地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(lldb) p&#x2F;x 0x000001a1044bd715 &amp; 0x0000000ffffffff8ULL</span><br><span class="line">(unsigned long long) $4 &#x3D; 0x00000001044bd710</span><br></pre></td></tr></table></figure>

<h4 id="objc-class"><a href="#objc-class" class="headerlink" title="objc_class"></a>objc_class</h4><p>查看源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> :</span> objc_object &#123;</span><br><span class="line">    <span class="comment">// Class ISA;			//isa占8字节</span></span><br><span class="line">    Class superclass; <span class="comment">//8字节</span></span><br><span class="line">    <span class="keyword">cache_t</span> cache;    <span class="comment">//16字节         // formerly cache pointer and vtable</span></span><br><span class="line">    <span class="keyword">class_data_bits_t</span> bits;    <span class="comment">// class_rw_t * plus custom rr/alloc flags</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">class_rw_t</span> *<span class="title">data</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> bits.data();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到 <code>class_rw_t</code> 看字面意思是可读可写的表，进入查看</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">class_rw_t</span> &#123;</span></span><br><span class="line">    <span class="comment">// Be warned that Symbolication knows the layout of this structure.</span></span><br><span class="line">    <span class="keyword">uint32_t</span> flags;</span><br><span class="line">    <span class="keyword">uint32_t</span> version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">class_ro_t</span> *ro;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">method_array_t</span> methods;				<span class="comment">//方法列表</span></span><br><span class="line">    <span class="keyword">property_array_t</span> properties;  <span class="comment">//属性列表</span></span><br><span class="line">    <span class="keyword">protocol_array_t</span> protocols;   <span class="comment">//协议列表</span></span><br></pre></td></tr></table></figure>

<p>方法、属性、协议信息都放在这里，还有一个 <code>class_ro_t</code> 只读表，进入查看哪些是只读的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">class_ro_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> flags;</span><br><span class="line">    <span class="keyword">uint32_t</span> instanceStart;</span><br><span class="line">    <span class="keyword">uint32_t</span> instanceSize;	<span class="comment">//实例对象size</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __LP64__</span></span><br><span class="line">    <span class="keyword">uint32_t</span> reserved;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint8_t</span> * ivarLayout;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * name;			<span class="comment">//类名</span></span><br><span class="line">    <span class="keyword">method_list_t</span> * baseMethodList;</span><br><span class="line">    <span class="keyword">protocol_list_t</span> * baseProtocols; <span class="comment">//成员变量描述信息，如名称，类型等</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">ivar_list_t</span> * ivars;</span><br></pre></td></tr></table></figure>

<h4 id="通过MachO文件查找类和方法列表"><a href="#通过MachO文件查找类和方法列表" class="headerlink" title="通过MachO文件查找类和方法列表"></a>通过MachO文件查找类和方法列表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   Person *p &#x3D; [[Person alloc] init];</span><br><span class="line">   p.name &#x3D; @&quot;pname&quot;;</span><br><span class="line">   p.age  &#x3D; 20;</span><br><span class="line">   NSLog(@&quot;%p&quot;, [p class]); &#x2F;&#x2F;0x100cc9718</span><br><span class="line">-&gt; NSLog(@&quot;end&quot;);</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<p><code>image list</code> 查看偏移量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(lldb) image list</span><br><span class="line">[  0] E4FC76C2-878C-31CA-AB74-26EF8D1204D5 0x0000000100cc0000 &#x2F;</span><br><span class="line">xxx&#x2F;Build&#x2F;Products&#x2F;Debug-iphoneos&#x2F;Test.app&#x2F;Test </span><br></pre></td></tr></table></figure>

<p>计算内存地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(lldb) p&#x2F;x 0x100cc9718-0x0000000100cc0000</span><br><span class="line">(long) $0 &#x3D; 0x0000000000009718</span><br></pre></td></tr></table></figure>

<p>将<code>Products/Debug-iphoneos/Test.app/Test</code> 目录下的可执行文件拖入到 <code>MachOView</code></p>
<p><img src="/2020/12/01/%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/MachOView.jpg" alt="MachOView"></p>
<h4 id="isKindOfClass-isMemberOfClass"><a href="#isKindOfClass-isMemberOfClass" class="headerlink" title="isKindOfClass isMemberOfClass"></a>isKindOfClass isMemberOfClass</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL re1 &#x3D; [(id)[NSObject class] isKindOfClass:[NSObject class]];</span><br><span class="line">BOOL re2 &#x3D; [(id)[LGPerson class] isKindOfClass:[LGPerson class]];</span><br><span class="line">BOOL re3 &#x3D; [(id)[NSObject class] isMemberOfClass:[NSObject class]];</span><br><span class="line">BOOL re4 &#x3D; [(id)[LGPerson class] isMemberOfClass:[LGPerson class]];</span><br><span class="line">NSLog(@&quot; re1 :%hhd\n re2 :%hhd\n re3 :%hhd\n re4 :%hhd\n&quot;,re1,re2,re3,re4);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;ret3 传入类NSObject self指向NSObject self-&gt;ISA()指向根元类 根元类和NSObject不相等</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;iskindOfClass &amp; isMemberOfClass 实例方法调用</span><br><span class="line">BOOL re5 &#x3D; [(id)[NSObject alloc] isKindOfClass:[NSObject class]];</span><br><span class="line">BOOL re6 &#x3D; [(id)[LGPerson alloc] isKindOfClass:[LGPerson class]];</span><br><span class="line">BOOL re7 &#x3D; [(id)[NSObject alloc] isMemberOfClass:[NSObject class]];</span><br><span class="line">BOOL re8 &#x3D; [(id)[LGPerson alloc] isMemberOfClass:[LGPerson class]];</span><br><span class="line">NSLog(@&quot; re5 :%hhd\n re6 :%hhd\n re7 :%hhd\n re8 :%hhd\n&quot;,re5,re6,re7,re8);</span><br><span class="line"></span><br><span class="line">ret1: 1</span><br><span class="line">ret2: 0</span><br><span class="line">ret3: 0</span><br><span class="line">ret4: 0</span><br><span class="line"></span><br><span class="line">ret5: 1</span><br><span class="line">ret6: 1</span><br><span class="line">ret7: 1</span><br><span class="line">ret8: 1</span><br></pre></td></tr></table></figure>

<ul>
<li>isKindOfClass</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;类方法 </span><br><span class="line">&#x2F;&#x2F;第一次比较，获取类的元类与传入类比较，之后获取上次结果的父类与传入类比较</span><br><span class="line">+ (BOOL)isKindOfClass:(Class)cls &#123;</span><br><span class="line">     &#x2F;&#x2F;类的元类 vs 传入类</span><br><span class="line">     &#x2F;&#x2F;根元类 vs 传入类</span><br><span class="line">     &#x2F;&#x2F;根类 vs 传入类</span><br><span class="line">     &#x2F;&#x2F;nil vs 传入类</span><br><span class="line">     for (Class tcls &#x3D; self-&gt;ISA(); tcls; tcls &#x3D; tcls-&gt;getSuperclass()) &#123;</span><br><span class="line">         if (tcls &#x3D;&#x3D; cls) return YES;</span><br><span class="line">     &#125;</span><br><span class="line">     return NO;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;实例方法 </span><br><span class="line">&#x2F;&#x2F;第一次比较，获取对象的类与传入类比较，之后获取上次结果的父类与传入类比较</span><br><span class="line"> - (BOOL)isKindOfClass:(Class)cls &#123;</span><br><span class="line">     &#x2F;&#x2F;对象的类 vs 传入类</span><br><span class="line">     &#x2F;&#x2F;父类 vs 传入类</span><br><span class="line">     &#x2F;&#x2F;根类 vs 传入类</span><br><span class="line">     &#x2F;&#x2F;nil vs 传入类</span><br><span class="line">     for (Class tcls &#x3D; [self class]; tcls; tcls &#x3D; tcls-&gt;getSuperclass()) &#123;</span><br><span class="line">         if (tcls &#x3D;&#x3D; cls) return YES;</span><br><span class="line">     &#125;</span><br><span class="line">     return NO;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>类方法：元类 -&gt; 根元类 -&gt; 根类 -&gt; nil 与 传入类比较<br>对象方法：对象的类 -&gt; 父类 -&gt; 根类 -&gt; nil 与 传入类比较</p>
<ul>
<li>isMemberOfClass</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;类方法 </span><br><span class="line">&#x2F;&#x2F;获取类的元类 与传入类比较</span><br><span class="line">+ (BOOL)isMemberOfClass:(Class)cls &#123;</span><br><span class="line">     return self-&gt;ISA() &#x3D;&#x3D; cls;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;实例方法 </span><br><span class="line">&#x2F;&#x2F;获取对象的类 与传入类比较</span><br><span class="line"> - (BOOL)isMemberOfClass:(Class)cls &#123;</span><br><span class="line">     return [self class] &#x3D;&#x3D; cls;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>类方法：    类的元类 与 传入类 比较<br>对象方法：对象的父类 与 传入类 比较</p>
<p><a href="https://blog.csdn.net/u013480070/article/details/100154183">对象的本质（下）详解isa&amp;superclass指针</a></p>
]]></content>
  </entry>
  <entry>
    <title>测试下</title>
    <url>/2020/11/17/%E6%B5%8B%E8%AF%95%E4%B8%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>分类1</category>
      </categories>
      <tags>
        <tag>标签1</tag>
      </tags>
  </entry>
  <entry>
    <title>逆</title>
    <url>/2021/03/31/%E9%80%86/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="72532eea066a4da146eb47dadaf84eae9b7a8370881c3e752edf5432c1f21e4f">6a0984f7a8e89a416916236f779221ce3fd2c4dcefac971b9ac8b0dfe88c8e46334c272f445ecc37ad2ff29ebc86c61b795b2bdd3ba96e9dc0312d782588f3cb55a66a01be0215453842d96a281db9303caec9bb73de782bc345e2ee9c2109549031e91b8f54c589e56cd95adc18592a272832103cd750c72d5021192aadfa386c3b355150f4376389da11d8e6d3b79ced6064535d03fcf12e8ad72c4f67d5196a2943dcd69dc9298ed2857ce03fc372809a9251c876b0605369c29361d02c80082e6af9060a3ffd5060671e8c286a72e29105bbd27fa3f7b643f885e6358b85ff761f1ad49fab37b1ac11b5c2879ec671eb393c01cc40b340f9b79fc36fbde6a6410ef6c65aa67281b7d616fc5b3f61a46de02ff4c1593f6a6e0fdd335e1fbecc015c033058d04b0f3796d88a5b639a8e502e8e36230ca5c175c600a08c9c0d2544b0a55b0dea027beb482f30bdb73be6d93f6f5941cf27106f9fc6b9ab45ae4bfab5cc357a1e09dd39af815aab12482e54376b299f8314af335ee9b4d19eec71138ac45872addfb03fde20d695503a1e6d89628fe5556b283bab9d641155c408aa20e621089921bc38a2226e5441d38eb1919e96ea5ccc7aa3ad50072925f12f1dc0c96f62927c180c49ff6629d59450382c0f7d5e51d84b376c68d7dc5d04323da77a82ba1c2f7d50e0b7f152589b9c4c83252fa4c75ef735d4070c51ba0e54ef82fe489ad56b19dc589056ad5348a4a3ac10df2c1fc258ec69bcc7540833af19ebeb43910353062e1a7f9afc05f682f6ee81dc998ed50bb091b3601db2e03db2d9afae8dc1e81592accf3ec79df755ed9261abcc7219cef7d94201dc8ca57f64781627c4b2eae6c57a4597ff77a3c7ef700615a774a5f42db7e39d39007c53c58b66d76619b0b979ddf6504860c6947e50f63be2a4c9f03efb22ff02259d9a7b664d33bf3aada6808a148bda07bc170ca2ca19bc069b49691ebb20db4f23cd61022657739942380ccf836e709424cc037cb464fab6ee3bdd4a5c325ed262ba1f61c704768fe90ef06daa72e4dd6dd00826a76be1a1c902cbbdb1fde547ac2df339616028bd8f213baa018b39f618cdec6274f0f0a72ab9e48a28c86496c60a522b6430e78f6837d54ab3b6abf57e6f825a2d2e96376e63f056881fee71a01cb345dcf559d6db14adc6da9d27b8f300972ea9333f7a33acd9f709b5229defb2fa2143718fa1119777a150ff8e18bbfdec179d55d7cca38daeb9bf7aefff3f1e5da36cd74725b78e80d16de9bfaf93d8a1f12dd51a7ae6b78ba34697edfb0d917beccfccb00f2d34d9df69c080b4e1</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>逆</category>
      </categories>
      <tags>
        <tag>逆</tag>
      </tags>
  </entry>
  <entry>
    <title>消息流程</title>
    <url>/2021/07/29/%E6%B6%88%E6%81%AF%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="方法的本质"><a href="#方法的本质" class="headerlink" title="方法的本质"></a>方法的本质</h4><p>使用 clang 编译 main.m 文件 <code>clang -rewrite-objc main.m</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LGPerson *person &#x3D; [LGPerson alloc];</span><br><span class="line">[person sayHello];</span><br></pre></td></tr></table></figure>

<p>编译后的底层实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">LGPerson *person = ((LGPerson *(*)(id, SEL))(<span class="keyword">void</span> *)objc_msgSend)((id)objc_getClass(<span class="string">&quot;LGPerson&quot;</span>), sel_registerName(<span class="string">&quot;alloc&quot;</span>));</span><br><span class="line">((<span class="keyword">void</span> (*)(id, SEL))(<span class="keyword">void</span> *)objc_msgSend)((id)person, sel_registerName(<span class="string">&quot;say&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>可以看出，方法的调用本质就是 objc_msgSend消息发送</p>
<h4 id="objc-msgSend-快速查找"><a href="#objc-msgSend-快速查找" class="headerlink" title="objc_msgSend 快速查找"></a>objc_msgSend 快速查找</h4><h4 id="objc-msgSend-慢速查找"><a href="#objc-msgSend-慢速查找" class="headerlink" title="objc_msgSend 慢速查找"></a>objc_msgSend 慢速查找</h4><h4 id="动态方法解析"><a href="#动态方法解析" class="headerlink" title="动态方法解析"></a>动态方法解析</h4><p>如果 LGPerson 类中没有实现 sayHello 方法，runtime 就会调用</p>
<p> <code>resolveInstanceMethod:(实例方法)</code> 或者  <code>resolveClassMethod:(类方法)</code> </p>
<p>我们可以在方法中新增已实现的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)sayAddHello &#123;</span><br><span class="line">    NSLog(@&quot;say add hello&quot;);</span><br><span class="line">&#125;</span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    if (sel &#x3D;&#x3D; @selector(sayHello)) &#123;</span><br><span class="line">        IMP addImp &#x3D; class_getMethodImplementation(self, @selector(sayAddHello));</span><br><span class="line">        Method addMethod &#x3D; class_getInstanceMethod(self, @selector(sayAddHello));</span><br><span class="line">        const char *type &#x3D; method_getTypeEncoding(addMethod);</span><br><span class="line">        return class_addMethod(self, sel, addImp, type);</span><br><span class="line">    &#125;</span><br><span class="line">    return [super resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void runAddMethod(id self, SEL _cmd)&#123;</span><br><span class="line">    NSLog(@&quot;add C IMP&quot;);</span><br><span class="line">&#125;</span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    if ([NSStringFromSelector(sel) isEqualToString:@&quot;sayHello&quot;]) &#123;</span><br><span class="line">        class_addMethod(self, sel, (IMP)runAddMethod, &quot;v@:*&quot;);</span><br><span class="line">        return YES;</span><br><span class="line">    &#125;</span><br><span class="line">    return [super resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="消息转发"><a href="#消息转发" class="headerlink" title="消息转发"></a>消息转发</h4><p>如果动态方法解析没有处理，进入消息转发流程</p>
<ol>
<li>进入快速转发</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface LGTeacher : NSObject</span><br><span class="line">- (void)sayHello;</span><br><span class="line">@end</span><br><span class="line">@implementation LGTeacher</span><br><span class="line">- (void)sayHello &#123;</span><br><span class="line">    NSLog(@&quot;Teacher sayhello&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p>LGTeacher 中实现了 sayHello 方法，将消息转发给 LGTeacher 处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    if (aSelector &#x3D;&#x3D; @selector(sayHello)) &#123;</span><br><span class="line">        return [LGTeacher alloc];</span><br><span class="line">    &#125;</span><br><span class="line">    return [super forwardingTargetForSelector:aSelector];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>快速转发没有处理，则进入慢速转发</li>
</ol>
<p><code>methodSignatureForSelector</code> 方法返回方法的签名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">    if (aSelector &#x3D;&#x3D; @selector(sayHello)) &#123;</span><br><span class="line">        return [NSMethodSignature signatureWithObjCTypes:&quot;v@:&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">    return [super methodSignatureForSelector:aSelector];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>forwardInvocation</code> 真正执行由 methodSignatureForSelector 返回的 NSMethodSignature</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation &#123;</span><br><span class="line">    SEL aSelector &#x3D; [anInvocation selector];</span><br><span class="line">    LGTeacher *teacher &#x3D; [LGTeacher alloc];</span><br><span class="line">    if ([teacher respondsToSelector:aSelector]) &#123;</span><br><span class="line">        [anInvocation invokeWithTarget:teacher];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        [super forwardInvocation:anInvocation];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>OC 消息机制可以分为三个阶段：</p>
<p>消息发送阶段：从类和父类的方法缓存列表、方法列表中查找方法</p>
<p>动态解析阶段：如果消息发送阶段没找到方法，进入动态方法解析，动态添加方法实现</p>
<p>消息转发阶段：如果也没有实现动态解析方法，进入消息转发阶段，将消息转发给可以处理消息的接受者</p>
<img src="消息处理.png" alt="消息处理" style="zoom:67%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void runAddMethod(id self, SEL _cmd)&#123;</span><br><span class="line">    NSLog(@&quot;add C IMP&quot;);</span><br><span class="line">&#125;</span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    if ([NSStringFromSelector(sel) isEqualToString:@&quot;sayHello&quot;]) &#123;</span><br><span class="line">    		class_addMethod(self, sel, (IMP)runAddMethod, &quot;v@:*&quot;);</span><br><span class="line">   		  return YES;</span><br><span class="line">    &#125;</span><br><span class="line">    return [super resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>objc_msgSend 发送消息流程：</p>
<p>消息发送者先进行 <code>快速查找流程</code> ，在类的缓存cache中查找方法</p>
<p>快速查找流程没找到，走慢速查找流程，实例方法在当前类及类的继承链的方法列表中查找，类方法在元类及元类继承链的方法列表中查找</p>
<p>慢速查找没找到会进行动态方法解析</p>
<p>动态方法解析没有找到会进入消息转发，快速消息转发和慢速消息转发</p>
<p>没有找到最终报异常：unrecognized selector send to instance</p>
]]></content>
  </entry>
  <entry>
    <title>逆向-安全保护</title>
    <url>/2021/11/12/%E9%80%86%E5%90%91-%E5%AE%89%E5%85%A8%E4%BF%9D%E6%8A%A4/</url>
    <content><![CDATA[<p>加固方案：</p>
<p>数据加密：静态字符串、本地存储及网络传输的加密</p>
<p>静态混淆：类名、方法名、属性的混淆</p>
<p>动态保护：反调试、注入检测、hook检测、越狱检测、签名检测等</p>
<p>代码混淆：将代码分块、扁平化、增加干扰代码，提高分析难度</p>
<h4 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h4><p>加密算法：</p>
<ul>
<li>BASE64：一种基于64个可打印字符表示二进制数据的方法，主要为了将二进制数据变成可见字符以便传输，可以解密</li>
<li>MD5：将数据运算变成另一个固定长度值，用于数据校验，不可逆</li>
<li>DES：一种对称加密算法，用于对二进制数据进行加密，明文、密文和秘钥的分组长度都是64</li>
<li>AES：密码学中的高级加密标准，本质上是一种对称分组密码体制，用来代替DES</li>
<li>RSA：一种非对称加密算法，存在一个公钥和一个私钥，分别用于加密和解密，速度比对称加密慢很多</li>
</ul>
<p>对称加密：加密解密使用同一秘钥</p>
<p>非对称加密：存在一个公钥和一个私钥</p>
<h5 id="本地存储加密"><a href="#本地存储加密" class="headerlink" title="本地存储加密"></a>本地存储加密</h5><p>本地存储方式：NSUserDefaults、文件、数据库</p>
<p>存储数据时，可以使用哈希算法、对称加密算法（DES/AES）进行加密存储，或者系统 keychain 进行存储，实现加密算法时也不能将 key 以明文形式写在代码中</p>
<h5 id="网络传输加密"><a href="#网络传输加密" class="headerlink" title="网络传输加密"></a>网络传输加密</h5><p>HTTPS + 本地证书校验方式</p>
<p>传输过程中可以使用 RSA+AES 进行加密传输</p>
<ol>
<li>客户端随机生成 AES 的key</li>
<li>使用 RSA 公钥加密算法加密随机的 key</li>
<li>使用随机的 key 对数据进行 AES 加密</li>
<li>将 RSA 加密后的 key 和 AES 加密后的数据发送给服务器</li>
<li>给发送的数据加上时间戳，以防止重放攻击</li>
</ol>
<img src="逆向-安全保护/WeChatd746b59be5c7fc2ddd3741f286c2db2f.png" alt="WeChatd746b59be5c7fc2ddd3741f286c2db2f"/>



<p>AFNetworking 证书校验</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NSString *certFilePath &#x3D; [[NSBundle mainBundle] pathForResource:@&quot;server&quot; ofType:@&quot;der&quot;];</span><br><span class="line">NSData *certData &#x3D; [NSData dataWithContentsOfFile:certFilePath];</span><br><span class="line">NSSet *certSet &#x3D; [NSSet setWithObject:certData];</span><br><span class="line">AFSecurityPolicy *policy &#x3D; [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate withPinnedCertificates:certSet];</span><br></pre></td></tr></table></figure>

<h5 id="字符串加密"><a href="#字符串加密" class="headerlink" title="字符串加密"></a>字符串加密</h5>]]></content>
  </entry>
  <entry>
    <title>逆向工具-Cycript</title>
    <url>/2021/10/11/%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7-Cycript/</url>
    <content><![CDATA[<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p><a href="http://www.cycript.org/">Cycript官网</a> 下载 SDK 解压进入 cycript_0.9.594 文件夹，执行 ./cycript</p>
<p>会报下面错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dyld[1291]: Library not loaded: &#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Ruby.framework&#x2F;Versions&#x2F;2.0&#x2F;usr&#x2F;lib&#x2F;libruby.2.0.0.dylib</span><br><span class="line">  Referenced from: &#x2F;Users&#x2F;midland_whk&#x2F;Downloads&#x2F;cycript_0.9.594&#x2F;Cycript.lib&#x2F;cycript-apl</span><br><span class="line">  Reason: tried: &#39;&#x2F;Users&#x2F;midland_whk&#x2F;Downloads&#x2F;cycript_0.9.594&#x2F;.&#x2F;Cycript.lib&#x2F;libruby.2.0.0.dylib&#39; (no such file), &#39;&#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Ruby.framework&#x2F;Versions&#x2F;2.0&#x2F;usr&#x2F;lib&#x2F;libruby.2.0.0.dylib&#39; (no such file), &#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libruby.2.0.0.dylib&#39; (no such file), &#39;&#x2F;usr&#x2F;lib&#x2F;libruby.2.0.0.dylib&#39; (no such file)</span><br><span class="line">[1]    1291 abort      .&#x2F;cycript</span><br></pre></td></tr></table></figure>

<p>这是因为 ruby 版本太高，需要进入 <code>/usr/local/Cellar/ruby@2.5/2.5.8/lib</code> ，将 <code>libruby.2.5.8.dylib</code> 重命名 <code>libruby.2.0.0</code> 并拷贝到 <code>Cycript.lib</code> 目录下</p>
<h4 id="Cycript-分析应用"><a href="#Cycript-分析应用" class="headerlink" title="Cycript 分析应用"></a>Cycript 分析应用</h4><p>Cydia 中 搜索 Cycript 安装</p>
<p>通过 SSH 登录手机，输入 cycript 命令，就进入交互界面，control + D 或者 <code>?exit</code>  退出命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ssh root@<span class="number">172.16</span><span class="number">.1</span><span class="number">.96</span> //ssh -P <span class="number">2222</span> root@localhost</span><br><span class="line">cycript</span><br><span class="line"></span><br><span class="line">cy<span class="comment"># var a = 3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">cy<span class="comment"># var b = 4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">cy<span class="comment"># a + b</span></span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure>

<p>注入 SpringBoard 弹出提示窗口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root# cycript -p SpringBoard</span><br><span class="line">cy# var alert &#x3D; [[UIAlertView alloc] initWithTitle:@&quot;hi&quot; message: @&quot;hello,world&quot;  delegate:nil cancelButtonTitle:@&quot;cancel&quot; otherButtonTitles: nil]</span><br><span class="line">#&quot;&lt;UIAlertView: 0x118c27680; frame &#x3D; (0 0; 0 0); layer &#x3D; &lt;CALayer: 0x280a06b00&gt;&gt;&quot;</span><br><span class="line">cy# [alert show]</span><br></pre></td></tr></table></figure>

<h5 id="分析应用"><a href="#分析应用" class="headerlink" title="分析应用"></a>分析应用</h5><p><code>ps -e</code>  或者 <code>ps -A</code>   <code>ps -e | grep DemoApp</code> 找到进程号 9790</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9790 ??  0:00.80 &#x2F;var&#x2F;containers&#x2F;Bundle&#x2F;Application&#x2F;4F526F02-0133-4149-9E3F-A492B2DC7D7F&#x2F;DemoApp.app&#x2F;DemoApp</span><br></pre></td></tr></table></figure>

<p>cycript -p 进程名字</p>
<p><code>cycript -p 9790</code> 或者  <code>cycript -p DemoApp</code> 启动 cycript</p>
<ul>
<li>获取沙盒目录 NSHomeDirectory()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cy# NSHomeDirectory()</span><br><span class="line">@&quot;&#x2F;var&#x2F;mobile&#x2F;Containers&#x2F;Data&#x2F;Application&#x2F;629E01BE-3EC6-461C-A479-83EEEAB0A22D&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>获取 Bundle ID</li>
</ul>
<p>[[NSBundle mainBundle] bundleIdentifier]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cy# [[NSBundle mainBundle] bundleIdentifier]</span><br><span class="line">@&quot;com.DemoApp&quot;</span><br></pre></td></tr></table></figure>

<p>可以直接在脚本中调用 OC 函数来获取和修改应用一些信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cy# UIApp</span><br><span class="line">#&quot;&lt;UIApplication: 0x109e01050&gt;&quot;</span><br><span class="line">cy# UIApp.delegate</span><br><span class="line">#&quot;&lt;AppDelegate: 0x281d3d700&gt;&quot;</span><br><span class="line">cy# UIApp.keyWindow</span><br><span class="line">#&quot;&lt;UIWindow: 0x109e14650; frame &#x3D; (0 0; 375 667); gestureRecognizers &#x3D; &lt;NSArray: 0x281324510&gt;; layer &#x3D; &lt;UIWindowLayer: 0x281d2aa60&gt;&gt;&quot;</span><br><span class="line">cy# UIApp.keyWindow.rootViewController</span><br><span class="line">#&quot;&lt;ViewController: 0x109d16900&gt;&quot;</span><br><span class="line">cy# #0x109d16900.view</span><br><span class="line">#&quot;&lt;UIView: 0x109e15b40; frame &#x3D; (0 0; 375 667); autoresize &#x3D; W+H; layer &#x3D; &lt;CALayer: 0x281d2ae80&gt;&gt;&quot;</span><br><span class="line">cy# #0x109d16900.view.backgroundColor &#x3D; [UIColor yellowColor]</span><br><span class="line">#&quot;UIExtendedSRGBColorSpace 1 1 0 1&quot;</span><br><span class="line">cy# var newVC &#x3D; new Instance(0x109d16900)</span><br><span class="line">#&quot;&lt;ViewController: 0x109d16900&gt;&quot;</span><br><span class="line">cy# var newVC &#x3D; #0x109d16900</span><br><span class="line">#&quot;&lt;ViewController: 0x109d16900&gt;&quot;</span><br><span class="line">cy# newVC</span><br><span class="line">#&quot;&lt;ViewController: 0x109d16900&gt;&quot;</span><br><span class="line">cy# #0x109d16900</span><br><span class="line">#&quot;&lt;ViewController: 0x109d16900&gt;&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>打印界面结构 UIApp.keyWindow.recursiveDescription().toString()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cy# UIApp.keyWindow.recursiveDescription().toString()</span><br><span class="line">&#96;&lt;UIWindow: 0x109e14650; frame &#x3D; (0 0; 375 667); gestureRecognizers &#x3D; &lt;NSArray: 0x281324510&gt;; layer &#x3D; &lt;UIWindowLayer: 0x281d2aa60&gt;&gt;</span><br><span class="line">   | &lt;UIView: 0x109e15b40; frame &#x3D; (0 0; 375 667); autoresize &#x3D; W+H; layer &#x3D; &lt;CALayer: 0x281d2ae80&gt;&gt;</span><br><span class="line">   |    | &lt;UIButton: 0x109d1a100; frame &#x3D; (20 100; 100 50); opaque &#x3D; NO; layer &#x3D; &lt;CALayer: 0x281d262c0&gt;&gt;</span><br><span class="line">   |    |    | &lt;UIButtonLabel: 0x109d19690; frame &#x3D; (10 14.5; 80.5 21.5); text &#x3D; &#39;DemoApp&#39;; opaque &#x3D; NO; userInteractionEnabled &#x3D; NO; layer &#x3D; &lt;_UILabelLayer: 0x283e31400&gt;&gt;&#96;</span><br></pre></td></tr></table></figure>

<p>[[[UIWindow keyWindow] rootViewController] _printHierarchy].toString()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cy# [[[UIWindow keyWindow] rootViewController] _printHierarchy].toString()</span><br><span class="line">&quot;&lt;ViewController 0x101211e50&gt;, state: appeared, view: &lt;UIView 0x109e15b40&gt;&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>choose() 方法</li>
</ul>
<p>choose(UITableView) 在内存中直接找出这个类的对象地址，打印所有 UITableView 实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cy# choose(UIViewController)</span><br><span class="line">[#&quot;&lt;ViewController: 0x101211e50&gt;&quot;]</span><br></pre></td></tr></table></figure>

<ul>
<li>找UIButton 所属 Controller</li>
</ul>
<p>UIButton 地址 0x100b15960</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cy# [#0x100b15960 nextResponder]</span><br><span class="line">#&quot;&lt;UIView: 0x100b15380; frame &#x3D; (0 0; 375 667); autoresize &#x3D; W+H; layer &#x3D; &lt;CALayer: 0x282e3a4a0&gt;&gt;&quot;</span><br><span class="line">cy# [#0x100b15380 nextResponder]</span><br><span class="line">#&quot;&lt;ViewController: 0x101211e50&gt;&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>找出 Action 响应方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cy# [#0x100b15960 allTargets]</span><br><span class="line">[NSSet setWithArray:@[#&quot;&lt;ViewController: 0x101211e50&gt;&quot;]]]</span><br><span class="line">cy# [#0x100b15960 actionsForTarget:#0x101211e50]</span><br><span class="line">cy# [#0x100b15960 actionsForTarget:#0x101211e50 forControlEvent: UIControlEventTouchUpInside]</span><br><span class="line">@[&quot;demoAction:&quot;]</span><br></pre></td></tr></table></figure>

<h5 id="加载脚本"><a href="#加载脚本" class="headerlink" title="加载脚本"></a>加载脚本</h5><p>新建 utils.cy</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function(utils) &#123;</span><br><span class="line">	APPID &#x3D; [NSBundle mainBundle].bundleIdentifier,</span><br><span class="line">	APPPATH &#x3D; [NSBundle mainBundle].bundlePath,</span><br><span class="line"></span><br><span class="line">	HKRootvc &#x3D; function()&#123;</span><br><span class="line">	 	return UIApp.keyWindow.rootViewController;</span><br><span class="line">	 &#125;;</span><br><span class="line">	 </span><br><span class="line">	 HKKeyWindow &#x3D; function()&#123;</span><br><span class="line">	 	return UIApp.keyWindow;</span><br><span class="line">	 &#125;;</span><br><span class="line"></span><br><span class="line">	 HKGetCurrentVCFromRootVc &#x3D; function(rootVC)&#123;</span><br><span class="line">	 var currentVC;</span><br><span class="line">	 if([rootVC presentedViewController])&#123;</span><br><span class="line">	 rootVC &#x3D; [rootVC presentedViewController];</span><br><span class="line">	 &#125;</span><br><span class="line">	 </span><br><span class="line">	 if([rootVC isKindOfClass:[UITabBarController class]])&#123;</span><br><span class="line">		 	currentVC &#x3D; HKGetCurrentVCFromRootVc(rootVC.selectedViewController);</span><br><span class="line">		 &#125;else if([rootVC isKindOfClass:[UINavigationController class]])&#123;</span><br><span class="line">		 	currentVC &#x3D; HKGetCurrentVCFromRootVc(rootVC.visibleViewController);</span><br><span class="line">		 &#125;else&#123;</span><br><span class="line">		 currentVC &#x3D; rootVC;</span><br><span class="line">	 &#125;</span><br><span class="line">	 </span><br><span class="line">	 	return currentVC;</span><br><span class="line">	 &#125;;</span><br><span class="line">	 </span><br><span class="line">	 </span><br><span class="line">	 HKCurrentVC &#x3D; function()&#123;</span><br><span class="line">	 	return HKGetCurrentVCFromRootVc(HKRootvc());</span><br><span class="line">	 &#125;;</span><br><span class="line"></span><br><span class="line">	 pviews &#x3D; function() &#123;</span><br><span class="line">		return UIApp.keyWindow.recursiveDescription().toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pvc &#x3D; function() &#123;</span><br><span class="line">		return [[[UlWindow keyWindow] rootViewController] _printHierarchy].toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;)(exports);</span><br></pre></td></tr></table></figure>

<p>设备上 <code>/usr/lib/cycript0.9/com/</code> 新建文件夹 monkey</p>
<p>将 utils.cy 拷贝到文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp utils.cy root@172.16.1.96:&#x2F;usr&#x2F;lib&#x2F;cycript0.9&#x2F;com&#x2F;monkey</span><br></pre></td></tr></table></figure>

<p>如果需要使用该文件，在 cycript 中需要导入，就可以使用了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@import com.monkey.utils;</span><br><span class="line">pviews()</span><br></pre></td></tr></table></figure>

<h5 id="MonkeyApp-cycript"><a href="#MonkeyApp-cycript" class="headerlink" title="MonkeyApp cycript"></a>MonkeyApp cycript</h5><p>MonkeyApp 运行后控制台会提示 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Download cycript(https:&#x2F;&#x2F;cydia.saurik.com&#x2F;api&#x2F;latest&#x2F;3) then run: .&#x2F;cycript -r 172.16.1.60:6666</span><br><span class="line">2021-10-11 15:15:55.342839+0800 TargetApp[5795:1158273] [Cycript] Finish download all script!</span><br></pre></td></tr></table></figure>

<p>终端输入 <code>./cycript -r 172.16.1.60:6666</code> 就可以进入 cycript 交互界面</p>
<p>MonkeyDev 作者加载了自己写的网络脚本，源码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function(utils) &#123;</span><br><span class="line"></span><br><span class="line">    utils.constants &#x3D; &#123;</span><br><span class="line">        APPID:  	 NSBundle.mainBundle.bundleIdentifier,</span><br><span class="line">        APPPATH:     NSBundle.mainBundle.bundlePath,</span><br><span class="line">        APPHOME:	 NSHomeDirectory(),</span><br><span class="line">        APPDOC:      NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)[0],</span><br><span class="line">        APPLIBRARY:  NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES)[0],</span><br><span class="line">        APPCACHE:    NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES)[0]</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    utils.pviews &#x3D; function()&#123;</span><br><span class="line">        return UIApp.keyWindow.recursiveDescription().toString();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    utils.pvcs &#x3D; function()&#123;</span><br><span class="line">        return UIWindow.keyWindow().rootViewController._printHierarchy().toString();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    utils.rp &#x3D; function(target)&#123;</span><br><span class="line">        var result &#x3D; &quot;&quot; + target.toString();</span><br><span class="line">        while(target.nextResponder)&#123;</span><br><span class="line">            result +&#x3D; &quot;\n&quot; + target.nextResponder.toString();</span><br><span class="line">            target &#x3D; target.nextResponder;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    utils.pactions &#x3D; function(target)&#123;</span><br><span class="line">		var result &#x3D; &#39;&#39;;</span><br><span class="line">		var objs &#x3D; target.allTargets.allObjects();</span><br><span class="line">		for(var i &#x3D; 0; i &lt; objs.length; i++)&#123;</span><br><span class="line">			var actions &#x3D; [target actionsForTarget:objs[i] forControlEvent:0];</span><br><span class="line">			result +&#x3D; objs[i] + &quot; &quot; + [actions componentsJoinedByString:@&quot;,&quot;];</span><br><span class="line">		&#125;</span><br><span class="line">		return result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    for(var k in utils.constants) &#123;</span><br><span class="line">        Cycript.all[k] &#x3D; utils.constants[k];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(var k in utils) &#123;</span><br><span class="line">        if(utils.hasOwnProperty(k)) &#123;</span><br><span class="line">            var f &#x3D; utils[k];</span><br><span class="line">            if(typeof f &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class="line">                Cycript.all[k] &#x3D; f;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(exports);</span><br></pre></td></tr></table></figure>

<p>使用的时候需要先导入 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@import md</span><br></pre></td></tr></table></figure>





















]]></content>
      <tags>
        <tag>逆向工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Autotouch</title>
    <url>/2021/09/29/Autotouch/</url>
    <content><![CDATA[<blockquote>
<p>Autotouch 版本：7.0.33 破解版</p>
<p>软件源：多米诺骨牌源 <a href="https://apt.wxhbts.com/">https://apt.wxhbts.com</a></p>
</blockquote>
<h4 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h4><h5 id="模块与包"><a href="#模块与包" class="headerlink" title="模块与包"></a>模块与包</h5><p>Lua 的模块是由变量、函数等已知元素组成的 table，创建一个模块就是创建一个 table，把需要导出的常量、函数放入其中，最后返回 table</p>
<p>创建自定义模块 module.lua</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 文件名为 module.lua</span></span><br><span class="line"><span class="comment">-- 定义一个 module 的模块</span></span><br><span class="line"><span class="built_in">module</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义一个常量</span></span><br><span class="line"><span class="built_in">module</span>.constant = <span class="string">&quot;这是一个常量&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">module.func1</span><span class="params">()</span></span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;这是公有函数&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">func2</span><span class="params">()</span></span> </span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;这是私有函数&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">module.func3</span><span class="params">()</span></span></span><br><span class="line">	func2()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">module</span></span><br></pre></td></tr></table></figure>

<p>使用模块</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 加载模块 或者 require &quot;module&quot;</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;module&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">module</span>.constant)</span><br><span class="line"><span class="built_in">module</span>.func1()</span><br><span class="line"><span class="built_in">module</span>.func3()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给模块定义一个别名</span></span><br><span class="line"><span class="keyword">local</span> m = <span class="built_in">require</span>(<span class="string">&quot;module&quot;</span>)</span><br><span class="line">m.func3()</span><br></pre></td></tr></table></figure>





<h4 id="Extension-Functions"><a href="#Extension-Functions" class="headerlink" title="Extension Functions"></a>Extension Functions</h4><h5 id="touchDown-id-x-y"><a href="#touchDown-id-x-y" class="headerlink" title="touchDown(id, x, y)"></a>touchDown(id, x, y)</h5><blockquote>
<p>Press the coordinate (x,y) on the screen.</p>
</blockquote>
<p>id:    Finger ID</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Press by one finger at coordinate (100,200).</span></span><br><span class="line">touchDown(<span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- Press by three fingers at three locations on the screen.</span></span><br><span class="line">touchDown(<span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">touchDown(<span class="number">1</span>, <span class="number">200</span>, <span class="number">300</span>);</span><br><span class="line">touchDown(<span class="number">2</span>, <span class="number">300</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Implement a tap function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tap</span><span class="params">(x, y)</span></span></span><br><span class="line">    touchDown(<span class="number">0</span>, x, y);</span><br><span class="line">    usleep(<span class="number">16000</span>);</span><br><span class="line">    touchUp(<span class="number">0</span>, x, y);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Tap at (100, 200)</span></span><br><span class="line">tap(<span class="number">100</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure>

<h5 id="touchMove-id-x-y"><a href="#touchMove-id-x-y" class="headerlink" title="touchMove(id, x, y)"></a>touchMove(id, x, y)</h5><blockquote>
<p>Move the finger to coordinate (x,y).</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Press by one finger at coordinate (100,200) and move the finger to coordinate (200,200).</span></span><br><span class="line">touchDown(<span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">usleep(<span class="number">16000</span>);</span><br><span class="line">touchMove(<span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Press by three fingers at three locations on the screen and move to new location.</span></span><br><span class="line">touchDown(<span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">touchDown(<span class="number">1</span>, <span class="number">200</span>, <span class="number">300</span>);</span><br><span class="line">touchDown(<span class="number">2</span>, <span class="number">300</span>, <span class="number">400</span>);</span><br><span class="line">usleep(<span class="number">16000</span>);</span><br><span class="line">touchMove(<span class="number">0</span>, <span class="number">150</span>, <span class="number">250</span>);</span><br><span class="line">touchMove(<span class="number">1</span>, <span class="number">250</span>, <span class="number">350</span>);</span><br><span class="line">touchMove(<span class="number">2</span>, <span class="number">350</span>, <span class="number">450</span>);</span><br></pre></td></tr></table></figure>

<h5 id="touchUp-id-x-y"><a href="#touchUp-id-x-y" class="headerlink" title="touchUp(id, x, y)"></a>touchUp(id, x, y)</h5><blockquote>
<p>Lift the finger from coordinate (x,y)</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Click the screen once by one finger at coordinate (100,200).</span></span><br><span class="line">touchDown(<span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">usleep(<span class="number">16000</span>);</span><br><span class="line">touchUp(<span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Press by three fingers at three locations on the screen, move to new location, and then lift the finger.</span></span><br><span class="line">touchDown(<span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">touchDown(<span class="number">1</span>, <span class="number">200</span>, <span class="number">300</span>);</span><br><span class="line">touchDown(<span class="number">2</span>, <span class="number">300</span>, <span class="number">400</span>);</span><br><span class="line">usleep(<span class="number">16000</span>);</span><br><span class="line">touchMove(<span class="number">0</span>, <span class="number">150</span>, <span class="number">250</span>);</span><br><span class="line">touchMove(<span class="number">1</span>, <span class="number">250</span>, <span class="number">350</span>);</span><br><span class="line">touchMove(<span class="number">2</span>, <span class="number">350</span>, <span class="number">450</span>);</span><br><span class="line">usleep(<span class="number">16000</span>);</span><br><span class="line">touchUp(<span class="number">0</span>, <span class="number">150</span>, <span class="number">250</span>);</span><br><span class="line">touchUp(<span class="number">1</span>, <span class="number">250</span>, <span class="number">350</span>);</span><br><span class="line">touchUp(<span class="number">2</span>, <span class="number">350</span>, <span class="number">450</span>);</span><br></pre></td></tr></table></figure>

<h5 id="keyDown-keyType"><a href="#keyDown-keyType" class="headerlink" title="keyDown(keyType)"></a>keyDown(keyType)</h5><blockquote>
<p>Simulate the pressing of physical key</p>
</blockquote>
<p>Home Button：KEY_TYPE.HOME_BUTTON</p>
<p>Volume – Button：KEY_TYPE.VOLUME_DOWN_BUTTON</p>
<p>Volume + Button：KEY_TYPE.VOLUME_UP_BUTTON</p>
<p>Power Button：KEY_TYPE.POWER_BUTTON</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Simulate the pressing of Home Key.</span></span><br><span class="line">keyDown(KEY_TYPE.HOME_BUTTON);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- How to simulate a key pressing?</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keyPress</span><span class="params">(keyType)</span></span></span><br><span class="line">    keyDown(keyType);</span><br><span class="line">    usleep(<span class="number">10000</span>);</span><br><span class="line">    keyUp(keyType);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">keyPress(KEY_TYPE.HOME_BUTTON);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- How to simulate a screen lock function?</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lockScreen</span><span class="params">()</span></span></span><br><span class="line">    keyDown(KEY_TYPE.POWER_BUTTON);</span><br><span class="line">    keyUp(KEY_TYPE.POWER_BUTTON);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- How to simulate a screen unlock function?</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unlockScreen</span><span class="params">()</span></span></span><br><span class="line">    keyDown(KEY_TYPE.POWER_BUTTON);</span><br><span class="line">    keyUp(KEY_TYPE.POWER_BUTTON);</span><br><span class="line"></span><br><span class="line">    usleep(<span class="number">1000000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> w, h = getScreenResolution();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">local</span> gap = <span class="number">120</span>;</span><br><span class="line">    touchDown(<span class="number">0</span>, x, <span class="number">200</span>);</span><br><span class="line">    <span class="keyword">while</span> x &lt; w <span class="keyword">do</span></span><br><span class="line">        x = x + gap;</span><br><span class="line">        usleep(<span class="number">16000</span>);</span><br><span class="line">        touchMove(<span class="number">0</span>, x, <span class="number">200</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    touchUp(<span class="number">0</span>, x, <span class="number">200</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="keyUp-keyType"><a href="#keyUp-keyType" class="headerlink" title="keyUp(keyType)"></a>keyUp(keyType)</h5><blockquote>
<p>Simulate the lifting of physical key</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Simulate the action of pressing and lifting Home Key.</span></span><br><span class="line">keyDown(KEY_TYPE.HOME_BUTTON);</span><br><span class="line">usleep(<span class="number">10000</span>);</span><br><span class="line">keyUp(KEY_TYPE.HOME_BUTTON);</span><br></pre></td></tr></table></figure>

<h5 id="getColor-x-y"><a href="#getColor-x-y" class="headerlink" title="getColor(x, y)"></a>getColor(x, y)</h5><blockquote>
<p>Get the color value of the pixel point of the specified coordinate on current screen</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> color = getColor(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Pixel color is :%d&quot;</span>, color))</span><br><span class="line"><span class="comment">-- Pop up color: 16777215</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Keep gettting color of a location until it matches a specify color</span></span><br><span class="line"><span class="keyword">local</span> color</span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">   color = getColor(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">   usleep(<span class="number">50000</span>) <span class="comment">-- Wait a while</span></span><br><span class="line"><span class="keyword">until</span>( color == <span class="number">123456</span> )</span><br><span class="line"><span class="comment">-- Continue to do what&#x27;s next</span></span><br></pre></td></tr></table></figure>

<h5 id="getColors-locations"><a href="#getColors-locations" class="headerlink" title="getColors(locations)"></a>getColors(locations)</h5><blockquote>
<p>Get the color values of the pixel points of the specified coordinates on current screen</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> result = getColors(&#123; &#123;<span class="number">100</span>, <span class="number">200</span>&#125;, &#123;<span class="number">200</span>, <span class="number">300</span>&#125;, &#123;<span class="number">300</span>, <span class="number">400</span>&#125; &#125;);</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Gotten color:%d&quot;</span>, v));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="findColor"><a href="#findColor" class="headerlink" title="findColor()"></a>findColor()</h5><p>findColor(color, count, region, debug, rightToLeft, bottomToTop)</p>
<blockquote>
<p>Search the coordinates of the pixel points matching the specified color on current screen</p>
</blockquote>
<table>
<thead>
<tr>
<th>Parameter</th>
<th align="left">Type</th>
<th>Optional</th>
<th>Default</th>
</tr>
</thead>
<tbody><tr>
<td>color</td>
<td align="left">Integer</td>
<td>NO</td>
<td></td>
</tr>
<tr>
<td>count</td>
<td align="left">Integer</td>
<td>NO</td>
<td>0</td>
</tr>
<tr>
<td>region</td>
<td align="left">table</td>
<td>NO</td>
<td>nil</td>
</tr>
<tr>
<td>debug</td>
<td align="left">boolean</td>
<td>YES</td>
<td>false</td>
</tr>
<tr>
<td>rightToLeft</td>
<td align="left">boolean</td>
<td>YES</td>
<td>false</td>
</tr>
<tr>
<td>bottonToTop</td>
<td align="left">boolean</td>
<td>YES</td>
<td>false</td>
</tr>
</tbody></table>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> result = findColor(<span class="number">0x0000ff</span>, <span class="number">2</span>, <span class="literal">nil</span>);</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found pixel: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example: Search from right to left, from bottom to top</span></span><br><span class="line"><span class="keyword">local</span> result = findColor(<span class="number">0x0000ff</span>, <span class="number">2</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found rect at: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> result = findColor(<span class="number">0x00ddff</span>, <span class="number">0</span>, &#123;<span class="number">100</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>&#125;);</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found pixel: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> region = &#123;<span class="number">100</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>&#125;;</span><br><span class="line"><span class="keyword">local</span> result = findColor(<span class="number">0x00ddff</span>, <span class="number">0</span>, region);</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found pixel: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="comment">-- Keep finding a speficied color until it&#x27;s found.</span></span><br><span class="line"><span class="keyword">local</span> locations</span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">   <span class="keyword">local</span> locations = findColor(<span class="number">0x0000ff</span>, <span class="number">2</span>, <span class="literal">nil</span>);</span><br><span class="line">   usleep(<span class="number">50000</span>) <span class="comment">-- Wait a while</span></span><br><span class="line"><span class="keyword">until</span>(locations &gt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">-- Log the locations if found</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(locations) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found pixel: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="findColors"><a href="#findColors" class="headerlink" title="findColors()"></a>findColors()</h5><p> findColors(colors, count, region, debug, rightToLeft, bottomToTop)</p>
<blockquote>
<p>colors: { {0x00ddff,0,0}, {0x00eeff,10,10}, {0x0000ff,0,20} }</p>
<p>the first is the color value. The second and the third are the corresponding locations of the colors </p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> result = findColors(&#123; &#123;<span class="number">0x00ddff</span>,<span class="number">0</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0x00eeff</span>,<span class="number">10</span>,<span class="number">10</span>&#125;, &#123;<span class="number">0x0000ff</span>,<span class="number">0</span>,<span class="number">20</span>&#125; &#125;, <span class="number">2</span>, <span class="literal">nil</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found rect at: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example: Search from right to left, from bottom to top</span></span><br><span class="line"><span class="keyword">local</span> result = findColors(&#123; &#123;<span class="number">0x00ddff</span>,<span class="number">0</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0x00eeff</span>,<span class="number">10</span>,<span class="number">10</span>&#125;, &#123;<span class="number">0x0000ff</span>,<span class="number">0</span>,<span class="number">20</span>&#125; &#125;, <span class="number">2</span>, <span class="literal">nil</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found rect at: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> colors = &#123; &#123;<span class="number">0x00ddff</span>,<span class="number">0</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0x00eeff</span>,<span class="number">10</span>,<span class="number">10</span>&#125;, &#123;<span class="number">0x0000ff</span>,<span class="number">0</span>,<span class="number">20</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">local</span> result = findColors(colors, <span class="number">0</span>, <span class="literal">nil</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found rect at: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> colors = &#123; &#123;<span class="number">0x00ddff</span>,<span class="number">0</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0x00eeff</span>,<span class="number">10</span>,<span class="number">10</span>&#125;, &#123;<span class="number">0x0000ff</span>,<span class="number">0</span>,<span class="number">20</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">local</span> region = &#123;<span class="number">100</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>&#125;;</span><br><span class="line"><span class="keyword">local</span> result = findColors(colors, <span class="number">0</span>, region);</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found rect at: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="findImage"><a href="#findImage" class="headerlink" title="findImage()"></a>findImage()</h5><p>findImage(targetImagePath, count, threshold, region, debug, method)</p>
<blockquote>
<p>Search areas matching the specified image on current screen and return the center coordinates</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th>Type</th>
<th>Specification</th>
<th>Optional</th>
<th>Default</th>
</tr>
</thead>
<tbody><tr>
<td>targetImagePath</td>
<td></td>
<td>for example: “images/gold.PNG”, If the path starts with character “/“, it will be treated as absolute path, if not, it will be treated as relative path</td>
<td>NO</td>
<td></td>
</tr>
<tr>
<td>count</td>
<td>integer</td>
<td>How many areas to find, Pass 0 or nil</td>
<td>YES</td>
<td>0</td>
</tr>
<tr>
<td>threshold</td>
<td>float</td>
<td>maximum value is 1 means totally the same, minimum value is -1 means non same, default is 0.9, usually 0.99 is good. Pass nil if you just want to use the default value</td>
<td>YES</td>
<td>0.9</td>
</tr>
<tr>
<td>region</td>
<td>table</td>
<td>Do searching in which region</td>
<td>YES</td>
<td>Whole screen</td>
</tr>
<tr>
<td>debug</td>
<td>boolean</td>
<td>If pass debug=true, it will produce a image ends with “-Debug.PNG” marked the matching areas.</td>
<td>YES</td>
<td>false</td>
</tr>
<tr>
<td>method</td>
<td>integer</td>
<td>Searching method, default is 1, pass 2 if you want to use the more intelligent method which is able to cover size scale, orientation, color changed, it will be a little slower than method 1.</td>
<td>YES</td>
<td>1</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Return</th>
<th>Type</th>
<th>Specification</th>
</tr>
</thead>
<tbody><tr>
<td>center locations</td>
<td>table</td>
<td>Center coordinates of the matching areas</td>
</tr>
</tbody></table>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> result = findImage(<span class="string">&quot;images/Gold.PNG&quot;</span>, <span class="number">5</span>, <span class="number">0.99</span>, <span class="literal">nil</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found rect at: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> result = findImage(<span class="string">&quot;images/Gold.PNG&quot;</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found rect at: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> result = findImage(<span class="string">&quot;images/Gold.PNG&quot;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found rect at: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> imagePath = <span class="string">&quot;images/spirit.PNG&quot;</span>;</span><br><span class="line"><span class="keyword">local</span> region = &#123;<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>&#125;;</span><br><span class="line"><span class="keyword">local</span> result = findImage(imagePath, <span class="number">2</span>, <span class="number">0.98</span>, region, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> x = v[<span class="number">1</span>], y = v[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found rect at: x:%f, y:%f&quot;</span>, x, y));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- Click the found location once.</span></span><br><span class="line">    tap(x, y);</span><br><span class="line">    usleep(<span class="number">16000</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> imagePath = <span class="string">&quot;images/spirit.PNG&quot;</span>;</span><br><span class="line"><span class="keyword">local</span> region = &#123;<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>&#125;;</span><br><span class="line"><span class="comment">-- Use method 2 to find image</span></span><br><span class="line"><span class="keyword">local</span> result = findImage(imagePath, <span class="number">2</span>, <span class="number">0.98</span>, region, <span class="literal">true</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h5 id="screenshot-filePath-region"><a href="#screenshot-filePath-region" class="headerlink" title="screenshot(filePath, region)"></a>screenshot(filePath, region)</h5><blockquote>
<p>Take a screenshot for the whole screen or specified area</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Take shot of the whole screen and save into  &quot;AutoTouch&quot; album of iOS Photo Library.</span></span><br><span class="line">screenshot();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Take a screenshot of the whole screen and save to the specified path, if no PNG as path extension, .PNG will automatically added.</span></span><br><span class="line">screenshot (<span class="string">&quot;images/screenshot1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Take a screenshot of the specified area and save.</span></span><br><span class="line">screenshot (<span class="string">&quot;images/screenshot2.PNG&quot;</span>, &#123;<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Take a screenshot of the specified area and save into  &quot;AutoTouch&quot; album of iOS Photo Library.</span></span><br><span class="line">screenshot (<span class="literal">nil</span>, &#123;<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="appRun-appidentifier"><a href="#appRun-appidentifier" class="headerlink" title="appRun(appidentifier)"></a>appRun(appidentifier)</h5><blockquote>
<p>Run specified application</p>
</blockquote>
<p>或者 appActivate</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">appRun(<span class="string">&quot;com.apple.mobilesafari&quot;</span>)</span><br><span class="line">appActivate(<span class="string">&quot;com.taobao.taobao4iphone&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="appKill（appidentifier）"><a href="#appKill（appidentifier）" class="headerlink" title="appKill（appidentifier）"></a>appKill（appidentifier）</h5><blockquote>
<p>Kill specified application</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">appKill(<span class="string">&quot;com.apple.mobilesafari&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="appState-appidentifier"><a href="#appState-appidentifier" class="headerlink" title="appState(appidentifier)"></a>appState(appidentifier)</h5><blockquote>
<p>Get the running state of the specified application</p>
</blockquote>
<p>“NOT RUNNING”, “ACTIVATED”, “DEACTIVATED”</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Get the state of Safari.</span></span><br><span class="line"><span class="keyword">local</span> state = appState(<span class="string">&quot;com.apple.mobilesafari&quot;</span>);</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;State of Safari: %s&quot;</span>, state));</span><br><span class="line"><span class="comment">-- Pop up the state of Safari: &quot;ACTIVATED&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="rootDir"><a href="#rootDir" class="headerlink" title="rootDir()"></a>rootDir()</h5><blockquote>
<p>Get the default directory address of the saved script</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> dirPath = rootDir();</span><br><span class="line">alert(dirPath);</span><br><span class="line"><span class="comment">-- Popup &quot;/var/mobile/Library/AutoTouch/Scripts/&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="currentDir"><a href="#currentDir" class="headerlink" title="currentDir()"></a>currentDir()</h5><blockquote>
<p>Get directory of current executing script in runtime</p>
</blockquote>
<p>7.0.33 不支持</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> dir = currentDir();</span><br><span class="line">alert(dir);</span><br><span class="line"><span class="comment">-- &quot;/var/mobile/Library/AutoTouch/Scripts&quot;</span></span><br><span class="line"><span class="comment">-- Or maybe in tmp place for encrypted scripts: &quot;/tmp/xxxxxxxxxxxx/&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="botPath"><a href="#botPath" class="headerlink" title="botPath"></a>botPath</h5><blockquote>
<p>Get original path of the bot, relative to the runtime path of encrypted scripts</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">path</span> = botPath();</span><br><span class="line">alert(<span class="built_in">path</span>);</span><br><span class="line"><span class="comment">-- &quot;/var/mobile/Library/AutoTouch/Scripts/test.lua&quot;</span></span><br><span class="line"><span class="comment">-- &quot;/var/mobile/Library/AutoTouch/Scripts/test1.ate&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="usleep-microseconds"><a href="#usleep-microseconds" class="headerlink" title="usleep(microseconds)"></a>usleep(microseconds)</h5><blockquote>
<p>Sleep several microseconds (1/1000000 second)</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Sleep 1 second.</span></span><br><span class="line">usleep(<span class="number">1000000</span>);</span><br></pre></td></tr></table></figure>

<h5 id="log-content"><a href="#log-content" class="headerlink" title="log(content)"></a>log(content)</h5><blockquote>
<p>Record log, can be seen in the log interface</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">log</span>(<span class="string">&quot;play here...&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="alert-message"><a href="#alert-message" class="headerlink" title="alert(message)"></a>alert(message)</h5><blockquote>
<p>Pop up the dialog box to show specified content</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="toast-message-delay"><a href="#toast-message-delay" class="headerlink" title="toast(message, delay)"></a>toast(message, delay)</h5><blockquote>
<p>Show messages with Toast style and delay for some seconds</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">toast(<span class="string">&quot;Hello I&#x27;m a toast!&quot;</span>, <span class="number">5</span>); <span class="comment">-- Show message for 5 seconds.</span></span><br><span class="line">toast(<span class="string">&quot;Hello again!&quot;</span>); <span class="comment">-- Show message for 2 seconds.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello again!&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="vibrate"><a href="#vibrate" class="headerlink" title="vibrate()"></a>vibrate()</h5><blockquote>
<p>Vibrate once</p>
</blockquote>
<p>震动一次 7.0.33 没生效</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Vibrate once.</span></span><br><span class="line">vibrate();</span><br></pre></td></tr></table></figure>

<h5 id="playAudio-audioFile-times"><a href="#playAudio-audioFile-times" class="headerlink" title="playAudio(audioFile, times)"></a>playAudio(audioFile, times)</h5><blockquote>
<p>Play audio document at specified location</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Play audio infinitely.</span></span><br><span class="line">playAudio(<span class="string">&quot;/var/audio.mp3&quot;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h5 id="stopAudio"><a href="#stopAudio" class="headerlink" title="stopAudio"></a>stopAudio</h5><blockquote>
<p>Stop playing audio</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Stop playing audio.</span></span><br><span class="line">stopAudio();</span><br></pre></td></tr></table></figure>

<h5 id="getOrientation"><a href="#getOrientation" class="headerlink" title="getOrientation()"></a>getOrientation()</h5><blockquote>
<p>Get orientation of the screen</p>
</blockquote>
<table>
<thead>
<tr>
<th>Value</th>
<th>Specification</th>
</tr>
</thead>
<tbody><tr>
<td>ORIENTATION_TYPE.UNKNOWN</td>
<td>Unknown orientation. Practical value is 0.</td>
</tr>
<tr>
<td>ORIENTATION_TYPE.PORTRAIT</td>
<td>Portrait screen. Home button is at the bottom. Practical value is 1.</td>
</tr>
<tr>
<td>ORIENTATION_TYPE.PORTRAIT_UPSIDE_DOWN</td>
<td>Upside-down portrait screen. Home button on the top. Practical value is 2.</td>
</tr>
<tr>
<td>ORIENTATION_TYPE.LANDSCAPE_LEFT</td>
<td>Landscape left screen. Home Key is in the left. Practical value is 3.</td>
</tr>
<tr>
<td>ORIENTATION_TYPE.LANDSCAPE_RIGHT</td>
<td>Landscape right screen. Home key is in the right. Practical value is 4.</td>
</tr>
</tbody></table>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> o = getOrientation();</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Screen orientation is : %d&quot;</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment">-- Pop up the orientation 2 of the screen, and mark the reversed screen.</span></span><br></pre></td></tr></table></figure>

<h5 id="getScreenResolution"><a href="#getScreenResolution" class="headerlink" title="getScreenResolution"></a>getScreenResolution</h5><blockquote>
<p>Get screen resolution bese on pixels</p>
</blockquote>
<table>
<thead>
<tr>
<th>Return</th>
<th align="center">Type</th>
<th>Specification</th>
</tr>
</thead>
<tbody><tr>
<td>width</td>
<td align="center">Integer</td>
<td>Width of screen resolution.</td>
</tr>
<tr>
<td>height</td>
<td align="center">Integer</td>
<td>Height of screen resolution</td>
</tr>
</tbody></table>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> w, h = getScreenResolution();</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Resolution of iPhone 6 Plus: width:%d, height:%d&quot;</span>, w, h));</span><br><span class="line"><span class="comment">-- iPhone 6 Plus’s resolution width is 1242 and resolution height is 2208.</span></span><br></pre></td></tr></table></figure>

<h5 id="getSN"><a href="#getSN" class="headerlink" title="getSN()"></a>getSN()</h5><blockquote>
<p>Get Serial Number of the device</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> sn = getSN();</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;SN is : %s&quot;</span>, sn));</span><br><span class="line"><span class="comment">-- Popup shows the SN of the device: C15NFK32TWD2</span></span><br></pre></td></tr></table></figure>

<h5 id="getVersion"><a href="#getVersion" class="headerlink" title="getVersion()"></a>getVersion()</h5><blockquote>
<p>Get version of AutoTouch</p>
</blockquote>
<p>7.0.33 返回 nil</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> version = getVersion();</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Current version of AutoTouch is : %s&quot;</span>, version));</span><br><span class="line"><span class="comment">-- Pop up shows current version of AutoTouch: 3.5.3-4</span></span><br></pre></td></tr></table></figure>

<h5 id="frontMostAppid"><a href="#frontMostAppid" class="headerlink" title="frontMostAppid()"></a>frontMostAppid()</h5><blockquote>
<p>Get identifier of current front most App</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> appId = frontMostAppId();</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Current front most App is : %s&quot;</span>, appId))</span><br></pre></td></tr></table></figure>

<h5 id="frontMostAppOrientation"><a href="#frontMostAppOrientation" class="headerlink" title="frontMostAppOrientation()"></a>frontMostAppOrientation()</h5><blockquote>
<p>Get orientation of current front most App</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> orientation = frontMostAppOrientation();</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Orientation of current front most App is : %d&quot;</span>, orientation))</span><br></pre></td></tr></table></figure>

<h5 id="intToRgb-intColor"><a href="#intToRgb-intColor" class="headerlink" title="intToRgb(intColor)"></a>intToRgb(intColor)</h5><blockquote>
<p>Transit integer color to independent values of R,G,B.</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> r, g, b = intToRgb(<span class="number">0x2b2b2b</span>);</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;R:%d, G:%d, B:%d&quot;</span>, r, g, b))</span><br></pre></td></tr></table></figure>

<h5 id="rgbToInt-r-g-b"><a href="#rgbToInt-r-g-b" class="headerlink" title="rgbToInt(r, g, b)"></a>rgbToInt(r, g, b)</h5><blockquote>
<p>Transit values of R,G,B to integer color value</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> intColor = rgbToInt(<span class="number">200</span>, <span class="number">255</span>, <span class="number">100</span>);</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Int type color: %d&quot;</span>, intColor))</span><br></pre></td></tr></table></figure>

<h5 id="copyText-text"><a href="#copyText-text" class="headerlink" title="copyText(text)"></a>copyText(text)</h5><blockquote>
<p>Copy specified text to clipboard</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">copyText(<span class="string">&quot;This is a copied text!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="clipText"><a href="#clipText" class="headerlink" title="clipText()"></a>clipText()</h5><blockquote>
<p>Get the text in the clipboard</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> text = clipText();</span><br><span class="line">alert(text);</span><br><span class="line"><span class="comment">-- Popup shows the text to be copied: &quot;This is a copied text!&quot;;</span></span><br></pre></td></tr></table></figure>

<h5 id="inputText"><a href="#inputText" class="headerlink" title="inputText()"></a>inputText()</h5><blockquote>
<p>Input text to the input box selected now. You can delete a character backspace by inputText(“\b”).<strong>ATTENSION:</strong> Enable inoutText function at AutoTouch Settings &gt; Features before using it</p>
</blockquote>
<p>7.0.33 没有这个设置</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">inputText(<span class="string">&quot;Let&#x27;s input some text automatically without tapping the keyboard!&quot;</span>);</span><br><span class="line"><span class="comment">--  Delete 3 character by inputing 3 backspaces.</span></span><br><span class="line">inputText(<span class="string">&quot;\b\b\b&quot;</span>); </span><br></pre></td></tr></table></figure>

<h5 id="dialog-controls-orientations"><a href="#dialog-controls-orientations" class="headerlink" title="dialog(controls, orientations)"></a>dialog(controls, orientations)</h5><blockquote>
<p>Pop up self-defined dialog box to accept the user input. Please refer to the example for specific usage</p>
</blockquote>
<table>
<thead>
<tr>
<th>Value</th>
<th>Specification</th>
</tr>
</thead>
<tbody><tr>
<td>CONTROLLER_TYPE.LABEL</td>
<td>Text label</td>
</tr>
<tr>
<td>CONTROLLER_TYPE.INPUT</td>
<td>Input box</td>
</tr>
<tr>
<td>CONTROLLER_TYPE.PICKER</td>
<td>Picker</td>
</tr>
<tr>
<td>CONTROLLER_TYPE.SWITCH</td>
<td>Switch</td>
</tr>
<tr>
<td>CONTROLLER_TYPE.BUTTON</td>
<td>Button</td>
</tr>
<tr>
<td>CONTROLLER_TYPE.REMEMBER</td>
<td>Switch for remember user inputs</td>
</tr>
</tbody></table>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> label = &#123;<span class="built_in">type</span>=CONTROLLER_TYPE.LABEL, text=<span class="string">&quot;Would you mind to provide some personal informations?&quot;</span>&#125;</span><br><span class="line"><span class="keyword">local</span> nameInput = &#123;<span class="built_in">type</span>=CONTROLLER_TYPE.INPUT, title=<span class="string">&quot;Name:&quot;</span>, key=<span class="string">&quot;Name&quot;</span>, value=<span class="string">&quot;Bob&quot;</span>&#125;</span><br><span class="line"><span class="keyword">local</span> positionPicker = &#123;<span class="built_in">type</span>=CONTROLLER_TYPE.PICKER, title=<span class="string">&quot;Position:&quot;</span>, key=<span class="string">&quot;Position&quot;</span>, value=<span class="string">&quot;CEO&quot;</span>, options=&#123;<span class="string">&quot;CEO&quot;</span>, <span class="string">&quot;CTO&quot;</span>, <span class="string">&quot;CFO&quot;</span>, <span class="string">&quot;CXO&quot;</span>&#125; &#125;</span><br><span class="line"><span class="keyword">local</span> developerSwitch = &#123;<span class="built_in">type</span>=CONTROLLER_TYPE.SWITCH, title=<span class="string">&quot;A Developer:&quot;</span>, key=<span class="string">&quot;ADeveloper&quot;</span>, value=<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- It&#x27;s an option for users to determine weather the inputs should be remembered, if you use this control in the dialog.</span></span><br><span class="line"><span class="keyword">local</span> remember = &#123;<span class="built_in">type</span>=CONTROLLER_TYPE.REMEMBER, on=<span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[ Define buttons:</span></span><br><span class="line"><span class="comment">type = CONTROLLER_TYPE.BUTTON</span></span><br><span class="line"><span class="comment">title = Button text</span></span><br><span class="line"><span class="comment">color = Button background color, it&#x27;s optional, the default value is 0x428BCA</span></span><br><span class="line"><span class="comment">width = Button width upon percentage of the dialog width, it&#x27;s optional, the default value is 0.5, max value is 1.0.</span></span><br><span class="line"><span class="comment">flag = Integer type of button flag for identifying which button is tapped.</span></span><br><span class="line"><span class="comment">collectInputs = Boolean type specifying wheather the dialog should collect the inputs while this button is tapped. ]]</span><span class="comment">--</span></span><br><span class="line"><span class="keyword">local</span> btn1 = &#123;<span class="built_in">type</span>=CONTROLLER_TYPE.BUTTON, title=<span class="string">&quot;Button 1&quot;</span>, color=<span class="number">0x71C69E</span>, width=<span class="number">0.8</span>, flag=<span class="number">1</span>, collectInputs=<span class="literal">false</span>&#125;</span><br><span class="line"><span class="keyword">local</span> btn2 = &#123;<span class="built_in">type</span>=CONTROLLER_TYPE.BUTTON, title=<span class="string">&quot;Button 2&quot;</span>, color=<span class="number">0xFF5733</span>, flag=<span class="number">2</span>, collectInputs=<span class="literal">true</span>&#125;</span><br><span class="line"><span class="keyword">local</span> btn3 = &#123;<span class="built_in">type</span>=CONTROLLER_TYPE.BUTTON, title=<span class="string">&quot;Button 3&quot;</span>, color=<span class="number">0xFFB7D0</span>, width=<span class="number">1.0</span>, flag=<span class="number">3</span>, collectInputs=<span class="literal">false</span>&#125;</span><br><span class="line"><span class="keyword">local</span> btn4 = &#123;<span class="built_in">type</span>=CONTROLLER_TYPE.BUTTON, title=<span class="string">&quot;Button 4&quot;</span>, width=<span class="number">1.0</span>, flag=<span class="number">4</span>, collectInputs=<span class="literal">true</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> controls = &#123;label, nameInput, positionPicker, developerSwitch, btn1, btn2, remember, btn3, btn4&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Pop up the dialog. After popping, the script will suspend waiting for user input until any button is tapped, then returns the flag of tapped button.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- What orientations the dialog could be, it&#x27;s optional</span></span><br><span class="line"><span class="keyword">local</span> orientations = &#123; ORIENTATION_TYPE.PORTRAIT &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> result = dialog(controls, orientations);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">    alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;name:%s, birthday:%s, gender:%d&quot;</span>, nameInput.value, positionPicker.value, developerSwitch.value))</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Dialog returned: %s&quot;</span>, result))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="cleanDialogValues-script"><a href="#cleanDialogValues-script" class="headerlink" title="cleanDialogValues(script)"></a>cleanDialogValues(script)</h5><blockquote>
<p>Clear the remembered values of the dialog created by the function dialog</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- There is a dialog.lua script in the scripts list</span></span><br><span class="line">clearDialogValues(<span class="string">&quot;dialog.lua&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="openURL-urlString"><a href="#openURL-urlString" class="headerlink" title="openURL(urlString)"></a>openURL(urlString)</h5><blockquote>
<p>Open url, or open other apps’ url scheme</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">openURL(<span class="string">&quot;https://autotouch.net&quot;</span>)</span><br><span class="line">openURL(<span class="string">&quot;prefs:root=General&amp;path=About&quot;</span>)</span><br><span class="line">openURL(<span class="string">&quot;musics://&quot;</span>)</span><br><span class="line">openURL(<span class="string">&quot;itms-apps://itunes.apple.com&quot;</span>)</span><br><span class="line">openURL(<span class="string">&quot;tel://+1123456&quot;</span>)</span><br><span class="line">openURL(<span class="string">&quot;clashofclans://&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="isLicensed"><a href="#isLicensed" class="headerlink" title="isLicensed()"></a>isLicensed()</h5><blockquote>
<p>Check if the current device is running licensed AutoTouch</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> isLicensed() <span class="keyword">then</span></span><br><span class="line">    alert(<span class="string">&quot;Your device is licensed by AutoTouch!&quot;</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="setAutoLaunch-scriptPath-on"><a href="#setAutoLaunch-scriptPath-on" class="headerlink" title="setAutoLaunch(scriptPath, on)"></a>setAutoLaunch(scriptPath, on)</h5><blockquote>
<p>Switch on/off a script as auto launch</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">setAutoLaunch(<span class="string">&quot;Records/test.lua&quot;</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<h5 id="listAutoLaunch"><a href="#listAutoLaunch" class="headerlink" title="listAutoLaunch()"></a>listAutoLaunch()</h5><blockquote>
<p>List all auto launch scripts</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> scripts = listAutoLaunch()</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(scripts) <span class="keyword">do</span></span><br><span class="line">    alert(v);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="stop"><a href="#stop" class="headerlink" title="stop()"></a>stop()</h5><blockquote>
<p>SStop the current script execution.</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Exit execution</span></span><br><span class="line">stop();</span><br></pre></td></tr></table></figure>

<h5 id="ocr"><a href="#ocr" class="headerlink" title="ocr"></a>ocr</h5><p>ocr(region, languages, threshold, whitelist, blacklist, timeout, tessdataParentDir, debug)</p>
<p> 需要识别的语言，下载需要的语言到相同的目录 </p>
<p><code>/var/mobile/Library/AutoTouch/Library/tessadata</code></p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th align="center">Type</th>
<th>Specification</th>
<th align="center">Optional</th>
<th align="center">Default</th>
</tr>
</thead>
<tbody><tr>
<td>region</td>
<td align="center">table</td>
<td>What region you want to recognize text at the screen.</td>
<td align="center">YES</td>
<td align="center">Whole screen</td>
</tr>
<tr>
<td>languages</td>
<td align="center">String</td>
<td>Languages you want to recognize, by default AutoTouch has included <code>eng.traineddata</code> at <code>/var/mobile/Library/AutoTouch/Library/tessadata</code>, you may download other languages you needed to the same dir from <a href="https://github.com/tesseract-ocr/tessdata/tree/3.04.00">https://github.com/tesseract-ocr/tessdata/tree/3.04.00</a>. Somewhat you may even train your own data for <code>tesseract orc</code> and put it at <code>tessadata</code> dir.</td>
<td align="center">YES</td>
<td align="center">“eng”</td>
</tr>
<tr>
<td>threshold</td>
<td align="center">Integer</td>
<td>Threshold the image, Adjust this value to improve the accurancy. Value range is from 0 to 255.</td>
<td align="center">YES</td>
<td align="center">100</td>
</tr>
<tr>
<td>whitelist</td>
<td align="center">String</td>
<td>What characters you want to recognize in the region, such as “0123456789” will find numbers only.</td>
<td align="center">YES</td>
<td align="center">NULL</td>
</tr>
<tr>
<td>blacklist</td>
<td align="center">String</td>
<td>What characters you do not want to recognize from the region.</td>
<td align="center">YES</td>
<td align="center">NULL</td>
</tr>
<tr>
<td>timeout</td>
<td align="center">Integer</td>
<td>Timeout in seconds.</td>
<td align="center">YES</td>
<td align="center">3</td>
</tr>
<tr>
<td>tessdataParentDir</td>
<td align="center">String</td>
<td>Parent directory path of the <code>tessdata</code> directory, google to know more about <code>tessdata</code> of <code>tesseract ocr</code>. If this parameter starts with “/“, it will be treated as an absolute path, otherwise it will be treated as a relative path. The real <code>traineddata</code> files will be at <code>tessdata</code>dir inside <code>tessdataParentDir</code>. <strong>ATTENSION</strong> this parameter is the <strong>parent dir</strong> of the <code>tessdata</code> folder!!! And the folder containers traineddata files must be named <code>tessdata</code>.</td>
<td align="center">YES</td>
<td align="center"><code>/var/mobile/Library/AutoTouch/Library/</code></td>
</tr>
<tr>
<td>debug</td>
<td align="center">boolean</td>
<td>If pass debug=true, it will produce a image ends with “-Debug.PNG” marked the matching areas.</td>
<td align="center">YES</td>
<td align="center">false</td>
</tr>
</tbody></table>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> result = ocr(&#123;<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>&#125;, <span class="string">&#x27;eng&#x27;</span>, <span class="number">220</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> result = ocr(&#123;<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>&#125;, <span class="string">&#x27;eng+fra&#x27;</span>, <span class="number">220</span>, <span class="string">&#x27;0123456789 &#x27;</span>, <span class="string">&#x27;..........&#x27;</span>, <span class="number">5</span>, <span class="literal">nil</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="comment">-- Find English+France at the specified region with threshold 220, using the traindata in `tessdata` folder at the current directory.</span></span><br><span class="line"><span class="comment">-- Like this example, you can put the traindata inside your package project, so you can encrypt and pack them to a single bot.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--+TestOrcProject.at</span></span><br><span class="line"><span class="comment">--+----tesseract</span></span><br><span class="line"><span class="comment">--+--------eng.traindata</span></span><br><span class="line"><span class="comment">--+--------fra.traindata</span></span><br><span class="line"><span class="comment">--+----main.lua</span></span><br><span class="line"><span class="comment">--+----worker.lua</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- `./` means under current directory, it will find `tessdata` folder in current directory.</span></span><br><span class="line"><span class="keyword">local</span> result = ocr(&#123;<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>&#125;, <span class="string">&#x27;eng+fra&#x27;</span>, <span class="number">220</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="number">5</span>, <span class="string">&#x27;./&#x27;</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<p>识别当前界面范围， 7.0.33 识别 result = nil</p>
<p>中文识别 chi_sim 死机了。。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> result = ocr(&#123;<span class="number">80.28</span>,<span class="number">225</span>, <span class="number">176.41</span>, <span class="number">120.42</span>&#125;,<span class="string">&#x27;eng&#x27;</span>, <span class="number">220</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="number">5</span>, <span class="string">&#x27;./&#x27;</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<h5 id="recognizeText"><a href="#recognizeText" class="headerlink" title="recognizeText()"></a>recognizeText()</h5><blockquote>
<p>Recognize text on the screen</p>
</blockquote>
<p>7.0.33 版本不支持 recognizeText</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Recognize text on the screen or a specified region</span></span><br><span class="line"><span class="comment">-- recognizeText(region, customWords, minimumTextHeight, level, languages, correct, debug)</span></span><br><span class="line"><span class="comment">-- @param &#123;region&#125; - specified the region to recognize text</span></span><br><span class="line"><span class="comment">-- @param &#123;customWords&#125; - an array of strings to supplement the recognized languages at the word recognition stage.</span></span><br><span class="line"><span class="comment">-- @param &#123;minimumTextHeight&#125; - the minimum height of the text expected to be recognized, relative to the region/screen height, default is 1/32.</span></span><br><span class="line"><span class="comment">-- @param &#123;level&#125; - 0 means accurate first, 1 means speed first</span></span><br><span class="line"><span class="comment">-- @param &#123;languages&#125; - an array of languages to detect, in priority order, only `en-US` supported now. ISO language codes: http://www.lingoes.net/en/translator/langcode.htm. Use function `at.recognizeTextSupportedLanguages()` of `JavaScript` API to get the supported languages</span></span><br><span class="line"><span class="comment">-- @param &#123;correct&#125; - whether use language correction during the recognition process.</span></span><br><span class="line"><span class="comment">-- @param &#123;debug&#125; - whether you want to produce debug image</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> region = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">500</span>, <span class="number">600</span>&#125;; <span class="comment">-- nil for default means hole screen, </span></span><br><span class="line"><span class="keyword">local</span> customWords = <span class="literal">nil</span>; <span class="comment">-- nil for default, or something like [&#x27;Deploy&#x27;, &#x27;Troops&#x27;]</span></span><br><span class="line"><span class="keyword">local</span> minimumTextHeight = <span class="literal">nil</span>; <span class="comment">-- nil for default</span></span><br><span class="line"><span class="keyword">local</span> level = <span class="literal">nil</span>; <span class="comment">-- nil for default means value 0</span></span><br><span class="line"><span class="keyword">local</span> languages = <span class="literal">nil</span>; <span class="comment">-- nil for default, or something like [&#x27;en-US&#x27;, &quot;fr-FR&quot;, &#x27;zh-Hans&#x27;].</span></span><br><span class="line"><span class="keyword">local</span> correct = <span class="literal">nil</span>; <span class="comment">-- nil for default value false</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">debug</span> = <span class="literal">nil</span>; <span class="comment">-- nil for default value false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> result = recognizeText(region, customWords, minimumTextHeight, level, languages, correct, <span class="built_in">debug</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Got result of recognizeText:</span></span><br><span class="line"><span class="comment">-- &#123;</span></span><br><span class="line"><span class="comment">--     &#123;</span></span><br><span class="line"><span class="comment">--         &quot;text&quot;: &quot;Example&quot;,</span></span><br><span class="line"><span class="comment">--         &quot;rectangle&quot;: &#123;</span></span><br><span class="line"><span class="comment">--             &quot;bottomRight&quot;: &#123;</span></span><br><span class="line"><span class="comment">--                 &quot;x&quot;: 300.47,</span></span><br><span class="line"><span class="comment">--                 &quot;y&quot;: 177.78</span></span><br><span class="line"><span class="comment">--             &#125;,</span></span><br><span class="line"><span class="comment">--             &quot;topRight&quot;: &#123;</span></span><br><span class="line"><span class="comment">--                 &quot;x&quot;: 300.47,</span></span><br><span class="line"><span class="comment">--                 &quot;y&quot;: 237.52</span></span><br><span class="line"><span class="comment">--             &#125;,</span></span><br><span class="line"><span class="comment">--             &quot;topLeft&quot;: &#123;</span></span><br><span class="line"><span class="comment">--                 &quot;x&quot;: 33.51,</span></span><br><span class="line"><span class="comment">--                 &quot;y&quot;: 237.42</span></span><br><span class="line"><span class="comment">--             &#125;,</span></span><br><span class="line"><span class="comment">--             &quot;bottomLeft&quot;: &#123;</span></span><br><span class="line"><span class="comment">--                 &quot;x&quot;: 33.51,</span></span><br><span class="line"><span class="comment">--                 &quot;y&quot;: 177.68</span></span><br><span class="line"><span class="comment">--             &#125;</span></span><br><span class="line"><span class="comment">--         &#125;</span></span><br><span class="line"><span class="comment">--     &#125;</span></span><br><span class="line"><span class="comment">-- &#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="appInfo-appidentifier"><a href="#appInfo-appidentifier" class="headerlink" title="appInfo(appidentifier)"></a>appInfo(appidentifier)</h5><blockquote>
<p>Get the speficied App’s displayName,executablePath,bundleContainerPath,dataContainerPath</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> result = appInfo(<span class="string">&quot;com.apple.mobilesafari&quot;</span>)</span><br><span class="line">alert(<span class="built_in">table</span>.<span class="built_in">tostring</span>(result))</span><br></pre></td></tr></table></figure>

<h5 id="setTimer-scriptPath-fireTime-repeat-interval"><a href="#setTimer-scriptPath-fireTime-repeat-interval" class="headerlink" title="setTimer(scriptPath, fireTime, repeat, interval)"></a>setTimer(scriptPath, fireTime, repeat, interval)</h5><blockquote>
<p>Set timer for a script</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- trigger after 1000 seconds</span></span><br><span class="line"><span class="keyword">local</span> done = setTimer(<span class="string">&quot;Records/test.lua&quot;</span>, <span class="number">1000</span>, <span class="literal">false</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">-- Equals to</span></span><br><span class="line">const done = at.setTimer(<span class="string">&quot;/var/mobile/Library/AutoTouch/Scripts/Records/test.lua&quot;</span>, <span class="number">1000</span>, <span class="literal">false</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- trigger at 2019-09-17 08:12:52 and repeat every 10000 seconds</span></span><br><span class="line"><span class="keyword">local</span> done = setTimer(<span class="string">&quot;Records/test.lua&quot;</span>, <span class="string">&quot;2019-09-17 08:12:52&quot;</span>, <span class="literal">true</span>, <span class="number">10000</span>);</span><br></pre></td></tr></table></figure>

<h5 id="removeTimer-scriptPath"><a href="#removeTimer-scriptPath" class="headerlink" title="removeTimer(scriptPath)"></a>removeTimer(scriptPath)</h5><blockquote>
<p>Remove timer of a script</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> done = removeTimer(<span class="string">&quot;/Records/test.lua&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="keepAutoTouchAwake-keepAwake"><a href="#keepAutoTouchAwake-keepAwake" class="headerlink" title="keepAutoTouchAwake(keepAwake)"></a>keepAutoTouchAwake(keepAwake)</h5><blockquote>
<p>Keep AutoTouch awake aginst iOS idle sleep</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">keepAutoTouchAwake(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>



<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> socket = <span class="built_in">require</span>(<span class="string">&quot;socket&quot;</span>)</span><br><span class="line"><span class="comment">-- 获取时间戳</span></span><br><span class="line"><span class="built_in">log</span>(<span class="built_in">os</span>.<span class="built_in">time</span>())        <span class="comment">-- 1632985348</span></span><br><span class="line"><span class="built_in">log</span>(socket.gettime()) <span class="comment">-- 1632985348.2712</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span><span class="params">(n)</span></span></span><br><span class="line">   socket.<span class="built_in">select</span>(<span class="literal">nil</span>, <span class="literal">nil</span>, n)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 休眠0.1秒</span></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">usleep(<span class="number">100000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>













<p><a href="http://www.lua.org/manual/5.3/">Lua Official Reference Manual</a></p>
]]></content>
  </entry>
  <entry>
    <title>Core Audio</title>
    <url>/2021/08/06/Core-Audio/</url>
    <content><![CDATA[<h4 id="Core-Audio"><a href="#Core-Audio" class="headerlink" title="Core Audio"></a>Core Audio</h4><p>Core Audio 结构分层（<a href="https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/CoreAudioOverview/CoreAudioEssentials/CoreAudioEssentials.html#//apple_ref/doc/uid/TP40003577-CH10-SW1">官方文档</a>）</p>
<img src="API Architectural Layers.png" alt="Architectural Layers"/>

<ul>
<li>Low-Level Services：底层跟硬件打交道</li>
</ul>
<p>I/O Kit：与硬件驱动交互<br>Audio HAL：音频硬件抽象层，使API调用与实际硬件相分离<br>Core MIDI：提供与MIDI（乐器数字接口）设备（包括硬件键盘和合成器）进行通信的API<br>Host Time Services：访问硬件时钟</p>
<ul>
<li>Mid-Level Services：Core Audio 中的中间层包括用于数据格式转换、读写磁盘、解析流和使用插件的服务</li>
</ul>
<p>Audio Convert Services：负责音频数据格式的转换<br>Audio File Services：负责音频数据读写<br>Audio Unit Services 和 Audio Processing Graph Services 使应用程序可以使用数字信号处理（DSP）插件，例如均衡器和混频器<br>Core Audio Clock Services：用于音频和MIDI同步以及时间格式管理<br>Audio File Stream Services：创建可以解析流的应用程序，负责流解析，对音频进行解码</p>
<ul>
<li>High-Level Services</li>
</ul>
<p>AVAudioPlayer：高级接口，可以完成整个音频播放的过程<br>Audio Queue Services：录制、播放、暂停、循环、同步音频<br>Extended Audio File Services：Audio File Services 和 Audio Converter services的结合体<br>OpenAL：游戏音频</p>
<h4 id="Audio-Session"><a href="#Audio-Session" class="headerlink" title="Audio Session"></a>Audio Session</h4><p><a href="https://links.jianshu.com/go?to=https://developer.apple.com/library/archive/documentation/Audio/Conceptual/AudioSessionProgrammingGuide/Introduction/Introduction.html%23//apple_ref/doc/uid/TP40007875-CH1-SW1">官方文档 Audio Session Programming Guide</a></p>
<img src="Audio Session.png" alt="Audio Session" style="zoom:60%;" />

<p>可以使用 AVAudioSession 实例与应用程序的音频会话进行交互</p>
<ul>
<li>配置音频会话的类别和模式，告诉系统如何使用音频</li>
<li>激活音频会话使设置的类别和模式使设置生效</li>
<li>订阅并响应音频会话通知，例如音频中断和路由更改</li>
<li>执行高级别的音频设备配置，例如采样率，I/O缓冲持续时间和通道数</li>
</ul>
<h5 id="配置-Audio-Session"><a href="#配置-Audio-Session" class="headerlink" title="配置 Audio Session"></a>配置 Audio Session</h5><p>Audio Session 默认行为</p>
<ul>
<li>支持音频播放，但不允许录音</li>
<li>iOS中，将”铃声/静音”开关设置为静音模式会使应用播放的任何音频静音</li>
<li>iOS中，将设备锁定时，应用程序的音频将静音</li>
<li>当你的应用播放音频时，其他任何背景音频（如音乐应用正在播放的音频）都将静音</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let session &#x3D; AVAudioSession.sharedInstance()</span><br><span class="line">do &#123;</span><br><span class="line">    try session.setCategory(.playback, mode: .moviePlayback, options: [])</span><br><span class="line">&#125; catch let error as NSError &#123;</span><br><span class="line">    print(&quot;Failed to set the audio session category and mode: \(error.localizedDescription)&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Category 设置音频的基本行为，可以通过设置 Mode 进一步设置这些行为</p>
<p>例如：IP电话（VoIP）Category设置为 AVAudioSessionCategoryPlayAndRecord，Mode 设置为 AVAudioSessionModeVoiceChat 此模式可确保通过系统提供的信号处理来优化语音信号</p>
<p>某些Category通过会话上设置一个或多个Category选项来支持覆盖默认行为，如AVAudioSessionCategoryPlayback 类别的默认行为会在激活会话时中断其他系统音频，如果您希望音频与其他系统音频混合，则可以通过 AVAudioSessionCategoryOptionMixWithOthers 在会话上设置选项来覆盖此行为</p>
<img src="Category behavior.jpg" alt="Category behavior"/>

<p>大多数应用在启动时只需要设置一次Category，但可以根据需要更改Category，可以在音频会话处于激活状态进行更改，最好在更改Category或者其他会话属性前停用音频会话，停用会话的同时进行这些更改可以防止音频系统不必要的重新配置</p>
<img src="AudioSession mode.png" alt="AudioSession mode"/>

<h6 id="Multiroute-Category"><a href="#Multiroute-Category" class="headerlink" title="Multiroute Category"></a>Multiroute Category</h6><p>多路由Category使应用程序可以使用所有连接的输出端口，而不仅仅使用最后的使用端口</p>
<p>例如，你正在通过HDMI输出路径收听音频并插入耳机，则你的应用将继续通过HDMI输出路径输出音频，同时还通过耳机播放音频</p>
<p>还可以将不同的音频流发送到不同的输出路由，例如，应用可以将一个音频发送到左耳机，将另一个音频发送到右耳机，将第三个音频流发送到HDMI路由</p>
<img src="multiroute.png" alt="multiroute" style="zoom:50%;" />

<p>有效输出路径组合</p>
<ul>
<li>USB和耳机</li>
<li>HDMI和耳机</li>
<li>LineOut和耳机</li>
</ul>
<p>注：仅当未连接任何其他输出端口（USB，HDMI，LineOut）时，才可以使用内置扬声器</p>
<h6 id="选择AirPlay的Category和mode"><a href="#选择AirPlay的Category和mode" class="headerlink" title="选择AirPlay的Category和mode"></a>选择AirPlay的Category和mode</h6><p>仅特定Category和mode支持AirPlay，以下类别通知支持AirPlay的镜像和非镜像版本</p>
<ul>
<li>AVAudioSessionCategorySoloAmbient</li>
<li>AVAudioSessionCategoryAmbient</li>
<li>AVAudioSessionCategoryPlayback<br>AVAudioSessionCategoryPlayAndRecord 类别和以下mode仅支持AirPlay镜像版本</li>
<li>AVAudioSessionModeDefault</li>
<li>AVAudioSessionModeVideoChat</li>
<li>AVAudioSessionModeGameChat</li>
</ul>
<p>注：从 iOS 10 开始，您可以在使用 AVAudioSessionCategoryPlayAndRecord 类别时通过使用 AVAudioSessionCategoryOptionAllowAirPlay 选项激活会话来启用 AirPlay 输出</p>
<h6 id="背景音频"><a href="#背景音频" class="headerlink" title="背景音频"></a>背景音频</h6><p>Capabilities 打开 Background Modes 的 Audio,AirPlay,and Picture in Picture</p>
<h5 id="激活-Audio-Session"><a href="#激活-Audio-Session" class="headerlink" title="激活 Audio Session"></a>激活 Audio Session</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let session &#x3D; AVAudioSession.sharedInstance()</span><br><span class="line">do &#123;</span><br><span class="line">    &#x2F;&#x2F; 1) Configure your audio session category, options, and mode</span><br><span class="line">    &#x2F;&#x2F; 2) Activate your audio session to enable your custom configuration</span><br><span class="line">    try session.setActive(true, options: [])</span><br><span class="line">&#125; catch let error as NSError &#123;</span><br><span class="line">    print(&quot;Unable to activate audio session:  \(error.localizedDescription)&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用AVFoundation对象（AVPlayer，AVAudioRecoder）播放或录制音频时，系统会在中断结束时重新激活音频会话，但是如果注册了通知消息并显式重新激活音频会话，则可以验证重新激活成功，还可以更新应用程序的状态和用户界面</p>
<h6 id="检测是否正在播放其他音频"><a href="#检测是否正在播放其他音频" class="headerlink" title="检测是否正在播放其他音频"></a>检测是否正在播放其他音频</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func setupNotification() &#123;</span><br><span class="line">    NotificationCenter.default.addObserver(self,</span><br><span class="line">             selector: #selector(handleSecondaryAudio(notification:)),</span><br><span class="line">             name: AVAudioSession.silenceSecondaryAudioHintNotification,</span><br><span class="line">             object: AVAudioSession.sharedInstance())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@objc func handleSecondaryAudio(notification: Notification) &#123;</span><br><span class="line">    guard let userinfo &#x3D; notification.userInfo ,</span><br><span class="line">    let typeValue &#x3D; userinfo[AVAudioSessionSilenceSecondaryAudioHintTypeKey] as? UInt,</span><br><span class="line">    let type &#x3D; AVAudioSession.SilenceSecondaryAudioHintType(rawValue: typeValue) else &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    if type &#x3D;&#x3D; .begin &#123;</span><br><span class="line">        &#x2F;&#x2F;其他应用音频开始播放 - 将辅助音频静音</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;其他应用音频停止播放 - 重新启动辅助音频</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="响应中断"><a href="#响应中断" class="headerlink" title="响应中断"></a>响应中断</h6><p>你的应用程序可能会中断后暂停，当发生接听电话时，系统会发出中断结束消息，你的应用将继续运行，要恢复音频，必须重新激活音频会话</p>
<img src="Interruption.png" alt="Interruption" style="zoom:60%;" />

<ol>
<li>应用处于活跃状态，正在播放音频</li>
<li>FaceTime请求到达，系统激活FaceTime的音频会话</li>
<li>系统将停用你的音频会话，此时你的应用播放停止</li>
<li>系统发布通知，通知你的会话已被停用</li>
<li>你的应用处理通知，如更新界面保存停止播放点继续播放所需的信息</li>
<li>如果用户取消中断（忽略FaceTime请求），系统发送通知我们应用中断结束</li>
<li>你的应用处理中断结束操作，如更新界面重新激活音频会话并恢复播放</li>
<li>如果没有6的中断，而是接听了电话，你的应用将被暂停</li>
</ol>
<ul>
<li>音频中断处理<br>中断开始后：保存状态和上下文，更新用户界面<br>中断结束后：恢复状态和上下文，更新用户界面，重新激活音频会话</li>
</ul>
<ul>
<li>观察音频中断 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func registerForNotification() &#123;</span><br><span class="line">    NotificationCenter.default.addObserver(self, selector: #selector(handleInterruption(notification:)),</span><br><span class="line">                                           name: AVAudioSession.interruptionNotification,</span><br><span class="line">                                           object: AVAudioSession.sharedInstance())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@objc func handleInterruption(notification: Notification) &#123;</span><br><span class="line">    guard let userinfo &#x3D; notification.userInfo,</span><br><span class="line">          let typeValue &#x3D; userinfo[AVAudioSessionInterruptionTypeKey] as? UInt,</span><br><span class="line">          let type &#x3D; AVAudioSession.InterruptionType(rawValue: typeValue) else &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    if type &#x3D;&#x3D; .began &#123;</span><br><span class="line">        &#x2F;&#x2F;中断开始 采取适当措施（保存状态更新界面）</span><br><span class="line">    &#125; else if type &#x3D;&#x3D; .ended &#123;</span><br><span class="line">        guard let optionsValue &#x3D; userinfo[AVAudioSessionInterruptionOptionKey] as? UInt else &#123;</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        let options &#x3D; AVAudioSession.InterruptionOptions(rawValue: optionsValue)</span><br><span class="line">        if options.contains(.shouldResume) &#123;</span><br><span class="line">            &#x2F;&#x2F;中断结束 恢复播放</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="响应路由变更"><a href="#响应路由变更" class="headerlink" title="响应路由变更"></a>响应路由变更</h6><p>当用户插入或拔出耳机时，系统会自动更改音频硬件路由</p>
<img src="routechange.png" alt="routechange" style="zoom:60%;" />

<p>你的应用启动后，系统会首先确定音频路由，应用运行时，它将继续监听活动路由</p>
<p>录制期间，用户可以插入和拔出耳机，作为响应，系统发送包含更改原因和先前路由的路由更改通知，应用停止录制</p>
<ul>
<li>观察音频路由变更</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func setupNotification() &#123;</span><br><span class="line">    NotificationCenter.default.addObserver(self, </span><br><span class="line">         selector: #selector(handleRouteChange(notification:)),</span><br><span class="line">         name: AVAudioSession.routeChangeNotification,</span><br><span class="line">         object: AVAudioSession.sharedInstance())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@objc func handleRouteChange(notification: Notification) &#123;</span><br><span class="line">    guard let userinfo &#x3D; notification.userInfo,</span><br><span class="line">          let reasonValue &#x3D; userinfo[AVAudioSessionRouteChangeReasonKey] as? UInt,</span><br><span class="line">          let reason &#x3D; AVAudioSession.RouteChangeReason(rawValue: reasonValue) else &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    switch reason &#123;</span><br><span class="line">    case .newDeviceAvailable:</span><br><span class="line">        print(&quot;处理可用新设备&quot;)</span><br><span class="line">        let session &#x3D; AVAudioSession.sharedInstance()</span><br><span class="line">        for output in session.currentRoute.outputs where output.portType &#x3D;&#x3D; AVAudioSessionPortHeadphones &#123;</span><br><span class="line">            &#x2F;&#x2F;耳机连接true</span><br><span class="line">            headphonesConnected &#x3D; true</span><br><span class="line">        &#125;</span><br><span class="line">    case .oldDeviceUnavailable:</span><br><span class="line">        print(&quot;处理旧设备&quot;)</span><br><span class="line">        if let previousRoute &#x3D;</span><br><span class="line">            userInfo[AVAudioSessionRouteChangePreviousRouteKey] as? AVAudioSessionRouteDescription &#123;</span><br><span class="line">            for output in previousRoute.outputs where output.portType &#x3D;&#x3D; AVAudioSessionPortHeadphones &#123;</span><br><span class="line">                &#x2F;&#x2F;耳机连接false</span><br><span class="line">                headphonesConnected &#x3D; false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    default:</span><br><span class="line">        ()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当有新设备时，可以查询音频会话currentRoute属性，返回AVAudioSessionRouteDescription对象，其中列出了音频会话的所有输入和输出</p>
<p>如果路由更改原因是原因 AVAudioSessionRouteChangeReasonOldDeviceUnavailable ，则媒体播放应用应暂停播放，但如果原因是，则不应暂停播放 AVAudioSessionRouteChangeReasonOverride</p>
<p>配置设备硬件</p>
<table>
<thead>
<tr>
<th>设置</th>
<th align="center">首选采样率</th>
<th align="left">首选I/O缓冲区持续时间</th>
</tr>
</thead>
<tbody><tr>
<td>High value</td>
<td align="center">示例：48Hz +高音质 -大文件或缓冲区大小</td>
<td align="left">示例：500ms +较少的文件访问 -更长的延迟</td>
</tr>
<tr>
<td>Low value</td>
<td align="center">示例：8Hz +大文件或缓冲区大小 -低音频质量</td>
<td align="left">示例：5ms +低延迟 -频繁的文件访问</td>
</tr>
</tbody></table>
<p>如果音频质量在你应用中非常重要，并且文件或缓冲区的大小不是主要问题，则可以指定高采样率的首选项</p>
<p>默认音频I/O缓存持续时间（44.1kHz约0.02s）为大多数应用提供了足够的响应速度，可以对延迟有严格要求的应用（如现场乐器监控）设置较低的I/O持续时间，但对大多数应用，无需修改此设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Category and mode</span><br><span class="line">let session &#x3D; AVAudioSession.sharedInstance()</span><br><span class="line">do &#123;</span><br><span class="line">    try session.setCategory(.record, mode: .default, options: [])</span><br><span class="line">&#125; catch &#123;</span><br><span class="line">    print(&quot;Unable to set Category: \(error.localizedDescription)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Set preferred sample rate</span><br><span class="line">do &#123;</span><br><span class="line">    try session.setPreferredSampleRate(44_100)</span><br><span class="line">&#125; catch &#123;</span><br><span class="line">    print(&quot;Unable to set preferred sample rate \(error.localizedDescription)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Set preferred I&#x2F;O buffer duration</span><br><span class="line">do &#123;</span><br><span class="line">    try session.setPreferredIOBufferDuration(0.005)</span><br><span class="line">&#125; catch &#123;</span><br><span class="line">    print(&quot;Unable to set preferred I&#x2F;O bufferr duration \(error.localizedDescription)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Active the audio session</span><br><span class="line">do &#123;</span><br><span class="line">    try session.setActive(true)</span><br><span class="line">&#125; catch &#123;</span><br><span class="line">    print(&quot;Unable to active session \(error.localizedDescription)&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="选择和配置麦克风"><a href="#选择和配置麦克风" class="headerlink" title="选择和配置麦克风"></a>选择和配置麦克风</h6><ul>
<li>设置首选输入 Setting a Preferred Input<br>要发现内置或已连接的输入端口，使用音频会话的<code>availableInputs</code>属性，返回一个<code>AVAudioSessionPortDescription</code>对象数组，这些对象描述设备的可用输入端口，可用通过端口<code>protType</code>属性标识端口，要设置首选输入端口（内置麦克风，有线麦克风，USB输入等）使用音频会话的<code>setPreferredInput:error:</code>方法</li>
<li>设置首选数据源 Setting a Preferred Data Source<br>某些端口（如内置麦克风和某些USB附件）支持数据源，可用通过查询端口描述的<code>DataSource</code>属性发现可用数据源。<br>对于内置麦克风，返回的数据源描述对象代表每个单独的麦克风，不同设备的内置麦克风返回不同的值。如<code>iPhone4</code>和<code>iPhone4s</code>有两个麦克风：底部和顶部<br>可通过数据源描述的<code>location</code>属性（上部下部）和<code>orientation</code>属性（正面背面）的组合来标识各个内置麦克风，使用<code>setPreferredDataSource:error:</code>方法设置首选数据源<code>AVAudioSessionPortDescription</code></li>
<li>设置首选极性模式 Setting a Preferred Polar Pattern<br>某些iOS设备支持为某些内置麦克风配置麦克风极性模式，麦克风的极性模式定义了其对声音相对于声源方向的灵敏度<br><code>supportedPolarPatterns</code>数据源描述对象的属性返回可用模式。此属性返回数据源支持的极性图案的数组，例如心形或全向，或者<code>nil</code>在没有可用的可选图案时返回。如果数据源具有许多受支持的极性图案，则可以使用数据源描述的<code>[setPreferredPolarPattern:error:</code>方法来设置首选的极性图案</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Preferred Mic &#x3D; Front, Preferred Polar Pattern &#x3D; Cardioid</span><br><span class="line">let preferredMicOrientation &#x3D; AVAudioSession.Orientation.front</span><br><span class="line">let preferredPolarPattern   &#x3D; AVAudioSession.PolarPattern.cardioid</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Retrieve your configured and activated audio session</span><br><span class="line">let session &#x3D; AVAudioSession.sharedInstance()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Get available inputs</span><br><span class="line">guard let inputs &#x3D; session.availableInputs else &#123; return &#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; Find built-in mic</span><br><span class="line">guard let builtInMic &#x3D; inputs.first(where: &#123;</span><br><span class="line">    $0.portType &#x3D;&#x3D; AVAudioSession.Port.builtInMic</span><br><span class="line">&#125;) else &#123; return &#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; Find the data source at the specified orientation</span><br><span class="line">guard let dataSource &#x3D; builtInMic.dataSources?.first (where: &#123;</span><br><span class="line">    $0.orientation &#x3D;&#x3D; preferredMicOrientation</span><br><span class="line">&#125;) else &#123; return &#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; Set data source&#39;s polar pattern</span><br><span class="line">do &#123;</span><br><span class="line">    try dataSource.setPreferredPolarPattern(preferredPolarPattern)</span><br><span class="line">&#125; catch let error as NSError &#123;</span><br><span class="line">    print(&quot;Unable to preferred polar pattern: \(error.localizedDescription)&quot;)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; Set the data source as the input&#39;s preferred data source</span><br><span class="line">do &#123;</span><br><span class="line">    try builtInMic.setPreferredDataSource(dataSource)</span><br><span class="line">&#125; catch let error as NSError &#123;</span><br><span class="line">    print(&quot;Unable to preferred dataSource: \(error.localizedDescription)&quot;)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; Set the built-in mic as the preferred input</span><br><span class="line">&#x2F;&#x2F; This call will be a no-op if already selected</span><br><span class="line">do &#123;</span><br><span class="line">    try session.setPreferredInput(builtInMic)</span><br><span class="line">&#125; catch let error as NSError &#123;</span><br><span class="line">    print(&quot;Unable to preferred input: \(error.localizedDescription)&quot;)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; Print Active Configuration</span><br><span class="line">session.currentRoute.inputs.forEach &#123; portDesc in</span><br><span class="line">    print(&quot;Port: \(portDesc.portType)&quot;)</span><br><span class="line">    if let ds &#x3D; portDesc.selectedDataSource &#123;</span><br><span class="line">        print(&quot;Name: \(ds.dataSourceName)&quot;)</span><br><span class="line">        print(&quot;Polar Pattern: \(ds.selectedPolarPattern) ?? [None]&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="保护隐私"><a href="#保护隐私" class="headerlink" title="保护隐私"></a>保护隐私</h5><p>录制音频前询问并获得用户许可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AVAudioSession.sharedInstance().requestRecordPermission &#123; granted in</span><br><span class="line">    if granted &#123;</span><br><span class="line">        &#x2F;&#x2F; User granted access. Present recording interface.</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; Present message to user indicating that recording</span><br><span class="line">        &#x2F;&#x2F; can&#39;t be performed until they change their preference</span><br><span class="line">        &#x2F;&#x2F; under Settings -&gt; Privacy -&gt; Microphone</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问麦克风 Info.plist 添加 NSMicrophoneUsageDescription </p>
]]></content>
  </entry>
  <entry>
    <title>Dart</title>
    <url>/2022/02/09/Dart/</url>
    <content><![CDATA[<h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><ul>
<li>Hello Dart</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main标准写法</span></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dart中void类型，作为函数返回值类型可以省略</span></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Hello World!&#x27;</span>);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果函数内部只有一个表达式，可以省略大括号，使用&quot;=&gt;&quot;箭头函数; </span></span><br><span class="line"><span class="keyword">void</span> main() =&gt; <span class="built_in">print</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line"><span class="comment">//最简写形式</span></span><br><span class="line">main() =&gt; <span class="built_in">print</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="二-数据类型"><a href="#二-数据类型" class="headerlink" title="二. 数据类型"></a>二. 数据类型</h4><h5 id="1-布尔类型-bool"><a href="#1-布尔类型-bool" class="headerlink" title="1. 布尔类型 bool"></a>1. 布尔类型 bool</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span> isClosed = <span class="keyword">true</span>;</span><br><span class="line"><span class="built_in">bool</span> isOpened = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure>

<h5 id="2-数字类型-num、int、double"><a href="#2-数字类型-num、int、double" class="headerlink" title="2. 数字类型 num、int、double"></a>2. 数字类型 num、int、double</h5><p>flutter 中 num、int、double 都是类，int、double 都继承 num 抽象类</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">double</span> pi = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="built_in">int</span> width = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">int</span> height = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">print</span>(width / height);  <span class="comment">//1.3333333</span></span><br><span class="line"><span class="built_in">print</span>(width ~/ height); <span class="comment">//1 整除</span></span><br></pre></td></tr></table></figure>

<p>dart 一些数字常用函数</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3.141592653</span>.toStringAsFixed(<span class="number">3</span>)); <span class="comment">//3.142 保留有效数字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">6.6</span>.floor());<span class="comment">//6向下取整</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">-6.6</span>).ceil()); <span class="comment">//-6 向上取整</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">9.9</span>.ceil()); <span class="comment">//10 向上取整</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">666.6</span>.round()); <span class="comment">//667 四舍五入</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">-666.6</span>).abs()); <span class="comment">// 666.6 取绝对值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">666.6</span>.toInt()); <span class="comment">//666 转化成int,这中toInt、toDouble和Kotlin类似</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">999.</span>isEven); <span class="comment">//false 是否是偶数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">999.</span>isOdd); <span class="comment">//true 是否是奇数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">666.6</span>.toString()); <span class="comment">//666.6 转化成字符串</span></span><br></pre></td></tr></table></figure>

<h5 id="3-字符串-String"><a href="#3-字符串-String" class="headerlink" title="3. 字符串 String"></a>3. 字符串 String</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> name = <span class="string">&#x27;Hello Dart!&#x27;</span>;<span class="comment">//单引号</span></span><br><span class="line"><span class="built_in">String</span> title = <span class="string">&quot;&#x27;Hello Dart!&#x27;&quot;</span>;<span class="comment">//双引号</span></span><br><span class="line"><span class="built_in">String</span> description = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">      Hello Dart! Hello Dart!</span></span><br><span class="line"><span class="string">      Hello Dart!</span></span><br><span class="line"><span class="string">      Hello Dart! Hello Dart!</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>;<span class="comment">//三引号</span></span><br><span class="line"><span class="built_in">num</span> value = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">String</span> result = <span class="string">&quot;The result is <span class="subst">$value</span>&quot;</span>;<span class="comment">//单值引用</span></span><br><span class="line"><span class="built_in">num</span> width = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">num</span> height = <span class="number">300</span>;</span><br><span class="line"><span class="built_in">String</span> square = <span class="string">&quot;The square is <span class="subst">$&#123;width * height&#125;</span>&quot;</span>;<span class="comment">//表达式的值引用</span></span><br></pre></td></tr></table></figure>

<p>字符串操作方法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> url = <span class="string">&quot;https://mrale.ph/dartvm/&quot;</span>;</span><br><span class="line"><span class="built_in">print</span>(url.split(<span class="string">&quot;://&quot;</span>)[<span class="number">0</span>]); <span class="comment">//字符串分割split方法，https</span></span><br><span class="line"><span class="built_in">print</span>(url.substring(<span class="number">3</span>, <span class="number">9</span>)); <span class="comment">//字符串截取substring方法，ps://m</span></span><br><span class="line"><span class="built_in">print</span>(url.codeUnitAt(<span class="number">0</span>)); <span class="comment">//取当前索引位置字符的UTF-16码，104</span></span><br><span class="line"><span class="built_in">print</span>(url.startsWith(<span class="string">&quot;https&quot;</span>)); <span class="comment">//当前字符串是否以指定字符开头，true</span></span><br><span class="line"><span class="built_in">print</span>(url.endsWith(<span class="string">&quot;/&quot;</span>)); <span class="comment">//当前字符串是否以指定字符结尾，true</span></span><br><span class="line"><span class="built_in">print</span>(url.toUpperCase()); <span class="comment">//大写</span></span><br><span class="line"><span class="built_in">print</span>(url.toLowerCase()); <span class="comment">//小写</span></span><br><span class="line"><span class="built_in">print</span>(url.indexOf(<span class="string">&quot;ph&quot;</span>)); <span class="comment">//获取指定字符的索引位置，14</span></span><br><span class="line"><span class="built_in">print</span>(url.contains(<span class="string">&quot;http&quot;</span>)); <span class="comment">//字符串是否包含指定字符，true</span></span><br><span class="line"><span class="built_in">print</span>(url.trim()); <span class="comment">//去除字符串的首尾空格</span></span><br><span class="line"><span class="built_in">print</span>(url.length); <span class="comment">//获取字符串长度，24</span></span><br><span class="line"><span class="built_in">print</span>(url.replaceFirst(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;A&quot;</span>)); <span class="comment">//替换第一次出现t字符位置的字符</span></span><br><span class="line"><span class="built_in">print</span>(url.replaceAll(<span class="string">&quot;m&quot;</span>, <span class="string">&quot;M&quot;</span>)); <span class="comment">//全部替换</span></span><br></pre></td></tr></table></figure>

<h5 id="4-类型检查和强制类型转换-as"><a href="#4-类型检查和强制类型转换-as" class="headerlink" title="4. 类型检查和强制类型转换 as"></a>4. 类型检查和强制类型转换 as</h5><p>通过 is 关键字来对类型进行检查 as 关键字对类型进行强制转换，判断不是某个类型使用 is！</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> number = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">double</span> distance = <span class="number">200.5</span>;</span><br><span class="line"><span class="built_in">num</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">print</span>(number <span class="keyword">is</span> <span class="built_in">num</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">print</span>(distance <span class="keyword">is</span>! <span class="built_in">int</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">print</span>(age <span class="keyword">as</span> <span class="built_in">int</span>);<span class="comment">//18</span></span><br></pre></td></tr></table></figure>

<h5 id="5-Object-类型"><a href="#5-Object-类型" class="headerlink" title="5. Object 类型"></a>5. Object 类型</h5><p>dart 中所有东西都是对象，都继承于 object，可以使用 object 定义任何的变量，赋值后类型可以更改</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span> color = <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line">color = <span class="number">0xff000000</span>;<span class="comment">//运行正常，0xff000000类型是int, int也继承于Object   </span></span><br></pre></td></tr></table></figure>

<h5 id="6-dynamic-类型"><a href="#6-dynamic-类型" class="headerlink" title="6. dynamic 类型"></a>6. dynamic 类型</h5><p>一般用于无法确定具体类型，不要滥用 dynamic，一般尽量使用 object</p>
<p>object 和 dynamic 区别：object 会在编译阶段检查类型，dynamic 不会</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dynamic</span> color = <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line">color = <span class="number">0xff000000</span>;<span class="comment">//运行正常，0xff000000类型是int, int也继承于Object</span></span><br></pre></td></tr></table></figure>

<h4 id="三-变量和常量"><a href="#三-变量和常量" class="headerlink" title="三. 变量和常量"></a>三. 变量和常量</h4><h5 id="1-var-关键字"><a href="#1-var-关键字" class="headerlink" title="1. var 关键字"></a>1. var 关键字</h5><p>dart 中可以使用 var 来替代具体类型的声明，会自动推导变量的类型</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> colorValue = <span class="number">0xff000000</span>;</span><br><span class="line"><span class="keyword">var</span> colorKey = <span class="string">&#x27;black&#x27;</span>; <span class="comment">//var声明变量 自动根据赋值的类型，推导为String类型 </span></span><br><span class="line"><span class="comment">// 使用var声明集合变量 </span></span><br><span class="line"><span class="keyword">var</span> colorList = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> colorSet = &#123;<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> colorMap = &#123;<span class="string">&#x27;white&#x27;</span>: <span class="number">0xffffffff</span>, <span class="string">&#x27;black&#x27;</span>: <span class="number">0xff000000</span>&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="2-常量（final和const）"><a href="#2-常量（final和const）" class="headerlink" title="2. 常量（final和const）"></a>2. 常量（final和const）</h5><p>声明常量可以使用 final 或 const，区别：如果常量是编译期就能初始化的用 const，如果常量是运行时期初始化的就用 final</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.141592653</span>;<span class="comment">//const定义常量    </span></span><br><span class="line"><span class="keyword">final</span> nowTime = <span class="built_in">DateTime</span>.now();<span class="comment">//final定义常量</span></span><br></pre></td></tr></table></figure>

<h4 id="四-集合-List、Set、Map"><a href="#四-集合-List、Set、Map" class="headerlink" title="四. 集合 List、Set、Map"></a>四. 集合 List、Set、Map</h4><h5 id="1-集合-List"><a href="#1-集合-List" class="headerlink" title="1. 集合 List"></a>1. 集合 List</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; colorList = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];<span class="comment">//直接使用[]形式初始化       </span></span><br><span class="line"><span class="keyword">var</span> colorList = &lt;<span class="built_in">String</span>&gt; [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];   </span><br></pre></td></tr></table></figure>

<p>常用函数</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; colorList = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];       </span><br><span class="line">colorList.add(<span class="string">&#x27;white&#x27;</span>); <span class="comment">//通过add添加一个新的元素       </span></span><br><span class="line"><span class="built_in">print</span>(colorList[<span class="number">2</span>]); <span class="comment">//直接使用数组下标形式访问元素       </span></span><br><span class="line"><span class="built_in">print</span>(colorList.length);<span class="comment">//获取集合的长度    </span></span><br><span class="line">colorList.insert(<span class="number">1</span>, <span class="string">&#x27;black&#x27;</span>);<span class="comment">//在集合指定index位置插入指定的元素       </span></span><br><span class="line">colorList.removeAt(<span class="number">2</span>);<span class="comment">//移除集合指定的index=2的元素，第3个元素       </span></span><br><span class="line">colorList.clear();<span class="comment">//清除所有元素       </span></span><br><span class="line"><span class="built_in">print</span>(colorList.sublist(<span class="number">1</span>,<span class="number">3</span>));<span class="comment">//截取子集合       </span></span><br><span class="line"><span class="built_in">print</span>(colorList.getRange(<span class="number">1</span>, <span class="number">3</span>));<span class="comment">//获取集合中某个范围元素       </span></span><br><span class="line"><span class="built_in">print</span>(colorList.join(<span class="string">&#x27;&lt;---&gt;&#x27;</span>));<span class="comment">//输出: red&lt;---&gt;yellow&lt;---&gt;blue&lt;---&gt;green       </span></span><br><span class="line"><span class="built_in">print</span>(colorList.isEmpty);       </span><br><span class="line"><span class="built_in">print</span>(colorList.contains(<span class="string">&#x27;green&#x27;</span>));  </span><br></pre></td></tr></table></figure>

<p>遍历</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; colorList = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];<span class="comment">//for-i遍历       </span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; colorList.length; i++) &#123;<span class="comment">//可以使用var或int           </span></span><br><span class="line">     <span class="built_in">print</span>(colorList[i]);               </span><br><span class="line"> &#125;       </span><br><span class="line"><span class="comment">//forEach遍历       </span></span><br><span class="line"><span class="comment">//forEach的参数为Function. =&gt;使用了箭头函数</span></span><br><span class="line">colorList.forEach((color) =&gt; <span class="built_in">print</span>(color));       </span><br><span class="line"><span class="comment">//for-in遍历       </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> color <span class="keyword">in</span> colorList) &#123;</span><br><span class="line">    <span class="built_in">print</span>(color);       </span><br><span class="line">&#125;       </span><br><span class="line"><span class="comment">//while+iterator迭代器遍历，类似Java中的iteator       </span></span><br><span class="line"><span class="keyword">while</span>(colorList.iterator.moveNext()) &#123;           </span><br><span class="line">    <span class="built_in">print</span>(colorList.iterator.current);       </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<h5 id="2-集合-Set"><a href="#2-集合-Set" class="headerlink" title="2. 集合 Set"></a>2. 集合 Set</h5><p>集合中元素不能重复，添加重复元素时会返回 false，表示添加不成功</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; colorSet= &#123;<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>&#125;;<span class="comment">//直接使用&#123;&#125;形式初始化       </span></span><br><span class="line"><span class="keyword">var</span> colorList = &lt;<span class="built_in">String</span>&gt; &#123;<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>&#125;; </span><br></pre></td></tr></table></figure>

<p>集合中的交、并、补集</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colorSet1 = &#123;<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>&#125;;       </span><br><span class="line"><span class="keyword">var</span> colorSet2 = &#123;<span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;white&#x27;</span>&#125;;       </span><br><span class="line"><span class="built_in">print</span>(colorSet1.intersection(colorSet2));<span class="comment">//交集--&gt;输出: &#123;&#x27;yellow&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;&#125;       </span></span><br><span class="line"><span class="built_in">print</span>(colorSet1.union(colorSet2));<span class="comment">//并集---&gt;输出: &#123;&#x27;black&#x27;, &#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;white&#x27;&#125;       </span></span><br><span class="line"><span class="built_in">print</span>(colorSet1.difference(colorSet2));<span class="comment">//补集---&gt;输出: &#123;&#x27;red&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p>Set 的遍历方式和 List 一样</p>
<h5 id="3-集合-Map"><a href="#3-集合-Map" class="headerlink" title="3. 集合 Map"></a>3. 集合 Map</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">int</span>&gt; colorMap = &#123;<span class="string">&#x27;white&#x27;</span>: <span class="number">0xffffffff</span>, <span class="string">&#x27;black&#x27;</span>:<span class="number">0xff000000</span>&#125;;<span class="comment">//使用&#123;key:value&#125;形式初始化    </span></span><br><span class="line"><span class="keyword">var</span> colorMap = &lt;<span class="built_in">String</span>, <span class="built_in">int</span>&gt;&#123;<span class="string">&#x27;white&#x27;</span>: <span class="number">0xffffffff</span>, <span class="string">&#x27;black&#x27;</span>:<span class="number">0xff000000</span>&#125;;  </span><br></pre></td></tr></table></figure>

<p>常用函数</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">int</span>&gt; colorMap = &#123;<span class="string">&#x27;white&#x27;</span>: <span class="number">0xffffffff</span>, <span class="string">&#x27;black&#x27;</span>:<span class="number">0xff000000</span>&#125;;       </span><br><span class="line"><span class="built_in">print</span>(colorMap.containsKey(<span class="string">&#x27;green&#x27;</span>));<span class="comment">//false       </span></span><br><span class="line"><span class="built_in">print</span>(colorMap.containsValue(<span class="number">0xff000000</span>));<span class="comment">//true       </span></span><br><span class="line"><span class="built_in">print</span>(colorMap.keys.toList());<span class="comment">//[&#x27;white&#x27;,&#x27;black&#x27;]       </span></span><br><span class="line"><span class="built_in">print</span>(colorMap.values.toList());<span class="comment">//[0xffffffff, 0xff000000]       </span></span><br><span class="line">colorMap[<span class="string">&#x27;white&#x27;</span>] = <span class="number">0xfffff000</span>;<span class="comment">//修改指定key的元素       </span></span><br><span class="line">colorMap.remove(<span class="string">&#x27;black&#x27;</span>);<span class="comment">//移除指定key的元素 </span></span><br></pre></td></tr></table></figure>

<p>Map 遍历</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">int</span>&gt; colorMap = &#123;<span class="string">&#x27;white&#x27;</span>: <span class="number">0xffffffff</span>, <span class="string">&#x27;black&#x27;</span>:<span class="number">0xff000000</span>&#125;;       </span><br><span class="line"><span class="comment">//for-each key-value       </span></span><br><span class="line">colorMap.forEach((key, value) =&gt; <span class="built_in">print</span>(<span class="string">&#x27;color is <span class="subst">$key</span>, color value is <span class="subst">$value</span>&#x27;</span>));   </span><br></pre></td></tr></table></figure>

<p>Map.fromIterables 将 List 集合转换成 Map</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; colorKeys = [<span class="string">&#x27;white&#x27;</span>, <span class="string">&#x27;black&#x27;</span>];       </span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; colorValues = [<span class="number">0xffffffff</span>, <span class="number">0xff000000</span>];       </span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">int</span>&gt; colorMap = <span class="built_in">Map</span>.fromIterables(colorKeys, colorValues);   </span><br></pre></td></tr></table></figure>

<h5 id="4-集合常用操作符"><a href="#4-集合常用操作符" class="headerlink" title="4. 集合常用操作符"></a>4. 集合常用操作符</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; colorList = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"><span class="comment">//forEach箭头函数遍历</span></span><br><span class="line">colorList.forEach((color) =&gt; &#123;<span class="built_in">print</span>(color)&#125;);</span><br><span class="line">colorList.forEach((color) =&gt; <span class="built_in">print</span>(color)); <span class="comment">//箭头函数遍历，如果箭头函数内部只有一个表达式可以省略大括号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//map函数的使用</span></span><br><span class="line"><span class="built_in">print</span>(colorList.map((color) =&gt; <span class="string">&#x27;<span class="subst">$color_font</span>&#x27;</span>).join(<span class="string">&quot;,&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//every函数的使用，判断里面的元素是否都满足条件，返回值为true/false</span></span><br><span class="line"><span class="built_in">print</span>(colorList.every((color) =&gt; color == <span class="string">&#x27;red&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//sort函数的使用</span></span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; numbers = [<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">4</span>];</span><br><span class="line">numbers.sort((num1, num2) =&gt; num1 - num2); <span class="comment">//升序排序</span></span><br><span class="line">numbers.sort((num1, num2) =&gt; num2 - num1); <span class="comment">//降序排序</span></span><br><span class="line"><span class="built_in">print</span>(numbers);</span><br><span class="line"></span><br><span class="line"><span class="comment">//where函数使用，相当于Kotlin中的filter操作符，返回符合条件元素的集合</span></span><br><span class="line"><span class="built_in">print</span>(numbers.where((<span class="built_in">num</span>) =&gt; <span class="built_in">num</span> &gt; <span class="number">6</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//firstWhere函数的使用，相当于Kotlin中的find操作符，返回符合条件的第一个元素，如果没找到返回null</span></span><br><span class="line"><span class="built_in">print</span>(numbers.firstWhere((<span class="built_in">num</span>) =&gt; <span class="built_in">num</span> == <span class="number">5</span>, orElse: () =&gt; <span class="number">-1</span>)); <span class="comment">//注意: 如果没有找到，执行orElse代码块，可返回一个指定的默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//singleWhere函数的使用，返回符合条件的第一个元素，如果没找到返回null，但是前提是集合中只有一个符合条件的元素, 否则就会抛出异常</span></span><br><span class="line"><span class="built_in">print</span>(numbers.singleWhere((<span class="built_in">num</span>) =&gt; <span class="built_in">num</span> == <span class="number">4</span>, orElse: () =&gt; <span class="number">-1</span>)); <span class="comment">//注意: 如果没有找到，执行orElse代码块，可返回一个指定的默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//take(n)、skip(n)函数的使用，take(n)表示取当前集合前n个元素, skip(n)表示跳过前n个元素，然后取剩余所有的元素</span></span><br><span class="line"><span class="built_in">print</span>(numbers.take(<span class="number">5</span>).skip(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//List.from函数的使用，从给定集合中创建一个新的集合,相当于clone一个集合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">List</span>.from(numbers));</span><br><span class="line"></span><br><span class="line"><span class="comment">//expand函数的使用, 将集合一个元素扩展成多个元素或者将多个元素组成二维数组展开成平铺一个一位数组</span></span><br><span class="line"><span class="keyword">var</span> pair = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">];</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flatten list: <span class="subst">$&#123;pair.expand((pair) =&gt; pair)&#125;</span>&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inputs = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;duplicated list: <span class="subst">$&#123;inputs.expand((number) =&gt;[</span></span></span><br><span class="line"><span class="string"><span class="subst">  number,</span></span></span><br><span class="line"><span class="string"><span class="subst">  number,</span></span></span><br><span class="line"><span class="string"><span class="subst">  number</span></span></span><br><span class="line"><span class="string"><span class="subst">])&#125;</span>&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="五-流程控制"><a href="#五-流程控制" class="headerlink" title="五. 流程控制"></a>五. 流程控制</h4><h5 id="1-for-循环"><a href="#1-for-循环" class="headerlink" title="1. for 循环"></a>1. for 循环</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; colorList = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; colorList.length; i++) &#123;<span class="comment">//可以用var或int</span></span><br><span class="line">    <span class="built_in">print</span>(colorList[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-do-while-循环"><a href="#2-do-while-循环" class="headerlink" title="2. do-while 循环"></a>2. do-while 循环</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; colorList = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(colorList[index++]);</span><br><span class="line">&#125; <span class="keyword">while</span> (index &lt; colorList.length);</span><br></pre></td></tr></table></figure>

<h5 id="3-while-循环"><a href="#3-while-循环" class="headerlink" title="3. while 循环"></a>3. while 循环</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; colorList = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (index &lt; colorList.length) &#123;</span><br><span class="line">    <span class="built_in">print</span>(colorList[index++]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-break-和-continue"><a href="#4-break-和-continue" class="headerlink" title="4. break 和 continue"></a>4. break 和 continue</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; colorList = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; colorList.length; i++) &#123;<span class="comment">//可以用var或int</span></span><br><span class="line">    <span class="keyword">if</span>(colorList[i] == <span class="string">&#x27;yellow&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(colorList[i] == <span class="string">&#x27;blue&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(colorList[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-if-else"><a href="#5-if-else" class="headerlink" title="5. if-else"></a>5. if-else</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (numbers[i].isEven) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;偶数: <span class="subst">$&#123;numbers[i]&#125;</span>&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (numbers[i].isOdd) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;奇数: <span class="subst">$&#123;numbers[i]&#125;</span>&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;非法数字&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-三目运算（-）"><a href="#6-三目运算（-）" class="headerlink" title="6. 三目运算（?:）"></a>6. 三目运算（?:）</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    <span class="built_in">num</span> targetNumber = numbers[i].isEven ? numbers[i] * <span class="number">2</span> : numbers[i] + <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">print</span>(targetNumber);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-switch-case"><a href="#7-switch-case" class="headerlink" title="7. switch-case"></a>7. switch-case</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Color getColor(<span class="built_in">String</span> colorName) &#123;</span><br><span class="line">  Color currentColor = Colors.blue;</span><br><span class="line">  <span class="keyword">switch</span> (colorName) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;read&quot;</span>:</span><br><span class="line">      currentColor = Colors.red;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;blue&quot;</span>:</span><br><span class="line">      currentColor = Colors.blue;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;yellow&quot;</span>:</span><br><span class="line">      currentColor = Colors.yellow;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> currentColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="8-Assert-断言"><a href="#8-Assert-断言" class="headerlink" title="8. Assert 断言"></a>8. Assert 断言</h5><p>断言只在检查模式下运行有效，生产模式运行断言不生效</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span>(text != <span class="keyword">null</span>);<span class="comment">//text为null,就会中断后续代码执行</span></span><br><span class="line"><span class="keyword">assert</span>(urlString.startsWith(<span class="string">&#x27;https&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h4 id="六-运算符"><a href="#六-运算符" class="headerlink" title="六. 运算符"></a>六. 运算符</h4><h5 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a>1. 算术运算符</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//+ - * /</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">3</span>~/<span class="number">5</span>; <span class="comment">//0 整除</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">5</span>%<span class="number">3</span>;  <span class="comment">//2 取余</span></span><br></pre></td></tr></table></figure>

<h5 id="2-条件运算符"><a href="#2-条件运算符" class="headerlink" title="2. 条件运算符"></a>2. 条件运算符</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&gt; &lt; == != &gt;= &lt;=</span></span><br></pre></td></tr></table></figure>

<h5 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3. 逻辑运算符"></a>3. 逻辑运算符</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//|| &amp;&amp; !</span></span><br></pre></td></tr></table></figure>

<h5 id="4-位运算符"><a href="#4-位运算符" class="headerlink" title="4. 位运算符"></a>4. 位运算符</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&amp; ! ^ &lt;&lt; &gt;&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="5-三目运算符"><a href="#5-三目运算符" class="headerlink" title="5. 三目运算符"></a>5. 三目运算符</h5><h5 id="6-空安全运算符"><a href="#6-空安全运算符" class="headerlink" title="6. 空安全运算符"></a>6. 空安全运算符</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">result = expr1 ?? expr2; </span><br><span class="line">expr1 ??= expr2; <span class="comment">// expr1为null则把expr2值赋值给expr1</span></span><br><span class="line">result = expr1?.value </span><br></pre></td></tr></table></figure>

<h5 id="7-级联操作符（-）"><a href="#7-级联操作符（-）" class="headerlink" title="7. 级联操作符（..）"></a>7. 级联操作符（..）</h5><p>级联操作符 .. 可以让你对一个对象中字段进行链式调用操作</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">question</span><br><span class="line">    ..id = <span class="string">&#x27;10001&#x27;</span></span><br><span class="line">    ..stem = <span class="string">&#x27;第一题: xxxxxx&#x27;</span></span><br><span class="line">    ..choices = &lt;<span class="built_in">String</span>&gt; [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>]</span><br><span class="line">    ..hint = <span class="string">&#x27;听音频做题&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="8-运算符重载"><a href="#8-运算符重载" class="headerlink" title="8. 运算符重载"></a>8. 运算符重载</h5><p>dart 支持运算符自定义重载，使用 operator 关键字定义重载函数</p>
<h5 id="9-异常"><a href="#9-异常" class="headerlink" title="9. 异常"></a>9. 异常</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">num</span> = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  result = <span class="built_in">num</span> ~/ <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;<span class="comment">//捕获到IntegerDivisionByZeroException</span></span><br><span class="line">  <span class="built_in">print</span>(e.toString());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$result</span>&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用on关键字捕获特定的异常</span></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">int</span> <span class="built_in">num</span> = <span class="number">18</span>;</span><br><span class="line">  <span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    result = <span class="built_in">num</span> ~/ <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">on</span> IntegerDivisionByZeroException <span class="keyword">catch</span> (e) &#123;<span class="comment">//捕获特定异常</span></span><br><span class="line">    <span class="built_in">print</span>(e.toString());</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$result</span>&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="八-函数"><a href="#八-函数" class="headerlink" title="八. 函数"></a>八. 函数</h4><h5 id="1-函数基本用法"><a href="#1-函数基本用法" class="headerlink" title="1. 函数基本用法"></a>1. 函数基本用法</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;sum is <span class="subst">$&#123;sum(<span class="number">2</span>, <span class="number">5</span>)&#125;</span>&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">num</span> sum(<span class="built_in">num</span> a, <span class="built_in">num</span> b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-函数参数列表传参规则"><a href="#2-函数参数列表传参规则" class="headerlink" title="2. 函数参数列表传参规则"></a>2. 函数参数列表传参规则</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//num a, num b, num c, num d 最普通的传参: 调用时，参数个数和参数顺序必须固定</span></span><br><span class="line">add1(<span class="built_in">num</span> a, <span class="built_in">num</span> b, <span class="built_in">num</span> c, <span class="built_in">num</span> d) &#123;</span><br><span class="line">  <span class="built_in">print</span>(a + b + c + d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//[num a, num b, num c, num d]传参: 调用时，参数个数不固定，但是参数顺序需要一一对应, 不支持命名参数</span></span><br><span class="line">add2([<span class="built_in">num</span> a, <span class="built_in">num</span> b, <span class="built_in">num</span> c, <span class="built_in">num</span> d]) &#123;</span><br><span class="line">  <span class="built_in">print</span>(a + b + c + d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#123;num a, num b, num c, num d&#125;传参: 调用时，参数个数不固定，参数顺序也可以不固定，支持命名参数,也叫可选参数，是dart中的一大特性，这就是为啥Flutter代码那么多可选属性，大量使用可选参数</span></span><br><span class="line">add3(&#123;<span class="built_in">num</span> a, <span class="built_in">num</span> b, <span class="built_in">num</span> c, <span class="built_in">num</span> d&#125;) &#123;</span><br><span class="line">  <span class="built_in">print</span>(a + b + c + d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//num a, num b, &#123;num c, num d&#125;传参: 调用时，a,b参数个数固定顺序固定，c,d参数个数和顺序也可以不固定</span></span><br><span class="line">add4(<span class="built_in">num</span> a, <span class="built_in">num</span> b, &#123;<span class="built_in">num</span> c, <span class="built_in">num</span> d&#125;) &#123;</span><br><span class="line">  <span class="built_in">print</span>(a + b + c + d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  add1(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>); <span class="comment">//最普通的传参: 调用时，参数个数和参数顺序必须固定</span></span><br><span class="line">  add2(<span class="number">100</span>, <span class="number">100</span>); <span class="comment">//调用时，参数个数不固定，但是参数顺序需要一一对应, 不支持命名参数(也就意味着顺序不变)</span></span><br><span class="line">  add3(</span><br><span class="line">      b: <span class="number">200</span>,</span><br><span class="line">      a: <span class="number">200</span>,</span><br><span class="line">      c: <span class="number">100</span>,</span><br><span class="line">      d: <span class="number">100</span>); <span class="comment">//调用时，参数个数不固定，参数顺序也可以不固定，支持命名参数(也就意味着顺序可变)</span></span><br><span class="line">  add4(<span class="number">100</span>, <span class="number">100</span>, d: <span class="number">100</span>, c: <span class="number">100</span>); <span class="comment">//调用时，a,b参数个数固定顺序笃定，c,d参数个数和顺序也可以不固定</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-函数默认参数和可选参数"><a href="#3-函数默认参数和可选参数" class="headerlink" title="3. 函数默认参数和可选参数"></a>3. 函数默认参数和可选参数</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">add3(&#123;<span class="built_in">num</span> a, <span class="built_in">num</span> b, <span class="built_in">num</span> c, <span class="built_in">num</span> d = <span class="number">100</span>&#125;) &#123;<span class="comment">//d就是默认值参数，给的默认值是100</span></span><br><span class="line">   <span class="built_in">print</span>(a + b + c + d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">    add3(b: <span class="number">200</span>, a: <span class="number">100</span>, c: <span class="number">800</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-函数类型与高阶函数"><a href="#4-函数类型与高阶函数" class="headerlink" title="4. 函数类型与高阶函数"></a>4. 函数类型与高阶函数</h5><p>dart 函数也是一种类型 Function，可以作为函数参数传递，也可作为返回值</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">Function</span> square = (a) &#123;</span><br><span class="line">    <span class="keyword">return</span> a * a;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Function</span> square2 = (a) &#123;</span><br><span class="line">    <span class="keyword">return</span> a * a * a;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  add(<span class="number">3</span>, <span class="number">4</span>, square, square2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">num</span> add(<span class="built_in">num</span> a, <span class="built_in">num</span> b, [<span class="built_in">Function</span> op, <span class="built_in">Function</span> op2]) &#123;</span><br><span class="line">  <span class="comment">//函数作为参数传递</span></span><br><span class="line">  <span class="keyword">return</span> op(a) + op2(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-函数的简化及箭头函数"><a href="#5-函数的简化及箭头函数" class="headerlink" title="5. 函数的简化及箭头函数"></a>5. 函数的简化及箭头函数</h5><p>dart 中函数体内只有一个表达式，可以使用箭头函数来简化代码</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">add4(<span class="built_in">num</span> a, <span class="built_in">num</span> b, &#123;<span class="built_in">num</span> c, <span class="built_in">num</span> d&#125;) &#123;</span><br><span class="line">  <span class="built_in">print</span>(a + b + c + d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add5(<span class="built_in">num</span> a, <span class="built_in">num</span> b, &#123;<span class="built_in">num</span> c, <span class="built_in">num</span> d&#125;)  =&gt;  <span class="built_in">print</span>(a + b + c + d);</span><br></pre></td></tr></table></figure>

<h4 id="九-面向对象"><a href="#九-面向对象" class="headerlink" title="九. 面向对象"></a>九. 面向对象</h4><h5 id="1-类的基本定义和使用"><a href="#1-类的基本定义和使用" class="headerlink" title="1. 类的基本定义和使用"></a>1. 类的基本定义和使用</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="built_in">String</span> name;</span><br><span class="line">    <span class="built_in">int</span> age;</span><br><span class="line">    <span class="built_in">double</span> height;</span><br><span class="line">    Person(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age, <span class="keyword">this</span>.height);<span class="comment">//注意，这里写法可能大家没见过， 这点和Java是不一样，这里实际上是一个dart的语法糖。但是这里不如Kotlin，Kotlin是直接把this.name传值的过程都省了。</span></span><br><span class="line">    <span class="comment">//与上述的等价代码,当然这也是Java中必须要写的代码</span></span><br><span class="line">    Person(<span class="built_in">String</span> name, <span class="built_in">int</span> age, <span class="built_in">double</span> height) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">//然而Kotlin很彻底只需要声明属性就行,下面是Kotlin实现代码</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="title">val</span> <span class="title">name</span>: <span class="title">String</span>, <span class="title">val</span> <span class="title">age</span>: <span class="title">Int</span>, <span class="title">val</span> <span class="title">height</span>: <span class="title">Double</span>)     </span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;<span class="comment">//使用extends关键字表示继承</span></span><br><span class="line">    Student(<span class="built_in">String</span> name, <span class="built_in">int</span> age, <span class="built_in">double</span> height, <span class="built_in">double</span> grade): <span class="keyword">super</span>(name, age, height);<span class="comment">//在 Dart里：类名(变量，变量,...) 是构造函数的写法, :super()表示该构造调用父类，这里构造时传入三个参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

































<p><a href="https://zhuanlan.zhihu.com/p/88728224">Dart语法之基础语法</a></p>
<p><a href="https://dart.dev/guides/language/language-tour#instance-variables">Dart</a></p>
<p><a href="https://dart.cn/guides">Dart.cn</a></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>RxSwift（三）</title>
    <url>/2021/09/03/RxSwift%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h4 id="1-错误处理"><a href="#1-错误处理" class="headerlink" title="1 错误处理"></a>1 错误处理</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum MyError: Error &#123;</span><br><span class="line">    case A</span><br><span class="line">    case B</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-1-catchErrorJustReturn"><a href="#1-1-catchErrorJustReturn" class="headerlink" title="1.1 catchErrorJustReturn"></a>1.1 catchErrorJustReturn</h5><p>遇到error事件时，就返回指定的值，然后结束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let sequenceFailed &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">sequenceFailed</span><br><span class="line">    .catchErrorJustReturn(&quot;错误&quot;)</span><br><span class="line">    .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">sequenceFailed.onNext(&quot;a&quot;)</span><br><span class="line">sequenceFailed.onNext(&quot;b&quot;)</span><br><span class="line">sequenceFailed.onError(MyError.A)</span><br><span class="line">sequenceFailed.onNext(&quot;c&quot;)</span><br><span class="line">结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">错误</span><br></pre></td></tr></table></figure>

<h5 id="1-2-catchError"><a href="#1-2-catchError" class="headerlink" title="1.2 catchError"></a>1.2 catchError</h5><p>捕获error，并对其处理，同时还能返回另一个observable序列进行订阅</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let sequenceFailed &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">let recoverSequence &#x3D; Observable.of(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;)</span><br><span class="line">    sequenceFailed</span><br><span class="line">        .catchError &#123;</span><br><span class="line">            print(&quot;Error:&quot;, $0)</span><br><span class="line">            return recoverSequence</span><br><span class="line">        &#125;</span><br><span class="line">        .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">        .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">    sequenceFailed.onNext(&quot;a&quot;)</span><br><span class="line">    sequenceFailed.onNext(&quot;b&quot;)</span><br><span class="line">    sequenceFailed.onError(MyError.A)</span><br><span class="line">    sequenceFailed.onNext(&quot;c&quot;)</span><br><span class="line">结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">Error: A</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h5 id="1-3-retry"><a href="#1-3-retry" class="headerlink" title="1.3 retry"></a>1.3 retry</h5><p>遇到错误的时候，重新订阅该序列<br>retry()传入数字表示重试次数，不传默认1次</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var count &#x3D; 1</span><br><span class="line">let sequenceError &#x3D; Observable&lt;String&gt;.create &#123; (observer) -&gt; Disposable in</span><br><span class="line">    observer.onNext(&quot;a&quot;)</span><br><span class="line">    observer.onNext(&quot;b&quot;)</span><br><span class="line">    if count &#x3D;&#x3D; 1 &#123;</span><br><span class="line">        observer.onError(MyError.A)</span><br><span class="line">        print(&quot;error&quot;)</span><br><span class="line">        count +&#x3D; 1</span><br><span class="line">    &#125;</span><br><span class="line">    observer.onNext(&quot;c&quot;)</span><br><span class="line">    observer.onCompleted()</span><br><span class="line">    return Disposables.create()</span><br><span class="line">&#125;</span><br><span class="line">sequenceError</span><br><span class="line">.retry(2)</span><br><span class="line">.subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h4 id="2-调试操作"><a href="#2-调试操作" class="headerlink" title="2 调试操作"></a>2 调试操作</h4><h5 id="2-1-debug"><a href="#2-1-debug" class="headerlink" title="2.1 debug"></a>2.1 debug</h5><p>还可以传入标记参数<code>.debug(&quot;调试1&quot;)</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(2, 3)</span><br><span class="line">  .startWith(1)</span><br><span class="line">  .debug()</span><br><span class="line">  .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">  .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="2-2-RxSwift-Resources-total"><a href="#2-2-RxSwift-Resources-total" class="headerlink" title="2.2 RxSwift.Resources.total"></a>2.2 RxSwift.Resources.total</h5><p>将RxSwift.Resources.total打印出来可以查看当前RxSwift申请的所有资源数量 检查内存泄漏时有用<br>开启需要在Podfile开启配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(RxSwift.Resources.total)</span><br></pre></td></tr></table></figure>

<h4 id="3-特征序列"><a href="#3-特征序列" class="headerlink" title="3 特征序列"></a>3 特征序列</h4><h5 id="3-1-Single"><a href="#3-1-Single" class="headerlink" title="3.1 Single"></a>3.1 Single</h5><p>observable另一个版本，只能发出一个元素，要么产生一个error<br>不会共享状态变化<br>常用于执行HTTP请求，成功返回应答或错误</p>
<p>RxSwift为Single提供了一个枚举（SingleEvent）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public enum SingleEvent&lt;Element&gt; &#123;</span><br><span class="line">    case success(Element)</span><br><span class="line">    case error(Swift.Error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>样例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum DataError: Error &#123;</span><br><span class="line">    case cantParseJSON</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func getPlayList(_ channel: String) -&gt; Single&lt;[String: Any]&gt; &#123;</span><br><span class="line">    return Single&lt;[String: Any]&gt;.create &#123; (single) -&gt; Disposable in</span><br><span class="line">        let url &#x3D; &quot;https:&#x2F;&#x2F;douban.fm&#x2F;j&#x2F;mine&#x2F;playlist?&quot; + &quot;type&#x3D;n&amp;channel&#x3D;\(channel)&amp;from&#x3D;mainsite&quot;</span><br><span class="line">        let task &#x3D; URLSession.shared.dataTask(with: URL(string: url)!) &#123; (data, _, error) in</span><br><span class="line">            if let error &#x3D; error &#123;</span><br><span class="line">                single(.error(error))</span><br><span class="line">                return</span><br><span class="line">            &#125;</span><br><span class="line">            guard let data &#x3D; data,</span><br><span class="line">                  let json &#x3D; try? JSONSerialization.jsonObject(with: data, options: .mutableLeaves),</span><br><span class="line">                  let result &#x3D; json as? [String: Any] else &#123;</span><br><span class="line">                single(.error(DataError.cantParseJSON))</span><br><span class="line">                return</span><br><span class="line">            &#125;</span><br><span class="line">            single(.success(result))</span><br><span class="line">        &#125;</span><br><span class="line">        task.resume()</span><br><span class="line">        return Disposables.create &#123; task.cancel() &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 也可以用<code>subscribe(onSuccess:onError:)</code>方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getPlayList(&quot;0&quot;)</span><br><span class="line">    .subscribe &#123; (event) in</span><br><span class="line">        switch event &#123;</span><br><span class="line">        case.success(let json):</span><br><span class="line">            print(&quot;JSON结果：&quot;, json)</span><br><span class="line">        case .error(let error):</span><br><span class="line">            print(&quot;发生错误：&quot;, error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<ul>
<li>asSingle</li>
</ul>
<p>可以通过observable的asSingle()，转换为Single</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(&quot;1&quot;)</span><br><span class="line">    .asSingle()</span><br><span class="line">    .subscribe(&#123;print($0)&#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="3-2-Completable"><a href="#3-2-Completable" class="headerlink" title="3.2 Completable"></a>3.2 Completable</h5><p>要么只能产生一个completed事件，要么产生一个error事件<br>不会共享状态变化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func cacheLocally() -&gt; Completable &#123;</span><br><span class="line">    return Completable.create &#123; (completeable) -&gt; Disposable in</span><br><span class="line">        let success &#x3D; (arc4random() % 2 &#x3D;&#x3D; 0)</span><br><span class="line">        guard success else &#123;</span><br><span class="line">            completeable(.error(CacheError.failedCaching))</span><br><span class="line">            return Disposables.create &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        completeable(.completed)</span><br><span class="line">        return Disposables.create &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">enum CacheError: Error &#123;</span><br><span class="line">   case failedCaching</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 也可使用<code>subscribe(onCompleted:onError:)</code>方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cacheLocally()</span><br><span class="line">    .subscribe &#123; (completable) in</span><br><span class="line">        switch completable &#123;</span><br><span class="line">        case .completed:</span><br><span class="line">            print(&quot;保存成功&quot;)</span><br><span class="line">        case .error(let error):</span><br><span class="line">            print(&quot;保存失败：\(error.localizedDescription)&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="3-3-Maybe"><a href="#3-3-Maybe" class="headerlink" title="3.3 Maybe"></a>3.3 Maybe</h5><p>介于Single和Completable之间，要么只能发出一个元素，要么产生一个completable事件，要么产生error事件<br>不会共享状态变化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public enum MaybeEvent&lt;Element&gt; &#123;</span><br><span class="line">    case success(Element)</span><br><span class="line">    case error(Swift.Error)</span><br><span class="line">    case completed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func generateString() -&gt; Maybe&lt;String&gt; &#123;</span><br><span class="line">    return Maybe.create &#123; (maybe) -&gt; Disposable in</span><br><span class="line">        maybe(.success(&quot;hang&quot;))</span><br><span class="line">        maybe(.completed)</span><br><span class="line">        return Disposables.create &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>asMaybe</li>
</ul>
<p>可以通过observable的asMaybe()，转换为Maybe</p>
<h4 id="4-Driver"><a href="#4-Driver" class="headerlink" title="4 Driver"></a>4 Driver</h4><p>目标是提供一种简便的方式在UI层编写响应式代码<br>不会产生error事件<br>一定在主线程监听<br>共享状态变化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let results &#x3D; query.rx.text.asDriver()        &#x2F;&#x2F; 将普通序列转换为 Driver</span><br><span class="line">    .throttle(0.3, scheduler: MainScheduler.instance)</span><br><span class="line">    .flatMapLatest &#123; query in</span><br><span class="line">        fetchAutoCompleteItems(query)</span><br><span class="line">            .asDriver(onErrorJustReturn: [])  &#x2F;&#x2F; 仅仅提供发生错误时的备选返回值</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;将返回的结果绑定到显示结果数量的label上</span><br><span class="line">results</span><br><span class="line">    .map &#123; &quot;\($0.count)&quot; &#125;</span><br><span class="line">    .drive(resultCount.rx.text) &#x2F;&#x2F; 这里使用 drive 而不是 bindTo</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;将返回的结果绑定到tableView上</span><br><span class="line">results</span><br><span class="line">    .drive(resultsTableView.rx.items(cellIdentifier: &quot;Cell&quot;)) &#123; &#x2F;&#x2F;  同样使用 drive 而不是 bindTo</span><br><span class="line">        (_, result, cell) in</span><br><span class="line">        cell.textLabel?.text &#x3D; &quot;\(result)&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="4-1-asDriver"><a href="#4-1-asDriver" class="headerlink" title="4.1 asDriver"></a>4.1 asDriver</h5><p><code>query.rx.text.asDriver</code>将ControlProperty转换为Driver，将普通序列转换为Driver</p>
<h5 id="4-2-asDriver-onErrorJustReturn"><a href="#4-2-asDriver-onErrorJustReturn" class="headerlink" title="4.2 asDriver(onErrorJustReturn: )"></a>4.2 asDriver(onErrorJustReturn: )</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let disposeBag &#x3D; DisposeBag()</span><br><span class="line">let pubSubject &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line"></span><br><span class="line">pubSubject.asDriver(onErrorJustReturn: 1000)</span><br><span class="line">    .drive(onNext: &#123;</span><br><span class="line">        print($0)</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">pubSubject.onNext(10)</span><br><span class="line">pubSubject.onNext(29)</span><br><span class="line">pubSubject.onError(CustomError.test)</span><br></pre></td></tr></table></figure>

<h5 id="4-3-asDriver-onErrorDriveWith"><a href="#4-3-asDriver-onErrorDriveWith" class="headerlink" title="4.3 asDriver(onErrorDriveWith:)"></a>4.3 asDriver(onErrorDriveWith:)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let disposeBag &#x3D; DisposeBag()</span><br><span class="line">let pubSubject &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">let recoverySubject &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">pubSubject.asDriver(onErrorDriveWith:</span><br><span class="line">    recoverySubject.asDriver(onErrorJustReturn: 1000))</span><br><span class="line">        .drive(onNext: &#123;</span><br><span class="line">            print($0)</span><br><span class="line">        &#125;)</span><br><span class="line">        .disposed(by: disposeBag)</span><br><span class="line">pubSubject.onNext(19)</span><br><span class="line">pubSubject.onError(CustomError.test)</span><br><span class="line">recoverySubject.onNext(10)</span><br></pre></td></tr></table></figure>

<h4 id="5-ControlProperty"><a href="#5-ControlProperty" class="headerlink" title="5 ControlProperty"></a>5 ControlProperty</h4><p>专门用来描述UI控件的属性，拥有该类型的属性都是被观察者observable<br>特性：<br>不会产生error事件，一定在主线程订阅，主线程监听，共享状态变化</p>
<p>UITextField+Rx.swift 中 UITextField 的 rx.text 属性类型便是 ControlProperty</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension Reactive where Base: UITextField &#123;</span><br><span class="line">    public var text: ControlProperty&lt;String?&gt; &#123;</span><br><span class="line">        return value</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public var value: ControlProperty&lt;String?&gt; &#123;</span><br><span class="line">        return base.rx.controlPropertyWithDefaultEvents(</span><br><span class="line">            getter: &#123; textField in</span><br><span class="line">                textField.text</span><br><span class="line">        &#125;,</span><br><span class="line">            setter: &#123; textField, value in</span><br><span class="line">                if textField.text !&#x3D; value &#123;</span><br><span class="line">                    textField.text &#x3D; value</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-ControlEvent"><a href="#6-ControlEvent" class="headerlink" title="6 ControlEvent"></a>6 ControlEvent</h4><p>专门用来描述UI所产生事件，拥有该类型的属性都是被观察者observable<br>特性：<br>不会产生error事件，一定在主线程订阅，主线程监听，共享状态变化</p>
<p>UIButton 的 rx.tap 方法类型便是 ControlEvent<Void></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension Reactive where Base: UIButton &#123;</span><br><span class="line">    public var tap: ControlEvent&lt;Void&gt; &#123;</span><br><span class="line">        return controlEvent(.touchUpInside)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对 UIViewController 进行扩展</p>
<ul>
<li>将  viewDidLoad、viewDidAppear、viewDidLayoutSubviews 等各种 ViewController 生命周期的方法转成 ControlEvent 方便在 RxSwift 项目中使用。</li>
<li>增加 isVisible 序列属性，方便对视图的显示状态进行订阅。</li>
<li>增加 isDismissing 序列属性，方便对视图的释放进行订阅。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public extension Reactive where Base: UIViewController &#123;</span><br><span class="line">    public var viewDidLoad: ControlEvent&lt;Void&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.viewDidLoad)).map &#123; _ in &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public var viewWillAppear: ControlEvent&lt;Bool&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.viewWillAppear))</span><br><span class="line">            .map &#123; $0.first as? Bool ?? false &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">    public var viewDidAppear: ControlEvent&lt;Bool&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.viewDidAppear))</span><br><span class="line">            .map &#123; $0.first as? Bool ?? false &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public var viewWillDisappear: ControlEvent&lt;Bool&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.viewWillDisappear))</span><br><span class="line">            .map &#123; $0.first as? Bool ?? false &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">    public var viewDidDisappear: ControlEvent&lt;Bool&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.viewDidDisappear))</span><br><span class="line">            .map &#123; $0.first as? Bool ?? false &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public var viewWillLayoutSubviews: ControlEvent&lt;Void&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.viewWillLayoutSubviews))</span><br><span class="line">            .map &#123; _ in &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">    public var viewDidLayoutSubviews: ControlEvent&lt;Void&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.viewDidLayoutSubviews))</span><br><span class="line">            .map &#123; _ in &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public var willMoveToParentViewController: ControlEvent&lt;UIViewController?&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.willMove))</span><br><span class="line">            .map &#123; $0.first as? UIViewController &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">    public var didMoveToParentViewController: ControlEvent&lt;UIViewController?&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.didMove))</span><br><span class="line">            .map &#123; $0.first as? UIViewController &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public var didReceiveMemoryWarning: ControlEvent&lt;Void&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.didReceiveMemoryWarning))</span><br><span class="line">            .map &#123; _ in &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    &#x2F;&#x2F;表示视图是否显示的可观察序列，当VC显示状态改变时会触发</span><br><span class="line">    public var isVisible: Observable&lt;Bool&gt; &#123;</span><br><span class="line">        let viewDidAppearObservable &#x3D; self.base.rx.viewDidAppear.map &#123; _ in true &#125;</span><br><span class="line">        let viewWillDisappearObservable &#x3D; self.base.rx.viewWillDisappear</span><br><span class="line">            .map &#123; _ in false &#125;</span><br><span class="line">        return Observable&lt;Bool&gt;.merge(viewDidAppearObservable,</span><br><span class="line">                                      viewWillDisappearObservable)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    &#x2F;&#x2F;表示页面被释放的可观察序列，当VC被dismiss时会触发</span><br><span class="line">    public var isDismissing: ControlEvent&lt;Bool&gt; &#123;</span><br><span class="line">        let source &#x3D; self.sentMessage(#selector(Base.dismiss))</span><br><span class="line">            .map &#123; $0.first as? Bool ?? false &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-调度器"><a href="#7-调度器" class="headerlink" title="7 调度器"></a>7 调度器</h4><p>控制任务在哪个线程或队列运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let rxData: Observable&lt;Data&gt; &#x3D; ...</span><br><span class="line"> </span><br><span class="line">rxData</span><br><span class="line">    .subscribeOn(ConcurrentDispatchQueueScheduler(qos: .userInitiated)) &#x2F;&#x2F;后台构建序列</span><br><span class="line">    .observeOn(MainScheduler.instance)  &#x2F;&#x2F;主线程监听并处理序列结果</span><br><span class="line">    .subscribe(onNext: &#123; [weak self] data in</span><br><span class="line">        self?.data &#x3D; data</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="7-1-subscribeOn"><a href="#7-1-subscribeOn" class="headerlink" title="7.1 subscribeOn()"></a>7.1 subscribeOn()</h5><p>决定数据序列的构建在哪个schedule上运行</p>
<p>比如上面样例，由于获取数据、解析数据需要花费一段时间的时间，所以通过 <strong>subscribeOn</strong> 将其切换到后台 <strong>Scheduler</strong> 来执行。这样可以避免主线程被阻塞</p>
<h5 id="7-2-observeOn"><a href="#7-2-observeOn" class="headerlink" title="7.2 observeOn()"></a>7.2 observeOn()</h5><p>决定哪个schedule上监听这个数据序列</p>
<p>比如上面样例，我们获取并解析完毕数据后又通过 <strong>observeOn</strong> 方法切换到主线程来监听并且处理结果</p>
<h4 id="8-双向绑定"><a href="#8-双向绑定" class="headerlink" title="8 双向绑定"></a>8 双向绑定</h4><p>比如控件的某个属性值与 ViewModel 里的某个 Subject 属性进行双向绑定</p>
<p>当 ViewModel 里的值发生改变时，可以同步反映到控件上</p>
<p>如果对控件值修改，ViewModel 那边值同时也会发生改变</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;将用户名与textField做双向绑定</span><br><span class="line">userVM.username.asObservable().bind(to: textField.rx.text).disposed(by: disposeBag)</span><br><span class="line">textField.rx.text.orEmpty.bind(to: userVM.username).disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义双向绑定操作符</li>
</ul>
<p>xSwift自带的双向绑定操作符 &lt;-&gt;<br>在RxSwift项目文件夹中 RxExample中 Operators.swift</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;将用户名与textField做双向绑定</span><br><span class="line">_ &#x3D;  self.textField.rx.textInput &lt;-&gt;  self.userVM.username</span><br></pre></td></tr></table></figure>

<h4 id="9-UITableView"><a href="#9-UITableView" class="headerlink" title="9 UITableView"></a>9 UITableView</h4><h5 id="9-1-单分区的表格数据"><a href="#9-1-单分区的表格数据" class="headerlink" title="9.1 单分区的表格数据"></a>9.1 单分区的表格数据</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let items &#x3D; Observable.just([</span><br><span class="line">    &quot;First Item&quot;,</span><br><span class="line">    &quot;Second Item&quot;,</span><br><span class="line">    &quot;Third Item&quot;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>绑定数据一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">items</span><br><span class="line">    .bind(to: tableView.rx.items)</span><br><span class="line">    &#123; (tableView, row, element) in</span><br><span class="line">        let cell &#x3D; tableView.dequeueReusableCell(withIdentifier: &quot;Cell&quot;)!</span><br><span class="line">        cell.textLabel?.text &#x3D; &quot;\(element) @ row \(row)&quot;</span><br><span class="line">        return cell</span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<p>绑定数据二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">items</span><br><span class="line">    .bind(to: tableView.rx.items(cellIdentifier: &quot;Cell&quot;, cellType: UITableViewCell.self))</span><br><span class="line">    &#123; (row, element, cell) in</span><br><span class="line">        cell.textLabel?.text &#x3D; &quot;\(element) @ row \(row)&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<ul>
<li>单元格选中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tableView.rx.itemSelected.subscribe(onNext: &#123; indexPath in</span><br><span class="line">    print(&quot;选中index：\(indexPath.row)&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">.disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">tableView.rx.modelSelected(String.self).subscribe(onNext: &#123; item in</span><br><span class="line">    print(&quot;选中内容：\(item)&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<ul>
<li>同时获取索引和内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.zip(tableView.rx.itemSelected, tableView.rx.modelSelected(String.self))</span><br><span class="line">    .subscribe(onNext: &#123; indexPath, item in</span><br><span class="line">        print(&quot;\(indexPath) \(item)&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.zip(tableView.rx.itemSelected, tableView.rx.modelSelected(String.self))</span><br><span class="line">    .bind &#123; indexPath, item in</span><br><span class="line">        print(&quot;\(indexPath) \(item)&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<ul>
<li>删除单元格</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tableView.rx.itemDeleted.subscribe(onNext: &#123; indexPath in</span><br><span class="line">    print(&quot;删除index: \(indexPath.row)&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h4 id="10-RxDataSource"><a href="#10-RxDataSource" class="headerlink" title="10 RxDataSource"></a>10 RxDataSource</h4><p>以 Section 来作为数据结构的</p>
<h5 id="10-1-单分区-TableView"><a href="#10-1-单分区-TableView" class="headerlink" title="10.1 单分区 TableView"></a>10.1 单分区 TableView</h5><p>使用自带 Section</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let items &#x3D; Observable.just([</span><br><span class="line">    SectionModel(model: &quot;&quot;, items: [</span><br><span class="line">        &quot;UILabel&quot;,</span><br><span class="line">        &quot;UITextView&quot;,</span><br><span class="line">        &quot;UIButton&quot;</span><br><span class="line">    ])</span><br><span class="line">])</span><br><span class="line">&#x2F;&#x2F;创建数据源</span><br><span class="line">let dataSource &#x3D; RxTableViewSectionedReloadDataSource&lt;SectionModel&lt;String, String&gt;&gt; &#123; dataSource, tableView, indexPath, element in</span><br><span class="line">    let cell &#x3D; tableView.dequeueReusableCell(withIdentifier: &quot;Cell&quot;)!</span><br><span class="line">    cell.textLabel?.text &#x3D; &quot;index：\(indexPath.row) element: \(element)&quot;</span><br><span class="line">    return cell</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;绑定单元格数据</span><br><span class="line">items</span><br><span class="line">    .bind(to: tableView.rx.items(dataSource: dataSource))</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="10-2-多分区-TableView"><a href="#10-2-多分区-TableView" class="headerlink" title="10.2 多分区 TableView"></a>10.2 多分区 TableView</h5><p>使用自带 Section</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let items &#x3D; Observable.just([</span><br><span class="line">    SectionModel(model: &quot;基本控件&quot;, items: [</span><br><span class="line">        &quot;UILabel&quot;,</span><br><span class="line">        &quot;UIButton&quot;,</span><br><span class="line">    ]),</span><br><span class="line">    SectionModel(model: &quot;高级控件&quot;, items: [</span><br><span class="line">        &quot;UITableView&quot;,</span><br><span class="line">        &quot;UICollectionView&quot;,</span><br><span class="line">    ]),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建数据源</span><br><span class="line">let dataSource &#x3D; RxTableViewSectionedReloadDataSource&lt;SectionModel&lt;String, String&gt;&gt; &#123; dataSource, tableView, indexPath, element in</span><br><span class="line">    let cell &#x3D; tableView.dequeueReusableCell(withIdentifier: &quot;Cell&quot;)!</span><br><span class="line">    cell.textLabel?.text &#x3D; &quot;index：\(indexPath.row) element: \(element)&quot;</span><br><span class="line">    return cell</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置分区头标题</span><br><span class="line">dataSource.titleForHeaderInSection &#x3D; &#123; dataSource, index in</span><br><span class="line">    return dataSource.sectionModels[index].model</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">items</span><br><span class="line">    .bind(to: tableView.rx.items(dataSource: dataSource))</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="10-3-使用自定义-Section"><a href="#10-3-使用自定义-Section" class="headerlink" title="10.3 使用自定义 Section"></a>10.3 使用自定义 Section</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let items &#x3D; Observable.just([</span><br><span class="line">    MySection(header: &quot;基本控件&quot;, items: [</span><br><span class="line">        &quot;UILabel&quot;,</span><br><span class="line">        &quot;UIButton&quot;,</span><br><span class="line">    ]),</span><br><span class="line">    MySection(header: &quot;高级控件&quot;, items: [</span><br><span class="line">        &quot;UITableView&quot;,</span><br><span class="line">        &quot;UICollectionView&quot;,</span><br><span class="line">    ]),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建数据源</span><br><span class="line">let dataSource &#x3D; RxTableViewSectionedReloadDataSource&lt;MySection&gt; &#123; dataSource, tableView, indexPath, element in</span><br><span class="line">    let cell &#x3D; tableView.dequeueReusableCell(withIdentifier: &quot;Cell&quot;)!</span><br><span class="line">    cell.textLabel?.text &#x3D; &quot;index：\(indexPath.row) element: \(element)&quot;</span><br><span class="line">    return cell</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置分区头标题</span><br><span class="line">dataSource.titleForHeaderInSection &#x3D; &#123; dataSource, index in</span><br><span class="line">    return dataSource.sectionModels[index].header</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">items</span><br><span class="line">    .bind(to: tableView.rx.items(dataSource: dataSource))</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="10-4-数据刷新"><a href="#10-4-数据刷新" class="headerlink" title="10.4 数据刷新"></a>10.4 数据刷新</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let refreshButton: UIBarButtonItem &#x3D; UIBarButtonItem(title: &quot;Refresh&quot;, style: .plain, target: self, action: nil)</span><br><span class="line"></span><br><span class="line">let randomResult &#x3D; refreshButton.rx.tap</span><br><span class="line">    .startWith(())&#x2F;&#x2F;一开始就能自动请求一次数据</span><br><span class="line">    .flatMapLatest(getRandomResult)&#x2F;&#x2F;多次请求取最后一次</span><br><span class="line">    .share()</span><br><span class="line"></span><br><span class="line">let dataSource &#x3D; RxTableViewSectionedReloadDataSource&lt;SectionModel&lt;String, Int&gt;&gt; &#123; dataSource, tableView, indexPath, element in</span><br><span class="line">    let cell &#x3D; tableView.dequeueReusableCell(withIdentifier: &quot;Cell&quot;)!</span><br><span class="line">    cell.textLabel?.text &#x3D; &quot;\(indexPath.row): \(element)&quot;</span><br><span class="line">    return cell</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">randomResult</span><br><span class="line">    .bind(to: tableView.rx.items(dataSource: dataSource))</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">func getRandomResult() -&gt; Observable&lt;[SectionModel&lt;String, Int&gt;]&gt;&#123;</span><br><span class="line">        print(&quot;请求数据..&quot;)</span><br><span class="line">        let items &#x3D; (0..&lt;5).map &#123; _ in</span><br><span class="line">            Int(arc4random())</span><br><span class="line">        &#125;</span><br><span class="line">        let observable &#x3D; Observable.just([SectionModel(model: &quot;S&quot;, items: items)])</span><br><span class="line">        return observable.delay(RxTimeInterval.seconds(2), scheduler: MainScheduler.instance)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>也可以在源头进行限制，1秒内多次点击只取最后一次</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let randomResult &#x3D; refreshButton.rx.tap</span><br><span class="line">    .throttle(RxTimeInterval.seconds(1), scheduler: MainScheduler.instance)</span><br><span class="line">    .startWith(())&#x2F;&#x2F;一开始就能自动请求一次数据</span><br><span class="line">    .share()</span><br></pre></td></tr></table></figure>

<ul>
<li> 停止数据请求</li>
</ul>
<p>使用 takeUntil，当 takeUntil 中的 Observable 发送一个值时，便会结束对应的 Observable</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let stopButton: UIBarButtonItem &#x3D; UIBarButtonItem(title: &quot;Cancel&quot;, style: .plain, target: self, action: nil)</span><br><span class="line"></span><br><span class="line">let randomResult &#x3D; refreshButton.rx.tap</span><br><span class="line">    .startWith(())&#x2F;&#x2F;一开始就能自动请求一次数据</span><br><span class="line">    .flatMapLatest &#123;</span><br><span class="line">        self.getRandomResult().takeUntil(self.stopButton.rx.tap)</span><br><span class="line">    &#125;.share()</span><br></pre></td></tr></table></figure>

<h5 id="10-5-搜索过滤"><a href="#10-5-搜索过滤" class="headerlink" title="10.5 搜索过滤"></a>10.5 搜索过滤</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var searchBar: UISearchBar!</span><br><span class="line">tableView.tableHeaderView &#x3D; searchBar</span><br><span class="line"></span><br><span class="line">let randomResult &#x3D; refreshButton.rx.tap</span><br><span class="line">    .startWith(())&#x2F;&#x2F;一开始就能自动请求一次数据</span><br><span class="line">    .flatMapLatest &#123;</span><br><span class="line">        self.getRandomResult().takeUntil(self.stopButton.rx.tap)</span><br><span class="line">    &#125;</span><br><span class="line">    .flatMapLatest(filterResult)</span><br><span class="line">    .share()</span><br><span class="line">      </span><br><span class="line">func filterResult(data: [SectionModel&lt;String, Int&gt;]) -&gt; Observable&lt;[SectionModel&lt;String, Int&gt;]&gt; &#123;</span><br><span class="line">    self.searchBar.rx.text.orEmpty.flatMapLatest &#123; query -&gt; Observable&lt;[SectionModel&lt;String, Int&gt;]&gt; in</span><br><span class="line">        print(&quot;筛选数据(条件为：\(query)&quot;)</span><br><span class="line">        if query.isEmpty &#123;</span><br><span class="line">            return Observable.just(data)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            var newData: [SectionModel&lt;String, Int&gt;] &#x3D; []</span><br><span class="line">            for sectionModel in data &#123;</span><br><span class="line">                let items &#x3D; sectionModel.items.filter &#123; &quot;\($0)&quot;.contains(query) &#125;</span><br><span class="line">                newData.append(SectionModel(model: sectionModel.model, items: items))</span><br><span class="line">            &#125;</span><br><span class="line">            return Observable.just(newData)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="10-6-可编辑表格"><a href="#10-6-可编辑表格" class="headerlink" title="10.6 可编辑表格"></a>10.6 可编辑表格</h5><p>定义各种操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum TableEditingCommand &#123;</span><br><span class="line">    case setItems(items: [String])</span><br><span class="line">    case addItem(item: String)</span><br><span class="line">    case moveItem(from: IndexPath, to: IndexPath)</span><br><span class="line">    case deleteItem(IndexPath)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义ViewModel，保存除了表格数据外，还包含4个操作指令的具体实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct TableViewModel &#123;</span><br><span class="line">    fileprivate var items: [String]</span><br><span class="line">    </span><br><span class="line">    init(items: [String] &#x3D; []) &#123;</span><br><span class="line">        self.items &#x3D; items</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func execute(command: TableEditingCommand) -&gt; TableViewModel &#123;</span><br><span class="line">        switch command &#123;</span><br><span class="line">        case .setItems(let items):</span><br><span class="line">            print(&quot;设置表格数据&quot;)</span><br><span class="line">            return TableViewModel(items: items)</span><br><span class="line">        case .addItem(let item):</span><br><span class="line">            print(&quot;新增数据&quot;)</span><br><span class="line">            var items &#x3D; self.items</span><br><span class="line">            items.append(item)</span><br><span class="line">            return TableViewModel(items: items)</span><br><span class="line">        case .moveItem(let from, let to):</span><br><span class="line">            print(&quot;移动数据&quot;)</span><br><span class="line">            var items &#x3D; self.items</span><br><span class="line">            items.insert(items.remove(at: from.row), at: to.row)</span><br><span class="line">            return TableViewModel(items: items)</span><br><span class="line">        case .deleteItem(let indexPath):</span><br><span class="line">            print(&quot;删除数据项&quot;)</span><br><span class="line">            var items &#x3D; self.items</span><br><span class="line">            items.remove(at: indexPath.row)</span><br><span class="line">            return TableViewModel(items: items)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ViewController</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line"></span><br><span class="line">    let disposeBag &#x3D; DisposeBag()</span><br><span class="line">    </span><br><span class="line">    var tableView: UITableView!</span><br><span class="line">    </span><br><span class="line">    let refreshButton: UIBarButtonItem &#x3D; UIBarButtonItem(title: &quot;Refresh&quot;, style: .plain, target: self, action: nil)</span><br><span class="line">    let addButton    : UIBarButtonItem &#x3D; UIBarButtonItem(title: &quot;Add&quot;, style: .plain, target: self, action: nil)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        self.tableView &#x3D; UITableView(frame: view.frame, style: .plain)</span><br><span class="line">        self.tableView.register(UITableViewCell.self, forCellReuseIdentifier: &quot;Cell&quot;)</span><br><span class="line">        self.view.addSubview(tableView)</span><br><span class="line"></span><br><span class="line">        navigationItem.leftBarButtonItem  &#x3D; addButton</span><br><span class="line">        navigationItem.rightBarButtonItem &#x3D; refreshButton</span><br><span class="line">        </span><br><span class="line">        let initialVM &#x3D; TableViewModel()</span><br><span class="line">        </span><br><span class="line">        let refreshCommand &#x3D; refreshButton.rx.tap</span><br><span class="line">            .startWith(())</span><br><span class="line">            .flatMapLatest(getRandomResult)</span><br><span class="line">            .map(TableEditingCommand.setItems)</span><br><span class="line">        </span><br><span class="line">        let addCommand &#x3D; addButton.rx.tap</span><br><span class="line">            .map &#123; &quot;\(arc4random())&quot; &#125;</span><br><span class="line">            .map(TableEditingCommand.addItem)</span><br><span class="line">        </span><br><span class="line">        let moveCommand &#x3D; tableView.rx.itemMoved</span><br><span class="line">            .map (TableEditingCommand.moveItem)</span><br><span class="line">        </span><br><span class="line">        let deleteCommand &#x3D; tableView.rx.itemDeleted</span><br><span class="line">            .map(TableEditingCommand.deleteItem)</span><br><span class="line">        </span><br><span class="line">        Observable.of(refreshCommand, addCommand, moveCommand, deleteCommand)</span><br><span class="line">            .merge()</span><br><span class="line">            .scan(initialVM) &#123; (vm: TableViewModel, command: TableEditingCommand) -&gt; TableViewModel  in</span><br><span class="line">                return vm.execute(command: command)</span><br><span class="line">            &#125;</span><br><span class="line">            .startWith(initialVM)</span><br><span class="line">            .map &#123;</span><br><span class="line">                [AnimatableSectionModel(model: &quot;&quot;, items: $0.items)]</span><br><span class="line">            &#125;</span><br><span class="line">            .share()</span><br><span class="line">            .bind(to: tableView.rx.items(dataSource: ViewController.dataSource()))</span><br><span class="line">            .disposed(by: disposeBag)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func getRandomResult() -&gt; Observable&lt;[String]&gt; &#123;</span><br><span class="line">        print(&quot;生成随机数&quot;)</span><br><span class="line">        let items &#x3D; (0..&lt;5).map &#123; _ in</span><br><span class="line">            &quot;\(arc4random())&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        return Observable.just(items)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override func viewDidAppear(_ animated: Bool) &#123;</span><br><span class="line">        super.viewDidAppear(animated)</span><br><span class="line">        tableView.setEditing(true, animated: true)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">extension ViewController &#123;</span><br><span class="line"></span><br><span class="line">    static func dataSource() -&gt; RxTableViewSectionedAnimatedDataSource&lt;AnimatableSectionModel&lt;String, String&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">        let configuration: AnimationConfiguration &#x3D;</span><br><span class="line">            AnimationConfiguration(insertAnimation: .top,</span><br><span class="line">                                   reloadAnimation: .fade,</span><br><span class="line">                                   deleteAnimation: .left)</span><br><span class="line"></span><br><span class="line">        return RxTableViewSectionedAnimatedDataSource(</span><br><span class="line">            animationConfiguration: configuration) &#123; dataSource, tv, indexPath, element in</span><br><span class="line">            let cell &#x3D; tv.dequeueReusableCell(withIdentifier: &quot;Cell&quot;)!</span><br><span class="line">            cell.textLabel?.text &#x3D; &quot;条目：\(indexPath.row) \(element)&quot;</span><br><span class="line">            return cell</span><br><span class="line">        &#125; canEditRowAtIndexPath: &#123; _, _ in</span><br><span class="line">            return true</span><br><span class="line">        &#125; canMoveRowAtIndexPath: &#123; _, _ in</span><br><span class="line">            return true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="10-7-不同类型-Cell"><a href="#10-7-不同类型-Cell" class="headerlink" title="10.7 不同类型 Cell"></a>10.7 不同类型 Cell</h5>]]></content>
  </entry>
  <entry>
    <title>RxSwift（二）操作符</title>
    <url>/2021/09/03/RxSwift%EF%BC%88%E4%BA%8C%EF%BC%89%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
    <content><![CDATA[<h4 id="1-变换操作"><a href="#1-变换操作" class="headerlink" title="1 变换操作"></a>1 变换操作</h4><p>对原始的Observable序列进行一些转换</p>
<h5 id="1-1-buffer"><a href="#1-1-buffer" class="headerlink" title="1.1 buffer"></a>1.1 buffer</h5><p>缓冲组合，参数1缓冲时间，参数2缓冲个数，参数3线程<br>缓存Observable中发出的元素，元素达到某个数量或经过特定时间，就将元素集合发送出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;每缓存3个元素则组合一起发出来</span><br><span class="line">&#x2F;&#x2F;如果1秒内不够3个也会发出（有几个发几个，一个没有发[]）</span><br><span class="line">subject</span><br><span class="line">    .buffer(timeSpan: RxTimeInterval.seconds(1), count: 3, scheduler: MainScheduler.instance)</span><br><span class="line">    .subscribe(onNext: &#123; print($0)&#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject.onNext(&quot;a&quot;)</span><br><span class="line">subject.onNext(&quot;b&quot;)</span><br><span class="line">subject.onNext(&quot;c&quot;)</span><br><span class="line"></span><br><span class="line">subject.onNext(&quot;1&quot;)</span><br><span class="line">subject.onNext(&quot;2&quot;)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="line">[&quot;1&quot;, &quot;2&quot;]</span><br><span class="line">[]</span><br><span class="line">[]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h5 id="1-2-window"><a href="#1-2-window" class="headerlink" title="1.2 window"></a>1.2 window</h5><p>和 buffer 类似，Buffer是周期性的将缓存的元素集合发送出来，window周期性的将元素集合以observable形态发送出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line"></span><br><span class="line">subject</span><br><span class="line">    .window(timeSpan: RxTimeInterval.seconds(1), count: 3, scheduler: MainScheduler.instance)</span><br><span class="line">    .subscribe(onNext: &#123;</span><br><span class="line">        print($0)</span><br><span class="line">        $0.subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">          .disposed(by: self.disposeBag)</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject.onNext(&quot;a&quot;)</span><br><span class="line">subject.onNext(&quot;b&quot;)</span><br><span class="line">subject.onNext(&quot;c&quot;)</span><br><span class="line"></span><br><span class="line">subject.onNext(&quot;1&quot;)</span><br><span class="line">subject.onNext(&quot;2&quot;)</span><br><span class="line">  </span><br><span class="line">结果：</span><br><span class="line">RxSwift.AddRef&lt;Swift.String&gt;</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">RxSwift.AddRef&lt;Swift.String&gt;</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">RxSwift.AddRef&lt;Swift.String&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h5 id="1-3-map"><a href="#1-3-map" class="headerlink" title="1.3 map"></a>1.3 map</h5><p>传入一个函数闭包，把原来observable序列转变为一个新的observable序列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">    .map &#123; $0 * 10 &#125;</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="4-4-flatMap"><a href="#4-4-flatMap" class="headerlink" title="4.4 flatMap"></a>4.4 flatMap</h5><p><code>map </code>做转换的时候容易出现升维情况，转变后，从一个序列变为一个序列的序列<br><code>flatMap</code> 会对源observable的每个元素应用一个转换方法，转换成observables，然后将这些observables元素合并后发送出来，即又将其降维成一个observable序列</p>
<p>Observable 的元素本生拥有其他的 Observable 时，我们可以将所有子 Observables 的元素发送出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject1 &#x3D; BehaviorSubject(value: &quot;A&quot;)</span><br><span class="line">let subject2 &#x3D; BehaviorSubject(value: &quot;1&quot;)</span><br><span class="line"></span><br><span class="line">let replay &#x3D; BehaviorRelay(value: subject1)</span><br><span class="line">replay.asObservable()</span><br><span class="line">    .flatMap&#123; $0 &#125;</span><br><span class="line">    .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject1.onNext(&quot;B&quot;)</span><br><span class="line">replay.accept(subject2)</span><br><span class="line">subject2.onNext(&quot;2&quot;)</span><br><span class="line">subject1.onNext(&quot;C&quot;)</span><br><span class="line">      </span><br><span class="line">结果：</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">C</span><br></pre></td></tr></table></figure>

<h5 id="4-5-flatMapLatest"><a href="#4-5-flatMapLatest" class="headerlink" title="4.5 flatMapLatest"></a>4.5 flatMapLatest</h5><p>和flatMap唯一区别，只会接收最新的value事件<br>将flatMap的例子替换成flatMapLatest</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A</span><br><span class="line">B</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h5 id="1-6-flatMapFirst"><a href="#1-6-flatMapFirst" class="headerlink" title="1.6 flatMapFirst"></a>1.6 flatMapFirst</h5><p>和flatMapLatest相反，只接收最初value事件</p>
<p>可以防止重复请求<br>如：点击按钮发送请求，请求完成前，该按钮点击都不应该继续发送请求</p>
<p>将flatMap的例子替换成 flatMapFirst</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br></pre></td></tr></table></figure>

<h5 id="4-7-concatMap"><a href="#4-7-concatMap" class="headerlink" title="4.7 concatMap"></a>4.7 concatMap</h5><p>和flatMap区别：前一个Observable元素发送完毕后，后一个Observable才可以开始发出元素。<br>等待前一个Observable产生完成事件后，才对后一个Observable进行订阅</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject1 &#x3D; BehaviorSubject(value: &quot;A&quot;)</span><br><span class="line">let subject2 &#x3D; BehaviorSubject(value: &quot;1&quot;)</span><br><span class="line"></span><br><span class="line">let replay &#x3D; BehaviorRelay(value: subject1)</span><br><span class="line">replay</span><br><span class="line">    .concatMap &#123; $0 &#125;</span><br><span class="line">    .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject1.onNext(&quot;B&quot;)</span><br><span class="line">replay.accept(subject2)</span><br><span class="line">subject2.onNext(&quot;2&quot;)</span><br><span class="line">subject1.onNext(&quot;C&quot;)</span><br><span class="line">subject1.onCompleted() &#x2F;&#x2F;只有前一个序列结束，才能接收下一个序列 如果没有complete 只输出 A B C</span><br><span class="line">结果：</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h5 id="4-8-scan"><a href="#4-8-scan" class="headerlink" title="4.8 scan"></a>4.8 scan</h5><p>先给一个初始化的数，然后不断拿前一个结果和最新值进行处理操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3, 4, 6)</span><br><span class="line">    .scan(0) &#123; acum, elem in</span><br><span class="line">        acum + elem</span><br><span class="line">    &#125;</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">结果：</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">10</span><br><span class="line">16</span><br></pre></td></tr></table></figure>

<h5 id="1-9-groupBy"><a href="#1-9-groupBy" class="headerlink" title="1.9 groupBy"></a>1.9 groupBy</h5><p>将源Observable分解为多个子Observable，然后将子Observable发送出来<br>会将元素通过某个键进行分组，然后将分组后的元素序列以Observable形态发送出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable&lt;Int&gt;.of(0, 1, 2, 3, 4, 5)</span><br><span class="line">    .groupBy &#123; element -&gt; String in</span><br><span class="line">        return element % 2 &#x3D;&#x3D; 0 ? &quot;偶数&quot;:&quot;奇数&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    .subscribe &#123; event in</span><br><span class="line">        switch event &#123;</span><br><span class="line">        case .next(let group):</span><br><span class="line">            group</span><br><span class="line">                .subscribe(onNext: &#123; print(&quot;key:\(group.key) \($0)&quot;) &#125;)</span><br><span class="line">                .disposed(by: self.disposeBag)</span><br><span class="line">        default:</span><br><span class="line">            print(&quot;&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.disposed(by: disposeBag)</span><br><span class="line">结果：</span><br><span class="line">key:奇数 1</span><br><span class="line">key:偶数 2</span><br><span class="line">key:奇数 3</span><br><span class="line">key:偶数 4</span><br><span class="line">key:奇数 5</span><br></pre></td></tr></table></figure>

<h4 id="2-过滤操作符"><a href="#2-过滤操作符" class="headerlink" title="2 过滤操作符"></a>2 过滤操作符</h4><p>从源Observable中选择特定的数据发送出来</p>
<h5 id="2-1-filter"><a href="#2-1-filter" class="headerlink" title="2.1 filter"></a>2.1 filter</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 10, 12)</span><br><span class="line">    .filter &#123;$0 &gt; 10&#125;</span><br><span class="line">    .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">&#x2F;&#x2F;结果：12</span><br></pre></td></tr></table></figure>

<h5 id="2-2-distinctUntilChanged"><a href="#2-2-distinctUntilChanged" class="headerlink" title="2.2 distinctUntilChanged"></a>2.2 distinctUntilChanged</h5><p>过滤掉连续重复事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 1, 10, 1)</span><br><span class="line">    .distinctUntilChanged()</span><br><span class="line">    .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">结果</span><br><span class="line">1</span><br><span class="line">10</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h5 id="2-3-single"><a href="#2-3-single" class="headerlink" title="2.3 single"></a>2.3 single</h5><p>限制只发送一次事件，或满足条件的第一个事件<br>如果存在多个事件或没有事件会发出一个error<br>如果只有一个事件，则不会发出error事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">    .single&#123;$0 &#x3D;&#x3D; 2&#125;</span><br><span class="line">    .subscribe(onNext: &#123;print($0)&#125;) &#x2F;&#x2F;结果 2</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">   </span><br><span class="line">Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">            .single()</span><br><span class="line">            .subscribe(onNext: &#123;print($0)&#125;, onError: &#123; error in</span><br><span class="line">                print(error)</span><br><span class="line">            &#125;)</span><br><span class="line">            .disposed(by: disposeBag)</span><br><span class="line">结果：</span><br><span class="line">A</span><br><span class="line">Sequence contains more than one element.</span><br></pre></td></tr></table></figure>

<h5 id="2-4-elementAt"><a href="#2-4-elementAt" class="headerlink" title="2.4 elementAt"></a>2.4 elementAt</h5><p>只处理指定位置事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">    .elementAt(2)</span><br><span class="line">    .subscribe(onNext: &#123;print($0)&#125;) &#x2F;&#x2F;3</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="2-5-ignoreElements"><a href="#2-5-ignoreElements" class="headerlink" title="2.5 ignoreElements"></a>2.5 ignoreElements</h5><p>可以忽略所有元素，只发出error或complete事件<br>如果并不关心Observable任何元素，只想知道Observable在什么时候终止，可以用ignoreElements</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">    .ignoreElements()</span><br><span class="line">    .subscribe&#123;print($0)&#125; &#x2F;&#x2F;completed</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="2-6-take"><a href="#2-6-take" class="headerlink" title="2.6 take"></a>2.6 take</h5><p>实现仅发送Observable序列前n个事件，满足数量后自动.complete</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">   .take(2)</span><br><span class="line">   .subscribe&#123;print($0)&#125;</span><br><span class="line">   .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="2-7-takeLast"><a href="#2-7-takeLast" class="headerlink" title="2.7 takeLast"></a>2.7 takeLast</h5><p>仅发送Observable序列中的后n个元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">   .takeLast(1)</span><br><span class="line">   .subscribe&#123;print($0)&#125;</span><br><span class="line">   .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="2-8-skip"><a href="#2-8-skip" class="headerlink" title="2.8 skip"></a>2.8 skip</h5><p>跳过源Observable序列发出的前n个事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">   .skip(2)</span><br><span class="line">   .subscribe&#123;print($0)&#125;</span><br><span class="line">   .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="2-9-Sample"><a href="#2-9-Sample" class="headerlink" title="2.9 Sample"></a>2.9 Sample</h5><p>除了订阅源Observable外，还能监视另外一个Observable，即notifier<br>每当收到notifier事件，就会从源序列取一个最新事件发送</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let source &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">let notifier &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line"> </span><br><span class="line">source</span><br><span class="line">    .sample(notifier)</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"> </span><br><span class="line">source.onNext(1)</span><br><span class="line">&#x2F;&#x2F;让源序列接收接收消息</span><br><span class="line">notifier.onNext(&quot;A&quot;)</span><br><span class="line">source.onNext(2)</span><br><span class="line">&#x2F;&#x2F;让源序列接收接收消息</span><br><span class="line">notifier.onNext(&quot;B&quot;)</span><br><span class="line">notifier.onNext(&quot;C&quot;)</span><br><span class="line">source.onNext(3)</span><br><span class="line">source.onNext(4)</span><br><span class="line">&#x2F;&#x2F;让源序列接收接收消息</span><br><span class="line">notifier.onNext(&quot;D&quot;)</span><br><span class="line">source.onNext(5)</span><br><span class="line">&#x2F;&#x2F;让源序列接收接收消息</span><br><span class="line">notifier.onCompleted()</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h5 id="2-10-debounce"><a href="#2-10-debounce" class="headerlink" title="2.10 debounce"></a>2.10 debounce</h5><p>可以过滤掉高频产生的元素<br>队列中的元素如果和下一个元素的间隔小于了指定时间间隔，那这元素将被过滤掉<br>常用在输入的时候，不需要每个字母敲进去都发送一个事件，而是稍等下取最后一个事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let times &#x3D; [</span><br><span class="line">    [ &quot;value&quot;: 1, &quot;time&quot;: 100 ], &#x2F;&#x2F;0.1s</span><br><span class="line">    [ &quot;value&quot;: 2, &quot;time&quot;: 110 ],</span><br><span class="line">    [ &quot;value&quot;: 3, &quot;time&quot;: 120 ],</span><br><span class="line">    [ &quot;value&quot;: 4, &quot;time&quot;: 120 ],</span><br><span class="line">    [ &quot;value&quot;: 5, &quot;time&quot;: 140 ],</span><br><span class="line">    [ &quot;value&quot;: 6, &quot;time&quot;: 210 ]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Observable.from(times)</span><br><span class="line">    </span><br><span class="line">    .flatMap &#123; item in</span><br><span class="line">        return Observable.of(Int(item[&quot;value&quot;]!))</span><br><span class="line">            .delay(RxTimeInterval.milliseconds(Int(item[&quot;time&quot;]!)), scheduler: MainScheduler.instance)</span><br><span class="line">    &#125;</span><br><span class="line">    .debounce(RxTimeInterval.milliseconds(500), scheduler: MainScheduler.instance)</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)&#x2F;&#x2F;只发出与下一个间隔超过0.5s的元素</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h4 id="3-条件与布尔操作符"><a href="#3-条件与布尔操作符" class="headerlink" title="3 条件与布尔操作符"></a>3 条件与布尔操作符</h4><h5 id="3-1-amb"><a href="#3-1-amb" class="headerlink" title="3.1 amb"></a>3.1 amb</h5><p>传入多个Observables到amb操作符，将取第一个发出元素或产生事件的Observable，然后只发出它的元素，忽略其它Observable</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject1 &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">let subject2 &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">let subject3 &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line"></span><br><span class="line">subject1</span><br><span class="line">.amb(subject2)</span><br><span class="line">.amb(subject3)</span><br><span class="line">.subscribe&#123;print($0)&#125;</span><br><span class="line">.disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject2.onNext(1)&#x2F;&#x2F;最先发</span><br><span class="line">subject1.onNext(20)</span><br><span class="line">subject2.onNext(2)</span><br><span class="line">subject1.onNext(40)</span><br><span class="line">subject3.onNext(0)</span><br><span class="line">subject2.onNext(3)</span><br><span class="line">subject1.onNext(60)</span><br><span class="line">subject3.onNext(0)</span><br><span class="line">subject3.onNext(0)</span><br><span class="line">结果：</span><br><span class="line">next(1)</span><br><span class="line">next(2)</span><br><span class="line">next(3)</span><br></pre></td></tr></table></figure>

<h5 id="3-2-takeWhile"><a href="#3-2-takeWhile" class="headerlink" title="3.2 takeWhile"></a>3.2 takeWhile</h5><p>依次判断Observable序列每个值是否满足条件，第一个不满足值出现，便自动完成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">    .takeWhile&#123; $0 &lt; 2&#125;</span><br><span class="line">    .subscribe&#123;print($0)&#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="3-3-takeUntil"><a href="#3-3-takeUntil" class="headerlink" title="3.3 takeUntil"></a>3.3 takeUntil</h5><p>可以监听另外一个Observable，即notifier<br>notifier发出值或complete通知，源Observable便自动完成，停止发送事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let source &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">let notifier &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line"> </span><br><span class="line">source</span><br><span class="line">    .takeUntil(notifier)</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"> </span><br><span class="line">source.onNext(&quot;a&quot;)</span><br><span class="line">source.onNext(&quot;b&quot;)</span><br><span class="line">source.onNext(&quot;c&quot;)</span><br><span class="line">source.onNext(&quot;d&quot;)</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;停止接收消息</span><br><span class="line">notifier.onNext(&quot;z&quot;)</span><br><span class="line"> </span><br><span class="line">source.onNext(&quot;e&quot;)</span><br><span class="line">source.onNext(&quot;f&quot;)</span><br><span class="line">source.onNext(&quot;g&quot;)</span><br><span class="line">结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br></pre></td></tr></table></figure>

<h5 id="3-4-skipWhile"><a href="#3-4-skipWhile" class="headerlink" title="3.4 skipWhile"></a>3.4 skipWhile</h5><p>跳过前面满足条件的事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(2, 3, 4, 5, 6)</span><br><span class="line">    .skipWhile &#123; $0 &lt; 4 &#125;</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="3-5-skipUntil"><a href="#3-5-skipUntil" class="headerlink" title="3.5 skipUntil"></a>3.5 skipUntil</h5><p>类似takeUntil，还可以监听另外一个Observable<br>和takeUntil相反，默认会一直跳过，直到notifier发出值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let source &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">let notifier &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line"> </span><br><span class="line">source</span><br><span class="line">    .skipUntil(notifier)</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"> </span><br><span class="line">source.onNext(1)</span><br><span class="line">source.onNext(2)</span><br><span class="line">source.onNext(3)</span><br><span class="line">source.onNext(4)</span><br><span class="line">source.onNext(5)</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;开始接收消息</span><br><span class="line">notifier.onNext(0)</span><br><span class="line">source.onNext(6)</span><br><span class="line">source.onNext(7)</span><br><span class="line">source.onNext(8)</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;仍然接收消息</span><br><span class="line">notifier.onNext(0)</span><br><span class="line">source.onNext(9)</span><br><span class="line">结果：</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure>

<h4 id="4-结合操作符"><a href="#4-结合操作符" class="headerlink" title="4 结合操作符"></a>4 结合操作符</h4><p>将多个Observable序列进行组合，拼装成一个新的Observable</p>
<h5 id="4-1-startWith"><a href="#4-1-startWith" class="headerlink" title="4.1 startWith"></a>4.1 startWith</h5><p>在Observable序列开始前插入一些事件元素，也可以多次startWith</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(2, 3)</span><br><span class="line">    .startWith(1)</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="4-2-merge"><a href="#4-2-merge" class="headerlink" title="4.2 merge"></a>4.2 merge</h5><p>将多个Observable序列合并成一个Observable序列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject1 &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">let subject2 &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line"></span><br><span class="line">Observable.of(subject1, subject2)</span><br><span class="line">    .merge()</span><br><span class="line">    .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject1.onNext(20)</span><br><span class="line">subject1.onNext(60)</span><br><span class="line">subject2.onNext(1)</span><br><span class="line">subject1.onNext(80)</span><br><span class="line">subject2.onNext(1)</span><br><span class="line">结果：</span><br><span class="line">20</span><br><span class="line">60</span><br><span class="line">1</span><br><span class="line">80</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h5 id="4-3-zip"><a href="#4-3-zip" class="headerlink" title="4.3 zip"></a>4.3 zip</h5><p>多个Observable序列压缩成一个Observable序列<br>会等每个Observables事件一一对应凑齐后合并</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject1 &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">let subject2 &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line"></span><br><span class="line">Observable.zip(subject1, subject2) &#123;</span><br><span class="line">        &quot;\($0)\($1)&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject1.onNext(1)</span><br><span class="line">subject2.onNext(&quot;A&quot;)</span><br><span class="line">subject1.onNext(2)</span><br><span class="line">subject2.onNext(&quot;B&quot;)</span><br><span class="line">subject2.onNext(&quot;C&quot;)</span><br><span class="line">subject2.onNext(&quot;D&quot;)</span><br><span class="line">subject1.onNext(3)</span><br><span class="line">subject1.onNext(4)</span><br><span class="line">subject1.onNext(5)</span><br><span class="line">结果：</span><br><span class="line">1A</span><br><span class="line">2B</span><br><span class="line">3C</span><br><span class="line">4D</span><br></pre></td></tr></table></figure>

<p>常用在整合网络请求上，只有当两请求成功后，再两者结果整合起来继续往下处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;第一个请求</span><br><span class="line">let userRequest: Observable&lt;User&gt; &#x3D; API.getUser(&quot;me&quot;)</span><br><span class="line">&#x2F;&#x2F;第二个请求</span><br><span class="line">let friendsRequest: Observable&lt;Friends&gt; &#x3D; API.getFriends(&quot;me&quot;)</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;将两个请求合并处理</span><br><span class="line">Observable.zip(userRequest, friendsRequest) &#123;</span><br><span class="line">        user, friends in</span><br><span class="line">        &#x2F;&#x2F;将两个信号合并成一个信号，并压缩成一个元组返回（两个信号均成功）</span><br><span class="line">        return (user, friends)</span><br><span class="line">    &#125;</span><br><span class="line">    .observeOn(MainScheduler.instance) &#x2F;&#x2F;加这个是应为请求在后台线程，下面的绑定在前台线程。</span><br><span class="line">    .subscribe(onNext: &#123; (user, friends) in</span><br><span class="line">        &#x2F;&#x2F;将数据绑定到界面上</span><br><span class="line">        &#x2F;&#x2F;.......</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="4-4-combineLatest"><a href="#4-4-combineLatest" class="headerlink" title="4.4 combineLatest"></a>4.4 combineLatest</h5><p>将多个Observable序列元素进行合并<br>和zip不同的是，任意一个Observable有新事件发出，会将每个Observable序列的最新事件元素进行合并</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject1 &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">let subject2 &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line"> </span><br><span class="line">Observable.combineLatest(subject1, subject2) &#123;</span><br><span class="line">    &quot;\($0)\($1)&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"> </span><br><span class="line">subject1.onNext(1)</span><br><span class="line">subject2.onNext(&quot;A&quot;)</span><br><span class="line">subject1.onNext(2)</span><br><span class="line">subject2.onNext(&quot;B&quot;)</span><br><span class="line">subject2.onNext(&quot;C&quot;)</span><br><span class="line">subject2.onNext(&quot;D&quot;)</span><br><span class="line">subject1.onNext(3)</span><br><span class="line">subject1.onNext(4)</span><br><span class="line">subject1.onNext(5)</span><br><span class="line">结果：</span><br><span class="line">1A</span><br><span class="line">2A</span><br><span class="line">2B</span><br><span class="line">2C</span><br><span class="line">3D</span><br><span class="line">4D</span><br><span class="line">5D</span><br></pre></td></tr></table></figure>

<h5 id="4-5-withLatestFrom"><a href="#4-5-withLatestFrom" class="headerlink" title="4.5 withLatestFrom"></a>4.5 withLatestFrom</h5><p>将两个Observable序列合并为一个，self队列 发射一个元素时，就从第二个序列中取最新的一个值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject1 &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">let subject2 &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line"> </span><br><span class="line">subject1.withLatestFrom(subject2)</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"> </span><br><span class="line">subject1.onNext(&quot;A&quot;)</span><br><span class="line">subject2.onNext(&quot;1&quot;)</span><br><span class="line">subject1.onNext(&quot;B&quot;)</span><br><span class="line">subject1.onNext(&quot;C&quot;)</span><br><span class="line">subject2.onNext(&quot;2&quot;)</span><br><span class="line">subject1.onNext(&quot;D&quot;)</span><br><span class="line">结果：</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h5 id="4-6-switchLatest"><a href="#4-6-switchLatest" class="headerlink" title="4.6 switchLatest"></a>4.6 switchLatest</h5><p>可以对事件流进行切换<br>如：本来监听Subject1，通过value更换事件源后变成监听Subject2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject1 &#x3D; BehaviorSubject(value: &quot;A&quot;)</span><br><span class="line">let subject2 &#x3D; BehaviorSubject(value: &quot;1&quot;)</span><br><span class="line">let replay &#x3D; BehaviorRelay(value: subject1)</span><br><span class="line">replay.asObservable()</span><br><span class="line">    .switchLatest()</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">subject1.onNext(&quot;B&quot;)</span><br><span class="line">subject1.onNext(&quot;C&quot;)</span><br><span class="line">&#x2F;&#x2F;改变事件源</span><br><span class="line">&#x2F;&#x2F;切换了源 不打印D 打印1 2</span><br><span class="line">replay.accept(subject2)</span><br><span class="line">subject1.onNext(&quot;D&quot;)</span><br><span class="line">subject2.onNext(&quot;2&quot;)</span><br><span class="line">&#x2F;&#x2F;改变事件源</span><br><span class="line">&#x2F;&#x2F;切换了源 不打印3 打印 D E</span><br><span class="line">replay.accept(subject1)</span><br><span class="line">subject2.onNext(&quot;3&quot;)</span><br><span class="line">subject1.onNext(&quot;E&quot;)</span><br><span class="line">结果：</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">D</span><br><span class="line">E</span><br></pre></td></tr></table></figure>

<h4 id="5-算术、聚合操作符"><a href="#5-算术、聚合操作符" class="headerlink" title="5 算术、聚合操作符"></a>5 算术、聚合操作符</h4><h5 id="5-1-toArray"><a href="#5-1-toArray" class="headerlink" title="5.1 toArray"></a>5.1 toArray</h5><p>将序列转成一个数组，并作为一个单一的事件发送</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">    .toArray()</span><br><span class="line">    .subscribe(onSuccess: &#123; print($0) &#125;) &#x2F;&#x2F;[1, 2, 3]</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="5-2-reduce"><a href="#5-2-reduce" class="headerlink" title="5.2 reduce"></a>5.2 reduce</h5><p>接受初始值和一个操作符<br>将给定初始值，和序列中每个值进行累计运算，等到最终结果，并将其作为单个值发送</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3, 4, 5)</span><br><span class="line">    .reduce(0, accumulator: +)</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;) &#x2F;&#x2F;15</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="5-3-concat"><a href="#5-3-concat" class="headerlink" title="5.3 concat"></a>5.3 concat</h5><p>把多个Observable序列合并（串联）为一个Observable序列<br>前一个Observable发出complete事件，才会开始发送下一个Observable序列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">subject1 &#x3D; BehaviorSubject(value: 1)</span><br><span class="line">let subject2 &#x3D; BehaviorSubject(value: 2)</span><br><span class="line">let replay &#x3D; BehaviorRelay(value: subject1)</span><br><span class="line">replay.asObservable()</span><br><span class="line">    .concat()</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">subject2.onNext(2)</span><br><span class="line">subject1.onNext(1)</span><br><span class="line">subject1.onNext(1)</span><br><span class="line">subject1.onCompleted()</span><br><span class="line">replay.accept(subject2)</span><br><span class="line">subject2.onNext(2)</span><br><span class="line">结果：</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h4 id="6-连接操作符"><a href="#6-连接操作符" class="headerlink" title="6 连接操作符"></a>6 连接操作符</h4><p>有订阅时不会立刻开始发送事件消息，只有当调用connect()之后才会开始发送消息<br>可以让所有订阅者订阅后，才开始发送事件消息，保证所有订阅者能接收到事件消息</p>
<p>对DispatchTime扩展 方便使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension DispatchTime: ExpressibleByIntegerLiteral &#123;</span><br><span class="line">    public init(integerLiteral value: Int) &#123;</span><br><span class="line">        self &#x3D; DispatchTime.now() + .seconds(value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extension DispatchTime: ExpressibleByFloatLiteral &#123;</span><br><span class="line">    public init(floatLiteral value: Double) &#123;</span><br><span class="line">        self &#x3D; DispatchTime.now() + .milliseconds(Int(value * 1000))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加延迟执行方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func delay(_ delay: Double, clousure: @escaping () -&gt; Void) &#123;</span><br><span class="line">    DispatchQueue.main.asyncAfter(deadline: DispatchTime(floatLiteral: delay)) &#123;</span><br><span class="line">        clousure()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-1-publish"><a href="#6-1-publish" class="headerlink" title="6.1 publish"></a>6.1 publish</h5><p>将正常序列转换成一个可连接序列，序列不会立刻发送事件，只有调用connect后才会开始</p>
<p>普通序列的样例<br>第一个订阅者订阅后每1秒接收一个值，第二个订阅者5秒后才收到第一个值0，所以两个订阅者接收到的值是不同步的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let interval &#x3D; Observable&lt;Int&gt;.interval(DispatchTimeInterval.seconds(1), scheduler: MainScheduler.instance)</span><br><span class="line">_ &#x3D; interval.subscribe(onNext: &#123; print(&quot;订阅1：\($0)&quot;) &#125;)</span><br><span class="line">delay(5) &#123;</span><br><span class="line">    _ &#x3D; interval.subscribe(onNext: &#123; print(&quot;订阅2：\($0)&quot;) &#125;)</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">订阅1：0</span><br><span class="line">订阅1：1</span><br><span class="line">订阅1：2</span><br><span class="line">订阅1：3</span><br><span class="line">订阅1：4</span><br><span class="line">订阅1：5</span><br><span class="line">订阅2：0 &#x2F;&#x2F;不同步</span><br><span class="line">订阅1：6</span><br><span class="line">订阅2：1</span><br></pre></td></tr></table></figure>

<p>使用publish</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let interval &#x3D; Observable&lt;Int&gt;.interval(DispatchTimeInterval.seconds(1), scheduler: MainScheduler.instance).publish()</span><br><span class="line">&#x2F;&#x2F;第一个订阅者（立刻开始订阅）</span><br><span class="line">_ &#x3D; interval.subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">&#x2F;&#x2F;相当于把事件推迟2秒</span><br><span class="line">delay(2) &#123;</span><br><span class="line">    _ &#x3D; interval.connect()</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;第2个订阅者 延迟5秒开始订阅</span><br><span class="line">delay(5) &#123;</span><br><span class="line">    _ &#x3D; interval.subscribe(onNext: &#123;print(&quot;订阅2 \($0)&quot;)&#125;)</span><br><span class="line">&#125;</span><br><span class="line">结果：&#x2F;&#x2F;输出同步</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">订阅2 2</span><br><span class="line">3</span><br><span class="line">订阅2 3</span><br><span class="line">4</span><br><span class="line">订阅2 4</span><br><span class="line">5</span><br><span class="line">订阅2 5</span><br></pre></td></tr></table></figure>

<h5 id="6-2-relay"><a href="#6-2-relay" class="headerlink" title="6.2 relay"></a>6.2 relay</h5><p>和publish一样<br>不同在于，新订阅者还能收到订阅之前的事件消息，由bufferSize决定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let interval &#x3D; Observable&lt;Int&gt;.interval(DispatchTimeInterval.seconds(1), scheduler: MainScheduler.instance).replay(3)</span><br><span class="line">_ &#x3D; interval.subscribe(onNext: &#123;print(&quot;订阅1 \($0)&quot;)&#125;)</span><br><span class="line">&#x2F;&#x2F;相当于把事件推迟2秒</span><br><span class="line">delay(2) &#123;</span><br><span class="line">    _ &#x3D; interval.connect()</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;第2个订阅者 延迟5秒开始订阅</span><br><span class="line">delay(5) &#123;</span><br><span class="line">    _ &#x3D; interval.subscribe(onNext: &#123;print(&quot;订阅2 \($0)&quot;)&#125;)</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">订阅1 0</span><br><span class="line">订阅1 1</span><br><span class="line">订阅2 0</span><br><span class="line">订阅2 1</span><br><span class="line">订阅1 2</span><br><span class="line">订阅2 2</span><br><span class="line">订阅1 3</span><br><span class="line">订阅2 3</span><br><span class="line">订阅1 4</span><br><span class="line">订阅2 4</span><br></pre></td></tr></table></figure>

<h5 id="6-3-multicast"><a href="#6-3-multicast" class="headerlink" title="6.3 multicast"></a>6.3 multicast</h5><p>同样是将序列转换成一个可连接序列<br>还可以传入一个subject，每当序列发送事件都会触发这个subject的发送</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">_ &#x3D; subject.subscribe(onNext: &#123;print(&quot;subject \($0)&quot;)&#125;)</span><br><span class="line"></span><br><span class="line">let interval &#x3D; Observable&lt;Int&gt;.interval(DispatchTimeInterval.seconds(1), scheduler: MainScheduler.instance).multicast(subject)</span><br><span class="line">_ &#x3D; interval.subscribe(onNext: &#123;print(&quot;订阅1 \($0)&quot;)&#125;)</span><br><span class="line">&#x2F;&#x2F;相当于把事件推迟2秒</span><br><span class="line">delay(2) &#123;</span><br><span class="line">    _ &#x3D; interval.connect()</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;第2个订阅者 延迟5秒开始订阅</span><br><span class="line">delay(5) &#123;</span><br><span class="line">    _ &#x3D; interval.subscribe(onNext: &#123;print(&quot;订阅2 \($0)&quot;)&#125;)</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">subject 0</span><br><span class="line">订阅1 0</span><br><span class="line">subject 1</span><br><span class="line">订阅1 1</span><br><span class="line">subject 2</span><br><span class="line">订阅1 2</span><br><span class="line">订阅2 2</span><br><span class="line">subject 3</span><br><span class="line">订阅1 3</span><br><span class="line">订阅2 3</span><br><span class="line">subject 4</span><br><span class="line">订阅1 4</span><br><span class="line">订阅2 4</span><br></pre></td></tr></table></figure>

<h5 id="6-4-refCount"><a href="#6-4-refCount" class="headerlink" title="6.4 refCount"></a>6.4 refCount</h5><p>可以将可被连接的observable转换为普通observable<br>可自动连接和断开可连接的observable，第一个观察者对可连接的observable订阅时，底层的observable将被自动连接，最后一个观察者离开时，底层的observable将自动断开连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let interval &#x3D; Observable&lt;Int&gt;.interval(DispatchTimeInterval.seconds(1), scheduler: MainScheduler.instance).publish().refCount()</span><br></pre></td></tr></table></figure>

<h5 id="6-5-share-relay"><a href="#6-5-share-relay" class="headerlink" title="6.5 share(relay:)"></a>6.5 share(relay:)</h5><p>使观察者共享源observable，并且缓存最新的n个元素，将这些元素直接发送给新的观察者<br>是replay和refCount组合</p>
<h4 id="7-其它操作符"><a href="#7-其它操作符" class="headerlink" title="7 其它操作符"></a>7 其它操作符</h4><h5 id="7-1-delay"><a href="#7-1-delay" class="headerlink" title="7.1 delay"></a>7.1 delay</h5><p>将observable所有元素拖延一段时间后发送出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">    .delay(DispatchTimeInterval.seconds(3), scheduler: MainScheduler.instance)</span><br><span class="line">.subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="10-2-delaySubscription"><a href="#10-2-delaySubscription" class="headerlink" title="10.2 delaySubscription"></a>10.2 delaySubscription</h5><p>进行延时订阅，经过设定时间后，才对observable订阅</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">    .delaySubscription(DispatchTimeInterval.seconds(3), scheduler: MainScheduler.instance)</span><br><span class="line">.subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="7-3-materialize"><a href="#7-3-materialize" class="headerlink" title="7.3 materialize"></a>7.3 materialize</h5><p>可将序列产生的事件，转换成元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">  .materialize()</span><br><span class="line">  .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">  .disposed(by: disposeBag)</span><br><span class="line">结果：</span><br><span class="line">next(1)</span><br><span class="line">next(2)</span><br><span class="line">next(3)</span><br><span class="line">completed</span><br></pre></td></tr></table></figure>

<h5 id="7-4-dematerialize"><a href="#7-4-dematerialize" class="headerlink" title="7.4 dematerialize"></a>7.4 dematerialize</h5><p>和materialize相反，将materialize转换后的元素还原</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">  .materialize()</span><br><span class="line">  .dematerialize()</span><br><span class="line">  .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">  .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="7-5-timeout"><a href="#7-5-timeout" class="headerlink" title="7.5 timeout"></a>7.5 timeout</h5><p>设置超时时间，源observable规定时间内没发出元素，就产生一个超时的error</p>
<h5 id="7-6-using"><a href="#7-6-using" class="headerlink" title="7.6 using"></a>7.6 using</h5><p>使用using创建observable时，同时会创建一个可被清除的资源，一旦observable终止，那这资源就被清除了</p>
<p><a href="https://www.hangge.com/blog/cache/detail_1922.html">RxSwift hangge.com</a></p>
]]></content>
  </entry>
  <entry>
    <title>dyld加载流程</title>
    <url>/2020/12/07/dyld%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h4><ul>
<li>库：编译好的二进制文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">源文件 -&gt; 预编译 -&gt; 编译 -&gt; 汇编 -&gt; 链接 -&gt; 可执行文件</span><br></pre></td></tr></table></figure>

<p><code>源文件</code>：.h、 .m、 .cpp 等文件</p>
<p><code>预编译</code>：替换宏、删除注释，产生 <code>.i</code> 文件</p>
<p><code>编译</code>：编译高级语言代码成汇编底层代码，生成汇编代码文件 <code>.s</code></p>
<p><code>汇编</code>：将汇编代码转变成机器可执行的指令 <code>.o</code></p>
<p><code>链接</code>：将引用的静态库与汇编生成的目标文件 <code>.o</code> 一起打包生成可执行文件</p>
<h4 id="动态库、静态库"><a href="#动态库、静态库" class="headerlink" title="动态库、静态库"></a>动态库、静态库</h4><ul>
<li>静态库 .a、 .lib</li>
</ul>
<p>在链接阶段，将汇编生成的目标文件.o与引用的库，一起链接打包到可执行文件</p>
<p>缺点：静态库会有两份，导致目标程序体积增大（编译时会直接拷贝一份，复制到目标程序里）</p>
<p>优点：编译完后，库文件就没有用了，目标程序没有外部依赖，可以直接运行</p>
<ul>
<li>动态库 .so</li>
</ul>
<p>编译时并不会链接到目标程序，只会存储指向动态库的引用，程序运行时才被载入</p>
<p>优点：多次使用共享内存，减少打包APP的体积</p>
<h4 id="dyld"><a href="#dyld" class="headerlink" title="dyld"></a>dyld</h4><p><code>dyld</code> ：动态库链接器，负责加载程序和程序依赖的动态库，内核读取 <code>Mach-O</code> 文件后，将读取内容交给 <code>dyld</code> 加载，<code>dyld</code> 加载完毕后才会执行 <code>main</code> 函数</p>
<p><code>dyld</code> 在系统中以一个用户态的可执行文件形式存在，一般应用程序会在 <code>Mach-O</code> 文件部分指定一个 <code>LC_LOAD_DYLINKER</code> 的加载命令，此加载命令指定了 <code>dyld</code> 的路径，通常默认值是 <code>/usr/lib/dyld</code></p>
<p>新建项目，在 <code>main</code> 函数中打断点，通过 <code>bt</code> 查看调用栈，看到 <code>App</code> 启动后会执行 <code>libdyld.dylib</code> 的 <code>start</code> 操作，这边调用栈的信息比较少</p>
<p><img src="/2020/12/07/dyld%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/%E5%90%AF%E5%8A%A8main%E6%96%AD%E7%82%B9.jpg" alt="启动main断点"></p>
<p>继续在  <code>ViewController</code> 中重写 <code>load</code> 方法 ，<code>load</code> 方法打断点，通过 <code>bt</code> 查看调用栈，发现一个 <code>_dyld_start</code> 的调用</p>
<p><img src="/2020/12/07/dyld%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/%E5%90%AF%E5%8A%A8load%E6%96%AD%E7%82%B9.jpg" alt="启动load断点"></p>
<p><code>dyld</code> 源码中搜索 <code>_dyld_start</code> ，可以在 <code>dyldStartup.s</code> 文件中找到 <code>_dyld_start</code> 的汇编实现，文件中按照 <code>i386</code>、<code>x86_64</code>、<code>arm64</code>、<code>arm</code> 不同架构做了逻辑处理</p>
<p>查看 <code>arm64</code> 架构下汇编源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __arm64__</span></span><br><span class="line">	.text</span><br><span class="line">	.align <span class="number">2</span></span><br><span class="line">	.globl __dyld_start</span><br><span class="line">__dyld_start:</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">// call dyldbootstrap::start(app_mh, argc, argv, dyld_mh, &amp;startGlue)</span></span><br><span class="line">	bl	__ZN13dyldbootstrap5startEPKN5dyld311MachOLoadedEiPPKcS3_Pm</span><br><span class="line">	...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __arm64__</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>找到关键部分代码，看到 <code>bl</code> 跳转指令，看注释信息，这边会调用 <code>dyldbootstrap::start</code> </p>
<h4 id="dyldbootstrap-start"><a href="#dyldbootstrap-start" class="headerlink" title="dyldbootstrap::start"></a>dyldbootstrap::start</h4><p>【1】<code>dyldbootstrap::start</code></p>
<p>源码中搜索 <code>dyldbootstrap</code> 命名空间的 <code>start</code> 方法，这是 <code>dyld</code> 的启动函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uintptr_t</span> <span class="title">start</span><span class="params">(<span class="keyword">const</span> dyld3::MachOLoaded* appsMachHeader, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[],</span></span></span><br><span class="line"><span class="function"><span class="params">				<span class="keyword">const</span> dyld3::MachOLoaded* dyldsMachHeader, <span class="keyword">uintptr_t</span>* startGlue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Emit kdebug tracepoint to indicate dyld bootstrap has started &lt;rdar://46878536&gt;</span></span><br><span class="line">    dyld3::kdebug_trace_dyld_marker(DBG_DYLD_TIMING_BOOTSTRAP_START, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// if kernel had to slide dyld, we need to fix up load sensitive locations</span></span><br><span class="line">	<span class="comment">// we have to do this before using any global variables</span></span><br><span class="line">    rebaseDyld(dyldsMachHeader);</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="comment">// set up random value for stack canary</span></span><br><span class="line">	__guard_setup(apple);</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line">	<span class="comment">// now that we are done bootstrapping dyld, call dyld&#x27;s main</span></span><br><span class="line">	<span class="keyword">uintptr_t</span> appsSlide = appsMachHeader-&gt;getSlide();</span><br><span class="line">	<span class="keyword">return</span> dyld::_main((macho_header*)appsMachHeader, appsSlide, argc, argv, envp, apple, startGlue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>dyldbootstrap::start</code> 主要操作：</p>
<ol>
<li><p>调用 <code>rebaseDyld()</code> dyld 重定位</p>
</li>
<li><p><code>__guard_setup</code> 栈溢出保护</p>
</li>
<li><p><code>dyld::_main</code> 进入 <code>dyld</code> 的 <code>_main</code> 函数</p>
</li>
</ol>
<h4 id="dyld-main"><a href="#dyld-main" class="headerlink" title="dyld::_main"></a>dyld::_main</h4><p>【2】<code>dyld::_main</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Entry point for dyld.  The kernel loads dyld and jumps to __dyld_start which</span></span><br><span class="line"><span class="comment">// sets up some registers and call this function.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Returns address of main() in target program which __dyld_start jumps to</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">uintptr_t</span></span><br><span class="line">_main(<span class="keyword">const</span> macho_header* mainExecutableMH, <span class="keyword">uintptr_t</span> mainExecutableSlide, </span><br><span class="line">		<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[], <span class="keyword">const</span> <span class="keyword">char</span>* envp[], <span class="keyword">const</span> <span class="keyword">char</span>* apple[], </span><br><span class="line">		<span class="keyword">uintptr_t</span>* startGlue)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">//【1】初始化程序运行环境</span></span><br><span class="line">    <span class="comment">// Grab the cdHash of the main executable from the environment</span></span><br><span class="line">	<span class="keyword">uint8_t</span> mainExecutableCDHashBuffer[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">uint8_t</span>* mainExecutableCDHash = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">if</span> ( hexToBytes(_simple_getenv(apple, <span class="string">&quot;executable_cdhash&quot;</span>), <span class="number">40</span>, mainExecutableCDHashBuffer) )</span><br><span class="line">		mainExecutableCDHash = mainExecutableCDHashBuffer;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="keyword">uintptr_t</span> result = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//获取主程序的macho_header结构以及主程序的slide偏移值</span></span><br><span class="line">  <span class="comment">//保存执行文件头部，后续可以根据头部访问其他信息</span></span><br><span class="line">	sMainExecutableMachHeader = mainExecutableMH;</span><br><span class="line">	sMainExecutableSlide = mainExecutableSlide;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	CRSetCrashLogMessage(<span class="string">&quot;dyld: launch started&quot;</span>);</span><br><span class="line">	<span class="comment">//设置上下文信息</span></span><br><span class="line">	setContext(mainExecutableMH, argc, argv, envp, apple);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Pickup the pointer to the exec path.</span></span><br><span class="line">	<span class="comment">//获取可执行文件路径</span></span><br><span class="line">	sExecPath = _simple_getenv(apple, <span class="string">&quot;executable_path&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// &lt;rdar://problem/13868260&gt; Remove interim apple[0] transition code from dyld</span></span><br><span class="line">	<span class="keyword">if</span> (!sExecPath) sExecPath = apple[<span class="number">0</span>];</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取进程名称</span></span><br><span class="line">	<span class="comment">// Remember short name of process for later logging</span></span><br><span class="line">	sExecShortName = ::<span class="built_in">strrchr</span>(sExecPath, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span> ( sExecShortName != <span class="literal">NULL</span> )</span><br><span class="line">		++sExecShortName;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		sExecShortName = sExecPath;</span><br><span class="line">	</span><br><span class="line">	  <span class="comment">//配置进程受限模式</span></span><br><span class="line">    configureProcessRestrictions(mainExecutableMH, envp);</span><br><span class="line">	...</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//检查环境变量配置</span></span><br><span class="line">		checkEnvironmentVariables(envp);</span><br><span class="line">    <span class="comment">//如果 DYLD_FALLBACK 为nil，将其设置为默认值</span></span><br><span class="line">		defaultUninitializedFallbackPaths(envp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//如果设置了 DYLD_PRINT_OPTS 环境变量，则打印参数</span></span><br><span class="line">	<span class="keyword">if</span> ( sEnv.DYLD_PRINT_OPTS )</span><br><span class="line">		printOptions(argv);</span><br><span class="line">  <span class="comment">//如果设置了 DYLD_PRINT_ENV 环境变量，则打印环境变量</span></span><br><span class="line">	<span class="keyword">if</span> ( sEnv.DYLD_PRINT_ENV ) </span><br><span class="line">		printEnvironmentVariables(envp);</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="comment">//读取Mach-O文件的header，获取当前程序架构信息</span></span><br><span class="line">	getHostInfo(mainExecutableMH, mainExecutableSlide);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// load shared cache</span></span><br><span class="line">	<span class="comment">//【2】加载共享缓存 shared cache</span></span><br><span class="line">  <span class="comment">//检查共享缓存是否开启 iOS中必须开启</span></span><br><span class="line">	checkSharedRegionDisable((dyld3::MachOLoaded*)mainExecutableMH, mainExecutableSlide);</span><br><span class="line">	<span class="keyword">if</span> ( gLinkContext.sharedRegionMode != ImageLoader::kDontUseSharedRegion ) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> TARGET_OS_SIMULATOR</span></span><br><span class="line">		<span class="keyword">if</span> ( sSharedCacheOverrideDir)</span><br><span class="line">      <span class="comment">//将共享缓存映射到共享区域</span></span><br><span class="line">			mapSharedCache();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">		mapSharedCache();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// add dyld itself to UUID list</span></span><br><span class="line">		addDyldImageToUUIDList();</span><br><span class="line">		...</span><br><span class="line">		CRSetCrashLogMessage(sLoadingCrashMessage);</span><br><span class="line">		<span class="comment">// instantiate ImageLoader for main executable</span></span><br><span class="line">		<span class="comment">//【3】实例化主程序，并赋值给ImageLoader::LinkContext</span></span><br><span class="line">    <span class="comment">//加载可执行文件并生成一个ImageLoader实例对象</span></span><br><span class="line">		sMainExecutable = instantiateFromLoadedImage(mainExecutableMH, mainExecutableSlide, sExecPath);</span><br><span class="line">		gLinkContext.mainExecutable = sMainExecutable;</span><br><span class="line">		gLinkContext.mainExecutableCodeSigned = hasCodeSignatureLoadCommand(mainExecutableMH);</span><br><span class="line">		...</span><br><span class="line"></span><br><span class="line">		<span class="comment">// load any inserted libraries</span></span><br><span class="line">		<span class="comment">//【4】加载插入的动态库（加载所有 DYLD_INSERT_LIBRARIES 指定的库）</span></span><br><span class="line">		<span class="keyword">if</span>	( sEnv.DYLD_INSERT_LIBRARIES != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">      <span class="comment">//遍历 DYLD_INSERT_LIBRARIES 环境变量</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span>* lib = sEnv.DYLD_INSERT_LIBRARIES; *lib != <span class="literal">NULL</span>; ++lib) </span><br><span class="line">				loadInsertedDylib(*lib);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// record count of inserted libraries so that a flat search will look at </span></span><br><span class="line">		<span class="comment">// inserted libraries, then main, then others.</span></span><br><span class="line">		sInsertedDylibCount = sAllImages.size()<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// link main executable</span></span><br><span class="line">		<span class="comment">//【5】链接主程序</span></span><br><span class="line">		gLinkContext.linkingMainExecutable = <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SUPPORT_ACCELERATE_TABLES</span></span><br><span class="line">		<span class="keyword">if</span> ( mainExcutableAlreadyRebased ) &#123;</span><br><span class="line">			<span class="comment">// previous link() on main executable has already adjusted its internal pointers for ASLR</span></span><br><span class="line">			<span class="comment">// work around that by rebasing by inverse amount</span></span><br><span class="line">			sMainExecutable-&gt;rebase(gLinkContext, -mainExecutableSlide);</span><br><span class="line">		&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">		link(sMainExecutable, sEnv.DYLD_BIND_AT_LAUNCH, <span class="literal">true</span>, ImageLoader::RPathChain(<span class="literal">NULL</span>, <span class="literal">NULL</span>), <span class="number">-1</span>);</span><br><span class="line">		sMainExecutable-&gt;setNeverUnloadRecursive();</span><br><span class="line">		<span class="keyword">if</span> ( sMainExecutable-&gt;forceFlat() ) &#123;</span><br><span class="line">			gLinkContext.bindFlat = <span class="literal">true</span>;</span><br><span class="line">			gLinkContext.prebindUsage = ImageLoader::kUseNoPrebinding;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//【6】链接插入的动态库</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// link any inserted libraries</span></span><br><span class="line">		<span class="comment">// do this after linking main executable so that any dylibs pulled in by inserted </span></span><br><span class="line">		<span class="comment">// dylibs (e.g. libSystem) will not be in front of dylibs the program uses</span></span><br><span class="line">		<span class="keyword">if</span> ( sInsertedDylibCount &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>; i &lt; sInsertedDylibCount; ++i) &#123;</span><br><span class="line">				ImageLoader* image = sAllImages[i+<span class="number">1</span>];</span><br><span class="line">				link(image, sEnv.DYLD_BIND_AT_LAUNCH, <span class="literal">true</span>, ImageLoader::RPathChain(<span class="literal">NULL</span>, <span class="literal">NULL</span>), <span class="number">-1</span>);</span><br><span class="line">				image-&gt;setNeverUnloadRecursive();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> ( gLinkContext.allowInterposing ) &#123;</span><br><span class="line">				<span class="comment">// only INSERTED libraries can interpose</span></span><br><span class="line">				<span class="comment">// register interposing info after all inserted libraries are bound so chaining works</span></span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>; i &lt; sInsertedDylibCount; ++i) &#123;</span><br><span class="line">					ImageLoader* image = sAllImages[i+<span class="number">1</span>];</span><br><span class="line">					image-&gt;registerInterposing(gLinkContext);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		...</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//【7】链接所有插入的image后，执行弱符号绑定</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// &lt;rdar://problem/12186933&gt; do weak binding only after all inserted images linked</span></span><br><span class="line">		sMainExecutable-&gt;weakBind(gLinkContext);</span><br><span class="line">		gLinkContext.linkingMainExecutable = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		sMainExecutable-&gt;recursiveMakeDataReadOnly(gLinkContext);</span><br><span class="line"></span><br><span class="line">		CRSetCrashLogMessage(<span class="string">&quot;dyld: launch, running initializers&quot;</span>);</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">if</span> SUPPORT_OLD_CRT_INITIALIZATION</span></span><br><span class="line">		<span class="comment">// Old way is to run initializers via a callback from crt1.o</span></span><br><span class="line">		<span class="keyword">if</span> ( ! gRunInitializersOldWay ) </span><br><span class="line">			initializeMainExecutable(); </span><br><span class="line">	<span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">		<span class="comment">//【8】执行所有初始化方法</span></span><br><span class="line">		<span class="comment">// run all initializers</span></span><br><span class="line">		initializeMainExecutable(); </span><br><span class="line">	<span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">		...</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//【9】查找主程序的入口并返回</span></span><br><span class="line">			<span class="comment">// find entry point for main executable</span></span><br><span class="line">			result = (<span class="keyword">uintptr_t</span>)sMainExecutable-&gt;getEntryFromLC_MAIN();</span><br><span class="line">			<span class="keyword">if</span> ( result != <span class="number">0</span> ) &#123;</span><br><span class="line">				<span class="comment">// main executable uses LC_MAIN, we need to use helper in libdyld to call into main()</span></span><br><span class="line">				<span class="keyword">if</span> ( (gLibSystemHelpers != <span class="literal">NULL</span>) &amp;&amp; (gLibSystemHelpers-&gt;version &gt;= <span class="number">9</span>) )</span><br><span class="line">					*startGlue = (<span class="keyword">uintptr_t</span>)gLibSystemHelpers-&gt;startGlueToCallExit;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					halt(<span class="string">&quot;libdyld.dylib support not present for LC_MAIN&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// main executable uses LC_UNIXTHREAD, dyld needs to let &quot;start&quot; in program set up for main()</span></span><br><span class="line">				result = (<span class="keyword">uintptr_t</span>)sMainExecutable-&gt;getEntryFromLC_UNIXTHREAD();</span><br><span class="line">				*startGlue = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="dyld-加载流程"><a href="#dyld-加载流程" class="headerlink" title="dyld 加载流程"></a><code>dyld</code> 加载流程</h4><p><code>dyld</code> 的加载流程主要包括以下 9 个步骤：</p>
<ol>
<li>主程序运行环境初始化，获取当前运行架构</li>
<li>加载共享缓存，检查共享缓存是否映射到共享区域</li>
<li>加载可执行文件，生成一个 <code>ImageLoader</code> 实例对象</li>
<li>加载插入的动态库</li>
<li>链接主程序</li>
<li>链接动态库</li>
<li>弱符号绑定</li>
<li>执行初始化方法</li>
<li>寻找程序入口 <code>LC_MAIN</code></li>
</ol>
<ul>
<li>分析第 8 步</li>
</ul>
<h4 id="initializeMainExecutable-执行初始化方法"><a href="#initializeMainExecutable-执行初始化方法" class="headerlink" title="initializeMainExecutable 执行初始化方法"></a>initializeMainExecutable 执行初始化方法</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initializeMainExecutable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">//循环遍历，对插入的 dylib 调用 runInitializers 方法进行初始化</span></span><br><span class="line">	<span class="comment">// run initialzers for any inserted dylibs</span></span><br><span class="line">	ImageLoader::InitializerTimingList initializerTimes[allImagesCount()];</span><br><span class="line">	initializerTimes[<span class="number">0</span>].count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">size_t</span> rootCount = sImageRoots.size();</span><br><span class="line">	<span class="keyword">if</span> ( rootCount &gt; <span class="number">1</span> ) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">1</span>; i &lt; rootCount; ++i) &#123;</span><br><span class="line">			sImageRoots[i]-&gt;runInitializers(gLinkContext, initializerTimes[<span class="number">0</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//主程序调用 runInitializers 方法初始化</span></span><br><span class="line">	<span class="comment">// run initializers for main executable and everything it brings up </span></span><br><span class="line">	sMainExecutable-&gt;runInitializers(gLinkContext, initializerTimes[<span class="number">0</span>]);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>runInitializers</code>  内部调用了 <code>processInitializers</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ImageLoader::runInitializers</span><span class="params">(<span class="keyword">const</span> LinkContext&amp; context, InitializerTimingList&amp; timingInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">	processInitializers(context, thisThread, timingInfo, up);</span><br><span class="line">	context.notifyBatch(dyld_image_state_initialized, <span class="literal">false</span>);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>processInitializers</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ImageLoader::processInitializers</span><span class="params">(<span class="keyword">const</span> LinkContext&amp; context, <span class="keyword">mach_port_t</span> thisThread, InitializerTimingList&amp; timingInfo, ImageLoader::UninitedUpwards&amp; images)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">// Calling recursive init on all images in images list, building a new list of</span></span><br><span class="line">	<span class="comment">// uninitialized upward dependencies.</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">uintptr_t</span> i=<span class="number">0</span>; i &lt; images.count; ++i) &#123;</span><br><span class="line">		images.imagesAndPaths[i].first-&gt;recursiveInitialization(context, thisThread, images.imagesAndPaths[i].second, timingInfo, ups);</span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对镜像列表调用 <code>recursiveInitialization</code> 递归初始化</p>
<p><code>recursiveInitialization</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ImageLoader::recursiveInitialization</span><span class="params">(<span class="keyword">const</span> LinkContext&amp; context, <span class="keyword">mach_port_t</span> this_thread, <span class="keyword">const</span> <span class="keyword">char</span>* pathToInitialize, InitializerTimingList&amp; timingInfo, UninitedUpwards&amp; uninitUps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">recursive_lock <span class="title">lock_info</span><span class="params">(this_thread)</span></span>;</span><br><span class="line">	recursiveSpinLock(lock_info); <span class="comment">//递归枷锁</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ( fState &lt; dyld_image_state_dependents_initialized<span class="number">-1</span> ) &#123;</span><br><span class="line">		<span class="keyword">uint8_t</span> oldState = fState;</span><br><span class="line">		<span class="comment">// break cycles</span></span><br><span class="line">		fState = dyld_image_state_dependents_initialized<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// initialize lower level libraries first</span></span><br><span class="line">			...</span><br><span class="line"></span><br><span class="line">			<span class="comment">// let objc know we are about to initialize this image 让objc知道将要初始化镜像</span></span><br><span class="line">			<span class="keyword">uint64_t</span> t1 = mach_absolute_time();</span><br><span class="line">			fState = dyld_image_state_dependents_initialized;</span><br><span class="line">			oldState = fState;</span><br><span class="line">			context.notifySingle(dyld_image_state_dependents_initialized, <span class="keyword">this</span>, &amp;timingInfo);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// initialize this image 初始化镜像</span></span><br><span class="line">			<span class="keyword">bool</span> hasInitializers = <span class="keyword">this</span>-&gt;doInitialization(context);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// let anyone know we finished initializing this image 镜像初始化完成</span></span><br><span class="line">			fState = dyld_image_state_initialized;</span><br><span class="line">			oldState = fState;</span><br><span class="line">			context.notifySingle(dyld_image_state_initialized, <span class="keyword">this</span>, <span class="literal">NULL</span>);</span><br><span class="line">			...</span><br><span class="line">		&#125;</span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line">	recursiveSpinUnLock();<span class="comment">//递归解锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>initializeMainExecutable</code> -&gt; <code>runInitializers</code> -&gt; <code>processInitializers</code> -&gt; <code>recursiveInitialization</code> -&gt; <code>notifySingle</code></p>
<h5 id="doInitialization"><a href="#doInitialization" class="headerlink" title="doInitialization"></a>doInitialization</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ImageLoaderMachO::doInitialization</span><span class="params">(<span class="keyword">const</span> LinkContext&amp; context)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CRSetCrashLogMessage2(<span class="keyword">this</span>-&gt;getPath());</span><br><span class="line"></span><br><span class="line">	<span class="comment">// mach-o has -init and static initializers</span></span><br><span class="line">	doImageInit(context);</span><br><span class="line">	doModInitFunctions(context);<span class="comment">//加载c++构造函数</span></span><br><span class="line">	</span><br><span class="line">	CRSetCrashLogMessage2(<span class="literal">NULL</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> (fHasDashInit || fHasInitializers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c++构造方法，在 <code>mach-O</code>的 <code>data段</code> 中对应 <code>__mod_init_func</code></p>
<h5 id="notifySingle"><a href="#notifySingle" class="headerlink" title="notifySingle"></a>notifySingle</h5><p>继续在 <code>dyld2.cpp</code> 中找到 <code>notifySingle</code> 实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">notifySingle</span><span class="params">(dyld_image_states state, <span class="keyword">const</span> ImageLoader* image, ImageLoader::InitializerTimingList* timingInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">if</span> ( (state == dyld_image_state_dependents_initialized) &amp;&amp; (sNotifyObjCInit != <span class="literal">NULL</span>) &amp;&amp; image-&gt;notifyObjC() ) &#123;</span><br><span class="line">		<span class="keyword">uint64_t</span> t0 = mach_absolute_time();</span><br><span class="line">		<span class="function">dyld3::ScopedTimer <span class="title">timer</span><span class="params">(DBG_DYLD_TIMING_OBJC_INIT, (<span class="keyword">uint64_t</span>)image-&gt;machHeader(), <span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">		(*sNotifyObjCInit)(image-&gt;getRealPath(), image-&gt;machHeader());</span><br><span class="line">		<span class="keyword">uint64_t</span> t1 = mach_absolute_time();</span><br><span class="line">		<span class="keyword">uint64_t</span> t2 = mach_absolute_time();</span><br><span class="line">		<span class="keyword">uint64_t</span> timeInObjC = t1-t0;</span><br><span class="line">		<span class="keyword">uint64_t</span> emptyTime = (t2-t1)*<span class="number">100</span>;</span><br><span class="line">		<span class="keyword">if</span> ( (timeInObjC &gt; emptyTime) &amp;&amp; (timingInfo != <span class="literal">NULL</span>) ) &#123;</span><br><span class="line">			timingInfo-&gt;addTime(image-&gt;getShortName(), timeInObjC);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关键函数指针 <code>sNotifyObjCInit</code> ，当前文件搜索 <code>sNotifyObjCInit</code> 找到赋值的地方</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerObjCNotifiers</span><span class="params">(_dyld_objc_notify_mapped mapped, _dyld_objc_notify_init init, _dyld_objc_notify_unmapped unmapped)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// record functions to call</span></span><br><span class="line">	sNotifyObjCMapped	= mapped;</span><br><span class="line">	sNotifyObjCInit		= init;</span><br><span class="line">	sNotifyObjCUnmapped = unmapped;</span><br></pre></td></tr></table></figure>

<p>再全局搜索 <code>registerObjCNotifiers</code> 查找到调用的地方</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _dyld_objc_notify_register(_dyld_objc_notify_mapped    mapped,</span><br><span class="line">                                _dyld_objc_notify_init      init,</span><br><span class="line">                                _dyld_objc_notify_unmapped  unmapped)</span><br><span class="line">&#123;</span><br><span class="line">	dyld::registerObjCNotifiers(mapped, init, unmapped);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>什么时候调用了 <code>_dyld_objc_notify_register</code> ?</p>
<p>通过添加 <code>_dyld_objc_notify_register</code> 符号断点，运行后发现调用者是 <code>_objc_init</code>， <code>_objc_init</code> 函数是 <code>Runtime</code> 的入口函数</p>
<p><img src="/2020/12/07/dyld%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/notifi_register.jpg" alt="notifi_register"></p>
<h4 id="objc-init"><a href="#objc-init" class="headerlink" title="_objc_init"></a>_objc_init</h4><p><code>_objc_init</code> 需要在 <code>libobjc</code> 源码中查看</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Called by libSystem BEFORE library initialization time</span></span><br><span class="line"><span class="keyword">void</span> _objc_init(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> initialized = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (initialized) <span class="keyword">return</span>;</span><br><span class="line">    initialized = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// fixme defer initialization until an objc-using image is found?</span></span><br><span class="line">    environ_init();</span><br><span class="line">    tls_init();</span><br><span class="line">    static_init();</span><br><span class="line">    runtime_init();</span><br><span class="line">    exception_init();</span><br><span class="line">    cache_init();</span><br><span class="line">    _imp_implementationWithBlock_init();</span><br><span class="line">    <span class="comment">//注册回调函数</span></span><br><span class="line">    _dyld_objc_notify_register(&amp;map_images, load_images, unmap_image);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __OBJC2__</span></span><br><span class="line">    didCallDyldNotifyRegister = <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看函数注释意思，<code>_objc_init</code> 的调用时机是在其他动态库初始化之前，由 <code>libSystem</code> 系统库调用</p>
<p>所以 <code>dyld</code> 加载的第 8 步，在初始化所有动态库和主程序之前，就注册了 <code>load_images</code> 的回调，Runtime调用 <code>load_images</code> 加载完所有 <code>load</code> 方法之后，就回调到 <code>dyld::_main</code> 的 <code>initializeMainExecutable()</code> </p>
<p><img src="/2020/12/07/dyld%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/dyld.png" alt="dyld"></p>
<h4 id="共享缓存"><a href="#共享缓存" class="headerlink" title="共享缓存"></a>共享缓存</h4><p><code>dyld</code> 加载时，为了优化程序启动，启用了共享缓存技术。共享缓存会在进程启动时被 <code>dyld</code> 映射到内存中，之后，当任何 <code>Mach-O</code> 镜像加载时，<code>dyld</code> 首先会检查该 <code>Mach-O</code> 镜像与所需的动态库是否在共享缓存中，如果存在，则直接将它在共享内存中的内存地址映射到进程的内存地址空间。在程序依赖的系统动态库很多的情况下，这种做法对程序启动性能是有明显提升的。</p>
<p><a href="https://opensource.apple.com/tarballs/dyld/">dyld750.6下载</a></p>
<p><a href="https://www.jianshu.com/p/e383013ca846">dyld 流程分析</a></p>
<p><a href="https://www.jianshu.com/p/db765ff4e36a">dyld加载流程</a></p>
]]></content>
  </entry>
  <entry>
    <title>《Flutter实战第二版》七：功能型组件</title>
    <url>/2022/01/18/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%B8%83%EF%BC%9A%E5%8A%9F%E8%83%BD%E5%9E%8B%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="7-功能型组件"><a href="#7-功能型组件" class="headerlink" title="7 功能型组件"></a>7 功能型组件</h3><p>功能型组件指的是不影响UI布局及外观的组件，通常具有一定的功能，如事件监听、数据存储等</p>
<p>FocusScope（焦点控制住）、PageStorage（数据存储）、NotificationListener（事件监听）都属于功能型组件</p>
<h4 id="7-1-导航返回拦截-WillPopScope"><a href="#7-1-导航返回拦截-WillPopScope" class="headerlink" title="7.1 导航返回拦截 WillPopScope"></a>7.1 导航返回拦截 WillPopScope</h4><p>Flutter 可以通过 willPopScope 来实现返回按钮拦截</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> WillPopScope(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">required</span> WillPopCallback onWillPop,</span><br><span class="line">  <span class="keyword">required</span> Widget child</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>onWillPop 当用户点击返回按钮时被调用，该回调需要返回一个 Future 对象</p>
<ul>
<li>示例</li>
</ul>
<p>为防止用户误触返回键退出，拦截返回事件。用户 1 秒内点击两次返回按钮时，则退出；如果间隔超过 1 秒则不退出，并重新计时</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WillPopScopeTestRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">WillPopScopeTestRoute</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">DateTime?</span> _lastPressedAt; <span class="comment">//上次点击时间</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> WillPopScope(</span><br><span class="line">      onWillPop: () <span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_lastPressedAt == <span class="keyword">null</span> ||</span><br><span class="line">            <span class="built_in">DateTime</span>.now().difference(_lastPressedAt!) &gt; <span class="built_in">Duration</span>(seconds: <span class="number">1</span>)) &#123;</span><br><span class="line">          <span class="comment">//两次点击间隔超过1秒则重新计时</span></span><br><span class="line">          _lastPressedAt = <span class="built_in">DateTime</span>.now();</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      child: Container(</span><br><span class="line">        alignment: Alignment.center,</span><br><span class="line">        child: Text(<span class="string">&quot;1秒内连续按两次返回键退出&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-2-数据共享-InheritedWidget"><a href="#7-2-数据共享-InheritedWidget" class="headerlink" title="7.2 数据共享 InheritedWidget"></a>7.2 数据共享 InheritedWidget</h4><p>InheritedWidget 提供了一种在 widget 树中从上到下共享数据的方式。比如在根 widget 中通过 InheritedWidget 共享了一个数据，那么我们可以在任意子 widget 中获取共享的数据</p>
<p>Flutter SDK 中通过 InheritedWidget 来共享主题和 Locale 信息</p>
<h5 id="didChangeDependencies"><a href="#didChangeDependencies" class="headerlink" title="didChangeDependencies"></a>didChangeDependencies</h5><p>State 对象有个 didChangeDependencies 回调，它会在依赖发生变化时被 Flutter 框架调用，</p>
<p>这个依赖指的是，子 widget 是否使用了父 widget 中 InheritedWidget 的数据，</p>
<p>这种机制可以使子组件在依赖的 InheritedWidget 变化时更新自身，如主题、语言等变化时，依赖他们的子 widget 的 didChangeDependencies 会被调用</p>
<ul>
<li>示例</li>
</ul>
<p>首先通过继承 InheritedWidget，将计数器点击次数保存在 ShareDataWidget 的 data 属性中</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShareDataWidget</span> <span class="keyword">extends</span> <span class="title">InheritedWidget</span> </span>&#123;</span><br><span class="line">  ShareDataWidget(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.data, <span class="comment">//需要在子树中共享的数据，保存点击次数</span></span><br><span class="line">    <span class="keyword">required</span> Widget child,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key, child: child);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> data;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义一个便捷方法，方便子树中的widget获取共享数据</span></span><br><span class="line">  <span class="keyword">static</span> ShareDataWidget? of(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> context.dependOnInheritedWidgetOfExactType&lt;ShareDataWidget&gt;();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//该回调决定当data发生变化时，是否通知子树中依赖data的Widget</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> updateShouldNotify(<span class="keyword">covariant</span> ShareDataWidget oldWidget) &#123;</span><br><span class="line">    <span class="keyword">return</span> oldWidget.data != data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后实现一个子组件 _TestWidget，在 build 方法中引用了 ShareDataWidget 中的数据，同时在 didChangeDependencies 回调中打印日志 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TestWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _TestWidget(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _TestWidgetState createState() =&gt; _TestWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TestWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">_TestWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//使用InheritedWidget中的共享数据</span></span><br><span class="line">    <span class="keyword">return</span> Text(ShareDataWidget.of(context)!.data.toString());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> didChangeDependencies() &#123;</span><br><span class="line">    <span class="keyword">super</span>.didChangeDependencies();</span><br><span class="line">    <span class="comment">//父或祖先widget中的InheritedWidget改变(updateShouldNotify返回true)时会被调用。</span></span><br><span class="line">    <span class="comment">//如果build中没有依赖InheritedWidget，则此回调不会被调用。</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Dependencies change&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后创建按钮，每点击一次就 ShareDataWidget 的值自增</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InheritedWidgetTestRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _InheritedWidgetTestRouteState createState() =&gt; _InheritedWidgetTestRouteState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_InheritedWidgetTestRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">InheritedWidgetTestRoute</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;标题&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: ShareDataWidget(<span class="comment">//使用ShareDataWidget</span></span><br><span class="line">          data: count,</span><br><span class="line">          child: Column(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">            children: [</span><br><span class="line">              Padding(</span><br><span class="line">                padding: EdgeInsets.only(bottom: <span class="number">20.0</span>),</span><br><span class="line">                child: _TestWidget(),<span class="comment">//子widget中依赖ShareDataWidget</span></span><br><span class="line">              ),</span><br><span class="line">              ElevatedButton(</span><br><span class="line">                	<span class="comment">//每点击一次，将count自增，然后重新build,ShareDataWidget的data将被更新  </span></span><br><span class="line">                  onPressed: () =&gt; setState(() &#123;</span><br><span class="line">                    ++count;</span><br><span class="line">                  &#125;),</span><br><span class="line">                  child: Text(<span class="string">&#x27;Increment&#x27;</span>)</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》七：功能型组件/WeChat82decdb61c34cabc1597ca20cba3581b.png" alt="WeChat82decdb61c34cabc1597ca20cba3581b" style="zoom:80%;" />

<p>每点击一次，计数器就会自增，控制台就会打印一句日志 flutter: Dependencies change，依赖变化后，其 didChangeDependencies 会被调用</p>
<p>如果 _TestWidget 的 build 方法中没有使用 ShareDataWidget 的数据，那么它的 didChangeDependencies 将不会被调用，因为它没有依赖 ShareDataWidget，即将上面改成 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="comment">//使用InheritedWidget中的共享数据</span></span><br><span class="line">  <span class="comment">//return Text(ShareDataWidget.of(context)!.data.toString());</span></span><br><span class="line">  retirn Text(<span class="string">&#x27;text&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>didChangeDependencies 中做什么</li>
</ul>
<p>一般子 widget 很少会重写此方法，因为依赖改变后 Flutter 也都会调用 build() 方法重新构建组件树。但是，如果需要在依赖改变后执行一些昂贵 的操作，比如网络请求，这时最好的方式是在此方法中执行，可以避免每次 build 都执行这些昂贵操作</p>
<h5 id="InheritedWidget"><a href="#InheritedWidget" class="headerlink" title="InheritedWidget"></a>InheritedWidget</h5><p>如果只想在 _TestWidgetState 中引用 ShareDataWidget 数据，但不希望在 ShareDataWidget 发生变化时调用 _TestWidgetState 的 didChangeDependencies</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个便捷方法，方便子树中的widget获取共享数据</span></span><br><span class="line"><span class="keyword">static</span> ShareDataWidget of(BuildContext context) &#123;</span><br><span class="line">  <span class="comment">//return context.dependOnInheritedWidgetOfExactType&lt;ShareDataWidget&gt;();</span></span><br><span class="line">  <span class="keyword">return</span> context.getElementForInheritedWidgetOfExactType&lt;ShareDataWidget&gt;().widget;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dependOnInheritedWidgetOfExactType 和 getElementForInheritedWidgetOfExactType 的区别是前者会注册依赖关系，后者不会。</p>
<p>调用 dependOnInheritedWidgetOfExactType 后，InheritedWidget 和依赖它的子孙组件关系便完成了注册，之后 InheritedWidget 发生变化，就会更新依赖它的子孙组件，也就会调用子孙组件的 didChangeDependencies 方法和 build 方法</p>
<h4 id="7-3-跨组件状态共享-Provider"><a href="#7-3-跨组件状态共享-Provider" class="headerlink" title="7.3 跨组件状态共享 Provider"></a>7.3 跨组件状态共享 Provider</h4><p>登录状态同步的示例</p>
<p>定义事件：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Event&#123;</span><br><span class="line">  login,</span><br><span class="line">  ... <span class="comment">//省略其它事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>登录页代码大致如下：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 登录状态改变后发布状态改变事件</span></span><br><span class="line">bus.emit(Event.login);</span><br></pre></td></tr></table></figure>

<p>依赖登录状态的页面：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> onLoginChanged(e)&#123;</span><br><span class="line">  <span class="comment">//登录状态变化处理逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> initState() &#123;</span><br><span class="line">  <span class="comment">//订阅登录状态改变事件</span></span><br><span class="line">  bus.<span class="keyword">on</span>(Event.login,onLogin);</span><br><span class="line">  <span class="keyword">super</span>.initState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> dispose() &#123;</span><br><span class="line">  <span class="comment">//取消订阅</span></span><br><span class="line">  bus.off(Event.login,onLogin);</span><br><span class="line">  <span class="keyword">super</span>.dispose();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过观察者模式来实现跨组件状态共享缺点：<br>必须显式定义各种事件，不好管理<br>订阅者必须显式注册状态改变回调，必须组件销毁时手动解绑回调以避免内存泄漏</p>
<p>InheritedWidget 的特性就是能绑定 InheritedWidget 与依赖它的子孙组件的依赖关系，且 <code> InheritedWidget 数据发生变化时，可以自动更新依赖的子孙组件</code> 。利用这个特性，我们可以将需要跨组件共享的状态保存在 InheritedWidget 中，然后在子组件中引用 InheritedWidget 即可</p>
<h5 id="7-3-1-Provider"><a href="#7-3-1-Provider" class="headerlink" title="7.3.1 Provider"></a>7.3.1 Provider</h5><p>实现一个最小功能的 Provider</p>
<p>首先需要一个保存共享的数据 InheritedWidget，由于具体业务数据不可预期，使用泛型，定义一个通用的 InheritedProvider 类，它继承自 InheritedWidget</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InHeritedProvider</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">InheritedWidget</span> </span>&#123;</span><br><span class="line">  InHeritedProvider(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.data,</span><br><span class="line">    <span class="keyword">required</span> Widget child,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(child: child);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> T data;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> updateShouldNotify(<span class="keyword">covariant</span> InHeritedProvider&lt;T&gt; oldWidget) &#123;</span><br><span class="line">    <span class="comment">//在此简单返回true，则每次更新都会调用依赖其的子孙节点的`didChangeDependencies`。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>数据发生变化怎么通知？</li>
</ul>
<p>Flutter 提供了 ChangeNotifier 类，继承自 Listenable 定义大致如下</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeNotifier</span> <span class="keyword">implements</span> <span class="title">Listenable</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span> listeners=[];</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> addListener(VoidCallback listener) &#123;</span><br><span class="line">     <span class="comment">//添加监听器</span></span><br><span class="line">     listeners.add(listener);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> removeListener(VoidCallback listener) &#123;</span><br><span class="line">    <span class="comment">//移除监听器</span></span><br><span class="line">    listeners.remove(listener);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> notifyListeners() &#123;</span><br><span class="line">    <span class="comment">//通知所有监听器，触发监听器回调 </span></span><br><span class="line">    listeners.forEach((item)=&gt;item());</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  ... <span class="comment">//省略无关代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，将要共享的状态放到一个 Model 类中，让它继承自 ChangeNotifier，这样当共享状态发生改变时，只需调用 notifyListeners() 来通知订阅者，然后订阅者重新构建 InheritedProvider</p>
<p>//TODO：。。。。</p>
<h4 id="7-4-颜色和主题"><a href="#7-4-颜色和主题" class="headerlink" title="7.4 颜色和主题"></a>7.4 颜色和主题</h4><h5 id="7-4-1-颜色"><a href="#7-4-1-颜色" class="headerlink" title="7.4.1 颜色"></a>7.4.1 颜色</h5><ul>
<li>MaterialColor</li>
</ul>
<p>MaterialColor 包含一种颜色的10个级别的渐变色，通过 [] 运算符的索引值来代表颜色的深度，有效的索引有：50，100，200，.. 800，900 数值越大，颜色越深，默认值为索引等于500的颜色</p>
<p>可以根据 shadeXX 来获取具体索引的颜色 Color.blue.shade50 </p>
<img src="《Flutter实战第二版》七：功能型组件/7-5.6f1c5012.jpeg" alt="7-5.6f1c5012" style="zoom:80%;" />

<h5 id="7-4-2-Theme"><a href="#7-4-2-Theme" class="headerlink" title="7.4.2 Theme"></a>7.4.2 Theme</h5><ul>
<li>ThemeData</li>
</ul>
<p>ThemeData 用于保存 Material 组件库的主题数据</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ThemeData(&#123;</span><br><span class="line">  Brightness? brightness, <span class="comment">//深色还是浅色</span></span><br><span class="line">  MaterialColor? primarySwatch, <span class="comment">//主题颜色样本，见下面介绍</span></span><br><span class="line">  Color? primaryColor, <span class="comment">//主色，决定导航栏颜色</span></span><br><span class="line">  Color? cardColor, <span class="comment">//卡片颜色</span></span><br><span class="line">  Color? dividerColor, <span class="comment">//分割线颜色</span></span><br><span class="line">  ButtonThemeData buttonTheme, <span class="comment">//按钮主题</span></span><br><span class="line">  Color dialogBackgroundColor,<span class="comment">//对话框背景颜色</span></span><br><span class="line">  <span class="built_in">String</span> fontFamily, <span class="comment">//文字字体</span></span><br><span class="line">  TextTheme textTheme,<span class="comment">// 字体主题，包括标题、body等文字样式</span></span><br><span class="line">  IconThemeData iconTheme, <span class="comment">// Icon的默认样式</span></span><br><span class="line">  TargetPlatform platform, <span class="comment">//指定平台，应用特定平台控件风格</span></span><br><span class="line">  ColorScheme? colorScheme,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>路由换肤示例</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThemeTestRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ThemeTestRouteState createState() =&gt; _ThemeTestRouteState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ThemeTestRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ThemeTestRoute</span>&gt; </span>&#123;</span><br><span class="line">  MaterialColor _themeColor = Colors.teal; <span class="comment">//当前路由主题色</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    ThemeData themeData = Theme.of(context);</span><br><span class="line">    <span class="keyword">return</span> Theme(</span><br><span class="line">      data: ThemeData(</span><br><span class="line">          primarySwatch: _themeColor, <span class="comment">//用于导航栏、FloatingActionButton的背景色等</span></span><br><span class="line">          iconTheme: IconThemeData(color: _themeColor) <span class="comment">//用于Icon颜色</span></span><br><span class="line">      ),</span><br><span class="line">      child: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(<span class="string">&quot;主题测试&quot;</span>)),</span><br><span class="line">        body: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            <span class="comment">//第一行Icon使用主题中的iconTheme</span></span><br><span class="line">            Row(</span><br><span class="line">                mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  Icon(Icons.favorite),</span><br><span class="line">                  Icon(Icons.airport_shuttle),</span><br><span class="line">                  Text(<span class="string">&quot;  颜色跟随主题&quot;</span>)</span><br><span class="line">                ]</span><br><span class="line">            ),</span><br><span class="line">            <span class="comment">//为第二行Icon自定义颜色（固定为黑色)</span></span><br><span class="line">            Theme(</span><br><span class="line">              data: themeData.copyWith(</span><br><span class="line">                iconTheme: themeData.iconTheme.copyWith(</span><br><span class="line">                    color: Colors.black</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              child: Row(</span><br><span class="line">                  mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">                  children: &lt;Widget&gt;[</span><br><span class="line">                    Icon(Icons.favorite),</span><br><span class="line">                    Icon(Icons.airport_shuttle),</span><br><span class="line">                    Text(<span class="string">&quot;  颜色固定黑色&quot;</span>)</span><br><span class="line">                  ]</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        floatingActionButton: FloatingActionButton(</span><br><span class="line">            onPressed: () =&gt;  <span class="comment">//切换主题</span></span><br><span class="line">                setState(() =&gt;</span><br><span class="line">                _themeColor =</span><br><span class="line">                _themeColor == Colors.teal ? Colors.blue : Colors.teal</span><br><span class="line">                ),</span><br><span class="line">            child: Icon(Icons.palette)</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》七：功能型组件/WeChat480a699489c96afae7c2834566a2792f.png" alt="WeChat480a699489c96afae7c2834566a2792f" style="zoom:80%;" />

<p>可以通过局部主题覆盖全局主题</p>
<h4 id="7-5-ValueListenableBuilder"><a href="#7-5-ValueListenableBuilder" class="headerlink" title="7.5 ValueListenableBuilder"></a>7.5 ValueListenableBuilder</h4><p>ValueListenableBuilder 功能是监听一个数据源，如果数据源发生变化，则会重新执行其 builder</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ValueListenableBuilder(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">this</span>.valueListenable, <span class="comment">// 数据源，类型为ValueListenable&lt;T&gt;</span></span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">this</span>.builder, <span class="comment">// builder</span></span><br><span class="line">  <span class="keyword">this</span>.child,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>valueListenable：类型为 <code>ValueListenable&lt;T&gt;</code> ，表示一个可监听的数据源</p>
<p>builder：数据源发生变化通知时，会重新调用 builder 重新 builder 子组件树</p>
<p>child：builder 中每次都会重新构建整个子组件树，如果子组件树中有一些不变的部分，可以传递给 child</p>
<p>点击器示例</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValueListenableRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ValueListenableRoute(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ValueListenableRouteState createState() =&gt; _ValueListenableRouteState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ValueListenableRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ValueListenableRoute</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个ValueNotifier，当数字变化时会通知 ValueListenableBuilder</span></span><br><span class="line">  <span class="keyword">final</span> ValueNotifier&lt;<span class="built_in">int</span>&gt; _counter = ValueNotifier&lt;<span class="built_in">int</span>&gt;(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">double</span> textScaleFactor = <span class="number">1.5</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;build&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;ValueListenableBuilder 测试&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: ValueListenableBuilder(</span><br><span class="line">            valueListenable: _counter,</span><br><span class="line">            builder: (BuildContext context, <span class="built_in">int</span> value, Widget? child) &#123;</span><br><span class="line">              <span class="comment">// builder 方法只会在 _counter 变化时被调用</span></span><br><span class="line">              <span class="keyword">return</span> Row(</span><br><span class="line">                mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">                children: [</span><br><span class="line">                  Text(<span class="string">&#x27;点击了<span class="subst">$value</span>次&#x27;</span>, textScaleFactor: textScaleFactor,)</span><br><span class="line">                ],</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        <span class="comment">// 点击后值 +1，触发 ValueListenableBuilder 重新构建</span></span><br><span class="line">        onPressed: () =&gt; _counter.value += <span class="number">1</span>,</span><br><span class="line">        child: Icon(Icons.add),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》七：功能型组件/WeChata5da268a632103c4c715f5e27552825c.png" alt="WeChata5da268a632103c4c715f5e27552825c" style="zoom:80%;" />

<p>控制台只在打开时 build 了一次，点击 + 按钮时只是 ValueListenableBuilder 重新构建了子组件树，整个页面没有重新 build；尽可能让 ValueListenableBuilder 只构建依赖数据源的 widget，这样的话可以缩小重新构建的范围</p>
<p>ValueListenableBuilder 和数据流向无关，可以实现任意数据流向的数据共享，实践中 ValueListenableBuilder 的拆分粒度应该尽可能的细</p>
<h4 id="7-6-异步-UI-更新"><a href="#7-6-异步-UI-更新" class="headerlink" title="7.6 异步 UI 更新"></a>7.6 异步 UI 更新</h4><h5 id="7-6-1-FutureBuilder"><a href="#7-6-1-FutureBuilder" class="headerlink" title="7.6.1 FutureBuilder"></a>7.6.1 FutureBuilder</h5><p>FutureBuilder 会依赖一个 Future，会根据所依赖的 Future 的状态来动态构建自身</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">FutureBuilder(&#123;</span><br><span class="line">  <span class="keyword">this</span>.future,</span><br><span class="line">  <span class="keyword">this</span>.initialData,</span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">this</span>.builder,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>future：FutureBuilder 依赖的 future，通常是一个异步耗时的任务</p>
<p>initialData：初始数据，用户设置默认数据</p>
<p>builder：widget 构建器，该构建器会在 Future 执行的不同阶段被多次调用</p>
<p>签名如下</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> AsyncWidgetBuilder&lt;T&gt; = Widget <span class="built_in">Function</span>(BuildContext context, AsyncSnapshot&lt;T&gt; snapshot);</span><br></pre></td></tr></table></figure>

<p>snapshot 会包含当前异步任务的状态信息及结果信息，<br>snapshot.connectionState 获取异步任务的状态信息<br>snapshot.hasError 判断异步任务是否有错误等</p>
<ul>
<li>示例</li>
</ul>
<p>实现一个路由从网上获取数据，获取数据时弹一个加载框；获取结束时，如果成功则显示获取到的数据，失败则显示错误</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_DemoState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Demo</span>&gt; </span>&#123;</span><br><span class="line">  </span><br><span class="line">  Future&lt;<span class="built_in">String</span>&gt; mockNetworkData() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Future.delayed(<span class="built_in">Duration</span>(seconds: <span class="number">2</span>), () =&gt; <span class="string">&quot;我是从互联网上获取的数据&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;标题&#x27;</span>)),</span><br><span class="line">      body: Container(</span><br><span class="line">        child: FutureBuilder(</span><br><span class="line">          future: mockNetworkData(),</span><br><span class="line">          builder: (BuildContext context, AsyncSnapshot snapshot) &#123;</span><br><span class="line">            <span class="comment">// 请求已结束</span></span><br><span class="line">            <span class="keyword">if</span> (snapshot.connectionState == ConnectionState.done) &#123;</span><br><span class="line">              <span class="keyword">if</span> (snapshot.hasError) &#123;</span><br><span class="line">                <span class="comment">// 请求失败，显示错误</span></span><br><span class="line">                <span class="keyword">return</span> Text(<span class="string">&quot;Error: <span class="subst">$&#123;snapshot.error&#125;</span>&quot;</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 请求成功，显示数据</span></span><br><span class="line">                <span class="keyword">return</span> Text(<span class="string">&quot;Contents: <span class="subst">$&#123;snapshot.data&#125;</span>&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 请求未结束，显示loading</span></span><br><span class="line">              <span class="keyword">return</span> CircularProgressIndicator();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》七：功能型组件/WeChatbfb98a9a1f4c131945af42218a1998ee.png" alt="WeChatbfb98a9a1f4c131945af42218a1998ee" style="zoom: 67%;" />

<p>connectionState 异步任务状态是个枚举</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> ConnectionState &#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">当前没有异步任务，比如[FutureBuilder]的[future]为null时</span></span></span><br><span class="line">  none,</span><br><span class="line">  <span class="comment">/// <span class="markdown">异步任务处于等待状态</span></span></span><br><span class="line">  waiting,</span><br><span class="line">  <span class="comment">/// <span class="markdown">Stream处于激活状态（流上已经有数据传递了），对于FutureBuilder没有该状态。</span></span></span><br><span class="line">  active,</span><br><span class="line">  <span class="comment">/// <span class="markdown">异步任务已经终止.</span></span></span><br><span class="line">  done,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConnectionState.active 只有在 StreamBuilder 中才会出现</p>
<h5 id="7-6-2-StreamBuilder"><a href="#7-6-2-StreamBuilder" class="headerlink" title="7.6.2 StreamBuilder"></a>7.6.2 StreamBuilder</h5><p>Dart 中 Stream 也是用于接收异步事件数据，和 Future 不同的是，它可以接收多个异步操作的结果，常用于会多次读取数据的异步任务场景，如网络内容下载，文件读写</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">StreamBuilder(&#123;</span><br><span class="line">  <span class="keyword">this</span>.initialData,</span><br><span class="line">  Stream&lt;T&gt; stream,</span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">this</span>.builder,</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>

<p>和 FutureBuilder 有一点不同，前者需要一个 future，后者需要一个 stream</p>
<ul>
<li>示例</li>
</ul>
<p>创建一个计时器，每隔1秒，计数加1，这里使用 Stream 来实现每隔一秒生成一个数字</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Stream&lt;<span class="built_in">int</span>&gt; counter() &#123;</span><br><span class="line">  <span class="keyword">return</span> Stream.periodic(<span class="built_in">Duration</span>(seconds: <span class="number">1</span>), (i) &#123;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">   <span class="keyword">return</span> StreamBuilder&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">     stream: counter(), <span class="comment">//</span></span><br><span class="line">     <span class="comment">//initialData: ,// a Stream&lt;int&gt; or null</span></span><br><span class="line">     builder: (BuildContext context, AsyncSnapshot&lt;<span class="built_in">int</span>&gt; snapshot) &#123;</span><br><span class="line">       <span class="keyword">if</span> (snapshot.hasError)</span><br><span class="line">         <span class="keyword">return</span> Text(<span class="string">&#x27;Error: <span class="subst">$&#123;snapshot.error&#125;</span>&#x27;</span>);</span><br><span class="line">       <span class="keyword">switch</span> (snapshot.connectionState) &#123;</span><br><span class="line">         <span class="keyword">case</span> ConnectionState.none:</span><br><span class="line">           <span class="keyword">return</span> Text(<span class="string">&#x27;没有Stream&#x27;</span>);</span><br><span class="line">         <span class="keyword">case</span> ConnectionState.waiting:</span><br><span class="line">           <span class="keyword">return</span> Text(<span class="string">&#x27;等待数据...&#x27;</span>);</span><br><span class="line">         <span class="keyword">case</span> ConnectionState.active:</span><br><span class="line">           <span class="keyword">return</span> Text(<span class="string">&#x27;active: <span class="subst">$&#123;snapshot.data&#125;</span>&#x27;</span>);</span><br><span class="line">         <span class="keyword">case</span> ConnectionState.done:</span><br><span class="line">           <span class="keyword">return</span> Text(<span class="string">&#x27;Stream 已关闭&#x27;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// unreachable</span></span><br><span class="line">     &#125;,</span><br><span class="line">   );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实战中，凡是UI会依赖多个异步数据而发生变化的场景都可以使用 StreamBuilder</p>
<h4 id="7-7-对话框详解"><a href="#7-7-对话框详解" class="headerlink" title="7.7 对话框详解"></a>7.7 对话框详解</h4><h5 id="7-7-1-使用对话框"><a href="#7-7-1-使用对话框" class="headerlink" title="7.7.1 使用对话框"></a>7.7.1 使用对话框</h5><ul>
<li>AlertDialog</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> AlertDialog(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  <span class="keyword">this</span>.title, <span class="comment">//对话框标题组件</span></span><br><span class="line">  <span class="keyword">this</span>.titlePadding, <span class="comment">// 标题填充</span></span><br><span class="line">  <span class="keyword">this</span>.titleTextStyle, <span class="comment">//标题文本样式</span></span><br><span class="line">  <span class="keyword">this</span>.content, <span class="comment">// 对话框内容组件</span></span><br><span class="line">  <span class="keyword">this</span>.contentPadding = <span class="keyword">const</span> EdgeInsets.fromLTRB(<span class="number">24.0</span>, <span class="number">20.0</span>, <span class="number">24.0</span>, <span class="number">24.0</span>), <span class="comment">//内容的填充</span></span><br><span class="line">  <span class="keyword">this</span>.contentTextStyle,<span class="comment">// 内容文本样式</span></span><br><span class="line">  <span class="keyword">this</span>.actions, <span class="comment">// 对话框操作按钮组</span></span><br><span class="line">  <span class="keyword">this</span>.backgroundColor, <span class="comment">// 对话框背景色</span></span><br><span class="line">  <span class="keyword">this</span>.elevation,<span class="comment">// 对话框的阴影</span></span><br><span class="line">  <span class="keyword">this</span>.semanticLabel, <span class="comment">//对话框语义化标签(用于读屏软件)</span></span><br><span class="line">  <span class="keyword">this</span>.shape, <span class="comment">// 对话框外形</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _DemoState createState() =&gt; _DemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_DemoState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Demo</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//弹出对话框</span></span><br><span class="line">  Future&lt;<span class="built_in">bool?</span>&gt; showDialog1() &#123;</span><br><span class="line">    <span class="keyword">return</span> showDialog&lt;<span class="built_in">bool</span>&gt;(</span><br><span class="line">        context: context,</span><br><span class="line">        builder: (context) &#123;</span><br><span class="line">          <span class="keyword">return</span> AlertDialog(</span><br><span class="line">            title: Text(<span class="string">&#x27;提示&#x27;</span>),</span><br><span class="line">            content: Text(<span class="string">&#x27;您确定要删除当前文件吗?&#x27;</span>),</span><br><span class="line">            actions: [</span><br><span class="line">              TextButton(</span><br><span class="line">                  onPressed: () =&gt; Navigator.of(context).pop(),<span class="comment">//关闭对话框</span></span><br><span class="line">                  child: Text(<span class="string">&#x27;取消&#x27;</span>)</span><br><span class="line">              ),</span><br><span class="line">              TextButton(</span><br><span class="line">                  onPressed: ()&#123;</span><br><span class="line">                    <span class="comment">//关闭对话框并返回true</span></span><br><span class="line">                    Navigator.of(context).pop(<span class="keyword">true</span>);</span><br><span class="line">                  &#125;,<span class="comment">// ... 执行删除操作</span></span><br><span class="line">                  child: Text(<span class="string">&#x27;删除&#x27;</span>)</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          );</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;标题&#x27;</span>)),</span><br><span class="line">      body: Container(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: [</span><br><span class="line">            ElevatedButton(</span><br><span class="line">                onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">                  <span class="comment">//弹出对话框并等待其关闭</span></span><br><span class="line">                  <span class="built_in">bool?</span> delete = <span class="keyword">await</span> showDialog1();</span><br><span class="line">                  <span class="keyword">if</span> (delete == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;取消删除&quot;</span>);</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;已确认删除&quot;</span>);</span><br><span class="line">                    <span class="comment">//... 删除文件</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                child: Text(<span class="string">&#x27;对话框1&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》七：功能型组件/WeChat27864c95f0c816238363a69b4f71ff06.png" alt="WeChat27864c95f0c816238363a69b4f71ff06" style="zoom:80%;" />

<p>通过 Navigator.of(context).pop(…) 方法来关闭对话框，都可以返回一个结果数据</p>
<ul>
<li>弹出对话框 showDialog()</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Future&lt;T?&gt; showDialog&lt;T&gt;(&#123;</span><br><span class="line">  <span class="keyword">required</span> BuildContext context,</span><br><span class="line">  <span class="keyword">required</span> WidgetBuilder builder, <span class="comment">// 对话框UI的builder</span></span><br><span class="line">  <span class="built_in">bool</span> barrierDismissible = <span class="keyword">true</span>, <span class="comment">//点击对话框barrier(遮罩)时是否关闭它</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>SimpleDialog</li>
</ul>
<p>会展示一个列表，用于列表选择的场景</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Future&lt;<span class="keyword">void</span>&gt; changeLanguage() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">int?</span> i = <span class="keyword">await</span> showDialog(</span><br><span class="line">      context: context,</span><br><span class="line">      builder: (context) &#123;</span><br><span class="line">        <span class="keyword">return</span> SimpleDialog(</span><br><span class="line">          title: Text(<span class="string">&#x27;请选择语言&#x27;</span>),</span><br><span class="line">          children: [</span><br><span class="line">            SimpleDialogOption(</span><br><span class="line">              child: Padding(</span><br><span class="line">                  padding: EdgeInsets.symmetric(vertical: <span class="number">6</span>),</span><br><span class="line">                  child: Text(<span class="string">&#x27;中文简体&#x27;</span>),</span><br><span class="line">              ),</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                Navigator.pop(context, <span class="number">1</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">            SimpleDialogOption(</span><br><span class="line">              child: Padding(</span><br><span class="line">                padding: EdgeInsets.symmetric(vertical: <span class="number">6</span>),</span><br><span class="line">                child: Text(<span class="string">&#x27;美国英语&#x27;</span>),</span><br><span class="line">              ),</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                Navigator.pop(context, <span class="number">2</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (i != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;选择了：<span class="subst">$&#123;i == <span class="number">1</span> ? <span class="string">&quot;中文简体&quot;</span> : <span class="string">&quot;美国英语&quot;</span>&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>列表项组件使用了 SimpleDialogOption 包装了，相当于一个 TextButton，只不过按钮是左对齐的，并且 padding 较小</p>
<ul>
<li>Dialog</li>
</ul>
<p>如果对话框需要嵌套一个 ListView 可以直接使用 Dialog 类</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Future&lt;<span class="keyword">void</span>&gt; showListDialog() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">int?</span> index = <span class="keyword">await</span> showDialog(</span><br><span class="line">      context: context,</span><br><span class="line">      builder: (context) &#123;</span><br><span class="line">        <span class="keyword">var</span> child = Column(</span><br><span class="line">          children: [</span><br><span class="line">            ListTile(title: Text(<span class="string">&#x27;请选择&#x27;</span>)),</span><br><span class="line">            Expanded(</span><br><span class="line">                child: ListView.builder(</span><br><span class="line">                    itemCount: <span class="number">30</span>,</span><br><span class="line">                    itemBuilder: (context, index) &#123;</span><br><span class="line">                      <span class="keyword">return</span> ListTile(</span><br><span class="line">                        title: Text(<span class="string">&quot;<span class="subst">$index</span>&quot;</span>),</span><br><span class="line">                        onTap: () =&gt; Navigator.of(context).pop(index),</span><br><span class="line">                      );</span><br><span class="line">                    &#125;,</span><br><span class="line">                ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> Dialog(child: child);</span><br><span class="line">      &#125;,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (index != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;点击了：<span class="subst">$index</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》七：功能型组件/WeChatf310a19612106d0766aaec0ad0fde4d9.png" alt="WeChatf310a19612106d0766aaec0ad0fde4d9" style="zoom: 67%;" />

<h5 id="7-7-2-对话框打开动画及遮罩"><a href="#7-7-2-对话框打开动画及遮罩" class="headerlink" title="7.7.2 对话框打开动画及遮罩"></a>7.7.2 对话框打开动画及遮罩</h5><p>如何打开一个普通风格的对话框（非 Material风格）？Flutter 提供了一个 showGeneralDialog 方法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Future&lt;T?&gt; showGeneralDialog&lt;T&gt;(&#123;</span><br><span class="line">  <span class="keyword">required</span> BuildContext context,</span><br><span class="line">  <span class="keyword">required</span> RoutePageBuilder pageBuilder, <span class="comment">//构建对话框内部UI</span></span><br><span class="line">  <span class="built_in">bool</span> barrierDismissible = <span class="keyword">false</span>, <span class="comment">//点击遮罩是否关闭对话框</span></span><br><span class="line">  <span class="built_in">String?</span> barrierLabel, <span class="comment">// 语义化标签(用于读屏软件)</span></span><br><span class="line">  Color barrierColor = <span class="keyword">const</span> Color(<span class="number">0x80000000</span>), <span class="comment">// 遮罩颜色</span></span><br><span class="line">  <span class="built_in">Duration</span> transitionDuration = <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">200</span>), <span class="comment">// 对话框打开/关闭的动画时长</span></span><br><span class="line">  RouteTransitionsBuilder? transitionBuilder, <span class="comment">// 对话框打开/关闭的动画</span></span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>showDialog 方法正是 showGeneralDialog 的一个封装，定制了 Material 风格对话框的遮罩颜色和动画</p>
<ul>
<li>封装一个 showCustomDialog 方法</li>
</ul>
<h5 id="7-7-3-对话框实现原理"><a href="#7-7-3-对话框实现原理" class="headerlink" title="7.7.3 对话框实现原理"></a>7.7.3 对话框实现原理</h5><p>直接调用 Navigatio 的 push 方法打开了一个新的对话框路由 RawDialogRoute，然后返回了 push 的返回值，对话框实际上正是通过路由的形式打开的</p>
<h5 id="7-7-4-对话框状态管理"><a href="#7-7-4-对话框状态管理" class="headerlink" title="7.7.4 对话框状态管理"></a>7.7.4 对话框状态管理</h5><h5 id="7-7-5-其它类型的对话框"><a href="#7-7-5-其它类型的对话框" class="headerlink" title="7.7.5 其它类型的对话框"></a>7.7.5 其它类型的对话框</h5><ul>
<li>Loading 框</li>
<li>日历选择</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>《Flutter实战第二版》三：基础组件</title>
    <url>/2022/01/18/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%B8%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="3-基础组件"><a href="#3-基础组件" class="headerlink" title="3 基础组件"></a>3 基础组件</h3><h4 id="3-1-文本及样式"><a href="#3-1-文本及样式" class="headerlink" title="3.1 文本及样式"></a>3.1 文本及样式</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(home: TextDemo()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextDemo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          children: [</span><br><span class="line">            Text(<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                color: Colors.blue,</span><br><span class="line">                fontSize: <span class="number">30</span>,</span><br><span class="line">                height: <span class="number">1.2</span>,</span><br><span class="line">                fontFamily: <span class="string">&#x27;Courier&#x27;</span>,</span><br><span class="line">                background: Paint()..color=Colors.yellow,</span><br><span class="line">                decoration: TextDecoration.underline,</span><br><span class="line">                decorationStyle: TextDecorationStyle.dashed,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            Text.rich(</span><br><span class="line">                TextSpan(children: [</span><br><span class="line">                  TextSpan(text: <span class="string">&#x27;Home: &#x27;</span>,</span><br><span class="line">                      style: TextStyle(fontSize: <span class="number">30</span>)</span><br><span class="line">                  ),</span><br><span class="line">                  TextSpan(text: <span class="string">&#x27;//flutterchina.club&#x27;</span>,</span><br><span class="line">                      style: TextStyle(</span><br><span class="line">                          color: Colors.blue, fontSize: <span class="number">30</span>),</span><br><span class="line">                  ),</span><br><span class="line">                ])</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%B8%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/WeChat312b40c64293529cd163ce4550ee7471.png?lastModify=1642479994" alt="WeChat312b40c64293529cd163ce4550ee7471"></p>
<h5 id="3-1-1-Text"><a href="#3-1-1-Text" class="headerlink" title="3.1.1 Text"></a>3.1.1 Text</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">body: Container(</span><br><span class="line">  child: Column(</span><br><span class="line">    children: [</span><br><span class="line">      Text(<span class="string">&#x27;Hello world&#x27;</span>, textAlign: TextAlign.left),</span><br><span class="line">      Text(<span class="string">&#x27;Hello world I`m Jack&#x27;</span>*<span class="number">4</span>, maxLines: <span class="number">1</span>, overflow: TextOverflow.ellipsis),</span><br><span class="line">      Text(<span class="string">&#x27;Hello world&#x27;</span>, textScaleFactor: <span class="number">2</span>),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<ul>
<li>Text 的构造方法</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Text(<span class="keyword">this</span>.data, &#123;  <span class="comment">//Text显示的内容</span></span><br><span class="line">Key key,</span><br><span class="line"><span class="keyword">this</span>.style, <span class="comment">//Text显示的样式</span></span><br><span class="line"><span class="keyword">this</span>.textAlign,<span class="comment">//文本应该如何水平对齐,TextAlign.start,end 或者center</span></span><br><span class="line"><span class="keyword">this</span>.textDirection, <span class="comment">//文本方向,TextDirection.ltr\TextDirection.rtl</span></span><br><span class="line"><span class="keyword">this</span>.locale,</span><br><span class="line"><span class="keyword">this</span>.softWrap,  <span class="comment">//是否自动换行，若为false，文字将不考虑容器大小，单行显示，超出屏幕部分将默认截断处理</span></span><br><span class="line"><span class="keyword">this</span>.overflow, <span class="comment">//当文字超出屏幕的时候，如何处理,TextOverflow.clip(裁剪)\TextOverflow.fade(渐隐)\TextOverflow.ellipsis(省略号)</span></span><br><span class="line"><span class="keyword">this</span>.textScaleFactor, <span class="comment">//字体大小缩放因子，将字体设置成10.0，然后倍率为2，使用字体大小就是20</span></span><br><span class="line"><span class="keyword">this</span>.maxLines, <span class="comment">//最大行数设置</span></span><br><span class="line"><span class="keyword">this</span>.semanticsLabel,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="3-1-2-TextStyle"><a href="#3-1-2-TextStyle" class="headerlink" title="3.1.2 TextStyle"></a>3.1.2 TextStyle</h5><ul>
<li>TextStyle 构造方法</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TextStyle(&#123;</span><br><span class="line">    <span class="keyword">this</span>.inherit: <span class="keyword">true</span>,      <span class="comment">// 为false的时候不继承默认样式</span></span><br><span class="line">    <span class="keyword">this</span>.color,              <span class="comment">// 颜色 </span></span><br><span class="line">    <span class="keyword">this</span>.fontSize,           <span class="comment">// 字号</span></span><br><span class="line">    <span class="keyword">this</span>.fontWeight,         <span class="comment">// 字重，加粗也用这个字段  FontWeight.w700</span></span><br><span class="line">    <span class="keyword">this</span>.fontStyle,          <span class="comment">// FontStyle.normal  FontStyle.italic斜体</span></span><br><span class="line">    <span class="keyword">this</span>.letterSpacing,      <span class="comment">// 字符间距  就是单个字母或者汉字之间的间隔，可以是负数</span></span><br><span class="line">    <span class="keyword">this</span>.wordSpacing,        <span class="comment">// 字间距 句字之间的间距</span></span><br><span class="line">    <span class="keyword">this</span>.textBaseline,       <span class="comment">// 基线，两个值，字面意思是一个用来排字母的，一人用来排表意字的（类似中文）</span></span><br><span class="line">    <span class="keyword">this</span>.height,            <span class="comment">// 当用来Text控件上时，行高（会乘以fontSize,所以不以设置过大）</span></span><br><span class="line">    <span class="keyword">this</span>.decoration,        <span class="comment">// 添加上划线，下划线，删除线 </span></span><br><span class="line">    <span class="keyword">this</span>.decorationColor,   <span class="comment">// 划线的颜色</span></span><br><span class="line">    <span class="keyword">this</span>.decorationStyle,   <span class="comment">// 这个style可能控制画实线，虚线，两条线，点, 波浪线等</span></span><br><span class="line">    <span class="keyword">this</span>.debugLabel,</span><br><span class="line">    <span class="built_in">String</span> fontFamily,    <span class="comment">// 字体</span></span><br><span class="line">    <span class="built_in">String</span> package,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>



<h5 id="3-1-3-TextSpan"><a href="#3-1-3-TextSpan" class="headerlink" title="3.1.3 TextSpan"></a>3.1.3 TextSpan</h5><p>TextSpan 将 Text 内容的不同部分按照不同的样式显示</p>
<ul>
<li>TextSpan 的定义:</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TextSpan(&#123;</span><br><span class="line">   TextStyle style, </span><br><span class="line">   Sting text,</span><br><span class="line">   <span class="built_in">List</span>&lt;TextSpan&gt; children,</span><br><span class="line">   GestureRecognizer recognizer,</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<p>style 和 text 属性代表该文本的样式和内容，children 是 TextSpan 数组，也就是 TextSpan 可以包括其它 TextSpan，recognizer 用于文本片段上手势识别处理</p>
<h5 id="3-1-4-DefaultTextStyle"><a href="#3-1-4-DefaultTextStyle" class="headerlink" title="3.1.4 DefaultTextStyle"></a>3.1.4 DefaultTextStyle</h5><p>文本样式可以被默认继承（子类文本组件未指定具体样式可以使用 Widget 树中父级的默认样式）</p>
<p>DefaultTextStyle 用于设置默认文本样式</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextDemo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: DefaultTextStyle(</span><br><span class="line">          style: TextStyle(</span><br><span class="line">            color: Colors.red,</span><br><span class="line">            fontSize: <span class="number">20</span>,</span><br><span class="line">          ),</span><br><span class="line">          child: Column(</span><br><span class="line">            children: [</span><br><span class="line">              Text(<span class="string">&#x27;123&#x27;</span>),</span><br><span class="line">              Text(<span class="string">&#x27;456&#x27;</span>),</span><br><span class="line">              Text(<span class="string">&#x27;789&#x27;</span>, style: TextStyle(</span><br><span class="line">                  inherit: <span class="keyword">false</span>,</span><br><span class="line">                  color: Colors.grey)</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          )</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%B8%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/WeChatd910839e3ff49d0f3f1548df3adf920f.png?lastModify=1642479994" alt="WeChatd910839e3ff49d0f3f1548df3adf920f"></p>
<h5 id="3-1-5-字体"><a href="#3-1-5-字体" class="headerlink" title="3.1.5 字体"></a>3.1.5 字体</h5><p>pubspec.yaml 中声明</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">flutter:</span><br><span class="line">  fonts:</span><br><span class="line">    - family: Raleway</span><br><span class="line">      fonts:</span><br><span class="line">        - asset: assets/fonts/Raleway-Regular.ttf</span><br><span class="line">        - asset: assets/fonts/Raleway-Medium.ttf</span><br><span class="line">          weight: <span class="number">500</span></span><br><span class="line">        - asset: assets/fonts/Raleway-SemiBold.ttf</span><br><span class="line">          weight: <span class="number">600</span></span><br><span class="line">    - family: AbrilFatface</span><br><span class="line">      fonts:</span><br><span class="line">        - asset: assets/fonts/abrilfatface/AbrilFatface-Regular.ttf</span><br></pre></td></tr></table></figure>

<p>使用字体</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明文本样式</span></span><br><span class="line"><span class="keyword">const</span> textStyle = <span class="keyword">const</span> TextStyle(</span><br><span class="line">  fontFamily: <span class="string">&#x27;Raleway&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用文本样式</span></span><br><span class="line"><span class="keyword">var</span> buttonText = <span class="keyword">const</span> Text(</span><br><span class="line">  <span class="string">&quot;Use the font for this text&quot;</span>,</span><br><span class="line">  style: textStyle,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="3-2-按钮"><a href="#3-2-按钮" class="headerlink" title="3.2 按钮"></a>3.2 按钮</h4><p>Material 库中的按钮，按下时都还有水波纹动画，就是点击按钮上会出现水波纹扩展动画</p>
<p>有一个 onPressed 属性来设置点击回调</p>
<p><img src="/../../../../../../%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%B8%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/WeChata1d3c6be4375dfacab4bffe55cf60aa5.png" alt="WeChata1d3c6be4375dfacab4bffe55cf60aa5"></p>
<ul>
<li>ElevatedButton</li>
</ul>
<p>漂浮按钮，默认带阴影和灰色背景，按下后阴影会变大</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ElevatedButton(</span><br><span class="line">    onPressed: ()&#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;onPressed&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    child: Text(<span class="string">&#x27;normal&#x27;</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>TextButton</li>
</ul>
<p>文本按钮，默认背景透明不带阴影，按下后会有背景色</p>
<ul>
<li>OutlineButton</li>
</ul>
<p>默认有一个灰色边框，不带阴影背景透明，按下后边框颜色变亮，同时出现背景和阴影</p>
<p>构造方法：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> OutlineButton(&#123;</span><br><span class="line">   Key key,</span><br><span class="line">   <span class="meta">@required</span> VoidCallback onPressed,</span><br><span class="line">   ButtonTextTheme textTheme,  <span class="comment">//按钮上字体主题</span></span><br><span class="line">   Color textColor,  <span class="comment">//字体颜色</span></span><br><span class="line">   Color disabledTextColor, <span class="comment">//按钮禁用时候文字的颜色</span></span><br><span class="line">   Color color,  <span class="comment">//按钮背景颜色</span></span><br><span class="line">   Color highlightColor,<span class="comment">//点击或者toch控件高亮的时候显示在控件上面，水波纹下面的颜色</span></span><br><span class="line">   Color splashColor, <span class="comment">//水波纹的颜色</span></span><br><span class="line">   <span class="built_in">double</span> highlightElevation,<span class="comment">//高亮时候的阴影</span></span><br><span class="line">   <span class="keyword">this</span>.borderSide,<span class="comment">//按钮边框</span></span><br><span class="line">   <span class="keyword">this</span>.disabledBorderColor, <span class="comment">//按钮禁用时边框的颜色</span></span><br><span class="line">   <span class="keyword">this</span>.highlightedBorderColor,<span class="comment">//高亮时边框的颜色</span></span><br><span class="line">   EdgeInsetsGeometry padding,<span class="comment">//边距</span></span><br><span class="line">   ShapeBorder shape, <span class="comment">//设置shape</span></span><br><span class="line">   Clip clipBehavior = Clip.none,</span><br><span class="line">   Widget child,</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>

<p>设置圆角和边框颜色</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">OutlineButton(</span><br><span class="line"> borderSide: BorderSide(color: Colors.red),</span><br><span class="line"> shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(<span class="number">20</span>)),</span><br><span class="line"> child: Text(<span class="string">&#x27;normal&#x27;</span>),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<ul>
<li>IconButton</li>
</ul>
<p>可点击 Icon，默认没有背景点击后出现背景</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">IconButton(</span><br><span class="line">     onPressed: ()&#123;</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;onPressed&#x27;</span>);</span><br><span class="line">     &#125;,</span><br><span class="line">     icon: Icon(Icons.thumb_up),</span><br><span class="line"> )</span><br></pre></td></tr></table></figure>

<ul>
<li>带图标按钮</li>
</ul>
<p>ElevatedButton、OutlineButton、IconButton 都有一个 icon 构造函数，通过 icon 创建带图标按钮</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ElevatedButton.icon(</span><br><span class="line">   icon: Icon(Icons.send),</span><br><span class="line">   label: Text(<span class="string">&quot;发送&quot;</span>),</span><br><span class="line">   onPressed: _onPressed,</span><br><span class="line"> )</span><br></pre></td></tr></table></figure>

<h4 id="3-3-图片及ICON"><a href="#3-3-图片及ICON" class="headerlink" title="3.3 图片及ICON"></a>3.3 图片及ICON</h4><h5 id="3-3-1-图片"><a href="#3-3-1-图片" class="headerlink" title="3.3.1 图片"></a>3.3.1 图片</h5><ul>
<li>asset 中加载图片</li>
</ul>
<p>根目录创建一个 images 目录，avata.png 拷贝到目录</p>
<p>pubspec.yaml 中的 flutter 部分添加内容</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">assets:</span><br><span class="line">	- images/avatar.png</span><br><span class="line">也可以</span><br><span class="line">	- images/</span><br></pre></td></tr></table></figure>

<p>加载图片</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Image(image: AssetImage(<span class="string">&#x27;images/avatar.png&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>也提供了快捷构造函数 Image.asset</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Image.asset(<span class="string">&#x27;images/avatar.png&#x27;</span>, width: <span class="number">100</span>,)</span><br></pre></td></tr></table></figure>

<ul>
<li>网络加载图片</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Image(image: NetworkImage(<span class="string">&#x27;https://xxxx&#x27;</span>), width: <span class="number">100</span>,)</span><br><span class="line">Image.network(<span class="string">&#x27;https://xxxx&#x27;</span>, width: <span class="number">100.0</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>Image 参数</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Image(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">this</span>.width, <span class="comment">//图片的宽</span></span><br><span class="line">  <span class="keyword">this</span>.height, <span class="comment">//图片高度</span></span><br><span class="line">  <span class="keyword">this</span>.color, <span class="comment">//图片的混合色值</span></span><br><span class="line">  <span class="keyword">this</span>.colorBlendMode, <span class="comment">//混合模式</span></span><br><span class="line">  <span class="keyword">this</span>.fit,<span class="comment">//缩放模式</span></span><br><span class="line">  <span class="keyword">this</span>.alignment = Alignment.center, <span class="comment">//对齐方式</span></span><br><span class="line">  <span class="keyword">this</span>.repeat = ImageRepeat.noRepeat, <span class="comment">//重复方式</span></span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>width、height 设置图片宽高，不指定宽高时，图片会根据父容器的限制，尽可能显示原始大小，如果只设置一个，另一个属性会按比例缩放</p>
<p>fit：图片显示空间和图片大小不同时指定图片适应模式</p>
<p>fill 拉伸填充满显示空间，长宽比发生变化，图片会变形</p>
<p>cover 按图片长宽比放大后居中填充显示空间，图片不会变形，超出显示被裁剪</p>
<p>fit width 图片宽度缩放到显示空间宽度，高度按比例缩放，居中显示，图片不变形，超出显示被裁剪</p>
<p>fit height</p>
<p>none 没有适应策略，图片比显示空间达，则显示图片中间部分</p>
<p>repeat：图片大小小于显示空间时，指定图片重复规则</p>
<img src="《Flutter实战第二版》三：基础组件/WeChatfd803adaf46878bf208e18fb3907acc4.png" alt="WeChatfd803adaf46878bf208e18fb3907acc4" style="zoom:80%;" />

<h5 id="3-3-2-iconfont"><a href="#3-3-2-iconfont" class="headerlink" title="3.3.2 iconfont"></a>3.3.2 iconfont</h5><p>Flutter 默认包含了一套 Material Design 的字体图标，是将图标做成字体文件，通过指定不同字符显示不同图片</p>
<p>在 pubspec.yaml 中配置</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">flutter:</span><br><span class="line">  users-material-design: <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<p>Material Design 所有图标可以在官网查看 <a href="https://material.io/tools/icons/">https://material.io/tools/icons/</a></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> icons = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">// accessible: 0xe03e</span></span><br><span class="line">icons += <span class="string">&quot;\uE03e&quot;</span>;</span><br><span class="line"><span class="comment">// error:  0xe237</span></span><br><span class="line">icons += <span class="string">&quot; \uE237&quot;</span>;</span><br><span class="line"><span class="comment">// fingerprint: 0xe287</span></span><br><span class="line">icons += <span class="string">&quot; \uE287&quot;</span>;</span><br><span class="line"></span><br><span class="line">Text(</span><br><span class="line">  icons,</span><br><span class="line">  style: TextStyle(</span><br><span class="line">    fontFamily: <span class="string">&quot;MaterialIcons&quot;</span>,</span><br><span class="line">    fontSize: <span class="number">24.0</span>,</span><br><span class="line">    color: Colors.green,</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>Flutter 封装了 IconData 和 Icon 来专门显示字体图标</p>
<p>icons 类中包含了所有 Material Design 图标的 IconData 静态变量定义</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Row(</span><br><span class="line">   mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">   children: &lt;Widget&gt;[</span><br><span class="line">     Icon(MyIcons.book,color: Colors.purple),</span><br><span class="line">     Icon(MyIcons.wechat,color: Colors.green),</span><br><span class="line">   ],</span><br><span class="line"> )</span><br></pre></td></tr></table></figure>



<ul>
<li>使用自定义字体图标 </li>
</ul>
<p>导入字体图标文件</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">fonts:</span><br><span class="line">  - family: myIcon  #指定一个字体名</span><br><span class="line">    fonts:</span><br><span class="line">      - asset: fonts/iconfont.ttf</span><br></pre></td></tr></table></figure>

<p>为了使用方便，定义 MyIcons 类，将字体文件中的所有图标都定义成静态变量</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIcons</span></span>&#123;</span><br><span class="line">  <span class="comment">// book 图标</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> IconData book = <span class="keyword">const</span> IconData(</span><br><span class="line">      <span class="number">0xe614</span>, </span><br><span class="line">      fontFamily: <span class="string">&#x27;myIcon&#x27;</span>, </span><br><span class="line">      matchTextDirection: <span class="keyword">true</span></span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 微信图标</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> IconData wechat = <span class="keyword">const</span> IconData(</span><br><span class="line">      <span class="number">0xec7d</span>,  </span><br><span class="line">      fontFamily: <span class="string">&#x27;myIcon&#x27;</span>, </span><br><span class="line">      matchTextDirection: <span class="keyword">true</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-单选开关和复选框"><a href="#3-4-单选开关和复选框" class="headerlink" title="3.4 单选开关和复选框"></a>3.4 单选开关和复选框</h4><p>它们本身不会保存当前选中状态</p>
<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%B8%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/WeChate24ea09c0c08061e88779c644b095b75.png?lastModify=1642479994" alt="WeChate24ea09c0c08061e88779c644b095b75"></p>
<p>都有个 activeColor 属性设置激活态颜色</p>
<p>Checkbox 大小固定，无法自定义</p>
<p>Switch 只能自定宽度，高度固定</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">bool</span> _switchSelected=<span class="keyword">true</span>; <span class="comment">//维护单选开关状态</span></span><br><span class="line"> <span class="built_in">bool</span> _checkboxSelected=<span class="keyword">true</span>;<span class="comment">//维护复选框状态</span></span><br><span class="line"> Switch(</span><br><span class="line"> value: _switchSelected,</span><br><span class="line"> onChanged: (value)&#123;</span><br><span class="line">   setState(() &#123;</span><br><span class="line">     _switchSelected = value;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;),</span><br><span class="line">Checkbox(</span><br><span class="line"> value: _checkboxSelected,</span><br><span class="line"> onChanged: (value)&#123;</span><br><span class="line">   setState(() &#123;</span><br><span class="line">     _checkboxSelected = value ?? <span class="keyword">false</span>;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;),</span><br></pre></td></tr></table></figure>

<h4 id="3-5-输入框及表单"><a href="#3-5-输入框及表单" class="headerlink" title="3.5 输入框及表单"></a>3.5 输入框及表单</h4><h5 id="3-5-1-输入框-TextField"><a href="#3-5-1-输入框-TextField" class="headerlink" title="3.5.1 输入框 TextField"></a>3.5.1 输入框 TextField</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TextField(&#123;</span><br><span class="line">   Key key,</span><br><span class="line">   <span class="keyword">this</span>.controller,           <span class="comment">//控制器，控制TextField文字</span></span><br><span class="line">   <span class="keyword">this</span>.focusNode, <span class="comment">//控制textField是否占有当前键盘的输入焦点</span></span><br><span class="line">   <span class="keyword">this</span>.decoration = <span class="keyword">const</span> InputDecoration(),    <span class="comment">//输入器装饰</span></span><br><span class="line">   TextInputType keyboardType,   <span class="comment">//输入的类型</span></span><br><span class="line">   <span class="keyword">this</span>.textInputAction,  <span class="comment">//键盘回车键图标</span></span><br><span class="line">   <span class="keyword">this</span>.textCapitalization = TextCapitalization.none,</span><br><span class="line">   <span class="keyword">this</span>.style,</span><br><span class="line">   <span class="keyword">this</span>.textAlign = TextAlign.start,   <span class="comment">//文字显示位置</span></span><br><span class="line">   <span class="keyword">this</span>.autofocus = <span class="keyword">false</span>, <span class="comment">//是否自动获取焦点</span></span><br><span class="line">   <span class="keyword">this</span>.obscureText = <span class="keyword">false</span>, <span class="comment">//是否*号显示</span></span><br><span class="line">   <span class="keyword">this</span>.autocorrect = <span class="keyword">true</span>,</span><br><span class="line">   <span class="keyword">this</span>.maxLines = <span class="number">1</span>,</span><br><span class="line">   <span class="keyword">this</span>.maxLength, <span class="comment">//文本框最大长度，设置后输入框右下角会显示输入的文本计数</span></span><br><span class="line">   <span class="keyword">this</span>.maxLengthEnforced = <span class="keyword">true</span>,</span><br><span class="line">   <span class="keyword">this</span>.onChanged,                <span class="comment">//文字改变触发</span></span><br><span class="line">   <span class="keyword">this</span>.onEditingComplete,   <span class="comment">//当用户提交可编辑内容时调用</span></span><br><span class="line">   <span class="keyword">this</span>.onSubmitted,   <span class="comment">////<span class="markdown">文字提交触发（键盘按键）</span></span></span><br><span class="line">   <span class="keyword">this</span>.inputFormatters, <span class="comment">//指定输入格式，输入内容改变时，会根据指定格式校验</span></span><br><span class="line">   <span class="keyword">this</span>.enabled,</span><br><span class="line">   <span class="keyword">this</span>.cursorWidth = <span class="number">2.0</span>, <span class="comment">//输入光标宽度</span></span><br><span class="line">   <span class="keyword">this</span>.cursorRadius,    <span class="comment">//输入光标圆角  </span></span><br><span class="line">   <span class="keyword">this</span>.cursorColor,   <span class="comment">//输入光标颜色</span></span><br><span class="line">   <span class="keyword">this</span>.keyboardAppearance,</span><br><span class="line">   <span class="keyword">this</span>.scrollPadding = <span class="keyword">const</span> EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<p>controller 编辑框的控制器，通过它可以设置/获取编辑框的内容、选择编辑内容、监听文本改变事件。</p>
<p>focusNode 用于控制 TextField 是否占有当前键盘的输入焦点</p>
<p>decoration 用于控制 TextField 的外观显示，如提示文本、背景颜色、边框</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">FocusNode focusNode1 = FocusNode();</span><br><span class="line">FocusNode focusNode2 = FocusNode();</span><br><span class="line">FocusScopeNode? focusScopeNode;</span><br><span class="line"></span><br><span class="line">body: Center(</span><br><span class="line">  child: Column(</span><br><span class="line">    children: [</span><br><span class="line">      TextField(</span><br><span class="line">        autofocus: <span class="keyword">true</span>,</span><br><span class="line">        focusNode: focusNode1,</span><br><span class="line">        controller: _unameController,</span><br><span class="line">        decoration: InputDecoration(</span><br><span class="line">          labelText: <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">          hintText: <span class="string">&#x27;用户名或邮箱&#x27;</span>,</span><br><span class="line">          prefixIcon: Icon(Icons.person),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      TextField(</span><br><span class="line">        focusNode: focusNode2,</span><br><span class="line">        decoration: InputDecoration(</span><br><span class="line">          labelText: <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">          hintText: <span class="string">&#x27;登录密码&#x27;</span>,</span><br><span class="line">          prefixIcon: Icon(Icons.lock),</span><br><span class="line">        ),</span><br><span class="line">        obscureText: <span class="keyword">true</span>,</span><br><span class="line">      ),</span><br><span class="line">      ElevatedButton(</span><br><span class="line">        onPressed: ()&#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">null</span> == focusScopeNode) &#123;</span><br><span class="line">            focusScopeNode = FocusScope.of(context);</span><br><span class="line">          &#125;</span><br><span class="line">          focusScopeNode!.requestFocus(focusNode2);</span><br><span class="line">        &#125;,</span><br><span class="line">        child: Text(<span class="string">&#x27;移动焦点&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      ElevatedButton(</span><br><span class="line">        onPressed: ()&#123;</span><br><span class="line">          focusNode1.unfocus();</span><br><span class="line">          focusNode2.unfocus();</span><br><span class="line">        &#125;,</span><br><span class="line">        child: Text(<span class="string">&#x27;隐藏键盘&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>



<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%B8%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/WeChatce892753a9d9210783f5c2d69dadd941.png?lastModify=1642479994" alt="WeChatce892753a9d9210783f5c2d69dadd941"></p>
<ul>
<li>获取输入内容</li>
</ul>
<p>定义一个 controller</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextEditingController _unameController = TextEditingController();</span><br></pre></td></tr></table></figure>

<p>设置输入 controller</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">    autofocus: <span class="keyword">true</span>,</span><br><span class="line">    controller: _unameController,</span><br></pre></td></tr></table></figure>

<p>通过 onChange 回调获取输入内容</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">    autofocus: <span class="keyword">true</span>,</span><br><span class="line">    onChanged: (v) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;onChange: <span class="subst">$v</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>通过 controller 监听获取输入的内容</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> initState() &#123;</span><br><span class="line">  <span class="keyword">super</span>.initState();</span><br><span class="line">  _unameController.addListener(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(_unameController.text);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>onChange 是专门用于监听文本变化</p>
<p>controller 还可以设置默认值、选择文本</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">_selectionController.text=<span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">_selectionController.selection=TextSelection(</span><br><span class="line">    baseOffset: <span class="number">2</span>,</span><br><span class="line">    extentOffset: _selectionController.text.length</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>控制焦点</li>
</ul>
<p>通过 FocusScopeNode 在输入框之间移动焦点、设置默认焦点</p>
<p>通过 FocusScope.of(context) 获取 Widget 树中默认的 FocusScopeNode</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">FocusScopeNode? focusScopeNode;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == focusScopeNode) &#123;</span><br><span class="line">  focusScopeNode = FocusScope.of(context);</span><br><span class="line">&#125;</span><br><span class="line">focusScopeNode!.requestFocus(focusNode2); <span class="comment">//移动焦点</span></span><br></pre></td></tr></table></figure>

<ul>
<li>监听焦点改变事件</li>
</ul>
<p>获取到焦点时 focusNode.hasFocus 为 true 失去焦点时为 false</p>
<p>FocusNode 继承自 ChangeNotifier，通过 FocusNode 可以监听焦点的改变</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//隐藏键盘</span></span><br><span class="line">focusNode1.unfocus();</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 创建 focusNode   </span></span><br><span class="line">FocusNode focusNode = FocusNode();</span><br><span class="line">...</span><br><span class="line"><span class="comment">// focusNode绑定输入框   </span></span><br><span class="line">TextField(focusNode: focusNode);</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 监听焦点变化    </span></span><br><span class="line">focusNode.addListener(()&#123;</span><br><span class="line">   <span class="built_in">print</span>(focusNode.hasFocus);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义样式</li>
</ul>
<p>分别设置输入框未获得和获得焦点下划线颜色</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">decoration: InputDecoration(</span><br><span class="line">  labelText: <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  hintText: <span class="string">&#x27;用户名或邮箱&#x27;</span>,</span><br><span class="line">  prefixIcon: Icon(Icons.person),</span><br><span class="line">  enabledBorder: UnderlineInputBorder( <span class="comment">//未获得焦点下划线颜色</span></span><br><span class="line">    borderSide: BorderSide(color: Colors.red),</span><br><span class="line">  ),</span><br><span class="line">  focusedBorder: UnderlineInputBorder( <span class="comment">//获得焦点下划线颜色</span></span><br><span class="line">    borderSide: BorderSide(color: Colors.yellow),</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<p>通过主题自定义输入框样式</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Theme(</span><br><span class="line">  data: Theme.of(context).copyWith(</span><br><span class="line">      hintColor: Colors.grey[<span class="number">200</span>], <span class="comment">//定义下划线颜色</span></span><br><span class="line">      inputDecorationTheme: InputDecorationTheme(</span><br><span class="line">          labelStyle: TextStyle(color: Colors.grey),<span class="comment">//定义label字体样式</span></span><br><span class="line">          hintStyle: TextStyle(color: Colors.grey, fontSize: <span class="number">14.0</span>)<span class="comment">//定义提示文本样式</span></span><br><span class="line">      )</span><br><span class="line">  ),</span><br></pre></td></tr></table></figure>

<p>另一种灵活的方式是直接隐藏 TextField 本身的下划线，通过 Container 去嵌套定义样式</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  child: TextField(</span><br><span class="line">    keyboardType: TextInputType.emailAddress,</span><br><span class="line">    decoration: InputDecoration(</span><br><span class="line">        labelText: <span class="string">&quot;Email&quot;</span>,</span><br><span class="line">        hintText: <span class="string">&quot;电子邮件地址&quot;</span>,</span><br><span class="line">        prefixIcon: Icon(Icons.email),</span><br><span class="line">        border: InputBorder.none <span class="comment">//隐藏下划线</span></span><br><span class="line">    )</span><br><span class="line">  ),</span><br><span class="line">  decoration: BoxDecoration(</span><br><span class="line">      <span class="comment">// 下滑线浅灰色，宽度1像素</span></span><br><span class="line">      border: Border(bottom: BorderSide(color: Colors.grey[<span class="number">200</span>], width: <span class="number">1.0</span>))</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h5 id="3-5-2-表单-Form"><a href="#3-5-2-表单-Form" class="headerlink" title="3.5.2 表单 Form"></a>3.5.2 表单 Form</h5><ul>
<li>Form</li>
</ul>
<p>可以对输入框进行分组，然后进行统一操作</p>
<p>Form 类的定义 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Form(&#123;</span><br><span class="line">  <span class="keyword">required</span> Widget child,</span><br><span class="line">  <span class="built_in">bool</span> autovalidate = <span class="keyword">false</span>,</span><br><span class="line">  WillPopCallback onWillPop,</span><br><span class="line">  VoidCallback onChanged,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>autovalidate 是否自动校验输入内容，为 true 时，每个 FormField 内容变化时自动校验合法性，显示错误信息，否则需要通过调用 FormState.validate() 来手动校验</p>
<p>onWillPop 决定 Form 所在路由是否可以直接返回，通常用于拦截返回按钮</p>
<p>onChanged： Form 任意一个子 FormField 内容发生改变时触发回调</p>
<ul>
<li>FormField</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> FormField(&#123;</span><br><span class="line">   ...</span><br><span class="line">   FormFieldSetter&lt;T&gt; onSaved, <span class="comment">//保存回调</span></span><br><span class="line">   FormFieldValidator&lt;T&gt;  validator, <span class="comment">//验证回调</span></span><br><span class="line">   T initialValue, <span class="comment">//初始值</span></span><br><span class="line">   <span class="built_in">bool</span> autovalidate = <span class="keyword">false</span>, <span class="comment">//是否自动校验。</span></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<p>Form 的子孙元素必须是 FormField 类型</p>
<p>为了使用方便，Flutter 提供了一个 TextFormField</p>
<ul>
<li>FormState</li>
</ul>
<p>FormState 为 Form 的State 类，可以通过 Form.of(context) 或 GlobalKey 获得，可以通过它来对 Form 的子孙 FormField 进行统一操作</p>
<p>FormState.validate()：调用后，会调用 Form 子孙 FormField 的 validate 回调，有一个校验失败返回 false</p>
<p>FormState.save()：会调用 Form 子孙 FormField 的 save 回调，用于保存表单内容</p>
<p>FormState.reset()：会将子孙 FormField 的内容清空</p>
<ul>
<li>示例</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">void</span> main() &#123;</span><br><span class="line">   runApp(MaterialApp(home: FormTestRoute()));</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">FormTestRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@override</span></span><br><span class="line">   _FormTestRouteState createState() =&gt; _FormTestRouteState();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">_FormTestRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">FormTestRoute</span>&gt; </span>&#123;</span><br><span class="line">   TextEditingController _unameController = TextEditingController();</span><br><span class="line">   TextEditingController _pwdController   = TextEditingController();</span><br><span class="line">   GlobalKey _formKey = GlobalKey&lt;FormState&gt;();</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@override</span></span><br><span class="line">   <span class="keyword">void</span> initState() &#123;</span><br><span class="line">     <span class="keyword">super</span>.initState();</span><br><span class="line"> </span><br><span class="line">     _unameController.addListener(() &#123;</span><br><span class="line">       <span class="built_in">print</span>(_unameController.text);</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@override</span></span><br><span class="line">   Widget build(BuildContext context) &#123;</span><br><span class="line">     <span class="keyword">return</span> Scaffold(</span><br><span class="line">       appBar: AppBar(</span><br><span class="line">         title: Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">       ),</span><br><span class="line">       body: Form(</span><br><span class="line">         key: _formKey,<span class="comment">//设置 globalkey</span></span><br><span class="line">         child: Column(</span><br><span class="line">           children: [</span><br><span class="line">             TextFormField(</span><br><span class="line">               autofocus: <span class="keyword">true</span>,</span><br><span class="line">               controller: _unameController,</span><br><span class="line">               decoration: InputDecoration(</span><br><span class="line">                 labelText: <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">                 hintText: <span class="string">&#x27;用户名或邮箱&#x27;</span>,</span><br><span class="line">                 prefixIcon: Icon(Icons.person),</span><br><span class="line">               ),</span><br><span class="line">               <span class="comment">//校验用户名</span></span><br><span class="line">               validator: (v)&#123;</span><br><span class="line">                 <span class="keyword">return</span> v!.trim().length &gt; <span class="number">0</span> ? <span class="keyword">null</span> : <span class="string">&#x27;用户名不能为空&#x27;</span>;</span><br><span class="line">               &#125;,</span><br><span class="line">             ),</span><br><span class="line">             TextFormField(</span><br><span class="line">               decoration: InputDecoration(</span><br><span class="line">                 labelText: <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">                 hintText: <span class="string">&#x27;登录密码&#x27;</span>,</span><br><span class="line">                 prefixIcon: Icon(Icons.lock),</span><br><span class="line">               ),</span><br><span class="line">               obscureText: <span class="keyword">true</span>,</span><br><span class="line">               <span class="comment">//校验密码</span></span><br><span class="line">               validator: (v)&#123;</span><br><span class="line">                 <span class="keyword">return</span> v!.trim().length &gt; <span class="number">0</span> ? <span class="keyword">null</span> : <span class="string">&#x27;密码不能为空&#x27;</span>;</span><br><span class="line">               &#125;,</span><br><span class="line">             ),</span><br><span class="line">             Padding(</span><br><span class="line">                 padding: EdgeInsets.only(top: <span class="number">20</span>),</span><br><span class="line">                 child: Row(</span><br><span class="line">                   children: [</span><br><span class="line">                     Expanded(</span><br><span class="line">                         child: ElevatedButton(</span><br><span class="line">                           child: Padding(</span><br><span class="line">                             padding: EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">                             child: Text(<span class="string">&#x27;登录&#x27;</span>),</span><br><span class="line">                           ),</span><br><span class="line">                           onPressed: ()&#123;</span><br><span class="line">                             <span class="comment">// 通过_formKey.currentState 获取FormState后，</span></span><br><span class="line">                             <span class="comment">// 调用validate()方法校验用户名密码是否合法，校验</span></span><br><span class="line">                             <span class="comment">// 通过后再提交数据。</span></span><br><span class="line">                             <span class="keyword">if</span> ((_formKey.currentState <span class="keyword">as</span> FormState).validate()) &#123;</span><br><span class="line">                               <span class="built_in">print</span>(<span class="string">&#x27;通过校验&#x27;</span>);</span><br><span class="line">                             &#125;</span><br><span class="line">                           &#125;,</span><br><span class="line">                         ),</span><br><span class="line">                     ),</span><br><span class="line">                   ],</span><br><span class="line">                 ),</span><br><span class="line">             ),</span><br><span class="line">           ],</span><br><span class="line">         ),</span><br><span class="line">       ),</span><br><span class="line">     );</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%B8%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/WeChat803de70354088ea04b9983c0a122d48b.png?lastModify=1642479994" alt="WeChat803de70354088ea04b9983c0a122d48b"></p>
<p>此处登录按钮的 onPressed 方法不能通过 Form.of(context) 来获取，这边的context是 FormTestRoute 的context</p>
<p>Form.of(context) 是根据所指定的 context 向根去查找，FormState 是在FormTestRoute的子树中所以不行 </p>
<p>可以通过 Builder 来构建登录按钮，Builder 会将 Widget 节点的context 作为回调参数</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Expanded(</span><br><span class="line"> <span class="comment">// 通过Builder来获取ElevatedButton所在widget树的真正context(Element) </span></span><br><span class="line">  child:Builder(builder: (context)&#123;</span><br><span class="line">    <span class="keyword">return</span> ElevatedButton(</span><br><span class="line">      ...</span><br><span class="line">      onPressed: () &#123;</span><br><span class="line">        <span class="comment">//由于本widget也是Form的子代widget，所以可以通过下面方式获取FormState  </span></span><br><span class="line">        <span class="keyword">if</span>(Form.of(context).validate())&#123;</span><br><span class="line">          <span class="comment">//验证通过提交数据</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="3-6-进度指示器"><a href="#3-6-进度指示器" class="headerlink" title="3.6 进度指示器"></a>3.6 进度指示器</h4><ul>
<li>LinearProgressIndicator</li>
</ul>
<p>线性条状进度条</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">LinearProgressIndicator(&#123;</span><br><span class="line">  <span class="built_in">double</span> value,</span><br><span class="line">  Color backgroundColor,</span><br><span class="line">  Animation&lt;Color&gt; valueColor,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>value：当前进度，取值 [0,1]，value 为 null 会执行一个循环动画，不为 null 时为一个具体进度的进度条</p>
<p>valueColor：进度条颜色，类型 <code>Animation&lt;Color&gt;</code>，允许对进度条颜色指定动画，如果使用固定颜色使用 AlwaysStoppedAnimation 来指定</p>
<ul>
<li>CircularProgressIndicator</li>
</ul>
<p>圆形进度条</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"> CircularProgressIndicator(&#123;</span><br><span class="line">  <span class="built_in">double</span> value,</span><br><span class="line">  Color backgroundColor,</span><br><span class="line">  Animation&lt;Color&gt; valueColor,</span><br><span class="line">  <span class="keyword">this</span>.strokeWidth = <span class="number">4.0</span>,</span><br><span class="line">  ...   </span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>

<p>strokeWidth 圆形进度条的粗细</p>
<ul>
<li>示例</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">LinearProgressIndicator(</span><br><span class="line">  backgroundColor: Colors.grey[<span class="number">200</span>],</span><br><span class="line">  valueColor: AlwaysStoppedAnimation(Colors.blue),</span><br><span class="line">  value: <span class="number">.5</span>,</span><br><span class="line">),</span><br><span class="line">CircularProgressIndicator(</span><br><span class="line">  backgroundColor: Colors.grey[<span class="number">200</span>],</span><br><span class="line">  valueColor: AlwaysStoppedAnimation(Colors.blue),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义尺寸</li>
</ul>
<p>CircularProgressIndicator 和 LinearProgressIndicator 都是取父容器的尺寸作为绘制边界的，可以通过尺寸限制 Widget，如 ConstrainedBox、SizedBox</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 线性进度条高度指定为3</span></span><br><span class="line">SizedBox(</span><br><span class="line">  height: <span class="number">3</span>,</span><br><span class="line">  child: LinearProgressIndicator(</span><br><span class="line">    backgroundColor: Colors.grey[<span class="number">200</span>],</span><br><span class="line">    valueColor: AlwaysStoppedAnimation(Colors.blue),</span><br><span class="line">    value: <span class="number">.5</span>,</span><br><span class="line">  ),</span><br><span class="line">),</span><br><span class="line"><span class="comment">// 圆形进度条直径指定为100</span></span><br><span class="line">SizedBox(</span><br><span class="line">  height: <span class="number">100</span>,</span><br><span class="line">  width: <span class="number">100</span>,</span><br><span class="line">  child: CircularProgressIndicator(</span><br><span class="line">    backgroundColor: Colors.grey[<span class="number">200</span>],</span><br><span class="line">    valueColor: AlwaysStoppedAnimation(Colors.blue),</span><br><span class="line">    value: <span class="number">.7</span>,</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<ul>
<li><p>进度色动画</p>
</li>
<li><p>自定义进度指示器样式</p>
</li>
</ul>
<p>可以通过 CustomPainter Widge 来自定义绘制逻辑</p>
]]></content>
  </entry>
  <entry>
    <title>《Flutter实战第二版》二：第一个Flutter应用</title>
    <url>/2022/01/18/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%BA%8C%EF%BC%9A%E7%AC%AC%E4%B8%80%E4%B8%AAFlutter%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h3 id="2-第一个-Flutter-应用"><a href="#2-第一个-Flutter-应用" class="headerlink" title="2 第一个 Flutter 应用"></a>2 第一个 Flutter 应用</h3><h4 id="2-1-计数器应用"><a href="#2-1-计数器应用" class="headerlink" title="2.1 计数器应用"></a>2.1 计数器应用</h4><h5 id="2-1-1-创建-Flutter-应用模板"><a href="#2-1-1-创建-Flutter-应用模板" class="headerlink" title="2.1.1 创建 Flutter 应用模板"></a>2.1.1 创建 Flutter 应用模板</h5><p>Android Studio 创建新的 Flutter 工程得到一个计数器应用 Demo</p>
<img src="《Flutter实战第二版》二：第一个Flutter应用/WeChatb18a46cb6a1321d33b71401d68d6e8ba.png" alt="WeChatb18a46cb6a1321d33b71401d68d6e8ba" style="zoom:50%;" />

<p>示例主要 Dart 代码在 lib/main.dart 文件中，源码</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123; runApp(<span class="keyword">const</span> MyApp()); &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">const</span> MyHomePage(title: <span class="string">&#x27;Flutter Demo Home Page&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;MyHomePage&gt; createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyHomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _counter = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">void</span> _incrementCounter() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _counter++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(widget.title),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            <span class="keyword">const</span> Text(</span><br><span class="line">              <span class="string">&#x27;You have pushed the button this many times:&#x27;</span>,</span><br><span class="line">            ),</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">&#x27;<span class="subst">$_counter</span>&#x27;</span>,</span><br><span class="line">              style: Theme.of(context).textTheme.headline4,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: _incrementCounter,</span><br><span class="line">        tooltip: <span class="string">&#x27;Increment&#x27;</span>,</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">      ), <span class="comment">// This trailing comma makes auto-formatting nicer for build methods.</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>分析</li>
</ul>
<ol>
<li>导入包</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>导入了 Material UI 组件库，Material 是一种标准的移动端和web端视觉设计语言，Flutter 默认提供了一套丰富的 Material 风格的 UI 组件</p>
<ol start="2">
<li>应用的入口</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123; runApp(<span class="keyword">const</span> MyApp()); &#125;</span><br></pre></td></tr></table></figure>

<p>man 函数为应用程序入口，main 函数调用了 runApp 方法，它的功能是启动 Flutter 应用，runApp 接受一个 Widget 参数，本示例中它是一个 MyApp 对象， MyApp() 是 Flutter 应用的根组件</p>
<ol start="3">
<li>应用结构</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,<span class="comment">//蓝色主题</span></span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">const</span> MyHomePage(title: <span class="string">&#x27;Flutter Demo Home Page&#x27;</span>),<span class="comment">//应用首页路由</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MyApp 类代表 Flutter 应用，继承了 StatelessWidget 类，意味着应用本身也是一个 widget</p>
<p>Flutter 中大多数东西都是 widget，包括对齐(Align)、填充(Padding)、手势处理(GestureDetector)等，都是以 widget 的形式提供</p>
<p>Flutter 构建页面时，会调用组件 build 方法，widget 的主要工作是提供一个 build() 方法来描述如何构建 UI 界面(通常是组合、拼装其它基础 widget)</p>
<p>MaterialAPP 是 Material 库中提供的 Flutter APP 框架，通过它可以设置应用的名称、主题、首页及路由列表，MaterialAPP 也是一个 widget</p>
<p>home 为 Flutter 应用首页，也是一个 widget</p>
<h5 id="2-1-2-首页"><a href="#2-1-2-首页" class="headerlink" title="2.1.2 首页"></a>2.1.2 首页</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;MyHomePage&gt; createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyHomePage</span>&gt; </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MyHomePage 应用首页 继承自 StatefulWidget 类，表示它是一个有状态的组件</p>
<p>StatefulWidget 至少由两个类组成：</p>
<p>一个 StatefulWidget 类；一个 State 类；StatefulWidget 类本身是不变的，State 类持有的状态在 widget 生命周期中可能发生变化</p>
<ul>
<li>State 类</li>
</ul>
<p>_MyHomePageState 类包含</p>
<ol>
<li>该组件的状态，这里只需要维护一个点击次数的计数器，所以定义一个 _counter</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> _counter = <span class="number">0</span>;<span class="comment">//记录按钮点击次数</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>设置状态的自增函数</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _incrementCounter() &#123;</span><br><span class="line">  setState(() &#123;</span><br><span class="line">    _counter++;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按钮点击时会调用此函数，该函数作用是先自增 _counter，然后调用 setState 方法，setState 方法作用是通知 Flutter 框架，有状态发生了改变，Flutter 框架收到通知后，会执行 build 方法来跟进新的状态重新构建界面</p>
<ol start="3">
<li>构建 UI 界面</li>
</ol>
<p>构建 UI 界面在 build 方法中，MyHomePage 第一次创建时，_MyHomePageState 类会被创建，Flutter 框架会调用 widget 的 build 方法来构建 widget 树</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Scaffold(</span><br><span class="line">    appBar: AppBar(</span><br><span class="line">      title: Text(widget.title),</span><br><span class="line">    ),</span><br><span class="line">    body: Center(</span><br><span class="line">      child: Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          <span class="keyword">const</span> Text(</span><br><span class="line">            <span class="string">&#x27;You have pushed the button this many times:&#x27;</span>,</span><br><span class="line">          ),</span><br><span class="line">          Text(</span><br><span class="line">            <span class="string">&#x27;<span class="subst">$_counter</span>&#x27;</span>,</span><br><span class="line">            style: Theme.of(context).textTheme.headline4,</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">    floatingActionButton: FloatingActionButton(</span><br><span class="line">      onPressed: _incrementCounter,</span><br><span class="line">      tooltip: <span class="string">&#x27;Increment&#x27;</span>,</span><br><span class="line">      child: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">    ), <span class="comment">// This trailing comma makes auto-formatting nicer for build methods.</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Scaffold 是 Material 库中提供的页面脚手架，提供了默认的导航栏、标题、和包含主屏幕 widget 树的body 属性，路由默认都是通过 Scaffold 创建</p>
<p>body 组件中包含了一个 Center 组件，Center 组件可以将子组件对齐到屏幕中心</p>
<p>Center 的子组件是一个 Column 组件，Column 作用是将其所有子组件沿屏幕垂直方向依次排列</p>
<p>floatingActionButton 页面右下角带+号的悬浮按钮，它的 onPressed 属性接受一个回调函数</p>
<h4 id="2-2-Widget"><a href="#2-2-Widget" class="headerlink" title="2.2 Widget"></a>2.2 Widget</h4><h5 id="2-2-1-Widget-概念"><a href="#2-2-1-Widget-概念" class="headerlink" title="2.2.1 Widget 概念"></a>2.2.1 Widget 概念</h5><p>Flutter 中是通过 Widget 嵌套 Widget 的方式来构建 UI 和进行实践处理的，Flutter中万物皆为 Widget</p>
<h5 id="2-2-2-StatelessWidget"><a href="#2-2-2-StatelessWidget" class="headerlink" title="2.2.2 StatelessWidget"></a>2.2.2 StatelessWidget</h5><p>StatelessWidget 用于不需要维护状态的场景，通常在 build 方法中通过嵌套其它 widget 来构建UI</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Echo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span>  </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Echo(&#123;</span><br><span class="line">    Key? key,  </span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.text,</span><br><span class="line">    <span class="keyword">this</span>.backgroundColor = Colors.grey, <span class="comment">//默认为灰色</span></span><br><span class="line">  &#125;):<span class="keyword">super</span>(key:key);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> text;</span><br><span class="line">  <span class="keyword">final</span> Color backgroundColor;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        color: backgroundColor,</span><br><span class="line">        child: Text(text),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在继承 widget 时，第一个参数通常应该是 key，按照惯例，widget 的属性应尽可能的被声明为 final</p>
<p>使用</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Echo(text: <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Context</li>
</ul>
<p>build 方法中有一个 context 参数，是BuildContext 类的一个实例，表示当前 widget 在 widget 树中的上下文，每个 widget 都会对应一个 context 对象</p>
<p>提供了从当前 widget 开始向上遍历 widget 树以及按照 widget 类型查找父级 widget 的方法</p>
<p>从子树中获取父级 widget 的示例</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span>  </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&quot;Context测试&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        child: Builder(builder: (context) &#123;</span><br><span class="line">          <span class="comment">// 在 widget 树中向上查找最近的父级`Scaffold`  widget </span></span><br><span class="line">          Scaffold scaffold = context.findAncestorWidgetOfExactType&lt;Scaffold&gt;();</span><br><span class="line">          <span class="comment">// 直接返回 AppBar的title， 此处实际上是Text(&quot;Context测试&quot;)</span></span><br><span class="line">          <span class="keyword">return</span> (scaffold.appBar <span class="keyword">as</span> AppBar).title;</span><br><span class="line">        &#125;),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-3-StatefulWidget"><a href="#2-2-3-StatefulWidget" class="headerlink" title="2.2.3 StatefulWidget"></a>2.2.3 StatefulWidget</h5><p>继承自 widget 类，重写了 createElement() 方法，添加了一个新的接口 createState()</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StatefulWidget</span> <span class="keyword">extends</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> StatefulWidget(&#123; Key key &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  StatefulElement createElement() =&gt; StatefulElement(<span class="keyword">this</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  State createState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-4-State"><a href="#2-2-4-State" class="headerlink" title="2.2.4 State"></a>2.2.4 State</h5><p>一个 StatefulWidget 类会对应一个 State 类，State表示与其对应的 StatefulWidget 要维护的状态</p>
<p>当State被改变时，可以手动调用其 setState() 方法通知Flutter 框架状态发生改变，Flutter 框架在收到消息后，会重新调用其 build 方法重新构建 widget 树，从而达到更新UI的目的</p>
<p>State 中有两个常用属性 widget、context</p>
<h5 id="2-2-5-从-widget-树中获取-State-对象"><a href="#2-2-5-从-widget-树中获取-State-对象" class="headerlink" title="2.2.5 从 widget 树中获取 State 对象"></a>2.2.5 从 widget 树中获取 State 对象</h5><p>context 对象有一个 findAncestorStateOfType() 方法，该方法可以从当前节点沿着 widget 树向上查找指定类型的 StatefulWidget 对应的 state 对象</p>
<p>通过context获取</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查找父级最近的Scaffold对应的ScaffoldState对象</span></span><br><span class="line">ScaffoldState _state = context.findAncestorStateOfType&lt;ScaffoldState&gt;()!;</span><br><span class="line"><span class="comment">// 打开抽屉菜单</span></span><br><span class="line">_state.openDrawer();</span><br></pre></td></tr></table></figure>

<p>Scaffold 也提供了一个 of 方法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接通过of静态方法来获取ScaffoldState</span></span><br><span class="line">ScaffoldState _state=Scaffold.of(context);</span><br><span class="line"><span class="comment">// 打开抽屉菜单</span></span><br><span class="line">_state.openDrawer();</span><br></pre></td></tr></table></figure>

<p>通过 GlobalKey</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个globalKey, 由于GlobalKey要保持全局唯一性，我们使用静态变量存储</span></span><br><span class="line"><span class="keyword">static</span> GlobalKey&lt;ScaffoldState&gt; _globalKey= GlobalKey();</span><br><span class="line">...</span><br><span class="line">Scaffold(</span><br><span class="line">    key: _globalKey , <span class="comment">//设置key</span></span><br><span class="line">    ...  </span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line"><span class="comment">//通过GlobalKey来获取State对象</span></span><br><span class="line">_globalKey.currentState.openDrawer()</span><br></pre></td></tr></table></figure>



<h4 id="2-3-状态管理"><a href="#2-3-状态管理" class="headerlink" title="2.3 状态管理"></a>2.3 状态管理</h4><h5 id="2-3-1-Widget-管理自身状态"><a href="#2-3-1-Widget-管理自身状态" class="headerlink" title="2.3.1 Widget 管理自身状态"></a>2.3.1 Widget 管理自身状态</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(home: FormTestRoute()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormTestRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _FormTestRouteState createState() =&gt; _FormTestRouteState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_FormTestRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">FormTestRoute</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: TapboxA(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>_TapboxAState 类：</p>
<p>管理 TapboxA 的状态，定义 _active：确定盒子的当前颜色的布尔值</p>
<p>定义 _handleTap() 函数，在点击盒子时更新 _active 并调用 setState() 更新UI</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TapboxA</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> TapboxA(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _TapboxAState createState() =&gt; _TapboxAState();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TapboxAState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">TapboxA</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> _active = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _handleTap() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _active = !_active;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> GestureDetector(</span><br><span class="line">      onTap: _handleTap,</span><br><span class="line">      child: Container(</span><br><span class="line">        child: Text(</span><br><span class="line">          _active ? <span class="string">&quot;Active&quot;</span> : <span class="string">&quot;Inactive&quot;</span>,</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">32.0</span>, color: Colors.red),</span><br><span class="line">        ),</span><br><span class="line">        width: <span class="number">200</span>,</span><br><span class="line">        height: <span class="number">200</span>,</span><br><span class="line">        decoration: BoxDecoration(</span><br><span class="line">          color: _active ? Colors.lightGreen[<span class="number">700</span>] : Colors.grey[<span class="number">600</span>],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-2-父-Widget-管理子-Widget-状态"><a href="#2-3-2-父-Widget-管理子-Widget-状态" class="headerlink" title="2.3.2 父 Widget 管理子 Widget 状态"></a>2.3.2 父 Widget 管理子 Widget 状态</h5><p>对于父 Widget 来说，管理状态并告诉其子 Widget 何时更新通常是比较好的方式，例如，IconButton 是一个图标按钮，但它是个无状态 Widget，因为我们认为父Widget需要知道该按钮是否被点击来采取相应处理</p>
<p>TapboxB通过回调将其状态导出到其父组件，状态由父组件管理，因此父组件未 StatefulWidget，TapboxB不管理任何状态，为 StatelessWidget</p>
<p>ParentWidget</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ParentWidget(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ParentWidgetState createState() =&gt; _ParentWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ParentWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ParentWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> _active = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">void</span> _handleTapboxChanged(<span class="built_in">bool</span> newValue) &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _active = newValue;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      child: TapBoxB(</span><br><span class="line">          active: _active,</span><br><span class="line">          onChanged: _handleTapboxChanged,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TapBoxB</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TapBoxB</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> TapBoxB(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">this</span>.active: <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.onChanged</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">bool</span> active;</span><br><span class="line">  <span class="keyword">final</span> ValueChanged&lt;<span class="built_in">bool</span>&gt; onChanged;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _handleTap() &#123;</span><br><span class="line">    onChanged(!active);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> GestureDetector(</span><br><span class="line">      onTap: _handleTap,</span><br><span class="line">      child: Container(</span><br><span class="line">        child: Center(</span><br><span class="line">          child: Text(</span><br><span class="line">              active ? <span class="string">&quot;Active&quot;</span> : <span class="string">&quot;Inactive&quot;</span>,</span><br><span class="line">              style: TextStyle(fontSize: <span class="number">32</span>, color: Colors.red),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        width: <span class="number">200</span>,</span><br><span class="line">        height: <span class="number">200</span>,</span><br><span class="line">        decoration: BoxDecoration(</span><br><span class="line">          color: active ? Colors.lightGreen[<span class="number">700</span>] : Colors.grey[<span class="number">600</span>],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-3-混合状态管理"><a href="#2-3-3-混合状态管理" class="headerlink" title="2.3.3 混合状态管理"></a>2.3.3 混合状态管理</h5><p>组件自身管理一些内部状态，父组件管理一些其它外部状态</p>
<h4 id="2-4-路由管理"><a href="#2-4-路由管理" class="headerlink" title="2.4 路由管理"></a>2.4 路由管理</h4><h5 id="2-4-1-示例"><a href="#2-4-1-示例" class="headerlink" title="2.4.1 示例"></a>2.4.1 示例</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> TestRoute(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        child: TextButton(</span><br><span class="line">            onPressed: ()&#123;</span><br><span class="line">              Navigator.push(</span><br><span class="line">                context,</span><br><span class="line">                MaterialPageRoute(builder: (context)&#123;</span><br><span class="line">                  <span class="keyword">return</span> NewRoute();</span><br><span class="line">                &#125;),</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">            child: Text(<span class="string">&quot;open new router&quot;</span>)</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> NewRoute(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;New route&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(<span class="string">&#x27;This is new route&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-2-MaterialPageRoute"><a href="#2-4-2-MaterialPageRoute" class="headerlink" title="2.4.2 MaterialPageRoute"></a>2.4.2 MaterialPageRoute</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"> MaterialPageRoute(&#123;</span><br><span class="line">  WidgetBuilder builder,</span><br><span class="line">  RouteSettings settings,</span><br><span class="line">  <span class="built_in">bool</span> maintainState = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">bool</span> fullscreenDialog = <span class="keyword">false</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>builder：是一个 WidgetBuilder 类型的回调函数，作用是构建路由页面的具体内容，返回一个 widget。通常要实现此回调，返回新路由的实例</p>
<p>settings：路由配置信息，如路由名称、是否初始路由（首页）</p>
<p>maintainState：默认情况下，当入栈一个新路由时，原来的路由仍然会被保存在内存中，如果想在路由没用的时候释放其所占用的所有资源，可以设置 maintainState 为 false</p>
<p>fullscreenDialog：新路由页面是否是一个全屏的模态对话框，iOS中为true，则新页面将会从屏幕底部滑入</p>
<h5 id="2-4-3-Navigtior"><a href="#2-4-3-Navigtior" class="headerlink" title="2.4.3 Navigtior"></a>2.4.3 Navigtior</h5><p>路由管理组件，提供打开和退出路由页面方法，通过一个栈来管理活动路由集合，当前页面就是栈顶的路由，常用两个方法 push、pop</p>
<h5 id="2-4-4-路由器传值"><a href="#2-4-4-路由器传值" class="headerlink" title="2.4.4 路由器传值"></a>2.4.4 路由器传值</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> TestRoute(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        child: TextButton(</span><br><span class="line">            onPressed: () <span class="keyword">async</span> &#123;<span class="comment">//打开下一个页面，并等待返回结果</span></span><br><span class="line">              <span class="keyword">var</span> result = <span class="keyword">await</span> Navigator.push(</span><br><span class="line">                context,</span><br><span class="line">                MaterialPageRoute(</span><br><span class="line">                    builder: (context) &#123;</span><br><span class="line">                      <span class="keyword">return</span> NewRoute(</span><br><span class="line">                          text: <span class="string">&#x27;提示123&#x27;</span>,</span><br><span class="line">                      );</span><br><span class="line">                    &#125;</span><br><span class="line">                ),</span><br><span class="line">              );</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&#x27;路由返回值：<span class="subst">$result</span>&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            child: Text(<span class="string">&quot;open new router&quot;</span>)</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> NewRoute(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.text, <span class="comment">//接收一个 text 参数</span></span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String?</span> text;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;New route&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Padding(</span><br><span class="line">          padding: EdgeInsets.all(<span class="number">18</span>),</span><br><span class="line">          child: Center(</span><br><span class="line">            child: Column(</span><br><span class="line">              children: [</span><br><span class="line">                Text(text!),</span><br><span class="line">                ElevatedButton(</span><br><span class="line">                    onPressed: ()&#123;</span><br><span class="line">                      Navigator.pop(context, <span class="string">&#x27;我是返回值1&#x27;</span>);<span class="comment">//传递返回值</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    child: Text(<span class="string">&#x27;返回&#x27;</span>)</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2-4-5-命名路由"><a href="#2-4-5-命名路由" class="headerlink" title="2.4.5 命名路由"></a>2.4.5 命名路由</h5><ul>
<li>路由表</li>
</ul>
<p>先注册一个路由表，key 是路由名字，value 是个 builder 回调函数</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, WidgetBuilder&gt; routes;</span><br></pre></td></tr></table></figure>

<p>打开一个新路由时，根据路由名字在路由表中查找对应的 WidgetBuilder</p>
<ul>
<li>注册路由表</li>
</ul>
<p>找到 MaterialApp，添加 routes 属性</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">runApp(MaterialApp(</span><br><span class="line">    home: TestRoute(),</span><br><span class="line">    routes: &#123;</span><br><span class="line">      <span class="string">&#x27;new_page&#x27;</span>: (context) =&gt; NewRoute(text: <span class="string">&#x27;提示123&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;/&#x27;</span>: (context) =&gt; TestRoute(),</span><br><span class="line">      <span class="comment">//其它路由注册信息</span></span><br><span class="line">    &#125;,</span><br><span class="line">));</span><br></pre></td></tr></table></figure>

<ul>
<li>通过路由名打开新路由</li>
</ul>
<p>使用 Navigator 的 pushNamed 方法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">onPressed: () &#123;</span><br><span class="line">  Navigator.pushNamed(context, <span class="string">&quot;new_page&quot;</span>); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>命名路由参数传递</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(</span><br><span class="line">      home: TestRoute(),</span><br><span class="line">      routes: &#123;</span><br><span class="line">        <span class="string">&#x27;new_page&#x27;</span>: (context) &#123;</span><br><span class="line">          <span class="keyword">return</span> NewRoute(text: ModalRoute.of(context)?.settings.arguments <span class="keyword">as</span> <span class="built_in">String</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//其它路由注册信息</span></span><br><span class="line">      &#125;,</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> TestRoute(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        child: TextButton(</span><br><span class="line">            onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">              <span class="comment">//带参数跳转</span></span><br><span class="line">              <span class="keyword">var</span> result = <span class="keyword">await</span> Navigator.of(context).pushNamed(<span class="string">&#x27;new_page&#x27;</span>, arguments: <span class="string">&#x27;提示123&#x27;</span>);</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&#x27;路由返回值：<span class="subst">$result</span>&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            child: Text(<span class="string">&quot;open new router&quot;</span>)</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> NewRoute(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.text, <span class="comment">//接收一个 text 参数</span></span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String?</span> text;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//获取路由参数</span></span><br><span class="line">    <span class="keyword">var</span> args = ModalRoute.of(context)?.settings.arguments <span class="keyword">as</span> <span class="built_in">String</span>;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;New route&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Padding(</span><br><span class="line">          padding: EdgeInsets.all(<span class="number">18</span>),</span><br><span class="line">          child: Center(</span><br><span class="line">            child: Column(</span><br><span class="line">              children: [</span><br><span class="line">                Text(args),</span><br><span class="line">                ElevatedButton(</span><br><span class="line">                    onPressed: ()&#123;</span><br><span class="line">                      Navigator.pop(context, <span class="string">&#x27;我是返回值1&#x27;</span>);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    child: Text(<span class="string">&#x27;返回&#x27;</span>)</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2-4-6-路由生成钩子"><a href="#2-4-6-路由生成钩子" class="headerlink" title="2.4.6 路由生成钩子"></a>2.4.6 路由生成钩子</h5><p>MaterialApp 有一个 onGenerateRoute 属性，打开命名路由时可能被调用</p>
<p>如果指定的路由名在路由表中已注册，则会调用路由表中的 builder 函数生成路由组件</p>
<p>如果没注册，调用 onGenerateRoute 来生成路由</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">MaterialApp(</span><br><span class="line">	onGenerateRoute: (RouteSettings settings) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialPageRoute(builder: (context)&#123;</span><br><span class="line">      <span class="built_in">String</span> routeName = settings.name <span class="keyword">as</span> <span class="built_in">String</span>;</span><br><span class="line">      <span class="comment">// 如果访问的路由页需要登录，但当前未登录，则直接返回登录页路由，</span></span><br><span class="line">      <span class="comment">// 引导用户登录；其它情况则正常打开路由。</span></span><br><span class="line">      <span class="keyword">return</span> NewRoute(text: ModalRoute.of(context)?.settings.arguments <span class="keyword">as</span> <span class="built_in">String</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>有了 onGenerateRoute 回调，实现控制权限功能就可以放弃使用路由表，提供一个 onGenerateRoute 回调，在回调中进行统一的权限控制</p>
<h4 id="2-5-包管理"><a href="#2-5-包管理" class="headerlink" title="2.5 包管理"></a>2.5 包管理</h4><p>使用配置文件 pubspec.yaml 来管理第三方依赖包</p>
<p>dependencies：应用或包依赖的其它包或插件</p>
<p>dev_dependencies：开发环境依赖的工具包</p>
<p>区别：</p>
<p>前者的依赖包将作为APP的源码的一部分参与编译，生成最终安装包</p>
<p>后者的依赖包只作为开发阶段的一些工具包，主要用于帮助提高开发、测试效率，如flutter的自动化测试包</p>
<ul>
<li>Pub 仓库</li>
</ul>
<p>Pub（<a href="https://pub.dev/%EF%BC%89%E6%98%AF">https://pub.dev/）是</a> Google 官方 Dart packages 仓库，查找需要的包和插件</p>
<ul>
<li>示例</li>
</ul>
<p>搜索 english_words，添加 english_words 到依赖项列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  flutter:</span><br><span class="line">    sdk: flutter</span><br><span class="line">  english_words: ^4.0.0</span><br></pre></td></tr></table></figure>

<p>单击 pubspec.yami 右上角 Pub get，或者控制台定位到当前工程目录 <code>flutter packages get</code> 命令下载依赖包</p>
<ul>
<li>依赖本地包</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">	pkg1:</span><br><span class="line">        path: ..&#x2F;..&#x2F;code&#x2F;pkg1</span><br></pre></td></tr></table></figure>

<ul>
<li>依赖 Git</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  pkg1:</span><br><span class="line">    git:</span><br><span class="line">      url: git:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;pkg1.git</span><br></pre></td></tr></table></figure>

<p>上面是包位于 Git 存储库的根目录中，如果不是可以使用 path 参数指定相对位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  package1:</span><br><span class="line">    git:</span><br><span class="line">      url: git:&#x2F;&#x2F;github.com&#x2F;flutter&#x2F;packages.git</span><br><span class="line">      path: packages&#x2F;package1        </span><br></pre></td></tr></table></figure>

<h4 id="2-6-资源管理"><a href="#2-6-资源管理" class="headerlink" title="2.6 资源管理"></a>2.6 资源管理</h4><ul>
<li>指定 assets</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter:</span><br><span class="line">  assets:</span><br><span class="line">    - assets&#x2F;my_icon.png</span><br><span class="line">    - assets&#x2F;background.png</span><br></pre></td></tr></table></figure>

<ul>
<li>加载图片</li>
</ul>
<p>Flutter 也可以为当前设备加载适合其分辨率的图像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">…&#x2F;image.png</span><br><span class="line">…&#x2F;Mx&#x2F;image.png</span><br><span class="line">…&#x2F;Nx&#x2F;image.png  &#x2F;&#x2F;M N 是数字标识</span><br><span class="line"></span><br><span class="line">…&#x2F;my_icon.png</span><br><span class="line">…&#x2F;2.0x&#x2F;my_icon.png</span><br><span class="line">…&#x2F;3.0x&#x2F;my_icon.png</span><br></pre></td></tr></table></figure>

<p>主资源默认使用1.0倍的分辨率图片，设备像素比率为1.8的设备上 …/2.0x/my_icon.png 将被选择。对于2.7的设备像素比率 …/3.0x/my_icon.png 将被选择</p>
<p>加载图片，可以使用 AssetImage </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">AssetImage(<span class="string">&#x27;graphics/background.png&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>依赖包中的资源图片</li>
</ul>
<p>要加载依赖包中的图像，必须给 AssetImage 提供 package 参数</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">AssetImage(<span class="string">&#x27;icons/heart.png&#x27;</span>, package: <span class="string">&#x27;my_icons&#x27;</span>)</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">Image.asset(<span class="string">&#x27;icons/heart.png&#x27;</span>, package: <span class="string">&#x27;my_icons&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-7-调试-Flutter-应用"><a href="#2-7-调试-Flutter-应用" class="headerlink" title="2.7 调试 Flutter 应用"></a>2.7 调试 Flutter 应用</h4><h4 id="2-8-Flutter-异常捕获"><a href="#2-8-Flutter-异常捕获" class="headerlink" title="2.8 Flutter 异常捕获"></a>2.8 Flutter 异常捕获</h4><p><a href="https://book.flutterchina.club/preface.html">Flutter实战 第二版</a></p>
<p><a href="https://flutterchina.club/widgets/material/">Flutter 中文网</a></p>
<p><a href="https://flutter.cn/docs/cookbook">Flutter.cn</a></p>
]]></content>
  </entry>
  <entry>
    <title>《Flutter实战第二版》五：容器类组件</title>
    <url>/2022/01/18/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%BA%94%EF%BC%9A%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="5-容器类组件"><a href="#5-容器类组件" class="headerlink" title="5 容器类组件"></a>5 容器类组件</h3><p>布局类组件一般都需要接收一个 widget 数组（children），容器类组件一般只需要接收一个子 widget（child）</p>
<p>布局类 widget 是按照一定的排列方式来对其子 widget 进行排列；容器类widget一般只是包装其子 widget，对其添加一些修饰（补白或背景色等）、变换（旋转裁剪等）、或限制（大小等）</p>
<h4 id="5-1-Padding"><a href="#5-1-Padding" class="headerlink" title="5.1 Padding"></a>5.1 Padding</h4><p>可以给子节点添加填充（留白），和间距效果类似</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Padding(&#123;</span><br><span class="line">  ...</span><br><span class="line">  EdgeInsetsGeometry padding,</span><br><span class="line">  Widget child,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>EdgeInsetsGeometry 是一个抽象类，开发中一般使用 EdgeInsets 类，它是 EdgeInsetsGeometry 的一个子类，定义了一些设置填充的便捷方法</p>
<ul>
<li>EdgeInsets</li>
</ul>
<p>EdgeInsets 的便捷方法：</p>
<p><code>fromLTRB(double left, double top, double right, double bottom)</code> 分别指定四个方向的填充</p>
<p><code>all(double value)</code> 所有方向均使用相同数值填充</p>
<p><code>only(&#123;left, top, right ,bottom &#125;)</code> 设置某个方向的填充（可以同时指多个方向）</p>
<p><code>symmetric(&#123; vertical, horizontal &#125;)</code> 用于设置对称方向的填充，vertical 指 top 和bottom，horizontal 指 left 和 right</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaddingTestRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Padding(</span><br><span class="line">      <span class="comment">//上下左右各添加16像素补白</span></span><br><span class="line">      padding: EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">      child: Column(</span><br><span class="line">        <span class="comment">//显式指定对齐方式为左对齐，排除对齐干扰</span></span><br><span class="line">        crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Padding(</span><br><span class="line">            <span class="comment">//左边添加8像素补白</span></span><br><span class="line">            padding: <span class="keyword">const</span> EdgeInsets.only(left: <span class="number">8.0</span>),</span><br><span class="line">            child: Text(<span class="string">&quot;Hello world&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">          Padding(</span><br><span class="line">            <span class="comment">//垂直方向上下各添加8像素补白</span></span><br><span class="line">            padding: <span class="keyword">const</span> EdgeInsets.symmetric(vertical: <span class="number">8.0</span>),</span><br><span class="line">            child: Text(<span class="string">&quot;I am Jack&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">          Padding(</span><br><span class="line">            <span class="comment">// 分别指定四个方向的补白</span></span><br><span class="line">            padding: <span class="keyword">const</span> EdgeInsets.fromLTRB(<span class="number">20.0</span>,<span class="number">.0</span>,<span class="number">20.0</span>,<span class="number">20.0</span>),</span><br><span class="line">            child: Text(<span class="string">&quot;Your friend&quot;</span>),</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》五：容器类组件/WeChat6661e3955fcbc5012a3fbf2acb8b2009.png" alt="WeChat6661e3955fcbc5012a3fbf2acb8b2009" style="zoom:80%;" />

<h4 id="5-2-尺寸限制类容器"><a href="#5-2-尺寸限制类容器" class="headerlink" title="5.2 尺寸限制类容器"></a>5.2 尺寸限制类容器</h4><p>尺寸限制类容器用于限制容器大小，ConstrainedBox<code>、</code>SizedBox<code>、</code>UnconstrainedBox<code>、</code>AspectRatio 等</p>
<p>尺寸限制类容器涉及到Flutter 布局流程 ，确定子组件大小的步骤为：<br>上层组件向下层组件传递约束条件<br>下层组件确定自己的大小，然后告诉上层组件，注意下层组件的大小必须符合父组件的约束</p>
<h5 id="5-2-1-ConstrainedBox"><a href="#5-2-1-ConstrainedBox" class="headerlink" title="5.2.1 ConstrainedBox"></a>5.2.1 ConstrainedBox</h5><p>ConstrainedBox 用于对子组件添加额外约束</p>
<p>。。看 四：布局类组件 4.2 布局原理与约束</p>
<h4 id="5-3-装饰容器-DecoratedBox"><a href="#5-3-装饰容器-DecoratedBox" class="headerlink" title="5.3 装饰容器 DecoratedBox"></a>5.3 装饰容器 DecoratedBox</h4><p>DecoratedBox 可以在其子组件绘制前或后绘制一些装饰，如背景、边框、渐变等</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> DecoratedBox(&#123;</span><br><span class="line">  Decoration decoration,</span><br><span class="line">  DecorationPosition position = DecorationPosition.background,</span><br><span class="line">  Widget? child</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>decoration 代表将要绘制的装饰</p>
<p>position 决定哪里绘制，接收 DecorationPositon 的枚举，background 在子组件之后绘制，即背景，foreground 在子组件之上绘制，即前景</p>
<ul>
<li>BoxDecoration</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">BoxDecoration(&#123;</span><br><span class="line">  Color color, <span class="comment">//颜色</span></span><br><span class="line">  DecorationImage image,<span class="comment">//图片</span></span><br><span class="line">  BoxBorder border, <span class="comment">//边框</span></span><br><span class="line">  BorderRadiusGeometry borderRadius, <span class="comment">//圆角</span></span><br><span class="line">  <span class="built_in">List</span>&lt;BoxShadow&gt; boxShadow, <span class="comment">//阴影,可以指定多个</span></span><br><span class="line">  Gradient gradient, <span class="comment">//渐变</span></span><br><span class="line">  BlendMode backgroundBlendMode, <span class="comment">//背景混合模式</span></span><br><span class="line">  BoxShape shape = BoxShape.rectangle, <span class="comment">//形状</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>绘制一个带阴影的背景色渐变的按钮</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">DecoratedBox(</span><br><span class="line">   decoration: BoxDecoration(</span><br><span class="line">     gradient: LinearGradient(colors:[Colors.red,Colors.orange.shade700]), <span class="comment">//背景渐变</span></span><br><span class="line">     borderRadius: BorderRadius.circular(<span class="number">3.0</span>), <span class="comment">//3像素圆角</span></span><br><span class="line">     boxShadow: [ <span class="comment">//阴影</span></span><br><span class="line">       BoxShadow(</span><br><span class="line">         color:Colors.black54,</span><br><span class="line">         offset: Offset(<span class="number">2.0</span>,<span class="number">2.0</span>),</span><br><span class="line">         blurRadius: <span class="number">4.0</span></span><br><span class="line">       )</span><br><span class="line">     ]</span><br><span class="line">   ),</span><br><span class="line">  child: Padding(</span><br><span class="line">    padding: EdgeInsets.symmetric(horizontal: <span class="number">80.0</span>, vertical: <span class="number">18.0</span>),</span><br><span class="line">    child: Text(<span class="string">&quot;Login&quot;</span>, style: TextStyle(color: Colors.white),),</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%BA%94%EF%BC%9A%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChatb229d2ef3c49cb4ea45184fc4edabea2.png" alt="WeChatb229d2ef3c49cb4ea45184fc4edabea2"></p>
<p>上面用到 LinearGradient 类，是用于定义线性渐变的类，Flutter 还提供了其它渐变配置 RadialGradient、SweepGradient</p>
<h4 id="5-4-变换"><a href="#5-4-变换" class="headerlink" title="5.4 变换"></a>5.4 变换</h4><p>Matrix4 是一个 4D 矩阵</p>
<ul>
<li>平移</li>
</ul>
<p>Transform.translate  接收一个 offset 参数，可以在绘制是沿 x y 轴对子组件平移指定距离</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">DecoratedBox(</span><br><span class="line">  decoration:BoxDecoration(color: Colors.red),</span><br><span class="line">  <span class="comment">//默认原点为左上角，左移20像素，向上平移5像素  </span></span><br><span class="line">  child: Transform.translate(</span><br><span class="line">    offset: Offset(<span class="number">-20.0</span>, <span class="number">-5.0</span>),</span><br><span class="line">    child: Text(<span class="string">&quot;Hello world&quot;</span>),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%BA%94%EF%BC%9A%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChat1771bb23256be799e6f11bbc2a98325a.png" alt="WeChat1771bb23256be799e6f11bbc2a98325a"></p>
<ul>
<li>旋转</li>
</ul>
<p>Transform.rotate </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span> <span class="keyword">as</span> math;</span><br><span class="line">DecoratedBox(</span><br><span class="line">  decoration:BoxDecoration(color: Colors.red),</span><br><span class="line">  child: Transform.rotate(</span><br><span class="line">    <span class="comment">//旋转90度</span></span><br><span class="line">    angle:math.pi/<span class="number">2</span> ,</span><br><span class="line">    child: Text(<span class="string">&quot;Hello world&quot;</span>),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>缩放</li>
</ul>
<p>Transform.scale</p>
<ul>
<li>RotatedBox</li>
</ul>
<p>Transform 的变换是应用在绘制阶段，不是应用在布局（layout）阶段，无论对子组件应用何种变换，其占用空间大小和在屏幕上的位置都是固定不变的</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Row(</span><br><span class="line">  mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    DecoratedBox(</span><br><span class="line">      decoration:BoxDecoration(color: Colors.red),</span><br><span class="line">      child: Transform.scale(scale: <span class="number">1.5</span>,</span><br><span class="line">          child: Text(<span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line">      )</span><br><span class="line">    ),</span><br><span class="line">    Text(<span class="string">&quot;你好&quot;</span>, style: TextStyle(color: Colors.green, fontSize: <span class="number">18.0</span>),)</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%BA%94%EF%BC%9A%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChat7c79d01b2fac91e32fdb2602d6be1ee1.png" alt="WeChat7c79d01b2fac91e32fdb2602d6be1ee1"></p>
<p>第一个 Text 放大后，绘制时会放大，但占用空间还是红色部分</p>
<p>RotatedBox 的变换是在 layout 阶段，会影响子组件位置和大小</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Row(</span><br><span class="line">  mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    DecoratedBox(</span><br><span class="line">      decoration: BoxDecoration(color: Colors.red),</span><br><span class="line">      <span class="comment">//将Transform.rotate换成RotatedBox  </span></span><br><span class="line">      child: RotatedBox(</span><br><span class="line">        quarterTurns: <span class="number">1</span>, <span class="comment">//旋转90度(1/4圈)</span></span><br><span class="line">        child: Text(<span class="string">&quot;Hello world&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">    Text(<span class="string">&quot;你好&quot;</span>, style: TextStyle(color: Colors.green, fontSize: <span class="number">18.0</span>),)</span><br><span class="line">  ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%BA%94%EF%BC%9A%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChatf5d0a9a9d12548219cbe16cae734cd85.png" alt="WeChatf5d0a9a9d12548219cbe16cae734cd85"></p>
<h4 id="5-5-Container"><a href="#5-5-Container" class="headerlink" title="5.5 Container"></a>5.5 Container</h4><p>Container 是一个组合类容器，<code>DecoratedBox</code>、<code>ConstrainedBox、Transform</code>、<code>Padding</code>、<code>Align</code> 等组件组合的一个多功能容器</p>
<p>只需要通过一个 Container 组件可以实现同时需要装饰、变换、限制的场景</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(&#123;</span><br><span class="line">  <span class="keyword">this</span>.alignment,</span><br><span class="line">  <span class="keyword">this</span>.padding, <span class="comment">//容器内补白，属于decoration的装饰范围</span></span><br><span class="line">  Color color, <span class="comment">// 背景色</span></span><br><span class="line">  Decoration decoration, <span class="comment">// 背景装饰</span></span><br><span class="line">  Decoration foregroundDecoration, <span class="comment">//前景装饰</span></span><br><span class="line">  <span class="built_in">double</span> width,<span class="comment">//容器的宽度</span></span><br><span class="line">  <span class="built_in">double</span> height, <span class="comment">//容器的高度</span></span><br><span class="line">  BoxConstraints constraints, <span class="comment">//容器大小的限制条件</span></span><br><span class="line">  <span class="keyword">this</span>.margin,<span class="comment">//容器外补白，不属于decoration的装饰范围</span></span><br><span class="line">  <span class="keyword">this</span>.transform, <span class="comment">//变换</span></span><br><span class="line">  <span class="keyword">this</span>.child,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>容器大小可以通过 width、height 属性来指定，也可以通过 constraints 来指定，如果同时存在，width、height 优先</p>
<p>color 和 decoration 是互斥的</p>
<p>例子</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  margin: EdgeInsets.only(top: <span class="number">50.0</span>, left: <span class="number">120.0</span>),</span><br><span class="line">  constraints: BoxConstraints.tightFor(width: <span class="number">200.0</span>, height: <span class="number">150.0</span>),<span class="comment">//卡片大小</span></span><br><span class="line">  decoration: BoxDecoration(  <span class="comment">//背景装饰</span></span><br><span class="line">    gradient: RadialGradient( <span class="comment">//背景径向渐变</span></span><br><span class="line">      colors: [Colors.red, Colors.orange],</span><br><span class="line">      center: Alignment.topLeft,</span><br><span class="line">      radius: <span class="number">.98</span>,</span><br><span class="line">    ),</span><br><span class="line">    boxShadow: [</span><br><span class="line">      <span class="comment">//卡片阴影</span></span><br><span class="line">      BoxShadow(</span><br><span class="line">        color: Colors.black54,</span><br><span class="line">        offset: Offset(<span class="number">2.0</span>, <span class="number">2.0</span>),</span><br><span class="line">        blurRadius: <span class="number">4.0</span>,</span><br><span class="line">      )</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">  transform: Matrix4.rotationZ(<span class="number">.2</span>),<span class="comment">//卡片倾斜变换</span></span><br><span class="line">  alignment: Alignment.center, <span class="comment">//卡片内文字居中</span></span><br><span class="line">  child: Text(</span><br><span class="line">    <span class="comment">//卡片文字</span></span><br><span class="line">    <span class="string">&quot;5.20&quot;</span>, style: TextStyle(color: Colors.white, fontSize: <span class="number">40.0</span>),</span><br><span class="line">  ),</span><br><span class="line"> )</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》五：容器类组件/WeChat351cd0ae2781d4d6e03e8d598ef69023.png" alt="WeChat351cd0ae2781d4d6e03e8d598ef69023" style="zoom:80%;" />

<ul>
<li>Padding 和 Margin</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  margin: EdgeInsets.all(<span class="number">20.0</span>), <span class="comment">//容器外补白</span></span><br><span class="line">  color: Colors.orange,</span><br><span class="line">  child: Text(<span class="string">&quot;Hello world!&quot;</span>),</span><br><span class="line">),</span><br><span class="line">Container(</span><br><span class="line">  padding: EdgeInsets.all(<span class="number">20.0</span>), <span class="comment">//容器内补白</span></span><br><span class="line">  color: Colors.orange,</span><br><span class="line">  child: Text(<span class="string">&quot;Hello world!&quot;</span>),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%BA%94%EF%BC%9A%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChat48a70d601784f808caac89583b0d4d09.png" alt="WeChat48a70d601784f808caac89583b0d4d09"></p>
<p>margin 的留白在容器外部，padding 的留白在容器内部</p>
<h4 id="5-6-裁剪"><a href="#5-6-裁剪" class="headerlink" title="5.6 裁剪"></a>5.6 裁剪</h4><table>
<thead>
<tr>
<th>剪裁Widget</th>
<th>默认行为</th>
</tr>
</thead>
<tbody><tr>
<td>ClipOval</td>
<td>子组件为正方形时剪裁成内贴圆形；为矩形时，剪裁成内贴椭圆</td>
</tr>
<tr>
<td>ClipRRect</td>
<td>将子组件剪裁为圆角矩形</td>
</tr>
<tr>
<td>ClipRect</td>
<td>默认剪裁掉子组件布局空间之外的绘制内容（溢出部分剪裁）</td>
</tr>
<tr>
<td>ClipPath</td>
<td>按照自定义的路径剪裁</td>
</tr>
</tbody></table>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClipTestRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// 头像  </span></span><br><span class="line">    Widget avatar = Image.asset(<span class="string">&quot;imgs/avatar.png&quot;</span>, width: <span class="number">60.0</span>);</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          avatar, <span class="comment">//不剪裁</span></span><br><span class="line">          ClipOval(child: avatar), <span class="comment">//剪裁为圆形</span></span><br><span class="line">          ClipRRect( <span class="comment">//剪裁为圆角矩形</span></span><br><span class="line">            borderRadius: BorderRadius.circular(<span class="number">5.0</span>),</span><br><span class="line">            child: avatar,</span><br><span class="line">          ), </span><br><span class="line">          Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Align(</span><br><span class="line">                alignment: Alignment.topLeft,</span><br><span class="line">                widthFactor: <span class="number">.5</span>,<span class="comment">//宽度设为原来宽度一半，另一半会溢出</span></span><br><span class="line">                child: avatar,</span><br><span class="line">              ),</span><br><span class="line">              Text(<span class="string">&quot;你好世界&quot;</span>, style: TextStyle(color: Colors.green),)</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">          Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              ClipRect(<span class="comment">//将溢出部分剪裁</span></span><br><span class="line">                child: Align(</span><br><span class="line">                  alignment: Alignment.topLeft,</span><br><span class="line">                  widthFactor: <span class="number">.5</span>,<span class="comment">//宽度设为原来宽度一半</span></span><br><span class="line">                  child: avatar,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              Text(<span class="string">&quot;你好世界&quot;</span>,style: TextStyle(color: Colors.green))</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%BA%94%EF%BC%9A%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChatedd5eb5c6aef971412aded090c9a4d5d.png" alt="WeChatedd5eb5c6aef971412aded090c9a4d5d"></p>
<ul>
<li>CustomClipper</li>
</ul>
<p>自定义裁剪区域</p>
<p>自定义一个 CustomClipper</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClipper</span> <span class="keyword">extends</span> <span class="title">CustomClipper</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Rect getClip(Size size) &#123;</span><br><span class="line">    <span class="keyword">return</span> Rect.fromLTWH(<span class="number">10.0</span>, <span class="number">15.0</span>, <span class="number">40.0</span>, <span class="number">30.0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldReclip(<span class="keyword">covariant</span> CustomClipper&lt;Rect&gt; oldClipper) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>getClip 用于获取裁剪区域的接口，返回的裁剪区域为 Rect.fromLTWH(10.0, 15.0, 40.0, 30.0)</p>
<p>shouldReclip 接口决定是否重新裁剪，如果应用中裁剪区域不会发生变化时应该返回false，就不会触发重新裁剪，避免不必要的性能开销，如果裁剪区域会发生变化，那么变化后应该返回 true 来重新执行裁剪</p>
<p>然后通过 ClipRect 来执行裁剪 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">DecoratedBox(</span><br><span class="line">  decoration: BoxDecoration(</span><br><span class="line">    color: Colors.red</span><br><span class="line">  ),</span><br><span class="line">  child: ClipRect(</span><br><span class="line">    clipper: MyClipper(), <span class="comment">//使用自定义的clipper</span></span><br><span class="line">    child: avatar</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>ClipPath 可以按照自定义的路径实现裁剪，需要自定义一个 <code>CustomClipper&lt;Path&gt;</code> 类型的Clipper，定义方式和 MyClipper 类似，getClip 返回一个 Path</p>
<h4 id="5-7-空间适配-FittedBox"><a href="#5-7-空间适配-FittedBox" class="headerlink" title="5.7 空间适配 FittedBox"></a>5.7 空间适配 FittedBox</h4><h5 id="5-7-1-FittedBox"><a href="#5-7-1-FittedBox" class="headerlink" title="5.7.1 FittedBox"></a>5.7.1 FittedBox</h5><p>子组件大小超出父组件大小时，如果不经过处理的话 Flutter 中就会显示一个溢出警告</p>
<p>为了方便开发者自定义适配规则，Flutter 提供了 FittedBox 组件</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> FittedBox(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  <span class="keyword">this</span>.fit = BoxFit.contain, <span class="comment">// 适配方式</span></span><br><span class="line">  <span class="keyword">this</span>.alignment = Alignment.center, <span class="comment">//对齐方式</span></span><br><span class="line">  <span class="keyword">this</span>.clipBehavior = Clip.none, <span class="comment">//是否剪裁</span></span><br><span class="line">  Widget? child,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Center(</span><br><span class="line">    child: Column(</span><br><span class="line">      children: [</span><br><span class="line">        wContainer(BoxFit.none),</span><br><span class="line">        Text(<span class="string">&#x27;Wendux&#x27;</span>),</span><br><span class="line">        wContainer(BoxFit.contain),</span><br><span class="line">        Text(<span class="string">&#x27;Flutter中国&#x27;</span>),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget wContainer(BoxFit boxFit) &#123;</span><br><span class="line">  <span class="keyword">return</span> Container(</span><br><span class="line">    width: <span class="number">50</span>,</span><br><span class="line">    height: <span class="number">50</span>,</span><br><span class="line">    color: Colors.red,</span><br><span class="line">    child: FittedBox(</span><br><span class="line">      fit: boxFit,</span><br><span class="line">      <span class="comment">// 子容器超过父容器大小</span></span><br><span class="line">      child: Container(width: <span class="number">60</span>, height: <span class="number">70</span>, color: Colors.blue),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%BA%94%EF%BC%9A%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChat2c36ee6dff4f283649d2ef335b96036f.png" alt="WeChat2c36ee6dff4f283649d2ef335b96036f"></p>
<p>父 Container 要比子 Container 小，没置顶任何适配方式时，子组件按照真实大小绘制，蓝色区域超出父组件空间，因而看不到红色区域</p>
<p>第二个适配方式 BoxFit.contain，含义是按子组件的比例缩放，尽可能多的占据父组件的空间，子组件的长宽不相同，按照比例适配父组件后，父组件能显示一部分</p>
<p>未指定适配方式时，子组件的大小超出了父组件，但 FittedBox 自身还是要遵守父组件传递的约束，所以 FittedBox 本身大小是 50x50，所以蓝色下面文本重叠了</p>
<p>如果不想让蓝色超出父组件布局范围，可以使用 ClipRec 对超出部分裁剪掉</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ClipRect( <span class="comment">// 将超出子组件布局范围的绘制内容剪裁掉</span></span><br><span class="line">  child: Container(</span><br><span class="line">    width: <span class="number">50</span>,</span><br><span class="line">    height: <span class="number">50</span>,</span><br><span class="line">    color: Colors.red,</span><br><span class="line">    child: FittedBox(</span><br><span class="line">      fit: boxFit,</span><br><span class="line">      child: Container(width: <span class="number">60</span>, height: <span class="number">70</span>, color: Colors.blue),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="5-7-2-单行缩放布局"><a href="#5-7-2-单行缩放布局" class="headerlink" title="5.7.2 单行缩放布局"></a>5.7.2 单行缩放布局</h5><p>三个数据指标，需要一行显示，我们希望当无法一行显示时能够对组件进行适当的缩放确保一行显示</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"> Widget build(BuildContext context) &#123;</span><br><span class="line">   <span class="keyword">return</span> Center(</span><br><span class="line">     child: Column(</span><br><span class="line">       children:  [</span><br><span class="line">         wRow(<span class="string">&#x27; 90000000000000000 &#x27;</span>),</span><br><span class="line">         FittedBox(child: wRow(<span class="string">&#x27; 90000000000000000 &#x27;</span>)),</span><br><span class="line">         wRow(<span class="string">&#x27; 800 &#x27;</span>),</span><br><span class="line">         FittedBox(child: wRow1(<span class="string">&#x27; 800 &#x27;</span>)),</span><br><span class="line">   		]</span><br><span class="line">       .map((e) =&gt; Padding(</span><br><span class="line">             padding: EdgeInsets.symmetric(vertical: <span class="number">20</span>),</span><br><span class="line">             child: e,</span><br><span class="line">           ))</span><br><span class="line">       .toList();,</span><br><span class="line">     ),</span><br><span class="line">   );</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接使用Row</span></span><br><span class="line"> Widget wRow(<span class="built_in">String</span> text) &#123;</span><br><span class="line">   Widget child = Text(text);</span><br><span class="line">   child = Row(</span><br><span class="line">     mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">     children: [child, child, child],</span><br><span class="line">   );</span><br><span class="line">   <span class="keyword">return</span> child;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》五：容器类组件/WeChatc17b2a1e3c1f5eddd9695a65c7bf9423.png" alt="WeChatc17b2a1e3c1f5eddd9695a65c7bf9423" style="zoom:80%;" />

<p>Row 在主轴的对齐方式为 MainAxisAlignment.spaceEvenly，会将水平方向的剩余显示空间均分成多份穿插在每个 child 之间</p>
<p>第一行超出屏幕宽度，直接使用 Row 会溢出</p>
<p>第二行加上 FittedBox 就可以按比例缩放至一行显示</p>
<p>Row 没被 FittedBox 包裹时，父组件传给 Row 的约束的 maxWidth 为屏幕宽度，Row的宽度也就是屏幕宽度</p>
<p>当被 FittedBox 包裹时，FittedBox 传给 Row的约束的 maxWidth 为无限大，因此 Row的最终宽度就是子组件的宽度之和</p>
<p>所以只需要让 FittedBox 子元素接收到的约束的 maxWidth 为屏幕宽度即可</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleLineFittedBox</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> SingleLineFittedBox(&#123;Key? key,<span class="keyword">this</span>.child&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"> <span class="keyword">final</span> Widget? child;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> LayoutBuilder(</span><br><span class="line">      builder: (_, constraints) &#123;</span><br><span class="line">        <span class="keyword">return</span> FittedBox(</span><br><span class="line">          child: ConstrainedBox(</span><br><span class="line">            constraints: constraints.copyWith(</span><br><span class="line">              minWidth: constraints.maxWidth,</span><br><span class="line">              maxWidth: <span class="built_in">double</span>.infinity,</span><br><span class="line">              <span class="comment">//maxWidth: constraints.maxWidth</span></span><br><span class="line">            ),</span><br><span class="line">            child: child,</span><br><span class="line">          ),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》五：容器类组件/WeChatf8d080b6a4934b277d35eae7dee059d2.png" alt="WeChatf8d080b6a4934b277d35eae7dee059d2" style="zoom:80%;" />

<h4 id="5-8-Scaffold"><a href="#5-8-Scaffold" class="headerlink" title="5.8 Scaffold"></a>5.8 Scaffold</h4><h5 id="5-8-1-Scaffold"><a href="#5-8-1-Scaffold" class="headerlink" title="5.8.1 Scaffold"></a>5.8.1 Scaffold</h5><p>Scaffold 是一个路由页的骨架</p>
<p>实现一个页面：<br>1.一个导航栏<br>2.导航栏右边分享按钮<br>3.一个抽屉菜单<br>4.有一个底部导航<br>5.右下角悬浮动作按钮</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScaffoldRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ScaffoldRouteState createState() =&gt; _ScaffoldRouteState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ScaffoldRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ScaffoldRoute</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _selectedIndex = <span class="number">1</span>;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">        actions: [</span><br><span class="line">          IconButton(onPressed: ()&#123;&#125;, icon: Icon(Icons.share))</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">      bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          items: [</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.home), title: Text(<span class="string">&#x27;Home&#x27;</span>)),</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.business), title:Text(<span class="string">&#x27;Business&#x27;</span>)),</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.school), title: Text(<span class="string">&#x27;School&#x27;</span>)),</span><br><span class="line">          ],</span><br><span class="line">          currentIndex: _selectedIndex,</span><br><span class="line">          fixedColor: Colors.blue, <span class="comment">//选中index图标颜色</span></span><br><span class="line">          onTap: _onItemTapped,</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">          child: Icon(Icons.add),</span><br><span class="line">          onPressed: _onAdd,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> _onItemTapped(<span class="built_in">int</span> index) &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _selectedIndex = index;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> _onAdd() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》五：容器类组件/WeChataf1f187dc2c0ab4fa149ec5e1962aaf7.png" alt="WeChataf1f187dc2c0ab4fa149ec5e1962aaf7" style="zoom:80%;" />

<p>AppBar 导航栏骨架</p>
<p>BottomNavigationBar 底部导航栏</p>
<p>FloatingActionButton 悬浮按钮</p>
<h5 id="5-8-2-AppBar"><a href="#5-8-2-AppBar" class="headerlink" title="5.8.2 AppBar"></a>5.8.2 AppBar</h5><p>APPBar 是一个 Material 风格的导航栏，通过它可以设置导航栏标题、导航栏菜单、导航栏底部Tab标题等</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">AppBar(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  <span class="keyword">this</span>.leading, <span class="comment">//导航栏最左侧Widget，常见为抽屉菜单按钮或返回按钮。</span></span><br><span class="line">  <span class="keyword">this</span>.automaticallyImplyLeading = <span class="keyword">true</span>, <span class="comment">//如果leading为null，是否自动实现默认的leading按钮</span></span><br><span class="line">  <span class="keyword">this</span>.title,<span class="comment">// 页面标题</span></span><br><span class="line">  <span class="keyword">this</span>.actions, <span class="comment">// 导航栏右侧菜单</span></span><br><span class="line">  <span class="keyword">this</span>.bottom, <span class="comment">// 导航栏底部菜单，通常为Tab按钮组</span></span><br><span class="line">  <span class="keyword">this</span>.elevation = <span class="number">4.0</span>, <span class="comment">// 导航栏阴影</span></span><br><span class="line">  <span class="keyword">this</span>.centerTitle, <span class="comment">//标题是否居中 </span></span><br><span class="line">  <span class="keyword">this</span>.backgroundColor,</span><br><span class="line">  ...   <span class="comment">//其它属性见源码注释</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果给 Scaffold 添加了菜单，默认情况下 Scaffold 会自动将 leading 设置为菜单按钮，点击它就可以打开抽屉菜单，也可以自定义图标</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Scaffold(</span><br><span class="line">  appBar: AppBar(</span><br><span class="line">    title: Text(<span class="string">&quot;App Name&quot;</span>),</span><br><span class="line">    leading: Builder(builder: (context) &#123;</span><br><span class="line">      <span class="keyword">return</span> IconButton(</span><br><span class="line">        icon: Icon(Icons.dashboard, color: Colors.white), <span class="comment">//自定义图标</span></span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          <span class="comment">// 打开抽屉菜单  </span></span><br><span class="line">          Scaffold.of(context).openDrawer(); </span><br><span class="line">        &#125;,</span><br><span class="line">      );</span><br><span class="line">    &#125;),</span><br><span class="line">    ...  </span><br><span class="line">  )  </span><br></pre></td></tr></table></figure>

<h5 id="5-8-3-抽屉菜单-Drawer"><a href="#5-8-3-抽屉菜单-Drawer" class="headerlink" title="5.8.3 抽屉菜单 Drawer"></a>5.8.3 抽屉菜单 Drawer</h5><p>Scaffold 的 drawer 和 endDrawer 属性可以分别接受一个 widget 来作为左、右抽屉菜单</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDrawer</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyDrawer(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Drawer(</span><br><span class="line">      child: MediaQuery.removePadding(</span><br><span class="line">        context: context,</span><br><span class="line">        <span class="comment">//移除抽屉菜单顶部默认留白</span></span><br><span class="line">        removeTop: <span class="keyword">true</span>,</span><br><span class="line">        child: Column(</span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Padding(</span><br><span class="line">              padding: <span class="keyword">const</span> EdgeInsets.only(top: <span class="number">38.0</span>),</span><br><span class="line">              child: Row(</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  Padding(</span><br><span class="line">                    padding: <span class="keyword">const</span> EdgeInsets.symmetric(horizontal: <span class="number">16.0</span>),</span><br><span class="line">                    child: ClipOval(</span><br><span class="line">                      child: Image.asset(</span><br><span class="line">                        <span class="string">&quot;img/avatar.png&quot;</span>,</span><br><span class="line">                        width: <span class="number">80</span>,</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                  Text(</span><br><span class="line">                    <span class="string">&quot;Wendux&quot;</span>,</span><br><span class="line">                    style: TextStyle(fontWeight: FontWeight.bold),</span><br><span class="line">                  )</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            Expanded(</span><br><span class="line">              child: ListView(</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  ListTile(</span><br><span class="line">                    leading: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">                    title: <span class="keyword">const</span> Text(<span class="string">&#x27;Add account&#x27;</span>),</span><br><span class="line">                  ),</span><br><span class="line">                  ListTile(</span><br><span class="line">                    leading: <span class="keyword">const</span> Icon(Icons.settings),</span><br><span class="line">                    title: <span class="keyword">const</span> Text(<span class="string">&#x27;Manage accounts&#x27;</span>),</span><br><span class="line">                  ),</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抽屉菜单通常将 Drawer 组件作为根节点，MediaQuery.removePadding 可以移除 Drawer 默认的一些留白（比如Drawer默认顶部会留手机状态栏等高的留白）</p>
<h5 id="5-8-4-FloatingActionButton"><a href="#5-8-4-FloatingActionButton" class="headerlink" title="5.8.4 FloatingActionButton"></a>5.8.4 FloatingActionButton</h5><p>可以通过 floatingActionButtonLocation 属性指定其在页面中悬浮的位置</p>
<h5 id="5-8-5-底部-Tab-导航栏"><a href="#5-8-5-底部-Tab-导航栏" class="headerlink" title="5.8.5 底部 Tab 导航栏"></a>5.8.5 底部 Tab 导航栏</h5><p>Material 组件库中提供了一个 BottomAPPBar 组件，可以和 FloatingActionButton 配合实现打洞效果</p>
<img src="《Flutter实战第二版》五：容器类组件/WeChat32ad216f5189993f92ba6d3d40aae74c.png" alt="WeChat32ad216f5189993f92ba6d3d40aae74c" style="zoom:80%;" />

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">bottomNavigationBar: BottomAppBar(</span><br><span class="line">  color: Colors.white,</span><br><span class="line">  shape: CircularNotchedRectangle(), <span class="comment">// 底部导航栏打一个圆形的洞</span></span><br><span class="line">  child: Row(</span><br><span class="line">    children: [</span><br><span class="line">      IconButton(icon: Icon(Icons.home)),</span><br><span class="line">      SizedBox(), <span class="comment">//中间位置空出</span></span><br><span class="line">      IconButton(icon: Icon(Icons.business)),</span><br><span class="line">    ],</span><br><span class="line">    mainAxisAlignment: MainAxisAlignment.spaceAround, <span class="comment">//均分底部导航栏横向空间</span></span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>上面代码没有控制打洞位置的属性，实际上打洞位置取决于 FloatingActionButton 的位置</p>
<p>上面 FloatingActionButton 的位置为</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,</span><br></pre></td></tr></table></figure>

<p>打洞位置在导航栏正中间</p>
<p>shape 属性决定洞的外形，也可以自定义外形</p>
]]></content>
  </entry>
  <entry>
    <title>《Flutter实战第二版》十一：文件操作与网络请求</title>
    <url>/2022/01/26/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%8D%81%E4%B8%80%EF%BC%9A%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<h3 id="11-文件操作与网络请求"><a href="#11-文件操作与网络请求" class="headerlink" title="11 文件操作与网络请求"></a>11 文件操作与网络请求</h3><h4 id="11-1-文件操作"><a href="#11-1-文件操作" class="headerlink" title="11.1 文件操作"></a>11.1 文件操作</h4><ul>
<li>临时目录</li>
</ul>
<p>getTemporaryDirectory() 获取，系统可随时清除的临时目录。iOS 上对应 NSTemporaryDirectory()，Android 上是 getCacheDir()</p>
<ul>
<li>文档目录</li>
</ul>
<p>getApplicationDocumentsDirectory() 获取应用程序的文档目录。iOS 上对应 NSDocumentDirectory，Android 上是 APPData 目录</p>
<ul>
<li>外部存储目录</li>
</ul>
<p>getExternalStorageDirectory() 获取外部存储目录，如 SD 卡，iOS 不支持外部目录，iOS 下调用会抛出 UnsupportedError 异常，Android 中是 getExternalStorageDirectory 的返回值</p>
<p>一旦你的 Flutter 应用程序有一个文件位置的引用，可以使用 dart:io API来执行对文件系统的读/写操作</p>
<ul>
<li>示例</li>
</ul>
<p>计数器示例，退出重启后可以恢复点击次数，用文件来保存数据</p>
<p>引入 PathProvider 插件，pubspec.yaml 中添加</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">path_provider: ^<span class="number">2.0</span><span class="number">.8</span></span><br></pre></td></tr></table></figure>

<p>实现 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:io&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:path_provider/path_provider.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileOperationRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  FileOperationRoute(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _FileOperationRouteState createState() =&gt; _FileOperationRouteState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_FileOperationRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">FileOperationRoute</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">//从文件读取点击次数</span></span><br><span class="line">    _readCounter().then((<span class="built_in">int</span> value) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _counter = value;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;File&gt; _getLocalFile() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// 获取应用目录</span></span><br><span class="line">    <span class="built_in">String</span> dir = (<span class="keyword">await</span> getApplicationDocumentsDirectory()).path;</span><br><span class="line">    <span class="keyword">return</span> File(<span class="string">&#x27;<span class="subst">$dir</span>/counter.txt&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="built_in">int</span>&gt; _readCounter() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      File file = <span class="keyword">await</span> _getLocalFile();</span><br><span class="line">      <span class="comment">// 读取点击次数（以字符串）</span></span><br><span class="line">      <span class="built_in">String</span> contents = <span class="keyword">await</span> file.readAsString();</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">int</span>.parse(contents);</span><br><span class="line">    &#125; <span class="keyword">on</span> FileSystemException &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _incrementCounter() <span class="keyword">async</span> &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _counter++;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 将点击次数以字符串类型写到文件中</span></span><br><span class="line">    <span class="keyword">await</span> (<span class="keyword">await</span> _getLocalFile()).writeAsString(<span class="string">&#x27;<span class="subst">$_counter</span>&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;文件操作&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(<span class="string">&#x27;点击了 <span class="subst">$_counter</span> 次&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: _incrementCounter,</span><br><span class="line">        tooltip: <span class="string">&#x27;Increment&#x27;</span>,</span><br><span class="line">        child: Icon(Icons.add),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》十一：文件操作与网络请求/WeChat090c4738bd95a6d28745c73778204758.png" alt="WeChat090c4738bd95a6d28745c73778204758" style="zoom:80%;" />

<p>实际开发中如果要存储一些简单数据，使用 shared_preferences 插件</p>
<h4 id="11-2-通过-HttpClient-发起-HTTP-请求"><a href="#11-2-通过-HttpClient-发起-HTTP-请求" class="headerlink" title="11.2 通过 HttpClient 发起 HTTP 请求"></a>11.2 通过 HttpClient 发起 HTTP 请求</h4><p>使用 HttpClient 发起请求分为五步</p>
<ol>
<li>创建 HttpClient</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">HttpClient httpClient = HttpClient();</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>打开HTTP连接，设置请求头</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">HttpClientRequest request = <span class="keyword">await</span> httpClient.getUrl(uri);</span><br></pre></td></tr></table></figure>

<p>这一步可以使用任意Http Method，如<code>httpClient.post(...)</code>、<code>httpClient.delete(...)</code>等。如果包含Query参数，可以在构建uri时添加</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Uri</span> uri = <span class="built_in">Uri</span>(scheme: <span class="string">&quot;https&quot;</span>, host: <span class="string">&quot;flutterchina.club&quot;</span>, queryParameters: &#123;</span><br><span class="line">    <span class="string">&quot;xx&quot;</span>:<span class="string">&quot;xx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;yy&quot;</span>:<span class="string">&quot;dd&quot;</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>通过 HttpClientRequest 可以设置请求 header</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">request.headers.add(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果是post或put等可以携带请求体方法，可以通过HttpClientRequest对象发送request body</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> payload=<span class="string">&quot;...&quot;</span>;</span><br><span class="line">request.add(utf8.encode(payload)); </span><br><span class="line"><span class="comment">//request.addStream(_inputStream); //可以直接添加输入流</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>等待连接服务器</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">HttpClientResponse response = <span class="keyword">await</span> request.close();</span><br></pre></td></tr></table></figure>

<p>这一步完成后，请求信息就已经发送给服务器了，返回一个<code>HttpClientResponse</code>对象，它包含响应头（header）和响应流(响应体的Stream)，接下来就可以通过读取响应流来获取响应内容</p>
<ol start="4">
<li>读取响应内容</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> responseBody = <span class="keyword">await</span> response.transform(utf8.decoder).join();</span><br></pre></td></tr></table></figure>

<p>我们通过读取响应流来获取服务器返回的数据，在读取时我们可以设置编码格式，这里是utf8</p>
<ol start="5">
<li>请求结束，关闭<code>HttpClient</code></li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">httpClient.close();</span><br></pre></td></tr></table></figure>

<p>关闭client后，通过该client发起的所有请求都会中止</p>
<ul>
<li>示例</li>
</ul>
<p>获取百度首页 html</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:io&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpTestRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _HttpTestRouteState createState() =&gt; _HttpTestRouteState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_HttpTestRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">HttpTestRoute</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> _loading = <span class="keyword">false</span>;</span><br><span class="line">  <span class="built_in">String</span> _text = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> SingleChildScrollView(</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          ElevatedButton(</span><br><span class="line">            child: Text(<span class="string">&quot;获取百度首页&quot;</span>),</span><br><span class="line">            onPressed: _loading ? <span class="keyword">null</span> : request,</span><br><span class="line">          ),</span><br><span class="line">          Container(</span><br><span class="line">            width: MediaQuery.of(context).size.width - <span class="number">50.0</span>,</span><br><span class="line">            child: Text(_text.replaceAll(<span class="built_in">RegExp</span>(<span class="string">r&quot;\s&quot;</span>), <span class="string">&quot;&quot;</span>)),</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request() <span class="keyword">async</span> &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _loading = <span class="keyword">true</span>;</span><br><span class="line">      _text = <span class="string">&quot;正在请求...&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//创建一个HttpClient</span></span><br><span class="line">      HttpClient httpClient = HttpClient();</span><br><span class="line">      <span class="comment">//打开Http连接</span></span><br><span class="line">      HttpClientRequest request =</span><br><span class="line">          <span class="keyword">await</span> httpClient.getUrl(<span class="built_in">Uri</span>.parse(<span class="string">&quot;https://www.baidu.com&quot;</span>));</span><br><span class="line">      <span class="comment">//使用iPhone的UA</span></span><br><span class="line">      request.headers.add(</span><br><span class="line">        <span class="string">&quot;user-agent&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.0 Mobile/14E304 Safari/602.1&quot;</span>,</span><br><span class="line">      );</span><br><span class="line">      <span class="comment">//等待连接服务器（会将请求信息发送给服务器）</span></span><br><span class="line">      HttpClientResponse response = <span class="keyword">await</span> request.close();</span><br><span class="line">      <span class="comment">//读取响应内容</span></span><br><span class="line">      _text = <span class="keyword">await</span> response.transform(utf8.decoder).join();</span><br><span class="line">      <span class="comment">//输出响应头</span></span><br><span class="line">      <span class="built_in">print</span>(response.headers);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//关闭client后，通过该client发起的所有请求都会中止。</span></span><br><span class="line">      httpClient.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      _text = <span class="string">&quot;请求失败：<span class="subst">$e</span>&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _loading = <span class="keyword">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》十一：文件操作与网络请求/WeChat268e06a2ed985dfb1a6c39fd00b96c2e.png" alt="WeChat268e06a2ed985dfb1a6c39fd00b96c2e" style="zoom:80%;" />

<ul>
<li>HttpClient </li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>idleTimeout</td>
<td>对应请求头中的keep-alive字段值，为了避免频繁建立连接，httpClient在请求结束后会保持连接一段时间，超过这个阈值后才会关闭连接。</td>
</tr>
<tr>
<td>connectionTimeout</td>
<td>和服务器建立连接的超时，如果超过这个值则会抛出SocketException异常。</td>
</tr>
<tr>
<td>maxConnectionsPerHost</td>
<td>同一个host，同时允许建立连接的最大数量。</td>
</tr>
<tr>
<td>autoUncompress</td>
<td>对应请求头中的Content-Encoding，如果设置为true，则请求头中Content-Encoding的值为当前HttpClient支持的压缩算法列表，目前只有”gzip”</td>
</tr>
<tr>
<td>userAgent</td>
<td>对应请求头中的User-Agent字段。</td>
</tr>
</tbody></table>
<p>这些属性也可通过 HttpClientRequest 直接设置 header，只对当前请求生效；HttpClient 设置的对整个 HttpClient 都生效</p>
<ul>
<li>HTTP 请求认证</li>
<li>代理</li>
<li>证书校验</li>
</ul>
<p>Https 中为了防止通过伪造证书而发起的中间人攻击，客户端应该对自签名或非CA颁发的证书进行校验</p>
<h4 id="11-3-HTTP请求-Dio-http-库"><a href="#11-3-HTTP请求-Dio-http-库" class="headerlink" title="11.3 HTTP请求-Dio http 库"></a>11.3 HTTP请求-Dio http 库</h4><p>引入 dio</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">dio: ^<span class="number">4.0</span><span class="number">.3</span></span><br></pre></td></tr></table></figure>

<p>导入并创建 dio 实例</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dio/dio.dart&#x27;</span>;</span><br><span class="line">Dio dio =  Dio();</span><br></pre></td></tr></table></figure>

<p>GET 请求</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Response response;</span><br><span class="line">response=<span class="keyword">await</span> dio.<span class="keyword">get</span>(<span class="string">&quot;/test?id=12&amp;name=wendu&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.data.toString());</span><br></pre></td></tr></table></figure>

<p>可以将 query 参数通过对象来传递</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">response=<span class="keyword">await</span> dio.<span class="keyword">get</span>(<span class="string">&quot;/test&quot;</span>,queryParameters:&#123;<span class="string">&quot;id&quot;</span>:<span class="number">12</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;wendu&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(response);</span><br></pre></td></tr></table></figure>

<p>POST 请求</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">response=<span class="keyword">await</span> dio.post(<span class="string">&quot;/test&quot;</span>,data:&#123;<span class="string">&quot;id&quot;</span>:<span class="number">12</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;wendu&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>发起多个并发请求</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">response= <span class="keyword">await</span> Future.wait([dio.post(<span class="string">&quot;/info&quot;</span>),dio.<span class="keyword">get</span>(<span class="string">&quot;/token&quot;</span>)]);</span><br></pre></td></tr></table></figure>

<p>下载文件</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">response=<span class="keyword">await</span> dio.download(<span class="string">&quot;https://www.google.com/&quot;</span>,_savePath);</span><br></pre></td></tr></table></figure>

<p>发送 FormData</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">FormData formData = FormData.from(&#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>: <span class="string">&quot;wendux&quot;</span>,</span><br><span class="line">   <span class="string">&quot;age&quot;</span>: <span class="number">25</span>,</span><br><span class="line">&#125;);</span><br><span class="line">response = <span class="keyword">await</span> dio.post(<span class="string">&quot;/info&quot;</span>, data: formData)</span><br></pre></td></tr></table></figure>

<p>如果发送的数据是FormData，则dio会将请求header的<code>contentType</code>设为“multipart/form-data”</p>
<p>通过FormData上传多个文件</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">FormData formData = FormData.from(&#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>: <span class="string">&quot;wendux&quot;</span>,</span><br><span class="line">   <span class="string">&quot;age&quot;</span>: <span class="number">25</span>,</span><br><span class="line">   <span class="string">&quot;file1&quot;</span>: UploadFileInfo(File(<span class="string">&quot;./upload.txt&quot;</span>), <span class="string">&quot;upload1.txt&quot;</span>),</span><br><span class="line">   <span class="string">&quot;file2&quot;</span>: UploadFileInfo(File(<span class="string">&quot;./upload.txt&quot;</span>), <span class="string">&quot;upload2.txt&quot;</span>),</span><br><span class="line">     <span class="comment">// 支持文件数组上传</span></span><br><span class="line">   <span class="string">&quot;files&quot;</span>: [</span><br><span class="line">      UploadFileInfo(File(<span class="string">&quot;./example/upload.txt&quot;</span>), <span class="string">&quot;upload.txt&quot;</span>),</span><br><span class="line">      UploadFileInfo(File(<span class="string">&quot;./example/upload.txt&quot;</span>), <span class="string">&quot;upload.txt&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line">response = <span class="keyword">await</span> dio.post(<span class="string">&quot;/info&quot;</span>, data: formData)</span><br></pre></td></tr></table></figure>

<p>dio 内部仍然使用 HttpClient 发起请求，所以代理、请求认证、证书校验等和 HttpClient 是相同的，可以在 onHttpClientCreate 回调中设置</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">(dio.httpClientAdapter <span class="keyword">as</span> DefaultHttpClientAdapter).onHttpClientCreate = (client) &#123;</span><br><span class="line">    <span class="comment">//设置代理 </span></span><br><span class="line">    client.findProxy = (uri) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;PROXY 192.168.1.2:8888&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//校验证书</span></span><br><span class="line">    httpClient.badCertificateCallback=(X509Certificate cert, <span class="built_in">String</span> host, <span class="built_in">int</span> port)&#123;</span><br><span class="line">      <span class="keyword">if</span>(cert.pem==PEM)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//证书一致，则允许发送数据</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;;   </span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<p><code>onHttpClientCreate</code> 会在当前dio实例内部需要创建HttpClient时调用，所以通过此回调配置HttpClient会对整个dio实例生效</p>
<ul>
<li>示例</li>
</ul>
<p>通过 Github 开放 API 请求 flutterchina 组织下所有公开的项目</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_FutureBuilderRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">FutureBuilderRoute</span>&gt; </span>&#123;</span><br><span class="line">  Dio _dio = Dio();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      alignment: Alignment.center,</span><br><span class="line">      child: FutureBuilder(</span><br><span class="line">          future: _dio.<span class="keyword">get</span>(<span class="string">&quot;https://api.github.com/orgs/flutterchina/repos&quot;</span>),</span><br><span class="line">          builder: (BuildContext context, AsyncSnapshot snapshot) &#123;</span><br><span class="line">            <span class="comment">//请求完成</span></span><br><span class="line">            <span class="keyword">if</span> (snapshot.connectionState == ConnectionState.done) &#123;</span><br><span class="line">              Response response = snapshot.data;</span><br><span class="line">              <span class="comment">//发生错误</span></span><br><span class="line">              <span class="keyword">if</span> (snapshot.hasError) &#123;</span><br><span class="line">                <span class="keyword">return</span> Text(snapshot.error.toString());</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//请求成功，通过项目信息构建用于显示项目名称的ListView</span></span><br><span class="line">              <span class="keyword">return</span> ListView(</span><br><span class="line">                children: response.data.map&lt;Widget&gt;((e) =&gt;</span><br><span class="line">                    ListTile(title: Text(e[<span class="string">&quot;full_name&quot;</span>]))</span><br><span class="line">                ).toList(),</span><br><span class="line">              );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//请求未完成时弹出loading</span></span><br><span class="line">            <span class="keyword">return</span> CircularProgressIndicator();</span><br><span class="line">          &#125;</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="11-4-实例：HTTP分块下载"><a href="#11-4-实例：HTTP分块下载" class="headerlink" title="11.4 实例：HTTP分块下载"></a>11.4 实例：HTTP分块下载</h4><p>Http 协议定义了分块传输的响应 header 字段，具体是否支持取决于 Server 的实现，可以指定 range 字段验证服务器是否支持分块传输，例如，可以利用 curl 命令来验证</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xxx:~ duwen$ curl -H &quot;Range: bytes=0-10&quot; http://download.dcloud.net.cn/HBuilder.9.0.2.macosx_64.dmg -v</span><br><span class="line"><span class="meta">#</span><span class="bash"> 请求头</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> GET /HBuilder.9.0.2.macosx_64.dmg HTTP/1.1</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Host: download.dcloud.net.cn</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> User-Agent: curl/7.54.0</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Accept: */*</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Range: bytes=0-10</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 响应头</span></span><br><span class="line">&lt; HTTP/1.1 206 Partial Content</span><br><span class="line">&lt; Content-Type: application/octet-stream</span><br><span class="line">&lt; Content-Length: 11</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; Date: Thu, 21 Feb 2019 06:25:15 GMT</span><br><span class="line">&lt; Content-Range: bytes 0-10/233295878</span><br></pre></td></tr></table></figure>

<p>请求头中添加 <code>Range: bytes=0-10</code> 告诉服务器本次请求只想获取 0-10（包括10共11个字节）这块内容，如果服务器支持分块传输，则响应状态码为206，表示部分内容，响应头中包含  Content-Range 字段</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Content-Range: bytes 0-10/233295878 //单位byte</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<p>分块下载</p>
<h4 id="11-5-WebSockets"><a href="#11-5-WebSockets" class="headerlink" title="11.5 WebSockets"></a>11.5 WebSockets</h4><p>WebSocket 协议正是为了解决客户端与服务端实时通信而产生的技术</p>
<p>Http 协议中虽然可以通过  keep-alive 机制使服务器在响应结束后链接会保持一段时间，但还是会断开。keep-alive 机制主要是用于避免在同一台服务器请求多个资源时频繁创建链接，它本质上是支持链接复用的技术，并非用于实时通信</p>
<ul>
<li>步骤</li>
</ul>
<ol>
<li>连接到 WebSocket 服务器</li>
<li>监听来自服务器的消息</li>
<li>将数据发送到服务器</li>
<li>关闭 WebSocket 连接</li>
</ol>
<h4 id="11-6-使用-Socket-API"><a href="#11-6-使用-Socket-API" class="headerlink" title="11.6 使用 Socket API"></a>11.6 使用 Socket API</h4><h4 id="11-7-Json-转-Dart-Model-类"><a href="#11-7-Json-转-Dart-Model-类" class="headerlink" title="11.7 Json 转 Dart Model 类"></a>11.7 Json 转 Dart Model 类</h4><h5 id="11-7-1-Json-转-Dart-类"><a href="#11-7-1-Json-转-Dart-类" class="headerlink" title="11.7.1 Json 转 Dart 类"></a>11.7.1 Json 转 Dart 类</h5><p>返回数据是 JSON 格式的字符串，为了方便在代码中操作 JSON，先将 JSON 格式字符串转为 Dart 对象，可以通过 <code>dart:convert</code> 中的 JSON 解码器 <code>json.decode()</code> 来实现，可以根据 JSON 字符串具体内容将其转为 List 或 Map</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个JSON格式的用户列表字符串</span></span><br><span class="line"><span class="built_in">String</span> jsonStr=<span class="string">&#x27;[&#123;&quot;name&quot;:&quot;Jack&quot;&#125;,&#123;&quot;name&quot;:&quot;Rose&quot;&#125;]&#x27;</span>;`</span><br><span class="line"><span class="comment">//将JSON字符串转为Dart对象(此处是List)</span></span><br><span class="line"><span class="built_in">List</span> items=json.decode(jsonStr);</span><br><span class="line"><span class="comment">//输出第一个用户的姓名</span></span><br><span class="line"><span class="built_in">print</span>(items[<span class="number">0</span>][<span class="string">&quot;name&quot;</span>]);</span><br></pre></td></tr></table></figure>

<p>有如下 JSON</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John Smith&quot;</span>,</span><br><span class="line">  <span class="string">&quot;email&quot;</span>: <span class="string">&quot;john@example.com&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; user = json.decode(json);</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Howdy, <span class="subst">$&#123;user[<span class="string">&#x27;name&#x27;</span>]&#125;</span>!&#x27;</span>);</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;We sent the verification link to <span class="subst">$&#123;user[<span class="string">&#x27;email&#x27;</span>]&#125;</span>.&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>容易出错，比如访问属性字段名写错，编译的时候不会报错，运行时会报错</p>
<p>解决：即 Json Model 化，引入模型类 User，一个 User.fromJson 构造函数，用于从一个 map 构造出一个 User 实例 map 结构；一个 toJson 方法，将 User 实例转化为一个 map</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> email;</span><br><span class="line"></span><br><span class="line">  User(<span class="keyword">this</span>.name, <span class="keyword">this</span>.email);</span><br><span class="line"></span><br><span class="line">  User.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json)</span><br><span class="line">      : name = json[<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">        email = json[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt;</span><br><span class="line">    &lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;&#123;</span><br><span class="line">      <span class="string">&#x27;name&#x27;</span>: name,</span><br><span class="line">      <span class="string">&#x27;email&#x27;</span>: email,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span> userMap = json.decode(json);</span><br><span class="line"><span class="keyword">var</span> user = User.fromJson(userMap);</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Howdy, <span class="subst">$&#123;user.name&#125;</span>!&#x27;</span>);</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;We sent the verification link to <span class="subst">$&#123;user.email&#125;</span>.&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>自动生成 Model</li>
</ul>
<p>官方推荐的 json_serializable package 包，是一个自动化的源代码生成器，可以在开发阶段为我们生成 JSON 序列化模板</p>
<ul>
<li>项目中设置 json_serializable</li>
</ul>
<p>json_serializable 需要一个常规和两个开发依赖项，开发依赖项是不包含在我们应用程序源代码中的依赖项</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  json_annotation: &lt;最新版本&gt;</span><br><span class="line"></span><br><span class="line">dev_dependencies:</span><br><span class="line">  build_runner: &lt;最新版本&gt;</span><br><span class="line">  json_serializable: &lt;最新版本&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>以 json_serializable 的方式创建 model 类</li>
</ul>
<p>user.dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:json_annotation/json_annotation.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// User.g.dart 将在我们运行生成命令后自动生成</span></span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;User.g.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">///<span class="markdown">这个标注是告诉生成器，这个类是需要生成Model类的</span></span></span><br><span class="line"><span class="meta">@JsonSerializable</span>()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">  User(<span class="keyword">this</span>.name, <span class="keyword">this</span>.email);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">String</span> email;</span><br><span class="line">  <span class="comment">//不同的类使用不同的mixin即可</span></span><br><span class="line">  <span class="keyword">factory</span> User.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) =&gt; _$UserFromJson(json);</span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt; _$UserToJson(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了上面设置，源码生成器将生成用于序列化 name 和 email 字段的 JSON 代码</p>
<ul>
<li>自定义命名策略</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显式关联JSON字段名与Model属性的对应关系 </span></span><br><span class="line"><span class="meta">@JsonKey</span>(name: <span class="string">&#x27;registration_date_millis&#x27;</span>)</span><br><span class="line"><span class="keyword">final</span> <span class="built_in">int</span> registrationDateMillis;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行代码生成程序</li>
</ul>
<p>上面的代码会报错，必须运行代码生成器来生成序列化模板</p>
<ul>
<li>一次性生成</li>
</ul>
<p>在项目根目录运行 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flutter packages pub run build_runner build</span><br></pre></td></tr></table></figure>

<p>这触发了一次构建，会通过源文件，找出需要生成 Model 类的源文件（包含 @JsonSerializable标注的）来生成对应的 .g.dart 文件；可以将所有 Model 类放到一个目录，然后在该目录执行命令</p>
<ul>
<li>持续生成</li>
</ul>
<p>使用 <code>_watcher_</code> 使源代码生成更加方便，会监视我们项目中文件的变换，并在需要时自动构建必要的文件</p>
<p>在项目根目录运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter packages pub run build_runner watch</span><br></pre></td></tr></table></figure>

<p>只需启动一次观察，然后就会在后台运行</p>
<h5 id="11-7-2-自动化生成模板"><a href="#11-7-2-自动化生成模板" class="headerlink" title="11.7.2 自动化生成模板"></a>11.7.2 自动化生成模板</h5><p>。。。</p>
<ul>
<li>json_model 包</li>
</ul>
<p>笔者发布的 json_model 包，把包加入开发依赖后，便可以用一条命令，根据 json 文件生成 Dart 类</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/18/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%9B%9B%EF%BC%9A%E5%B8%83%E5%B1%80%E7%B1%BB%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>title: 《Flutter实战第二版》四：布局类组件<br>abstract: 输入密码<br>message: 输入密码<br>date: 2022-01-18 12:17:35<br>tags: flutter<br>categories: flutter<br>password:</p>
<h3 id="4-布局类组件"><a href="#4-布局类组件" class="headerlink" title="4 布局类组件"></a>4 布局类组件</h3><h4 id="4-2-布局原理与约束"><a href="#4-2-布局原理与约束" class="headerlink" title="4.2 布局原理与约束"></a>4.2 布局原理与约束</h4><p>尺寸限制类容器用于限制容器大小，如 ConstrainedBox、SizedBox、UnconstrainedBox、AspectRatio等</p>
<p>Flutter 有两种布局模型<br>基于 RenderBox 的盒模型布局<br>基于 Sliver（RenderBox）按需加载列表布局</p>
<ul>
<li>布局流程</li>
</ul>
<p>上层组件向下层组件传递约束条件<br>下层组件确定自己的大小，然后告诉上层组件。注意下层组件的大小必须符合父组件的约束<br>上层组件确定下层组件相对于自身的偏移和确定自身的大小（大多数情况下会根据子组件的大小来确定自身大小）</p>
<p>比如，父组件传递给子组件的约束是“最大宽高不能超过100，最小宽高为0”，如果给子组件设宽高都为100，则子组件最终大小是 100*100，因为任何时候子组件都必须遵守父组件的约束</p>
<h5 id="4-2-1-BoxConstraints"><a href="#4-2-1-BoxConstraints" class="headerlink" title="4.2.1 BoxConstraints"></a>4.2.1 BoxConstraints</h5><p>盒模型布局过程中父渲染对象传递给子渲染对象的 <code>约束信息</code>，包含最大宽高信息，子组件大小需要在约束的范围内</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> BoxConstraints(&#123;</span><br><span class="line">  <span class="keyword">this</span>.minWidth = <span class="number">0.0</span>, <span class="comment">//最小宽度</span></span><br><span class="line">  <span class="keyword">this</span>.maxWidth = <span class="built_in">double</span>.infinity, <span class="comment">//最大宽度</span></span><br><span class="line">  <span class="keyword">this</span>.minHeight = <span class="number">0.0</span>, <span class="comment">//最小高度</span></span><br><span class="line">  <span class="keyword">this</span>.maxHeight = <span class="built_in">double</span>.infinity <span class="comment">//最大高度</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>BoxConstraints 还定义了便捷的构造函数</p>
<p>生成固定宽高的限制</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">constraints: BoxConstraints.tight(Size(<span class="number">100</span>, <span class="number">200</span>)),</span><br></pre></td></tr></table></figure>

<p>生成尽可能大的用以填充另一个容器的 BoxConstraints</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">constraints: BoxConstraints.expand(),</span><br></pre></td></tr></table></figure>

<h5 id="4-2-2-ConstrainedBox"><a href="#4-2-2-ConstrainedBox" class="headerlink" title="4.2.2 ConstrainedBox"></a>4.2.2 ConstrainedBox</h5><p>用于对子组件添加 <code>额外约束</code></p>
<p>实现一个最小高度为50，宽度尽可能大的红色容器</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先定义一个背景色红色盒子，不指定宽高</span></span><br><span class="line">Widget redBox = DecoratedBox(</span><br><span class="line">    decoration: BoxDecoration(color: Colors.red),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">body: Container(</span><br><span class="line">  child: ConstrainedBox(</span><br><span class="line">    constraints: BoxConstraints(</span><br><span class="line">      minWidth: <span class="built_in">double</span>.infinity,<span class="comment">//宽度尽可能大</span></span><br><span class="line">      minHeight: <span class="number">50.0</span>,<span class="comment">//最小高度50</span></span><br><span class="line">    ),</span><br><span class="line">    child: Container(</span><br><span class="line">      height: <span class="number">5</span>,</span><br><span class="line">      child: redBox,</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<p>虽然 Container 高度设置为 5 但最终高度是 50，正是 ConstrainedBox 最小高度限制生效了</p>
<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%9B%9B%EF%BC%9A%E5%B8%83%E5%B1%80%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChatb3dfacd2a03676594b4be71803e35712.png" alt="WeChatb3dfacd2a03676594b4be71803e35712"></p>
<h5 id="4-2-3-SizedBox"><a href="#4-2-3-SizedBox" class="headerlink" title="4.2.3 SizedBox"></a>4.2.3 SizedBox</h5><p>用于给子元素指定固定的宽高</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">SizedBox(</span><br><span class="line">  width: <span class="number">80</span>,</span><br><span class="line">  height: <span class="number">80</span>,</span><br><span class="line">  child: redBox,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>实际上 SizedBox 只是 ConstrainedBox 的一个定制</p>
<h5 id="4-2-4-多重限制"><a href="#4-2-4-多重限制" class="headerlink" title="4.2.4 多重限制"></a>4.2.4 多重限制</h5><p>如果组件有多个父级 ConstrainedBox 限制，最终哪个会生效？</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ConstrainedBox(</span><br><span class="line">  constraints: BoxConstraints(minWidth: <span class="number">60.0</span>, minHeight: <span class="number">60.0</span>), <span class="comment">//父</span></span><br><span class="line">  child: ConstrainedBox(</span><br><span class="line">    constraints: BoxConstraints(minWidth: <span class="number">90.0</span>, minHeight: <span class="number">20.0</span>),<span class="comment">//子</span></span><br><span class="line">    child: redBox,</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>最终显示宽度 90，高度 60</p>
<p>多重限制时，对于 minWidth minHeight 是取父子中数值较大的</p>
<h5 id="4-2-5-UnconstrainedBox"><a href="#4-2-5-UnconstrainedBox" class="headerlink" title="4.2.5 UnconstrainedBox"></a>4.2.5 UnconstrainedBox</h5><p>子组件不再受父组件约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body: Container(</span><br><span class="line">  child: ConstrainedBox(</span><br><span class="line">    constraints: BoxConstraints(minWidth: 60, minHeight: 100),</span><br><span class="line">    child: UnconstrainedBox(&#x2F;&#x2F;去除父级限制</span><br><span class="line">      child: ConstrainedBox(</span><br><span class="line">        constraints: BoxConstraints(minWidth: 90, minHeight: 20),</span><br><span class="line">        child: redBox,</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<p>如果没有 UnconstrainedBox，那么根据多重限制的规则最终显示是 90x100<br>由于 UnconstrainedBox，去除了父级限制，最终按子 ConstrainedBox 限制来绘制 redBox，redBox 最终宽 90 高 20</p>
<p>实际开发中，如果已经使用了 SizedBox 或 ConstrainedBox 给子元素指定了固定宽高，但没有效果时，几乎可以断定，已经有父组件指定了约束</p>
<h5 id="4-2-6-其它约束类容器"><a href="#4-2-6-其它约束类容器" class="headerlink" title="4.2.6 其它约束类容器"></a>4.2.6 其它约束类容器</h5><p>AspectRatio，可以指定子组件的长宽比</p>
<p>LimitedBox，可以指定最大宽高</p>
<p>FractionallySizeBox，可以根据父容器宽高的百分比来设置子组件宽高</p>
<h4 id="4-3-线性布局"><a href="#4-3-线性布局" class="headerlink" title="4.3 线性布局"></a>4.3 线性布局</h4><p>线性布局中有两个定义对齐方式的枚举类 MainAxisAlignment 和 CrossAxisAlignment，分别代表主轴对齐和纵轴对齐</p>
<h5 id="4-3-1-Row"><a href="#4-3-1-Row" class="headerlink" title="4.3.1 Row"></a>4.3.1 Row</h5><p>可以沿水平方向排列其子 Widget</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Row(&#123;</span><br><span class="line">  ...  </span><br><span class="line">  TextDirection textDirection,    </span><br><span class="line">  MainAxisSize mainAxisSize = MainAxisSize.max,    </span><br><span class="line">  MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start,</span><br><span class="line">  VerticalDirection verticalDirection = VerticalDirection.down,  </span><br><span class="line">  CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>textDirection 水平方向子组件的布局顺序，从左到右 TextDirection.ltr，从右到左 TextDirection.rtl </p>
<p>mainAxisSize 表示 Row 在主轴（水平）方向占用的空间，MainAxisSize.max 尽可能多的占用水平空间，MainAxisSize.min 尽可能少的占用水平空间</p>
<p>mainAxisAlignment 子组件在 Row 所占空间内对齐方式，MainAxisAlignment.start 表示沿着 textDirection 的初始方向对齐</p>
<p>verticalDirection 纵轴的对齐方向，默认 VerticalDirection.down 从上到下</p>
<p>crossAxisAlignment 子组件在纵轴方向对齐方式</p>
<h5 id="4-3-2-Column"><a href="#4-3-2-Column" class="headerlink" title="4.3.2 Column"></a>4.3.2 Column</h5><p>可以沿垂直方向排列其子组件</p>
<h4 id="4-4-弹性布局"><a href="#4-4-弹性布局" class="headerlink" title="4.4 弹性布局"></a>4.4 弹性布局</h4><p>弹性布局允许子组件按照一定比例来分配父容器空间</p>
<ul>
<li>Flex     </li>
</ul>
<p>Flex 组件可以沿着水平或垂直方向布局子组件，Row 和 Column 都继承自 Flex，参数基本相同，能使用 Flex 的地方都可以使用 Row 或 Column，它也可以和 Expanded 组件配合实现弹性布局</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Flex(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">this</span>.direction, <span class="comment">//弹性布局的方向, Row默认为水平方向，Column默认为垂直方向</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>Expanded</li>
</ul>
<p>只能作为 Flex 的孩子，它可以按比例扩伸 Flex 子组件所占用的空间</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Expanded(&#123;</span><br><span class="line">  <span class="built_in">int</span> flex = <span class="number">1</span>, </span><br><span class="line">  <span class="keyword">required</span> Widget child,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>flex 为弹性系数，为 0 或 null，则 child 是没有弹性的，如果大于 0，所有的 Expand 按照其 flex 的比例来分割主轴的全部剩余空间</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">body: Column(</span><br><span class="line">  children: [</span><br><span class="line">    Flex(</span><br><span class="line">        direction: Axis.horizontal,</span><br><span class="line">        children: [</span><br><span class="line">          Expanded(</span><br><span class="line">              flex: <span class="number">1</span>,</span><br><span class="line">              child: Container(</span><br><span class="line">                height: <span class="number">30</span>,</span><br><span class="line">                color: Colors.red,</span><br><span class="line">              ),</span><br><span class="line">          ),</span><br><span class="line">          Expanded(</span><br><span class="line">              flex: <span class="number">2</span>,</span><br><span class="line">              child: Container(</span><br><span class="line">                height: <span class="number">30</span>,</span><br><span class="line">                color: Colors.green,</span><br><span class="line">              ),</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">    ),</span><br><span class="line">    Padding(</span><br><span class="line">        padding: EdgeInsets.only(top: <span class="number">20</span>),</span><br><span class="line">        child: SizedBox(</span><br><span class="line">          height: <span class="number">100</span>,</span><br><span class="line">          child: Flex(</span><br><span class="line">              direction: Axis.vertical,</span><br><span class="line">              children: [</span><br><span class="line">                Expanded(</span><br><span class="line">                    flex: <span class="number">2</span>,</span><br><span class="line">                    child: Container(</span><br><span class="line">                      height: <span class="number">30</span>,</span><br><span class="line">                      color: Colors.red,</span><br><span class="line">                    ),</span><br><span class="line">                ),</span><br><span class="line">                Spacer( <span class="comment">//Spacer 占用指定比例的空间</span></span><br><span class="line">                    flex: <span class="number">1</span>,</span><br><span class="line">                ),</span><br><span class="line">                Expanded(</span><br><span class="line">                    flex: <span class="number">1</span>,</span><br><span class="line">                    child: Container(</span><br><span class="line">                      height: <span class="number">30</span>,</span><br><span class="line">                      color: Colors.green,</span><br><span class="line">                    ),</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%9B%9B%EF%BC%9A%E5%B8%83%E5%B1%80%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChatfbc763c47e927557d16a3e4f1bfe01c1.png" alt="WeChatfbc763c47e927557d16a3e4f1bfe01c1"></p>
<p>Spacer  的功能是占用指定比例的空间，只是 Expanded 的一个包装类</p>
<h4 id="4-5-流式布局"><a href="#4-5-流式布局" class="headerlink" title="4.5 流式布局"></a>4.5 流式布局</h4><p>Row 和 Column，如果子 widget 超出屏幕范围时，会溢出报错</p>
<p>超出屏幕范围会自动折行的布局称为流式布局，通过 Wrap 和 Flow 来支持</p>
<h5 id="4-5-1-Wrap"><a href="#4-5-1-Wrap" class="headerlink" title="4.5.1 Wrap"></a>4.5.1 Wrap</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Wrap(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">this</span>.direction = Axis.horizontal,</span><br><span class="line">  <span class="keyword">this</span>.alignment = WrapAlignment.start, <span class="comment">//主轴方向对齐方式</span></span><br><span class="line">  <span class="keyword">this</span>.spacing = <span class="number">0.0</span>,		<span class="comment">//主轴方向子 widget 的间距</span></span><br><span class="line">  <span class="keyword">this</span>.runAlignment = WrapAlignment.start, <span class="comment">//纵轴方向对齐方式</span></span><br><span class="line">  <span class="keyword">this</span>.runSpacing = <span class="number">0.0</span>, <span class="comment">//纵轴方向的间距</span></span><br><span class="line">  <span class="keyword">this</span>.crossAxisAlignment = WrapCrossAlignment.start,</span><br><span class="line">  <span class="keyword">this</span>.textDirection,</span><br><span class="line">  <span class="keyword">this</span>.verticalDirection = VerticalDirection.down,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>例子</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">body: Wrap(</span><br><span class="line">  spacing: <span class="number">8</span>, <span class="comment">// 主轴(水平)方向间距</span></span><br><span class="line">  runSpacing: <span class="number">4</span>,<span class="comment">// 纵轴（垂直）方向间距</span></span><br><span class="line">  alignment: WrapAlignment.center,<span class="comment">//沿主轴方向居中</span></span><br><span class="line">  children: [</span><br><span class="line">    Chip(</span><br><span class="line">      avatar: CircleAvatar(backgroundColor: Colors.blue, child: Text(<span class="string">&quot;A&quot;</span>)),</span><br><span class="line">      label: Text(<span class="string">&quot;Hamilton&quot;</span>),</span><br><span class="line">    ),</span><br><span class="line">    Chip(</span><br><span class="line">      avatar: CircleAvatar(backgroundColor: Colors.blue, child: Text(<span class="string">&quot;M&quot;</span>)),</span><br><span class="line">      label: Text(<span class="string">&quot;Lafayette&quot;</span>),</span><br><span class="line">    ),</span><br><span class="line">    Chip(</span><br><span class="line">      avatar: CircleAvatar(backgroundColor: Colors.blue, child: Text(<span class="string">&quot;H&quot;</span>)),</span><br><span class="line">      label: Text(<span class="string">&quot;Mulligan&quot;</span>),</span><br><span class="line">    ),</span><br><span class="line">    Chip(</span><br><span class="line">      avatar: CircleAvatar(backgroundColor: Colors.blue, child: Text(<span class="string">&quot;J&quot;</span>)),</span><br><span class="line">      label: Text(<span class="string">&quot;Laurens&quot;</span>),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%9B%9B%EF%BC%9A%E5%B8%83%E5%B1%80%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChat3d54f85053626129a97f139ca49e747e.png" alt="WeChat3d54f85053626129a97f139ca49e747e"></p>
<h5 id="4-5-2-Flow"><a href="#4-5-2-Flow" class="headerlink" title="4.5.2 Flow"></a>4.5.2 Flow</h5><p>一般很少使用 Flow，因为其过于复杂，需要自己实现子 widget 的位置转换，很多情况下首先要考虑 Wrap 是否满足需求</p>
<p>主要用于一些自定义布局策略或性能要求较高（如动画）的场景</p>
<h4 id="4-6-层叠布局"><a href="#4-6-层叠布局" class="headerlink" title="4.6 层叠布局"></a>4.6 层叠布局</h4><p>Flutter 中使用 Stack 和 Positioned 这两个组件来配合实现绝对定位，Stack 允许子组件堆叠，而 Positioned 用于根据 Stack 的四个角来确定子组件的位置</p>
<h5 id="4-6-1-Stack"><a href="#4-6-1-Stack" class="headerlink" title="4.6.1 Stack"></a>4.6.1 Stack</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Stack(&#123;</span><br><span class="line">  <span class="keyword">this</span>.alignment = AlignmentDirectional.topStart,</span><br><span class="line">  <span class="keyword">this</span>.textDirection,</span><br><span class="line">  <span class="keyword">this</span>.fit = StackFit.loose,<span class="comment">//未定位widget使用子组件大小</span></span><br><span class="line">  <span class="keyword">this</span>.overflow = Overflow.clip,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>aligment：没有指定定位（没有使用Positioned）或部分定位的子组件对齐方式</p>
<p>fit：用于确定没有定位的子组件如何去适应 Stack 的大小。StackFit.loose 表示使用子组件的大小，StackFit.expand 表示扩伸到 Stack 的大小</p>
<p>clipBehavior：决定对超出 Stack 显示空间的部分如何裁剪</p>
<h5 id="4-6-2-Positioned"><a href="#4-6-2-Positioned" class="headerlink" title="4.6.2 Positioned"></a>4.6.2 Positioned</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Positioned(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  <span class="keyword">this</span>.left, </span><br><span class="line">  <span class="keyword">this</span>.top,</span><br><span class="line">  <span class="keyword">this</span>.right,</span><br><span class="line">  <span class="keyword">this</span>.bottom,</span><br><span class="line">  <span class="keyword">this</span>.width,</span><br><span class="line">  <span class="keyword">this</span>.height,</span><br><span class="line">  <span class="keyword">required</span> Widget child,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>left、right、top、bottom 分别代表 Stack 左、右、上、下四边的距离。width、height 用于配合 left、right、top、bottom 来定位组件，水平方向时，只能指定 left、right、width 三个属性中的两个</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过ConstrainedBox来确保Stack占满屏幕</span></span><br><span class="line">ConstrainedBox(</span><br><span class="line">  constraints: BoxConstraints.expand(),</span><br><span class="line">  child: Stack(</span><br><span class="line">    alignment:Alignment.center , <span class="comment">//指定未定位或部分定位widget的对齐方式</span></span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">      Container(</span><br><span class="line">        child: Text(<span class="string">&quot;Hello world&quot;</span>,style: TextStyle(color: Colors.white)),</span><br><span class="line">        color: Colors.red,</span><br><span class="line">      ),</span><br><span class="line">      Positioned(</span><br><span class="line">        left: <span class="number">18.0</span>,</span><br><span class="line">        child: Text(<span class="string">&quot;I am Jack&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      Positioned(</span><br><span class="line">        top: <span class="number">18.0</span>,</span><br><span class="line">        child: Text(<span class="string">&quot;Your friend&quot;</span>),</span><br><span class="line">      )        </span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》四：布局类组件/WeChatb7f223696d8793b8c8b7ad2a3a70efe0.png" alt="WeChatb7f223696d8793b8c8b7ad2a3a70efe0" style="zoom:80%;" />

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Stack(</span><br><span class="line">  alignment:Alignment.center ,</span><br><span class="line">  fit: StackFit.expand, <span class="comment">//未定位widget占满Stack整个空间</span></span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Positioned(</span><br><span class="line">      left: <span class="number">18.0</span>,</span><br><span class="line">      child: Text(<span class="string">&quot;I am Jack&quot;</span>),</span><br><span class="line">    ),</span><br><span class="line">    Container(child: Text(<span class="string">&quot;Hello world&quot;</span>,style: TextStyle(color: Colors.white)),</span><br><span class="line">      color: Colors.red,</span><br><span class="line">    ),</span><br><span class="line">    Positioned(</span><br><span class="line">      top: <span class="number">18.0</span>,</span><br><span class="line">      child: Text(<span class="string">&quot;Your friend&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">  ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》四：布局类组件/WeChat292f6adf44bfae8dcc84ab16cd736158.png" alt="WeChat292f6adf44bfae8dcc84ab16cd736158" style="zoom:80%;" />

<p>第二个文本组件没有定位，fit 属性会对它起作用，就会占满 Stack，Stack 子元素是堆叠的，所以第一个组件被第二个遮挡住了，第三个在最上层正常显示</p>
<h4 id="4-7-对齐与相对定位"><a href="#4-7-对齐与相对定位" class="headerlink" title="4.7 对齐与相对定位"></a>4.7 对齐与相对定位</h4><p>Stack 和 Positioned，我们可以指定一个或多个子元素相对父元素各个边的偏移，并且可以堆叠；如果只想简单调整下一个子元素在父元素中的位置的话使用 Align 组件更简单</p>
<h5 id="4-7-1-Align"><a href="#4-7-1-Align" class="headerlink" title="4.7.1 Align"></a>4.7.1 Align</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Align(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  <span class="keyword">this</span>.alignment = Alignment.center,</span><br><span class="line">  <span class="keyword">this</span>.widthFactor,</span><br><span class="line">  <span class="keyword">this</span>.heightFactor,</span><br><span class="line">  Widget child,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>widthFactor，heightFactor 用于确定 Align 组件本身宽高属性，是两个缩放因子，如果为 null，则组件的宽高会占用尽可能多的空间</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">body: Container(</span><br><span class="line">  width: <span class="number">120</span>,</span><br><span class="line">  height: <span class="number">120</span>,</span><br><span class="line">  color: Colors.red,</span><br><span class="line">  child: Align(</span><br><span class="line">    alignment: Alignment.topRight,</span><br><span class="line">    child: FlutterLogo(size: <span class="number">60</span>),</span><br><span class="line">  ),</span><br><span class="line">),</span><br><span class="line"><span class="comment">//相同效果 FlutterLogo宽高为60 则最终宽高都为 120</span></span><br><span class="line">Align(</span><br><span class="line">  widthFactor: <span class="number">2</span>,<span class="comment">//确定Align组件宽度 2*子组件宽60=120</span></span><br><span class="line">  heightFactor: <span class="number">2</span>,</span><br><span class="line">  alignment: Alignment.topRight,</span><br><span class="line">  child: FlutterLogo(size: <span class="number">60</span>),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》四：布局类组件/WeChat8615b0b3da0d913f7ac3f52a0b453f34.png" alt="WeChat8615b0b3da0d913f7ac3f52a0b453f34" style="zoom:80%;" />

<ul>
<li>Alignment</li>
</ul>
<p>继承自 AlignmentGeometry，x y 分别表示在水平和垂直方向偏移</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alignment(this.x, this.y)</span><br></pre></td></tr></table></figure>

<p>会以矩形中心点作为原点，x y 值从 -1 到 1 分别代表矩形左边到右边的距离和顶部到底部的距离，Alignment(-1,-1) 代表左上角顶点</p>
<ul>
<li>FractionalOffset</li>
</ul>
<p>FractionalOffset 继承自 Alignment，唯一区别就是坐标原点不同，坐标原点为矩形左侧顶点</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  height: <span class="number">120.0</span>,</span><br><span class="line">  width: <span class="number">120.0</span>,</span><br><span class="line">  color: Colors.blue[<span class="number">50</span>],</span><br><span class="line">  child: Align(</span><br><span class="line">    alignment: FractionalOffset(<span class="number">0.2</span>, <span class="number">0.6</span>),</span><br><span class="line">    child: FlutterLogo(</span><br><span class="line">      size: <span class="number">60</span>,</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h5 id="4-7-2-Align-和-Stack-对比"><a href="#4-7-2-Align-和-Stack-对比" class="headerlink" title="4.7.2 Align 和 Stack 对比"></a>4.7.2 Align 和 Stack 对比</h5><p>定位参考系统不同；Stack/Positioned 定位参考系可以是父容器的四个顶点，Align 则需要通过 aligment 参数来确定坐标原点</p>
<p>Stack 可以有多个子元素，并且子元素可以堆叠，而 Align 只能有一个子元素，不存在堆叠</p>
<h5 id="4-7-3-Center-组件"><a href="#4-7-3-Center-组件" class="headerlink" title="4.7.3 Center 组件"></a>4.7.3 Center 组件</h5><p>Center 继承自 Align，比 Align 少了一个 aligment 参数</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">...<span class="comment">//省略无关代码</span></span><br><span class="line">DecoratedBox(</span><br><span class="line">  decoration: BoxDecoration(color: Colors.red),</span><br><span class="line">  child: Center(</span><br><span class="line">    child: Text(<span class="string">&quot;xxx&quot;</span>),</span><br><span class="line">  ),</span><br><span class="line">),</span><br><span class="line">DecoratedBox(</span><br><span class="line">  decoration: BoxDecoration(color: Colors.red),</span><br><span class="line">  child: Center(</span><br><span class="line">    widthFactor: <span class="number">1</span>,</span><br><span class="line">    heightFactor: <span class="number">1</span>,</span><br><span class="line">    child: Text(<span class="string">&quot;xxx&quot;</span>),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》四：布局类组件/WeChat5e3ebd6ef218ee6f1388e9e97b95ecb0.png" alt="WeChat5e3ebd6ef218ee6f1388e9e97b95ecb0" style="zoom:80%;" />

<ul>
<li>总结</li>
</ul>
<p>在需要指定一些精确的偏移时优先使用 FractionalOffset，因为它的坐标原点和布局系统相同</p>
<h4 id="4-8-LayoutBuilder、AfterLayout"><a href="#4-8-LayoutBuilder、AfterLayout" class="headerlink" title="4.8 LayoutBuilder、AfterLayout"></a>4.8 LayoutBuilder、AfterLayout</h4><h5 id="4-8-1-LayoutBuilder"><a href="#4-8-1-LayoutBuilder" class="headerlink" title="4.8.1 LayoutBuilder"></a>4.8.1 LayoutBuilder</h5><p>通过  LayoutBuilder 我们可以在布局过程中拿到父组件传递的约束信息，然后可以根据约束信息动态的构建不同的布局</p>
<p>例子：当当前可用宽度小于200时，将子组件显示为一列，否则显示为两列</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResponsiveColumn</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ResponsiveColumn(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.children&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; children;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// 通过 LayoutBuilder 拿到父组件传递的约束，然后判断 maxWidth 是否小于200</span></span><br><span class="line">    <span class="keyword">return</span> LayoutBuilder(</span><br><span class="line">      builder: (BuildContext context, BoxConstraints constraints) &#123;</span><br><span class="line">        <span class="keyword">if</span> (constraints.maxWidth &lt; <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="comment">// 最大宽度小于200，显示单列</span></span><br><span class="line">          <span class="keyword">return</span> Column(children: children, mainAxisSize: MainAxisSize.min);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 大于200，显示双列</span></span><br><span class="line">          <span class="keyword">var</span> _children = &lt;Widget&gt;[];</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; children.length) &#123;</span><br><span class="line">              _children.add(Row(</span><br><span class="line">                children: [children[i], children[i + <span class="number">1</span>]],</span><br><span class="line">                mainAxisSize: MainAxisSize.min,</span><br><span class="line">              ));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              _children.add(children[i]);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> Column(children: _children, mainAxisSize: MainAxisSize.min);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LayoutBuilderRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> LayoutBuilderRoute(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">var</span> _children = <span class="built_in">List</span>.filled(<span class="number">6</span>, Text(<span class="string">&quot;A&quot;</span>));</span><br><span class="line">    <span class="comment">// Column在本示例中在水平方向的最大宽度为屏幕的宽度</span></span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        <span class="comment">// 限制宽度为190，小于 200</span></span><br><span class="line">        SizedBox(width: <span class="number">190</span>, child: ResponsiveColumn(children: _children)),</span><br><span class="line">        ResponsiveColumn(children: _children),</span><br><span class="line">        LayoutLogPrint(child:Text(<span class="string">&quot;xx&quot;</span>)) <span class="comment">// 下面介绍</span></span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以使用 LayoutBuilder 来根据设备的尺寸来实现响应式布局</p>
<p>LayoutBuilder 可以帮助排查问题，如遇到布局问题或想调试组件树中一个节点布局的约束时</p>
<h5 id="4-8-2-AfterLayout"><a href="#4-8-2-AfterLayout" class="headerlink" title="4.8.2 AfterLayout"></a>4.8.2 AfterLayout</h5><p>作者封装的组件，可以在子组件布局完成后执行一个回调</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">AfterLayout(</span><br><span class="line">  callback: (RenderAfterLayout ral) &#123;</span><br><span class="line">    <span class="built_in">print</span>(ral.size); <span class="comment">//子组件的大小</span></span><br><span class="line">    <span class="built_in">print</span>(ral.offset);<span class="comment">// 子组件在屏幕中坐标</span></span><br><span class="line">  &#125;,</span><br><span class="line">  child: Text(<span class="string">&#x27;flutter@wendux&#x27;</span>),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

































]]></content>
  </entry>
  <entry>
    <title>音视频开发</title>
    <url>/2021/08/03/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h4 id="音视频基础"><a href="#音视频基础" class="headerlink" title="音视频基础"></a>音视频基础</h4><h5 id="数字音频"><a href="#数字音频" class="headerlink" title="数字音频"></a>数字音频</h5><p>将模拟信号转换为数字信号的过程</p>
<ul>
<li>采样</li>
</ul>
<p>在时间轴上对信号进行数字化。</p>
<p>根据奈奎斯特定理（也称为采样定理），按比声音最高频率高2倍以上的频率对声音进行采样（也称为AD转换）</p>
<p>比如：对高质量音频信号，其频率范围是20Hz~20kHz（人耳能够听到的频率范围），所以采样频率一般为44.1kHz，这样就可以保证采样声音达到20kHz也能被数字化，从而使得经过数字化处理之后，人耳听到的声音质量不会被降低</p>
<p>44.1kHz就是代表1秒会采样44100次</p>
<ul>
<li>量化</li>
</ul>
<p>在幅度轴上对信号进行数字化</p>
<ul>
<li>编码</li>
</ul>
<p>按照一定的格式记录采样和量化后的数字数据</p>
<p>音频格式有很多种，音频裸数据格式就是脉冲编码调制（PCM）数据。</p>
<p>描述一段PCM数据一般需要以下几个概念：<br>量化格式（sampleFormat）<br>采样率（sampleRate）<br>声道数（channel）</p>
<p>以CD音质为例：量化格式为16比特（2字节），采样率为44100，声道数为2，这些信息就描述</p>
<p>CD音质的比特率：即1秒时间内的比特数目，衡量音频数据单位时间内的容量大小<br>44100 * 16 * 2 = 1378.125kbps</p>
<p>那么1分钟内，这类CD音质的数据需要占据多大内存空间？<br>1378.125 * 60 / 8 / 1024 = 10.09M</p>
<p>如果sampleFormat更加精确（比如用4字节来描述一个采样）或者sampleRate更加密集（比如48kHz的采样率）那么所占的存储空间会更大，同时能够描述的声音细节会越精确</p>
<h5 id="音频编码"><a href="#音频编码" class="headerlink" title="音频编码"></a>音频编码</h5><p>通过计算CD音质的数据采样，每分钟需要存储10.1M，若要在网络中实时在线传播的话，数据量可能就太大了，需要进行压缩编码</p>
<p>压缩算法包括有损压缩和无损压缩，无损压缩是指解压后的数据可以完全恢复，有损压缩解压后的数据不能完全恢复，会丢失一部分信息，压缩比越小，丢失的信息就越多</p>
<p>压缩编码实际上是压缩掉冗余信号，冗余信号是指不能被人耳感知到的信号</p>
<p>常见压缩编码格式：</p>
<ol>
<li>WAV编码</li>
</ol>
<p>在PCM数据格式前加上44字节，分辨用来描述PCM的采样率、声道数、数据格式等信息</p>
<p>特点：音质非常好，大量软件都支持其播放</p>
<p>适合场所：多媒体开发中的中间文件，保存音乐和音效素材</p>
<ol start="2">
<li>MP3编码</li>
</ol>
<p>具有不错的压缩比，听感上非常解决WAV文件</p>
<p>特点：音质在128kbps/s以上表现还不错，压缩比比较高，大量软件和硬件都支持，兼容性好</p>
<p>适合场所：搞比特率下对兼容性有要求的音乐欣赏</p>
<ol start="3">
<li>AAC编码</li>
</ol>
<p>目前比较热门的有损压缩编码技术，并衍生出了LC-AAC、HE-AAC、HE-AAC v2三种主要编码格式。</p>
<p>LC-AAC 是比较传统的AAC，主要应用于中高码率场景编码（&gt;=80Kbit/s）</p>
<p>HE-AAC 主要应用于低码率场景的编码（&lt;=80Kbit/s）</p>
<p>HE-AAC v2 主要应用于低码率场景的编码（&lt;=48Kbit/s）</p>
<p>特点：在小于128Kbit/s的码率下表现优异，多用于视频中的音频编码</p>
<ol start="4">
<li>Ogg编码</li>
</ol>
<p>一种非常有潜力的编码，各种码率下都有比较优秀的表现，尤其在中低码率场景下。可以用更下的码率达到更好的音质，128Kbit/s的Ogg币192Kbit/s甚至更高码率的MP3还要出色，但目前还没有媒体服务软件的支持</p>
<p>特点：可以用比MP3更小的码率实现比MP3更好的音质，高中低码率下均有良好表现，兼容性不够好，流媒体特性不支持</p>
<p>适用场景：语音聊天的音频消息场景</p>
<h5 id="视频编码"><a href="#视频编码" class="headerlink" title="视频编码"></a>视频编码</h5><p>视频压缩也是通过去除冗余信息来进行压缩的</p>
<p>使用帧间编码技术可以去除时间上冗余信息</p>
<p>使用帧内编码技术可以去除空间上冗余信息</p>
<h5 id="编码概念"><a href="#编码概念" class="headerlink" title="编码概念"></a>编码概念</h5><p>MPEG 算法适用于动态视频的压缩算法，它除了对单幅图像进行编码外，还利用图像序列中的相关原则去除冗余，大大提高视频压缩比。</p>
<p>MPEG主要包括几个版本：Mpeg1（用于VCD）、Mpeg2（用于DVD）、Mpeg4 AVC（现在流媒体使用最多的就是它了）</p>
<p>相比较与ISO指定的MPEG的视频压缩标准，ITU-T制定的H.261、H.262、H.263、H.264一系列视频编码标准是一套单独的体系。其中H.264集中了以往标准的所有有点，采用简洁设计，使得它比Mpeg4更容易推广，现在使用最多的就是H.264标准</p>
<ul>
<li>I帧</li>
</ul>
<p>帧内编码帧，</p>
<ul>
<li><p>P帧</p>
</li>
<li><p>B帧</p>
</li>
</ul>
<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>项目增加C++支持，OC语法支持混编，把引用C++的OC类后缀名改为.mm，就可以和C++一块编译了</p>
<p>LAME 一种MP3编码引擎，转码成MP3格式的音频文件时，最常用的就是LAME库</p>
<p>编译LAME，<a href="https://lame.sourceforge.io/download.php">LAME</a> 下载不下来，使用别人编译好的版本 <a href="https://github.com/JIANHUI2015/RemoteIODemo">lame </a> 两个文件 lame.h 和 libmp3lame.a，拖进项目就可以了</p>
<h4 id="AudioUnit"><a href="#AudioUnit" class="headerlink" title="AudioUnit"></a>AudioUnit</h4><p>iOS 平台上所有的音频框架底层都是基于 AudioUnit 实现的</p>
<p>较高层次的音频框架包括：Mediia Player、AVFoundation、OpenAL、AudioToolbox，这些框架都封装了 AudioUnit，提供了更高层次的API（功能更少，职责更单一接口）</p>
<p><img src="/2021/08/03/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/AudioUnit.png" alt="AudioUnit"></p>
<p>如果对音频需要更高成都的控制、性能以及灵活性，或者想要使用一些特殊功能（回声消除）时，可以直接使用 AudioUnit API，以下场景更适合使用 AudioUnit</p>
<ul>
<li>想使用低延迟的音频 I/O（input或者output）比如说 VoIP 的应用场景下</li>
<li>多路声音的合成并且回放，比如游戏或者音乐合成器的应用</li>
<li>使用 AudioUnit 里提供的特殊功能，比如：回声消除、Mix两轨音频、以及均衡器、压缩器、混响器等效果器</li>
<li>需要图状结构来处理音频，可以将音频处理模块组装到灵活的图状结构中</li>
</ul>
<h6 id="AudioSession"><a href="#AudioSession" class="headerlink" title="AudioSession"></a>AudioSession</h6><p>音频会话，用于管理与获取 iOS 设备音频的硬件信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AVAudioSession *audioSession &#x3D; [AVAudioSession sharedInstance];</span><br><span class="line">NSError *error &#x3D; nil;</span><br><span class="line">&#x2F;&#x2F;设置以何种方式使用音频硬件</span><br><span class="line">[audioSession setCategory:AVAudioSessionCategoryPlayAndRecord error:&amp;error];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置I&#x2F;O的Buffer，Buffer越小则说明延迟越低</span><br><span class="line">NSTimeInterval bufferDuration &#x3D; 0.002;</span><br><span class="line">[audioSession setPreferredIOBufferDuration:bufferDuration error:&amp;error];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置采样频率 让硬件设备按照设置的采样频率来采集或者播放音频</span><br><span class="line">double hwSampleRate &#x3D; 44100.0;</span><br><span class="line">[audioSession setPreferredSampleRate:hwSampleRate error:&amp;error];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置完所有参数之后就可以激活 AudioSession</span><br><span class="line">[audioSession setActive:YES error:&amp;error];</span><br></pre></td></tr></table></figure>

<h6 id="构建-AudioUnit"><a href="#构建-AudioUnit" class="headerlink" title="构建 AudioUnit"></a>构建 AudioUnit</h6><p>创建并启用 AudioSession 音频会话之后就可以构建 AudioUnit 了</p>
<p>需要指定类型（Type）、子类型（subtype）以及厂商（Manufacture），利用三个变量可以完整描述一个 AudioUnit 了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AudioComponentDescription ioUnitDescription;</span><br><span class="line">ioUnitDescription.componentType &#x3D; kAudioUnitType_Output;</span><br><span class="line">ioUnitDescription.componentSubType &#x3D; kAudioUnitSubType_RemoteIO;</span><br><span class="line">&#x2F;&#x2F;比较固定 直接kAudioUnitManufacturer_Apple就可以了</span><br><span class="line">ioUnitDescription.componentManufacturer &#x3D; kAudioUnitManufacturer_Apple;</span><br><span class="line">ioUnitDescription.componentFlags &#x3D; 0;</span><br><span class="line">ioUnitDescription.componentFlagsMask &#x3D; 0;</span><br></pre></td></tr></table></figure>

<p>上面代码构造了 RemoteIO 类型的 AudioUnit 描述的结构体，下面构造 AudioUnit</p>
<p>两种方式构建：1. 使用 AudioUnit 裸的创建方式 2. 使用 AUGraph 和 AUNode 的 Wrapper 来构建</p>
<ol>
<li>裸的创建方式</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;根据 AudioUnit 的描述，找出实际的 AudioUnit 类型</span><br><span class="line">AudioComponent ioUnitRef &#x3D; AudioComponentFindNext(NULL, &amp;ioUnitDescription);</span><br><span class="line">&#x2F;&#x2F;声明一个 AudioUnit 引用</span><br><span class="line">AudioUnit ioUnitInstance;</span><br><span class="line">&#x2F;&#x2F;根据类型创建 AudioUnit 实例</span><br><span class="line">AudioComponentInstanceNew(ioUnitRef, &amp;ioUnitInstance);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>AUGraph 创建方式（扩展性更高）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;声明并实例化一个AUGraph</span><br><span class="line">AUGraph processingGraph;</span><br><span class="line">NewAUGraph(&amp;processingGraph);</span><br><span class="line">&#x2F;&#x2F;按照AudioUnit的描述在AUGraph中增加一个AUNode</span><br><span class="line">AUNode ioNode;</span><br><span class="line">AUGraphAddNode(processingGraph, &amp;ioUnitDescription, &amp;ioNode);</span><br><span class="line">&#x2F;&#x2F;打开AUGraph，必须在获取AudioUnit之前打开整个AUGraph</span><br><span class="line">AUGraphOpen(processingGraph);</span><br><span class="line">&#x2F;&#x2F;在AUGraph中的某个Node里获得AudioUnit的引用</span><br><span class="line">AudioUnit ioUnit;</span><br><span class="line">AUGraphNodeInfo(processingGraph, ioNode, NULL, &amp;ioUnit);</span><br></pre></td></tr></table></figure>

<h6 id="AudioUnit-通用参数"><a href="#AudioUnit-通用参数" class="headerlink" title="AudioUnit 通用参数"></a>AudioUnit 通用参数</h6><p>以 RemoteIO  为例，RemoteIO 这个 AudioUnit 是与硬件 IO 相关的一个 Unit，分为输入和输出端，输入端一般是麦克风，输出端一般指扬声器或者耳机，如果需要同事使用输入输出，即K歌应用中的耳返功能，则需要做一些设置将他们连接起来</p>
<img src="remoteio.png" alt="remoteio" style="zoom:90%;" />

<p>RemoteIO Unit 分为 Element0 和 Element 1，Element0 控制输出端，Element1 控制输入端，每个 Element 又分为 Input Scope 和 Output Scope。</p>
<p>如果想要使用扬声器的声音播放功能，必须将这个 Unit 的 Element0 的 OutputScope 和 Speaker 进行连接</p>
<p>如果想要使用麦克风录音功能，必须将这个Unit 的 Element1 的 InputScope 和麦克风进行连接</p>
<p>使用扬声器代码：把 RemoteIOUnit的 Element0 的 OutputScope 连接到 Speaker 上，会返回一个 OSStatus 值，使用自定义 CheckStatus 函数判断错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OSStatus status &#x3D; noErr;</span><br><span class="line">UInt32 oneFlag &#x3D; 1;</span><br><span class="line">&#x2F;&#x2F;Element 0</span><br><span class="line">UInt32 busZero &#x3D; 0;</span><br><span class="line">status &#x3D; AudioUnitSetProperty(ioUnit,</span><br><span class="line">                              kAudioOutputUnitProperty_EnableIO,</span><br><span class="line">                              kAudioUnitScope_Output,</span><br><span class="line">                              busZero,</span><br><span class="line">                              &amp;oneFlag,</span><br><span class="line">                              sizeof(oneFlag));</span><br><span class="line">&#x2F;&#x2F;自定义的CheckStatus函数来判断错误并输出</span><br><span class="line">CheckStatus(status, @&quot;Could not Connect To Speaker&quot;, YES);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CheckStatus</span><span class="params">(OSStatus status, NSString *message, BOOL fatal)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (status != noErr) &#123;</span><br><span class="line">        <span class="keyword">char</span> fourCC[<span class="number">16</span>];</span><br><span class="line">        *(UInt32 *)fourCC = CFSwapInt32HostToBig(status);</span><br><span class="line">        fourCC[<span class="number">4</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isprint</span>(fourCC[<span class="number">0</span>]) &amp;&amp;</span><br><span class="line">            <span class="built_in">isprint</span>(fourCC[<span class="number">1</span>]) &amp;&amp;</span><br><span class="line">            <span class="built_in">isprint</span>(fourCC[<span class="number">2</span>]) &amp;&amp;</span><br><span class="line">            <span class="built_in">isprint</span>(fourCC[<span class="number">3</span>])) &#123;</span><br><span class="line">            NSLog(@<span class="string">&quot;%@: %s&quot;</span>, message, fourCC);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            NSLog(@<span class="string">&quot;%@: %d&quot;</span>, message, (<span class="keyword">int</span>)status);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fatal) &#123;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启用麦克风：把 RemoteIOUnit 的 Element1 的 InputScope 连接上麦克风</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Element 1</span><br><span class="line">UInt32 busOne &#x3D; 1;</span><br><span class="line">AudioUnitSetProperty(ioUnit,</span><br><span class="line">                     kAudioOutputUnitProperty_EnableIO,</span><br><span class="line">                     kAudioUnitScope_Input,</span><br><span class="line">                     busOne,</span><br><span class="line">                     &amp;oneFlag,</span><br><span class="line">                     sizeof(oneFlag));</span><br></pre></td></tr></table></figure>

<p>连接成功后，就该给 AudioUnit 设置数据格式了，AudioUnit 数据格式分为输入和输出两个部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;设置AudioUnit数据格式 AudioStreamBasicDescription描述音视频具体格式</span><br><span class="line">UInt32 bytesPerSample &#x3D; sizeof(Float32);</span><br><span class="line">AudioStreamBasicDescription asbd;</span><br><span class="line">bzero(&amp;asbd, sizeof(asbd));</span><br><span class="line"></span><br><span class="line">double _samplerRate &#x3D; 44100.0;</span><br><span class="line">UInt32 channels &#x3D; 2;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;指定音频的编码格式 此处 PCM</span><br><span class="line">asbd.mFormatID &#x3D; kAudioFormatLinearPCM;</span><br><span class="line">&#x2F;&#x2F;采样率</span><br><span class="line">asbd.mSampleRate &#x3D; _samplerRate;</span><br><span class="line">&#x2F;&#x2F;声道数 1单身到 2立体声</span><br><span class="line">asbd.mChannelsPerFrame &#x3D; channels;</span><br><span class="line">&#x2F;&#x2F;每个Packers有几个Frame</span><br><span class="line">asbd.mFramesPerPacket &#x3D; 1;</span><br><span class="line">&#x2F;&#x2F;mFormatFlags 描述声音表示格式的参数</span><br><span class="line">&#x2F;&#x2F;kAudioFormatFlagsNativeFloatPacked 指定每个sample的表示格式是Float格式；</span><br><span class="line">&#x2F;&#x2F;kAudioFormatFlagIsNonInterleaved   左右声道是非交错存放的</span><br><span class="line">&#x2F;&#x2F;实际的音频数据会存储在一个 AudioBufferList结构中的变量mBuffers中，如果mFormatFlags指定的是 NonInterleaved，那么左声道就会在mBuffers[0]里面，右声道就会在 mBuffers[1]里面</span><br><span class="line">asbd.mFormatFlags &#x3D; kAudioFormatFlagsNativeFloatPacked | kAudioFormatFlagIsNonInterleaved;</span><br><span class="line">&#x2F;&#x2F;一个声道的音频数据用多少位来表示</span><br><span class="line">asbd.mBitsPerChannel &#x3D; 8 * bytesPerSample;</span><br><span class="line">&#x2F;&#x2F;每一帧有多少字节 mBytesPerFrame和mBytesPerPacket根据mFormatFlags来分配</span><br><span class="line">&#x2F;&#x2F;NonInterleaved情况下bytesPerSample(因为左右声道分开存放的)；Interleaved的话bytesPerSample * channels(因为左右声道是交错存放)</span><br><span class="line">asbd.mBytesPerFrame &#x3D; bytesPerSample;</span><br><span class="line">&#x2F;&#x2F;每个包有多少字节</span><br><span class="line">asbd.mBytesPerPacket &#x3D; bytesPerSample;</span><br></pre></td></tr></table></figure>

<p>构造好了 BasicDescription 结构体，将结构体设置给对应 AudioUnit</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;构造好了BasicDescription结构体，将这结构体设置给对应的AudioUnit</span><br><span class="line">AudioUnitSetProperty(ioUnit,</span><br><span class="line">                     kAudioUnitProperty_StreamFormat,</span><br><span class="line">                     kAudioUnitScope_Output, 1,</span><br><span class="line">                     &amp;asbd, sizeof(asbd));</span><br></pre></td></tr></table></figure>



<ul>
<li>kAudioOutputUnitProperty_EnableIO 用于启用或禁用 I/O Unit上的输入输出，默认启用输出但禁用输入</li>
<li>kAudioUnitProperty_ElementCount 配置 Mixer Unit上的输入元素数量</li>
<li>kAudioUnitProperty_MaximumFramesPerSlice 指定音频数据最大帧数</li>
<li>kAudioUnitProperty_StreamFormat 指定特定音频单元输入或输出总线的音频流数据格式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UInt32 maximumFramesPerSlice &#x3D; 4096;</span><br><span class="line">AudioUnitSetProperty (</span><br><span class="line">              _ioUnit,</span><br><span class="line">              kAudioUnitProperty_MaximumFramesPerSlice,</span><br><span class="line">              kAudioUnitScope_Global,0,</span><br><span class="line">              &amp;maximumFramesPerSlice,</span><br><span class="line">              sizeof (maximumFramesPerSlice));</span><br></pre></td></tr></table></figure>

<p>Global Scope适用于整个AudioUnit，不与任何特定音频流相关，只有1个元素即0，某些属性，如每个切片最大帧数，仅适用于 Global Scope</p>
<p>设置音频数据流格式</p>
<img src="音视频开发/IOWithoutRenderCallback.png" alt="IOWithoutRenderCallback" style="zoom:70%;" />













<h6 id="AudioUnit-分类"><a href="#AudioUnit-分类" class="headerlink" title="AudioUnit 分类"></a>AudioUnit 分类</h6><ol>
<li>Effect Unit</li>
</ol>
<p>类型是 <code>kAudioUnitType_Effect</code>，主要提供声音特效处理的功能，子类型如下：</p>
<p>均衡器效果：子类型是 <code>kAudioUnitSubType_NBandEQ</code>，主要作用 是为声音的某些频带增强或者减弱能量，该效果器需要指定多个频带， 然后为各个频带设置宽度以及增益，最终将改变声音在频域上的能量分布</p>
<p>压缩效果器：子类型是 <code>kAudioUnitSubType_DynamicsProcessor</code>，主 要作用是当声音较小的时候可以提高声音的能量，当声音的能量超过了 设置的阈值时，可以降低声音的能量，当然应合理地设置作用时间、释 放时间以及触发值，使得最终可以将声音在时域上的能量压缩到一定范 围之内</p>
<p>混响效果器：子类型是 <code>kAudioUnitSubType_Reverb2</code>，对于人声处 理来讲这是非常重要的效果器，可以想象自己身处在一个空房子中，如 果有非常多的反射声和原始声音叠加在一起，那么从听感上可能会更有 震撼力，但是同时原始声音也会变得更加模糊，原始声音的一些细节会 被遮盖掉，所以混响设置的大或者小对于不同的人来讲会很不一致，可以根据自己的喜好来进行设置</p>
<p>Effect Unit下最常使用的就是上述三种效果器，其下还有很多种子类型的效果器，像高通(High Pass)、低通(Low Pass)、带通 (Band Pass)、延迟(Delay)、压限(Limiter)等效果器</p>
<ol start="2">
<li>Mixer Units</li>
</ol>
<p>类型是 <code>kAudioUnitType_Mixer</code>，主要提供 Mix 多路声音的功能，子类型如下：</p>
<p>3D Mixer：该效果器在移动身上无法使用</p>
<p>MultiChannelMixer：子类型是 <code>kAudioUnitSubType_MultiChannelMixer</code>，它是多路声音混音的效果器，可以接收多路音频的输入，还可以 分别调整每一路音频的增益与开关，并将多路音频合并成一路，该效果 器在处理音频的图状结构中非常有用</p>
<p>OutputScope仅设置采样率</p>
<p>默认情况下 kAudioUnitProperty_MaximumFramesPerSlice 设置为1024，如果在屏幕锁定情况下播放音频，必须增加此属性值，除非音频输入处于活动状态</p>
<p>如果音频活动处于活动状态，无需为 kAudioUnitProperty_MaximumFramesPerSlice 设置值</p>
<p>如果音频输入不活跃，将此属性设置为 4096</p>
<ol start="3">
<li>I/O Units</li>
</ol>
<p>类型是 <code>kAudioUnitType_Output</code>，主要提供的就是I/O的功能</p>
<p>RemoteIO：子类型是 <code>kAudioUnitSubType_RemoteIO</code>，是用来采集音频与播放音频的</p>
<p>Generic Output：子类型是 <code>kAudioUnitSubType_GenericOutput</code>，当 开发者需要进行离线处理，或者说在AUGraph中不使用Speaker(扬声 器)来驱动整个数据流，而是希望使用一个输出(可以放入内存队列或 者进行磁盘I/O操作)来驱动数据流时，就使用该子类型</p>
<ol start="4">
<li>Format Converter Units</li>
</ol>
<p>类型是 <code>kAudioUnitType_FormatConverter</code>，主要用于提供格式转换 的功能，比如:采样格式由Float到SInt16的转换、交错和平铺的格式转换、单双声道的转换等</p>
<p>AUConverter：子类型是 <code>kAudioUnitSubType_AUConverter</code>，当某些效果器对输入的音频格式有 明确的要求时(比如3D Mixer Unit就必须使用UInt16格式的sample)， 或者开发者将音频数据输入给一些其他的编码器进行编码，又或者开发 者想使用SInt16格式的PCM裸数据在其他CPU上进行音频算法计算等的 场景下，就需要使用到这个ConverterNode了。下面来看一个比较典型的 场景，我们自定义一个音频播放器(代码仓库中的AudioPlayer项目)， 由FFmpeg解码出来的PCM数据是SInt16格式的，因此不能直接输送给 RemoteIO Unit进行播放，所以需要构建一个ConvertNode将SInt16格式 表示的数据转换为Float32格式表示的数据，然后再输送给RemoteIO Unit，最终才能正常播放出来</p>
<p>Time Pitch:子类型是 <code>kAudioUnitSubType_NewTimePitch</code>，即变速 变调效果器，这是一个很有意思的效果器，可以对声音的音高、速度进 行调整，像“会说话的Tom猫”类似的应用场景就可以使用这个效果器来 实现</p>
<ol start="5">
<li>Generator Units</li>
</ol>
<p>类型是 <code>kAudioUnitType_Generator</code>，在开发中我们经常使用它来提供播放器的功能</p>
<p>AudioFilePlayer：子类型是 <code>kAudioUnitSubType_AudioFilePlayer</code>， 在 AudioUnit 里面，如果我们的输入不是麦克风，而希望其是一个媒体 文件，当然，也可以类似于代码仓库中的 AudioPlayer 项目自行解码，转 换之后将数据输送给 RemoteIO Unit 播放出来，但是其实还有一种更加简 单、方便的方式，那就是使用 AudioFilePlayer 这个 AudioUnit，可以参考 代码仓库中的 AUPlayer 项目，该项目就是利用 AudioFilePlayer 作为输入 数据源来提供数据的。需要注意的是，必须在初始化 AUGraph 之后，再 去配置 AudioFilePlayer 的数据源以及播放范围等属性，否则就会出现错 误，其实数据源还是会调用 AudioFile 的解码功能，将媒体文件中的压缩 数据解压成为PCM裸数据，最终再交给 AudioFilePlayer Unit 进行后续处 理</p>
<h6 id="构造一个-AUGraph"><a href="#构造一个-AUGraph" class="headerlink" title="构造一个 AUGraph"></a>构造一个 AUGraph</h6><p>实际的K歌应用场景，会对用户发出的声音进行处理，并且立即给 用户一个耳返(在50ms之内将声音输出到耳机中，让用户可以听到)。 那么如何让 RemoteIOUnit 利用麦克风采集出来的声音，经过中间效果器 的处理，最终输出到 Speaker 中播放给用户呢？如何 以AUGraph的方式将声音采集、声音处理以及声音输出的整个过程管理 起来</p>
<p>首先要知道数据可以在通道中传递是由最右端 Speaker(RemoteIO Unit)来驱动的，它会向其前一级——AUNode要数 据，然后它的前一级会继续向上一级节点要数据，并最终从 RemoteIOUnit的Element1 (即麦克风)中要数据，这样就可以将数据按 照相反的方向一级一级地传递下去，最终传递到RemoteIOUnit的 Element0(即Speaker)并播放给用户听到。当然你可能会想到离线处理 的时候应该由谁来进行驱动呢?其实在进行离线处理的时候应该使用 Mixer Unit大类型下面子类型为Generic Output的AudioUnit来做驱动端。 那么这些AudioUnit或者说AUNode是如何进行连接的呢?有两种方式， 第一种方式是直接将AUNode连接起来;第二种方式是通过回调的方式 将两个AUNode连接起来</p>
<p><img src="/2021/08/03/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/02.png" alt="02"></p>
<ul>
<li>直接连接</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AUGraphConnectNodeInput(mPlayerGraph, mPlayerNode, 0, mPlayerIONode, 0);</span><br></pre></td></tr></table></figure>

<p>AUPlayer实例中的一段代码，目标是将Audio File Player Unit和RemoteIO Unit直接连接起来，当RemoteIO Unit需要播放数据的时 候，就会调用AudioFilePlayer Unit来获取数据，这样就把这两个 AudioUnit连接起来了</p>
<ul>
<li>回调方式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AURenderCallbackStruct renderProc;</span><br><span class="line">renderProc.inputProc &#x3D; &amp;inputAvailableCallback;</span><br><span class="line">renderProc.inputProcRefCon &#x3D; (__bridge void *)self;</span><br><span class="line">AUGraphSetNodeInputCallback(mGraph, ioNode, 0, &amp;finalRenderProc);</span><br></pre></td></tr></table></figure>

<p>这段代码首先是构造一个AURenderCallback的结构体，并指定一个 回调函数，然后设置给RemoteIO Unit的输入端，当RemoteIO Unit需要 数据输入的时候就会回调该回调函数，回调函数代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static OSStatus renderCallback(void *inRefCon, AudioUnitRenderActionFlags</span><br><span class="line">           *ioActionFlags, const AudioTimeStamp *inTimeStamp, UInt32</span><br><span class="line">           inBusNumber, UInt32 inNumberFrames, AudioBufferList *ioData)</span><br><span class="line"> &#123;</span><br><span class="line">     OSStatus result &#x3D; noErr;</span><br><span class="line">     __unsafe_unretained AUGraphRecorder *THIS &#x3D; (__bridge</span><br><span class="line">             AUGraphRecorder *)inRefCon;</span><br><span class="line">     AudioUnitRender(THIS-&gt;mixerUnit, ioActionFlags, inTimeStamp, 0,</span><br><span class="line">             inNumberFrames, ioData);</span><br><span class="line">     result &#x3D; ExtAudioFileWriteAsync(THIS-&gt;finalAudioFile, inNumberFrames,</span><br><span class="line">             ioData);</span><br><span class="line">     return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>该回调函数主要完成两件事情:第一件事情是去Mixer Unit里面要 数据，通过调用AudioUnitRender的方式来驱动Mixer Unit获取数据，得 到数据之后放入ioData中，从而填充回调方法中的参数，将Mixer Unit与 RemoteIO Unit连接了起来;第二件事情则是利用ExtAudioFile将这段声 音编码并写入本地磁盘的一个文件中</p>
<p>本节的代码仓库中包含了两个实例项目:一个是AUPlayer，利用 AudioFilePlayer Unit和RemoteIO Unit做了一个最简单的播放器;另外一个是AudioPlayer，它会利用FFmpeg进行解码操作，解码出来的是SInt16 格式表示的数据，然后再通过一个ConvertNode将其转换为Float32格式 表示的数据，最终输送给RemoteIO Unit进行播放。将这两个项目对比来 看，第二种方式十分不便</p>
<h4 id="音频采集"><a href="#音频采集" class="headerlink" title="音频采集"></a>音频采集</h4><p>示例代码 AudioRecorder</p>
<p>如果想要直接指定一个路径，可以将录制的音频编码到文件中，可以使用 <code> AVAudioRecorder</code>，优点是简单易用</p>
<p>但如果想要实时在内存中获取录音数据来说，限制性非常强，iOS提供了两个层次API来协助实现</p>
<p><code>AudioQueue</code>：是AudioUnit更高级的封装，功能更单一，接口调用更简单，如果仅仅要获取内存中的录音数据，然后再进行编码输出，用更高级的AudioQueue的API会更好些</p>
<p><code>AudioUnit</code>：如果要使用更多音效处理，以及实时的监听（耳机中听到自己说话），使用AudioUnit会更方便一些</p>
<p>要使用 AudioUnit，需要通过 AudioSession 来开启硬件设备以及对硬件设备做一些设置，然后才能使用 AudioUnit</p>
<ol>
<li>获取 AVAudioSession 实例</li>
<li>为 AVAudioSession 设置类别，录音的同时为用户输送监听耳返，类别使用 AVAudioSessionCategoryPlayAndRecord，</li>
<li>为 AVAudioSession 设置预设采样率</li>
<li>启用 AVAudioSession</li>
<li>为 AVAudioSession 设置路由监听，采集音频或视频输出的路线发生变化时（比如拔出耳机、蓝牙设备连接成功）回调此方法，以便可以重新设置使用当前最新的麦克风或扬声器</li>
</ol>
<p>接下来构造应用所使用的 AUGraph，因为这里要使用录音功能，所以需要启用RemoteIO这个AudioUnit 的InputElement。RemoteIO 这个 AudioUnit 比较特别，Input-Element实际 上使用的是麦克风，而OutputElement使用的则是扬声器，所以这里首先 会启用 RemoteIOUnit 的 InputElement。</p>
<p>为了支持所开发的App可以在后续 Mix 一轨伴奏这一扩展功能，在AUGraph中需要增加 MultiChannelMixer 这个 AudioUnit。由于每个 AudioUnit 的输入输出格式并不相同，所以这 里还要使用AudioConvert这个AudioUnit将输入的AudioUnit连接到  MixerUnit上。最终将 MixerUnit 连接到 RemoteIO 这个 AudioUnit 的 OutputElement，将声音发送到耳机的扬声器中(如果直接发送到手机的 扬声器中就会出现啸叫)，这样就将 AUGraph 整体地建立起来了</p>
<p><img src="/2021/08/03/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/01.png" alt="01"></p>
<p><a href="https://developer.apple.com/library/archive/documentation/Audio/Conceptual/AudioSessionProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007875">Audio Session Programming Guide</a></p>
<p><a href="https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/ConstructingAudioUnitApps/ConstructingAudioUnitApps.html#//apple_ref/doc/uid/TP40009492-CH16-SW1">Audio Unit Hosting Guide for iOS</a></p>
<p><a href="https://github.com/zhanxiaokai/iOS-AudioRecorder">音频采集代码 AudioRecorder</a></p>
<p><a href="https://github.com/zhanxiaokai?tab=repositories">音视频进阶开发指南源码</a></p>
]]></content>
  </entry>
  <entry>
    <title>《Flutter实战第二版》六：可滚动组件</title>
    <url>/2022/01/18/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%AD%EF%BC%9A%E5%8F%AF%E6%BB%9A%E5%8A%A8%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="6-可滚动组件"><a href="#6-可滚动组件" class="headerlink" title="6 可滚动组件"></a>6 可滚动组件</h3><h5 id="6-1-可滚动组件"><a href="#6-1-可滚动组件" class="headerlink" title="6.1 可滚动组件"></a>6.1 可滚动组件</h5><p>Flutter 中有两种布局模型<br>基于 RenderBox 的盒模型布局<br>基于 Sliver（RenderSliver）按需加载列表布局</p>
<p>Flutter 中的可滚动主要由三个角色组成：Scollable、Viewport 和 Sliver<br>Scollable 用于处理滑动手势，确定滑动偏移，滑动偏移时构建 Viewport<br>Viewport 显示的视窗，即列表的可视区域<br>Sliver 视窗里显示的元素</p>
<ul>
<li>布局过程</li>
</ul>
<p>Scrollable 监听到用户滑动行为后，根据最新的滑动偏移构建 Viewport</p>
<p>Viewport 将当前视口信息和配置信息通过 SliverConstraints 传递给 Sliver</p>
<p>Sliver 中对子组件（RenderBox）按需进行构建和布局，然后确认自身的位置、绘制等信息，保存在 geometry 中（一个 SliverGeometry 类型的对象）</p>
<ul>
<li>Scrollable</li>
</ul>
<p>用于处理滑动手势，确定滑动偏移，滑动偏移变化时构建 Viewport</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Scrollable(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">this</span>.axisDirection = AxisDirection.down, <span class="comment">//滚动方向</span></span><br><span class="line">  <span class="keyword">this</span>.controller,</span><br><span class="line">  <span class="keyword">this</span>.physics,</span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">this</span>.viewportBuilder, <span class="comment">//后面介绍</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>physics</code> 接受一个 ScrollPhysics 类型的对象，决定可滚动组件如何响应用户操作</p>
<p>比如用户滑动完抬起手指后，继续执行动画；或者滑动到边界时如何显示，默认情况下，Flutter会根据平台分别使用不同 ScrollPhysics 对象，应用不同效果，如滑动到边界时，继续拖动，iOS上会出现弹性效果，Android上会出现微光效果</p>
<p>Flutter SDK中包含两个 ScrollPhysics 的子类</p>
<p>ClampingScrollPhysics 列表滑动到边界时将不能继续滑动，通常Android中配合GlowingOverscrollIndicator （实现微光效果的组件）使用</p>
<p>BouncingScrollPhysics iOS 下弹性效果</p>
<p><code>controller</code>  接受一个 ScrollController 对象，主要作用是控制滚动位置和监听滚动事件</p>
<p><code>viewportBuilder</code> 构建 Viewport 的回调，用户滑动时，Scrollable 会调用此回调构建新的 Viewport</p>
<ul>
<li>Viewport</li>
</ul>
<p>用于渲染当前视口中需要显示 Sliver</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Viewport(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  <span class="keyword">this</span>.axisDirection = AxisDirection.down,</span><br><span class="line">  <span class="keyword">this</span>.crossAxisDirection,</span><br><span class="line">  <span class="keyword">this</span>.anchor = <span class="number">0.0</span>,</span><br><span class="line">  <span class="keyword">required</span> ViewportOffset offset, <span class="comment">// 用户的滚动偏移</span></span><br><span class="line">  <span class="comment">// 类型为Key，表示从什么地方开始绘制，默认是第一个元素</span></span><br><span class="line">  <span class="keyword">this</span>.center,</span><br><span class="line">  <span class="keyword">this</span>.cacheExtent, <span class="comment">// 预渲染区域</span></span><br><span class="line">  <span class="comment">//该参数用于配合解释cacheExtent的含义，也可以为主轴长度的乘数</span></span><br><span class="line">  <span class="keyword">this</span>.cacheExtentStyle = CacheExtentStyle.pixel, </span><br><span class="line">  <span class="keyword">this</span>.clipBehavior = Clip.hardEdge,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; slivers = <span class="keyword">const</span> &lt;Widget&gt;[], <span class="comment">// 需要显示的 Sliver 列表</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>offset：该参数为 Scrollable 构建 Viewport 时传入，描述了 Viewport 应该显示哪一部分内容</p>
<p>cacheExtentStyle：是个枚举，有 pixel 和 viewport 两个取值，为 pixel 时，cacheExtent 的值为预渲染区域的具体像素长度，为 viewport 时，cacheExtent 的值是一个乘数，表示有几个 viewport 的长度</p>
<ul>
<li>Sliver</li>
</ul>
<p>Sliver 主要作用是对子组件进行构建和布局</p>
<ul>
<li>可滚动组件通用配置</li>
</ul>
<p>几乎所有的可滚动组件在构造时都能指定 scrollDirection（滚动的主轴）reverse（滑动方向是否反向）controller、physics、cacheExtent</p>
<ul>
<li>Scrollbar</li>
</ul>
<p>滚动条，如果要给滚动组件添加滚动条，只需将 Scrollbar 作为可滚动组件的任意一个父级组件即可</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Scrollbar(</span><br><span class="line">  child: SingleChildScrollView(</span><br><span class="line">    ...</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="6-2-SingleChildScrollView"><a href="#6-2-SingleChildScrollView" class="headerlink" title="6.2 SingleChildScrollView"></a>6.2 SingleChildScrollView</h4><p>SingleChildScrollView 类似 Android 中的 ScrollView</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">SingleChildScrollView(&#123;</span><br><span class="line">  <span class="keyword">this</span>.scrollDirection = Axis.vertical, <span class="comment">//滚动方向，默认是垂直方向</span></span><br><span class="line">  <span class="keyword">this</span>.reverse = <span class="keyword">false</span>, </span><br><span class="line">  <span class="keyword">this</span>.padding, </span><br><span class="line">  <span class="built_in">bool</span> primary, </span><br><span class="line">  <span class="keyword">this</span>.physics, </span><br><span class="line">  <span class="keyword">this</span>.controller,</span><br><span class="line">  <span class="keyword">this</span>.child,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>primary 属性：表示是否使用 widget 树中默认的 PrimaryScrollController</p>
<p>通常 SingleChildScrollView 只应在期望的内容不会超过屏幕太多的时候使用，因为 SingleChildScrollView 不支持基于 Sliver 的延迟加载模型</p>
<p>例如：将大写字母 A-Z 沿垂直方向显示，垂直方向空间会超过屏幕视口高度，使用 SingleChildScrollView</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleChildScrollViewTestRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">String</span> str = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> Scrollbar( <span class="comment">// 显示进度条</span></span><br><span class="line">      child: SingleChildScrollView(</span><br><span class="line">        padding: EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">        child: Center(</span><br><span class="line">          child: Column( </span><br><span class="line">            <span class="comment">//动态创建一个List&lt;Widget&gt;  </span></span><br><span class="line">            children: str.split(<span class="string">&quot;&quot;</span>) </span><br><span class="line">                <span class="comment">//每一个字母都用一个Text显示,字体为原来的两倍</span></span><br><span class="line">                .map((c) =&gt; Text(c, textScaleFactor: <span class="number">2.0</span>,)) </span><br><span class="line">                .toList(),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/WeChat6f1348f5e3cb71768b5c796b10ce1e55.png" alt="WeChat6f1348f5e3cb71768b5c796b10ce1e55" style="zoom:80%;" />

<h4 id="6-3-ListView"><a href="#6-3-ListView" class="headerlink" title="6.3 ListView"></a>6.3 ListView</h4><p>最常用可滚动组件之一，可以沿一个方向排布所有子组件，支持列表懒加载</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ListView(&#123;</span><br><span class="line">  ...  </span><br><span class="line">  <span class="comment">//可滚动widget公共参数</span></span><br><span class="line">  Axis scrollDirection = Axis.vertical,</span><br><span class="line">  <span class="built_in">bool</span> reverse = <span class="keyword">false</span>,</span><br><span class="line">  ScrollController? controller,</span><br><span class="line">  <span class="built_in">bool?</span> primary,</span><br><span class="line">  ScrollPhysics? physics,</span><br><span class="line">  EdgeInsetsGeometry? padding,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//ListView各个构造函数的共同参数  </span></span><br><span class="line">  <span class="built_in">double?</span> itemExtent,</span><br><span class="line">  Widget? prototypeItem, <span class="comment">//列表项原型，后面解释</span></span><br><span class="line">  <span class="built_in">bool</span> shrinkWrap = <span class="keyword">false</span>,</span><br><span class="line">  <span class="built_in">bool</span> addAutomaticKeepAlives = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">bool</span> addRepaintBoundaries = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">double?</span> cacheExtent, <span class="comment">// 预渲染区域长度</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">//子widget列表</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>itemExtent：参数如果不为 null，则会强制 children 的长度为 itemExtent 的值，长度指滚动方向上子组件的长度</p>
<p>prototypeItem：如果我们知道列表中的所有列表项长度都相同但不知道具体是多少，我们可以指定一个列表项，这个列表项为 prototypeItem（列表项原型），和 itemExtent 互斥</p>
<p>ShrinkWrap：是否跟进子组件总长度来设置 ListView 的长度，默认 false；默认情况下，ListView 会在滚动方向尽可能多的占用空间，当 ListView 在一个无边界（滚动向上）的容器中时，必须为 true</p>
<p>addAutomaticKeepAlives</p>
<p>addRepaintBoundaries</p>
<h5 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h5><p>默认构造函数有一个 children 参数，接受一个 Widget 列表，这种方式适合只有少量的子组件数量已知且比较少的情况，反之使用 ListView.builder 按需动态构建列表</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ListView(</span><br><span class="line">  shrinkWrap: <span class="keyword">true</span>, </span><br><span class="line">  padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    <span class="keyword">const</span> Text(<span class="string">&#x27;I\&#x27;m dedicating every day to you&#x27;</span>),</span><br><span class="line">    <span class="keyword">const</span> Text(<span class="string">&#x27;Domestic life was never quite my style&#x27;</span>),</span><br><span class="line">    <span class="keyword">const</span> Text(<span class="string">&#x27;When you smile, you knock me out, I fall apart&#x27;</span>),</span><br><span class="line">    <span class="keyword">const</span> Text(<span class="string">&#x27;And I thought I was so smart&#x27;</span>),</span><br><span class="line">  ],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="ListView-builder"><a href="#ListView-builder" class="headerlink" title="ListView.builder"></a>ListView.builder</h5><p>适合列表项比较多或者列表项不确定的情况</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ListView.builder(&#123;</span><br><span class="line">  <span class="comment">// ListView公共参数已省略  </span></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">required</span> IndexedWidgetBuilder itemBuilder,</span><br><span class="line">  <span class="built_in">int</span> itemCount,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>itemBuilder：是列表项的构造器</p>
<ul>
<li>例子</li>
</ul>
<p>itemCount 列表项数量，为null则为无限列表</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ListView.builder(</span><br><span class="line">  itemCount: <span class="number">100</span>,</span><br><span class="line">  itemExtent: <span class="number">50.0</span>, <span class="comment">//强制高度为50.0</span></span><br><span class="line">  itemBuilder: (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListTile(title: Text(<span class="string">&quot;<span class="subst">$index</span>&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/WeChatd89bad409c79874b042dc4ffbed29249.png" alt="WeChatd89bad409c79874b042dc4ffbed29249" style="zoom:80%;" />

<h5 id="ListView-separated"><a href="#ListView-separated" class="headerlink" title="ListView.separated"></a>ListView.separated</h5><p>可以在生成的列表项之间加一个分割组件，比 ListView.builder 多了一个 separatedBuilder 参数，是一个分割组件生成器</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListView3</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//下划线widget预定义以供复用。  </span></span><br><span class="line">    Widget divider1=Divider(color: Colors.blue,);</span><br><span class="line">    Widget divider2=Divider(color: Colors.green);</span><br><span class="line">    <span class="keyword">return</span> ListView.separated(</span><br><span class="line">      itemCount: <span class="number">100</span>,</span><br><span class="line">      <span class="comment">//列表项构造器</span></span><br><span class="line">      itemBuilder: (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">        <span class="keyword">return</span> ListTile(title: Text(<span class="string">&quot;<span class="subst">$index</span>&quot;</span>));</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//分割器构造器</span></span><br><span class="line">      separatorBuilder: (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">        <span class="keyword">return</span> index%<span class="number">2</span>==<span class="number">0</span>?divider1:divider2;</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/WeChat5ceee9697183ace9c3a29f3a4ca3973e.png" alt="WeChat5ceee9697183ace9c3a29f3a4ca3973e" style="zoom:80%;" />

<h5 id="固定高度列表"><a href="#固定高度列表" class="headerlink" title="固定高度列表"></a>固定高度列表</h5><p>给列表指定 itemExtent 或 prototypeItem 会有更高的性能，在知道列表项的高度都相同时，强烈建议指定 itemExtent 或 prototypeItem</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FixedExtentList</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> FixedExtentList(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.builder(</span><br><span class="line">   		prototypeItem: ListTile(title: Text(<span class="string">&quot;1&quot;</span>)),</span><br><span class="line">      <span class="comment">//itemExtent: 56,</span></span><br><span class="line">      itemBuilder: (context, index) &#123;</span><br><span class="line">        <span class="comment">//LayoutLogPrint是一个自定义组件，在布局时可以打印当前上下文中父组件给子组件的约束信息</span></span><br><span class="line">        <span class="keyword">return</span> LayoutLogPrint(</span><br><span class="line">          tag: index, </span><br><span class="line">          child: ListTile(title: Text(<span class="string">&quot;<span class="subst">$index</span>&quot;</span>)),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="无限加载列表"><a href="#无限加载列表" class="headerlink" title="无限加载列表"></a>无限加载列表</h5><p>从数据源异步分批次拉取数据，用 ListView 展示，当滑动到列表末尾时，判断是否需要去拉取数据，如果是，则去拉取，拉取过程中表尾显示一个 loading，拉取成功后将数据插入表尾，如果不需要拉取，则表尾显示没有更多</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:english_words/english_words.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/rendering.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InfiniteListView</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _InfiniteListViewState createState() =&gt; _InfiniteListViewState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_InfiniteListViewState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">InfiniteListView</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> loadingTag = <span class="string">&quot;##loading##&quot;</span>; <span class="comment">//表尾标记</span></span><br><span class="line">  <span class="keyword">var</span> _words = &lt;<span class="built_in">String</span>&gt;[loadingTag];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _retrieveData();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.separated(</span><br><span class="line">      itemCount: _words.length,</span><br><span class="line">      itemBuilder: (context, index) &#123;</span><br><span class="line">        <span class="comment">//如果到了表尾</span></span><br><span class="line">        <span class="keyword">if</span> (_words[index] == loadingTag) &#123;</span><br><span class="line">          <span class="comment">//不足100条，继续获取数据</span></span><br><span class="line">          <span class="keyword">if</span> (_words.length - <span class="number">1</span> &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="comment">//获取数据</span></span><br><span class="line">            _retrieveData();</span><br><span class="line">            <span class="comment">//加载时显示loading</span></span><br><span class="line">            <span class="keyword">return</span> Container(</span><br><span class="line">              padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">              alignment: Alignment.center,</span><br><span class="line">              child: SizedBox(</span><br><span class="line">                width: <span class="number">24.0</span>,</span><br><span class="line">                height: <span class="number">24.0</span>,</span><br><span class="line">                child: CircularProgressIndicator(strokeWidth: <span class="number">2.0</span>),</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//已经加载了100条数据，不再获取数据。</span></span><br><span class="line">            <span class="keyword">return</span> Container(</span><br><span class="line">              alignment: Alignment.center,</span><br><span class="line">              padding: EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">              child: Text(</span><br><span class="line">                <span class="string">&quot;没有更多了&quot;</span>,</span><br><span class="line">                style: TextStyle(color: Colors.grey),</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//显示单词列表项</span></span><br><span class="line">        <span class="keyword">return</span> ListTile(title: Text(_words[index]));</span><br><span class="line">      &#125;,</span><br><span class="line">      separatorBuilder: (context, index) =&gt; Divider(height: <span class="number">.0</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _retrieveData() &#123;</span><br><span class="line">    Future.delayed(<span class="built_in">Duration</span>(seconds: <span class="number">2</span>)).then((e) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        <span class="comment">//重新构建列表</span></span><br><span class="line">        _words.insertAll(</span><br><span class="line">          _words.length - <span class="number">1</span>,</span><br><span class="line">          <span class="comment">//每次生成20个单词</span></span><br><span class="line">          generateWordPairs().take(<span class="number">20</span>).map((e) =&gt; e.asPascalCase).toList(),</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/WeChat4aceb0db67ca479d945b472396307dd9.png" alt="WeChat4aceb0db67ca479d945b472396307dd9" style="zoom:80%;" />

<p>_retrieveData 是模拟从数据源异步获取数据，使用 english_words 包的 generateWordPairs 方法每次生成 20 个单词</p>
<h5 id="添加固定表头"><a href="#添加固定表头" class="headerlink" title="添加固定表头"></a>添加固定表头</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Column(children: &lt;Widget&gt;[</span><br><span class="line">    ListTile(title:Text(<span class="string">&quot;商品列表&quot;</span>)),</span><br><span class="line">    Expanded(</span><br><span class="line">      child: ListView.builder(itemBuilder: (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">        <span class="keyword">return</span> ListTile(title: Text(<span class="string">&quot;<span class="subst">$index</span>&quot;</span>));</span><br><span class="line">      &#125;),</span><br><span class="line">    ),</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自动拉伸 ListView 以填充屏幕剩余空间</p>
<h4 id="6-4-滚动监听及控制"><a href="#6-4-滚动监听及控制" class="headerlink" title="6.4 滚动监听及控制"></a>6.4 滚动监听及控制</h4><h5 id="6-4-1-ScrollController"><a href="#6-4-1-ScrollController" class="headerlink" title="6.4.1 ScrollController"></a>6.4.1 ScrollController</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ScrollController(&#123;</span><br><span class="line">  <span class="built_in">double</span> initialScrollOffset = <span class="number">0.0</span>, <span class="comment">//初始滚动位置</span></span><br><span class="line">  <span class="keyword">this</span>.keepScrollOffset = <span class="keyword">true</span>,<span class="comment">//是否保存滚动位置</span></span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>ScrollController 常用属性和方法</p>
<p>offset：可滚动组件当前的滚动位置</p>
<p>jumpTo(double offset)、animateTo(double offset, …)：这两个方法用于跳转到指定的位置</p>
<ul>
<li>滚动监听</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">controller.addListener(()=&gt;<span class="built_in">print</span>(controller.offset))</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<p>创建一个 ListView，滚动位置发生变化时，打印当前滚动位置，判断超过 1000 像素，屏幕右下角显示返回顶部按钮，按钮点击恢复到初始位置；没超过 1000 像素，隐藏按钮</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollControllerTestRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  ScrollControllerTestRouteState createState() &#123;</span><br><span class="line">    <span class="keyword">return</span> ScrollControllerTestRouteState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollControllerTestRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ScrollControllerTestRoute</span>&gt; </span>&#123;</span><br><span class="line">  ScrollController _controller = ScrollController();</span><br><span class="line">  <span class="built_in">bool</span> showToTopBtn = <span class="keyword">false</span>; <span class="comment">//是否显示“返回到顶部”按钮</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">//监听滚动事件，打印滚动位置</span></span><br><span class="line">    _controller.addListener(() &#123;</span><br><span class="line">      <span class="built_in">print</span>(_controller.offset); <span class="comment">//打印滚动位置</span></span><br><span class="line">      <span class="keyword">if</span> (_controller.offset &lt; <span class="number">1000</span> &amp;&amp; showToTopBtn) &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          showToTopBtn = <span class="keyword">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_controller.offset &gt;= <span class="number">1000</span> &amp;&amp; showToTopBtn == <span class="keyword">false</span>) &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          showToTopBtn = <span class="keyword">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="comment">//为了避免内存泄露，需要调用_controller.dispose</span></span><br><span class="line">    _controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&quot;滚动控制&quot;</span>)),</span><br><span class="line">      body: Scrollbar(</span><br><span class="line">        child: ListView.builder(</span><br><span class="line">          itemCount: <span class="number">100</span>,</span><br><span class="line">          itemExtent: <span class="number">50.0</span>, <span class="comment">//列表项高度固定时，显式指定高度是一个好习惯(性能消耗小)</span></span><br><span class="line">          controller: _controller,</span><br><span class="line">          itemBuilder: (context, index) &#123;</span><br><span class="line">            <span class="keyword">return</span> ListTile(title: Text(<span class="string">&quot;<span class="subst">$index</span>&quot;</span>),);</span><br><span class="line">          &#125;</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: !showToTopBtn ? <span class="keyword">null</span> : FloatingActionButton(</span><br><span class="line">        child: Icon(Icons.arrow_upward),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          <span class="comment">//返回到顶部时执行动画</span></span><br><span class="line">          _controller.animateTo(</span><br><span class="line">            <span class="number">.0</span>,</span><br><span class="line">            duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">200</span>),</span><br><span class="line">            curve: Curves.ease,</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/WeChat42973799693e4227480a0cc11ab05bd7.png" alt="WeChat42973799693e4227480a0cc11ab05bd7" style="zoom:80%;" />

<ul>
<li>滚动位置恢复</li>
</ul>
<p>PageStorage 是一个用于保存页面（路由）相关数据的组件，是一个功能型组件，拥有一个存储桶，子树中的widget可以通过指定不同的 PageStorageKey 来存储各自的数据或状态</p>
<p>每次滚动结束，可滚动组件都会将滚动位置 offset 存储到 PageStorage 中</p>
<p>如果 ScrollController.keepScrollOffset 为 false，则滚动位置将不会被存储</p>
<p>多个可滚动组件时，显示指定 PageStorageKey</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ListView(key: PageStorageKey(<span class="number">1</span>), ... );</span><br><span class="line">...</span><br><span class="line">ListView(key: PageStorageKey(<span class="number">2</span>), ... );</span><br></pre></td></tr></table></figure>

<ul>
<li>ScrollPosition</li>
</ul>
<p>ScrollPosition 是用来保存可滚动组件的滚动位置的，一个 ScrollController 对象可以同时被多个可滚动组件使用，ScrollController 会为每个可滚动组件创建一个 ScrollPosition 对象，这些 ScrollPosition 保存在 ScrollController 的 positions 属性中</p>
<p>offset</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">double</span> <span class="keyword">get</span> offset =&gt; position.pixels;</span><br><span class="line">...</span><br><span class="line">controller.positions.elementAt(<span class="number">0</span>).pixels</span><br><span class="line">controller.positions.elementAt(<span class="number">1</span>).pixels</span><br><span class="line">...    </span><br></pre></td></tr></table></figure>

<p>controller.positions.length 来确定 controller 被几个可滚动组件使用</p>
<ul>
<li>ScrollPosition 的方法</li>
</ul>
<p>ScrollPosition 两个常用方法 animateTo() 和 jumpTo()，控制跳转滚动位置的方法</p>
<h5 id="6-4-2-滚动监听"><a href="#6-4-2-滚动监听" class="headerlink" title="6.4.2 滚动监听"></a>6.4.2 滚动监听</h5><p>Flutter widget 树中，子 widget 可以通过发送通知与父（包括祖先）widget 通信，父 widget 通过 NotificationListener 组件监听自己关注的通知</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollNotificationTestRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ScrollNotificationTestRouteState createState() =&gt; _ScrollNotificationTestRouteState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ScrollNotificationTestRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ScrollNotificationTestRoute</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> _progress = <span class="string">&#x27;0%&#x27;</span>;<span class="comment">//保存进度百分比</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Scrollbar(<span class="comment">//进度条，监听滚动通知</span></span><br><span class="line">          child: NotificationListener(</span><br><span class="line">              onNotification: (ScrollNotification notification) &#123;</span><br><span class="line">                <span class="built_in">double</span> progress = notification.metrics.pixels / notification.metrics.maxScrollExtent;</span><br><span class="line">                setState(() &#123;</span><br><span class="line">                  <span class="keyword">var</span> value = (progress * <span class="number">100</span>).toInt();</span><br><span class="line">                  <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$value</span>%, <span class="subst">$progress</span>&quot;</span>);</span><br><span class="line">                  _progress = <span class="string">&quot;<span class="subst">$value</span>%&quot;</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">// print(progress);</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">              &#125;,</span><br><span class="line">              child: Stack(</span><br><span class="line">                alignment: Alignment.center,</span><br><span class="line">                children: [</span><br><span class="line">                  ListView.builder(</span><br><span class="line">                    itemCount: <span class="number">100</span>,</span><br><span class="line">                    itemExtent: <span class="number">50.0</span>,</span><br><span class="line">                    itemBuilder: (context, index) =&gt; ListTile(title: Text(<span class="string">&#x27;<span class="subst">$index</span>&#x27;</span>)),</span><br><span class="line">                  ),</span><br><span class="line">                  CircleAvatar(</span><br><span class="line">                    radius: <span class="number">30.0</span>,</span><br><span class="line">                    child: Text(_progress),</span><br><span class="line">                    backgroundColor: Colors.black54,</span><br><span class="line">                  ),</span><br><span class="line">                ],</span><br><span class="line">              )</span><br><span class="line">          )</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/WeChat5139ec30bc349c3ef1280b60d76c0f9e.png" alt="WeChat5139ec30bc349c3ef1280b60d76c0f9e" style="zoom:80%;" />

<p>接收到滚动事件时，参数类型为 ScrollNotification，包括一个 metrics 属性，类型是 ScrollMetrics</p>
<p>该属性包含当前 ViewPort 及滚动位置等信息</p>
<p>pixels：当前滚动位置<br>maxScrollPosition：最大可滚动长度<br>extentBefore：滑出ViewPort顶部的长度，相当于顶部滑出屏幕上方的列表长度<br>extentInside：ViewPort内部长度，相当于屏幕显示的列表长度<br>extentAfter：列表中未滑入ViewPort部分的长度<br>atEdge：是否滑到了可滚动组件的边界</p>
<h4 id="6-5-AnimatedList"><a href="#6-5-AnimatedList" class="headerlink" title="6.5 AnimatedList"></a>6.5 AnimatedList</h4><p>AnimatedList 和 ListView 的功能大体相似，AnimatedList 可以在列表中插入或删除节点时执行一个动画</p>
<ul>
<li>示例</li>
</ul>
<p>点击底部 + 号向列表追加一个列表项，点击列表项删除按钮，删除该列表项，添加和删除分别执行指定的动画</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimatedListRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> AnimatedListRoute(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _AnimatedListRouteState createState() =&gt; _AnimatedListRouteState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AnimatedListRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AnimatedListRoute</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = &lt;<span class="built_in">String</span>&gt;[];</span><br><span class="line">  <span class="built_in">int</span> counter = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> globalKey = GlobalKey&lt;AnimatedListState&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; counter; i++) &#123;</span><br><span class="line">      data.add(<span class="string">&#x27;<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Stack(</span><br><span class="line">      children: [</span><br><span class="line">        AnimatedList(</span><br><span class="line">          key: globalKey,</span><br><span class="line">          initialItemCount: data.length,</span><br><span class="line">          itemBuilder: (</span><br><span class="line">            BuildContext context,</span><br><span class="line">            <span class="built_in">int</span> index,</span><br><span class="line">            Animation&lt;<span class="built_in">double</span>&gt; animation,</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="comment">//添加列表项时会执行渐显动画</span></span><br><span class="line">            <span class="keyword">return</span> FadeTransition(</span><br><span class="line">              opacity: animation,</span><br><span class="line">              child: buildItem(context, index),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">        buildAddBtn(),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个 “+” 按钮，点击后会向列表中插入一项</span></span><br><span class="line">  Widget buildAddBtn() &#123;</span><br><span class="line">    <span class="keyword">return</span> Positioned(</span><br><span class="line">      child: FloatingActionButton(</span><br><span class="line">        child: Icon(Icons.add),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          <span class="comment">// 添加一个列表项</span></span><br><span class="line">          data.add(<span class="string">&#x27;<span class="subst">$&#123;++counter&#125;</span>&#x27;</span>);</span><br><span class="line">          <span class="comment">// 告诉列表项有新添加的列表项</span></span><br><span class="line">          globalKey.currentState!.insertItem(data.length - <span class="number">1</span>);</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;添加 <span class="subst">$counter</span>&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">      bottom: <span class="number">30</span>,</span><br><span class="line">      left: <span class="number">0</span>,</span><br><span class="line">      right: <span class="number">0</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建列表项</span></span><br><span class="line">  Widget buildItem(context, index) &#123;</span><br><span class="line">    <span class="built_in">String</span> char = data[index];</span><br><span class="line">    <span class="keyword">return</span> ListTile(</span><br><span class="line">      <span class="comment">//数字不会重复，所以作为Key</span></span><br><span class="line">      key: ValueKey(char),</span><br><span class="line">      title: Text(char),</span><br><span class="line">      trailing: IconButton(</span><br><span class="line">        icon: Icon(Icons.delete),</span><br><span class="line">        <span class="comment">// 点击时删除</span></span><br><span class="line">        onPressed: () =&gt; onDelete(context, index),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> onDelete(context, index) &#123;</span><br><span class="line">    <span class="comment">// 待实现</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>删除 onDelete 执行渐隐+收缩组合动画</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">setState(() &#123;</span><br><span class="line">  globalKey.currentState!.removeItem(</span><br><span class="line">    index,</span><br><span class="line">    (context, animation) &#123;</span><br><span class="line">      <span class="comment">// 删除过程执行的是反向动画，animation.value 会从1变为0</span></span><br><span class="line">      <span class="keyword">var</span> item = buildItem(context, index);</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;删除 <span class="subst">$&#123;data[index]&#125;</span>&#x27;</span>);</span><br><span class="line">      data.removeAt(index);</span><br><span class="line">      <span class="comment">// 删除动画是一个合成动画：渐隐 + 缩小列表项告诉</span></span><br><span class="line">      <span class="keyword">return</span> FadeTransition(</span><br><span class="line">        opacity: CurvedAnimation(</span><br><span class="line">          parent: animation,</span><br><span class="line">          <span class="comment">//让透明度变化的更快一些</span></span><br><span class="line">          curve: <span class="keyword">const</span> Interval(<span class="number">0.5</span>, <span class="number">1.0</span>),</span><br><span class="line">        ),</span><br><span class="line">        <span class="comment">// 不断缩小列表项的高度</span></span><br><span class="line">        child: SizeTransition(</span><br><span class="line">          sizeFactor: animation,</span><br><span class="line">          axisAlignment: <span class="number">0.0</span>,</span><br><span class="line">          child: item,</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">    duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">200</span>), <span class="comment">// 动画时间为 200 ms</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/WeChat11c3ca4197d326442fed540c599a1cd8.png" alt="WeChat11c3ca4197d326442fed540c599a1cd8" style="zoom:80%;" />

<h4 id="6-6-GridView"><a href="#6-6-GridView" class="headerlink" title="6.6 GridView"></a>6.6 GridView</h4><p>GridView 可以构建一个二维网格列表</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">GridView(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    Axis scrollDirection = Axis.vertical,</span><br><span class="line">    <span class="built_in">bool</span> reverse = <span class="keyword">false</span>,</span><br><span class="line">    ScrollController? controller,</span><br><span class="line">    <span class="built_in">bool?</span> primary,</span><br><span class="line">    ScrollPhysics? physics,</span><br><span class="line">    <span class="built_in">bool</span> shrinkWrap = <span class="keyword">false</span>,</span><br><span class="line">    EdgeInsetsGeometry? padding,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.gridDelegate,  <span class="comment">//下面解释</span></span><br><span class="line">    <span class="built_in">bool</span> addAutomaticKeepAlives = <span class="keyword">true</span>,</span><br><span class="line">    <span class="built_in">bool</span> addRepaintBoundaries = <span class="keyword">true</span>,</span><br><span class="line">    <span class="built_in">double?</span> cacheExtent, </span><br><span class="line">    <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>gridDelegate 类型是 SliverGridDelegate，作用是控制 GridView 子组件如何排列（layout）</p>
<p>Flutter 提供了 SliverGridDelegate 的子类，SliverGridDelegateWithFixedCrossAxisCount，SliverGridDelegateWithMaxCrossAxisExtent</p>
<ul>
<li>SliverGridDelegateWithFixedCrossAxisCount</li>
</ul>
<p>该子类实现了一个横轴为固定数量子元素的 layout 算法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">SliverGridDelegateWithFixedCrossAxisCount(&#123;</span><br><span class="line">  <span class="meta">@required</span> <span class="built_in">double</span> crossAxisCount,  <span class="comment">//横轴子元素数量</span></span><br><span class="line">  <span class="built_in">double</span> mainAxisSpacing = <span class="number">0.0</span>, <span class="comment">//主轴方向间距</span></span><br><span class="line">  <span class="built_in">double</span> crossAxisSpacing = <span class="number">0.0</span>, <span class="comment">//横轴方向子元素间距</span></span><br><span class="line">  <span class="built_in">double</span> childAspectRatio = <span class="number">1.0</span>, </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>childAspectRatio：子元素在横轴长度和主轴长度的比例</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">GridView(</span><br><span class="line">  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">      crossAxisCount: <span class="number">3</span>, <span class="comment">//横轴三个子widget</span></span><br><span class="line">      childAspectRatio: <span class="number">1.0</span> <span class="comment">//宽高比为1时，子widget</span></span><br><span class="line">  ),</span><br><span class="line">  children:&lt;Widget&gt;[</span><br><span class="line">    Icon(Icons.ac_unit),</span><br><span class="line">    Icon(Icons.airport_shuttle),</span><br><span class="line">    Icon(Icons.all_inclusive),</span><br><span class="line">    Icon(Icons.beach_access),</span><br><span class="line">    Icon(Icons.cake),</span><br><span class="line">    Icon(Icons.free_breakfast)</span><br><span class="line">  ]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/WeChat1903ec58a90f35b79a5be2f22e6d67bb.png" alt="WeChat1903ec58a90f35b79a5be2f22e6d67bb" style="zoom:80%;" />

<p>子元素的大小通过 crossAxisCount 和 childAspectRatio 两个参数共同决定的</p>
<h5 id="GridView-count"><a href="#GridView-count" class="headerlink" title="GridView.count"></a>GridView.count</h5><p>构造函数，通过它可以快速创建横轴固定数量子元素的 GridView，上面代码等价于</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">GridView.count( </span><br><span class="line">  crossAxisCount: <span class="number">3</span>,</span><br><span class="line">  childAspectRatio: <span class="number">1.0</span>,</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Icon(Icons.ac_unit),</span><br><span class="line">    Icon(Icons.airport_shuttle),</span><br><span class="line">    Icon(Icons.all_inclusive),</span><br><span class="line">    Icon(Icons.beach_access),</span><br><span class="line">    Icon(Icons.cake),</span><br><span class="line">    Icon(Icons.free_breakfast),</span><br><span class="line">  ],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>SliverGridDelegateWithMaxCrossAxisExtent</li>
</ul>
<p>该子类实现一个横轴子元素为固定最大长度的 layout 算法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">SliverGridDelegateWithMaxCrossAxisExtent(&#123;</span><br><span class="line">  <span class="built_in">double</span> maxCrossAxisExtent,</span><br><span class="line">  <span class="built_in">double</span> mainAxisSpacing = <span class="number">0.0</span>,</span><br><span class="line">  <span class="built_in">double</span> crossAxisSpacing = <span class="number">0.0</span>,</span><br><span class="line">  <span class="built_in">double</span> childAspectRatio = <span class="number">1.0</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>maxCrossAxisExtent：子元素在横轴上最大长度，横轴方向上每个子元素的长度仍然是等分的</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">GridView(</span><br><span class="line">  padding: EdgeInsets.zero,</span><br><span class="line">  gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(</span><br><span class="line">      maxCrossAxisExtent: <span class="number">120.0</span>,</span><br><span class="line">      childAspectRatio: <span class="number">2.0</span> <span class="comment">//宽高比为2</span></span><br><span class="line">  ),</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Icon(Icons.ac_unit),</span><br><span class="line">    Icon(Icons.airport_shuttle),</span><br><span class="line">    Icon(Icons.all_inclusive),</span><br><span class="line">    Icon(Icons.beach_access),</span><br><span class="line">    Icon(Icons.cake),</span><br><span class="line">    Icon(Icons.free_breakfast),</span><br><span class="line">  ],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/WeChatae018d1dc24fdb3bad25c5536cf3294b.png" alt="WeChatae018d1dc24fdb3bad25c5536cf3294b" style="zoom:80%;" />

<h5 id="GridView-extent"><a href="#GridView-extent" class="headerlink" title="GridView.extent"></a>GridView.extent</h5><p>构造函数，通过它可以快速构建纵轴子元素为固定最大长度的 GridView，上面代码等价于</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">GridView.extent(</span><br><span class="line">   maxCrossAxisExtent: <span class="number">120.0</span>,</span><br><span class="line">   childAspectRatio: <span class="number">2.0</span>,</span><br><span class="line">   children: &lt;Widget&gt;[</span><br><span class="line">     Icon(Icons.ac_unit),</span><br><span class="line">     Icon(Icons.airport_shuttle),</span><br><span class="line">     Icon(Icons.all_inclusive),</span><br><span class="line">     Icon(Icons.beach_access),</span><br><span class="line">     Icon(Icons.cake),</span><br><span class="line">     Icon(Icons.free_breakfast),</span><br><span class="line">   ],</span><br><span class="line"> );</span><br></pre></td></tr></table></figure>

<h5 id="GridView-builder"><a href="#GridView-builder" class="headerlink" title="GridView.builder"></a>GridView.builder</h5><p>上面介绍的都需要一个 widget 数组作为其子元素，适用于子 widget 数量比较少，子 widget 比较多时，可以通过 GridView.builder 来动态构建子 widget</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">GridView.builder(</span><br><span class="line"> ...</span><br><span class="line"> <span class="keyword">required</span> SliverGridDelegate gridDelegate, </span><br><span class="line"> <span class="keyword">required</span> IndexedWidgetBuilder itemBuilder,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<p>异步数据源分批获取 Icon</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InfiniteGridView</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _InfiniteGridViewState createState() =&gt; _InfiniteGridViewState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_InfiniteGridViewState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">InfiniteGridView</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;IconData&gt; _icons = []; <span class="comment">//保存Icon数据</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 初始化数据</span></span><br><span class="line">    _retrieveIcons();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> GridView.builder(</span><br><span class="line">      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">        crossAxisCount: <span class="number">3</span>, <span class="comment">//每行三列</span></span><br><span class="line">        childAspectRatio: <span class="number">1.0</span>, <span class="comment">//显示区域宽高相等</span></span><br><span class="line">      ),</span><br><span class="line">      itemCount: _icons.length,</span><br><span class="line">      itemBuilder: (context, index) &#123;</span><br><span class="line">        <span class="comment">//如果显示到最后一个并且Icon总数小于200时继续获取数据</span></span><br><span class="line">        <span class="keyword">if</span> (index == _icons.length - <span class="number">1</span> &amp;&amp; _icons.length &lt; <span class="number">200</span>) &#123;</span><br><span class="line">          _retrieveIcons();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Icon(_icons[index]);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//模拟异步获取数据</span></span><br><span class="line">  <span class="keyword">void</span> _retrieveIcons() &#123;</span><br><span class="line">    Future.delayed(<span class="built_in">Duration</span>(milliseconds: <span class="number">200</span>)).then((e) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _icons.addAll([</span><br><span class="line">          Icons.ac_unit,</span><br><span class="line">          Icons.airport_shuttle,</span><br><span class="line">          Icons.all_inclusive,</span><br><span class="line">          Icons.beach_access,</span><br><span class="line">          Icons.cake,</span><br><span class="line">          Icons.free_breakfast,</span><br><span class="line">        ]);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>_retrieveIcons() 方法中通过 Future.delayed 模拟异步数据源获取数据，每次获取数据 200 毫秒，调用 setState 重新构建</p>
<h4 id="6-7-PageView-与页面缓存"><a href="#6-7-PageView-与页面缓存" class="headerlink" title="6.7 PageView 与页面缓存"></a>6.7 PageView 与页面缓存</h4><h5 id="6-7-1-PageView"><a href="#6-7-1-PageView" class="headerlink" title="6.7.1 PageView"></a>6.7.1 PageView</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">PageView(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  <span class="keyword">this</span>.scrollDirection = Axis.horizontal, <span class="comment">// 滑动方向</span></span><br><span class="line">  <span class="keyword">this</span>.reverse = <span class="keyword">false</span>,</span><br><span class="line">  PageController? controller,</span><br><span class="line">  <span class="keyword">this</span>.physics,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">  <span class="keyword">this</span>.onPageChanged,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//每次滑动是否强制切换整个页面，如果为false，则会根据实际的滑动距离显示页面</span></span><br><span class="line">  <span class="keyword">this</span>.pageSnapping = <span class="keyword">true</span>,</span><br><span class="line">  <span class="comment">//主要是配合辅助功能用的，后面解释</span></span><br><span class="line">  <span class="keyword">this</span>.allowImplicitScrolling = <span class="keyword">false</span>,</span><br><span class="line">  <span class="comment">//后面解释</span></span><br><span class="line">  <span class="keyword">this</span>.padEnds = <span class="keyword">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Tab 页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Page(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.text,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> text;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _PageState createState() =&gt; _PageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Page</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;build <span class="subst">$&#123;widget.text&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Center(child: Text(<span class="string">&#x27;<span class="subst">$&#123;widget.text&#125;</span>&#x27;</span>, textScaleFactor: <span class="number">5</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建 PageView</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageViewRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> children = &lt;Widget&gt;[];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123; <span class="comment">//生成6个Tab页面</span></span><br><span class="line">      children.add(Page(text: <span class="string">&#x27;<span class="subst">$i</span>&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;标题&#x27;</span>)),</span><br><span class="line">      body: PageView(</span><br><span class="line">        children: children,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后就可以滑动来回切换页面了</p>
<img src="《Flutter实战第二版》六：可滚动组件/WeChat6ff7e4dc572a88cb6f32c91d7b3a5956.png" alt="WeChat6ff7e4dc572a88cb6f32c91d7b3a5956" style="zoom:80%;" />

<h5 id="6-7-2-页面缓存"><a href="#6-7-2-页面缓存" class="headerlink" title="6.7.2 页面缓存"></a>6.7.2 页面缓存</h5><p>上面每当页面切换时都会重新触发 Page 页的 build</p>
<p>allowImplicitScrolling 设置为 true，前后各缓存一个页面宽度</p>
<h4 id="6-8-可滚动组件子项缓存-KeepAlive"><a href="#6-8-可滚动组件子项缓存-KeepAlive" class="headerlink" title="6.8 可滚动组件子项缓存 KeepAlive"></a>6.8 可滚动组件子项缓存 KeepAlive</h4><p>ListView 有一个 addAutomaticKeepAlives 属性如果为 true，则 ListView 会为每一个列表项添加一个 AutomaticKeeyAlive 父组件</p>
<h5 id="6-8-1-AutomaticKeeyAlive"><a href="#6-8-1-AutomaticKeeyAlive" class="headerlink" title="6.8.1 AutomaticKeeyAlive"></a>6.8.1 AutomaticKeeyAlive</h5><p>AutomaticKeeyAlive 组件的主要作用是将列表项的 RenderObject 的 keepAlive 按需自动标记为 true 或 false</p>
<p>将列表组件的 Viewport 区域 + cacheExtent（预渲染区域）称为加载区域</p>
<p>keepAlive 标记为 false 时，如果列表项滑出加载区域时，列表组件将会被销毁</p>
<p>keepAlive 标记为 true 时，当列表项滑出加载区域后，Viewport 会将列表组件缓存起来，当列表项进入加载区域时，Viewport 从先缓存中查找是否已缓存，如果有则复用，没有则重新创建列表项</p>
<ul>
<li>让 PageView 示例实现页面缓存 </li>
</ul>
<p>Flutter 提供了一个 AutomaticKeepAliveClientMixin，只需让 PageState 混入这个 mixin，同时添加一些必要操作即可</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Page</span>&gt; <span class="title">with</span> <span class="title">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> wantKeepAlive =&gt; <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">super</span>.build(context);<span class="comment">//必须调用</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;build <span class="subst">$&#123;widget.text&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Center(child: Text(<span class="string">&#x27;<span class="subst">$&#123;widget.text&#125;</span>&#x27;</span>, textScaleFactor: <span class="number">5</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-8-2-KeepAliveWrapper"><a href="#6-8-2-KeepAliveWrapper" class="headerlink" title="6.8.2 KeepAliveWrapper"></a>6.8.2 KeepAliveWrapper</h5><p>作者分装的组件，如果哪个列表项需要缓存，只需要使用 KeepAliveWrapper 包裹下即可</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">var</span> children = &lt;Widget&gt;[];</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line">    <span class="comment">//只需要用 KeepAliveWrapper 包装一下即可</span></span><br><span class="line">    children.add(KeepAliveWrapper(child:Page( text: <span class="string">&#x27;<span class="subst">$i</span>&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> PageView(children: children);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>KeepAliveWrapper 源码 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeepAliveWrapper</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> KeepAliveWrapper(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">this</span>.keepAlive = <span class="keyword">true</span>,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.child,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">bool</span> keepAlive;</span><br><span class="line">  <span class="keyword">final</span> Widget child;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _KeepAliveWrapperState createState() =&gt; _KeepAliveWrapperState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_KeepAliveWrapperState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">KeepAliveWrapper</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">super</span>.build(context);</span><br><span class="line">    <span class="keyword">return</span> widget.child;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> didUpdateWidget(<span class="keyword">covariant</span> KeepAliveWrapper oldWidget) &#123;</span><br><span class="line">    <span class="keyword">if</span>(oldWidget.keepAlive != widget.keepAlive) &#123;</span><br><span class="line">      <span class="comment">// keepAlive 状态需要更新，实现在 AutomaticKeepAliveClientMixin 中</span></span><br><span class="line">      updateKeepAlive();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">super</span>.didUpdateWidget(oldWidget);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> wantKeepAlive =&gt; widget.keepAlive;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ListView 中测试下 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeepAliveTest</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> KeepAliveTest(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.builder(itemBuilder: (_, index) &#123;</span><br><span class="line">      <span class="keyword">return</span> KeepAliveWrapper(</span><br><span class="line">        <span class="comment">// 为 true 后会缓存所有的列表项，列表项将不会销毁。</span></span><br><span class="line">        <span class="comment">// 为 false 时，列表项滑出预加载区域后将会别销毁。</span></span><br><span class="line">        <span class="comment">// 使用时一定要注意是否必要，因为对所有列表项都缓存的会导致更多的内存消耗</span></span><br><span class="line">        keepAlive: <span class="keyword">true</span>,</span><br><span class="line">        child: ListItem(index: index),</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListItem</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ListItem(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.index&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> index;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ListItemState createState() =&gt; _ListItemState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ListItemState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ListItem</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListTile(title: Text(<span class="string">&#x27;<span class="subst">$&#123;widget.index&#125;</span>&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;dispose <span class="subst">$&#123;widget.index&#125;</span>&#x27;</span>);</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-9-TabBarView"><a href="#6-9-TabBarView" class="headerlink" title="6.9 TabBarView"></a>6.9 TabBarView</h4><h5 id="6-9-1-TabBarView"><a href="#6-9-1-TabBarView" class="headerlink" title="6.9.1 TabBarView"></a>6.9.1 TabBarView</h5><p>TabBarView 封装了 PageView </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> TabBarView(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  required this.children, &#x2F;&#x2F; tab 页</span><br><span class="line">  this.controller, &#x2F;&#x2F; TabController</span><br><span class="line">  this.physics,</span><br><span class="line">  this.dragStartBehavior &#x3D; DragStartBehavior.start,</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>

<p>TabController 用于监听和控制 TabBarView 的页面切换，通常和 TabBar 联动，如果没有指定，则会在组件树中向上查找并使用最近一个 DefaultTabController</p>
<h5 id="6-9-2-TabBar"><a href="#6-9-2-TabBar" class="headerlink" title="6.9.2 TabBar"></a>6.9.2 TabBar</h5><img src="《Flutter实战第二版》六：可滚动组件/image-20210822144239879.02ae3d67.png" alt="image-20210822144239879.02ae3d67" style="zoom: 67%;" />

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TabBar(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">this</span>.tabs, <span class="comment">// 具体的 Tabs，需要我们创建</span></span><br><span class="line">  <span class="keyword">this</span>.controller,</span><br><span class="line">  <span class="keyword">this</span>.isScrollable = <span class="keyword">false</span>, <span class="comment">// 是否可以滑动</span></span><br><span class="line">  <span class="keyword">this</span>.padding,</span><br><span class="line">  <span class="keyword">this</span>.indicatorColor,<span class="comment">// 指示器颜色，默认是高度为2的一条下划线</span></span><br><span class="line">  <span class="keyword">this</span>.automaticIndicatorColorAdjustment = <span class="keyword">true</span>,</span><br><span class="line">  <span class="keyword">this</span>.indicatorWeight = <span class="number">2.0</span>,<span class="comment">// 指示器高度</span></span><br><span class="line">  <span class="keyword">this</span>.indicatorPadding = EdgeInsets.zero, <span class="comment">//指示器padding</span></span><br><span class="line">  <span class="keyword">this</span>.indicator, <span class="comment">// 指示器</span></span><br><span class="line">  <span class="keyword">this</span>.indicatorSize, <span class="comment">// 指示器长度，有两个可选值，一个tab的长度，一个是label长度</span></span><br><span class="line">  <span class="keyword">this</span>.labelColor, </span><br><span class="line">  <span class="keyword">this</span>.labelStyle,</span><br><span class="line">  <span class="keyword">this</span>.labelPadding,</span><br><span class="line">  <span class="keyword">this</span>.unselectedLabelColor,</span><br><span class="line">  <span class="keyword">this</span>.unselectedLabelStyle,</span><br><span class="line">  <span class="keyword">this</span>.mouseCursor,</span><br><span class="line">  <span class="keyword">this</span>.onTap,</span><br><span class="line">  ...</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>

<p>TapBar 通常位于 AppBar 底部，也可以接收一个 TabController</p>
<p>Material 组件库中已实现了一个 Tab 组件，一般会直接使用它 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Tab(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  <span class="keyword">this</span>.text, <span class="comment">//文本</span></span><br><span class="line">  <span class="keyword">this</span>.icon, <span class="comment">// 图标</span></span><br><span class="line">  <span class="keyword">this</span>.iconMargin = <span class="keyword">const</span> EdgeInsets.only(bottom: <span class="number">10.0</span>),</span><br><span class="line">  <span class="keyword">this</span>.height,</span><br><span class="line">  <span class="keyword">this</span>.child, <span class="comment">// 自定义 widget</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="6-9-3-示例"><a href="#6-9-3-示例" class="headerlink" title="6.9.3 示例"></a>6.9.3 示例</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TabViewRoute1</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _TabViewRoute1State createState() =&gt; _TabViewRoute1State();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TabViewRoute1State</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">TabViewRoute1</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> TabController _tabController;</span><br><span class="line">  <span class="built_in">List</span> tabs = [<span class="string">&quot;新闻&quot;</span>, <span class="string">&quot;历史&quot;</span>, <span class="string">&quot;图片&quot;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _tabController = TabController(length: tabs.length, vsync: <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&quot;App Name&quot;</span>),</span><br><span class="line">        bottom: TabBar(</span><br><span class="line">          controller: _tabController,</span><br><span class="line">          tabs: tabs.map((e) =&gt; Tab(text: e)).toList(),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      body: TabBarView( <span class="comment">//构建</span></span><br><span class="line">        controller: _tabController,</span><br><span class="line">        children: tabs.map((e) &#123;</span><br><span class="line">          <span class="keyword">return</span> KeepAliveWrapper(</span><br><span class="line">            child: Container(</span><br><span class="line">              alignment: Alignment.center,</span><br><span class="line">              child: Text(e, textScaleFactor: <span class="number">5</span>),</span><br><span class="line">            ),</span><br><span class="line">          );</span><br><span class="line">        &#125;).toList(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    _tabController.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<img src="《Flutter实战第二版》六：可滚动组件/WeChatfe6ded64a5b41253fae7d920235ca757.png" alt="WeChatfe6ded64a5b41253fae7d920235ca757" style="zoom:80%;" />

<p>为了实现 TabBar 和 TabBarView 的联动，显式创建了一个 TabController，TabController 又需要一个 TickerProvider（vsync参数）我们又混入了 SingleTickerProviderStateMixin ；TabController 中会执行动画，持有一些资源，所以在页面销毁时必须得释放资源</p>
<p>实战中，如果需要 TabBar 和 TabBarView 联动，通常会创建一个 DefaultTabController 作为他们共同的父级组件，这样它们在执行时就会从组件树向上查找，都会使用我们指定的这个 DefaultTabController，修改后如下</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TabViewRoute2</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">List</span> tabs = [<span class="string">&quot;新闻&quot;</span>, <span class="string">&quot;历史&quot;</span>, <span class="string">&quot;图片&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> DefaultTabController(</span><br><span class="line">      length: tabs.length,</span><br><span class="line">      child: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">&quot;App Name&quot;</span>),</span><br><span class="line">          bottom: TabBar(</span><br><span class="line">            tabs: tabs.map((e) =&gt; Tab(text: e)).toList(),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        body: TabBarView( <span class="comment">//构建</span></span><br><span class="line">          children: tabs.map((e) &#123;</span><br><span class="line">            <span class="keyword">return</span> KeepAliveWrapper(</span><br><span class="line">              child: Container(</span><br><span class="line">                alignment: Alignment.center,</span><br><span class="line">                child: Text(e, textScaleFactor: <span class="number">5</span>),</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125;).toList(),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到我们无需去手动管理Controller的生命周期，也不需要提供 SingleTickerProviderStateMixin，同时也没有其它的状态需要管理，也就不需要用 StatefulWidget 了</p>
<h4 id="6-10-CustomScrollView-和-Slivers"><a href="#6-10-CustomScrollView-和-Slivers" class="headerlink" title="6.10 CustomScrollView 和 Slivers"></a>6.10 CustomScrollView 和 Slivers</h4><h5 id="6-10-1-CustomScrollView"><a href="#6-10-1-CustomScrollView" class="headerlink" title="6.10.1 CustomScrollView"></a>6.10.1 CustomScrollView</h5><p>Flutter 提供了一个 CustomScrollView 组件帮助我们创建一个公共的 Scrollable 和 Viewport，然后它的 slivers 参数接受一个 Sliver 数组</p>
<p>加入我们想要在一个页面中，同时包含多个可滚动组件，且使他们的滑动效果统一起来</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget buildTwoSliverList() &#123;</span><br><span class="line">  <span class="comment">// SliverFixedExtentList 是一个 Sliver，它可以生成高度相同的列表项。</span></span><br><span class="line">  <span class="comment">// 再次提醒，如果列表项高度相同，我们应该优先使用SliverFixedExtentList </span></span><br><span class="line">  <span class="comment">// 和 SliverPrototypeExtentList，如果不同，使用 SliverList.</span></span><br><span class="line">  <span class="keyword">var</span> listView = SliverFixedExtentList(</span><br><span class="line">    itemExtent: <span class="number">56</span>, <span class="comment">//列表项高度固定</span></span><br><span class="line">    delegate: SliverChildBuilderDelegate(</span><br><span class="line">      (_, index) =&gt; ListTile(title: Text(<span class="string">&#x27;<span class="subst">$index</span>&#x27;</span>)),</span><br><span class="line">      childCount: <span class="number">10</span>,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 使用</span></span><br><span class="line">  <span class="keyword">return</span> CustomScrollView(</span><br><span class="line">    slivers: [</span><br><span class="line">      listView,</span><br><span class="line">      listView,</span><br><span class="line">    ],</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/combine-twolist.74a615bf.gif" alt="combine-twolist.74a615bf" style="zoom:80%;" />

<h5 id="6-10-2-Flutter-中常用的Sliver"><a href="#6-10-2-Flutter-中常用的Sliver" class="headerlink" title="6.10.2 Flutter 中常用的Sliver"></a>6.10.2 Flutter 中常用的Sliver</h5><table>
<thead>
<tr>
<th>Sliver名称</th>
<th>功能</th>
<th>对应的可滚动组件</th>
</tr>
</thead>
<tbody><tr>
<td>SliverList</td>
<td>列表</td>
<td>ListView</td>
</tr>
<tr>
<td>SliverFixedExtentList</td>
<td>高度固定的列表</td>
<td>ListView，指定<code>itemExtent</code>时</td>
</tr>
<tr>
<td>SliverAnimatedList</td>
<td>添加/删除列表项可以执行动画</td>
<td>AnimatedList</td>
</tr>
<tr>
<td>SliverGrid</td>
<td>网格</td>
<td>GridView</td>
</tr>
<tr>
<td>SliverPrototypeExtentList</td>
<td>根据原型生成高度固定的列表</td>
<td>ListView，指定<code>prototypeItem</code> 时</td>
</tr>
<tr>
<td>SliverFillViewport</td>
<td>包含多给子组件，每个都可以填满屏幕</td>
<td>PageView</td>
</tr>
</tbody></table>
<p>除了和列表对应的 Sliver 之外还有一些用于对 Sliver 进行布局、装饰的组件，<strong>它们的子组件必须是 Sliver</strong>，我们列举几个常用的</p>
<table>
<thead>
<tr>
<th>Sliver名称</th>
<th>对应 RenderBox</th>
</tr>
</thead>
<tbody><tr>
<td>SliverPadding</td>
<td>Padding</td>
</tr>
<tr>
<td>SliverVisibility、SliverOpacity</td>
<td>Visibility、Opacity</td>
</tr>
<tr>
<td>SliverFadeTransition</td>
<td>FadeTransition</td>
</tr>
<tr>
<td>SliverLayoutBuilder</td>
<td>LayoutBuilder</td>
</tr>
</tbody></table>
<p>还有一些其它常用的 Sliver</p>
<table>
<thead>
<tr>
<th>Sliver名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>SliverAppBar</td>
<td>对应 AppBar，主要是为了在 CustomScrollView 中使用。</td>
</tr>
<tr>
<td>SliverToBoxAdapter</td>
<td>一个适配器，可以将 RenderBox 适配为 Sliver，后面介绍。</td>
</tr>
<tr>
<td>SliverPersistentHeader</td>
<td>滑动到顶部时可以固定住，后面介绍。</td>
</tr>
</tbody></table>
<ul>
<li>示例</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为本路由没有使用 Scaffold，为了让子级Widget(如Text)使用</span></span><br><span class="line"><span class="comment">// Material Design 默认的样式风格,我们使用 Material 作为本路由的根。</span></span><br><span class="line">Material(</span><br><span class="line">  child: CustomScrollView(</span><br><span class="line">    slivers: &lt;Widget&gt;[</span><br><span class="line">      <span class="comment">// AppBar，包含一个导航栏.</span></span><br><span class="line">      SliverAppBar(</span><br><span class="line">        pinned: <span class="keyword">true</span>, <span class="comment">// 滑动到顶端时会固定住</span></span><br><span class="line">        expandedHeight: <span class="number">250.0</span>,</span><br><span class="line">        flexibleSpace: FlexibleSpaceBar(</span><br><span class="line">          title: <span class="keyword">const</span> Text(<span class="string">&#x27;Demo&#x27;</span>),</span><br><span class="line">          background: Image.asset(</span><br><span class="line">            <span class="string">&quot;./imgs/sea.png&quot;</span>,</span><br><span class="line">            fit: BoxFit.cover,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      SliverPadding(</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">        sliver: SliverGrid(</span><br><span class="line">          <span class="comment">//Grid</span></span><br><span class="line">          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">            crossAxisCount: <span class="number">2</span>, <span class="comment">//Grid按两列显示</span></span><br><span class="line">            mainAxisSpacing: <span class="number">10.0</span>,</span><br><span class="line">            crossAxisSpacing: <span class="number">10.0</span>,</span><br><span class="line">            childAspectRatio: <span class="number">4.0</span>,</span><br><span class="line">          ),</span><br><span class="line">          delegate: SliverChildBuilderDelegate(</span><br><span class="line">            (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">              <span class="comment">//创建子widget</span></span><br><span class="line">              <span class="keyword">return</span> Container(</span><br><span class="line">                alignment: Alignment.center,</span><br><span class="line">                color: Colors.cyan[<span class="number">100</span> * (index % <span class="number">9</span>)],</span><br><span class="line">                child: Text(<span class="string">&#x27;grid item <span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">            childCount: <span class="number">20</span>,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      SliverFixedExtentList(</span><br><span class="line">        itemExtent: <span class="number">50.0</span>,</span><br><span class="line">        delegate: SliverChildBuilderDelegate(</span><br><span class="line">          (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">            <span class="comment">//创建列表项</span></span><br><span class="line">            <span class="keyword">return</span> Container(</span><br><span class="line">              alignment: Alignment.center,</span><br><span class="line">              color: Colors.lightBlue[<span class="number">100</span> * (index % <span class="number">9</span>)],</span><br><span class="line">              child: Text(<span class="string">&#x27;list item <span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">          childCount: <span class="number">20</span>,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>头部 SliverAppBar：SliverAppBar 对应 APPBar，不同之处在于 SliverAppBar 可以集成到 CustomScrollView， SliverAppBar 可以结合 FlexibleSpaceBar 实现Material Design 中头部伸缩的模型</p>
<p>中间 SliverGrid：它用 SliverPadding 包裹以给 SliverGrid 添加补白。SliverGrid 是一个两列，宽高比为4的网格，它有20个子组件</p>
<p>底部SliverFixedExtentList：它是一个所有子元素高度都为50像素的列表</p>
<img src="《Flutter实战第二版》六：可滚动组件/WeChata2a92923087dac38a2ad6c5e16f9cfb4.png" alt="WeChata2a92923087dac38a2ad6c5e16f9cfb4" style="zoom:80%;" />

<ul>
<li>SliverToBoxAdapter</li>
</ul>
<p>实际布局中，通常需要在 CustomScrollView 中添加一些自定义组件，这些组件并非都有 Sliver 版本，为此 Flutter 提供了一个 SliverToBoxAdapter 组件，是一个适配器，可以将 RenderBox 适配为 Sliver。</p>
<p>比如想在列表顶部加一个可以横向滚动的 PageView，可以使用 SliverToBoxAdapter 来适配</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">CustomScrollView(</span><br><span class="line">  slivers: [</span><br><span class="line">    SliverToBoxAdapter(</span><br><span class="line">      child: SizedBox(</span><br><span class="line">        height: <span class="number">300</span>,</span><br><span class="line">        child: PageView(</span><br><span class="line">          children: [Text(<span class="string">&quot;1&quot;</span>), Text(<span class="string">&quot;2&quot;</span>)],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">    buildSliverFixedList(),</span><br><span class="line">  ],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>SliverPersistentHeader</li>
</ul>
<p>SliverPersistentHeader 的功能是当滑动到 CustomScrollView 的顶部时，可以将组件固定在顶部</p>
<h4 id="6-11-自定义-Sliver"><a href="#6-11-自定义-Sliver" class="headerlink" title="6.11 自定义 Sliver"></a>6.11 自定义 Sliver</h4><h4 id="6-12-嵌套可滚动组件-NestedScrollView"><a href="#6-12-嵌套可滚动组件-NestedScrollView" class="headerlink" title="6.12 嵌套可滚动组件 NestedScrollView"></a>6.12 嵌套可滚动组件 NestedScrollView</h4><p>CustomScrollView 只能组合 Sliver，如果有孩子也是可滚动组件（通过SliverToBoxAdapter嵌入）且他们滑动方向一致时便不能正常工作，解决这个问题 NestedScrollView</p>
]]></content>
  </entry>
  <entry>
    <title>anti</title>
    <url>/2021/12/06/anti/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="f399bcd89cd99dd295add6f637e534163715188e89a01b1e0fd8780ce1bf889c"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-正则表达式</title>
    <url>/2022/04/11/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>正则表达式测试工具 <a href="http://tool.oschina.net/regex/">http://tool.oschina.net/regex/</a></p>
<p>常用匹配规则</p>
<table>
<thead>
<tr>
<th align="left">\w</th>
<th align="left">匹配字母、数字、下划线,等价于[a-zA-Z0-9_]</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\W</td>
<td align="left">匹配不是字母、数字、下划线的其他字符</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">匹配任意空白字符,等价于(\t\n\r\f)</td>
</tr>
<tr>
<td align="left">\S</td>
<td align="left">匹配任意非空字符</td>
</tr>
<tr>
<td align="left">\d</td>
<td align="left">匹配数字,等价于[0-9]</td>
</tr>
<tr>
<td align="left">\D</td>
<td align="left">匹配不是数字的字符</td>
</tr>
<tr>
<td align="left">\A</td>
<td align="left">匹配字符串开头</td>
</tr>
<tr>
<td align="left">\Z</td>
<td align="left">匹配字符串结尾的,如果存在换行,只匹配到换行前的结束字符串</td>
</tr>
<tr>
<td align="left">\z</td>
<td align="left">匹配字符串结尾的,如果存在换行,匹配到换行符\n</td>
</tr>
<tr>
<td align="left">\G</td>
<td align="left">最好完成匹配的位置</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">匹配一个换行符</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">匹配一个制表符(tab)</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">匹配一行字符串的开头</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">匹配一行字符串的结尾</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">匹配任意字符,除了换行符.当re.DOTALL标记被指定时,这可以匹配包括换行符在内的任字符</td>
</tr>
<tr>
<td align="left">[…]</td>
<td align="left">用来表示一组字符,比如[abc]表示匹配a或b或c,[a-z],[0-9]</td>
</tr>
<tr>
<td align="left">[^…]</td>
<td align="left">匹配不在[]里面的字符,比如[^abc]匹配除a,b,c以外的字符</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">匹配0个或多个字符</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">匹配1个或多个字符</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">匹配0个或1个前面的正则表达式片段,(.*?)表示尽可能少地匹配字符</td>
</tr>
<tr>
<td align="left">{n}</td>
<td align="left">匹配前面表达式n次, 如\d{5}表示匹配5个数字</td>
</tr>
<tr>
<td align="left">{n,m}</td>
<td align="left">匹配前面的表达式n到m次,贪婪模式</td>
</tr>
<tr>
<td align="left">a|b</td>
<td align="left">匹配a或者b</td>
</tr>
<tr>
<td align="left">(…)</td>
<td align="left">匹配括号里的表达式,也可以表示一个组</td>
</tr>
</tbody></table>
<h5 id="match-从开头匹配"><a href="#match-从开头匹配" class="headerlink" title="match 从开头匹配"></a>match 从开头匹配</h5><p>match() 方法可以得到匹配到的字符串内容</p>
<p>传入匹配字符串及正则表达式就可以检测这个正则表达式是否匹配字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = <span class="string">&#x27;Hello 123 4567 World_This is a Regex Demo&#x27;</span></span><br><span class="line">print(<span class="built_in">len</span>(content))</span><br><span class="line">result = re.match(<span class="string">&#x27;^Hello\s\d\d\d\s\d&#123;4&#125;\s\w&#123;10&#125;&#x27;</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.span())</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="comment">#41</span></span><br><span class="line"><span class="comment">#&lt;re.Match object; span=(0, 25), match=&#x27;Hello 123 4567 World_This&#x27;&gt;</span></span><br><span class="line"><span class="comment">#Hello 123 4567 World_This</span></span><br><span class="line"><span class="comment">#(0, 25)</span></span><br></pre></td></tr></table></figure>

<p>^ 匹配字符串开头；\s 匹配空白字符串；\d 匹配数字，3个\d 匹配123；\d{4}，{4}代表匹配前面规则4次，4个数字；\w{10} 匹配 10 个字母数字及下划线</p>
<p>group() 方法输出匹配内容，span() 方法输出匹配的范围</p>
<h5 id="匹配目标-group-x"><a href="#匹配目标-group-x" class="headerlink" title="匹配目标 group(x)"></a>匹配目标 group(x)</h5><p>用 match() 方法可以得到匹配到的字符串内容，如果要从字符串中提取一部分内容。</p>
<p>使用 （） 括号将想提取的字符串括起来，调用 group() 方法提取结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = <span class="string">&#x27;Hello 1234567 World This is a Regex Demo&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;^Hello\s(\d+)\sWorld&#x27;</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">19</span>), match=<span class="string">&#x27;Hello 1234567 World&#x27;</span>&gt;</span><br><span class="line"><span class="number">1234567</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">19</span>)</span><br></pre></td></tr></table></figure>

<p>想将字符串中的 1234567 提取出来，可以将数字部分的正则表达式用括号 （\d+）括起来，然后调用 group(1) 获取匹配结果，如果后面还有（）内容，依次用 group(2) 获取</p>
<p>span 输出匹配范围</p>
<h5 id="通用匹配"><a href="#通用匹配" class="headerlink" title="通用匹配 .*"></a>通用匹配 .*</h5><p>点可以匹配任意字符（除换行符），星代表匹配前面的字符无限次，组合在一起</p>
<p>.* 匹配任意字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = re.match(<span class="string">&#x27;^Hello.*Demo$&#x27;</span>, content)</span><br><span class="line">print(result.group())</span><br></pre></td></tr></table></figure>

<p>中间部分省略，最后加一个结尾字符串</p>
<p>group() 输出匹配的全部字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Hello <span class="number">123</span> <span class="number">4567</span> World This <span class="keyword">is</span> a Regex Demo</span><br></pre></td></tr></table></figure>

<h5 id="贪婪与非贪婪"><a href="#贪婪与非贪婪" class="headerlink" title=".* 贪婪与非贪婪"></a>.* 贪婪与非贪婪</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = <span class="string">&#x27;Hello 1234567 World This is a Regex Demo&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;^He.*(\d+).*Demo$&#x27;</span>, content)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line"><span class="comment">#结果 7</span></span><br></pre></td></tr></table></figure>

<p>依然想匹配中间数字，数字两边比较乱，省略都写成 <code> .*</code>，结果打印只有 7</p>
<p>贪婪匹配下 .* 会匹配尽可能多的字符，.*  后面\d+至少一个数字，没有指明具体多少个数字，.*  会尽可能匹配多的字符，123456 也被前面匹配了，给 \d+ 就留下一个数字7匹配，得到的内容就是 7 </p>
<p>非贪婪匹配，尽可能匹配少的字符，<code>.*?</code> 来代替 <code>.*</code> ，最后得到结果 1234567</p>
<p>所以做匹配的时候，字符串中间尽可能使用非贪婪匹配</p>
<h5 id="修饰符-例如-re-S"><a href="#修饰符-例如-re-S" class="headerlink" title="修饰符 例如 re.S"></a>修饰符 例如 re.S</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content = <span class="string">&#x27;&#x27;&#x27;Hello 1234567 World_This</span></span><br><span class="line"><span class="string">is a Regex Demo</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;^He.*?(\d+).*?Demo$&#x27;</span>, content)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line"><span class="comment">#结果 报错了</span></span><br></pre></td></tr></table></figure>

<p>修改在字符串中加了换行符，没有匹配到结果，又调用了 group 会报错</p>
<p>因为点（.）匹配的是除换行符之外的任意字符，遇到换行符时，.*? 就不能匹配了，导致匹配失败，只需要加一个修饰符 re.S 修正</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = re.match(<span class="string">&#x27;^He.*?(\d+).*?Demo$&#x27;</span>, content, re.S)</span><br></pre></td></tr></table></figure>

<p>re.S 使点（.）匹配包括换行在内的所有字符</p>
<p>re.I 使匹配对大小写不敏感</p>
<p>re.M 多行匹配，影响 ^ 和 $</p>
<h5 id="转义匹配"><a href="#转义匹配" class="headerlink" title="转义匹配"></a>转义匹配</h5><p>正则匹配遇到特殊字符时，使用转义 \</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content = <span class="string">&#x27;(百度)www.baidu.com&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;\(百度\)www\.baidu\.com&#x27;</span>, content)</span><br></pre></td></tr></table></figure>

<h5 id="Search-扫描整个字符串匹配"><a href="#Search-扫描整个字符串匹配" class="headerlink" title="Search 扫描整个字符串匹配"></a>Search 扫描整个字符串匹配</h5><p>match() 是从字符串开头开始匹配的，开头不匹配，那整个匹配就失败</p>
<p>所以 match 适合用来检测某个字符串是否符合某个正则表达式的规则。</p>
<p>Search() 匹配时会扫描整个字符串，返回一个成功匹配结果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">html = &#x27;&#x27;&#x27;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;songs-list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>经典老歌<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;introduction&quot;</span>&gt;</span>经典老歌列表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;2&quot;</span>&gt;</span>一路上有你<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;7”&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &lt;a href=&quot;</span>/<span class="attr">2.mp3</span>&quot; <span class="attr">singer</span>=<span class="string">&quot;任贤齐&quot;</span>&gt;</span>沧海一卢笑<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/3.mp3&quot;</span> <span class="attr">singer</span>=<span class="string">&quot;齐秦&quot;</span>&gt;</span>往事随风<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;6&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/4.mp3&quot;</span> <span class="attr">singer</span>=<span class="string">&quot;beyond&quot;</span>&gt;</span>尤辉岁月<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/S.mp3&quot;</span> <span class="attr">singer</span>=<span class="string">&quot;陈慧琳&quot;</span>&gt;</span>记事本<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/6.mp3&quot;</span> <span class="attr">singer</span>=<span class="string">&quot;邓丽君&quot;</span>&gt;</span>但愿人长久<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>

<p>尝试获取 class 为 active 的 li 节点内部超链接包含的歌手名（齐秦）和歌名（往事随风）</p>
<p>此时需要提取第三个 li 节点下 a 节点的 singer 属性和文本</p>
<p>正则表达式可以以 li 开头，寻找下一个标识符 active，中间部分用 .*<em>? 来匹配，接下来取 singer 属性值</em></p>
<p> <code>singer=&quot;(.*?)&quot;</code>  需要提取部分用小括号括起来，用 group 提取，两侧的边界是双引号</p>
<p>接下来匹配 a 节点文本，左边界是  <code>&gt;</code>  右边界是 <code>&lt;/a&gt;</code> 目标内容用 <code>.*?</code> 匹配</p>
<p>正则表达式：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;li.*?active.*?singer=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>然后再调用 search() 方法，就会搜索整个 html 文本找到符合正则表达式的第一个内容返回，由于代码有换行，需要加入 re.S 参数，匹配包括换行在内的所有参数，由于绝大多数 HTML 文本都带有换行符，所以尽量加上 re.S 参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = re.search(<span class="string">&#x27;&lt;li.*?active.*?singer=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>, html, re.S)</span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line">	print(result.group(<span class="number">1</span>), result.group(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h5 id="findall-匹配返回所有"><a href="#findall-匹配返回所有" class="headerlink" title="findall 匹配返回所有"></a>findall 匹配返回所有</h5><p>search 返回匹配正则表达式第一个内容，想要匹配所有内容使用 findall() ，会搜索整个字符串，然后返回匹配正则表达式的所有内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = re.findall(<span class="string">&#x27;&lt;li.*?href=&quot;(.*?)&quot;.*?singer=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>, html, re.S)</span><br><span class="line">print(<span class="built_in">type</span>(results))</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">	print(result[<span class="number">0</span>], result[<span class="number">1</span>], result[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p>返回的每个元素都是元组类型，用对应索引依次取出</p>
<h5 id="sub-修改文本"><a href="#sub-修改文本" class="headerlink" title="sub 修改文本"></a>sub 修改文本</h5><p>修改文本，把一串字符串中的数字去掉</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content = <span class="string">&#x27;54aKS4yrsoiRS4ix5L2g&#x27;</span></span><br><span class="line">content = re.sub(<span class="string">&#x27;\d+&#x27;</span>,<span class="string">&#x27;&#x27;</span>, content)</span><br></pre></td></tr></table></figure>

<p>第一个参数\d+匹配所有的数字，第二个参数为替换成的字符串，第三个参数是原字符串</p>
<p>上面 html 中需要获取歌名，直接正则表达式提取比较麻烦</p>
<p>借助 sub 方法将 a 节点去掉只留下文本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = re.sub(<span class="string">&#x27;&lt;a.*?&gt;|&lt;/a&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, html)</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;songs-list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>经典老歌<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;introduction&quot;</span>&gt;</span>经典老歌列表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;2&quot;</span>&gt;</span>一路上有你<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;7”&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">		沧海一卢笑 </span></span></span><br><span class="line"><span class="tag"><span class="string">	&lt;/li&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">	&lt;li data-view=&quot;</span><span class="attr">4</span>&quot; <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span><br><span class="line">		往事随风</span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;6&quot;</span>&gt;</span>尤辉岁月<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;5&quot;</span>&gt;</span>记事本<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">		但愿人长久</span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再利用 findall 提取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = re.findall(<span class="string">&#x27;&lt;li.*?&gt;(.*?)&lt;/li&gt;&#x27;</span>, html, re.S)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">	print(result.strip())</span><br></pre></td></tr></table></figure>

<p>strip 移除字符串首尾指定字符 strip() 去除首尾空格，strip(‘0’) 去除首尾字符 0</p>
<h5 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h5><p>将正则字符串编译成正则表达式对象，以便在后面的匹配中复用</p>
<p>想把3个日期中的时间去掉，没必要重复写3个同样的正则表达式</p>
<p>通过 compile 编译成正则表达式对象，后面就不用重复写正则表达式，直接复用正则表达式对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">content1 &#x3D; &#39;2016-12-15 12:00&#39;</span><br><span class="line">content2 &#x3D; &#39;2016-12-17 12:55&#39;</span><br><span class="line">content3 &#x3D; &#39;2016-12-22 13:21&#39;</span><br><span class="line">pattern &#x3D; re.compile(&#39;\d&#123;2&#125;:\d&#123;2&#125;&#39;)</span><br><span class="line">result1 &#x3D; re.sub(pattern, &#39;&#39;, content1)</span><br><span class="line">result2 &#x3D; re.sub(pattern, &#39;&#39;, content2)</span><br><span class="line">result3 &#x3D; re.sub(pattern, &#39;&#39;, content3)</span><br><span class="line">print(result1, result2, result3)</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-数据爬取</title>
    <url>/2022/04/13/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/</url>
    <content><![CDATA[<h4 id="6-Ajax-数据爬取"><a href="#6-Ajax-数据爬取" class="headerlink" title="6. Ajax 数据爬取"></a>6. Ajax 数据爬取</h4><p>有些网页原始的 HTML 文档不会包含任何数据，数据都是通过 Ajax 统一加载后再呈现出来。</p>
<p>遇到这种页面，直接利用 requests 等库来抓取原始页面，是无法获取到有效数据的</p>
<p>Ajax 是利用 JavaScript 在保证页面不被刷新、页面链接不改变的情况下与服务器交换数据并更新部分网页的技术</p>
<p>例子：如微博页面，分页加载微博内容，这个过程就是 Ajax 加载的过程，页面并没有刷新，网页却多了新的内容</p>
<h5 id="6-2-Ajax-分析方法"><a href="#6-2-Ajax-分析方法" class="headerlink" title="6.2 Ajax 分析方法"></a>6.2 Ajax 分析方法</h5><ol>
<li>查看请求</li>
</ol>
<p>Chrome 打开微博链接 <a href="https://m.weibo.cn/u/2830678474">https://m.weibo.cn/u/2830678474</a></p>
<p>页面中鼠标右键选择检查选项，弹出开发者工具</p>
<p>切换到 Network 选项卡，重新刷新页面，出现非常多的条目</p>
<p>Ajax 其实是特殊的请求类型，叫作 xhr</p>
<p>找到 Type 为 xhr 的就是 Ajax 请求，点击请求查看详细信息，Request Headers 中有一个信息为 X-Requested-With:XMLHttpRequest，这就标记了此请求是 Ajax 请求</p>
<ol start="2">
<li>过滤请求</li>
</ol>
<p>Chrome 开发者工具筛选点击 XHR 筛选出所有 Ajax 请求</p>
<h5 id="6-3-Ajax-结果提取"><a href="#6-3-Ajax-结果提取" class="headerlink" title="6.3 Ajax 结果提取"></a>6.3 Ajax 结果提取</h5><p>模拟 Ajax 请求，将前10页微博爬取下来</p>
<p>代码地址 <a href="https://github.com/Python3WebSpider/WeiboList">https://github.com/Python3WebSpider/WeiboList</a></p>
<p>查看请求链接</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">第一页</span><br><span class="line">https://m.weibo.cn/api/container/getIndex?type=uid&amp;value=2830678474&amp;containerid=1076032830678474</span><br><span class="line">第一页返回数据</span><br><span class="line">...</span><br><span class="line"><span class="string">&quot;cardlistInfo&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;containerid&quot;</span>: <span class="string">&quot;1076032830678474&quot;</span>,</span><br><span class="line">    <span class="string">&quot;v_p&quot;</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="string">&quot;show_style&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: <span class="number">2488</span>,</span><br><span class="line">    <span class="string">&quot;since_id&quot;</span>: <span class="number">4751617833832728</span></span><br><span class="line">&#125;</span><br><span class="line">第二页</span><br><span class="line"> https://m.weibo.cn/api/container/getIndex?type=uid&amp;value=2830678474&amp;containerid=1076032830678474&amp;since_id=4755918556758808</span><br></pre></td></tr></table></figure>

<p>第二页的 since_id 请求参数是第一页返回的</p>
<p>需要把第一页返回数据中的 since_id 保存，在请求第二页的时候使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">since_id = <span class="string">&#x27;&#x27;</span></span><br><span class="line">client = MongoClient()</span><br><span class="line">db = client[<span class="string">&#x27;weibo&#x27;</span>]</span><br><span class="line">collection = db[<span class="string">&#x27;weibo&#x27;</span>]</span><br><span class="line">max_page = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span>(<span class="params"><span class="built_in">dict</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> collection.insert_one(<span class="built_in">dict</span>):</span><br><span class="line">        print(<span class="string">&#x27;Save to Mongo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_local</span>(<span class="params"><span class="built_in">dict</span></span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;weibo.json&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(json.dumps(<span class="built_in">dict</span>, indent=<span class="number">2</span>, ensure_ascii=<span class="literal">False</span>))</span><br><span class="line">        file.write(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;=&#x27;</span> * <span class="number">50</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">json</span>):</span></span><br><span class="line">    <span class="keyword">if</span> json:</span><br><span class="line">        items = json.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;cards&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            item = item.get(<span class="string">&#x27;mblog&#x27;</span>)</span><br><span class="line">            weibo = &#123;&#125;</span><br><span class="line">            weibo[<span class="string">&#x27;id&#x27;</span>] = item.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">            weibo[<span class="string">&#x27;text&#x27;</span>] = pq(item.get(<span class="string">&#x27;text&#x27;</span>)).text()<span class="comment">#去除HTML标签</span></span><br><span class="line">            weibo[<span class="string">&#x27;attitudes&#x27;</span>] = item.get(<span class="string">&#x27;attitudes_count&#x27;</span>)</span><br><span class="line">            weibo[<span class="string">&#x27;comments&#x27;</span>] = item.get(<span class="string">&#x27;comments_count&#x27;</span>)</span><br><span class="line">            weibo[<span class="string">&#x27;reposts&#x27;</span>] = item.get(<span class="string">&#x27;reposts_count&#x27;</span>)</span><br><span class="line">            <span class="keyword">yield</span> weibo <span class="comment">#将weibo以generator返回</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>():</span></span><br><span class="line">    <span class="keyword">global</span> since_id <span class="comment"># 声明全局变量</span></span><br><span class="line">    base_url = <span class="string">&#x27;https://m.weibo.cn/api/container/getIndex?type=uid&amp;value=2830678474&amp;containerid=1076032830678474&#x27;</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;uid&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;2830678474&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;containerid&#x27;</span>: <span class="string">&#x27;1076032830678474&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> since_id != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        params[<span class="string">&#x27;since_id&#x27;</span>] = since_id</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    result = requests.get(base_url, params=params, headers=headers)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> result.status_code == <span class="number">200</span>:</span><br><span class="line">            jsonRes = result.json()</span><br><span class="line">            info = jsonRes.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;cardlistInfo&#x27;</span>)</span><br><span class="line">            since_id = info[<span class="string">&#x27;since_id&#x27;</span>]</span><br><span class="line">            <span class="keyword">return</span> jsonRes</span><br><span class="line">    <span class="keyword">except</span> requests.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">        print(e.args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_page):</span><br><span class="line">        data = get_page()</span><br><span class="line">        results = parse_page(data)</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">            save_to_mongo(result)</span><br><span class="line">            <span class="comment"># print(type(result),result)</span></span><br><span class="line">            <span class="comment"># save_to_local(result) #保存到本地文件</span></span><br></pre></td></tr></table></figure>

<p>保存数据到本地</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_local</span>(<span class="params"><span class="built_in">dict</span></span>):</span></span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;weibo.json&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">      file.write(json.dumps(<span class="built_in">dict</span>, indent=<span class="number">2</span>, ensure_ascii=<span class="literal">False</span>))</span><br><span class="line">      file.write(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;=&#x27;</span> * <span class="number">50</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>保存数据到MongoDB</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span>(<span class="params"><span class="built_in">dict</span></span>):</span></span><br><span class="line">  <span class="keyword">if</span> collection.insert_one(<span class="built_in">dict</span>):</span><br><span class="line">      print(<span class="string">&#x27;Save to Mongo&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h5 id="6-4-分析-Ajax-爬取今日头条街拍美图"><a href="#6-4-分析-Ajax-爬取今日头条街拍美图" class="headerlink" title="6.4 分析 Ajax 爬取今日头条街拍美图"></a>6.4 分析 Ajax 爬取今日头条街拍美图</h5><p>链接有变动，查看最新代码 <a href="https://github.com/Python3WebSpider/Jiepai">https://github.com/Python3WebSpider/Jiepai</a></p>
<h4 id="7-动态渲染页面爬取"><a href="#7-动态渲染页面爬取" class="headerlink" title="7. 动态渲染页面爬取"></a>7. 动态渲染页面爬取</h4><p>Python 提供了许多模拟浏览器运行的库，如  Selenium、Splash、PyV8、Ghost 等</p>
<p>有些 Ajax 接口含有很多加密参数，难以直接找出其规律，也很难直接分析 Ajax 来抓取，可以使用模拟浏览器运行的方式来实现，不用管 Ajax 接口到底有哪些参数</p>
<h5 id="7-1-Selenium-的使用"><a href="#7-1-Selenium-的使用" class="headerlink" title="7.1 Selenium 的使用"></a>7.1 Selenium 的使用</h5><p>Selenium 是一个自动化测试工具，利用它可以驱动浏览器执行特定的动作，如点击、下拉，同时还可以获取浏览器当前呈现页面的源码，做到可见即可爬</p>
<p>需要配置好 ChromeDriver，安装好 python 的 selenium 库</p>
<h6 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h6><h6 id="声明浏览器对象"><a href="#声明浏览器对象" class="headerlink" title="声明浏览器对象"></a>声明浏览器对象</h6><p>Selenium 支持非常多浏览器，如 Chrome、Firefox等</p>
<p>初始化浏览器对象并赋值为 browser 对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()  <span class="comment">#弹出Chrome浏览器</span></span><br><span class="line">browser = webdriver.Safari()</span><br><span class="line">browser = webdriver.Firefox()</span><br></pre></td></tr></table></figure>

<h6 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h6><p>调用 get() 来请求页面，传入链接 URL 即可</p>
<p>如 get() 方法访问页面，打印源代码再关闭浏览器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser = webdriver.Chrome()  <span class="comment">#弹出Chrome浏览器</span></span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">print(browser.page_source)<span class="comment">#打印源代码</span></span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure>

<h6 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h6><p>Selenium 可以驱动浏览器完成各种动作，如填充表单模拟点击等</p>
<ol>
<li>单个节点 find_element()</li>
</ol>
<p>比如想获取百度搜索框的这个节点，查看源码找到搜索框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">imput</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s_ipt&quot;</span> <span class="attr">value</span> <span class="attr">maxlength</span>=<span class="string">&quot;255&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来就是获取它了，可以通过 find_element_by_name() 根据 name 值获取，find_element_by_id() 是根据 id 获取，还有根据 XPath、CSS 选择器等获取方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser = webdriver.Chrome()  <span class="comment">#弹出Chrome浏览器</span></span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">input_first = browser.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>)</span><br><span class="line">input_second = browser.find_element_by_class_name(<span class="string">&#x27;s_ipt&#x27;</span>)</span><br><span class="line">input_third = browser.find_element_by_name(<span class="string">&#x27;wd&#x27;</span>)</span><br><span class="line">input_forth = browser.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;kw&quot;]&#x27;</span>)</span><br><span class="line">input_five  = browser.find_element_by_css_selector(<span class="string">&#x27;#kw&#x27;</span>)</span><br><span class="line">print(input_first, input_second, input_third, input_forth, input_five)</span><br></pre></td></tr></table></figure>

<p>返回结果都是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=<span class="string">&quot;21787490d750c720cf715181e538f416&quot;</span>, element=<span class="string">&quot;b3dcf1e9-05a9-4a1c-8e83-deebd46c2413&quot;</span>)&gt; </span><br></pre></td></tr></table></figure>

<ul>
<li>find_element()</li>
</ul>
<p>selenium 还提供了通用的方法 find_element() ，两个参数：查找方式 By 和值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">input_first = browser.find_element(By.ID, <span class="string">&#x27;kw&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>多个节点  find_elements()</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser = webdriver.Chrome()  <span class="comment">#弹出Chrome浏览器</span></span><br><span class="line">browser.get(<span class="string">&#x27;https://www.taobao.com&#x27;</span>)</span><br><span class="line"><span class="built_in">list</span> = browser.find.elements_by_css_selector(<span class="string">&#x27;.service-bd li&#x27;</span>)</span><br><span class="line"><span class="comment">#也可直接用 find_elements() 方法来选择</span></span><br><span class="line"><span class="built_in">list</span> = browser.find_elements(By.CSS_SELECTOR, <span class="string">&#x27;.service-bd li&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>节点交互</li>
</ol>
<p>让浏览器执行一些动作，输入文字 send_keys()，清空文字 clear()， 点击按钮 click()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.remote.webelement <span class="keyword">import</span> WebElement</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="built_in">input</span> = browser.find_element(By.ID, <span class="string">&#x27;kw&#x27;</span>)<span class="comment"># type: WebElement</span></span><br><span class="line"><span class="built_in">input</span>.send_keys(<span class="string">&#x27;iPhone&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">input</span>.clear()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">input</span>.send_keys(<span class="string">&#x27;iPad&#x27;</span>)</span><br><span class="line">button = browser.find_element(By.ID, <span class="string">&#x27;su&#x27;</span>) <span class="comment"># type: WebElement</span></span><br><span class="line">button.click()</span><br></pre></td></tr></table></figure>

<p>驱动浏览器打开百度，输入文字，清空搜索，调用 click() 点击搜索</p>
<p>更多操作交互查看 </p>
<p><a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement</a></p>
<h6 id="动作链"><a href="#动作链" class="headerlink" title="动作链"></a>动作链</h6><p>一些操作没有特定的执行对象，比如鼠标拖拽，键盘按键等，这些动作用另一种方式来执行，就是动作链</p>
<p>拖拽实例</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;iframe frameborder=&quot;0&quot; id=&quot;iframeResult&quot; style=&quot;height: 592.96px;&quot; cd_frame_id_=&quot;8cb7e7ff87254590477aee6f726ea77d&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">&#x27;http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&#x27;</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">&#x27;iframeResult&#x27;</span>)</span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">&#x27;#draggable&#x27;</span>)<span class="comment">#拖拽节点</span></span><br><span class="line">target = browser.find_element_by_css_selector(<span class="string">&#x27;#droppable&#x27;</span>)<span class="comment">#拖拽目标节点</span></span><br><span class="line">actions = ActionChains(browser)</span><br><span class="line">actions.drag_and_drop(source, target)</span><br><span class="line">actions.perform()<span class="comment">#执行</span></span><br></pre></td></tr></table></figure>

<p>更多动作链操作</p>
<p><a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains</a></p>
<h6 id="执行-JavaScript"><a href="#执行-JavaScript" class="headerlink" title="执行 JavaScript"></a>执行 JavaScript</h6><p>利用 execute_script() 将进度条下拉到最底部，然后弹窗</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span>)</span><br><span class="line">browser.execute_script(<span class="string">&#x27;window.scrollTo(0, document.body.scrollHeight)&#x27;</span>)</span><br><span class="line">browser.execute_script(<span class="string">&#x27;alert(&quot;To Bottom&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="获取节点信息"><a href="#获取节点信息" class="headerlink" title="获取节点信息"></a>获取节点信息</h6><p>前面通过 page_souce 属性获取网页源代码，接着就可以使用解析库（正则、Beautiful Soup、pyquery）等来提取信息</p>
<p>Selenium 已提供了选取节点的方法，返回 WebElement 类型，它也有相关的方法和属性来直接提取节点信息，如属性、文本等。这样就可以不用通过解析源代码来提取信息了</p>
<ol>
<li>获取属性</li>
</ol>
<p>通过 get_attribute() 方法获取节点属性，输入想要获取的属性名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.remote.webelement <span class="keyword">import</span> WebElement</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span>)</span><br><span class="line">logo = browser.find_element_by_class_name(<span class="string">&#x27;ExploreHomePage-specialsLoginImg&#x27;</span>) <span class="comment"># type: WebElement</span></span><br><span class="line">print(logo)</span><br><span class="line">print(logo.get_attribute(<span class="string">&#x27;class&#x27;</span>))</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>获取文本值</li>
</ol>
<p>每个 WebElement 都有 text 属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logo = browser.find_element_by_class_name(<span class="string">&#x27;ExploreHomePage-ContentSection-header&#x27;</span>) <span class="comment"># type: WebElement</span></span><br><span class="line">print(logo.text)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>获取 id、位置、标签名和大小</li>
</ol>
<p>id 获取节点id，location 获取该节点在页面中相对位置，tag_name 获取标签名称，size 获取节点大小也就是宽高</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(logo.<span class="built_in">id</span>)</span><br><span class="line">print(logo.location)</span><br><span class="line">print(logo.tag_name)</span><br><span class="line">print(logo.size)</span><br></pre></td></tr></table></figure>

<h6 id="切换-Frame"><a href="#切换-Frame" class="headerlink" title="切换 Frame"></a>切换 Frame</h6><p>网页中有一种节点叫作 iframe，也就是子 Frame，相当于页面的子页面</p>
<p>Selenium 打开页面后，默认是在父级 Frame 里面操作，此时如果页面中还有子 Frame，它是不能获取到子Frame 里面的节点的，需要用 switch_to.frame() 方法来切换 Frame</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">&#x27;http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&#x27;</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">&#x27;iframeResult&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    logo = browser.find_element_by_class_name(<span class="string">&#x27;logo&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">    print(<span class="string">&#x27;No Logo&#x27;</span>)</span><br><span class="line">browser.switch_to.parent_frame()</span><br><span class="line">logo = browser.find_element_by_class_name(<span class="string">&#x27;logo&#x27;</span>)</span><br><span class="line">print(logo)</span><br><span class="line">print(logo.text)</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">No Logo</span><br><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=<span class="string">&quot;020e37884ff7c4ab42f87a840d6bc616&quot;</span>, element=<span class="string">&quot;d5450a09-946b-4ace-b6b2-f3dd7c0382fd&quot;</span>)&gt;</span><br></pre></td></tr></table></figure>

<p>这里先通过 switch_to.frame 切换到子 Frame里面，尝试获取父级 Frame 里的 logo 节点（这是不能找到的）找不到抛出异常，接着切换回父级 Frame，然后再次重新获取节点，此时成功获取了</p>
<p>所以当页面中包含子 Frame 时，如果想获取子 Frame 中的节点，需要先调用 switch_to.frame 方法切换到对应的 Frame，然后再进行操作</p>
<h6 id="延时等待"><a href="#延时等待" class="headerlink" title="延时等待"></a>延时等待</h6><p>Selenium 中，get 方法会在网页框架加载结束后执行，此时如果获取 page_source，可能并不是浏览器完全加载完成的页面，有些还有额外的 Ajax 请求，需要等待一段时间，确保节点已加载出来</p>
<ol>
<li>隐式等待</li>
</ol>
<p>implicitly_wait</p>
<p>如果 Selenium 没有在 DOM 中找到节点，将继续等待，超出设定时间抛出找不到节点的异常</p>
<p>当查找节点没有立即出现，隐式等待一段时间再查找DOM，默认时间0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span>)</span><br><span class="line"><span class="built_in">input</span> = browser.find_element_by_class_name(<span class="string">&#x27;zu-top-add-question&#x27;</span>)</span><br><span class="line">print(<span class="built_in">input</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>显式等待</li>
</ol>
<p>指定要查找的结点，指定一个最长等待事件，规定时间内加载出来了这个节点，就返回查找节点，超过时间未找到节点抛出异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)<span class="comment"># 指定最长等待时间</span></span><br><span class="line">browser.get(<span class="string">&#x27;https://www.taobao.com/&#x27;</span>)</span><br><span class="line">wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">input</span> = wait.until(EC.presence_of_element_located(By.ID, <span class="string">&#x27;q&#x27;</span>))</span><br><span class="line">button = wait.until(EC.element_to_be_clickable(By.CSS_SELECTOR, <span class="string">&#x27;.btn-search&#x27;</span>))</span><br><span class="line">print(<span class="built_in">input</span>, button)</span><br></pre></td></tr></table></figure>

<p>引入 WebDriverWait 对象，指定最长等待时间</p>
<p>调用 until 方法，传入要等待条件 presence_of_element_located 节点出现的意思，参数是节点的定位元组，ID 为 q 的节点搜索框</p>
<p>10秒内搜索框成功加载出来，就返回该节点，超过10秒抛出异常</p>
<p>element_to_be_clickable 可点击，查按钮查找 CSS 选择器 .btn-search ，10秒内它是可点击的，也就是成功加载出来了，就返回这个按钮节点，超过10秒不可点击，也就是没有加载出来，就抛出异常</p>
<ul>
<li>其它等待条件</li>
</ul>
<p>比如判断标题内容，判断某个节点内是否出现了某文字等</p>
<table>
<thead>
<tr>
<th>等待条件</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>title_is</td>
<td>标题是某内容</td>
</tr>
<tr>
<td>title_contains</td>
<td>标题包含某内容</td>
</tr>
<tr>
<td>presence_of_element_loated</td>
<td>节点加载出来，传入定位元组(By.ID,’p’)</td>
</tr>
<tr>
<td>visibility_of_element_located</td>
<td>节点可见，传入定位元组</td>
</tr>
<tr>
<td>visibility_of</td>
<td>可见，传入节点对象</td>
</tr>
<tr>
<td>presence_of_all_elements_located</td>
<td>所有节点加载出来</td>
</tr>
<tr>
<td>text_to_be_present_in_element</td>
<td>某个节点文本包含某文字</td>
</tr>
<tr>
<td>text_to_be_present_in_element_value</td>
<td>某个节点值包含某文字</td>
</tr>
<tr>
<td>frame_to_be_available_and_switch_to_it</td>
<td>加载并切换</td>
</tr>
<tr>
<td>invisibility_of_element_located</td>
<td>节点不可见</td>
</tr>
<tr>
<td>element_to_be_clickable</td>
<td>节点可点击</td>
</tr>
<tr>
<td>staleness_of</td>
<td>判断一个结点是否仍在DOM，可判断页面是否已刷新</td>
</tr>
<tr>
<td>element_to_be_selected</td>
<td>节点可选择，传入节点对象</td>
</tr>
<tr>
<td>element_located_to_be_selected</td>
<td>节点可选择，传入定位元组</td>
</tr>
<tr>
<td>element_selection_state_to_be</td>
<td>传入节点对象及状态，相等返回True，否则返回False</td>
</tr>
<tr>
<td>element_located_selection_state_to_be</td>
<td>传入定位元组及状态，相等返回True，否则返回False</td>
</tr>
<tr>
<td>alert_is_present</td>
<td>是否出现警告</td>
</tr>
</tbody></table>
<p>更多等待条件的参数及用法</p>
<p> <a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions</a></p>
<h6 id="前进和后退"><a href="#前进和后退" class="headerlink" title="前进和后退"></a>前进和后退</h6><p>back() 和 forward()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser.back()</span><br><span class="line">browser.forward()</span><br></pre></td></tr></table></figure>

<h6 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h6><p>获取、添加、删除 Cookies</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(browser.get_cookie())</span><br><span class="line">browser.add_cookie(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;name&#x27;</span>&#125;)</span><br><span class="line">browser.delete_all_cookies()</span><br></pre></td></tr></table></figure>

<h6 id="选项卡管理"><a href="#选项卡管理" class="headerlink" title="选项卡管理"></a>选项卡管理</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">browser.execute_script(<span class="string">&#x27;window.open()&#x27;</span>) <span class="comment">#打开新选项卡</span></span><br><span class="line">print(browser.window_handles) <span class="comment">#打印所有选项卡</span></span><br><span class="line">browser.switch_to.window(browser.window_handles[<span class="number">1</span>]) <span class="comment">#切换选项卡</span></span><br><span class="line">browser.get(<span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.switch_to.window(browser.window_handles[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<h6 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h6><p>try except</p>
<p>更多异常类 <a href="https://selenium-python.readthedocs.io/api.html#module-selenium.common.exceptions">https://selenium-python.readthedocs.io/api.html#module-selenium.common.exceptions</a></p>
<h5 id="7-2-Splash-使用"><a href="#7-2-Splash-使用" class="headerlink" title="7.2 Splash 使用"></a>7.2 Splash 使用</h5><p>Splash 是一个 JavaScript 渲染服务，是一个带有 HTTP API 的轻量级浏览器，对接了 Python 中的 Twisted 和 QT 库，利用它同样可以动态渲染页面的抓取</p>
<ul>
<li>Splash 可以实现功能</li>
</ul>
<p>异步方式处理多个网页渲染过程</p>
<p>获取渲染后的页面的源代码或截图</p>
<p>通过关闭图片渲染或者使用 Adblock 规则来加快页面渲染速度</p>
<p>可执行特定的 JavaScript 脚本</p>
<p>可通过 Lua 脚本来控制页面渲染过程</p>
<p>获取渲染的详细过程并通过 HAR（HTTP Archive）格式呈现</p>
<h6 id="Splash-API-调用"><a href="#Splash-API-调用" class="headerlink" title="Splash API 调用"></a>Splash API 调用</h6><p>如何利用 Splash 渲染页面，Splash 提供了一些 HTTP API 接口，只需要请求这些接口并传递相应的参数即可</p>
<h5 id="7-3-Splash-负载均衡配置"><a href="#7-3-Splash-负载均衡配置" class="headerlink" title="7.3 Splash 负载均衡配置"></a>7.3 Splash 负载均衡配置</h5><p>Splash 做页面抓取时，如果爬取的量非常大，任务非常多，用一个Splash服务来处理压力太大，搭建一个负载均衡器把压力分散到服务器上，相当于多台机器多个服务共同参与任务的处理，减小单个 Splash服务的压力</p>
<h5 id="7-4-使用-Selenium-爬取淘宝商品"><a href="#7-4-使用-Selenium-爬取淘宝商品" class="headerlink" title="7.4 使用 Selenium 爬取淘宝商品"></a>7.4 使用 Selenium 爬取淘宝商品</h5><p>代码 <a href="https://github.com/Python3WebSpider/TaobaoProduct">https://github.com/Python3WebSpider/TaobaoProduct</a></p>
<p>利用 Selenium 模拟浏览器操作抓取淘宝的商品信息，并将结果保存到MongoDB</p>
<h6 id="获取商品列表"><a href="#获取商品列表" class="headerlink" title="获取商品列表"></a>获取商品列表</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">KEYWORD = <span class="string">&#x27;iPad&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span>(<span class="params">page</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  抓取索引页</span></span><br><span class="line"><span class="string">  :param page: 页码</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  print(<span class="string">&#x27;正在爬取第&#x27;</span>, page, <span class="string">&#x27;页&#x27;</span>)</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      url = <span class="string">&#x27;https://s.taobao.com/search?q=&#x27;</span> + quote(KEYWORD)</span><br><span class="line">      browser.get(url)</span><br><span class="line">      <span class="keyword">if</span> page &gt; <span class="number">1</span>:</span><br><span class="line">          <span class="built_in">input</span> = wait.until(</span><br><span class="line">              EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">&#x27;#mainsrp-pager div.form &gt; input&#x27;</span>)))</span><br><span class="line">          submit = wait.until(</span><br><span class="line">              EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">&#x27;#mainsrp-pager div.form &gt; span.btn.J_Submit&#x27;</span>)))</span><br><span class="line">          <span class="built_in">input</span>.clear()</span><br><span class="line">          <span class="built_in">input</span>.send_keys(page)</span><br><span class="line">          submit.click()</span><br><span class="line">      wait.until(</span><br><span class="line">          EC.text_to_be_present_in_element((By.CSS_SELECTOR, <span class="string">&#x27;#mainsrp-pager li.item.active &gt; span&#x27;</span>), <span class="built_in">str</span>(page)))</span><br><span class="line">      wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">&#x27;.m-itemlist .items .item&#x27;</span>)))</span><br><span class="line">      get_products()</span><br><span class="line">  <span class="keyword">except</span> TimeoutException:</span><br><span class="line">      index_page(page)</span><br></pre></td></tr></table></figure>

<p>定义了 index_page() 方法，抓取商品列表</p>
<p>访问搜索链接，页码大于1就进行跳页操作，否则等待页面加载完成</p>
<p>等待加载使用 WebDriverWait 对象，指定最长等待时间 10 秒，这个时间内匹配了等待条件，也就说页面加载出来了，就立即返回相应结果继续向下执行，否则到了最大时间没加载出来时，抛出异常</p>
<p>等待商品加载出来 presence_of_element_located，传入 CSS 选择器 .m-itemlist .items .item，这选择器对应页面内容是每个商品的信息块</p>
<p>是否跳转到了对应页面，跳转到某一页后页码都会高亮，只需要判断当前高亮的页码数是当前页码即可</p>
<p>text_to_be_present_in_element 会等待指定的文本出现在某个节点里时返回成功，会检测当前高亮的页码节点是不是传过来的页码数</p>
<h6 id="解析商品列表"><a href="#解析商品列表" class="headerlink" title="解析商品列表"></a>解析商品列表</h6><p>直接返回页面源代码，使用pyquery解析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_products</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  提取商品数据</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  html = browser.page_source</span><br><span class="line">  doc = pq(html)</span><br><span class="line">  items = doc(<span class="string">&#x27;#mainsrp-itemlist .items .item&#x27;</span>).items()</span><br><span class="line">  <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">      product = &#123;</span><br><span class="line">          <span class="string">&#x27;image&#x27;</span>: item.find(<span class="string">&#x27;.pic .img&#x27;</span>).attr(<span class="string">&#x27;data-src&#x27;</span>),</span><br><span class="line">          <span class="string">&#x27;price&#x27;</span>: item.find(<span class="string">&#x27;.price&#x27;</span>).text(),</span><br><span class="line">          <span class="string">&#x27;deal&#x27;</span>: item.find(<span class="string">&#x27;.deal-cnt&#x27;</span>).text(),</span><br><span class="line">          <span class="string">&#x27;title&#x27;</span>: item.find(<span class="string">&#x27;.title&#x27;</span>).text(),</span><br><span class="line">          <span class="string">&#x27;shop&#x27;</span>: item.find(<span class="string">&#x27;.shop&#x27;</span>).text(),</span><br><span class="line">          <span class="string">&#x27;location&#x27;</span>: item.find(<span class="string">&#x27;.location&#x27;</span>).text()</span><br><span class="line">      &#125;</span><br><span class="line">      print(product)</span><br><span class="line">      save_to_mongo(product)</span><br></pre></td></tr></table></figure>

<h6 id="保存到-MongoDB"><a href="#保存到-MongoDB" class="headerlink" title="保存到 MongoDB"></a>保存到 MongoDB</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MONGO_URL = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">MONGO_DB = <span class="string">&#x27;taobao&#x27;</span></span><br><span class="line">MONGO_COLLECTION = <span class="string">&#x27;products&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span>(<span class="params">result</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  保存至MongoDB</span></span><br><span class="line"><span class="string">  :param result: 结果</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      <span class="keyword">if</span> db[MONGO_COLLECTION].insert(result):</span><br><span class="line">          print(<span class="string">&#x27;存储到MongoDB成功&#x27;</span>)</span><br><span class="line">  <span class="keyword">except</span> Exception:</span><br><span class="line">      print(<span class="string">&#x27;存储到MongoDB失败&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>quote()</p>
<p>单个字符串编码，url 多个字符串编码用 urlencode</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">KEYWORD = <span class="string">&#x27;ipad&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;https://s.taobao.com/search?q=&#x27;</span> + quote(KEYWORD)</span><br></pre></td></tr></table></figure>

<h6 id="遍历每页"><a href="#遍历每页" class="headerlink" title="遍历每页"></a>遍历每页</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MAX_PAGE = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  遍历每一页</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, MAX_PAGE + <span class="number">1</span>):</span><br><span class="line">      index_page(i)</span><br><span class="line">  browser.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main()</span><br></pre></td></tr></table></figure>





<h6 id="Chrome-Handless-模式"><a href="#Chrome-Handless-模式" class="headerlink" title="Chrome Handless 模式"></a>Chrome Handless 模式</h6><p>Chrome59版本开始已开始支持 Handless 模式，也就是无界面模式，这样爬取的时候就不会弹出浏览器了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">browser = webdriver.Chrome(chrome_options=chrome_options)</span><br></pre></td></tr></table></figure>

<h6 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h6><p>可以把常量设置放 Config.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MONGO_URL = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">MONGO_DB = <span class="string">&#x27;taobao&#x27;</span></span><br><span class="line">MONGO_COLLECTION = <span class="string">&#x27;products&#x27;</span></span><br><span class="line">KEYWORD = <span class="string">&#x27;ipad&#x27;</span></span><br><span class="line">MAX_PAGE = <span class="number">100</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>from config import *</code> 导入</p>
<h6 id="对接-Firefox"><a href="#对接-Firefox" class="headerlink" title="对接 Firefox"></a>对接 Firefox</h6><p>只需要更改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser = webdriver.Firefox()</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-数据存储</title>
    <url>/2022/04/12/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h4 id="5-1-文件存储"><a href="#5-1-文件存储" class="headerlink" title="5.1 文件存储"></a>5.1 文件存储</h4><h5 id="5-1-1-TXT-文本存储"><a href="#5-1-1-TXT-文本存储" class="headerlink" title="5.1.1 TXT 文本存储"></a>5.1.1 TXT 文本存储</h5><p>保存知乎上近期热点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Safari/605.1.15&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">html = requests.get(url, headers=headers).text</span><br><span class="line">doc = pq(html)</span><br><span class="line"><span class="comment"># items = doc(&#x27;.css-4cffwv&#x27;)</span></span><br><span class="line">items = doc(<span class="string">&#x27;.css-4cffwv .css-vurnku .css-1as7ang&#x27;</span>).items()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    topic = item(<span class="string">&#x27;.css-1g4zjtl a&#x27;</span>).text()</span><br><span class="line">    des = item(<span class="string">&#x27;.css-13jrecd&#x27;</span>).text()</span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&#x27;explore.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    file.write(<span class="string">&#x27;\n&#x27;</span>.join([topic, des]))</span><br><span class="line">    file.write(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;=&#x27;</span> * <span class="number">50</span> + <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">    file.close()</span><br></pre></td></tr></table></figure>

<p>open 第一个参数为保存文件名称，第二个参数为 a 代表追加方式写入到文本</p>
<p>写入完成后需要调用 close 方法关闭文件对象</p>
<h6 id="打开方式"><a href="#打开方式" class="headerlink" title="打开方式"></a>打开方式</h6><table>
<thead>
<tr>
<th>打开方式</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>只读方式打开，文件指针放在文件开头</td>
</tr>
<tr>
<td>rb</td>
<td>以二进制只读方式打开一个文件，文件指针放在文件开头</td>
</tr>
<tr>
<td>r+</td>
<td>以读写方式打开一个文件，文件指针放在文件开头</td>
</tr>
<tr>
<td>rb+</td>
<td>以二进制读写方式打开一个文件，文件指针放在文件开头</td>
</tr>
<tr>
<td>w</td>
<td>以写入方式打开一个文件，文件已存在会覆盖，不存在则创建</td>
</tr>
<tr>
<td>wb</td>
<td>以二进制写入方式打开一个文件，文件已存在会覆盖，不存在则创建</td>
</tr>
<tr>
<td>w+</td>
<td>以读写入方式打开一个文件，文件已存在会覆盖，不存在则创建</td>
</tr>
<tr>
<td>wb+</td>
<td>以二进制读写方式打开一个文件，文件已存在会覆盖，不存在则创建</td>
</tr>
<tr>
<td>a</td>
<td>以追加方式打开一个文件，文件已存在新内容写入已有内容之后，不存在则创建</td>
</tr>
<tr>
<td>ab</td>
<td>以二进制追加方式打开一个文件，文件已存在新内容写入已有内容之后，不存在则创建</td>
</tr>
<tr>
<td>a+</td>
<td>以读写方式打开一个文件，文件已存在新内容写入已有内容之后，不存在则创建</td>
</tr>
<tr>
<td>ab+</td>
<td></td>
</tr>
</tbody></table>
<h6 id="简化写法"><a href="#简化写法" class="headerlink" title="简化写法"></a>简化写法</h6><p>with as 语法，with 控制块结束时，文件会自动关闭，不需要调用 close</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;explore.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&#x27;\n&#x27;</span>.join([topic, des]))</span><br><span class="line">    file.write(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;=&#x27;</span> * <span class="number">50</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="5-1-2-JSON-文件存储"><a href="#5-1-2-JSON-文件存储" class="headerlink" title="5.1.2 JSON 文件存储"></a>5.1.2 JSON 文件存储</h5><h6 id="读取-JSON"><a href="#读取-JSON" class="headerlink" title="读取 JSON"></a>读取 JSON</h6><p>可以调用 JSON 库的 loads() 方法将 JSON 文本字符串转为 JSON 对象，通过 dumps() 将 JSON 对象转为文本字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;[&#123;&quot;name&quot;: &quot;Bob&quot;&#125;,&#123;&quot;gender&quot;: &quot;male&quot;&#125;]&#x27;</span></span><br><span class="line">data = json.loads(<span class="built_in">str</span>)</span><br><span class="line">print(data)</span><br><span class="line"><span class="comment">#转成JSON就可以用索引获取内容了</span></span><br><span class="line">data[<span class="number">0</span>][<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">data[<span class="number">0</span>].get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">data[<span class="number">0</span>].get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>获取键值推荐使用 get 方法，如果键名不存在不会报错，返回None，get 方法还可以传入第二个参数（默认值）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">  <span class="built_in">str</span> = file.read()</span><br><span class="line">  data = json.loads(<span class="built_in">str</span>)</span><br><span class="line">  print(data)</span><br></pre></td></tr></table></figure>

<h6 id="输出JSON"><a href="#输出JSON" class="headerlink" title="输出JSON"></a>输出JSON</h6><p>将JSON对象转为字符串，写入文本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>&#125;, &#123;<span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">  file.write(json.dumps(data))</span><br></pre></td></tr></table></figure>

<p>如果想保存JSON格式，再加一个参数 indent，代表缩进字符个数</p>
<p>输出中文，加参数 ensure_ascii 为 False</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file.write(json.dumps(data, indent=<span class="number">2</span>, ensure_ascii=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>

<h5 id="5-1-3-CSV-文件存储"><a href="#5-1-3-CSV-文件存储" class="headerlink" title="5.1.3 CSV 文件存储"></a>5.1.3 CSV 文件存储</h5><p>逗号分隔值或字符分隔值，文件以纯文本形式存储表格数据</p>
<h6 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile)</span><br><span class="line">    writer.writerow([<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>])</span><br><span class="line">    writer.writerow([<span class="string">&#x27;10001&#x27;</span>, <span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;20&#x27;</span>])</span><br><span class="line">    writer.writerow([<span class="string">&#x27;10002&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;21&#x27;</span>])</span><br><span class="line">    writer.writerow([<span class="string">&#x27;10003&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;22&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>首先打开 data.csv 文件，模式为 w 写入，调用 csv 库的 writer 方法初始化写入对象，调用 writerow() 方法传入写入的每行数据</p>
<p>以文本方式打开，写入的文本默认以逗号分隔</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span>,name,age</span><br><span class="line"><span class="number">10001</span>,Mike,<span class="number">20</span></span><br><span class="line"><span class="number">10002</span>,Bob,<span class="number">21</span></span><br><span class="line"><span class="number">10003</span>,Jack,<span class="number">22</span></span><br></pre></td></tr></table></figure>

<p>也可以用 Excel 打开，每个值对应一个单元格</p>
<p>可以指定分隔符号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer = csv.writer(csvfile,delimiter=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment">#文本方式打开</span></span><br><span class="line"><span class="built_in">id</span> name age</span><br><span class="line"><span class="number">10001</span> Mike <span class="number">20</span></span><br><span class="line"><span class="number">10002</span> Bob <span class="number">21</span></span><br><span class="line"><span class="number">10003</span> Jack <span class="number">22</span></span><br></pre></td></tr></table></figure>

<p>Excel 打开只有一个单元格显示所有值了</p>
<p>writerrows() 写入多行，参数需要二维列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer = csv.writer(csvfile)</span><br><span class="line">writer.writerow([<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>])</span><br><span class="line">writer.writerows([[<span class="string">&#x27;10001&#x27;</span>, <span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;20&#x27;</span>],[<span class="string">&#x27;10002&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;21&#x27;</span>],[<span class="string">&#x27;10003&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;22&#x27;</span>]])</span><br></pre></td></tr></table></figure>

<ul>
<li>字典的写入方式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    fieldnames = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</span><br><span class="line">    writer.writeheader() <span class="comment">#写入头信息</span></span><br><span class="line">    writer.writerow(&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;10001&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    reader = csv.reader(csvfile)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        print(row)</span><br></pre></td></tr></table></figure>

<p>构造 Reader 对象，遍历输出每行内容，每行都是一个列表形式</p>
<ul>
<li>pandas</li>
</ul>
<p>利用 read_csv 方法将数据从 csv 中读取出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>



<h4 id="5-2-关系型数据库存储"><a href="#5-2-关系型数据库存储" class="headerlink" title="5.2 关系型数据库存储"></a>5.2 关系型数据库存储</h4><p>基于关系模型的数据库，关系模型是通过二维表来保存的，存储方式是行列组成的表</p>
<h5 id="5-2-1-MySQL-存储"><a href="#5-2-1-MySQL-存储" class="headerlink" title="5.2.1 MySQL 存储"></a>5.2.1 MySQL 存储</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;12345678&#x27;</span>,port=<span class="number">3306</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">cursor.execute(<span class="string">&#x27;SELECT VERSION()&#x27;</span>)</span><br><span class="line">data = cursor.fetchone()</span><br><span class="line">print(<span class="string">&#x27;Database version:&#x27;</span>, data)</span><br><span class="line">cursor.execute(<span class="string">&#x27;CREATE DATABASE spiders DEFAULT CHARACTER SET utf8&#x27;</span>)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<p>通过 PyMySQL 的 connect() 方法声明一个 MySQL 连接对象 db，端口默认 3306</p>
<p>连接成功后需要调用 cursor 获得 MySQL 的操作游标，利用游标来执行 SQL语句，直接用 execute() 方法来执行</p>
<p>fetchone 方法来获得第一条数据</p>
<p>第二句创建数据库的操作，数据库名 spiders，默认编码 UTF-8</p>
<p>终端登录数据库 mysql -uroot -p</p>
<p>show databases; 查询创建成功的数据库</p>
<h6 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h6><p>创建了数据库后，连接时需要额外参数 db</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;12345678&#x27;</span>,port=<span class="number">3306</span>,db=<span class="string">&#x27;spiders&#x27;</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">&#x27;CREATE TABLE IF NOT EXISTS students (id VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, age INT NOT NULL, PRIMARY KEY (id))&#x27;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<h6 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span> = <span class="string">&#x27;20120001&#x27;</span></span><br><span class="line">user = <span class="string">&#x27;Bob&#x27;</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line">db = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;12345678&#x27;</span>,port=<span class="number">3306</span>,db=<span class="string">&#x27;spiders&#x27;</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">&#x27;INSERT INTO students(id, name, age) values(%s, %s, %s)&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql, (<span class="built_in">id</span>, user, age))</span><br><span class="line">    db.commit()<span class="comment">#插入、更新、删除 都需要commit</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    db.rollback()<span class="comment">#执行失败回滚</span></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<p>优化插入方法</p>
<p>实现传入一个字典来插入数据的方法，不需要去修改SQL语句和插入操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>, user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;12345678&#x27;</span>, port=<span class="number">3306</span>, db=<span class="string">&#x27;spiders&#x27;</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;20120003&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">table = <span class="string">&#x27;students&#x27;</span></span><br><span class="line">keys = <span class="string">&#x27;,&#x27;</span>.join(data.keys()) <span class="comment">#id,user,age</span></span><br><span class="line">values = <span class="string">&#x27;,&#x27;</span>.join([<span class="string">&#x27;%s&#x27;</span>] * <span class="built_in">len</span>(data))</span><br><span class="line">sql = <span class="string">f&#x27;INSERT INTO <span class="subst">&#123;table&#125;</span>(<span class="subst">&#123;keys&#125;</span>) VALUES(<span class="subst">&#123;values&#125;</span>)&#x27;</span>.<span class="built_in">format</span>(table=table, keys=keys, values=values)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> cursor.execute(sql, <span class="built_in">tuple</span>(data.values())):</span><br><span class="line">        print(<span class="string">&#x27;Success&#x27;</span>)</span><br><span class="line">        db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    db.rollback()</span><br><span class="line">    print(<span class="string">&#x27;Failed&#x27;</span>)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<h6 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h6><p>如果数据存在，则更新数据，如果数据不存在，则插入数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>, user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;12345678&#x27;</span>, port=<span class="number">3306</span>, db=<span class="string">&#x27;spiders&#x27;</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;20120003&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line">table = <span class="string">&#x27;students&#x27;</span></span><br><span class="line">keys = <span class="string">&#x27;,&#x27;</span>.join(data.keys()) <span class="comment">#id,user,age</span></span><br><span class="line">values = <span class="string">&#x27;,&#x27;</span>.join([<span class="string">&#x27;%s&#x27;</span>] * <span class="built_in">len</span>(data))</span><br><span class="line">sql = <span class="string">f&#x27;INSERT INTO <span class="subst">&#123;table&#125;</span>(<span class="subst">&#123;keys&#125;</span>) VALUES (<span class="subst">&#123;values&#125;</span>) ON DUPLICATE KEY UPDATE&#x27;</span>.<span class="built_in">format</span>(table=table,keys=keys,values=values)</span><br><span class="line">update = <span class="string">&#x27;,&#x27;</span>.join([<span class="string">&quot; &#123;key&#125; = %s&quot;</span>.<span class="built_in">format</span>(key = key) <span class="keyword">for</span> key <span class="keyword">in</span> data])</span><br><span class="line">sql+=update</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> cursor.execute(sql, <span class="built_in">tuple</span>(data.values())*<span class="number">2</span>):</span><br><span class="line">        print(<span class="string">&#x27;Success&#x27;</span>)</span><br><span class="line">        db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    db.rollback()</span><br><span class="line">    print(<span class="string">&#x27;Failed&#x27;</span>)</span><br><span class="line">db.close()</span><br><span class="line"><span class="comment">#INSERT INTO students(id,name,age) VALUES (%s,%s,%s) ON DUPLICATE KEY UPDATEid = %s,name = %s,age = %s</span></span><br></pre></td></tr></table></figure>

<p>ON DUPLICATE KEY UPDATE 主键已存在就执行更新操作</p>
<h6 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>, user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;12345678&#x27;</span>, port=<span class="number">3306</span>, db=<span class="string">&#x27;spiders&#x27;</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">table = <span class="string">&#x27;students&#x27;</span></span><br><span class="line">condition = <span class="string">&#x27;age &gt; 22&#x27;</span></span><br><span class="line">sql = <span class="string">f&#x27;DELETE FROM <span class="subst">&#123;table&#125;</span> WHERE <span class="subst">&#123;condition&#125;</span>&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<h6 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>, user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;12345678&#x27;</span>, port=<span class="number">3306</span>, db=<span class="string">&#x27;spiders&#x27;</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">&#x27;SELECT * FROM students WHERE age &gt; 18&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    print(<span class="string">&#x27;Count:&#x27;</span>, cursor.rowcount) <span class="comment">#查询结果条数 总共2条</span></span><br><span class="line">    one = cursor.fetchone() </span><br><span class="line">    print(<span class="string">&#x27;One:&#x27;</span>, one) <span class="comment">#获取结果第一条</span></span><br><span class="line">    results = cursor.fetchall() <span class="comment">#获取到剩下的1条 按指针偏移查找的 fetchone 已取了一条</span></span><br><span class="line">    print(<span class="string">&#x27;Result Type:&#x27;</span>, <span class="built_in">type</span>(results))</span><br><span class="line">    print(<span class="string">&#x27;Results:&#x27;</span>, results)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">        print(row)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">Count: <span class="number">2</span></span><br><span class="line">One: (<span class="string">&#x27;20120001&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">Result Type: &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">Results</span>:</span> ((<span class="string">&#x27;20120002&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">22</span>),)</span><br><span class="line">(<span class="string">&#x27;20120002&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">22</span>)</span><br></pre></td></tr></table></figure>

<p>还可以用 while 循环加 fetchone 方法获取所有数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">row = cursor.fetchone()</span><br><span class="line"><span class="keyword">while</span> row:</span><br><span class="line">  print(<span class="string">&#x27;Row:&#x27;</span>, row)</span><br><span class="line">  row = cursor.fetchone()<span class="comment">#每循环一次 指针就会偏移一条数据</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3-非关系型数据库"><a href="#5-3-非关系型数据库" class="headerlink" title="5.3 非关系型数据库"></a>5.3 非关系型数据库</h4><p>基于键值对的，数据之间没有耦合性，性能高</p>
<p>文档型数据库：MongoDB</p>
<p>键值存储数据库：Redis、Oracle BDB</p>
<h5 id="5-3-1-MongoDB-存储"><a href="#5-3-1-MongoDB-存储" class="headerlink" title="5.3.1 MongoDB 存储"></a>5.3.1 MongoDB 存储</h5><p>基于分布式文件存储的开源数据库系统，内容存储形式类似 JSON 对象，字段值可以包含其它文档、数组及文档数组</p>
<h6 id="连接-MongoDB"><a href="#连接-MongoDB" class="headerlink" title="连接 MongoDB"></a>连接 MongoDB</h6><p>使用 PyMongo 库里的 MongoClient，第一个参数地址 host，第二个参数为端口默认27017</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">27017</span>)</span><br><span class="line"><span class="comment">#第一个参数host还可传入MongoDB的连接字符串，以mongodb开头</span></span><br><span class="line">client = MongoClient(<span class="string">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line">client = MongoClient()</span><br></pre></td></tr></table></figure>

<p>这样就创建 MongoDB 的连接对象了</p>
<h6 id="指定数据库"><a href="#指定数据库" class="headerlink" title="指定数据库"></a>指定数据库</h6><p>指定操作哪个数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = client.test <span class="comment">#调用client的test即可返回test数据库</span></span><br><span class="line"><span class="comment">#也可以</span></span><br><span class="line">db = client[<span class="string">&#x27;test&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h6 id="指定集合"><a href="#指定集合" class="headerlink" title="指定集合"></a>指定集合</h6><p>MongoDB的每个数据库又包含许多集合，类似关系型数据库中的表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">collection &#x3D; db.students</span><br><span class="line">collection &#x3D; db[&#39;students&#39;]</span><br></pre></td></tr></table></figure>

<h6 id="插入数据-1"><a href="#插入数据-1" class="headerlink" title="插入数据"></a>插入数据</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">student1 = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;2017002&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">student2 = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;2017003&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.tests</span><br><span class="line">collection = db.students</span><br><span class="line">result = collection.insert_one(student1) <span class="comment">#单条插入</span></span><br><span class="line">result = collection.insert_many([student1, student2]) <span class="comment">#多条插入</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<h6 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h6><p>find_one()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = collection.find_one(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>&#125;)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">&#123;<span class="string">&#x27;_id&#x27;</span>: ObjectId(<span class="string">&#x27;62554aac23dcb7329838bd6b&#x27;</span>), <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;2017001&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>多了个_id属性 ，也可跟进 ObjectId来查询</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bson.objectid <span class="keyword">import</span> ObjectId</span><br><span class="line">result = collection.find_one(&#123;<span class="string">&#x27;_id&#x27;</span>: ObjectId(<span class="string">&#x27;62554aac23dcb7329838bd6b&#x27;</span>)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p>find()</p>
<p>多条数据查询 find() 返回一个生成器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = collection.find(&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;)<span class="comment">#查询年龄20数据</span></span><br><span class="line">result = collection.find(&#123;<span class="string">&#x27;age&#x27;</span>: &#123;<span class="string">&#x27;$gt&#x27;</span>: <span class="number">20</span>&#125;&#125;) <span class="comment">#年龄大于20数据</span></span><br></pre></td></tr></table></figure>

<ul>
<li>比较符号</li>
</ul>
<p>$lt 小于 $gt大小 $lte小于等于 $gte大于等于 $ne不等于 $in 在范围内 $nin 不在范围内</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: &#123;<span class="string">&#x27;$in&#x27;</span>: [<span class="number">20</span>, <span class="number">33</span>]&#125;&#125;</span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: &#123;<span class="string">&#x27;$nin&#x27;</span>: [<span class="number">20</span>, <span class="number">33</span>]&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>还可进行正则匹配查询，如 以M开头的学生数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = connection.find(&#123;<span class="string">&#x27;name&#x27;</span>: &#123;<span class="string">&#x27;$regex&#x27;</span>: <span class="string">&#x27;^M.*&#x27;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#$regex 匹配正则表达式 </span></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: &#123;<span class="string">&#x27;$regex&#x27;</span>: <span class="string">&#x27;^M.*&#x27;</span>&#125;&#125;</span><br><span class="line"><span class="comment">#$exists 属性是否存在 </span></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: &#123;<span class="string">&#x27;$exists&#x27;</span>: <span class="string">&#x27;True&#x27;</span>&#125;&#125;</span><br><span class="line"><span class="comment">#$type 类型判断</span></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: &#123;<span class="string">&#x27;$type&#x27;</span>: <span class="string">&#x27;int&#x27;</span>&#125;&#125;</span><br><span class="line"><span class="comment">#$mod 数字模操作</span></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: &#123;<span class="string">&#x27;$mod&#x27;</span>: [<span class="number">5</span>, <span class="number">0</span>]&#125;&#125;</span><br><span class="line"><span class="comment">#$text 文本查询</span></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: &#123;<span class="string">&#x27;$text&#x27;</span>: <span class="string">&#x27;Mike&#x27;</span>&#125;&#125;</span><br><span class="line"><span class="comment">#$where 高级条件查询 </span></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: &#123;<span class="string">&#x27;$where&#x27;</span>: <span class="string">&#x27;^M.*&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>更详细 <a href="https://docs.mongodb.com/manual/reference/operator/query">https://docs.mongodb.com/manual/reference/operator/query</a></p>
<h6 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h6><p>统计查询结果有多少条，count()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = collection.find().count()</span><br><span class="line"><span class="comment">#或者统计符合某个条件的数据</span></span><br><span class="line">count = collection.find(&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;).count</span><br></pre></td></tr></table></figure>

<h6 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h6><p>sort() 方法，其中传入排序的字段及升降序标志即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = collection.find().sort(<span class="string">&#x27;name&#x27;</span>, pymongo.ASCENDING)</span><br><span class="line">print([result[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">for</span> result <span class="keyword">in</span> results])</span><br><span class="line"><span class="comment">#降序 pymongo.DESCENDING</span></span><br></pre></td></tr></table></figure>

<h6 id="偏移"><a href="#偏移" class="headerlink" title="偏移"></a>偏移</h6><p>只想取某几个元素，利用 skip() 方法偏移几个位置，比如偏移 2 就忽略前两个元素，得到第3个元素</p>
<p>还可利用 limit() 方法限制返回个数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = collection.find().sort(<span class="string">&#x27;name&#x27;</span>, pymongo.ASCENDING).skip(<span class="number">2</span>)</span><br><span class="line">results = collection.find().sort(<span class="string">&#x27;name&#x27;</span>, pymongo.ASCENDING).skip(<span class="number">2</span>).limit(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h6 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h6><p>update() 方法，指定更新的条件和更新后的数据即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collection = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Kevin&#x27;</span>&#125;</span><br><span class="line">student = collection.find_one(condition)</span><br><span class="line">student[<span class="string">&#x27;age&#x27;</span>] = <span class="number">25</span></span><br><span class="line">result = collection.update(collection, student)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment">#先将数据查询出来，修改年龄，调用update更新</span></span><br></pre></td></tr></table></figure>

<p>也可用 $set 操作符更新</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = collection.update(condition, &#123;<span class="string">&#x27;$set&#x27;</span>: student&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><p>delete_one() delete_many()</p>
<h6 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h6><h5 id="5-3-2-Redis-存储"><a href="#5-3-2-Redis-存储" class="headerlink" title="5.3.2 Redis 存储"></a>5.3.2 Redis 存储</h5><p>基于内存的高效的键值型非关系型数据库</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-基本库使用</title>
    <url>/2022/04/11/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E5%9F%BA%E6%9C%AC%E5%BA%93%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>urllib、request</p>
<h4 id="3-基本库使用"><a href="#3-基本库使用" class="headerlink" title="3. 基本库使用"></a>3. 基本库使用</h4><h5 id="3-1-urllib"><a href="#3-1-urllib" class="headerlink" title="3.1 urllib"></a>3.1 urllib</h5><p>Python内置 HTTP 请求库，包含4个模块</p>
<ul>
<li>request</li>
</ul>
<p>基本 HTTP 请求模块，用来模拟发送请求</p>
<ul>
<li>error</li>
</ul>
<p>异常处理，如果出现请求错误，可以捕获这些异常</p>
<ul>
<li>parse</li>
</ul>
<p>工具模块，提供了许多 URL 处理方法 如拆分、解析、合并</p>
<ul>
<li>robotparser</li>
</ul>
<p>识别网站 robots.txt 文件，然后判断哪些网站可以爬，实际用的少</p>
<h6 id="3-1-1-发送请求"><a href="#3-1-1-发送请求" class="headerlink" title="3.1.1 发送请求"></a>3.1.1 发送请求</h6><ol>
<li>urlopen() </li>
</ol>
<p>可以完成简单请求和网页抓取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> http.client <span class="keyword">import</span> HTTPResponse</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;https://www.python.org&#x27;</span>) <span class="comment">#type: HTTPResponse</span></span><br><span class="line">print(<span class="built_in">type</span>(response)) //&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">http</span>.<span class="title">client</span>.<span class="title">HTTPResponse</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params">response.read(<span class="params"></span>).decode(<span class="params"><span class="string">&#x27;utf-8&#x27;</span></span>)</span>)</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params">response.status</span>)</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params">response.getheaders(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params">response.getheader(<span class="params"><span class="string">&#x27;Server&#x27;</span></span>)</span>)</span></span><br></pre></td></tr></table></figure>

<p>调用 read 方法可以得到返回的网页内容</p>
<blockquote>
<p>response 敲属性代码没提示，加上类型注释 #type: HTTPResponse</p>
<p>或者使用 isinstance 指定 assert isinstance(response, HTTPResponse)</p>
</blockquote>
<p>urlopen 的参数 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlopen(url, data=<span class="literal">None</span>, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,*, cafile=<span class="literal">None</span>, capath=<span class="literal">None</span>, cadefault=<span class="literal">False</span>, context=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>data参数： 可选，如果是字节流编码格式内容，即 bytes 类型，需要通过 bytes() 方法转换，如果传递了参数则是 POST 方式请求</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> http.client <span class="keyword">import</span> HTTPResponse</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">bytes</span>(urllib.parse.urlencode(&#123;<span class="string">&#x27;word&#x27;</span>: <span class="string">&#x27;hello&#x27;</span>&#125;),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>, data=data) <span class="comment">#type: HTTPResponse</span></span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure>

<p>byte() 方法第一个参数需要 str 类型，需要用 urllib.parse 模块里的 urlencode() 方法将参数字典转化为字符串</p>
<p>站点 <a href="http://httpbin.org/post">http://httpbin.org/post</a>  可以提供 HTTP 请求测试</p>
<p>timeout参数： 超时时间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"><span class="keyword">from</span> http.client <span class="keyword">import</span> HTTPResponse</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = urllib.request.urlopen(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>, timeout=<span class="number">0.1</span>)<span class="comment">#type: HTTPResponse</span></span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(e.reason, socket.timeout):</span><br><span class="line">        print(<span class="string">&#x27;TIME OUT&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>其它参数</li>
</ul>
<p>context 参数：必须是 ssl.SSLContext 类型，用来指定 SSL 设置</p>
<p>cafile 和 capath ：分别指定 CA 证书 和 它的路径，这个在请求 HTTPS 链接时会有用</p>
<ol start="2">
<li>Request</li>
</ol>
<p>如果需要 Headers 等信息，可以利用更加强大的 Resquest 类来构建</p>
<p>利用 Request 可以将请求独立成一个对象，更加丰富的配置参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> http.client <span class="keyword">import</span> HTTPResponse</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(<span class="string">&#x27;https://python.org&#x27;</span>)</span><br><span class="line">response = urllib.request.urlopen(request) <span class="comment">#type: HTTPResponse</span></span><br><span class="line">print(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>Request 参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url, data=<span class="literal">None</span>, headers=&#123;&#125;,origin_req_host=<span class="literal">None</span>, unverifiable=<span class="literal">False</span>,method=<span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>url：必传参数，其它都是可选</p>
<p>data：如果要传，必须传 bytes（字节流）类型的，如果它是字典，先用 urllib.parse 模块里的 urlenode() 编码</p>
<p>headers： 是一个字典，可以在构建请求时通过 headers 直接构建，也可通过调用请求实例的 add_header()方法添加，可以通过修改 User-Agent 来伪装浏览器，默认是 Python-urllib</p>
<p>origin_req_host：请求方 host 名称或 IP 地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.client <span class="keyword">import</span> HTTPResponse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/4.0 (compatible)&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;httpbin.org&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dict</span> = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Germey&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data = <span class="built_in">bytes</span>(urllib.parse.urlencode(<span class="built_in">dict</span>), encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">req = request.Request(url=url, data=data, headers=headers, method=<span class="string">&#x27;POST&#x27;</span>)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line"><span class="comment"># type:HTTPResponse</span></span><br><span class="line">print(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))&#125;</span><br></pre></td></tr></table></figure>

<p>unverifiable：这个请求是否是无法验证的，默认 false，</p>
<p>method：请求方法 POST GET</p>
<p>headers 也可以用 add_header() 方法添加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">req = request.Request(url=url, data=data, method=<span class="string">&#x27;POST&#x27;</span>)</span><br><span class="line">req.add_header(<span class="string">&#x27;User-Agent&#x27;</span>, <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>高级用法</li>
</ol>
<p>更高级的操作（Cookie处理、设置代理）该怎么操作？使用 Handler，可以理解为各种处理器</p>
<p>urllib.request 模块里的 BaseHandler 类是所有 Handler 的父类</p>
<p>子类：</p>
<p>HTTPDefaultErrorHandler：处理 HTTP 响应错误，错误会抛出 HTTPError 类型异常</p>
<p>HTTPRedirectHandler：用于处理重定向</p>
<p>HTTPCookieProcessor：用于处理 Cookies</p>
<p>ProxyHandler：用于设置代理</p>
<p>HTTPPasswordMgr：用于管理密码</p>
<p>HTTPBasicAuthHandler：用于管理认证，如果一个链接打开时需要认证，可以用它来解决认证问题</p>
<p>OpenerDirector：可以称为 Opener，可以利用 Handler 来构建 Opener</p>
<p>用法：登录验证、代理、Cookie</p>
<h6 id="3-1-2-处理异常"><a href="#3-1-2-处理异常" class="headerlink" title="3.1.2 处理异常"></a>3.1.2 处理异常</h6><ol>
<li>URLError</li>
</ol>
<p>由 request 模块生成的异常都可以通过捕获这个类来处理，有一个 reason 属性，返回错误的原因</p>
<p>例子：打开一个不存在的页面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,error</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = request.urlopen(<span class="string">&#x27;https://cuiqingcai.com/index.htm&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>HTTPError</li>
</ol>
<p>URLError 的子类，专门用来处理 HTTP 请求错误，比如认证失败，有3个属性，code，reason，headers</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.code, e.reason, e.headers, seq=<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>URLError 是 HTTPError 的父类，所以先捕获子类错误再捕获父类错误</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.code, e.reason, e.headers, seq=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;success&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>reason 返回的不一定是字符串，也可能是一个对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,error</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">...</span><br><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">  print(<span class="built_in">type</span>(e.reason))</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">isinstance</span>(e.reason, socket.timeout):</span><br><span class="line">    print(<span class="string">&#x27;TIME OUT&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h6 id="3-1-3-解析链接"><a href="#3-1-3-解析链接" class="headerlink" title="3.1.3 解析链接"></a>3.1.3 解析链接</h6><p>urllib 库还提供了 parse 模块，定义了处理 URL 的标准接口，例如实现 URL 各部分的抽取、合并及链接转换</p>
<ol>
<li>urlparse()</li>
</ol>
<p>实现 URL 的识别和分段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line">result = urlparse(<span class="string">&#x27;http://www.baidu.com/index.html;user?id=s#comment&#x27;</span>)</span><br><span class="line">print(<span class="built_in">type</span>(result), result)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">urllib</span>.<span class="title">parse</span>.<span class="title">ParseResult</span>&#x27;&gt; </span></span><br><span class="line"><span class="class"><span class="title">ParseResult</span>(<span class="params">scheme=<span class="string">&#x27;http&#x27;</span>, netloc=<span class="string">&#x27;www.baidu.com&#x27;</span>, path=<span class="string">&#x27;/index.html&#x27;</span>, params=<span class="string">&#x27;user&#x27;</span>, query=<span class="string">&#x27;id=s&#x27;</span>, fragment=<span class="string">&#x27;comment&#x27;</span></span>)</span></span><br></pre></td></tr></table></figure>

<p>输出结果是 ParseResult 类型，包含 6 个部分，scheme、netloc、path、params、query、fragment</p>
<p>可以用索引顺序来获取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(result.scheme, result[<span class="number">0</span>], result.netloc, result[<span class="number">1</span>], sep=<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>#</code> 后面是锚点，用于直接定位页面内部的下拉位置</p>
<p>urlparse() 有3个参数：urlstring、scheme、allow_fragments</p>
<p>scheme：http或https等 urlstring中不包含 scheme 信息时才生效</p>
<p>allow_fragments：如果被设置为 false，fragment 部分就会被忽略</p>
<ol start="2">
<li>urlunparse()</li>
</ol>
<p>参数是一个可迭代对象，长度必须是6，构造URL</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunparse</span><br><span class="line">data = [<span class="string">&#x27;http&#x27;</span>,<span class="string">&#x27;www.baidu.com&#x27;</span>,<span class="string">&#x27;index.html&#x27;</span>,<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;a=6&#x27;</span>,<span class="string">&#x27;comment&#x27;</span>]</span><br><span class="line">print(urlunparse(data))</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">http://www.baidu.com/index.html;user?a=6#comment</span><br><span class="line"><span class="comment">#这里data用了列表类型，也可以用其它类型比如元组或者特定的数据结构</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>urlsplit()</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlsplit</span><br><span class="line">result = urlsplit(<span class="string">&#x27;http://www.baidu.com/index.html;user?id=s#comment&#x27;</span>)</span><br><span class="line">print(<span class="built_in">type</span>(result), result)</span><br></pre></td></tr></table></figure>

<p>和 urlparse 使用类似，不过不再单独解析 params 部分，只返回 5个 结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">urllib</span>.<span class="title">parse</span>.<span class="title">SplitResult</span>&#x27;&gt; <span class="title">SplitResult</span>(<span class="params">scheme=<span class="string">&#x27;http&#x27;</span>, netloc=<span class="string">&#x27;www.baidu.com&#x27;</span>, path=<span class="string">&#x27;/index.html;user&#x27;</span>, query=<span class="string">&#x27;id=s&#x27;</span>, fragment=<span class="string">&#x27;comment&#x27;</span></span>)</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>urlunsplit()</li>
</ol>
<p>将链接各个部分组合成完成链接，传入参数是一个可迭代对象，如列表、元组，长度必须是5</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunsplit</span><br><span class="line">data = [<span class="string">&#x27;http&#x27;</span>,<span class="string">&#x27;www.baidu.com&#x27;</span>,<span class="string">&#x27;index.html&#x27;</span>,<span class="string">&#x27;a=6&#x27;</span>,<span class="string">&#x27;comment&#x27;</span>]</span><br><span class="line">print(urlunsplit(data))</span><br><span class="line"><span class="comment">#http://www.baidu.com/index.html?a=6#comment</span></span><br></pre></td></tr></table></figure>



<ol start="5">
<li>urljoin()</li>
</ol>
<p>urlunparse 和 urlunsplit 我们可以完成链接的合并，不过必须有特定的长度，链接的每一部分都要清晰的分开</p>
<p>生成链接还有个方法 urljoin() 方法</p>
<p>可以提供一个 base_url 基础链接作为第一个参数，将新的链接作为第二个参数</p>
<p>该方法会分析 base_url 的 scheme、netloc、和path 这3个内容对新链接缺失的部分进行补充</p>
<p>实现连接拼合与生成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"></span><br><span class="line">print(urljoin(<span class="string">&#x27;http://www.baidu.com&#x27;</span>, <span class="string">&#x27;FAQ.html&#x27;</span>))</span><br><span class="line">print(urljoin(<span class="string">&#x27;http://www.baidu.com&#x27;</span>, <span class="string">&#x27;https://cuiqingcai.com/FAQ.html&#x27;</span>))</span><br><span class="line">print(urljoin(<span class="string">&#x27;http://www.baidu.com/about.html&#x27;</span>, <span class="string">&#x27;https://cuiqingcai.com/FAQ.html&#x27;</span>))</span><br><span class="line">print(urljoin(<span class="string">&#x27;http://www.baidu.com/about.html&#x27;</span>, <span class="string">&#x27;https://cuiqingcai.com/FAQ.html?question=2&#x27;</span>))</span><br><span class="line">print(urljoin(<span class="string">&#x27;http://www.baidu.com?wd=abc&#x27;</span>, <span class="string">&#x27;https://cuiqingcai.com/index.php&#x27;</span>))</span><br><span class="line">print(urljoin(<span class="string">&#x27;http://www.baidu.com&#x27;</span>, <span class="string">&#x27;?category=2#comment&#x27;</span>))</span><br><span class="line">print(urljoin(<span class="string">&#x27;www.baidu.com&#x27;</span>, <span class="string">&#x27;?category=2#comment&#x27;</span>))</span><br><span class="line">print(urljoin(<span class="string">&#x27;www.baidu.com#comment&#x27;</span>, <span class="string">&#x27;?category=2&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://www.baidu.com/FAQ.html</span><br><span class="line">https://cuiqingcai.com/FAQ.html</span><br><span class="line">https://cuiqingcai.com/FAQ.html</span><br><span class="line">https://cuiqingcai.com/FAQ.html?question=2</span><br><span class="line">https://cuiqingcai.com/index.php</span><br><span class="line">http://www.baidu.com?category=2#comment</span><br><span class="line">www.baidu.com?category=2#comment</span><br><span class="line">www.baidu.com?category=2</span><br></pre></td></tr></table></figure>

<p>base_url 提供了三项内容 scheme、netloc、path</p>
<p>如果3项在新链接不存在就补充，新链接存在就使用新链接部分，base_url 里的就不起作用了，以右边新链接为准</p>
<ol start="6">
<li>urlencode()</li>
</ol>
<p>将字典序列化为 GET 请求参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line">base_url = <span class="string">&#x27;http://www.baidu.com?&#x27;</span></span><br><span class="line">url = base_url + urlencode(params)</span><br><span class="line">print(url)</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>parse_qs()</li>
</ol>
<p>将请求参数反序列化成字典类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qs</span><br><span class="line">query = <span class="string">&#x27;name=germey&amp;age=22&#x27;</span></span><br><span class="line">print(parse_qs(query))</span><br><span class="line"><span class="comment">#结果 &#123;&#x27;name&#x27;:[&#x27;germey&#x27;],&#x27;age&#x27;:[&#x27;22&#x27;]&#125;</span></span><br></pre></td></tr></table></figure>



<ol start="7">
<li>parse_sql()</li>
</ol>
<p>将参数转化成元组组成的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qsl</span><br><span class="line">query = <span class="string">&#x27;name=germey&amp;age=2&#x27;</span></span><br><span class="line">print(parse_qsl(query))</span><br><span class="line"><span class="comment">#结果 [(&#x27;name&#x27;, &#x27;germey&#x27;), (&#x27;age&#x27;, &#x27;2&#x27;)]</span></span><br></pre></td></tr></table></figure>

<ol start="8">
<li>quote()</li>
</ol>
<p>将内容转化为 URL 编码格式，URL 中带中文参数时，可能导致乱码问题，用这个可以将中文字符转化为 URL 编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">keyword = <span class="string">&#x27;测试&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;https://baidu.com/s?wd=&#x27;</span> + quote(keyword)</span><br><span class="line"><span class="comment">#结果：https://baidu.com/s?wd=%E5%joj</span></span><br></pre></td></tr></table></figure>

<ol start="9">
<li>unquote()</li>
</ol>
<p>可以进行 URL 解码</p>
<h6 id="3-1-4-分析-Robots-协议"><a href="#3-1-4-分析-Robots-协议" class="headerlink" title="3.1.4 分析 Robots 协议"></a>3.1.4 分析 Robots 协议</h6><p>urllib 的 robotparser 模块，可以实现网站 Robots 协议的分析</p>
<ol>
<li>Robots 协议</li>
</ol>
<p>爬虫协议，全名叫网络爬虫排除标准，告诉爬虫和搜索引擎哪些页面可以抓取不抓取，通常是一个 robots.txt 协议</p>
<ol start="2">
<li>robotparser</li>
</ol>
<p>了解 Robots 协议之后，就可以使用 robotparse 模块来解析 robots.txt 了，该模块提供了一个类 RobotFileParse，它可以根据某网站的 robots.txt 文件来判断一个爬虫是否有权限来爬取这个网页</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotFileParser</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line">rp = RobotFileParser()</span><br><span class="line">rp.set_url(<span class="string">&#x27;https://www.jianshu.com/robots.txt&#x27;</span>)</span><br><span class="line">rp.read()</span><br><span class="line"><span class="comment">#判断网页是否可以被抓取</span></span><br><span class="line">print(rp.can_fetch(<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;https://www.jianshu.com/p/823596514412&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>常用几个方法：</p>
<p>set_url()：设置 robots.txt 文件的链接</p>
<p>read()：读取 robots.txt 文件并进行分享，不会返回任何内容，但执行了读取操作</p>
<p>parse()：用来解析 robots.txt 文件，传入的参数是 robots.txt 某些行的内容</p>
<p>can_fetch()：两个参数，第一个 User-agent，第二个要抓取的URL，返回该搜索引擎是否可以抓取这个URL</p>
<p>mtime()：返回上次抓取和分析 robots.txt 时间</p>
<h5 id="3-2-使用-Request"><a href="#3-2-使用-Request" class="headerlink" title="3.2 使用 Request"></a>3.2 使用 Request</h5><h6 id="3-2-1-基本用法"><a href="#3-2-1-基本用法" class="headerlink" title="3.2.1 基本用法"></a>3.2.1 基本用法</h6><ul>
<li>GET 请求</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)</span><br><span class="line">print(<span class="built_in">type</span>(r))</span><br><span class="line">print(r.status_code)</span><br><span class="line">print(<span class="built_in">type</span>(r.text))</span><br><span class="line">print(r.text)</span><br><span class="line">print(r.cookies)</span><br></pre></td></tr></table></figure>

<p>调用 get() 方法实现与 urlopen 相同的操作，得到一个 Response 对象</p>
<p>带参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  requests</span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>, params=params)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

<p>网页的返回类型实际上是 str 类型，JSON格式的，想得到字典格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(r.json())</span><br></pre></td></tr></table></figure>

<p>如果返回结果不是 JSON 格式，会出现解析错误，抛出 json.decoder.JSONDecodeError 异常</p>
<ul>
<li>抓取二进制数据</li>
</ul>
<p>图片、音频、视频这些文件本质上都是二进制码组成</p>
<p>提取图片保存下来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://github.com/favicon.ico&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;vavicon.ico&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f: <span class="comment">#wb写入</span></span><br><span class="line">    f.write(r.content)</span><br><span class="line"><span class="comment">#调用了open方法，第一个参数文件名，第二个参数代表以二进制写的形式打开，可以向文件写入二进制数据</span></span><br></pre></td></tr></table></figure>

<ul>
<li> POST 请求</li>
</ul>
<h6 id="3-2-2-高级用法"><a href="#3-2-2-高级用法" class="headerlink" title="3.2.2 高级用法"></a>3.2.2 高级用法</h6><ol>
<li>文件上传</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;favicon.ico&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125; <span class="comment">#rb读取</span></span><br><span class="line">r = requests.post(<span class="string">&#x27;https://httpbin.org/post&#x27;</span>, files=files)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Cookies</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">print(r.cookies)<span class="comment">#RequestsCookieJar</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> r.cookies.items():</span><br><span class="line">    print(key+<span class="string">&#x27;=&#x27;</span>+value)</span><br></pre></td></tr></table></figure>

<p>模拟Cookies，放 headers里面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">	<span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">  <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r = request.get(<span class="string">&#x27;https://xxxx&#x27;</span>, headers=headers)</span><br></pre></td></tr></table></figure>

<p>也可以通过 cookies 参数来设置，不过需要构建 RequestsCookieJar对象，然后复制下来的 cookies 利用 split 方法分割，再利用 set 方法设置好每个 Cookie 的 key 和 value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cookies = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">jar = requests.cookies.RequestsCookieJar()</span><br><span class="line"><span class="keyword">for</span> cookies <span class="keyword">in</span> cookies.split(<span class="string">&#x27;;&#x27;</span>):</span><br><span class="line">  key, value = cookie.split(<span class="string">&#x27;=&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">  jar.<span class="built_in">set</span>(key, value)</span><br><span class="line">r = request.get(<span class="string">&#x27;https://xxxx&#x27;</span>, cookies=jar)</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>会话维持</li>
</ol>
<p>方便维持一个会话，不用担心 cookies 问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests.get(<span class="string">&#x27;http://httpbin.org/cookies/set/number/123456&#x27;</span>)<span class="comment">#请求这个网址时可以设置一个cookie</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://httpbin.org/cookies&#x27;</span>)</span><br><span class="line">print(r.text)</span><br><span class="line"><span class="comment">#结果&#123;&quot;cookies&quot;: &#123;&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>上面是两个不相关的会话，第一个设置了 cookies，第二个 cookies 为空</p>
<p>使用 session</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = requests.session()</span><br><span class="line">s.get(<span class="string">&#x27;http://httpbin.org/cookies/set/number/123456&#x27;</span>)</span><br><span class="line">r = s.get(<span class="string">&#x27;http://httpbin.org/cookies&#x27;</span>)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

<p>成功获取，两个请求在同一会话，不用担心 cookies 问题</p>
<p>通常用于模拟登录成功之后再进行下一步的操作</p>
<ol start="4">
<li>SSL 证书验证</li>
</ol>
<p>请求一个 HTTPS 站点，但证书验证错误的页面，会报 SSLError 错误，如何避免这个错误？</p>
<p>request 提供了证书验证的功能，使用 verify 参数控制是否检查证书</p>
<p>将 verify 参数设置为 False 即可</p>
<p>当然也可以指定本地证书用作客户端证书，这可以是单个文件（包含秘钥和证书）或一个包含两个文件路径的元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = requests.get(<span class="string">&#x27;https://www.12306.cn&#x27;</span>, cert=(<span class="string">&#x27;/path/server.crt&#x27;</span>, <span class="string">&#x27;/path/key&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>上面的例子，我们需要有 crt 和 key 文件，且指定路径。本地私有证书的key必须是解密状态</p>
<ol start="5">
<li>代理设置</li>
</ol>
<p>某些网站测试请求几次能正常获取，一旦大规模爬取，网站可能会弹出验证码或跳转登录页面内</p>
<p>用代理来解决这个问题，就要用到 proxies 参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://10.10.1.10:3128&quot;</span>,</span><br><span class="line">  <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://10.10.1.10:1080&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">request.get(<span class="string">&quot;https://www.taobao.com&quot;</span>, proxiex=proxies)</span><br></pre></td></tr></table></figure>

<p>若代理需要使用 HTTP Basic Auth，可以使用类似 <a href="http://user:pasword@host:port">http://user:pasword@host:port</a> 这样的语法来设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxiex = &#123;</span><br><span class="line">	<span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://user:password@10.10.1.10:3128&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了 HTTP 代理外，request 还支持 SOCKS 协议的代理</p>
<p>需要安装 socks 这个库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install <span class="string">&#x27;requests[socks]&#x27;</span></span><br></pre></td></tr></table></figure>



<ol start="6">
<li>超时设置</li>
</ol>
<p>timeout 参数</p>
<ol start="7">
<li>身份认证</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://xxx&#x27;</span>, auth=HTTPBasicAuth(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>))</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure>

<p>如果用户名和密码正确，请求会自动认证成功返回200，错误401</p>
<p>也可以传一个元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;http://xxx&#x27;</span>, auth=(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>还提供了其它认证方式，如 OAuth，需要安装 oauth 包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install requests_oauthlib</span><br></pre></td></tr></table></figure>





<ol start="8">
<li>Prepared Request</li>
</ol>
<p>介绍 urllib 时，可以将请求表示为数据结构，各个参数通过一个 Request 对象来表示。这里 requests 也可以做到，这个数据结构叫 Prepared Request</p>
<p>有了 Request 这个对象，就可以将请求当作独立的对象来看待，这样在队列调度时会非常方便</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> requests.sessions <span class="keyword">import</span> Session</span><br><span class="line">s = Session()</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://xxx&#x27;</span>)</span><br><span class="line">prepped = s.prepare_request(r)</span><br><span class="line">r = s.send(prepped)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

<p>调用 Session 的 prepare_request 方法将其转换为一个 Prepared Request 对象，然后调用 send 方法发送即可</p>
<h5 id="3-3-正则表达式"><a href="#3-3-正则表达式" class="headerlink" title="3.3 正则表达式"></a>3.3 正则表达式</h5><p>正则表达式测试工具 <a href="http://tool.oschina.net/regex/">http://tool.oschina.net/regex/</a></p>
<h5 id="3-4-抓取猫眼电影排行"><a href="#3-4-抓取猫眼电影排行" class="headerlink" title="3.4 抓取猫眼电影排行"></a>3.4 抓取猫眼电影排行</h5><p>(爬不了了有滑块验证)</p>
<p>书本配套代码 <a href="https://github.com/Python3WebSpider/MaoYan">https://github.com/Python3WebSpider/MaoYan</a></p>
<p>排行链接  <a href="https://maoyan.com/board/4">https://maoyan.com/board/4</a></p>
<p>第二页链接  <a href="https://maoyan.com/board/4?offset=10">https://maoyan.com/board/4?offset=10</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one_page</span>(<span class="params">url</span>):</span></span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		headers = &#123;</span><br><span class="line">			<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_10; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&#x27;</span></span><br><span class="line">		&#125;</span><br><span class="line">		response = requests.get(url, headers=headers)</span><br><span class="line">		<span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">			<span class="keyword">return</span> response.text</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">	<span class="keyword">except</span> RequestException:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	url = <span class="string">&#x27;https://maoyan.com/board/4&#x27;</span></span><br><span class="line">	html = get_one_page(url)</span><br><span class="line">	print(html)</span><br></pre></td></tr></table></figure>

<p>可以通过浏览器查看源码，选择网络查看原始请求部分</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;board-index board-index-1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/films/1200486&quot;</span> <span class="attr">title</span>=<span class="string">&quot;我不是药神&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-link&quot;</span> <span class="attr">data-act</span>=<span class="string">&quot;boarditem-click&quot;</span> <span class="attr">data-val</span>=<span class="string">&quot;&#123;movieId:1200486&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;//s3plus.meituan.net/v1/mss_e2821d7f0cfe4ac1bf9202ecf9590e67/cdn-prod/file:5788b470/image/loading_2.e3d934bf.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;poster-default&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;https://p0.meituan.net/movie/414176cfa3fea8bed9b579e9f42766b9686649.jpg@160w_220h_1e_1c&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;我不是药神&quot;</span> <span class="attr">class</span>=<span class="string">&quot;board-img&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;board-item-main&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;board-item-content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;movie-item-info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/films/1200486&quot;</span> <span class="attr">title</span>=<span class="string">&quot;我不是药神&quot;</span> <span class="attr">data-act</span>=<span class="string">&quot;boarditem-click&quot;</span> <span class="attr">data-val</span>=<span class="string">&quot;&#123;movieId:1200486&#125;&quot;</span>&gt;</span>我不是药神<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;star&quot;</span>&gt;</span>主演：徐峥,周一围,王传君<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;releasetime&quot;</span>&gt;</span>上映时间：2018-07-05<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;movie-item-number score-num&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;score&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;integer&quot;</span>&gt;</span>9.<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fraction&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>        </span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一部电影信息对应源码是一个 dd 节点</p>
<p>先获取排行信息，在 class 为 board-index 的 i 节点内，提取 i 节点内的信息</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;</span><br></pre></td></tr></table></figure>

<p>图片信息：dd 后面有个 a 节点，内部有两个 img 节点，第二个 img 节点的 data-src 属性是图片的链接，提取第二个 img 节点 data-sr 属性</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src=&quot;(.*?)&quot;</span><br></pre></td></tr></table></figure>

<p>电影名称：后面 p 节点内， class 为 name</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src=&quot;(.*?)&quot;.*?name.*?&gt;(.*?)&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>findall 提取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src=&quot;(.*?)&quot;.*?name.*?&gt;(.*?)&lt;/a&gt;&#x27;</span>, re.S)</span><br><span class="line">items = re.findall(pattern, html)</span><br><span class="line">print(items)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;https://p0.meituan.net/movie/414176cfa3fea8bed9b579e9f42766b9686649.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/1200486&quot; title=&quot;我不是药神&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:1200486&#125;&quot;&gt;我不是药神&#x27;</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;https://p0.meituan.net/movie/8112a8345d7f1d807d026282f2371008602126.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/1297&quot; title=&quot;肖申克的救赎&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:1297&#125;&quot;&gt;肖申克的救赎&#x27;</span>), (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;https://p1.meituan.net/movie/c9b280de01549fcb71913edec05880585769972.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/1206605&quot; title=&quot;绿皮书&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:1206605&#125;&quot;&gt;绿皮书&#x27;</span>), (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;https://p0.meituan.net/movie/609e45bd40346eb8b927381be8fb27a61760914.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/1292&quot; title=&quot;海上钢琴师&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:1292&#125;&quot;&gt;海上钢琴师&#x27;</span>), (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;https://p1.meituan.net/movie/ac8f0004928fbce5a038a007b7c73cec746794.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/1216365&quot; title=&quot;小偷家族&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:1216365&#125;&quot;&gt;小偷家族&#x27;</span>), (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;https://p0.meituan.net/movie/61fea77024f83b3700603f6af93bf690585789.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/1203&quot; title=&quot;霸王别姬&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:1203&#125;&quot;&gt;霸王别姬&#x27;</span>), (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;https://p0.meituan.net/movie/005955214d5b3e50c910d7a511b0cb571445301.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/1211270&quot; title=&quot;哪吒之魔童降世&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:1211270&#125;&quot;&gt;哪吒之魔童降世&#x27;</span>), (<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;https://p1.meituan.net/movie/580d81a2c78bf204f45323ddb4244b6c6821175.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/1303&quot; title=&quot;美丽人生&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:1303&#125;&quot;&gt;美丽人生&#x27;</span>), (<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;https://p1.meituan.net/movie/6bea9af4524dfbd0b668eaa7e187c3df767253.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/4055&quot; title=&quot;这个杀手不太冷&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:4055&#125;&quot;&gt;这个杀手不太冷&#x27;</span>), (<span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;https://p0.meituan.net/moviemachine/c2496a7290a72eac6081321898c347693550574.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/416&quot; title=&quot;盗梦空间&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:416&#125;&quot;&gt;盗梦空间&#x27;</span>)]</span><br></pre></td></tr></table></figure>

<p>写入文件</p>
<p>通过 JSON库的 dumps() 方法实现字典的序列化，ensure_ascii 为 False，保证输出结果是中文形式而不是 Unicode 编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_file</span>(<span class="params">content</span>):</span></span><br><span class="line">	<span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f: <span class="comment">#a appending追加写入</span></span><br><span class="line">		print(<span class="built_in">type</span>(json.dumps(content)))</span><br><span class="line">		f.write(json.dumps(content, ensure_ascii=<span class="literal">False</span>)+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>分页爬取：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">offset</span>):</span></span><br><span class="line">	url = <span class="string">&#x27;https://maoyan.com/board/4?offset=&#x27;</span> + <span class="built_in">str</span>(offset) </span><br><span class="line">	html = get_one_page(url)</span><br><span class="line">	pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src=&quot;(.*?)&quot;.*?name.*?&gt;(.*?)&lt;/a&gt;&#x27;</span>, re.S)</span><br><span class="line">	items = re.findall(pattern, html)</span><br><span class="line">	print(items)</span><br><span class="line">	write_to_file(items)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">		main(offset=i*<span class="number">10</span>)</span><br><span class="line">		time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-解析库使用</title>
    <url>/2022/04/11/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E8%A7%A3%E6%9E%90%E5%BA%93%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="4-解析库使用"><a href="#4-解析库使用" class="headerlink" title="4. 解析库使用"></a>4. 解析库使用</h4><h5 id="4-1-XPath"><a href="#4-1-XPath" class="headerlink" title="4.1 XPath"></a>4.1 XPath</h5><p>更多XPath用法 <a href="http://www.w3school.com.cn/xpath/index.asp">http://www.w3school.com.cn/xpath/index.asp</a></p>
<p>XML 路径语言</p>
<ul>
<li>常用规则</li>
</ul>
<table>
<thead>
<tr>
<th>nodename</th>
<th align="left">选取此节点的所有子节点</th>
</tr>
</thead>
<tbody><tr>
<td>/</td>
<td align="left">从当前节点选取直接子节点</td>
</tr>
<tr>
<td>//</td>
<td align="left">从当前节点选取子孙节点</td>
</tr>
<tr>
<td>.</td>
<td align="left">选取当前节点</td>
</tr>
<tr>
<td>..</td>
<td align="left">选取当前节点的父节点</td>
</tr>
<tr>
<td>@</td>
<td align="left">选取属性</td>
</tr>
</tbody></table>
<p>例如：所有名称为 title，同时属性 lang 的值为 eng 的节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;title[@lang&#x3D;&#39;eng&#39;]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = etree.tostring(html) <span class="comment"># type: bytes</span></span><br><span class="line">print(result.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>导入 lxml 库的 etree 模块，声明一段 HTML 文本，调用 HTML 类进行初始化，这样就成功构造了一个 XPath 解析对象</p>
<p>HTML 文件最后一个 li 节点是没有闭合的，但 etree 模块可以自动修正 HTML 文本，处理后 li 节点被补全，还自动添加了 body、html 节点</p>
<p>toString 输出修正后的 HTML 代码，结果是 bytes 类型，利用 decode 转成 str 类型</p>
<p>也可读取文本进行解析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = etree.parse(<span class="string">&#x27;./test.html&#x27;</span>, etree.HTMLParser())</span><br></pre></td></tr></table></figure>

<h6 id="所有结点"><a href="#所有结点" class="headerlink" title="所有结点"></a>所有结点</h6><p>一般用// 开头的 XPath 规则来选取所有符合要求的节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> lxml.etree <span class="keyword">import</span> _Element</span><br><span class="line">text = <span class="string">&#x27;xxxxx&#x27;</span></span><br><span class="line">html = etree.HTML(text) <span class="comment"># type: _Element</span></span><br><span class="line">result = html.xpath(<span class="string">&#x27;//*&#x27;</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>html.xpath 代码没提示，可以先打印类型 print(type(html)) -&gt; &lt;class ‘lxml.etree._Element’&gt;</p>
<p>再通过导包的方式</p>
</blockquote>
<p>返回形式是一个列表，每个元素是 Element 类型，其后跟了节点的名称，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[&lt;Element html at <span class="number">0x7f8f63e97280</span>&gt;, &lt;Element body at <span class="number">0x7f8f63f225c0</span>&gt;, &lt;Element div at <span class="number">0x7f8f63f22b40</span>&gt;, &lt;Element ul at <span class="number">0x7f8f63f22b80</span>&gt;, &lt;Element li at <span class="number">0x7f8f63f22bc0</span>&gt;, &lt;Element a at <span class="number">0x7f8f63f22c40</span>&gt;, &lt;Element li at <span class="number">0x7f8f63f22c80</span>&gt;, &lt;Element a at <span class="number">0x7f8f63f22cc0</span>&gt;, &lt;Element li at <span class="number">0x7f8f63f22d00</span>&gt;, &lt;Element a at <span class="number">0x7f8f63f22c00</span>&gt;, &lt;Element li at <span class="number">0x7f8f63f22d40</span>&gt;, &lt;Element a at <span class="number">0x7f8f63f22d80</span>&gt;, &lt;Element li at <span class="number">0x7f8f63f22dc0</span>&gt;, &lt;Element a at <span class="number">0x7f8f63f22e00</span>&gt;]</span><br></pre></td></tr></table></figure>

<p>也可指定节点名称</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = html.xpath(<span class="string">&#x27;//li&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h6><p>/ 或 // 查找元素的子节点或子孙节点</p>
<p>例如：选择 li 节点的所有直接 a 子节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = html.xpath(<span class="string">&#x27;//li/a&#x27;</span>) </span><br></pre></td></tr></table></figure>

<p>ul 节点下的所有子孙 a 节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = html.xpath(<span class="string">&#x27;//ul//a&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="父节点"><a href="#父节点" class="headerlink" title="父节点"></a>父节点</h6><p>href 属性为 link4.html 的 a 节点，然后再获取其父结点，然后再获取其 class 属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = html.xpath(<span class="string">&#x27;//a[@href=&quot;link4.html&quot;]/../@class&#x27;</span>)</span><br><span class="line"><span class="comment">#结果：item-1</span></span><br></pre></td></tr></table></figure>

<p>也可以通过 parent:: 获取父节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = html.xpath(<span class="string">&#x27;//a[@href=link4.html/parent::*/@class]&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="属性匹配"><a href="#属性匹配" class="headerlink" title="属性匹配"></a>属性匹配</h6><p>@ 符号进行属性过滤，如果选取 class 为 item-1 的 li 节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = html.xpath(<span class="string">&#x27;//li[@class=&#x27;</span>item<span class="number">-1</span><span class="string">&#x27;]&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="文本获取"><a href="#文本获取" class="headerlink" title="文本获取"></a>文本获取</h6><p>text() 方法获取节点中的文本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先选取a节点再获取文本</span></span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[@class=&quot;item-0&quot;]/a/text()&#x27;</span>)</span><br><span class="line">结果：[<span class="string">&#x27;first item&#x27;</span>, <span class="string">&#x27;fifth item&#x27;</span>]</span><br><span class="line"><span class="comment">#或者使用//</span></span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[@class=&quot;item-0&quot;]//text()&#x27;</span>)</span><br><span class="line">结果：[<span class="string">&#x27;first item&#x27;</span>, <span class="string">&#x27;fifth item&#x27;</span>, <span class="string">&#x27;\n  \t&#x27;</span>] <span class="comment">#因为自动修正的尾标签换行了</span></span><br></pre></td></tr></table></figure>

<p>如果想获取某些特定子孙节点下的所有文本，可以先选取到特定的子孙节点，再调用 text()</p>
<h6 id="属性获取"><a href="#属性获取" class="headerlink" title="属性获取"></a>属性获取</h6><p>获取 li 节点下所有 a 节点的 href 属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = html.xpath(<span class="string">&#x27;//li/a/@href&#x27;</span>)</span><br><span class="line">结果</span><br><span class="line">[<span class="string">&#x27;link1.html&#x27;</span>, <span class="string">&#x27;link2.html&#x27;</span>, <span class="string">&#x27;link3.html&#x27;</span>, <span class="string">&#x27;link4.html&#x27;</span>, <span class="string">&#x27;link5.html&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h6 id="属性多值匹配"><a href="#属性多值匹配" class="headerlink" title="属性多值匹配"></a>属性多值匹配</h6><p>某些节点的属性可能有多个值</p>
<p>下面 html 中 li 节点的 class 属性有两个值 li 和 li-list，就需要用到 cantains() 函数了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;li li-first&quot;&gt;&lt;a href=&quot;link.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[contains(@class, &quot;li&quot;)]/a/text()&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="多属性匹配"><a href="#多属性匹配" class="headerlink" title="多属性匹配"></a>多属性匹配</h6><p>多个属性确定一个节点，就需要同事匹配多个属性，可以使用 and 连接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;li li-first&quot; name=&quot;item&quot;&gt;&lt;a href=&quot;link.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[contains(@class, &quot;li&quot;) and @name=&quot;item&quot;]/a/text()&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>运算符：</li>
</ul>
<table>
<thead>
<tr>
<th>or、and</th>
<th>或、与</th>
</tr>
</thead>
<tbody><tr>
<td>+、-、*、div、mod</td>
<td>加、减、乘、除、除法余数</td>
</tr>
<tr>
<td>&gt;、=、&lt;、!=、&gt;=、&lt;=</td>
<td>大于、等于、小于、不等于、大于等于、小于等于</td>
</tr>
</tbody></table>
<h6 id="按序选择"><a href="#按序选择" class="headerlink" title="按序选择"></a>按序选择</h6><p>有时候匹配了多个节点，只想要其中某个节点</p>
<p>可以利用中括号传入索引的方法获取特定次序的节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = html.xpath(<span class="string">&#x27;//li[1]/a/text()&#x27;</span>)  <span class="comment">#第一个li节点 </span></span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[last()]/a/text()&#x27;</span>) <span class="comment">#最后一个li节点</span></span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[position()&lt;3]/a/text()&#x27;</span>)<span class="comment">#位置小于3的li节点</span></span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[last()-2]/a/text()&#x27;</span>) <span class="comment">#倒数第3个节点</span></span><br></pre></td></tr></table></figure>

<p>Xpath 中提供了 100 多个函数，具体参考 <a href="http://www.w3school.com.en/xpath/xpath_functions.asp">http://www.w3school.com.en/xpath/xpath_functions.asp</a></p>
<h6 id="节点轴选择"><a href="#节点轴选择" class="headerlink" title="节点轴选择"></a>节点轴选择</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//获取所有祖先节点</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[1]/ancestor::*&#x27;</span>)</span><br><span class="line">//获取所有 div 的祖先节点</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[1]/ancestor::div&#x27;</span>)</span><br><span class="line">//获取 li 节点所有属性值</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[1]/attribute::*&#x27;</span>)</span><br><span class="line">//获取直接字节点，取 href 属性为 link.html 的 a 节点</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[1]/child::a[@href=&quot;link1.html&quot;]&#x27;</span>)</span><br><span class="line">//获取子孙节点，取包含 span 节点</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[1]/descendant::span&#x27;</span>)</span><br><span class="line">//获取当前节点之后所有节点，只获取第二个后续节点</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[1]/following::*[2]&#x27;</span>)</span><br><span class="line">//获取当前节点之后的所有同级节点</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[1]/following-sibling::*&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>XPath 轴 <a href="http://www.w3school.com.cn/xpath/xpath_axes.asp">http://www.w3school.com.cn/xpath/xpath_axes.asp</a></p>
<h5 id="4-2-Beautiful-Soup"><a href="#4-2-Beautiful-Soup" class="headerlink" title="4.2 Beautiful Soup"></a>4.2 Beautiful Soup</h5><p>HTML 或 XML 的解析库，借助网页的结构和属性等特性来解析网页</p>
<p>自动将输入文档转换为 Unicode 编码，输出文档转换为 UTF-8 编码，不需要考虑编码方式</p>
<p>Beautiful Soup 在解析时依赖解析器，lxml 解析器有解析 HTML 和 XML 的功能，且速度快，容错能力强</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(<span class="string">&#x27;&lt;p&gt;Hello&lt;/p&gt;&#x27;</span>, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.p.string) <span class="comment">#选取p节点，调用string属性就可以得到里面文本了</span></span><br></pre></td></tr></table></figure>

<p>第一个参数 HTML字符串， 第二个参数为解析器的类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot; Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;linkl&quot;&gt;&lt;! - Elsie ...&gt;&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.prettify())</span><br><span class="line">print(soup.title.string)</span><br></pre></td></tr></table></figure>

<p>调用 pretttify() 方法，把要解析的字符串以标准的缩进格式输出，Beautiful Soup 可以自动更正格式</p>
<p>soup.title.string 选取 title 节点，再调用 string 属性就可以得到里面的文本了</p>
<h6 id="1-节点选择器"><a href="#1-节点选择器" class="headerlink" title="1. 节点选择器"></a>1. 节点选择器</h6><p>直接调用节点名称就可以选择节点元素，再调用 string 属性就可以得到节点内的文本了</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">print(soup.title)</span><br><span class="line">print(<span class="built_in">type</span>(soup.title))</span><br><span class="line">print(soup.title.string)</span><br><span class="line">print(soup.head)</span><br><span class="line">print(soup.p)</span><br><span class="line">结果</span><br><span class="line">&lt;title&gt;The Dormouse<span class="string">&#x27;s story&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;</span>bs4.element.Tag<span class="string">&#x27;&gt;</span></span><br><span class="line"><span class="string">The Dormouse&#x27;</span>s story</span><br><span class="line">&lt;head&gt;&lt;title&gt;The Dormouse<span class="string">&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line">&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>只打印了第一个 p 节点的内容，多个节点时，这种选择方式只会选择到第一个匹配的节点</p>
<h6 id="提取信息"><a href="#提取信息" class="headerlink" title="提取信息"></a>提取信息</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//获取节点名称</span><br><span class="line">print(soup.title.name)  		</span><br><span class="line">title</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//获取属性</span><br><span class="line">print(soup.p.attrs)					</span><br><span class="line">&#123;<span class="string">&#x27;class&#x27;</span>: [<span class="string">&#x27;title&#x27;</span>], <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;dromouse&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//获取 name 属性</span><br><span class="line">print(soup.p.attrs[<span class="string">&#x27;name&#x27;</span>])	</span><br><span class="line">dromouse</span><br></pre></td></tr></table></figure>

<p>比较简单方式，注意返回有的是字符串，有的是字符串组成的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.p[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">print(soup.p[<span class="string">&#x27;class&#x27;</span>])</span><br><span class="line"><span class="comment">#需要注意有的返回字符串，有的返回字符串组成的列表，要注意判断类型</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;获取内容(是第一个 p 节点)</span><br><span class="line">print(soup.p.string)</span><br></pre></td></tr></table></figure>

<h6 id="嵌套选择"><a href="#嵌套选择" class="headerlink" title="嵌套选择"></a>嵌套选择</h6><p>可以继续调用节点进行下一步选择</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(soup.head.title.string)</span><br></pre></td></tr></table></figure>

<h6 id="关联选择"><a href="#关联选择" class="headerlink" title="关联选择"></a>关联选择</h6><p>有时候不能一步就选到想要的节点元素，需要先选中某个节点元素，然后以它为基准再选择它的父节点、子节点、兄弟节点</p>
<ol>
<li>直接子节点 contents、children</li>
</ol>
<p>添加一个 p 节点</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;p class=&quot;story&quot;&gt;</span><br><span class="line">	Once upon a time there were three little sisters; <span class="keyword">and</span> their names were</span><br><span class="line">  &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;linkl&quot;&gt; </span><br><span class="line">    &lt;span&gt; Elsie&lt;/span&gt;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>调用 contents 属性，结果返回 p 节点的直接子节点，返回结果是一个列表形式</p>
<p>包含文本和节点，得到的是直接子节点的列表（span是子孙节点在a节点里面，没有单独选出来）</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">print(soup.p.contents)</span><br><span class="line">[&#x27;\n\tOnce upon a time there were three little sisters; and their names were\n\t&#x27;, &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;linkl&quot;&gt;</span><br><span class="line">&lt;span&gt; Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;, &#x27;\n&#x27;]</span><br></pre></td></tr></table></figure>

<p>同样可以直接调用 children 属性得到相应的结果，返回结果是生成器类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.p.children)</span><br><span class="line"><span class="keyword">for</span> i, child <span class="keyword">in</span> <span class="built_in">enumerate</span>(soup.p.children):</span><br><span class="line">  print(i, child)</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>子孙节点 descendants</li>
</ol>
<p>如果要获取所有子孙节点的话，调用 descendants 属性，返回结果是生成器类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.p.descendants)</span><br><span class="line"><span class="keyword">for</span> i, child <span class="keyword">in</span> <span class="built_in">enumerate</span>(soup.p.descendants):</span><br><span class="line">    print(i, child)</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>父节点和 祖先节点</li>
</ol>
<p>获取父节点，调用 parent 属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.a.parent)</span><br></pre></td></tr></table></figure>

<p>想要获取所有的祖先节点，调用 parents 属性，返回结果是生成器类型，这里用列表输出索引和内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="built_in">list</span>(<span class="built_in">enumerate</span>(soup.a.parents)))</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>兄弟节点（同级节点）</li>
</ol>
<p>next_sibling 节点下一个兄弟元素</p>
<p>previous_sibling 节点上一个兄弟元素</p>
<p>next_siblings 所有前面的兄弟元素</p>
<p>previous_siblings 所有后面的兄弟元素</p>
<ol start="5">
<li>提取信息</li>
</ol>
<p>返回的是单个节点，直接调用 string、attrs 等属性获取文本和属性</p>
<p>多个节点的生成器，则可转为列表后取出某个元素，然后调用 string、attrs</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.a.next_sibling)</span><br><span class="line">print(soup.a.next_sibling.string)</span><br><span class="line">print(<span class="built_in">list</span>(soup.a.parents)[<span class="number">0</span>])</span><br><span class="line">pirnt(<span class="built_in">list</span>(soup.a.parents)[<span class="number">0</span>].attrs[<span class="string">&#x27;class&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h6 id="2-方法选择器"><a href="#2-方法选择器" class="headerlink" title="2. 方法选择器"></a>2. 方法选择器</h6><p>前面的选择方法都是通过属性来选择的，Beautiful Soup 还提供了一些查询方法</p>
<h6 id="find-all"><a href="#find-all" class="headerlink" title="find_all()"></a>find_all()</h6><p>查找所有符合条件的元素，传入属性或文本，就可以得到符合条件的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">find_all(name, attrs, recursive, text, **kwargs)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;panel&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;panel-heading&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;panel-body&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>  (1) name 根据节点名来查询元素</p>
<p>查询所有 ul 节点，返回结果是列表类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.find_all(name=<span class="string">&#x27;ul&#x27;</span>)) </span><br><span class="line"><span class="comment">#结果列表类型，长度2</span></span><br></pre></td></tr></table></figure>

<p>查询出所有 ul 节点后，再继续查询其内部的 li 节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> soup.find_all(name=<span class="string">&#x27;ul&#x27;</span>):</span><br><span class="line">  print(ul.find_all(name=<span class="string">&#x27;li&#x27;</span>))</span><br><span class="line">  <span class="keyword">for</span> li <span class="keyword">in</span> ul.find_all(name=<span class="string">&#x27;li&#x27;</span>):</span><br><span class="line">    print(li.string)</span><br></pre></td></tr></table></figure>



<p>(2)  attrs 传入属性查询</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.find_all(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;list-1&#x27;</span>&#125;))</span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;elements&#x27;</span>&#125;))</span><br><span class="line"></span><br><span class="line">print(soup.find_all(<span class="built_in">id</span>=<span class="string">&#x27;list-1&#x27;</span>))</span><br><span class="line">print(soup.find_all(class_=<span class="string">&#x27;element&#x27;</span>)) </span><br><span class="line"><span class="comment">#class 是 Python 关键字，需要加下划线</span></span><br></pre></td></tr></table></figure>



<p>(3) text 匹配节点的文本，可以传字符串或正则表达式对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#参数为正则表达式对象</span></span><br><span class="line">print(soup.find_all(text=re.<span class="built_in">compile</span>(<span class="string">&#x27;link&#x27;</span>)))</span><br></pre></td></tr></table></figure>

<h6 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h6><p>返回的是单个元素，也就是第一个匹配的元素</p>
<ol start="3">
<li>其它查询方法</li>
</ol>
<p>find_parents() 和 find_parent()：前者返回所有祖先节点，后者返回直接父节点</p>
<p>find_next_siblings() 和 find_next_sibling()：前者返回后面所有兄弟节点，后者返回后面第一个兄弟节点</p>
<p>find_previous_siblings() 和 find_previous_sibling()：：前者返回前面所有兄弟节点，后者返回前面第一个兄弟节点</p>
<p>find_all_next() 和 find_next()：前者返回节点后所有符合条件的节点，后者返回第一个符合条件的节点</p>
<p>find_all_previous() 和 find_previous：</p>
<h6 id="3-CSS-选择器"><a href="#3-CSS-选择器" class="headerlink" title="3. CSS 选择器"></a>3. CSS 选择器</h6><p>Beautiful Soup还提供了另一种选择器，CSS 选择器</p>
<p>只需要调用 select ，传入相应 CSS 选择器即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">html = &#x27;&#x27;&#x27;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span> <span class="attr">id</span>=<span class="string">&quot;list-1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;element&quot;</span>&gt;</span>Foo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;element&quot;</span>&gt;</span>Bar<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;element&quot;</span>&gt;</span>Jay<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list list-small&quot;</span> <span class="attr">id</span>=<span class="string">&quot;list-2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;element&quot;</span>&gt;</span>Foo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;element&quot;</span>&gt;</span>Bar<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.select(<span class="string">&#x27;.panel .panel-heading&#x27;</span>))</span><br><span class="line">print(soup.select(<span class="string">&#x27;ul li&#x27;</span>)) <span class="comment">#选择所有ul节点下面的li节点</span></span><br><span class="line">print(soup.select(<span class="string">&#x27;#list-2 .element&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">[&lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">&lt;h4&gt;Hello&lt;/h4&gt;</span><br><span class="line">&lt;/div&gt;]</span><br><span class="line"></span><br><span class="line">[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;]</span><br><span class="line"></span><br><span class="line">[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;]</span><br></pre></td></tr></table></figure>

<h6 id="嵌套选择-1"><a href="#嵌套选择-1" class="headerlink" title="嵌套选择"></a>嵌套选择</h6><p>select() 方法同样支持嵌套选择，如先选择所有 ul 节点，再遍历每个 ul 节点，选择其 li 节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> soup.select(<span class="string">&#x27;ul&#x27;</span>):</span><br><span class="line">	print(ul.select(<span class="string">&#x27;li&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>输出了所有 ul 节点下所有 li 节点组成的列表</p>
<h6 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> soup.select(<span class="string">&#x27;ul&#x27;</span>):</span><br><span class="line">	print(ul[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">	print(ul.attrs[<span class="string">&#x27;id&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h6 id="获取文本"><a href="#获取文本" class="headerlink" title="获取文本"></a>获取文本</h6><p>获取文本可以用 string 属性，还有个方法 get_text()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> soup.select(<span class="string">&#x27;li&#x27;</span>):</span><br><span class="line">	print(<span class="string">&#x27;Get Text:&#x27;</span>, li.get_text())</span><br><span class="line">	print(<span class="string">&#x27;String:&#x27;</span>, li.string)</span><br></pre></td></tr></table></figure>



<h5 id="4-3-pyquery"><a href="#4-3-pyquery" class="headerlink" title="4.3 pyquery"></a>4.3 pyquery</h5><p>如果比较喜欢用CSS选择器，对jQuery有所了解，可以使用 pyquery</p>
<h6 id="字符串初始化"><a href="#字符串初始化" class="headerlink" title="字符串初始化"></a>字符串初始化</h6><p>传入 HTML 字符串（常用）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq <span class="comment">#引入 PyQuery 对象，取别名 pq</span></span><br><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">doc = pq(html)</span><br><span class="line">print(doc(<span class="string">&#x27;li&#x27;</span>)) <span class="comment">#选择所有li节点</span></span><br></pre></td></tr></table></figure>

<h6 id="URL-初始化"><a href="#URL-初始化" class="headerlink" title="URL 初始化"></a>URL 初始化</h6><p>可以传入网页的 URL</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">doc = pq(<span class="string">&#x27;https://cuiqingcai.com&#x27;</span>)</span><br><span class="line">print(doc(<span class="string">&#x27;title&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>PyQuery对象会先请求这个URL，然后用得到的 HTML 内容完成初始化，相当于网页的源码以字符串的形式传递给 PyQuery 类来初始化，相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">doc = pq(requests.get(<span class="string">&#x27;https://cuiqingcai.com&#x27;</span>).text)</span><br><span class="line">print(doc(<span class="string">&#x27;title&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h6 id="文件初始化"><a href="#文件初始化" class="headerlink" title="文件初始化"></a>文件初始化</h6><p>可以传本地文件名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">doc = pq(filename=<span class="string">&#x27;demo.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="基于CSS选择器"><a href="#基于CSS选择器" class="headerlink" title="基于CSS选择器"></a>基于CSS选择器</h6><blockquote>
<p>#id 选择器通过 HTML 元素的 id 属性选取指定元素</p>
<p>.class 选择器通过指定 class 查找元素</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div id=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;ul class=&quot;list&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">doc = pq(html)</span><br><span class="line">print(doc(<span class="string">&#x27;#container .list li&#x27;</span>))</span><br><span class="line">print(<span class="built_in">type</span>(doc(<span class="string">&#x27;#container .list li&#x27;</span>))) <span class="comment">#pyquery.pyquery.PyQuery</span></span><br></pre></td></tr></table></figure>

<p>先选取 id 为 container 的节点，然后再选取其内部的 class 为 list 的节点内部的所有 li 节点</p>
<h6 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h6><p>常用查询函数和 jQuery 中函数的用法完全相同</p>
<ol>
<li>子节点</li>
</ol>
<p>查找子节点需要用到 find() 方法，传入参数是 CSS 选择器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">items = doc(<span class="string">&#x27;.list&#x27;</span>) <span class="comment">#选取class为list的节点</span></span><br><span class="line">lis = items.find(<span class="string">&#x27;li&#x27;</span>)<span class="comment">#选取内部li节点</span></span><br><span class="line">print(lis)</span><br></pre></td></tr></table></figure>

<p>其实 find() 查找范围是节点的所有子孙节点，如果只想查找子节点可以用 children()</p>
<p>如果要筛选所有子节点中符合条件的节点，比如节点中 class 为 active 的节点，可以像 children() 方法传入 CSS 选择器 .active</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = items.children(<span class="string">&#x27;.active&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>父节点</li>
</ol>
<p>可以用 parent() 方法来获取某个节点的父节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">doc = pq(html)</span><br><span class="line">items = doc(<span class="string">&#x27;.list&#x27;</span>) <span class="comment">#type: pyquery</span></span><br><span class="line">print(<span class="built_in">type</span>(items))</span><br><span class="line">container = items.parent()</span><br><span class="line">print(container)</span><br><span class="line"><span class="comment">#先选取class为list的节点</span></span><br></pre></td></tr></table></figure>

<p>想要获取祖先节点用 parents()</p>
<p>想要筛选某个祖先节点，向 parents() 传入 CSS 选择器，这样就会返回祖先节点中符合 CSS 选择器的节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parent = items.parents(<span class="string">&#x27;.wrap&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>兄弟节点</li>
</ol>
<p>siblings()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = doc(<span class="string">&#x27;.list .item-0.active&#x27;</span>) <span class="comment">#type: pyquery</span></span><br><span class="line">print(li.siblings())</span><br><span class="line">print(li.siblings(<span class="string">&#x27;.active&#x27;</span>))<span class="comment">#筛选class为active的节点</span></span><br></pre></td></tr></table></figure>

<h6 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h6><p>单个节点可以直接打印输出，也可直接转成字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = doc(<span class="string">&#x27;.item-0.active&#x27;</span>)</span><br><span class="line">print(li)</span><br><span class="line">print(<span class="built_in">str</span>(li))</span><br></pre></td></tr></table></figure>

<p>遍历，调用 items() 方法，得到一个生成器，遍历下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = doc(<span class="string">&#x27;li&#x27;</span>).items</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">	print(li)</span><br></pre></td></tr></table></figure>

<h6 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h6><ol>
<li>获取属性</li>
</ol>
<p>调用 attr() 方法获取属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = doc(<span class="string">&#x27;.item-0.active a&#x27;</span>)<span class="comment">#class为item-0和active的li节点内的a节点</span></span><br><span class="line">print(a.attr(<span class="string">&#x27;href&#x27;</span>))<span class="comment">#调用attr方法传入属性的名称</span></span><br><span class="line"><span class="comment">#也可调用attr属性来获取</span></span><br><span class="line">print(a.attr.href)</span><br></pre></td></tr></table></figure>

<p>多个节点调用attr()方法只返回第一个节点属性，获取所有的需要遍历</p>
<ol start="2">
<li>获取文本</li>
</ol>
<p>text() 方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a.text())</span><br></pre></td></tr></table></figure>

<p>获取内部 HTML 文本，html() 方法</p>
<h6 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h6><p>pyquery 提供了一系列方法对节点进行动态修改</p>
<ul>
<li>addClass removeClass</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = doc(<span class="string">&#x27;.item-0.active&#x27;</span>)</span><br><span class="line">li.removeClass(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">li.addClass(<span class="string">&#x27;active&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>attr、text、html</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = doc(<span class="string">&#x27;.item-0.active&#x27;</span>)</span><br><span class="line">li.attr(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;link&#x27;</span>)</span><br><span class="line">li.text(<span class="string">&#x27;change item&#x27;</span>)</span><br><span class="line">li.html(<span class="string">&#x27;&lt;span&gt;change item&lt;/span&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">#调用 attr 方法后 li节点多了个原本不存在属性 name 值为link</span></span><br><span class="line"><span class="comment">#调用attr修改属性 text html修改节点内部内容</span></span><br></pre></td></tr></table></figure>

<ul>
<li>remove</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;wrap&quot;&gt;</span></span><br><span class="line"><span class="string">  Hello,world</span></span><br><span class="line"><span class="string">  &lt;p&gt;This is a paragraph&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">doc = pq(html)</span><br><span class="line">wrap = doc(<span class="string">&#x27;.wrap&#x27;</span>)</span><br><span class="line">print(wrap.text())</span><br><span class="line"><span class="comment">#结果Hello,world This is a paragraph</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wrap.find(<span class="string">&#x27;p&#x27;</span>).remove()</span><br><span class="line">print(wrap.text())</span><br></pre></td></tr></table></figure>

<p>还有其它节点操作方法 append() empty() prepend()</p>
<p>参考 <a href="http://pyquery.readthedocs.io/en/latest/api.html">http://pyquery.readthedocs.io/en/latest/api.html</a></p>
<ul>
<li>伪类选择器</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">doc(<span class="string">&#x27;li:first-child&#x27;</span>)<span class="comment">#第一个li节点</span></span><br><span class="line">doc(<span class="string">&#x27;li:last-child&#x27;</span>)<span class="comment">#最后一个li节点</span></span><br><span class="line">doc(<span class="string">&#x27;li:nth-child(2)&#x27;</span>)<span class="comment">#第二个li节点</span></span><br><span class="line">doc(<span class="string">&#x27;li:gt(2)&#x27;</span>)<span class="comment">#第三个li之后的节点</span></span><br><span class="line">doc(<span class="string">&#x27;li:nth-child(2n)&#x27;</span>)<span class="comment">#偶数位的li节点</span></span><br><span class="line">doc(<span class="string">&#x27;li:contains(second)&#x27;</span>)<span class="comment">#包含second文本的li节点</span></span><br></pre></td></tr></table></figure>































]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-环境配置</title>
    <url>/2022/04/11/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="Python-IDE"><a href="#Python-IDE" class="headerlink" title="Python IDE"></a>Python IDE</h4><h5 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h5><p>配置</p>
<p>终端 which python3 查看 python3 路径</p>
<p>Preference-Project:pythonProject-PythonInterpreter</p>
<p>Show All 添加 上面 python 路径</p>
<h4 id="Python-版本"><a href="#Python-版本" class="headerlink" title="Python 版本"></a>Python 版本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python 3.7.9</span><br></pre></td></tr></table></figure>





<h4 id="1-开发环境配置"><a href="#1-开发环境配置" class="headerlink" title="1.开发环境配置"></a>1.开发环境配置</h4><h5 id="1-1-Python3的安装"><a href="#1-1-Python3的安装" class="headerlink" title="1.1 Python3的安装"></a>1.1 Python3的安装</h5><ol>
<li>Homebrew 安装</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install python3</span><br></pre></td></tr></table></figure>

<p>命令执行完后，Python3 和 pip3 均已成功安装</p>
<ol start="2">
<li>安装包安装</li>
</ol>
<p><a href="https://www.python.org/downloads/">官网 </a>下载安装包安装</p>
<ol start="3">
<li>Anaconda 安装</li>
</ol>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">镜像地址</a></p>
<ul>
<li>测试验证</li>
</ul>
<p>终端输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Python3</span><br><span class="line">pip3 -V</span><br></pre></td></tr></table></figure>



<h5 id="1-2请求库安装"><a href="#1-2请求库安装" class="headerlink" title="1.2请求库安装"></a>1.2请求库安装</h5><h6 id="1-2-1-requests"><a href="#1-2-1-requests" class="headerlink" title="1.2.1 requests"></a>1.2.1 requests</h6><p>阻塞式 HTTP 请求，发出请求后，会一直等待服务器响应，响应后才会进行下一步处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install requests</span><br></pre></td></tr></table></figure>

<p>验证安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; import requests</span><br></pre></td></tr></table></figure>

<h6 id="1-2-2-Selenium"><a href="#1-2-2-Selenium" class="headerlink" title="1.2.2 Selenium"></a>1.2.2 Selenium</h6><p>自动化测试工具，可以驱动浏览器执行特定的动作，如点击、下拉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install selenium</span><br></pre></td></tr></table></figure>

<p>验证安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; import selenium</span><br></pre></td></tr></table></figure>

<h6 id="1-2-3-ChromeDriver"><a href="#1-2-3-ChromeDriver" class="headerlink" title="1.2.3 ChromeDriver"></a>1.2.3 ChromeDriver</h6><p>Selenium 是一个自动化测试工具，需要配合浏览器使用</p>
<p>安装 ChromeDriver 才能驱动 Chrome 浏览器完成相应操作</p>
<p>查看 Chrome 版本号：帮助-关于 Google Chrome 版本 100.0.4896.75（正式版本） (x86_64)</p>
<p>ChromeDriver <a href="http://npm.taobao.org/mirrors/chromedriver/">下载地址</a> 选择 100.0.4896.60/chromedriver_mac64.zip  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mv chromedriver &#x2F;usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure>

<p>验证安装： 终端输入 chromedriver 开启</p>
<p>再程序中测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; from selenium import webdriver</span><br><span class="line">&gt;&gt;&gt; browser &#x3D; webdriver.Chrome()</span><br></pre></td></tr></table></figure>

<p>运行后，弹出一个空白 Chrome 浏览器，证明配置没问题</p>
<h6 id="1-2-4-GeckoDriver"><a href="#1-2-4-GeckoDriver" class="headerlink" title="1.2.4 GeckoDriver"></a>1.2.4 GeckoDriver</h6><p> <a href="https://github.com/mozilla/geckodriver/releases">下载地址</a>  geckodriver-v0.30.0-macos.tar.gz</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mv geckodriver &#x2F;usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure>

<p>验证安装： 终端输入 geckodriver 开启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; from selenium import webdriver</span><br><span class="line">&gt;&gt;&gt; browser &#x3D; webdriver.Firefox()</span><br></pre></td></tr></table></figure>

<h6 id="1-2-5-PhantomJS"><a href="#1-2-5-PhantomJS" class="headerlink" title="1.2.5 PhantomJS"></a>1.2.5 PhantomJS</h6><p><del>无界面的、可脚本编程的 WebKit 浏览器引擎</del></p>
<p><del>Selenium 支持 PhantomJS，这样运行的时候就不会再弹出一个浏览器了</del></p>
<p><a href="https://phantomjs.org/download.html">下载地址</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mv phantomjs &#x2F;usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure>

<p><del>验证安装： 终端输入 phantomjs</del></p>
<p><del>Selenium中使用，只需要将 Chrome 切换为 PhantomJS</del></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver </span><br><span class="line">browser &#x3D; webdriver.PhantomJS() </span><br><span class="line">browser.get(&#39;https:&#x2F;&#x2F;www.baidu.com’) </span><br><span class="line">print(browser.current_url)</span><br></pre></td></tr></table></figure>

<p>报错不支持了：<code>Selenium support for PhantomJS has been deprecated </code> </p>
<p>使用无界面版本 <code>use headless versions of Chrome or Firefox instead</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"># 创建chrome参数对象</span><br><span class="line">opt &#x3D; webdriver.ChromeOptions()</span><br><span class="line"># 把chrome设置成无界面模式，不论windows还是linux都可以，自动适配对应参数</span><br><span class="line">opt.set_headless()</span><br><span class="line"># 创建chrome无界面对象</span><br><span class="line">driver &#x3D; webdriver.Chrome(options&#x3D;opt)</span><br><span class="line"># 访问百度</span><br><span class="line">driver.get(&#39;https:&#x2F;&#x2F;baidu.com&#x2F;&#39;)</span><br><span class="line">#打印内容</span><br><span class="line">print(driver.page_source)</span><br></pre></td></tr></table></figure>

<h6 id="1-2-6-aiohttp"><a href="#1-2-6-aiohttp" class="headerlink" title="1.2.6 aiohttp"></a>1.2.6 aiohttp</h6><p>异步 Web 服务的库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install aiohttp</span><br></pre></td></tr></table></figure>

<p>字符编码检测库 cchardet , 加速 DNS 的解析库  aiodns</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install cchardet aiodns</span><br></pre></td></tr></table></figure>

<h5 id="1-3-解析库安装"><a href="#1-3-解析库安装" class="headerlink" title="1.3 解析库安装"></a>1.3 解析库安装</h5><h6 id="1-3-1-lxml"><a href="#1-3-1-lxml" class="headerlink" title="1.3.1 lxml"></a>1.3.1 lxml</h6><p>Python 的一个解析库，支持 HTML 和 XML 的解析，支持 XPath 解析方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install lxml</span><br></pre></td></tr></table></figure>

<h6 id="1-3-2-Beautiful-Soup"><a href="#1-3-2-Beautiful-Soup" class="headerlink" title="1.3.2 Beautiful Soup"></a>1.3.2 Beautiful Soup</h6><p>Python 的一个 HTML 或 XML 的解析库</p>
<p>Beautiful Soup 的 HTML 和 XML 解析器是依赖于 lxml 库的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install beautifulsoup4</span><br></pre></td></tr></table></figure>

<p>验证安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; from bs4 import BeautifulSoup</span><br><span class="line">&gt;&gt;&gt; soup &#x3D; BeautifulSoup(&#39;&lt;p&gt;Hello&lt;&#x2F;p&gt;&#39;, &#39;lxml&#39;)</span><br><span class="line">&gt;&gt;&gt; print(soup.p.string)</span><br></pre></td></tr></table></figure>

<h6 id="1-3-3-pyquery"><a href="#1-3-3-pyquery" class="headerlink" title="1.3.3 pyquery"></a>1.3.3 pyquery</h6><p>网页解析工具，提供和 jQuery类型语法来解析 HTML 文档，支持 CSS 选择器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install pyquery</span><br></pre></td></tr></table></figure>

<h6 id="1-3-4-tesserocr"><a href="#1-3-4-tesserocr" class="headerlink" title="1.3.4 tesserocr"></a>1.3.4 tesserocr</h6><p>OCR 识别</p>
<p>使用 Homebrew 安装 ImageMagick 和 tesseract 库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install imagemagick</span><br><span class="line">brew install tesseract-lang</span><br><span class="line">pip3 install tesserocr pillow</span><br></pre></td></tr></table></figure>

<p><a href="http://my.cnki.net/elibregister/CheckCode.aspx">验证码测试连接</a></p>
<p>使用命令行测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tesseract image.png result -1 eng &amp;&amp; cat result.txt</span><br></pre></td></tr></table></figure>

<p>Python 代码测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; import tesserocr</span><br><span class="line">&gt;&gt;&gt; from PIL import Image</span><br><span class="line">&gt;&gt;&gt; image &#x3D; Image.open(&#39;&#x2F;Users&#x2F;midland_whk&#x2F;Downloads&#x2F;CheckCode.aspx.jpeg&#39;)</span><br><span class="line">&gt;&gt;&gt; print(tesserocr.image_to_text(image))</span><br><span class="line">或者</span><br><span class="line">&gt;&gt;&gt; print(tesserocr.file_to_text(&#39;image.png&#39;))</span><br></pre></td></tr></table></figure>

<p>利用 Image 读取图片，再调用 tesserocr 的 image_to_text 将识别结果输出</p>
<h5 id="1-4-数据库安装"><a href="#1-4-数据库安装" class="headerlink" title="1.4 数据库安装"></a>1.4 数据库安装</h5><h6 id="1-4-1-MySQL"><a href="#1-4-1-MySQL" class="headerlink" title="1.4.1 MySQL"></a>1.4.1 MySQL</h6><p>轻量级关系型数据库</p>
<p><a href="https://downloads.mysql.com/archives/community/">下载地址</a></p>
<p>MySQL安装后 <code>open ~/.bash_profile</code><br>添加 <code>PATH=$PATH:/usr/local/mysql/bin</code><br>生效 <code>source ~/.bash_profile</code><br>终端登录mysql <code>mysql -uroot -p</code></p>
<p>或者 Homebrew 方式安装 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure>

<p>启动、停止、重启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mysql.server start </span><br><span class="line">sudo mysql.server stop </span><br><span class="line">sudo mysql.server restart</span><br><span class="line">sudo &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;support-files&#x2F;mysql.server stop</span><br><span class="line">sudo &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;support-files&#x2F;mysql.server restart</span><br></pre></td></tr></table></figure>

<p>打开系统偏好设置-MySQL</p>
<p>initialize Database 可以设置密码 8 位</p>
<ul>
<li>Navicat Premium </li>
</ul>
<p>数据库的可视化工具</p>
<ul>
<li>Navicat Premium 连接 MySQL 报错 2059</li>
</ul>
<p>原因：mysql8之前版本中加密规则为mysql_native_password，mysql8之后加密规则为caching_sha2_password，将mysql用户登录加密规则改为 mysql_native_password</p>
<p>解决：</p>
<p>1 登录数据库 mysql -uroot -p</p>
<p>2 输入数据库密码登录</p>
<p>3 输入 use mysql; 出现 Database changed</p>
<p>4 输入 select host,user,plugin from user; 目的为了查看user的root 对应host是什么</p>
<p>5 修改加密规则 ALTER USER ‘root’@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘12345678’;</p>
<p>6 查看修改结果 select host,user,plugin from user;</p>
<h6 id="1-4-2-MongoDB"><a href="#1-4-2-MongoDB" class="headerlink" title="1.4.2 MongoDB"></a>1.4.2 MongoDB</h6><p>C++编写的非关系型数据库，内容存储形式类似 JSON 对象，字段值可以包含其它文档、数组及文档数组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install mongodb <span class="comment">#失效了</span></span><br></pre></td></tr></table></figure>

<p>直接下载社区版 <a href="https://www.mongodb.com/try/download">https://www.mongodb.com/try/download</a></p>
<p>下载完 mongodb-macos-x86_64-5.0.7 解压命名为 mongodb 放到 /usr/local/ 目录</p>
<p>再把 MongoDB 的二进制命令文件目录添加到PATH</p>
<p>export PATH=/usr/local/mongodb/bin:$PATH</p>
<p>创建数据库存放路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;usr&#x2F;local&#x2F;var&#x2F;mongodb</span><br></pre></td></tr></table></figure>

<p>日志文件路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;mongodb</span><br></pre></td></tr></table></figure>

<p>确保当前用户对上面目录读写权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chown 用户 &#x2F;usr&#x2F;local&#x2F;var&#x2F;mongodb</span><br><span class="line">sudo chown 用户 &#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;mongodb</span><br></pre></td></tr></table></figure>

<p>后台启动mongodb</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#--dbpath 设置数据存放目录</span></span><br><span class="line"><span class="comment">#--logpath 设置日志存放目录</span></span><br><span class="line"><span class="comment">#--fork 在后台运行</span></span><br><span class="line">mongod --dbpath /usr/<span class="built_in">local</span>/var/mongodb --logpath /usr/<span class="built_in">local</span>/var/<span class="built_in">log</span>/mongodb/mongo.log --fork</span><br></pre></td></tr></table></figure>

<p>如果不想后台运行，而是在控制台上查看运行过程可以直接设置配置文件启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongod --config &#x2F;usr&#x2F;local&#x2F;etc&#x2F;mongod.conf</span><br></pre></td></tr></table></figure>

<p>查看是否启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps aux | grep -v grep | grep mongod</span><br></pre></td></tr></table></figure>

<p>启动后可以用mongodb命令打开一个终端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin </span><br><span class="line">.&#x2F;mongo</span><br></pre></td></tr></table></figure>





<p>启动、停止和重启 MongoDB</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew services start mongodb </span><br><span class="line">sudo mongod</span><br><span class="line">brew services stop mongodb </span><br><span class="line">brew services restart mongodb</span><br></pre></td></tr></table></figure>

<p>可视化工具 RoboMongo/Robo 2T <a href="https://robomongo.org/download">https://robomongo.org/download</a></p>
<p>Studio 3T <a href="https://studio3t.com/download">https://studio3t.com/download</a></p>
<h6 id="1-4-3-Redis"><a href="#1-4-3-Redis" class="headerlink" title="1.4.3 Redis"></a>1.4.3 Redis</h6><p>基于内存的高效的非关系型数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure>

<p>启动 Redis 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew services start redis</span><br><span class="line">redis-service &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis.conf</span><br></pre></td></tr></table></figure>

<p>Mac 下 Redis 配置文件路径 /usr/local/tec/redis.conf 可以通过修改它来配置访问密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew services stop redis</span><br><span class="line">brew services restart redis</span><br></pre></td></tr></table></figure>

<p>可以安装 Redis Destop Manager 可视化管理工具来管理 Redis</p>
<h5 id="1-5-Python-存储库安装"><a href="#1-5-Python-存储库安装" class="headerlink" title="1.5 Python 存储库安装"></a>1.5 Python 存储库安装</h5><p>安装了存储数据的数据库，如果想要和 Python 交互的话，还需要安装一些 Python 存储库</p>
<p>MySQL 需要安装 PyMySQL</p>
<p>MongoDB 需要安装 PyMongo</p>
<h6 id="1-5-1-PyMySQL"><a href="#1-5-1-PyMySQL" class="headerlink" title="1.5.1 PyMySQL"></a>1.5.1 PyMySQL</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import pymysql</span><br><span class="line">&gt;&gt;&gt; pymysql.VERSION</span><br><span class="line">(1, 0, 2, None)</span><br></pre></td></tr></table></figure>

<h6 id="1-5-2-PyMongo"><a href="#1-5-2-PyMongo" class="headerlink" title="1.5.2 PyMongo"></a>1.5.2 PyMongo</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install pymongo</span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import pymongo </span><br><span class="line">&gt;&gt;&gt; pymongo.version</span><br></pre></td></tr></table></figure>

<h6 id="1-5-3-redis-py"><a href="#1-5-3-redis-py" class="headerlink" title="1.5.3 redis-py"></a>1.5.3 redis-py</h6><p>Redis 使用 redis-py 库来与其交互</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install redis</span><br></pre></td></tr></table></figure>

<h6 id="1-5-4-RedisDump"><a href="#1-5-4-RedisDump" class="headerlink" title="1.5.4 RedisDump"></a>1.5.4 RedisDump</h6><p>RedisDump 一个用于 Redis 数据导入/导出的工具，基于 Ruby 实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem install redis-dump</span><br></pre></td></tr></table></figure>

<p>验证：安装成功后执行下面命令，成功调用则安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis dump </span><br><span class="line">redis-load</span><br></pre></td></tr></table></figure>

<h5 id="1-6-Web-库安装"><a href="#1-6-Web-库安装" class="headerlink" title="1.6 Web 库安装"></a>1.6 Web 库安装</h5><h6 id="1-6-1-Flask"><a href="#1-6-1-Flask" class="headerlink" title="1.6.1 Flask"></a>1.6.1 Flask</h6><p>轻量级的 Web 服务程序，主要用来做一些 API 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install flask</span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">@app.route(&quot;&#x2F;&quot;)</span><br><span class="line">def hello():</span><br><span class="line">    return &quot;hello world&quot;</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p>运行后，系统会在 5000 端口开启 Web 服务</p>
<p>直接访问 <a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a> 可以看到网页中显示 Hello World，一个最简单的 Flask 程序就运行成功了</p>
<h6 id="1-6-2-Tornado"><a href="#1-6-2-Tornado" class="headerlink" title="1.6.2 Tornado"></a>1.6.2 Tornado</h6><p>支持异步的 Web 框架，通过使用非阻塞 I/O 流，可以支撑成千上万的开放连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install tornado</span><br></pre></td></tr></table></figure>

<p>验证 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tornado.ioloop</span><br><span class="line">import tornado.web</span><br><span class="line"></span><br><span class="line">class MainHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        self.write(&quot;hello world&quot;)</span><br><span class="line">def make_app():</span><br><span class="line">    return  tornado.web.Application([</span><br><span class="line">        (r&quot;&#x2F;&quot;, MainHandler)</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app &#x3D; make_app()</span><br><span class="line">    app.listen(8888)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>

<p>运行后，系统在 8888 端口运行了 Web 服务， 访问 <a href="http://127.0.0.8888/">http://127.0.0.8888/</a> 网页呈现 helloworld</p>
<h5 id="1-7-APP-爬取相关库安装"><a href="#1-7-APP-爬取相关库安装" class="headerlink" title="1.7 APP 爬取相关库安装"></a>1.7 APP 爬取相关库安装</h5><h6 id="1-7-1-Charles"><a href="#1-7-1-Charles" class="headerlink" title="1.7.1 Charles"></a>1.7.1 Charles</h6><h6 id="1-7-2-mitmproxy"><a href="#1-7-2-mitmproxy" class="headerlink" title="1.7.2 mitmproxy"></a>1.7.2 mitmproxy</h6><p>支持 HTTP 和 HTTPS 的抓包程序，通过控制台的形式操作</p>
<p>有两个关联组件</p>
<p>mitmdump：是 mitmproxy 命令行接口，利用它对接 Python 脚本，实现监听后的处理</p>
<p>mitmweb：一个 Web 程序，通过它以清楚观察到 mitmproxy 捕获请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install mitmproxy</span><br></pre></td></tr></table></figure>

<p>完成安装，还附带安装了 mitmdump mitmweb 两个组件</p>
<p>要捕获 https 请求需要证书配置</p>
<p>mitmproxy 安装后会提供一套 CA 证书，运行 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump</span><br></pre></td></tr></table></figure>

<p>在用户目录 .mitmproxy 目录里面找到 CA 证书</p>
<p>配置：</p>
<p>双击 mitmproxy-ca-cert.pem 弹出钥匙串管理，找到 mitmproxy 证书，打开设置，选始终信任</p>
<p>将 mitmproxy-ca-cert.pem 隔空投送到手机设备，安装</p>
<ul>
<li>设置代理</li>
</ul>
<p>启动 mitmproxy，之后会在 8080 端口上运行一个代理服务，右下角显示当前正在监听的端口，或者启动 mitmdump，也会监听 8080 端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmproxy</span><br></pre></td></tr></table></figure>

<p>手机设置代理 端口号设置 8080</p>
<p>设置好之后，手机浏览请求，mitmproxy 页面便会呈现手机上的请求</p>
<p>敲击回车可以查看详情，可以查看 Request、Response、Detail 点击 Tab 切换</p>
<ul>
<li>提供了命令行编辑功能：</li>
</ul>
<p>点击 e 进入编辑功能，跳转需要编辑哪部分内容，回车确定</p>
<p>退出返回 q 或者 :q  : wq!</p>
<p>敲击 a 保存修改，敲击 r 重新发起修改后的请求</p>
<ul>
<li>mitmdump</li>
</ul>
<p>可以命令行启动，并把截获的数据保存到文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump -w outfile</span><br></pre></td></tr></table></figure>

<p>还可以指定一个脚本来处理截获的数据，使用 -s 参数，脚本需要放在当前命令执行的目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump -s script.py</span><br></pre></td></tr></table></figure>

<p>脚本写入如下代码：定义了一个 request() 方法，参数为 flow，其实是一个 HTTPFlow 对象，通过 request 属性即可获取当前请求对象，然后打印输出请求头</p>
<p>手机端访问 <a href="http://httpbin.org/get">http://httpbin.org/get</a> 测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def request(flow):</span><br><span class="line">	flow.request.headers[&#39;User-Agent&#39;] &#x3D; &#39;MitmProxy&#39;</span><br><span class="line">	print(flow.request.headers)</span><br></pre></td></tr></table></figure>

<ul>
<li>日志输出</li>
</ul>
<p>可以设定不同级别以不同颜色输出结果 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">from mitmproxy import ctx</span><br><span class="line">def request(flow):</span><br><span class="line">	flow.request.headers[&#39;User-Agent&#39;] &#x3D; &#39;MitmProxy&#39;</span><br><span class="line">	ctx.log.info(str(flow.request.headers))</span><br><span class="line">	ctx.log.warn(str(flow.request.headers))</span><br><span class="line">	ctx.log.error(str(flow.request.headers))</span><br><span class="line">	print(flow.request.headers)</span><br></pre></td></tr></table></figure>

<p>这里调用了 ctx 模块，它有一个 log 功能</p>
<ul>
<li>请求</li>
</ul>
<p>还可输出其它内容 headers、cookies 等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">from mitmproxy import ctx</span><br><span class="line">def request(flow):</span><br><span class="line">	request &#x3D; flow.request</span><br><span class="line">	info &#x3D; ctx.log.info</span><br><span class="line">	print(info(str(request.headers)))</span><br><span class="line">	print(info(str(request.cookies)))</span><br><span class="line">	print(info(str(request.host)))</span><br><span class="line">	print(info(str(request.method)))</span><br><span class="line">	print(info(str(request.port)))</span><br><span class="line">	print(info(str(request.scheme)))</span><br></pre></td></tr></table></figure>

<p>可以对属性修改 ，修改脚本如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def request(flow):</span><br><span class="line">	url &#x3D; &#39;https:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;</span><br><span class="line">	flow.request.url &#x3D; url</span><br></pre></td></tr></table></figure>

<p>访问 <a href="https://baidu.com/">https://baidu.com</a> 直接跳转到这里了 <a href="https://httpbin.org/get">https://httpbin.org/get</a></p>
<p>Request 还有很多属性 参考 <a href="http://docs.mitmproxy.org/en/latest/scripting/api.html">http://docs.mitmproxy.org/en/latest/scripting/api.html</a></p>
<ul>
<li>响应</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from mitmproxy import ctx</span><br><span class="line"></span><br><span class="line">def request(flow):</span><br><span class="line">	response &#x3D; flow.response</span><br><span class="line">	info &#x3D; ctx.log.info</span><br><span class="line">	info(str(response.status_code))</span><br><span class="line">	info(str(response.headers))</span><br><span class="line">	info(str(response.cookies))</span><br><span class="line">	info(str(response.text))</span><br></pre></td></tr></table></figure>

<p>再访问 httpbin （报错了。。） </p>
<ul>
<li>mitmdump 爬 ‘得到’ APP 电子书信息</li>
</ul>
<h6 id="1-7-3-Appium-安装"><a href="#1-7-3-Appium-安装" class="headerlink" title="1.7.3 Appium 安装"></a>1.7.3 Appium 安装</h6><p>移动端的自动化测试工具</p>
<p><a href="http://appium.io/">下载链接</a> 直接安装</p>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g appium</span><br></pre></td></tr></table></figure>

<p>利用 WebDriver 来实现 APP 的自动化测试</p>
<p>Appium 相当于一个服务器，可以向 Appium 发送一些操作指令，Appium 就会跟进不同指令对设备进行驱动</p>
<p>点击 Start Server 按钮即可启动 Appium 的服务，相当于开启了一个 Appium 服务器。</p>
<p>可以通过 Appium 内置驱动或 Python 代码向 Appium 的服务器发送一系列操作指令</p>
<p>默认 Appium 运行后正在监听 4723 端口</p>
<h6 id="WebDriverAgent"><a href="#WebDriverAgent" class="headerlink" title="WebDriverAgent"></a>WebDriverAgent</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;appium&#x2F;WebDriverAgent</span><br><span class="line">brew install Carthage</span><br><span class="line">.&#x2F;scripts&#x2F;bootstrap.sh</span><br></pre></td></tr></table></figure>

<h6 id="libimobiledevice"><a href="#libimobiledevice" class="headerlink" title="libimobiledevice"></a>libimobiledevice</h6><p>使用原生协议与评估 iOS 设备进行通信的库，通过这个库 MacOS 能够获取到 iOS 设备信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install --HEAD libimobiledevice</span><br></pre></td></tr></table></figure>









<h5 id="1-8-爬虫框架安装"><a href="#1-8-爬虫框架安装" class="headerlink" title="1.8 爬虫框架安装"></a>1.8 爬虫框架安装</h5><h6 id="1-8-1-pyspider"><a href="#1-8-1-pyspider" class="headerlink" title="1.8.1 pyspider"></a>1.8.1 pyspider</h6><p>pyspider 是支持 JavaScript 渲染的，而这过程依赖 PhantomJS，所以还需要安装 PhantomJS</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install pyspider</span><br></pre></td></tr></table></figure>

<p>验证：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyspider all</span><br></pre></td></tr></table></figure>

<p>这时 pyspider 的 Web 服务器会在本地 5000 端口运行，直接打开浏览器 <a href="http://localhost:5000/">http://localhost:5000/</a> 即可进入 pyspider 的 WebUI 管理页面</p>
<p>报错 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.8&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;pyspider&#x2F;run.py&quot;, line 231</span><br><span class="line">    async&#x3D;True, get_object&#x3D;False, no_input&#x3D;False):</span><br></pre></td></tr></table></figure>

<p>修改文件 <code>/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pyspider/run.py</code> </p>
<p><code>pyspider/fetcher/tornado_fetcher.py</code></p>
<p><code>pyspider/webui/app.py</code></p>
<p>async 改成 async_mode</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 uninstall wsgidav</span><br><span class="line">pip3 install wsgidav&#x3D;&#x3D;2.4.1</span><br></pre></td></tr></table></figure>

<p>报错： <code>ImportError: cannot import name DispatcherMiddleware</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 uninstall werkzeug</span><br><span class="line">pip3 install werkzeug&#x3D;&#x3D;0.16.0</span><br></pre></td></tr></table></figure>

<h6 id="1-8-2-Scrapy"><a href="#1-8-2-Scrapy" class="headerlink" title="1.8.2 Scrapy"></a>1.8.2 Scrapy</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install scrapy</span><br></pre></td></tr></table></figure>

<p>验证： 命令行输入 scrapy</p>
<h6 id="1-8-3-Scrapy-Splash"><a href="#1-8-3-Scrapy-Splash" class="headerlink" title="1.8.3 Scrapy-Splash"></a>1.8.3 Scrapy-Splash</h6><p>Scrapy-Splash 是一个 Scrapy 中支持 JavaScript 渲染的工具</p>
<p>安装分两部分：</p>
<ul>
<li>Splash 服务安装</li>
</ul>
<p>通过 Docker安装，安装后会启动一个 Splash 服务，可以通过它的接口来实现 JavaScript 页面的加载</p>
<p>安装 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -p 8050:8050 scrapinghub&#x2F;splash</span><br></pre></td></tr></table></figure>

<p>Scrapy-Splash 会使用 Splash 的 HTTP API 进行页面渲染，安装 Splash 来提供渲染服务</p>
<p>安装完成后 Splash 已经在 8050 上运行了， 打开 <a href="http://localhost:8050/">http://localhost:8050</a> 即可看到 Splash 的主页</p>
<p>也可以直接安装在远程服务器上，在服务器上以守护态运行 Splash 即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8050:8050 scrapinghub&#x2F;splash</span><br></pre></td></tr></table></figure>



<ul>
<li>Scrapy-Splash 的 Python 库安装</li>
</ul>
<p>安装之后即可在 Scrapy 中使用 Splash 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install scrapy-splash</span><br></pre></td></tr></table></figure>

<h6 id="1-8-4-Scrapy-Redis"><a href="#1-8-4-Scrapy-Redis" class="headerlink" title="1.8.4 Scrapy-Redis"></a>1.8.4 Scrapy-Redis</h6><p>Scrapy 的分布式扩展模块，有了它，可以方便实现 Scrapy 分布式爬虫的搭建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install scrapy-redis</span><br></pre></td></tr></table></figure>



<h5 id="1-9-部署相关库安装"><a href="#1-9-部署相关库安装" class="headerlink" title="1.9 部署相关库安装"></a>1.9 部署相关库安装</h5><p>如果想要大规模抓取数据，就会用到分布式爬虫，</p>
<h6 id="1-9-1-Docker"><a href="#1-9-1-Docker" class="headerlink" title="1.9.1 Docker"></a>1.9.1 Docker</h6><p>安装 Docker for Mac，如果系统不满足要求可以安装 Docker Toolbox</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install --cask --appdir&#x3D;&#x2F;Applications docker</span><br></pre></td></tr></table></figure>

<p>运行 Docker 后，菜单栏出现一个小鲸鱼图标，展开菜单点击 Start 即可启动，随后就可以在命令行下使用 Docker 命令了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<ul>
<li>镜像加速</li>
</ul>
<p>运行测试命令时，会发现它首先会下载一个 Hello World 的镜像，然后将其运行</p>
<p>下载镜像有时候会非常慢，因为默认是从国外 Docker Hub 下载的，为了提高下载速度，可以使用国内镜像来加速</p>
<p>推荐的 Docker 加速器有 <a href="https://daocloud.io/mirror">DaoCloud</a> 和 <a href="https://cr.console.aliyun.com/#/accelerator">阿里云</a> </p>
<h6 id="1-9-2-Scrapyd"><a href="#1-9-2-Scrapyd" class="headerlink" title="1.9.2 Scrapyd"></a>1.9.2 Scrapyd</h6><p>用于部署和运行 Scrapy 项目的工具，有了它，可以将写好的 Scrapy 项目上传到云主机并通过 API 来控制它</p>
<p>Scrapy 项目部署，基本上都使用 Linux 主机</p>
<h6 id="1-9-3-Scrapyd-Client"><a href="#1-9-3-Scrapyd-Client" class="headerlink" title="1.9.3 Scrapyd-Client"></a>1.9.3 Scrapyd-Client</h6><h6 id="1-9-4-Scrapyd-API-安装"><a href="#1-9-4-Scrapyd-API-安装" class="headerlink" title="1.9.4 Scrapyd API 安装"></a>1.9.4 Scrapyd API 安装</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install python-scrapyd-api</span><br></pre></td></tr></table></figure>

<h6 id="1-9-5-Scrapyrt"><a href="#1-9-5-Scrapyrt" class="headerlink" title="1.9.5 Scrapyrt"></a>1.9.5 Scrapyrt</h6><p>Scrapyrt 为 Scrapy 提供了一个调度的 HTTP接口，有了它，就不需要执行 Scrapy 命令，而是通过请求一个 HTTP 接口来调度 Scrapy 任务了</p>
<p>Scrapyrt 比 Scrapyd 更轻量，如果不需要分布式多任务的话，可以简单使用 Scrapyrt 实现远程 Scrapy 任务的调度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install scrapyrt</span><br></pre></td></tr></table></figure>



<h6 id="1-9-6-Gerapy"><a href="#1-9-6-Gerapy" class="headerlink" title="1.9.6 Gerapy"></a>1.9.6 Gerapy</h6><p>Scrapy 分布式管理模块</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>RunLoop</title>
    <url>/2021/05/27/RunLoop/</url>
    <content><![CDATA[<p>[TOC]</p>
<h4 id="RunLoop-是什么"><a href="#RunLoop-是什么" class="headerlink" title="RunLoop 是什么"></a>RunLoop 是什么</h4><p><code>RunLoop</code> 通过内部维护的事件循环（Event Loop）来对事件/消息进行管理的一个对象<br>没有消息需要处理时，休眠以避免资源占用，由用户态切换到内核态<br>有消息需要处理时，立刻被唤醒，由内核态切换到用户态·</p>
<p><code>RunLoop</code> 是一个对象，循环中处理程序运行过程中出现的各种事件（如触摸事件、UI刷新事件、定时器事件、Selector事件）和消息，从而保持程序持续运行，没有事件处理的时候会进入睡眠，节省 CPU 资源，提高程序性能</p>
<p><code>RunLoop</code> 是一个接收处理异步消息事件的循环，一个循环中，等待事件发生，然后将事件送到能处理它的地方</p>
<ul>
<li><p>NSRunLoop<br><code>CFRunLoopRef</code> 的封装，提供了面向对象的 API，这些 API 不是线程安全的</p>
</li>
<li><p>CFRunLoopRef<br><code>CoreFoundation</code> 框架内的，提供了纯 C 函数的 API，这些 API 都是线程安全的</p>
</li>
</ul>
<h4 id="RunLoop-作用"><a href="#RunLoop-作用" class="headerlink" title="RunLoop 作用"></a>RunLoop 作用</h4><ul>
<li>保持程序持续运行 </li>
<li>处理 APP 中的各种事件（触摸、定时器、performSelector）</li>
<li>节省 CPU 资源，提高程序性能，该做事做事，该休息休息</li>
</ul>
<h4 id="RunLoop-源码"><a href="#RunLoop-源码" class="headerlink" title="RunLoop 源码"></a>RunLoop 源码</h4><p><code>CFRunLoop</code> 源码 <a href="http://opensource.apple.com/tarballs/CF/">下载地址</a></p>
<p>苹果提供了两个获取 <code>RunLoop</code> 的函数 <code>CFRunLoopGetMain()</code>   <code>CFRunLoopGetCurrent()</code></p>
<p>进入 <code>CFRunLoopGetMain()</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">CFRunLoopRef <span class="title">CFRunLoopGetMain</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    CHECK_FOR_FORK();</span><br><span class="line">    <span class="keyword">static</span> CFRunLoopRef __main = <span class="literal">NULL</span>; <span class="comment">// no retain needed</span></span><br><span class="line">    <span class="comment">//pthread_main_thread_np 主线程</span></span><br><span class="line">    <span class="keyword">if</span> (!__main) __main = _CFRunLoopGet0(pthread_main_thread_np()); <span class="comment">// no CAS needed</span></span><br><span class="line">    <span class="keyword">return</span> __main;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入 <code>_CFRunLoopGet0</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局的 Dictionary ke 是 pthread_t，value 是 CFRunLoopRef</span></span><br><span class="line"><span class="keyword">static</span> CFMutableDictionaryRef __CFRunLoops = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//访问 loopsDic 时的锁</span></span><br><span class="line"><span class="keyword">static</span> CFLock_t loopsLock = CFLockInit;</span><br><span class="line"></span><br><span class="line"><span class="comment">// should only be called by Foundation</span></span><br><span class="line"><span class="comment">// t==0 is a synonym for &quot;main thread&quot; that always works</span></span><br><span class="line"><span class="comment">//获取一个 pthread 对应的 RunLoop</span></span><br><span class="line">CF_EXPORT CFRunLoopRef _CFRunLoopGet0(<span class="keyword">pthread_t</span> t) &#123;</span><br><span class="line">  	<span class="comment">//如果 t 不存在，默认为主线程</span></span><br><span class="line">    <span class="keyword">if</span> (pthread_equal(t, kNilPthreadT)) &#123;</span><br><span class="line">			  t = pthread_main_thread_np();</span><br><span class="line">    &#125;</span><br><span class="line">    __CFLock(&amp;loopsLock);</span><br><span class="line">    <span class="keyword">if</span> (!__CFRunLoops) &#123;</span><br><span class="line">        __CFUnlock(&amp;loopsLock);</span><br><span class="line">      </span><br><span class="line">			 CFMutableDictionaryRef dict = CFDictionaryCreateMutable(kCFAllocatorSystemDefault, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;kCFTypeDictionaryValueCallBacks);</span><br><span class="line">      <span class="comment">//通过主线程 创建主运行循环</span></span><br><span class="line">			 CFRunLoopRef mainLoop = __CFRunLoopCreate(pthread_main_thread_np());</span><br><span class="line">			 CFDictionarySetValue(dict, pthreadPointer(pthread_main_thread_np()), mainLoop);</span><br><span class="line">      </span><br><span class="line">			 <span class="keyword">if</span> (!OSAtomicCompareAndSwapPtrBarrier(<span class="literal">NULL</span>, dict, (<span class="keyword">void</span> * <span class="keyword">volatile</span> *)&amp;__CFRunLoops)) &#123;</span><br><span class="line">	    		CFRelease(dict);</span><br><span class="line">			 &#125;</span><br><span class="line">			 CFRelease(mainLoop);</span><br><span class="line">       __CFLock(&amp;loopsLock);</span><br><span class="line">    &#125;</span><br><span class="line">    CFRunLoopRef loop = (CFRunLoopRef)CFDictionaryGetValue(__CFRunLoops, pthreadPointer(t));</span><br><span class="line">    __CFUnlock(&amp;loopsLock);</span><br><span class="line">    <span class="keyword">if</span> (!loop) &#123;</span><br><span class="line">				CFRunLoopRef newLoop = __CFRunLoopCreate(t);</span><br><span class="line">      	__CFLock(&amp;loopsLock);</span><br><span class="line">				loop = (CFRunLoopRef)CFDictionaryGetValue(__CFRunLoops, pthreadPointer(t));</span><br><span class="line">				<span class="keyword">if</span> (!loop) &#123;</span><br><span class="line">	   		 		CFDictionarySetValue(__CFRunLoops, pthreadPointer(t), newLoop);</span><br><span class="line">	    			loop = newLoop;</span><br><span class="line">				&#125;</span><br><span class="line">      </span><br><span class="line">       	<span class="comment">// don&#x27;t release run loops inside the loopsLock, because CFRunLoopDeallocate may end up taking it</span></span><br><span class="line">       	__CFUnlock(&amp;loopsLock);</span><br><span class="line">			 	CFRelease(newLoop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pthread_equal(t, pthread_self())) &#123;</span><br><span class="line">        _CFSetTSD(__CFTSDKeyRunLoop, (<span class="keyword">void</span> *)loop, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == _CFGetTSD(__CFTSDKeyRunLoopCntr)) &#123;</span><br><span class="line">            _CFSetTSD(__CFTSDKeyRunLoopCntr, (<span class="keyword">void</span> *)(PTHREAD_DESTRUCTOR_ITERATIONS<span class="number">-1</span>), (<span class="keyword">void</span> (*)(<span class="keyword">void</span> *))__CFFinalizeRunLoop);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> loop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>RunLoop 主要处理一下 6 类事件</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ <span class="comment">//observer源</span></span><br><span class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__ <span class="comment">//block应用</span></span><br><span class="line">__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ <span class="comment">//gcd主队列</span></span><br><span class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ <span class="comment">//调用timer</span></span><br><span class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ <span class="comment">//响应source0</span></span><br><span class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ <span class="comment">//响应source1</span></span><br></pre></td></tr></table></figure>

<h4 id="RunLoop-与线程"><a href="#RunLoop-与线程" class="headerlink" title="RunLoop 与线程"></a>RunLoop 与线程</h4><p><code>RunLoop</code> 与线程是一一对应的，其关系保存在一个全局的 <code>Dictionary</code> 里</p>
<p><code>key</code> 是 <code>pthread_t</code> ，<code>value</code> 是 <code>CFRunLoopRef</code></p>
<p>线程刚创建时并没有 <code>RunLoop</code>，如果你不主动获取，那它一直都不会有</p>
<p><code>RunLoop</code> 的创建发生在第一次获取时，<code>RunLoop</code> 的销毁发生在线程结束时</p>
<p>子线程 RunLoop 默认不开启</p>
<h4 id="RunLoop-结构"><a href="#RunLoop-结构" class="headerlink" title="RunLoop 结构"></a>RunLoop 结构</h4><h5 id="CFRunLoopRef"><a href="#CFRunLoopRef" class="headerlink" title="CFRunLoopRef"></a>CFRunLoopRef</h5><p><code>RunLoop</code> 底层就是一个 <code>CFRunLoopRef</code> 结构体</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CFRunLoop.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoop</span> * <span class="title">CFRunLoopRef</span>;</span></span><br><span class="line"><span class="comment">// CFRunLoop.c</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoop</span> &#123;</span></span><br><span class="line">    <span class="keyword">pthread_t</span> _pthread;  <span class="comment">// 与线程一一对应</span></span><br><span class="line">    CFMutableSetRef _commonModes;</span><br><span class="line">    CFMutableSetRef _commonModeItems;</span><br><span class="line">    CFRunLoopModeRef _currentMode;</span><br><span class="line">    CFMutableSetRef _modes;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>_pthread：<code>RunLoop</code> 与线程是一一对应关系</li>
<li>_commonModes：存储 <code>NSString</code> 对象的集合（Mode名称）</li>
<li>_commonModeItems：存储被标记为通用模式的 <code>Source0/Source1/Timer/Observer</code></li>
<li>_currentMode：<code>RunLoop</code> 当前的运行模式</li>
<li>_modes：存储 <code>RunLoop</code> 所有的 <code>Mode</code> 模式 </li>
</ul>
<h5 id="CFRunLoopModeRef"><a href="#CFRunLoopModeRef" class="headerlink" title="CFRunLoopModeRef"></a>CFRunLoopModeRef</h5><img src="RunLoop_0.png" alt="RunLoop_0" style="zoom:50%;" />

<p>一个 <code>RunLoop</code> 包含若干个 <code>Mode</code>，每个 <code>Mode</code> 又包含若干个 <code>Source/Timer/Observer</code></p>
<p>启动时只能选择其中一个 <code>Mode</code>，作为 <code>currentMode</code></p>
<p>如果要切换 <code>Mode</code>，只能退出 <code>Loop</code> ，再重新指定一个 <code>Mode</code> 进入，这样做主要为了分隔开不同组的 <code>Source/Timer/Observer</code> ，让其互不影响</p>
<p>数据结构：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CFRunLoop.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopMode</span> *<span class="title">CFRunLoopModeRef</span>;</span></span><br><span class="line"><span class="comment">// CFRunLoop.c</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopMode</span> &#123;</span></span><br><span class="line">    CFStringRef _name;             <span class="comment">// mode 类型，如：NSDefaultRunLoopMode</span></span><br><span class="line">    CFMutableSetRef _sources0;     <span class="comment">// CFRunLoopSourceRef</span></span><br><span class="line">    CFMutableSetRef _sources1;     <span class="comment">// CFRunLoopSourceRef</span></span><br><span class="line">    CFMutableArrayRef _observers;  <span class="comment">// CFRunLoopObserverRef</span></span><br><span class="line">    CFMutableArrayRef _timers;     <span class="comment">// CFRunLoopTimerRef</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>一个 <code>Mode</code> 可以将自己标记为 <code>Common</code> 属性 （通过将其 <code>ModeName</code> 添加到 <code>RunLoop</code> 的 <code>commonModes</code> 中），每当 <code>RunLoop</code> 的内容发生变化时，<code>RunLoop</code> 都会自动将 <code>_commonModeItems</code> 里的 <code>Source/Timer/Observer</code> 同步到具有 <code>Common</code> 标记的所有 <code>Mode</code> 里</p>
<p>举例：</p>
<p>当你创建一个 <code>Timer</code> 并加到 <code>Default Mode</code> 时，<code>Timer</code> 会得到回调，但滑动 <code>ScrollView</code>  时，<code>RunLoop</code> 会将 <code>Mode</code> 切换为 <code>TrackingRunLoopMode</code> ，这时 <code>Timer</code> 就不会被回调</p>
<p>一种办法是将这个 <code>Timer</code> 分别加入到这两个 <code>Mode</code> ，还有一种方式就是将 <code>Timer</code> 加入到顶层 <code>RunLoop</code> 的 <code>commonModeItems</code> 中，<code>commonModeItems</code> 被 <code>RunLoop</code> 自动更新到所有具有 <code>Common</code> 属性的 <code>Mode</code> </p>
<ul>
<li>RunLoop 常见模式<ul>
<li>NSDefaultRunLoopModel 默认 Mode，通常主线程在这个模式下运行</li>
<li>UITrackingRunLoopMode 追踪 Mode，保证 ScrollView 滑动顺畅，不受其它 Mode 影响</li>
<li>UIInitializationRunLoopMode 程序启动后过度 Mode，启动完成后就不使用</li>
<li>NSRunLoopCommonModes 不是实际存在的一种模式，只是一个标记，同步 <code>Source/Timer/Observer</code>到多个 Mode 中的技术方案</li>
</ul>
</li>
</ul>
<h5 id="CFRunLoopSourceRef"><a href="#CFRunLoopSourceRef" class="headerlink" title="CFRunLoopSourceRef"></a>CFRunLoopSourceRef</h5><p>事件产生的地方，有两个版本 <code>Source0</code> 和 <code>Source1</code></p>
<p><code>__CFRunLoopSource</code> 中的共用体 <code>union</code> 中的 <code>version0</code> 和 <code>version1</code> 就分别对应 <code>Source0</code> 和 <code>Source1</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CFRunLoop.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopSource</span> * <span class="title">CFRunLoopSourceRef</span>;</span></span><br><span class="line"><span class="comment">// CFRunLoop.m</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopSource</span> &#123;</span></span><br><span class="line">    CFRuntimeBase _base;</span><br><span class="line">    <span class="keyword">uint32_t</span> _bits;</span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> _lock;</span><br><span class="line">    CFIndex _order;                         <span class="comment">/* immutable */</span></span><br><span class="line">    CFMutableBagRef _runLoops;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">	    CFRunLoopSourceContext  version0;	<span class="comment">/* immutable, except invalidation */</span></span><br><span class="line">      CFRunLoopSourceContext1 version1;	<span class="comment">/* immutable, except invalidation */</span></span><br><span class="line">    &#125; _context;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Source0</code></li>
</ul>
<p>只包含了一个回调（函数指针），不能主动触发事件，使用时需要先调用 <code>CFRunLoopSourceSignal(source)</code> 将 <code>Source</code> 标记为待处理，然后手动调用 <code>CFRunLoopWakeUp(runloop) </code> 唤醒 <code>RunLoop</code> ，让其处理事件<br>表示非系统事件，即用户自定义的事件</p>
<ul>
<li><code>Source1</code></li>
</ul>
<p>包含了一个 <code>mach_port</code> 和一个回调（函数指针），被用于通过内核和其它线程相互发送消息，这种 <code>Source</code> 能主动唤醒 <code>RunLoop</code> 线程<br>表示系统事件，主要负责底层通讯，具备唤醒能力</p>
<h5 id="CFRunLoopTimerRef"><a href="#CFRunLoopTimerRef" class="headerlink" title="CFRunLoopTimerRef"></a>CFRunLoopTimerRef</h5><p><code>CFRunLoopTimerRef</code> 和 <code>NSTimer</code> 是对象桥接（toll-free-bridge）的，可以相互转换</p>
<p><code>performSelector:withObject:afterDelay:</code> 方法会创建 <code>timer</code> 并添加到 <code>RunLoop</code> 中</p>
<h5 id="CFRunLoopObserverRef"><a href="#CFRunLoopObserverRef" class="headerlink" title="CFRunLoopObserverRef"></a>CFRunLoopObserverRef</h5><p>观察者，用来监听 <code>RunLoop</code> 的 6 种活动状态</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Run Loop Observer Activities */</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">CF_OPTIONS</span><span class="params">(CFOptionFlags, CFRunLoopActivity)</span> </span>&#123;</span><br><span class="line">    kCFRunLoopEntry = (<span class="number">1U</span>L &lt;&lt; <span class="number">0</span>),          <span class="comment">// 即将进入 RunLoop</span></span><br><span class="line">    kCFRunLoopBeforeTimers = (<span class="number">1U</span>L &lt;&lt; <span class="number">1</span>),   <span class="comment">// 即将处理 Timers</span></span><br><span class="line">    kCFRunLoopBeforeSources = (<span class="number">1U</span>L &lt;&lt; <span class="number">2</span>),  <span class="comment">// 即将处理 Sources</span></span><br><span class="line">    kCFRunLoopBeforeWaiting = (<span class="number">1U</span>L &lt;&lt; <span class="number">5</span>),  <span class="comment">// 即将进入休眠</span></span><br><span class="line">    kCFRunLoopAfterWaiting = (<span class="number">1U</span>L &lt;&lt; <span class="number">6</span>),   <span class="comment">// 刚从休眠中唤醒</span></span><br><span class="line">    kCFRunLoopExit = (<span class="number">1U</span>L &lt;&lt; <span class="number">7</span>),           <span class="comment">// 即将退出 RunLoop</span></span><br><span class="line">    kCFRunLoopAllActivities = <span class="number">0x0FFFFFFF</span>U  <span class="comment">// 表示以上所有状态</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="RunLoop-启动"><a href="#RunLoop-启动" class="headerlink" title="RunLoop 启动"></a>RunLoop 启动</h4><p><code>iOS</code> 程序能保持持续运行的原因是在 <code>main()</code> 函数中调用了 <code>UIApplicationMain</code> 函数，这个函数内部会启动主线程的 <code>RunLoop</code></p>
<img src="bt.png" alt="bt" style="zoom:80%;" />

<p>看到，在 <code>UIApplicationMain</code> 函数中调用了 Core Foundation 框架下的 <code>CFRunLoopRunSpecific</code> 函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">SInt32 <span class="title">CFRunLoopRunSpecific</span><span class="params">(CFRunLoopRef rl, CFStringRef modeName, CFTimeInterval seconds, Boolean returnAfterSourceHandled)</span> </span>&#123;     <span class="comment">/* DOES CALLOUT */</span></span><br><span class="line">    CHECK_FOR_FORK();</span><br><span class="line">    <span class="keyword">if</span> (__CFRunLoopIsDeallocating(rl)) <span class="keyword">return</span> kCFRunLoopRunFinished;</span><br><span class="line">    __CFRunLoopLock(rl);</span><br><span class="line">    <span class="comment">//根据 modeName 找到当前运行的 mode</span></span><br><span class="line">    CFRunLoopModeRef currentMode = __CFRunLoopFindMode(rl, modeName, <span class="literal">false</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">volatile</span> _per_run_data *previousPerRun = __CFRunLoopPushPerRunData(rl);</span><br><span class="line">    CFRunLoopModeRef previousMode = rl-&gt;_currentMode;</span><br><span class="line">    rl-&gt;_currentMode = currentMode;</span><br><span class="line">    <span class="keyword">int32_t</span> result = kCFRunLoopRunFinished;</span><br><span class="line">  <span class="comment">//通知 Observer 即将进入 RunLoop</span></span><br><span class="line">	<span class="keyword">if</span> (currentMode-&gt;_observerMask &amp; kCFRunLoopEntry ) </span><br><span class="line">    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopEntry);</span><br><span class="line">  <span class="comment">//__CFRunLoopRun RunLoop 具体要做的事</span></span><br><span class="line">	result = __CFRunLoopRun(rl, currentMode, seconds, returnAfterSourceHandled, previousMode);</span><br><span class="line">	<span class="comment">//通知 Observer 即将退出 RunLoop</span></span><br><span class="line">  <span class="keyword">if</span> (currentMode-&gt;_observerMask &amp; kCFRunLoopExit ) </span><br><span class="line">    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="CFRunLoopRun"><a href="#CFRunLoopRun" class="headerlink" title="__CFRunLoopRun"></a>__CFRunLoopRun</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int32_t</span> __CFRunLoopRun(CFRunLoopRef rl, CFRunLoopModeRef rlm, CFTimeInterval seconds, Boolean stopAfterHandle, CFRunLoopModeRef previousMode) &#123;</span><br><span class="line">    <span class="keyword">int32_t</span> retVal = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 通知Observers：即将处理Timers</span></span><br><span class="line">        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeTimers);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通知Observers：即将处理Sources</span></span><br><span class="line">        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeSources);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通知Observers：即将处理Blocks</span></span><br><span class="line">        __CFRunLoopDoBlocks(rl, rlm);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理Sources0</span></span><br><span class="line">        <span class="keyword">if</span> (__CFRunLoopDoSources0(rl, rlm, stopAfterHandle)) &#123;</span><br><span class="line">            <span class="comment">// 处理Blocks</span></span><br><span class="line">            __CFRunLoopDoBlocks(rl, rlm);</span><br><span class="line">        &#125;</span><br><span class="line">        Boolean poll = sourceHandledThisLoop || (<span class="number">0U</span>LL == timeout_context-&gt;termTSR);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断有无Sources1</span></span><br><span class="line">        <span class="keyword">if</span> (__CFRunLoopServiceMachPort(dispatchPort, &amp;msg, <span class="keyword">sizeof</span>(msg_buffer), &amp;livePort, <span class="number">0</span>, &amp;voucherState, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">            <span class="comment">// 如果有Sources1 就跳转到handle_msg</span></span><br><span class="line">            <span class="keyword">goto</span> handle_msg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通知Observers：即将休眠</span></span><br><span class="line">        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeWaiting);</span><br><span class="line">        __CFRunLoopSetSleeping(rl);</span><br><span class="line">           </span><br><span class="line">        <span class="comment">// 等待别的消息来唤醒当前线程</span></span><br><span class="line">        __CFRunLoopServiceMachPort(waitSet, &amp;msg, <span class="keyword">sizeof</span>(msg_buffer), &amp;livePort, poll ? <span class="number">0</span> : TIMEOUT_INFINITY, &amp;voucherState, &amp;voucherCopy);</span><br><span class="line">        </span><br><span class="line">        __CFRunLoopUnsetSleeping(rl);</span><br><span class="line">        <span class="comment">// 通知Observers：结束睡眠</span></span><br><span class="line">        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopAfterWaiting);</span><br><span class="line"></span><br><span class="line">        handle_msg:</span><br><span class="line">        <span class="keyword">if</span> (被Timer唤醒) &#123;</span><br><span class="line">            <span class="comment">// 处理Timers</span></span><br><span class="line">            __CFRunLoopDoTimers(rl, rlm, mach_absolute_time()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (被GCD唤醒) &#123;</span><br><span class="line">            <span class="comment">// 处理GCD</span></span><br><span class="line">            __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 被Sources1唤醒</span></span><br><span class="line">            <span class="comment">// 处理Sources1</span></span><br><span class="line">            __CFRunLoopDoSource1(rl, rlm, rls) || sourceHandledThisLoop;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理Blocks</span></span><br><span class="line">        __CFRunLoopDoBlocks(rl, rlm);</span><br><span class="line">        <span class="keyword">if</span> (sourceHandledThisLoop &amp;&amp; stopAfterHandle) &#123;</span><br><span class="line">            <span class="comment">//事件已处理完</span></span><br><span class="line">            retVal = kCFRunLoopRunHandledSource;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeout_context-&gt;termTSR &lt; mach_absolute_time()) &#123;</span><br><span class="line">            <span class="comment">//超时</span></span><br><span class="line">            retVal = kCFRunLoopRunTimedOut;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__CFRunLoopIsStopped(rl)) &#123;</span><br><span class="line">            __CFRunLoopUnsetStopped(rl);</span><br><span class="line">            <span class="comment">//外部调用者强制停止</span></span><br><span class="line">            retVal = kCFRunLoopRunStopped;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rlm-&gt;_stopped) &#123;</span><br><span class="line">            rlm-&gt;_stopped = <span class="literal">false</span>;</span><br><span class="line">            retVal = kCFRunLoopRunStopped;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__CFRunLoopModeIsEmpty(rl, rlm, previousMode)) &#123;</span><br><span class="line">            <span class="comment">//mode为空，RunLoop结束</span></span><br><span class="line">            retVal = kCFRunLoopRunFinished;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span> == retVal);</span><br><span class="line">    <span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="RunLoop-事件循环机制"><a href="#RunLoop-事件循环机制" class="headerlink" title="RunLoop 事件循环机制"></a>RunLoop 事件循环机制</h5><p><code>RunLoop</code> 启动后首先会发送一个通知，通知观察者 RunLoop 即将启动</p>
<p>之后会通知将要处理 <code>Timer/Source0</code> 事件</p>
<p>处理 <code>Source0</code> 事件</p>
<p>如果有 <code>Source1</code> 需要处理，处理唤醒时收到的消息，之后跳回第2步</p>
<p>如果没有 <code>Source1</code> 要处理，此时线程将要休眠，同时发送通知给 Observer，发生从用户态到内核态的切换</p>
<p>线程进入休眠，等待唤醒</p>
<p>线程刚被唤醒，通知观察者</p>
<p>处理唤醒时收到的消息，之后回到第2步</p>
<p><img src="/2021/05/27/RunLoop/RunLoop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt="RunLoop事件循环"></p>
<h4 id="自动释放池-AutoReleasePool"><a href="#自动释放池-AutoReleasePool" class="headerlink" title="自动释放池 AutoReleasePool"></a>自动释放池 AutoReleasePool</h4><p>OC 的一种内存自动回收机制，将自动释放池 autoreleasepool 中变量的 release 时机延迟</p>
<p>将对象加入到自动释放池中，这个对象不会立即释放，而是等到 runloop 休眠或者超出 autoreleasepool 作用域之后才释放</p>
<h5 id="自动释放池原理"><a href="#自动释放池原理" class="headerlink" title="自动释放池原理"></a>自动释放池原理</h5><p>每个自动释放池都是由若干个 <code>AutoreleasePoolPage</code> 组成的双向链表结构</p>
<p>自动释放池本质是一个 <code>AutoreleasePoolPage 结构体对象</code> ，是一个栈结构存储的页</p>
<p>每一个 <code>AutoreleasePoolPage</code> 都是以双向链表形式连接</p>
<p>以栈为结点，通过双向链表的形式组合而成的数据结构</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">AutoreleasePage &#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> POOL_BOUNDARY nil <span class="comment">//边界对象（哨兵对象）</span></span></span><br><span class="line">	id *next;</span><br><span class="line">	AutoreleasePage *<span class="keyword">const</span> parent;</span><br><span class="line">	AutoreleasePage child;</span><br><span class="line">	<span class="keyword">pthread_t</span> <span class="keyword">const</span> thread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="autoreleasePool-在何时释放"><a href="#autoreleasePool-在何时释放" class="headerlink" title="autoreleasePool 在何时释放"></a>autoreleasePool 在何时释放</h5><p>APP 启动后，苹果在主线程 RunLoop 里注册了两个 Observer</p>
<p>第一个 Observer 监听事件是 Entry（即将进入Loop）创建自动释放池</p>
<p>第二个 Observer 监听两个事件，BeforeWaiting（准备进入休眠）释放旧的池并创建新池；Exit（即将退出 Loop）释放自动释放池</p>
<h4 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h4><h5 id="休眠状态的-RunLoop，通过哪种方式唤醒？"><a href="#休眠状态的-RunLoop，通过哪种方式唤醒？" class="headerlink" title="休眠状态的 RunLoop，通过哪种方式唤醒？"></a>休眠状态的 RunLoop，通过哪种方式唤醒？</h5><p>Source1、Timer、外部手动唤醒</p>
<h5 id="PerformSelector"><a href="#PerformSelector" class="headerlink" title="PerformSelector"></a>PerformSelector</h5><p>NSObject 的 <code>performSelector:afterDelay:</code>  、<code>performSelectorSelector:onThread:</code></p>
<p>实际内部会创建一个 Timer 并添加到当前线程的 RunLoop 中，如果当前线程没有 RunLoop，则方法会失效</p>
<h5 id="GCD-在-RunLoop-中的使用"><a href="#GCD-在-RunLoop-中的使用" class="headerlink" title="GCD 在 RunLoop 中的使用"></a>GCD 在 RunLoop 中的使用</h5><p>GCD 由子线程回到主线程，只有这种情况下才会触发 RunLoop，会触发 RunLoop 的 source1</p>
<p><a href="https://blog.ibireme.com/2015/05/18/runloop/">深入理解 RunLoop</a></p>
<p><a href="https://blog.csdn.net/weixin_42350379/article/details/104543184">深入浅出 RunLoop</a></p>
]]></content>
  </entry>
  <entry>
    <title>逆向-记录</title>
    <url>/2021/11/15/%E9%80%86%E5%90%91-%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="3f896f21438321bf86edc9182bedd0004c97f1bccde723ceefcd8fd10a44773d">e3130b10479b59f415c01696b2997142f4d09c8f70691cf341a4f7b7e34c3f387e73b9afcc8db9606e84428f5469c924913e9681dab404a1c9fd2c02aa573c50fef8366f60fbd8e978ccb5b076fc04ed4bf56ef0cca73bf44647eb8d4421a4c2ed5fe341b8507dbc67274c7bcb98bb528d3aff9bd456fe4b2703529f90978609b680159983752759b29cfd168560d7057646d7aa79b2200cc648e4b1aa69507ae661fd840ee9ddc29fba10dbdbb29be9652f6c6628af19cbc174e268fd82ffdb71156e1a002b2733b7d8d491f2b5ba729a66c16fc139f505cdc63ce8da037ac916af2fac3360e9e0c4762325f77c25fe129266e16979e4175eae956f96a888b4c1626ca5fcaa8859e1dadbab7079ea54cad671b6603fe6aa0ac457773e34a0f58ccdd6ae63ff355cdfc2ba9e508dfeaf0407bbab7b02a6b461387c78df65998f6a7ad97378098b497ff085cab8baed331733af46a69c3fa90d090c14e3d498723abe7671e3f770f631926942984bc371aebe0825fc75f309b43cc32355550cfcaa8cba72d940a40a71c4e677183c229fb4d89f763c30c0676ac87ab6aa8e286baaee4fcbad183bd35fe807d20f5fbe49101fbba9ef81b291510a9ab757dc0e67039b2dcc94940d9169881b26471b1344f6bfa1c100e08a5f40cd1cda3d0fe487af91b16060be6352ecd76e6c0a46cb81fc380e60e2c50e02aa3e6e803b3d019bd945eed4ff40d46d73ac739cb004b2094cb9d719514efd50aa039480a73c9d6a18ad57a66f0a3fb7cca9d6776fc74c454b9c4f36f693ec581b23921b5bfc8caebca733e57deed5b03b02ca9952335bceb5f6ddabe98c43b43ddbd092edae080c740b9f7a1fdd72f47b357d0d24a4c99b2294505ab17adda03b92d14f2c5becd769b9f479af99179a990e6d73ca5b1baf26b629938159a137ec713e0a01bb68655a358eac350446da3e9a15f510bc2999fb0724443aac0a3a05bb882071c1104ebaad8ab87baf6256eb965fdbae4c33bdf40a9ee12c4e900614074a9b6a40efc1e960a6db1e1b5e7a004b0dcc6bcdce0176487b1c713a28ddc0102441a03b4d145446580c540b1357a184e304876db93f378c873c5deeb23450ff404cfdc271ccfe7e7eca9f77ae67f50216754f71ce48040234ba9a1fcf5029697c1d0062b8711a150f1df066c87336be54341b06e2cbfa168ffe029252411dadec6cbd34a790f6030e5e4bdeaf0a134e532cfab592a71b1818aea931020266fe41d87cf793ed3f294df8260a924cf9fcd9ecb955d4c70b3711928d1c60cccbaec8648992aa2cfa1c2625d3d724b151a1658e4fd19f591a2b1c0825930d6096969939bf02de0ffe6be8f421dc690e25bd75012991b792c7b60f7e47f25a0ce12135133c28ac60eb76df13ee7c69f14d05d3c492194e31f835db6183b1c4f6db2018baf41fabc57ee15701960d7da4f926fe9d3d9e2c3c404b0d7687ba969675e88681ca059fbcdc92a2bf1fbd814c0f061a4813bfb1107eda76b26c687dd3230b8e70708bfe76d2c6e9ce7ab82c62b76d7ace927bfc1e6b7fa97beec205579e8ccef32e5c473aa330715b9d585f090fc36fc3ca0fc0f749ed23b26c9c158688ca2dbf95863931360610832705ab5d76f0e2885ef6b334deaef2417eaec2a1806e2adb152f0e3fc238d8fc6f2dbfd6a8b07e9d4789480e9c809a5d8e645e3f6fa4914262c5bf911e617fe3ee5e5b2e9654b4a6958d9fc3271965036db2f1e2a31b28658868fb6cd0da1a5d369f44be6b27638541db921eafd79c7fb2a3ef30a9ed5ae07077ae6a1ff724d701184f5687549d46ab5e16450b159c5187772ab2980ed6fafae9695d8579d23a4a4c14309a62792987f54cf6cf303d7d735c5591be35d13cdee749044c9566e8b66a32e19498f5c15438bf946750dec0e8bd62fff751af003f24aeeb5815091ad89494e43f96e25fd00fded78132a390d44601b95b5ca21eda895f871f291f4bd0826796b8a75af91ebe0aa963b9be48a276971cc936c66db070b0d56a2b74571376a6f74eca881fabdd2ca4fc459624c3e7351e6b2c1b5402c2d4123bfb646b92e1cee8a5fe57aa681aed2c849e693091af9ad81e691868d24ed2bd6f627840e5301d2a1b10b12d3ff9ad02c492cedfc71219acd751620334eeac9038d0c10b168a91f4f0df978d4e8d0439d646acc60aea9abb5d3bdd266d21783b7d6ab0f26266afb40516218e8ae19adfbe7aa071850bb5ed69e0df7b6c85f3884b058300f653d8192d4327c2fa9d0bfc5172a10e773dd10d6f01b29b91ff6b9b7ed1dc47fa11329c7b6f496c2b504688de0d5e1af9aa44c184879f8f9735fa6a0f218e2d26d416fe7f61ab11698a6c2f87c693615307cff960bea21f3970acccd856a749c4cab3b35c7e080398b3828758fa5d19cc3900a0a5620701d0cffbfdb2b6e2beaacf246af84b94ca47d319c9a0e2fcd0c5a921d95d89c170e7e7f04fc234ac41c6e6e5c8722e100c6241b56a0f840bf527f05aa7fe7e4071c3229927741ca0017a4100d50055b67b907b5f36ff279c15b5f9407c929383e00a6eec261204d04febd4f946d583c4495561ecd7919e92495234e9696e4283504c586a9e8b76da29e092a31c6020df474e714b5880b078e09f70920de4dda1f4ef2e60a8d3891a8beb37c39b649ace6c378dd5827b8c25d2cc2a5a29fd90de37c5fa5747d616fbfc5fef3cc8cd2c2d08253e53eff51be5d5ac6a89615c414b7676cf3f6e1badf6622e8e1393bb8d3cfc840bece28f2c49cd5c7241c7029ac724af21a89ea3c0e6e2c7bf7487c300571f220a15503b40d1c318989eb67728d372d1c6c6978962bdf2d0be111971c7be5668104091ed0a372c761bc7f7b0477bc5e15d2d1a8ff5acafc9787f186cfef6944375fcf47c76b91c5fc0a94beff066cd62d3220da6ca5eaba9413d7e39265a9455e8db7fdf69854598ed6772bdd02d137c3cd5defd1e57b5e48145ccac799c24d22f7e4a075e09b7082bf84c17dc7d096cec5b31f6f84228baa18ec6483fbf0b27c0d9fd616f696129bf982deff8afd8c49d1164632b6c4aa5407f9dfb46fb839baea0b0a9b6d3ac329595ccf94556ae8f55f7719b24e4f3890d13c6cb0570e2ed0704dcc913057d55e28a0c59ef78dae0987846133731a739199e7d619af5d2fde1f6a7cb281fa3d0aa15aa79ab2d3ddd2e87a4373a9de68b8a67c1e13423c5149565b102fd029a41f0a2d0205db1b21020854df2a0017a1c9b45aa90239210b1485d5cc0e3e85a965fdec7d8f43d1775f480bba452560664054dd3a63061d5c165adf3b161a79e86ea1b276b656df84baf3d6c569bb1dd05242ad9cf5a3145485b9e8b734b20c0c5066707cea890eeef20d1ed7a440344de5fd15e9e5e7d6264481707a6cd31280ccde478033f5c4872246c090c124701b41d9e79ea5472030727c5ec1f32d012e12ea06f6e647022608e1deffe8dc3f58390478ab68ce607bafa270d198ee3f0519ef7a5f494a741575259077e4f9148dfd44b32399127e300a665174e663cb9b1334da2ad63dd3e55f3f7adca9e2c7f3381af066c99e62cc64f2f157f08f0dd16cda959f01f4cb6188d2424d423232d8c560c13175d9061aa98762c7e4d0bd2a2df594c931a7fae9dd02fb3967a231547c64e713aec2b4ddfa1cd1b07675d66c755cc339fd079516993368f0bc5fc2df09e9ca4c3d30d9e5974956810e12ce0c1098bcb1c9f545602d84455d3dceea076893ff4bc4935dba0271b3cce138fc577dd97062de5b1c0a283f730bd036921c3e9c44b1532f0669d253ef47c32bf7699e29df0fc01ba07ab54ab47e7c57fc85cf411cc65a29e95d1e00c7dac348b8a65d219218dadceed05bc863f0b34ea1607b0232a0ccc7fd206ea30d5119f38d708b0eb42e87bfd8d8daff38817a7188edecc317362c2c4b0e4fd090c733b2b4ac14d8f8c9ba64eb01d85bc4c3bec9c598d3651ed49e6396062b8cbf99f3c16a95248e8c40339da944de7887e9f2471d67e5442e1f3270d0af86d12dbb91c8f28193242164f396edd1146358b2754c3bfc114192824f0eeb9c15b6b1d8abe9411cffab41778ba280059e303bda5fdcae311fd76a0418559646ae24dfa2f7144b5d05c9515867a7dc9378ba2fda650ed333e2a42eaa502c5e56307ad44889d862b87b0214b353d1cb5920420da1350976953d83e732801730b9d280ed4649644f40316c3822b769cc2aff3ea1e5327e27a0cd7c47c04a79a82e4e8453f7202c168e232a95c266ba1f13cb2c17f0c8d650c9f060c8a0da8b2d5bcbb7f1a86a86bd9e3e36e3e8a80a9d7df2d375c6024e64dca57f442bb914ec1f137951510ff7142ea5c16e95f6991ff0dc8425998869f6bad80e0debf31a0c81d36d71839245f1b2345435c7f6a8233feb36969a0b26ae88268009daafba6371bd498203bb7fd246794fc3f9844609b784c3e4de92022a2491a6861482a5fa0d7fd6a0fbd3a8f8ee2d9ac0543617b089b7f0c756f1f402ad355d42726c866d9c97adad844db3a40f737060e1f36117666d5e560d3f204d6dfc2c5b94c145b3dbc32a9d4dc002a491e2cf9f34c12b14cfec79a8f414ae2099c0926dec8bcf7a227a731b7e05b6c53d3a1714c66c53eb1c2abc06cfb6ed549d5917d7f72da228ea98463e05a6dbe9bff3bb85a73bf33c8e165ce648f0f97e8bf264e8a96f41318f329986da678fb737295cc6c7e1798946f43ac6d8988a5a1ff7254272a76b197b2b8a3049bf49c21aae5247d3e7f72763ef157578389e560fa6f4137ce75aaaad8cc19220c7100e349cb28565d5a261820403d77c811f9db671b097256fe93d0d971e4ceded0081bababf6f61011049808466a94fca7fcf8a8365dc5da265d1c90f77ba28c5466f2aee08de40a32a21a02da8f804a47ec53a69ee2bb1b05b1623dc344922d4a49e1ec69668064d8fe4328e81549a3a712ddafe0fbcb93c3e2d7b6cb1348871a7cd9d25a17194f997f0a5e7fce15985fb76b2630badc73613dd102d62bb3d7876a15a6a7d494b6d1c5be343922c376c7d7aab77daccba5168d5c26fc01d9f7c529fc12c0e4c9b5772bedb0c4a15e496a6475d3ac5c6cfbf32f43b98a9460cdd780ae8d37481d5780472ffe506a6b325ef462cd474b54a321c277097cf8182c3f6081967024cd2e1a4466826bedef05ea11e8ad59039b3adb6a37647950585be208c15fe21ec3b9c50daaaeace64c6b295c45c33af487993ee4694544557df0ee90b7fae9cb9aca613d04889de080562586e7023225cb31195b87b853c7a395caa0781784a6da7c37f89e7cfb9c7129cfb8140815da35579300b68317e896e3405d420a58a94ce80d8412a2fa7b3b6417ce9be650ef8380ccc72e2e0d9a63aaec2e275f810f0616c4077e3708cd05742bfd51f059193a9140cb627d4e8ff78f70d07d46e8dd3db6b8bdb293bb3a5742098842daff7f44a52fc01a678f94a12e3564e38e4ebc837394d8d0e28b8431993e691868c967a41b9b7247d9b8b8f002f16f29432b918cedc5adbb72f37bc4a029c428a55fc9c0f724fb9e89e6ac5f6e110a9bf9f6e2ab42b0bf16fa270301266756bd4e0c777abe83bb7f02e6073143b9cb6a31cb6ab205e5456264c038fa521edd470d22cb18e8ad30ea30821dbee2e604f97d66cd8af693f5d9e4bf6f22b6c8305267a7696aea3174f3318c10c14703eab5d81be22c11e6f04ac6c7abf815ae04f9292f90ee61fdd8f7fe862f60d933cedb66448f1f5eab0b459afca57919067f16dce0b522e50351a0eba1bba67bcaccb1aa91db52d46424784ba59ee5867197b1e7c397e74d149db45990401b642701b7f91e53da8792ef0c9bb291fe0cba4f3075090f7fcb7a57bdfcb07ba572146ddccd600ac47d83b960f38cf23e61634b45be9a9d117490261ec6139c25ab9a43e62435cbf5b9b6e454d211ade42410275c6d211ff1b64a4df318c5f1942a9fb3ca626ef9b0b7c81ec3fa8b41788733605cf23ac73c84c40ded87b0791fd9e0d9c7ec390f100d2e1b8e362f5cbdb7912e654721d0e98fdcf5eb1fba2ece5d7f391e2dfbcaa3954a99fa62f8430468cb73f5c18e966c9991499922b589e173ac35db6511151201bcfe276411e0bf184d8815ec14cfa2f0bc2f3d632f7e67dcbdda9317e3e4cd27d480fce64e6ebea84a2e194c6455a12b51b9e400e21910204a54494afa862d140077131d721f2d1bec5486437e41d12eb925e72bf43444d2b8f5d75d822e027e97fec36cf33dff9fed59ea58875529600a252f99a1e61e2f388380002788a292ecaefd384e6f2281de60282e56c77ecc0ba0fdb0daa918a4d3279e94f3ac6cfd8b2ccf333d8b92e3aa021d6cf6999fa9c445df649b47c6b4c84d4b5ef5edb59663c4f4605c33ac1d61833f748357503ebdc706551b7beb78873edca21b84df714e25e5f89894fa2277026822c2eb607cd81522dac457c810396b4e5d5666c014bcfcb29bd7a685633e26e08d46dcf49c6d647f5b3240b0e11571e3244b15d52f29b70574795353bc43933ab8d019287658751e17dab0c20f54296b7c1082b35f46f24adcfebd38028e897f622db7c42f195e4294f5f99059efa724d379877e441d24cbb4f0340f175ebde75f041e61b080be8135c4989aac5147ccea527dc2c99dd99cdffd6f222691ef2669dd6425e73932ef0019fb3ca4cf4ddc96341a95b0a4a7ad05986ddc4dec2ed691828dac91dc8c8e5e4d0bcfa1043d76eb492f7afd7fda82d77f2f6e4154a879bb577e03afe08d0e9185d09f4c0fa6c2ad17d7115258e2c93984dede5e219b15cf0b3c0faeb661d0b832a790c222067de03465ecfc2ce5ab589c0bc05b378dd41a0562069a35d947d545dce6c01196819d090f94d0a62c7c85829beb22b41722f7bfdb2432e0a709aa65221c879756118671664bc4390ef8823dad73cbd3446cbf2333295c5f81febd2b795084735d0aaf20a28c91bf6d6e58c2b82c2fb20d96cc1db5b11987269bdffffcfb38a51f6e17faa49bd77018edb4a467d41a1b5f565abdb31b40c9a6a320ff42b60d429995cf0ac4346ff79ff697e3aeaa8cfc03850cf7966d3474fa6b966a129d0ef58a95a9c0b97f665617cc90ac37a2d1a8cf82758418f8bdea597c6f2ad15848c160569bf2a977483313180b97746058e639f6bb1ecc92d8bc89dd5950071b5e59edab71dc2cd3211c06698dc04a79fa7feaaec272696ada122ef66c68bb01e829747f4ee4a0b9c37ac133cedc822c442d6080fbab170cefb2ddff7f3809ed33003b5cf269c226b988dae79c71e250a3aa18e73274e7d4ebfff9f317ad6fc1e8d7573c5973676304b3b5b516f9d1da1405533a8a57a1dcf1d72df4429c55987d79535eadda6671f3c89803468a63b3d097bde240e6615a21741747d5776ed6cef856e22d2c016305dd947f101a6c8f0b435cc804b50a0d34bd299bc4b66f01f81690cc7e861e3e0df240188035dc0ca93bd3233ff33a34b56641c1896bad5f5ae14863637423c8ca6b9aa7b5d9aff7a97b1894ab8d3bfe6cc5c188e94012fcaedbb305e52f13adfe87d187f5bc729e4b782e9fe95fb80b36319149f027e3574c2860776f59c3a2f316121525730b8f0db977fe748b71b806ab1e2875ded0ccb34ebd91512d1386dd9bec2d2badb71c6d07dcc69733575d6fd45a51b6b42cb06433d3e85e24d84b187af510224682b1b23d1509b39d037a6f8ca42636ba3098cdd7424ec715ed46709c879b39d5b5e7e8962d6e1b02168016b1ca4e991788e5f0e1d336124c7d794031b3aacccc4a76693c6598a12c8a1792b4000ef605c5682b60705284a037127bdc1f903597602ff7fc77714ba7d69d4c9017b9c9a6f330c282443c299d92852446f46a0ab7adb12b5fe9af5fd355570b7373863f4a99b2e3c9c048cc0fa01aace8f4c25bd4b90635300f2ab40e8c3281534e0cc18b765e3a1c1e336ffc79cf8a0339f5d8fe3652a6898b78991d6a232e1bb4ba28880e70217a34c2c4dc55b2f82771b83c2d774b81709acd389d16a524f85ca9f09a47fab34d094b48361098808936c172b5d1a084a10aab03c28f2b3a4dc3c7d0dee9cd8c4126773e57f5394a8783052e4481694925d9b5f78a721a4ce9039680cc00e3d94d3c0ab1d969c5130d47a68a96a4d5e605e87da81497962bdaae206a759bcecb80ce6278b41203b174aca9ba86e145a172c3ac3034a3bbeda2b4f61cc5cc420bf1305fce0872a4a3550b07addaa3ad08361e66acf5fe0c30d358290f7afdc288af0118b513831ef4d65eee27e147f1ede9147ad8b876b233fae7039c9784adcd997a768d4adf8a0b995630ebd985a043f110149a5dd7aecc431c7b04ee74378b3a48dd0188ad59a0f071bd74032b295ee9ccc0e28e4ac6c4ac5b6477c1d2ad2bb176e0acc47dd4ae986ec498bffef8aa131f459664933e7f698f0ec0333b82b01c247bbc0256868287eb024758517fa3bf5aa3774fb4a8f247524f3948e684eb61817525ce068a9f4e333819f3164ecd0024e2d5a6c1d16520d1bfc12aed822e4efd3faba24fa8870a3348186d497ac8ca5594a6bdfe1f8bb9d5a59bae1c20bbf32830d6db40838aae74f2b0c155c700534f1f89162ce109cf1c111947e7d96c769f9015105ab9339f60aaa61d4d93425b27f56f7818f6233e5ba71fd4351b1940ed399643d967caa7e713455208430dff07aa5a07ff357cf29928592434c2dc7ea02c5efaf04707070ca7d5a657dc124c6b8caf934e22b0433928295e939d2a9e29f57da3b2853aeccb33329b3e285e29fea9a29e02333293843dea9f3e6c62840b6ec74f46e490ada58abf5e5d4a60d70b5fd2d35142baf319bc5a05e05d787bc2e225ab3270033a20cc41d4eaf47a8a06823291b211e9f4bd72e598cc43db5d1ec3c7524641f4728fb9e25ee5d5d0f06923845e6adb3b22ef66dab4018b62768baa09e88f8a83ad33533763f6ccecb0ffc0d599ac221e3908d9708ed67a42272a62c9a502223e4281f078ce47f4441e0d3d300168ba8fe014909ce206881a9f16cec1af7a146954d2e645f8aefc35db1775010bd4f6f6b191538fbc4abe5e9d6aaac6c9d4d9299fc39c58b12d3cf5d57c52ae9ebf34d1a4f0e05ada335e646946599994b55729debc16b0595b33ac8ee254cc02c2bbdae5f994ef473f31d668b066fdd209109f09de67db715834455c19d3914d02d4c56e497d73a4281c4051f0bf7443f29d6fef4ffb4845dc683abf68642228eb75940b7cc0ab2aae878dc273c692f3f363b506a182350f612aa62a8acdc1ffb6ec06111d9f62e41a67036dbaffb6497620d488767aa383a9a6b225c68610f8ad0c7c7c7bd0025cc0c5c40a9a5681ddcf61523e047ac279322ab13b9d738775577b8e01efb9474cc1b49dab138abf935c0e41509ce4710dd8fc4c814d2cedd01f5be660419206c3ca94b16c17ac0fcfd07003ac97542fed8af673d75f1ca97ec8d6b75ec0c5a1c5cd59ed1712a21ce678823a5c22a9d5a6176e45ac603b90f908126bc38b28682c2cbb52e5100e4b7211425ab5bb49596fcf7d3f38b478e72048b9f7c335849808d748b5090346a510718aedba275335ef0e04d2f2a7c5a8c4d1b3ed2baf0c9f0906f94aeb05149f460f6a0e193ed55e2ede2bedc05b495410f834f681fe24aea4b5032948d4867a9ee55c31ac3515a9d559a659509bafbd205d214f1d9bc41c4569e831d9a44cd62532f58163edf32f3e3cdd19cf53fdada9a16a7b768ebb432b594a26ca7a1665c2160e18c34a025507875731687f60f09777ed07e243284dbfeb9f3074a3bc30035eadda47e6dd2a07807d4d87f9521f4bd597911111ec4347e4f789af214c8921528863a98d27a3e15c062ba0f767ab0cdfbb29eb60180ecb212782fb7d036c00615663971f133ebf9c0ca30239c80a3afad03e96a11ef31640918ce90c0359148636045a571d260222fc60be0f52bd8a4ce90773d9ff77b8e71b980fa1f778b090bb63e8f10da365f9aa992ac6fcbcaeb13697107c7d4fe3262d391d142124488025fab7a5db43cfa8ae85845578dc21e10858ee6f48e53dfcda2297461898b0da9e6ab17faef9d1ee5632d01903bb2e3fe8b9553995963b4d1358d860471967bae8880ceeaa287ab357d21fd49dadbfa5d56b5eb1f15b0767ee145c4dc76b80beb5442cbc4a524a477cf17203265bf0512e858c41864b84369e4276c29aec0a6a5923759cc34277b123eedce79d9b037583ce0d97b26caa0626c09adebe1b260c9d4b029fd6149c957475cad56862ce090f6a36515518d7ae7649dca51cd12e8bf94c4b1859018779c12539db0a065be49f4f191be1e73050f932864a37c87419c9f958cd943ee42f06e50d74269c8b52066022912467953e2bb8f78c315fc9e48b19a21a202da28830bcb653e652d418dbf0dd285f06b9c4e9b0d4edb11da4d990ce4a4dd677733239e5630ed67fda3f45d0df7093701d737f4ddc6a07f8f88f3cca5ac19b4198e94644ec74235f30ed4d3be0a6ffff50ddae21812fa63bd24045069c49e47cbcdcf559aa9b77c72d7a7c52f5793cb83dab1abf999ff4147a332e700430dfea892fbabbe7768458a6970a471f144eb1cce724d04e4570c775256d10ca62c5a0e0f0e2d62ec225eece7630769d8998a0c8bab82cdac51fe7f010e5dfa07f11e8a2fd71b649529ae6af2408e7c7fffb1fd1a52c380ff4f118fdd39f69ab1d41300797db836e7f47b860bc1c856c10dffb1e1c8cb7c01a52a2a6c51058a006c2f4be7bc7dc8858b5359fb36c340762b9f2332a11993c518f8cf271ac67a70c228f62b39691a4d99a4143d6d74999f8a49f0f87c14029e98527b3e2c3c7ae2dcab5fc054bc9a754a8c76ce0274d535c3eab6f2ae6e47add3e25710d29bcdae701c3d18dec864912da1bfa5b35c4fa3c6e4bc721b5d775e7b7008baab988e56be8dad2bfc9922b843be324d48ff893633e66d3a79b4ff79837471732129ccb0818a400a554a05daf14ae15d4bef148ffbc710ae9da4a23098c1e6f1f9e1993426aec51c461f8398f9a2232670ee0516c49dd877cce32a44eef7395383451b19090c842aada6fec79333d0d441d3a67b9d6b25994a85c0d44d8398952f65e11964565e083d6131b074aa74f4e6c0ed12678b28558c1c7331b87068272c7255026f0c6168a95cfdbecfb814261e77358803657332021912ccb08b4856cf58a1917a3cec6c865d0456a7b2ea6784633c697dab2015cdab59b6d86e5c9518bcb6a19d20fb1cefd009ae73f22c6afa99cfee40dce44c64203ae643610db6bd548605696a457c15aead95466f54f7e6bdf6d809ef47180e735370d9f3ede801369abc832d4b3555489050ed017218acd9d4b766d034b21371aed36cb1eca6e50e9c73d9bbf15340b12964e3aa205616a35d19c63ed36f8d6ccff05ebe2cefae79351be38cbd96624dab182ada230861a79b2fc4af09803ba47e0f9554d975dbffae08de709e2f4c3016d1612beb860e29bc193171e4c1ef86002e3d5e00f49806f6cd5d7c6ba1ed8b3f3dfde3d6be06e51e63c3a0fd7c8b78ac6d9ab0b5aba1cddd588de32efb0d453db04beb22520fa674f3be8bb30b1ed3390e23256da3c98eb57480a76d05db4a81af5c0bb914ebb83902f703dd4762f9beea350d186c5bb9f60da8fca4850cda8c6061fc0cd3d7996e0e4c2fdfbec79a6101ec3fa2834029e5add821d3125ca2da20a638d96002af988719734e0264fd348ab9af7853e6f4e3b976395629db4bb02f804ab6cd090d7c4839c77dd55af62982c3d90b3f152d6cbfbbb2641d600cea377c8813b4cbdd5f0fd55d5346317c16c1ad2a62bec12a97de5cf19620299103f9a932c8c0f00e63539fabeeab4f4a6ed475bfbcf66a7c5cc1d170a265e61a12bdf1260e9c00e27cee2d013b9f2ab7151c7f00baf31d0486a38c8ef0be3e46d405e1b8c9f789ace21a7aea9ec85b80f1a8a11c6d21a14b84c0f68f0046ca30d670895096442f70c90fbca4a50e8cc40c37fb8718aa8ec79c2d010530d34ec3a5d810ae3ce691d6cedf960e81f8553127fd194ad5a538d55b2a82179f70d89f9c35607e1f356e85fadf6e7e07be8514883aef95a0cb8d2943361661c1c581c65b1bc19245a95c074c6e6900f0885d08cb5df44abb653e77ffb2ce1e72521f7e9a45a129d2430fd2cd4343bcae0321ed143383b086320f9da275a627569957dfd85b7d003efa05a0d356e338567e2b48e9cd687b66718f8dfbc6a049f20855809cd2b1db098755d46b5eda5fee908527cd911e68fa437194ae58963f94d615cde2d20c51920d863896c6be43640ed4c47006f61601c67d34fca1cf65f42a61a979b9759ae5957995bae73b6ac319c8b81b598cdb7162dcccf5abdcbdf7a1e4e3c80136d924797a8f87db51b484c35d6121b95c09f680cc1ad213d8059fc0d9b65adf7781df35dd162b97961c61b919471f9a70cb352e92675f2cbe5b437529c3b985cf4ede7d5649b63e615f8b252a32a3477cc3a5a3603ffe2101a6a4aaa1ba2cbc33f90479c49820fc21a0ff2e97aef6d5e0a3cf773922d4504676028ba9327771cdbb4fce01d0bb1e6aab7a812dc73d9c33d8ac970a9160a23ffc0aece898a802817b442617031e004ac90256cc690609a24fcc41d80a0728e82ef7ec30fd38969cc93b6146e5c29a4de4bbd802b00f46622f4208d8a7a6fb18f12073d0f81c7ee337225360f48934b9d878831f525e3c9818f5de7b12addb9c9088e398065b502fcee2ae6addc03b1a58d21ee6d0c103257f1f412eba463524522cca408504d949937b8b918a5566e9d0c278b4899b4aa3d98a9efb0872bccef15fe0af44d9ceab723627e98e52e5f4a76074fa4c360007ef9d2e16cb15c43c2b769c8cf0501476688caf31a5c8b9cb01751a63a9ca0c9f1de69a1cf0f01b415d1b63abfff184c38b29cc484ff86cf32108ac9eb20e30de00bda25b52e665a19c9516a97c60e8056051bcdac02e52c63f97c2c3bb3a425f420c46aa40e151c8c43d5a2923d3d4b99fca993cf981c6e6bbc075c6f7048e8a5c555dffdfa5b5875bd519767c3cb245f0b1b8e40fa2468c9f3240cfc033ce5b7df13f9b3070cb9c682059952e441e70b72561c359d762fe0d9989a925b30da643ab6c0d0df70cce715b743c92c7855ffbe1995212b64e80daa98e096c7ebb75ca3bf9a035acf39ce665a91610461f7db7be55ff26fad01a91e450ac485ce719128508990df2cfb77d64d05ae3a02348c9bd9cbcfa8277db08fb0ec06c25eb07f877ba068d311924a9a932b74efae98cf9c8dfa1f7ac0918c1bbec952b3e01f5db06286e3e2544ee2ee01e6ce14983a7606fd7285353b10866aae362daf548706253eda3da2d2b88c837d24cc2646b065536e1c4350d72c73c0a4ede33f69156c8d87741cf930f58b101d2d689db0dfe649f8059eaef3dd618567a4d18f76a4981fc4bdde7d78701fbbb394ac903ba4f55bb9962b3bc2139b129616285401540af0f04d00fcb70b35e66bbb835fdd756853c7297b87498aadc1a2d4cfc2791ceac7e0f18da57befb60d77e919f840e6ab27a8b3fd6173b77d0af546c3452c9a46bda98f2ccc316b13df4ba3c9c492b55313d1910f47210f486836bb661b7712364527cd045df5493bdb39ed80082e8d2c52ee5b968ca742f1115996c1c73bfb8d702c565bbc2f5c1cabe2e6f35a1d477623846f8b35728bd2dcf4acbdab4a0ee9d7a0972da8f4c9e2e6b61943904414bd73c2ad2fabd77e6a17b332c6349c5f08abc2c02f3ae84b03ea6ba611aad1307c270932727134642b212886176e13827498128f5405a407607df96863bcfd509bdb5fb62019b79eec975c00056dc7b4936247c8e8e3fb76d53e14a5d4a0a5099d51cb02030c730007f4a143569c90bd5f76b650f557c2e04a3737b9caf02fd44271bce86039edb2753846791f9a10f7378da6a84c46578f836f9314106ff545d9baaaa816cc518bd0965a8796558e8135140e104d0083ce5241b1ba7b377362415a7d767e5af72e9ec5bfeeb3cb9ca1b3887a518ab8cb496128414ede1cb163249702d57522ffec339f04a39b90500d3c62add9748b58894cf24d1cc1ab60ae79d8e855eef95a98078b902c4cf03ea5b65fd44123300efe4219b51b8ef1d7f604f3bfc3becd473416a2002f89ca33b5dbd77c8b99a5aeaa6f831ee68dcdff8719011e765a20db10f6bb53ffe99ece419eb1df25a9dddc0bf3313fdc72af39f496a8653b4ac93a510b6ecfe111f90fe04bb90338bfdc0a9f3d4345b800be1b71ebac8bdbd10ee2a45ec18001e2df3bbdc2c696b31dde71d0f9f4c022dfd87e84aaa41d98738cb35c130df1eba04b20e9951e7863311af8a26125948af91c3d62601e2103517f28f484fa4222ade8a4850348d3c5c455a012a98d221d855dd843264280c1085d01b37779f40670ace24e6b4e5eb4a1fdf738847df2f55722dbaa3470deaa49dfe066cf9cefe26b3db5bb5fa82ec613ad65ef3c3b8b32cd6691bc3b62a6ee06d66a0240f41c8c25c17cf636247d5deebab6023c8bfb59920fc31e454c19af24b794fbd9d94989f47280ff5ec7488cdfe48df340e32c294eb86529a87ec27374a76e3e65f3b28e52a176c4e7e882e0a31f8f0adbd5cc79faaa30b4c04913348687b2c83205d11c2eb56c21768a5c31bf5e0e74941f51752bd324fd113f2ad4d94dd481dce8764dcdab1d40b3141e603dbae782d1ebf2a5dee16402943c6cddff3030a064c0d8778f372c8561efd64dd6e8b858bd83851cdaefc15e5044bc013519a7d82b29eadec12ad452b8e0fced05b666083325e19fab8e976664efb14e8b2549e4221d41127914a5ed64e05b2e32c89308d7215811781a35da55b2fddd83eb4c28e54c0d4b7368ee8dcc60bcb3811dd3829bcc8ba5809ebaa525997cbf48a4bf5b8117180aaa0f0ed5fc0fcd2f848a93de8a12cc17dab013d1a9b2651dc1fc107b8701d3f4861efe9187b65704c6451ecd12e43101c011556c7be57c21e9b43acce41e6d15b605136cdd101322e8780d6784bff2b48b08095f6659ec764ec561501334fb5442a692040635aa3898f84ef7e00285e93608ea78ccf8c758e7aa6b6d18d46e4805ad377943ebe8d4fbfec6600233eae680f30de06a4304624f0bc569f8c09a430e6afb2a9f29ce4a1f635cb470d305444823b44e02a5dbe34a215478bf237573564b2ae726d4c1731b69fcd7e2ecff76d1f58f0376d9c36c1bedf3e2f298bb717a29e28984bb3b70c00598d1980e8e11b76159aa1ae2980af7ec34dca6ed1e3cedd7baf641f5ae9f40454fa33e726b8b55df0850bc8a63b6d6b0df196e4ca650dc2bb268c563c21e5e1c9fe38727f196e7d288d9723d496d2f721f744e117f7f182dc1a96a601d199317cd27050ad868667c96036746d9eaa8131f3239b753354006ce9a826fd5850cb255ddb8abfd8474df82b1dad5200e0ad957d23340c92dd10a273b3f711b780a9def865f1b06c785277f77c2da86eccbf49ef0e635120402feb89099fcc8e4187c59c7c49c8042c07dac720350a54252a89c1feb10d20e27745f216158369c6fc036650546e1362ba3d2efa797dd8220b4760a70808a3b6cffe470b4576b480f4d44dcf08cd46324649dd4edfa0c282bcdf7568886e4f0a5d0e2ab72fec274b23fec0140e342eb038c38ad233fc3daf4e2bec06aec80db5657760dd0a81fa143f12415a8022a5c3adcba498d73b49fd2526cf5000b0ae4b3d3654eab4be10b26a6a3ba1c977646149e27f165957a7f6aef53a065bac5135fcadb6c89ab477dec673fdc2400d90b9770b147da64589f1f7c2b14891de33780fe7039fa2369d44643c96f9e3cdab66d6a7cf5d75b9f4d89ecd1d41d39a5822faed70887418968ec0d1693947a68b9dfd99e776d8d06907589b6ef8f9e9f43f3aad55ecfa4bdd561f3ab94a2f89aadb90f75db8d67e1afc6eeb52ff142d24832cd931f174885a4a253c67132e292fcb6c1bf5860737d36a62903ee634f9380d359d7ba7744b3a0638e1066be6ad162881d9fb896cfc32205f76c09f6eba6cbfc48766077248be7750781e5ffafe3c8cb2fe97aee4d0ea586155c4f5e51579341d3f9e1c33eb5fcf72062c665cd1c7554d1d65659e7f4b8589fffab26ce268740b1a29db7699f7e7756f610ac43484800dcad5a8e17c03a30c41d2f74c1cf5b7bea78f23fa7d1d89a6549e45760403f7f5db3c968d733732165eb574ec77dfc0dc618a7c4e39777cd7212f9e878c192d6df8db0c25a1937573c72b14d870900e9ffd1c9a9a87f4f54a8f875cf7d4ca7291f77cc618e79d9743de4192ce7cb6ba544e865109751062d6db948495cc4bbf3a442ee6a7dc8f94bb23acdcdb05dba3a3748bdb5a983be1a5839c95325a0f5739ce53d57de9c1e88d5aaaca0ad05d53b9a9143d82f44e8e3b78718dadf9f3cd65cb3123c4b4a5439355de9ffbcd121c28319a247038d358423dad3645bdbe544eacc70e5b6519b3991ad683f06394cc9aa32e69fa3b20640895718a5a4ed1708f317fef68fca4434b7e6bb7b1a81412f5effbfe390b51c29a0046df7dc03f06643eef5543337335190911244e8a4ba9d3b912dba4cc929be6cdd496960782308f8ca762a481c6711d4edd7847b679dc801ffddd01ecd8f5fcf62be45403ad3dd5da84bc4211ce5b656eff3b4603e63e570dce070456e70abd30f8f68a34b311467481a9e8e4e6b585a1aab54d02cc86fe5f1973db46f8c364eb069ad82107186613c98fad9d31c0bc9babaef654c1cd7705e55eb608b663be58981083a4645e7c83711679bde88d75a442d148c3057576b22ed0f7cf1a8a8e9f47f8082806c83dfc23c29c48ee9a1f7ecea738bdf6e09260f6015a17a60b8a17d48075fb7a4ed195d9e23d821ef1a6a26c3505f71152a8b133c80485b0c37b22698111802dc52d4dc97b84ceaef24e38843f27b4a2e254d9aa04ff0e3bfa47b30939cfc83eab8c3ec92e821ea592e7ef53ebad168731f0cffaa25a5b0fae39951e572fcaa19193a5410e31fa1a0946a4fa7b02bd30b2524a9cf8f64abb43e4ad24adeadbe26850d4e4e0f77957003840d66e891f763d3dbf36b830afafdb6d04a4416f22f6e94cf339651962f9ae0c79534d7845f63b8d4d71c31062cb2ba15b3c3670a5da8d13db0546b2e7a18730e88686e911729b9e2b2b95986a49716ccc7a823a6982ed318ed303ee06e3eab6431e2eed7f071ff79db507d4d061e48adbd8cc4a2ff20fd20bf272df46a63449390c1a506faecf90c8bbc3f6f9d3937b9469f4a370a762cd2e99d4af30878e596ed42d5e549df8f0cacf08975971283b3393ee7dd4750cad7db4e5e364865f242433f927f18914349524405a80d0b708c3d6613543bf58d76edcba67ce1124c6a73c0e2e96217d04814c486cd0687886f7615b0fe1a167d347b28b32712d60de8e849a4b3978ce28ed0e8ab968984faed66a8c9bec5231f4cda63806fc11fbb5d5522c45a955564f606dc0d2fabdd52b3d679bcce96924d78dee11a9294d29e3f0aa23fe872d0b1ba480d25b97322686c3ae52cf6d30614c69ab13bd2ed4ef3283ed5fde1dee5828e1e23a07b0b4f6420ee6fbe5c1edbc2959c4df5f87da48097172d59ecb65162f08a5c9de2da6aa9650f18581b94ef250a569ea76b232286a972777c34f1f4bcc8a6f6259043875445ebced9263cabbe283822242563979f6a6092d253366c6880169b2cd1b24dcf43b9b271f2bb51133e27fcaaf06169c78b00761b078ae4372bb044a5dd59c7b629871489c7238e58763ca0e7997f2cccda6e10d8a12436b8c25c9597a607685fe6264f8502060913e7e034e804f523f069d75173c4da277730bbff2046b98a7ba0fef6dbf0f3397433dc81a80a11bf97b93cc7e815f6b67526923395e014849108e61b1c5e0412031cbc195d0fab8c8e53e542be198f91a945124f813350275029aa32fb09f2923cec2ada807a69574e0db0bd0f81bbd83e67fb667769a0e9a729d11a145fcefec76c554c4c250f9e83ba0596dcf5bf1c92a6ca7c34c0b3999d090578e6419ab5338b9e67efa4d16f0444dc0a47fc4ca16b7f8286ace909b04845b85731b1cf5e5775d2e20e8816a476e01876cfd1d59ed042683e2029d543d60817cacab33341ec51dad8e5d9b6e890c54f5f3ac111f6cff116f36c1c338e1254551a920cf24f8517f8e32b34fb8bf21a30b8195dcd43d160d54077458f87552c189d63b8980ec69d4bea50767d1ee40d69d7291010781d2bb1291d3db7bbb0a2eb311f4fa56cf5c4d25d780f80511adab80ff263bf961e3203e963f2cf356abcdd92475c57a4b36e3b16c457c09349c29a519b1ef67e559e0b08785ce89468a0991b0b4bbffd408115459516a229bc9d6859e2ff38eee43ef77bf8ebb824edef082f408a1cde2a7ed5fd732c84667f5f37d24dcfc332fdf92452c58faad3ffcb32c73c101fd83f327661adcc0ecb820a03a6bebd7530a79e2301f789725963dc9f52233d3cd396a1d40c3c43c769e943917b06d825cee20ed1edd85488e3661bc950ca2f20399b9ccf560f3be5a48d165f6127ce1a6494c2b1a175612242fcfda2e8884504bdc630200de96c19d2f267e5a7092ccb0a15a8d8837e7f9146ef691f7c696d04b9db901b9f18e0f3628f0f185ff9cf721343b32398d06a923c67245cc285b08df007af98606e27b2f128b0fe4d63a69720cc98ac35fae8580ae3dbd846ea39a6f67bfa38c41d082734af551328b2bc39b6ab758d7e347d6fced55d1ddf774e04a0ae534b555d96cfbbee45fbf700a83b51f09167246dc521d4a73d54b51ce154af2c8793fdc55bcecf62c6e409d0d23fe655fee5531b99ef91be87d7a4d990783356aef666fe88aa27bd739d947ce68233f31acd781a712160aa3946c39bf837bf0392fc5d49db6fcc70ebb1567a5557c013da3bf630ac7c5ba963f2be92f758595cbd2f477275dfb1399a337c6c1c45c494f71d48888439bec647dd39f6934c4285bbcf890dfdc6a038bcae93c44c91968230dbf67f3980718a663574bf8c35956fe96017a0395f25adcf86f617e4cf397d2822555c74ebb050f44b9d2e015bccdbcf22e9d6dd917fe3500fad8b564ddbf777f5cb8e2820f283e68a39fa44cc959c4e336e99f2fb274d9c166157d012bd5fe230213d5231b3098e1f1c5baa58459aac78ac06685040a5a942548778ac8560250c232c48c0ffd3756d30197daea19b01cd6967dd97600930e65ccc30824f5052c6cb53e966885a2c568d1533ffa0f3d66eadae8faad7fe099e629f4f364bf8c00ed31e35cb8af6a250a0a637858f48c9c2b18fcf77f1d4dbe912596d45c56865b725e7c69ed11138eae66386def0de06f48f3378c1d4bf535520a9efdcb5f96b3822779d9bb08bb8eb8389edd1cda199d254b39d1c39f8932f741c9f58b977e0c24750600ec6f2656f678f2934b29cd2ada6c1c78d91d8947da89ae929270fd0987ef582af84285655e257d9b33d37bbba33bfb50453ceb51882bcb5d66cfd03d87e2d912d7ee893e9459ae778b05453e74359a2088e2ace3a1513044316ad2d0ebbff23677f8f756d115a4b9c7256b53a6f327dcd91158d9e488341782416e92a3b0458c47e825362839003583ac99f8ecbc07534a58b272a0d121372c52276655eb976c89ee3b90b62040988ef580006e3fd213233e7c5f0eb0dd305c85674aa9280b9eca34ea6059cccbab028bddc05f865f9c2583444a5503071701a1ce52a05a2c263a4e5a6040d3ee67c3f8c163d6e189ca4a9ed7b5761ab497f28e33724a903305bff62374918cd4c7dff1ab43028d25f4f4120919a1f12115089d2cc25b077c6129cdd38aa2aa919e24deaa660a782676b95069129a7be8db1d4efbf9b6743e3c9bba81e7f7e005b6b07459261e8279233e6067857fcb48b11d2630aa44fbc7d0d3fdde992be5a5f220ec13989e00ad0c6cf5d59ca35fc109d36632ba6b1f5b5bf24acc447530a870f7bd6cec75b679aaf30b1b46c296ceafeab265a092f945161619dbc15cc814259eaaac33cfb57b7f3c51b256f1040ffa13da224a6195f7551286bcfd069c54939447d0f7f1bdc415ad02057d60e5f777332dc02d351c59147b01c02a95ee80db44adf3eaea0e7054db2dea7bdaf1c3fdf619f81640edf2df71e34a70f3ecdd401a704cf678c4f4f51ed62d6e554779a6d10e7022d63345cb0cbef14d08a5f357bcc5581d3a0d7035a636622f098fd4f12ba371a19e6a44d84d1e94a01e20b2ab17bc3ff4028f6cf2fc47c0d211b9c95f7a1b85435ae6cf25b41bbb6148fe3ddc6bba359d1b38d401708da6c9d7352e9bb5196a0011fb385d8a91677b7a68b92662eec83740ba8052f9fc95ed1912ab6129cc24681c92e990edff898c7847a856455103448d7e508d8e173d36853309e7db4e2cfbdb185d7b2d5e614e8856abddf474ba8c28de5f1a3b96c2c41b07d865ffdd36ef7fb78d393eba8251782148b68c71dbfacee0166a05b7138b11761559c8b242909e592d930b012ca1f04dfa1f120f5abd12eb4f2e14c293dc09ae020fbeeb3a9ce0e349fa3c14db1f6b1e29b0faf94004c6a34a9e2c7b3b5eafc07c6f385f504c932009d71d2c0aa10cfc50dd49ad12e430267a5361cc8240676f6cf551a9c84096cbd043968bdae8f676dce6a227026961de4157116bda506ee670fee881702f2f55c36b4ad92fef3261345f77cfacd49169c808d57bf2103f1f85ab3fa1f8666d35dae4b8131f575f886a7f4682c6417244e136eae23663ffac4fdfe1999dee6755393a218b2092ebf960f4b3b85bc2211db203f5cd9ba3b69883bfaba94b4c69172ed11c334693ce080a92338550cf45959515d987903d045e112a1400225b84a551702c13ea7e9b7611f8a0ea7f65355b648f4ecddd1fbdd389eb9a361cb1b4795955f6c2691e7b79d015c40f280bb874f38a560871f4229418f2975eda2dd20362676d2e8842b6e814f0bc7fa7239f65a8c9a6c0e3d5ee5bccde79aed70d581247054de0cdc5ef96567dbc24f0ef6c358b0cca09fb853bb3f843c862dcb607246846b5147892fd74178e969537f0d89f06d566b4464ea8293c39c1dff5ee7ea5da18e0f925d56988af471261d2ece14835b8273626861f70999ca2c83e864365dc73fba67f4b59434cd5b20e8aa2ea24e70ce5509506b1a8c6c48e720253da418419e4fdb24a50e228a91721661558a18016c01088bc11318ec43c7418785d9b0c209a3dac9b43e38aca74541d66369094ca57f28ffb109855b5d420467e8d481d089b089d089e701aee1ce9fdf1f9167c56c2495999c7ed6d5d38887c1d842f01ed58d617ebf499e27b92f48ab4fc2385d1fecdbb486a6ee1d19efea3fbbe8243d3040afc31911f1184ffa301ab8544f765fe8f82035d77e46b2ef561685d57a4c0a3e00e4ee98da56c04c124a6e240a9a0d1dedc0e2b8c09db9e120bc5d8808acaebfd408b01fb7a262cd64d3168c2243af0547dcc9b358b2ed4e78b740c0375a992fbf92908a970f16097ae94fdc258c210692e4fc3c95c186a705e1c4f9738b0a578a3fbf89b9111bcd2aeb1d0db21288f89dc82bca2aea43b39bbb3ae13360a3a888aa9ada42253c5644556bb51f8e37d0fec1d987aa65d688631887ff062a6b3b093b4ddc2cedc90e42377521f3b536e193cfd3025a29ce4130f2403bdad20749bbf432c339a8d089a9709fa9c5cea88ca5e2a6279a2b60b4a751d5dca68de79dab3696eacaf9b76173655ac3222ed96f312bfaea8dc1c0b84e36f89b8c6231d59374add87f088d8c37ef81f99b6e246438f5f11e5785814d0e5fa3f65d15f6ddf8ec1cdd55b58f388b64b3106b5be7eb2b080d0965ce59c13374fed0fac4eb4ee53cb0a071bc4dc42272c4f471df9662483eaae41a1e2d2ba9072d0e39999e4d147b4debcfef135bbaec52acd5fe418bc562be5e40c683415781f835e5268b2683f5bfe1d88c8c3d8ebd4fcc353f5162aa3be151c17366c1dc74742ac6adf0c931367e2e4e3d1e83d3105ff142626bb9e768974f3b21c90c4faae391936971b8bbf91309eec49d78ad4d5fb650b95ca80ad1ce5c094b29dcfd522223dcfc3a339a49cab554f3e020ecaf8d9382e25a1a6e12a2ae024235dfb19e2a898b31e197099209565d7cdd71e186864c7375f86e1e2274e3f17d1b4256a953e56b94ee76f8b10f27619e21174f8c0e64566524ae58b64b3805598f4f754a24741916768de1551e77756f8bc2c1b3affeeed3e34919330b61924965b0a941418b356a8416773a568cd24a55660457297fabe60c389da19c44045ebb46e6e6dc7ead1f77e71cb9a5ad6dfa5881b6d1824700f8216b1d389e9301eebd611f5d2a5ec4e7bf8bf990179c891031944d6eab9029f3613fe68a28bb6edd751ebf3c5a0273a9d723d1a80546a756fd250605b5c9ef7b19a2193d175bdc06951fcc681b4a4821919b3ea71117dc18414dbd3eef4c3373b1a0e13a55827f9bd1d8e7617e6071bc284af7c0277265093204e05fe014028ca975f7188e9fd2b334f7d4bd81633bc519809aaa81450ef225611d3a2d79242421eb237919d8af3a52d014ab5795ae1ef16bbfd591683d5073fdb161d252b2c32972ef041848f3b7be1c9ee1cb8e48a08699390779c5da0d41f3552640cb641441fbc942b841e98281c730b1e8a6083004e08fe6de03a83fa89881fa3a196ad069ee9aaedbb9e93985ac54c4b3b1cbe9b88645d17cff662a25289a577bde80d4410fb7ea538f43cab24209f5a6a7f4856a2fa791544631c91536b1745c10f58d5435d241456fb4b19c9b0fb9d7f6d804bc8f2ae2cd798444e9f757c7741d8ab3310a05c26a94a4a39c2f696a54095676ed0d8a1ac42c1efae57ab9c6849f5ffdb4c5b4a8daa1596cf3736a1115626a3754cd2c7990100f3d910cb9493efe4d3b9ec1f535c543f466c9f6cc06c06adbd8b5f471e515f90db2cc365e0bc273610ee4a249f2559de7d350b8161b00257a064e5b27b2b49077b5be670739894db849a6cf308508414cf4d1f8c9931fa3c6d1ea8bcaa8f5516fcf6fc3fd3c88dc17ea8d7f6a33edfe6c61e5f73a110caff8b8bb649296d54210ff170dd59b6de49bcf334b9e6182e534d000f77e674a7f0fc685ffef8bc50495bcaa44a45ca77601b95cfe8c4f26e0592a234bce665136f63f91059670107faca1572535384126a8a1dbb8edc5a140929ce3e44067021b6304bb50e93b8d7a27b5a80dc7f632da2aba48a15fd70446b96be99a7db639eb302461d05fd4c947caf081ee67676980bb312f480ce8f8df28dd01d8b2b6ccea4d54613e47adf7c29048e7a86f26af1ed5db24aca8e73710b983ca865498e34c37e1286b2d49f345068d96cec4be95f59824b7cad1c4f33f7113b8cbb1cb60c87eb44ba7ea66fbccbc77d9e66eb314fd3bdba917bf1f09935b607f2ca18150d4bba8761707561f8793303199b94c197c68fe61f38ed4416745f5df88f5bcc21d664f2ba21c82868cd68dee267280cd09721644de17c229c85a3f788e1d52cfcede5fd39f2146f691b77bed199b52453c02d0039ec5d966e0c084fa39e1dcf0694ce7ff795c56be3d2a0f424a4086c9e1394e870219fbf05ee5bb21b515fd6419a325ce6fcb0b002caec3ebf71eda88e52975d50c5ba0e2cb3398cf40c60db72182d94d8839915c072cf463941ad273404aac7d0e59669feff3ff6bbcaf2b609937c40c743e95caebbe2742b283a5b19a714899f729168aaa1a324c7f0d7f8042d7f1d84b40636da66bde00514f5db8b5fd3a32a4256f1d7c03efa99f709d6be36f0ee1a23b13ed702f48633e34421e3ff32e841209c423ec28330196cf6f622e6beade8b3d79c46380a899f23fdaf125f24afd8a01e545bc1b957dc968e14461a3d4ce69b11d3691e1352721a6098d353858fce020d913b8a057c25506824cf0562ab406b249850d5e508c8eef5a4a921d4d08dffdd267a168d401cd3f4f8d84635345e8b3787fd53b31975b60e714d64fb2bde1fd8c344f293167283ddf54ae2bb435aaec2775ef531e3ea8d2f040ae4eaef5ed81a505e9b178c000055fe341eb81e6ff079d2067d83bed87e80abb7355188a400eb7230735af9271cc7fbb1d6bc3c2d90f7c102605edebc9de3ac46a0c9a7244ad784dc4a55d7e59084c37557334ee40e76ddec20ac8dda20aff612641c1a76caf518cffeb505d89af4f2d450f563262e02720477dcc1f077046194dfebbea8e5650cfaf636114714eb9c69cc2ce5eb448eadc6f3ada887e44b0d8f2c5519bc55d2a73d20a048081036cecd4ecc52ceda1558b43a6b0b2e7d1f258e9f7b69c6f7b5adb0d8c61a509ae70701b2663bffafe6696a9b85dcb65c7bc0858df44a13a206b8a06a9c93573811a3e878d2830fcd7ecacd9ca5f143b165cad6d6d2ad0b2248b95b44249eb9f105dce9b59b196662b0c7929a4f23295c99011662957d259ee88e2c771b19bed4bd8eeac682034b1241186313a00d98e98185e92ce44cc3e9bed5b0a6d78e0fd25759a6afc1592b956c94b3f1a531d8005c2b5f81f70ab951f146a5aa90531224ca765fcf1501726e35055bc0610776141444ee9f81fd5cf90d15274bea7ae8b789e5aefc74e9d839069a873a86e6e2d50bee4565964e39f3db956a75085c0e4c609e300da05aa95beb533b5fee892198d0930e81f71a00ef468f2b5f1d95f237ca76ad93b4e055e7115a83e874b5daf9e494959f81e16f51880976d1f05104e370f184f6c3513b22345a192e187d4b5b64ae469d615f594d76d03aab5a501f2332f39727cf3fccce745fffde8f27d98381818cb1b83c790eae0f2e31ea01ccca51b140bf47d52291be171c95a6df9a017b0f4a8a9b18468bf28898cc2cd2d666cc9912c69b8a838011d813418e9dd7f1bddd6ece20000f9d9f4da96223a9a30a2ec30e00801b57e528413d626bda91d68c5bca654e8e721ba1a23f016ece70900a519d06222f4c2ffbb00d7b1d68946f8763e73c987698ee623c0301240dcd655e24562b8c69ee5c1ec6c1791a945e34c6ef6121822d2056578f480d2074eb24013efe464a47b7809549327ce451871a264a190d46be91ca7ed990d604b7d8d13547f7f3e6d259f29dd7028dc5823188f63dc94057893f81a92dfcbc48644e11796c3ff9c134eef29fc935b408737f3adddb3ac23e69613934e9a04c684b89a5d37c6a750a7437098589484bd601ae819861880fc263108696cccb52dd332c0ae9b3f80b640ac594a00fe62435ad91686b2aa25a95557d6438502ca5e9a48121ac5a3ea25a65cfa0cfeba57e5e12e29968046515126d465158f6b9904f3ac14a23df9ffc23e54f565f8b66ea4e3ed23adb34593bb90daf0eb3ff9ba2192fc2b8f62629c5173fc384a1adb037fceb84f5cdcb37653557968d519624a58049ca3096ea7b493875324bd2c1a0cea888a855f5d5ecfa765fefdf9d67f46eb4ec1bf61a93ba10532c86defcc97a5a8f7f9f0fcc43cf41072578a22a8100764d31bc07b4f5c532e2d8cc27a829afc26102b6b4fdbc300b038484ad0fce6035ca61d77df7245e585cbda4173d57ecc55b2f652a9cebd50b19703e5b4206c6b62e0ea4ebc95e1f2d119f2f0d707f6a95c86bf2b7f34dfbe6eb58c6f4411a88350547d5bc6d5ddcdf587a000585c679d611d897fc2537fcd3ee78cac30fe4d3596d75d672b29ab5b0165d6f0e8eb500d1254eda692146d631c437e0040718457fa49a924ac76d55d3a7f25f7ffba16c8b21b2ea9129c8d12245b34ce31e089315b87a59e76f2b5c1033a77eb63e02fb727e2c1ef3c8532d3297eac7ebbbad3b437e32059b8cadab7479ab9a3232062a1abc36dd1560522eed80ad020dde8c426822db2daba4d24cd087a53de36b3f9b1826091a6855afcdbd258de19e79c9f84e0025ef7a14c59661091032fceb541efeee205703bb1d0386e4ff4b73cf1d2e3777709499acd96b602c91aebe6971022cdfb963fc48dc6d7b7396508b067e3401606b9c01cf54161557c799ed1cdf45a8142beb74465c056767c6cad0f86835d8d40be424123ec680127115dcd52105690fc3c775de908367f5ee78b0c5abf391d72cdb1266f7eea81b98388994de8e03019ee374bfe8f8711d37b2e7eeecd378b3748c3afd394eab2342a842cbe1395f98b72a89a231a4837042f20fa6109b51201ce06c6092eeab6a605f00566d7c963f70cb128f240dc20de7cd7516935fd1432ca9a4cfc1d82710078817f627940251ba9b841e13d9f1c6c0a45c29f07931c7d9b2831a1be841fbf3390fce3535aeaca821818d991055e69d3045f175833f0ba903893ba2b74bb9f732a952c1fd0bfc8d0398bfe455815a06f4c07ef6fb28f94d30b8dc7cba8071a2949ac916ef054529ca851983f8c22b6857d92b07959fe23f046a7d1c9e4aaca46d5e61d2e1be522b6289225607ce00682c3d442eedc3d813a45cd28abc885e52902ab1a9309364d40e619a43ec62397d9b9420a6cb7c5e9fb4fabe1fe9bef7164afa88874db87ccb519fc76ac0c2929170e8b6d3ecd86586f8cff5be4d69049ef1ae6353e34ac32546e2f7f5b5d3bba0549c6c0f35e78204a1927be380f1cf71e8cabe71808b6ef1b6dfc59c2f407174d47fa8938aa62e11fafafa905cd539d27b2e843be198e0c82085da9a4b2184149104a1949969f795b9b3d57000aa756eb4a38811a5d2adc11052b8f697dd7e7912aa405fb4c9138c54bf2d358365c5ae6fad3146eb3e5d5afb1d54c74e8820e5883150b6b98dbc3dc9c596c4dcea4d21559ce0f8cffccf6ea1d55272e2dbcec1efbf5b9c041ead7e671ed472f0b89a7a6adb13c8e5cfeaffe2d60a13ed1a600076ab1159071f480f4f35a8c3b2ece80646fec79c71f1c7758d063246c8006d618f01f78410e928564b769a5d84695be3eb5f06ac7547b9221cc18e44fc478a4363d59c027b95a582f84f3e1feb6188e66dad54f7b8f63eeca3eb51781f2d200eb31f5b361596506104e717082d97506dfb0c12ea35f653c8a7eb74ae21c2e7d04ced44d15c615328820e39a7e2e1997dfe74ff1bc49295e03815dc252da64f1089b7c9bc18c719009221dde4e9a8f3f1ea39cec8c202c91dbe0d5afde9dc21336381892f1720c0394907978f87448bd4012215ffd8e771a40c6a63ea5c865f86cea9b9e8b7c5c781c55bd6c4cd5cb0d7eeba51e64d21270c66074d3fad7e30eaf944d7b316c58fbdadcf19d2e9cadc2ec98da9f16f3546b6027a1721ad9d40bd8ffba2897ee99ceb6083856c12b421319476490b11672c582b0f53c868091fc7c2ed90caf738b1df087b87da3553715a5a0f774ed055ff5cf45292c55fdb02bc6e5dab3864ab30652677ad239f31e6cee411268b9092629f81c38e5d37167566b5f82e392721d9d1bf98f3372e0e73c974a6a5b59425c2183e0a5352fa3ffc969624c73a1d7bab457fdcaa89add22d2ce8181a6c3472d0d5f084cedf469122494d25ec2f5db533fc1e5a189e219a3bfd19e27c808e2f5044b19d9f50907ed3acceabade108b55e27575f41b79891302b0d799a6dcf4114deef7b4515203910bb826b234cdce855ed59b90997e71fba45acbb1c36a041d06e24889f1b625010a12a8b42fa33f78eb8d187903d802d1d30c98725f86feadebebc1f779de859259cd9c908bc4c3af7de08d68342c9e15104d8633c8fd4c86a8cb4bfc9e53891737d7d01d916949d8eb42d2c72006001779374e14fb8475bdcc6c131ae64134aa53e537f7f8badd31e8ac267e14107285e3a12e2eaa2efa0ced403c9f53dcf66b0460e8f0b055ef10ed2bfd8055cb390dd821d9a6467ce61da9ae7191e4ec1b74b0488b5f7e4ff4c366ff7a07ed29daa765f214b92476a09115f654a82506f845274e04d5d355cfb3948b05740d974bdf39eba8372d9685d85e2977affef6d0d2ae7971b42feaed639c2f4133ec3476403abae35d49ec258dc1d9588966bcd55728477af37ddb633b95d10ba0c56b34f91a5ccecf7a9d65fce49fccce6b5dbdf96cb33a323b541a87471be6629901a2011dd06e5543a379a053afcfe73264ceed1f347da5ed0db8275b35e4d794296273b8e97a6455aa1a2c0e1d157df3ee1708b9adf6a3a66639ca267b9400c2aff9f1640c3b7335cae99add686ccb3640847936b09b8ffb18a2112997564c73d8e103aa1f10cdb600893e3c88323bf1fc1c3959a9dfe1c95f3f12c2819465b486c4151393f0114a74cdd479ffe5bdc4dacbf5b0702a4486035ea89846bd284a8a3df61fe76c6563d3c756788e7acacfd1bee2f034680e2861cba472a9ffb0b3ab0babbbd72dc9f4a66c6be6ccf611184d666594ad526ca320e227310f9ee57b079101a8e9d9bd7bc6a78c3c736b90b9f313f303bfc327ff80af14137ca9933f8d21e46634a3273af1c863252fa3d1eb9b437d191f1b76c745a9d97acd65125368b69ff1b1543b730ab09c6a7cbeba112a23dac1da2d41b106a44ba8ec61b7b03d86d11a337b50a2527e194eded9d3e178c632cefc9317c2e920e1dbf7b17057e9f3e3b24b6b14cecf8fce20601eb89107bb3c1980a952a1342dea3f367731da410631c7ffc0d47749f4c658513da854325bb561f75358928b42ba148918e966e5ed7f90f1271bb878dcd077fa04231e8449538f8b9b7ebec495e6842a97b467736b6dd97375fce8ad2f5d39a6d2bb74e453e756addd47b87738e9ddeb01fb660d1dc7fc1020713b25645bed7a4b3d969fa659deecd996828bee3874566543c137c782393f53433a4fae13f9da31333d6e62be063a7be9566610f4dd9d80fec3bbd18f896fbca0e3fa7b330aeb9bd70315071662eda5c4e5a9eaa1aae2393a286f6c5d362f6ab4fb082af499d927e635c112b45bc8f5571e79d0dbf522ab4aa92d9d722fb8d68c4727cc3785dbef5d8192efa7561b479bb943b4146cff47febca4d7ff0da3acd4c619c1002f46c12de97468e9812f4d993a12f01091d5878429260eee57db24d491f91e0851d935ddf3d9604092ab3931eae86b6ec3fa87c01a0fc795784168a5a254791ce6b747eae9015f537a53a2801869ae1441c408804d3333d2a1219f14d1459404b476cfc0055eb8cc9acee6fcb8f825e76acb2706e2c949329e61abdaaad515072a42bd33a90b46bc54fab24fdcfc4a8bce8f4a836f8387c70ec08f76cddd6706a5de22168b47cf9da62ca7e51cb076029df853fb4c5e9fe51ff06d36f3db2a447eba7c6c3165d0820f4d1bed6c10fcc7facbc1d4402ea49ca7b208241ce76414afd57553a5471a07b83f744213d1227fdf81adf0a7c593cb09ee71e506a28024569b782b6c382e88b285b8255c3dcbf21a61f34c7782202f6e3e830a2378faeb0fb6cb21ebc4d449c2208350047959357ecc724a6308acbf48a9c577832b26bb2a2f597c64e0d1bb03b0ef4b8b4f15214c7492d23e559a77016507848bb69a1f8165840f12b08ded9217d40dcdefa28dbb1e7c50603e3594f989de5a765262d361802524c65e9b085320b0c14e8b7315f04b4d66c4e969d2d7fbe9e08d603cb0d1d3a9f5cac9d63a71a6c7e2a230c4de37aed6011a049560dc079fdba3960b6de2424c068aaa6ae34342e8213fde1bc65b78404f9b341420a8fc2be98a58203eeb497985cabeae4cdac84a55a9a260e101802692b4d59dcf9d98c9a290bd58d2e4151f72d537ed5fd67f95850796a9bb537fbd7d91ae1da4d21c89d5362aebe782519006a105e26411306fedce408021476098a7e6c91310e00af9f5497ab423750540ae77cfcaeb3024ba4678584a928fefada0b3a2521ecc1a4ad7c07237b5f477ac82982e9da694c93500790bf05effe7c0806ebad8b2a64b4148160362294499987bcba2eb211114f35598a6a2ef3e818ca1ed7421c0452621e01ad7eb6c775afaa657976f8bdef1dd0685178bab74d75b6d48ce56e113f349d0b79d10987a329c7a3b9b505121ccb9b626cc5d5dff2237760a476e0a638d2b2e7c311b1f19871d5c7e9488c865dc9478ffda63ee80984c810eaf4a57315982566481283da05759f70e5a309c5c903c4551bea3acbcb54e5de113607aaacd90d5c56f7d2b275d5f25d13cde8721bab6e73a0581a05c630959e3d8e9b9f5db25adece604c6c30bffb9d5deaae2036297e96cfff49c1cecb5571c9fe99f2a8116f591f1a9ce67a3f7728fe7ed2c83da08c221dbff47866ebaa70de0947c0f4def24e3cc81d2c944ff55c59edbdd22246a3b70e5bc6151384d4a34aa78c4447e1d2b7b28fe6ca47025630e9fd8ec55c7910604fa9546f1c1d6b7c950a443c985dc52e9e41bdc8e6588c2b16234ad4b82adbb9e0fb3219738bd96dfe917da311a32c50d0b5b2fc1bfde7ec2ec10f6184fa176168a570cca28be6c6a39593f988798816dee3fee69b9309babd92eee0d8e59a67fdc58da78503811a8443be8f4db6de200eb205072b9282ecbda19e6e18fb645e0d5445c9c57b29b1c33f27e4885ae097a3f73ce78934918e905150348a8ceb68031e0e45f2e888cea4879fc6aa233d06299d3f596b08b5f0c7d535a8d8d3a859f642dee172d169d80624b5c9e561ae2a5a88a3480a43e66aac01cbddee7bb6e24fed65aa53753422c361454813bd4f14637a5130b39d0e65a434cc64ec3e71eee2e1f54d2ee94cd966716cfe28ec5b7cccb6f99373412bf36c6a9cb2e79a53aa7b9c1068055b67f8f0d28f51f861836dff9a3d0737f29940e95f06d5de6c366bfa9868a8cc450e582e0448d1bceb3ecd68b3a401d42d0489da83e4618589fb2bce9ab973e5745eff3c3714b37a65edcb97184b4f6054783ab4c21835ca7d95263c88c7950eb7ecf7c0508d8554c43db3da3f7f98140532cdd63c2fab1eb0910684a0eb2f6cee2ad628152340d232213a5f194547edb234e705cbe0015f6f947f52158969d8e84192ca8a141fcd35c0b42282d2ab285206bc07c58dea3c3fe1a4ee0b464c328d7cdb374fb422a130895237927c4b40b2856478a9eaf487614f7ba5c6bee8439846bc746a7a4dd836e13f4cbd22e2920b84803d1b2c2c6667262e34cf287ba84dee13d77907092ac6486e116607fc3c991e437769b07b7060d19769df8ae679295f1a3976d86af7537d6df5bba4d8d3afdb2f5e7f37054bf47eb378d45f849ec27a14f957dc46f86d3e10ab021e214e39a07d14e9fafe2107beabc2c19476151c3f5e2a7851db55bf2a4975f984d67b3d7026ca77dbd633c238515dd6b55ff21e0b9d557f9be441dda4734295741a4381485cca3aa533394f29ef4388b2254fdaba453a5f96fdba118873ce9f5d178607bdefbd1bd92d0a76904b41553e39e7d2540757dd7e67290537ad1b8e7db475a01bb75e63b8ed3d91a30950354120d7ad93524c6908baeb225edd7649fe2b837d3c816631a58ab8ad8435eb506cb3efff3f59f54cd5ad794a5142fac92d4af48599d01a742ed12d538bad301e105dba6f37ae166176a0bfd198834b26db6409dcdd78429b654131bcb51fdfe611b74ef5c1be7de366fced740526cf51f006ac16eb839c34b159f3491e99f2fa448c84240c62642be757361147491658dba18c09d280a03f683cfb77f0b825730fbd3df73113424c77b0661d4b6d82e64e6c27d58f40767ce3486ac793d31c80b0100a8271398b29667f39e897d9fd3f0eeac37f6cdb103064b8079b8414f83eb12b4cdda5fe6fa14024bab31e634b3afe993751d65228f5e0701e619436b461214d5eb15395e497e094b8f10e7ed61bd054ec845ff895ca30ada73e21af06e707c6d32cbe05fd8d6f87f5a7bb49f246975500dca4e8796342aec353bd0b0ec5f48cc13ec992077d7ae3337c95576c40ff0770574ce66b4db1a8df436bcab1b729f942dfd928493983d71b4772eb418492c91ab06499259680b3fe6230f6d91fc64815cd267ff4adba5c8b98f863a878665fa21854fd80ac99db0bfd83b4345141cdbd512e8e689ecbcb827e635a3211e234d28e7eb28f2f2bec0db4dfd09dd30204b90afcc10b6c15184c0204488574a5ce6f931ef5da5bea18de775de0a71c1855d65853ec8cb57af40a8cd1c1784aa39a4cbf40e1bdeb1f555965731e170250bd628da477d3adf389ab2f835262296a83e0462aba559113d231b4bd097fcbc1e72558a9946c77217dff62fb62cb4f7bdded41a22839a7aaf7807b49f71c77edc92b6cf113b2b0ae96bbb14084dd6182a0282bddaa3eba5b8e79e0fdb0a262d62c5cda924fdbff274eb62539f191159b68ddf105f7c4232ca43566b184e17a54abfeaf0f35d09b288afd6f3af10daa342b89addb30b4b63ed2dbd8a1e03f8b6923e4b8b3893aaf4ab66ff2297395f687508c85af18ddea45af79c21680c37bee98b55e39729d00e7208a8a9389587d16689cb4497cda278729cc785f8a1c05b5ba31578ac96dbdb708b656ac153d267b4befaf2069b7733107b7d0562e287cec088d280569e29909dc02cea05243380e899a9a06ced42dfc7e6e7154ea530793b05672265f214874d6bf9a4b59a2c18ac48d4e991aa8c52225b7e5b5997935bcac999b6a6f1aaef646f3d8fca212d4b7782c949e02e3a7b5fbea0e57d7572c590dec70e67f6e7c65576052ba290009aae7a8c8241318e1d8cd20d9743cb703de51e6a833540bc6cb31b28f7baef05d57cdb8cd30d1113554731cd8835c33fa0f5b87e771142dc20f97b45825b2787cdc9ee891e48be12570e8a82c1e6184dd0a8d8ae9655446505f0ad9463cab3a71c9493988e09ba6bfafb2d31f1ca04a2a35e6a3e5aeeb3c8cd058ba17846c3694ad4bf14ee81421e7e89825db122d876b8183ffbeb122f992e81ae80d489f061ceb9463a4f89d5b27a779dd09ee75987e093c26c970480f007b35c4f0dc83dd46b9e1c798a513c4759371cb8e1b9ba168b4f15f93b8402a78392ce2124ccf6638240f0a1c2d8d8a1bb7296a399fccb41eb985e7733a671978de5caecde841919bd7cd264a99c936499b268ce07c49ddf92588f9cbe7d81e90ceb23fee6cdda3d5a5a94aff6c2c69c06e79e8ef7e7c5aa499b658ec0b8ebd3d10643ce368505e134c2a61e72bcf2a0ee5b2dc848f970844f093d1924b63646e29a8f640b2e471d1ea082c8866d6643870169e47008d74adffc54073dafeee50f09f58bcb40b1eb71bd3374184bcf2f4ea0ec20c39d4c66c8137a011c71a5a8aee2444594827aa1d45b93496f6069e14c5c312ab6253de17899eee82926ce33760227cd1f958bdfcc9150b5bad70ffb6bedbc589422d33873f3ed3c22c47eb1d595ffcf43b7eba9365350d7341254b13244d6c403d02ac0ce7e78ab3b8cfe27ce7cea5b07eb3fe3f7693fa0198935984ed9e1c6e1ecc93108f687099186843cc4687fd41846625b7efec55f6dfe70f11fccd164dc099db1ed81c7c873bd20b358bdaffa70996ce86e7cdbf04dbb2033858ad75da04dbfc7238aabf8c24f571a8e658333d00634b528611dc175975240d4bc27a8986cea1ad1b19fd22d4a122a6e4bdf356c6544c892415f5657d50926b6065e1e3a757eb2a6653eeaa4b8b155a3968230b968291461a8827c93bad9016a1bc0f5767b3419d882fde7a8ff20e42866b0872c67400d9860733e99094ed2880e97ceae3832e8eaba61e452f3869a10fbfaf549c3966596c5285589f9a1cde78dffbf8d402e950948ef02397e6983b630e26d124132e92fab91ce836a36aacf263acee482d228e88b504cc03e27023983ee17843bb325037be0ab70b84701c373352a6bc2a80e8656730d4fa6a4d221ef01e24753acb397b0a8213b30fe193cf7e51298fef4a79a580e755077b4961c7af76a840941eb2438bc0fe7261173edcc12657dea63694b35bf7cb01bfcb1069784fced79ed5fff788f93a09dfd69a40c451e08ba2da5f3729629dd09c7aa5bfba3da736e1d2b04eaa56db913531f645e6cd249e29b840b32a002eb7a25b1f8453fa6f2b33abf50bdedad7b52277d82d2d7b2c6cc3c7ed06a23bfb2d320b7ebce0dd491e0c4c10241400edbe0693fdb4841e2fa70841c994a32de82f485371e6e6320a97719e78c6eee1b816d8492e9960cf38885ea64acd877a1bab88449b852f8354d5b930c2d02a72535ff2a60bb2c47bf35768b510869d9937a15520184cd50cffde729c3c75580a04ef5951fda9cbf910f808f2610d9ff428b193004edb554721559b56403bb9b570135aee09dec0c1b36ed4989f620238046227e76ed38e556f365235d81057580f5c5aa25c568f370b0e93c3ace16b7a82964a928ada8f43fb0deec890b0cadcc02b2b7b85335c326922a58005086d4a8a4a2c4dbbb8b069573cb8f68ef207b8302a12202d9d6038d8b5cf230ba45cba239eff948f324d216ca523b9b1ec8bb6fe977c8b698c170447bc7f5771e343cc8dc3483294e5c454f3ceb5c63b58b2470eea308f8c1e04b169becbf9ac441d96475637e15bea97b7af90d1770b4b2da6ef6db6a8b27b27d5f076b952678a14658592ff4896bc83221ba0dc455a729c67fb9a52a68f3144e5484f56b353717deecb663049c85a75b40cb36843050eda9abca7063e4aa034bec13e3013790bc9649650f37dc161e2b821064ce5d382160cadb2be5d4dd7670c8a769718dd509cd4872176104958d0e7ac9b502db9f53728e06753060367073f867ee7e0020926c89d06983c560e6609c57ea2eb259aac6fd5a0235bea2a21af0af4e2a18ab5dd0cfe9d3a7c5e344217425cd9efca1291b58cb4874cb1d1e6bfd86b244192b7ee9df006b8bb377ed1885ba18eb1147ec039ab8e630e3c7fba61fbb5be74f2791211f01dcaf4506f665362ccb9942fabd8d3ad0351a6b09c2b4bc05819050b9e4dff3d81aa7e1f1cb54243a75e4edfafbaa39772be88099c145d70f6080e8335a4775200c34bc0788b60f574516ced1a7f0dff065a15b1ac78df98f771b71722ee5483ac5158b4b268732b2a549a4e0bc776601172e43bf83f7a13f596ac8893854ce624c3b450ffac7467753fb858d9a4f45f5519353df67bcc296f4f4295ce243d841ec01443f530571c1fc6331264dc2378405da599dced0ef574c1d109e2c57b9711993cc829008002f32d5e5a5a6a34112b8e7b474f1dba922311b64dc1f126770aad68b8fd71a467e2f7412539a1d99d922bf6059e08a70cf0e7f96725ca0662f1d92b0528c989a17d7776dd2b1190cc44bd86a19cdecd846ea0c734c152cb4beb99d24941e96d4d84875444d254553877a1860b8612083bd63f09108588fee0c22a302c522ae646837ab8d1edbb5e5993b248bb0215b893c8bd34aa7842917e20965135ec4d6821c04368690aa762b597786ea85a4c9b96d999dfbff4b7786343c768d8cd210e06d382a0a3638fb0f4db126a6ee3a6219cecc24131c7d80d2a345a855136d68c379a47644d07e7aa6a0c3cdfd6b183a6026093f0d66dfb86e86188a9726be1f1f1f9885902c2190f266ae39bc505ae8108df27be1965242f44db50dbb46025854dde2c9a838a89e97aba2b4bc43ea63dac2b6dd8f2001864bcf6d1bb22e89c8baed9e450fbb2f45a8183e223462fe6cba73d5774c6406b2e103bd69d41eb4482db8beee26062593da85cc236ed3339b059381023c71ec200b36769917f06cd3536987eb98612f8745b1171c86b9433dfe12dcd7d1b504ebd6d6a3a122abadfcc0af5ecd85500c64dfd38ba02447f788f248434f269d05b5aece9d3a94030ab33eb4c427c6ff821f206be7d1358b3363cf39affde372224fd0c40ee9441fdbc76ab0560827759a9450d27e7696ce8ec077488bf74a825758c399b7652985ef4fae49bbd93379d07fa1a0f13ac8b3d0ef9018c721833a7003f8de47c5885f92a0f0f1631eabb32a404d2ea795e2f29215103a575175fe69fb8a941d27438adae98beaada7808f17303cfd4b57b75f81056c20d43db8d51a8cfdf2f4c7450f165b474407950349515483e7c15a08fcce7cef4fc59e1436152545e713e9358b151403ee21886fe8c1769b8c179817eab23f5871019d2910eebd613cf42431c74f8e1b368070aa279b258d34a543fda518810a16bf01658cfb193b04a35c0aa52826162de6fa74477cce789acc594a606445b52525ad54bbd40e54d8009570c338152a560ff95200e81b2772aaa3523ef764157bebfd15673e0310984fd699578c84941eac31f5bc257eebd375441304cda604cf95058f4179ce5edbd2da79b57e201db2492ffe01cd9cddcbc74dcebd3a82cd2d8f8b6360f1f8b3abde848d9fdb2ac20703b8caeefd79140d484426582b99c659bfe357cad1530229f6dfe799f901507447c145177ab597c5d2573b21be1564c1b689c49cb09233cbde901b2b48cabe94c8328ce6a3d923fe4a0a36de2498b6478f30779262fd5b7e4b72943c01e43dc1a30ceadf78b20188cce714143147adc04a807388376e9f9db534f137a2f64a71b3f3aa80f690d79e79e3da877fb6e517553666c407c1661dcd49df048372795e84f13c9d56781ea6be1214218d41faeb1fd8f44908e7653ad69b1c9087e7961ae7ad455fcd862ea8fc27b783c6d4c6d2d60e26f9478f9e07cd762607f52cc172358bdc04685f3e2c07bd354df24267297f73830baf80e0cdeff3023407951a5c255731deb3d4e8380c37865ce66872b4eeded9f300cccf4936bfd848acbd1f3e971aed83a59f325090fc5dd0de97f5feede516c54c42633bcefe9588ddd97598ddcc9cba45ed5845c23e1fdc26a40ddfd9ef204cd72c235fe39851cac8a4e2caab772b24387e5f076642ea1ba79d2d012a9f99ee399191a70415c2f424d822d419000929887ddf626421eeb81b97169aae39c4a6b2d0215bca470dd12ae6801ad42f5db5aef908b9fe63b37e01f38f7816deb4b4bbc183a005d8e919fb20156258a7c6cd366ce79e5d4b884733dacbc64b9284f8908c29eb7e10c1f2ffe81aca3c9534a70da545169ea6a18aea7e144ae13c834631fc7f257371532c38c25c84e04a712635fd87f3795fd770bae9850238c570125acdd18bf9dd606cd3de12b698c0b1deb18f5a07f59953faf7758a615e4ebf49bd09dd247631a634fc56d45817fc2c2e502f866e7965cc7521f5113a363ed7f0f6b5064c0e11603355ee76f65b139053fbf7789e8154176a472ec87b255293337c85c0ead77ae23f85b0d9d3249130b3d0cef71231b15dc325ba838627fa2aaba7ae8031e7737785fc30c73c5b9bf83ba492c7c5b7ef7a3aab22fc8f6cecf112ce84cc72bc0bf0566c2b85b02f7f211d01d5cf0d3d47e9ffde93291cc334d26b379e5b381a31e876c3296270afaebf565ce6b30d13bb1e857fcc67802156506645f579d423cd48b30624eab1dcdc3b8d1b85698bdc5563b2ecc739237b666b0d52f7ac93030c63d9baf0daad11dd9175707147927cb28724367d91dac64564cf6696afd42e20c5ae944fc76974e5782dd0b3b0230801205bac481bf5ebeafc489af1bff3f81f2b58a8ced5a2cb1fe24b626397a0849e1a763befe1bbbbc8c8566b8c883f3db92faffa2dc0447b700c11fedecebca8010667cb44c45c55b20c444c6b252482cfc92e593a57001355c07f282c262fc1743a6c7d13036c8f554e34849e0e231031a0c28ad6cca22db00454a2f88f11e0c943054fa01eca52309a37370646096a4885257ddbeb4b7e8e2a3532aaf2ba8c802baa9212498cc52c762ecf7c2289e9fa556742433f463cfd9a626e16052516eb646d97b654ae9f5b958b0d86815467077eaeb7589c97e4077f09317cfdc0ed6b4b3f49ae03cde4d7b5cd3c92e1888d7ff34962740804b0062974e389f7626b163df86c87c77da92c3644af1bdfc7155ad0e97482fe9892824d7510120551b562990e7e895aa9f3d3ea8f46b7fedb0c3e53d973c9a5ac58c6474f5c51982af2dc5d9a2c2d8d94b819ff2e3abc4570016c092342e7b9b659057c5b12128d83bbc09307b426ce423fce0ce1fc9ca1a7659feac611703878b417c79c00414876b708a2c4ac2dece154ab406f13793c7c4b159c78a1be20391821a017db53b5d81a39a5e621c8d234cd2f81cb7c34d46d3b1dd32a0bf11394634863d69b5620469d74c09757f898681f4e473a59139d2c76be7673a3171c876b9d47b00eb0d4e2262b5c4eb9b9dcbfd0c28d1291f4dde86a167a9e2eb79f5af838fc24bbbc16566dee9e2dc7c3b8164ef6ced3644770c9867c185c525fd086e4082ed0da1d6e68e685378b5d806d164685c2966e880a4efcef7b8b408562659d5fcaf520937e0b065179ac511dd98bad05adabbfe0d17a6023f7b66e5157f019719b7b386ce8cc916dd4131e609eb915cbf635af84d77970d008d4730b83534fe3ec2fb874759689cfb634cb0d8f01279a44fd61f06640458c26c1d7e9f1b954664112a4d9463157fba36d2a2aba009bbc98e74ac796690aa2de13add30ad32c50939b2f975b31aea5b2344ddacb10bdbd61acf9353afdbc3f835d272f57f2399b9f49407931b32d93948a1b7e04a983362b3eac417efe0d772e22d1b7c55d8068d373a1e78f951dd876ce18c997144d7fe91f88424e2a126f3ba927991bcb034423a0c148a7ed7192dc32b0567a0a7cc05b6db0cb215164beddb36163db07341ad9930ec34aeb49b051cac15079ca1f71ad0387ee96b51602286df4ee0aaa7c1be9d7f875e8fe584f318307a205fa82e34fcad1fc02027ffbeeda9222164dd109712a296f5f0419261c31677f276a199311eeee935e81cf259ece0e5f8b2dd836b317fb0259681813a3b1a14c0d8ba21a72142f5e0024f5535d158f465bed281a03522fb53a2d59e905dc7507b3ab4e634e38527f41488bfdfd0c3316043936037dc864961b67d25aebfa2262a43a85cc06238e5c1330d4aca42fd5bbab7d89855cd6042dc2f84de081def7bf51a16c7cd710ddc46bb438443af9cb58714f897d0f09915738c4c87df2e5445d7728b25d7f9d312a73f62b9fa521908dd8df9e29cb74c83caa84d21ce8d321ce712caeec2a6454bd2639c9f23b23c1518ba334a160afba37c949ed5d31e7c1a3161c9b63361502b8d6847a07b5c71e66e4db7cbb4413aa7c3f4197c73ed358aed99515b0c09c71768e7214cc4ab46a7e615e94b8df5afa2abbbf36090fdfe1e2ce2f7b14f2dbf2ee0a42e5e47f6001eb42e697f05121bdda347b2d301c8f27eb49f4cc48084e6a03a771f08cbcdeae16c9d033c5cc9e51f8eccba4cedb4a3f3b25126b912ce23533a3ddf6f30170148f2888f81aa181f077bd4443e4df6973362f384487250287d5c9b43715ae73b12f6b00717772aa61fce244f20bec281ecc5894fab4e50979667352e738cd420c1791c248ed678042aa58a5deb55441244bc767dfbe6e11416cbe6345f431f26df6c1b3738ea1e297452b177574be0eb03639d63a6bee39d76cbecd3eef36da5adf6b8d10f75b8eb6e7801c33a84b09e3c589fd82661d2e1266d1d4086f0836721a95d22cec8bb7587bcdb313f856409147032a711040e844e72db2497254468f4e6bb387ece386d9dc6e537e78592dc7f7768f0bd8f2bc01f9b2803eb5c7e7023c8026e2d21b52243f48a0d55b94462e9d4291da4ed259c3bbba19c85cfde98935adcb92467bdf1ee967cd9405d9ffd7b66124b00922948912c1d4ab34d49fc0c103ef26e38a2be6ee4ac1f91768ed8f036c98ec72137870d8fb78ba59a128ccb768bc339a7c33a58cd89d19cd711f8f1df751e705c9d6669cfe582c5961f4053636ee58dc83b1586baa16e56479962c81440c85f16e0eb4ac1ed94144ab9894dbb4ae31b39e7a5786b1bcec129a6d22c34b6f67f7d67a9c0349d812960bd1c971c7d02fa4fd081ac7385609c8eec0bda2d3d5c2656c36e8e257e09acb98783f62f80ab15870955c6d83c430cc703b0a02b39188a48f3f30673c7672a0f9fd69b98ef4bc698a7b1798f5ad27e804ada61d314b55ae400de0ecaa5a000dc904929b10c0bd8ab3aed383d85a648452514f6d7136a6bee737f264efbe2e1a3cf8bb3260ebeaa4c8d2a9b2b80bbc62b8408757d6291648494a974461228d2ee9269370712b3b29af12cc7215e10073cc50cd1082e31947a3d8474c7a0749ddadc1cf4089f1e1b52cc0240903401742ba371866ed750226a4233e8e327fe586e2cf25c33deea5143f8445cd03268206ea052a50f7299bb6becef1bbf35cf2ffceccfa3c07bb469ead653a2cdc60070c73c03b0fe5edda2e45824c2bdc2dfcb2d454be3d9c3fd4f75232d0749eb93e40a60054884d3606c74d75def0b8e5bcb9d5fda6ff7e4ca4adf5ecd2dc3533d972499769e39f068311f4b87e08c780c2ba0d93609b34f503f4ebf383df84b4f1f25ed4d4e663836d9e7cad389625133b691221ebc8d0db05cccf80e22b49b3e13c563f32f3d5302b7c8732784c6c30b700405d56ad4fca65668cfd583fae112ecac13e5b801cced1574962b2d64256cc3ab1823817dbac2d642339e8f608782a076592aedfc473d86ae553c1ad952ab9c0c38d682e3c2b5d28fd56e4e17cd42f52a61237a32b45bf329367de9e133074af099f0b49e79067d1072c1d2f358eb237ec5827c5f156765abb972e4e4ebe27014a3dbdd1ab91d62c3e6ef8713ae39e4317806767bfb5e1be3a400fdb8ec4c5e1d71a530bb9e8ac544f5e49b9bc9e994e2309427e61f923f6a424010f0c3667da55b7d515e7b7dc03a84ede17244ade2940bf1ce36e3b02fff6dcd46ecffcafc833e16eea9784a0a1b2e86feeef9bb50e15b43053e997a10ff08db602786a011c7f40d9b207592f4986fa0e06ca66913d2113ddbf28d3dde77c10e79c6e4ad555c42d876caa7c1b7df90b7755aa9ebae1e9c648a8dfc44e1b0cad475dafc5f7ac8108e22b23209f9be81927ed251565be17ae00e14694b66be9a269c699418aaac38b06ace766e17e1d9ad30ce66327119e056e91167c497707f29b27a47acbcb5780b3a0fa9f0f6c5d062434943bcd523ae33e46fe0404f48f93ddd668af0f96ec6b80bdb0e257b19e48960365952e2988d31096503484ee56d346f6f84ab4c41729864b27a48de1bf93e9cf8cd5779877a810b0e2458c315ea97432bc4cb5263dba49fc4241c77ca71e30b0dbe0950c0ef254c80b969015289af61e3e6f3544cb84b559a2bc5f3c8ba5f9fd257f59d8f45a6bfce216bba7d23cfeadb1bcf35ac12b81a20ea53bfc240265491b32ae05140d41d54b1dc172a10297bb82e7a545bcebb75b0db95ebcc2d8537bcd020473c81379671d16ae49d24b1cb72669d1bcf9b9d068099eb37aafbfec07552df82d2f84bd6e958315f7047e68964207eb1f9d1af06082eeb68f6046cb3ccd0a135f82edfe78941c37fb544046107b23ef4b301cea03202581452bc42f2c67e8afb13cce028d8617a81501262756cc34cba1470a7187b2eea3e921c4b0670e7bcf196da5d18b669c7ad1a599bbeb9b5e8b90e38d118501309a3090ca250f2bd915f35ea56b43c3ecad1ffe57199a631073e8502044bd842b54cb87370635c3304e1912de6b8a768fb03b8212ac3658ccd20fb35b2ca338c8edf0c1c6eea4331a69ba6ad6283b0b523e35e09d5bd62f64b6c21703803c855fac4185bb3312b81b9900d7d467ce66286fedff5bc544aefe015915f02215dc719eb04fa1da3a14357f516e2a9af479e7f4f360c32a3d6cafb45ddd3ae81d64f43be62b0372b7d8cf35957859fc2b4b5e374a869a21e93a7e5a2cb7b457b5ab66ca61cfcd3b25187d001f95f4b038b85884956c85391d5f4527e9c0d7d73f1ca75fbe8ca349d8d56d9300f81cf5b30b32a6dd8540952a3132f3153676eb58dcd39896166df5c051e2031e1a01a0c68a30c06dd8a8ce5f257d955ec51a43d26438bc95eabd0682570dd5570857cf3e0bd1785916b47e27e9725a03a2c692ebc03a679cc9dd82d19db0fbb03e4aba28074ae8023f65d0f33a37124d37d1fa1117fab4915952e46b58a0004fd923ddb6c1907ab8f0bfec29824ad2ae0b25e87d65c6d2379f79a8cc166ab614069804fcc50f5f29ceaaba810a900b00711df50c55d792505ad860e910c2b686ed258f9885680e127ee8b4afbb318a0adfe7f6e78aa98c344cfc0c1d5f736c6bf50ebc65de9e5926f3a2158ad934791561c4482ff14b72e513c484c2629b33187644d9e3bf27ebb34e5d51b5f549ca9361e8f5036db04c5f622421da54acc627a0fbe24e51f8b0d5f10a6ac21ca5f8b6557ca12fb267756e5809d092e2cf5a137842f973e3c020cb6823f3817482bc72b592e93254f34d11b8d21f870976b53e0e000d5ee80f7e9f94d5eb8f9259e878bac88aa82e8c3af4fd890b36a87e593f9a1e3ea9e90d35473e6cf22e17689d2b94a032308b037feff1c0d7b948a4edf4acc2844df632b96ee02acd2fe9dcdccfd0ef4f4e62d3994810b72a046e505f6598b7a68c84a55ddbfb1b3ea350696e4f7bd7e88c57eab9a121a1c47ffc321c15ccad505f50453b3b8c4fa22a9923f4cd8a2e33810aa738ae4add0d0d772c0d0243c6caadafb96176783b9c7a49b8d77b47352f1bd6c7e1754ebb0a4b9ba119305280634c50bb5b41bdb7251fe9e05c9c7114726c01e683714acd6c25257ac2d595854cc3cab1b7ecfab7222f4c83dc8f32068deb105bdc0ce4fd1d8c59f3324f4406e7abbc722d22e6dce0eeb8d47a80599f3263c0a47baac5b4fd158d6e50a2c175d71552c401bf26aeb5e9f969eda735087a19ea283b8d454f71bfaa17f8b851f2ece20a374a7432c6c6a4188e02d409c485043d370ddb7805a3ca026ae15d8deb5b525080c3d3c7d438208d57a35fcb5738b2c7cec9c0b51b59912dbef8c4fb6b02b281f30178cfd00adf3d1bc584683dee01c74bf69b56a6a853d49112e66316210901c97d7fe5cf4f26e021e02e61bd74ef1ca8d19d8cfbb7ade36ab7d2aa5f02de45e5de573c4b4dbd5444e133014e6a659062d60cf3cb3096c5423f42c38a8ca156bab413eb943854f1773d88df123c5e6f7d6c6b3669d55cd0b00c755c3abc67ca7a7c5419309a464c81b1738c94edf6ca4e5326ada7bdfe01f10f5bb280eac8807738a3a8a076a111967f8d72b531d801b22f0c4b33f045acc9bdc36ae5c161ed4e99bee96fe06d0361a33b3dbfd1020e88dd1f6ca12ace8d5f470c228342c0eb7763b458e8aa64b7c342f1e5379ea34fc63779eebb0736a4ce87c2adf248845ed9666617e693c4fe21cb2e3842d2d5cfa12686d89d43b5c67164791090888e2aafe5d2ee8a60a690e5fc57180dcea442f6384883848edc217e4427856f9bf5eac3dc2b5fe7378356e90e3fdc8c728e4d33b3034ffd4c04fa751fb653e2839dd44f715a30956127ca52709751f476e0789898cfe2da21ec53caf8c3acbe451c91870e34eb86797c8e19ebdd52fe57ef2bc0c1f35e447959ad6c3735aeab1e68a07e6b1b213b4afdc279e6b8d0c7de6843b23c23b482c80842ff31e8aaba73046bf298e4b880688e92d9ac1791207121fb7903228ff86cde15efe20c40598e33de8aa15f08d1eabac3a2c3a7ed08f45225b7b54728040a858e341b49dc8a2ec5502f303d72f19b2f100bbcee053f2c0ac79492ec9703ed46aeaa5ca3bfa5cce946b97e4d3f89eb3c10a3640a6ff4a3efe081049ae238aca3b915f4cb251866c235fb0e8e7a484130641d9619f3af456fe089b5e43f037e5f81a3ab5eb34957cda5ee8b66a6c21718456b9a72c7ede6d1db30adc6661e4724865e572c3fec7984285f47c9c651c664e80f2ae5a9c251def2a67b7b42e41da965cb02dc20dd5d465a8eb94ebc094de9cd3b41be456aff80bc655b2fc74c8b3e010ef9138574984e85fd7eb48734a4f61e6e8637f4f08d2964812bb08b4d99cbafd60d6068494652605b94e7beeac8c357f0c27a36a9eaac75bab7e2c78d0a50b3e85f5016597d8c3087db0f98e0c55918684c47a7e56c4ab9f89dd7a0fb172c5575632521287ca6ed1d56f5a22228fd1bebc57d36364162372f68df3732705131dc7592827eb3faa26f576cf65691824bdccf0cc784d352e3d24d3ed0740228b1f89766269e26494fc8a8d2bb7235ab2fc6726c64c46e84596d2417f08ed30deba9f660c9c3aef0d44555b9dd71bc19187055f7841451dea9a1fa5aeb3a9004f7cd81303da3136371aca162aafe461d7bba651e867decbd21f6b8a1d0c4bea3334fc69f1fa043690e13b9b92f9a335179b7dd4d9114887e0e5779cb7fde9c95f78539ce057cc3d0c2ec0bdbd472b8fd8fc09c23a56923b39a3f3cce7e5377238ecedd54b3ec52fcf399148ca08351614722c61238b384697f2a77c093273f292d2f8488f219ed3407cb6fdc96c3557b4527ebfec289421c6e482bffd8286d56128367fa62a9c9df4a44a9718e35e65e8ea1c0148c6672eee860eaa7a623f45fbba440077d293892f49d8111a1e66b026cca12e83ad27a411952cf5623719f79bb3d193328fbdcac6668858ddace865ffed01e6ba12bc2e563d073562de357883d50749dbb4b219df19a3ece88984881208aff2f86495ec3a27916b94236a7d6f2c6281f3c61543a8a3ca2f4c8f49bd69e6377c99a6aeae3d26e8dbc05c553d3015e6c68bb40c62b52905a17ac244182035ac38fae0676633a21b9b0ee75998a8e3c4d8338d07b9bb3f0b0d8760cb36631b63404d25efff0103456009cccff83580b615ebba0e495e8b1c0682c3a1d1a8adc29b7084a0ccb0de0464867ff06e51d460e04491b5efd45c04c68e9928e050cf9c44bf7a8f0a92917a40edbe7d43c3160fa08afc8dd826188cd379b9b7ca1721ce5e7aab28b2b5605d7dbc08e0e17c1ed609de472b030b22546ae9a376f0edb3f739a18a6e8a146156056f37c488637f5d58566e45a82aeee3f7225aea741c7ffdfebd4bdefb4385655aad79907adf71abb166a5e27ed7038402bf470c032fe2436dc5496ec39b5ce1b4bba72ec7dbdd71c5cf5ca6709c6d5e52396a35d081ef3ea74b1e7453a9368eefdfdf134e82ae6d14a6529c8763197b16767f27003f4f9214293bc1924ae0942c1f19a7ebb5d12d911a9b145ded42cf539e5a7d65bca5d3afcd98d5ba00dc244389be966753b50a1d3846713824309e531035222bd8c88a58afd6056eb33afdfe72628138eb70b9ea4e7c815770cba73f8b0efe211993e0811729c1f88594f26f2b5c1a42b93f4cc0e6012ee0b81d1501a985c6d0d3174553d6d6e349bc01033b3310db93d79ff0ce6feda65483ce5caccf26d2c2901fb2bd680ac11792a54f521455b68cb9b5d46a90e935d0fb32cd7ec8fc5dc2882d7f46ad151b1c62590f1725e4232e4f7f76b9df1ac396e15e3a95a306c6b354689cdcea700f39a74f3efbc9512df2aaed85962931db78fee93e5e2d63ff4534a6cbe64e077d63719c7d98f7cfb133e5ad45d829d7aeab44cc8259afe6ae47848fff8fb4b08ee78391d6e3711028212912b5aaafc581c5091a140fbc126e2499da97fdb8767ea951a338d867269cd13c29a77545244ab0fcec9f14a0c0d1d6ea53ad86769a0df724533a1733b30d4ff92859356ef7b48af64dc9c3872c267b7ba4bcf104790c0430962d78eac79600410d874f0381175f6c3d986d5773571b61948185d46c6d2ae3d2a2c06ee9967c3ba0eb137cb90d726899836b2d1b4795c9f22490a018ee5d0cc74fc9a434501c097abdc58c516bc461eb9deab32e29e217111f9ccbde70b26446a513486bda2128cd52e416af9d851396e7ba7d21498d9615dd56eb9ec28bee7a4866762a512bddbea57d26b29aed0657ba3188e4eef80dcdadca030cc4fbbb5aef7a0fb3ef8e04ae849d3fc06407238369168926d6fbe5d24133d24ecab826e2374ab271125a68ac8a88220b7bffb044534110b6fad2f0645a28f187bc07a0f2530ab6fa85fe55e64b5be3558cebac03dbdf42bc2b78101b648c46ea1d2af180875f71a1e112003d0eb5ade0ccf16810ce81c4e2b63e7d8e87e4051486546daca4be476bbc46b08d9bfd3f4e6540d1f476643ae13334d738a810b6ce937fe5dba2e8cfab7da0f053ac7ec09a95e7a697e7a9de9b9bf79c6cabb77a94689708b939bdb8e1665078ad6a5851faef951f6ecc93c18cd1997a0ae5ad07d300cbcc71d5227bfd5ee2ab69998f65c1d0797cecddb28b02d940df010b48774b49cbaf2af2b15913495e5578f18997bc26c0d94d8bef10f4f47d89364c1bd9ca9b2fdfc9c5650f8a97f0fc4412c8ce53bbe29b35b9395367c9d05cbf0acadf4d2f8a91cc25c7c33a10bfe4f53ea568ffd7f2b6d15e62fb1599445762253a39906ed839ca11c578714e5ef620ad2c099131909a9b919c07906ce831e2569f808a0ef86d5ea81c0cf6cccf5ba93b27eac4588920ac6babf1bc9add0257476923ad3e9a249601769e6f23a198a83ff052354fa04f8541d8e30a62bb9c21479e3e14827bf6bfdf78240b0d1f088dd2eb019b32618bd94fd55c808bb652163bfda24af98931cfb725c3cbd5df00c5ecac6e22a55d26928388d4353a9239cb655cfde180ab177db446f76049dcf181e4c6bb02782cbea49e07f3fd565bae1f25a2092816dc53795b87198261e001ffea012aa53f7a7ceb15958e55a4c530dec8408afb123286bbbbe9dba1e6d7404368a04037c5efb61330ce2c23dd0a5f1bd5c57619d828e37e2ec63c6fe8d3200184ec9d5af7bd719bf1997d67eeba4418149ad4bb0a9e0476953b4e60eec0d2fcd43efccb4158b9e5bc12420c60f915a3131072ab0496848669ad6abada928632f073e8af7acb5d31013eeb9045fafe60ac82d8a1c1c2a0643f8db7144edff1263c40575690e3bd11ef09bf1e8948ab15bd194b364be32d01ab74f2898d1302f9859024d74735e8198de4e0a4116938924de7e0989fce7ec1f165b2249b68bb45b2f6fd6df2dcdc1642449f14ab4efe67543080ed3a2db3a51f349b60ba56948ee7dfbfbf9c75e6ef75407ceac4432cab6da89d03edfedcf9d1de8262a6b61a4cd9f08bc0b8afb4fe5567f8559b8e8d5f670423543c55539d23cab21493943cd2a029ff786473a10e0511bd969f6da6c49b4b2ea370863d1deca5a75551cf69f7c0513bd186fa91bd0ea1a294415a6cd9ef4c5438a6b27ea3207466f1cf5c8b3414d4bc37e1bdcf2e2afeedb97a67a0c002ecd45e1b05da6591e5cf01230bde5466a552ec840859e781b4cc22f5ad1a0f9d92075d61a35e7cafece6d0c6b111e6d13805b63c5c3ae86621694fc5885333120fc5d67e838593b1885b1e1f50e5ad0dd0ba480ac1cc793fd5dd0a13ab8ade5afa38136b580abefd2ef5de147a292dbafe9ed2013e6dba487dfe00789453e22846a72b549569c94a9cc331d069bf1fdb9d7802c5965f78bb3928cc2d4429cfde3184c4145c87d13473cde6462354f6e6eed63187a943881e8b70a30f7568916d01af918ece11d462d3ce1081587c1c8091c62c240ac7a1bfc04d36568728b4278f02870cba40c6f2e9e5d5308df6f741e79e142190a3204abc37e84b8041ce136fdacd18427ba7c6c72de463540df0087d515a6bd5bc7cab6d9bb1b2525e1d3f812136aa8fef0bce189acffbeb4e03915bfc7ef040b6241acaa80a9a1bed0f7f274b6000b9d57685f24a59d5d648fbff60be6d95ddb1ae44f6499c1c140d1f2fad8ca9ab3fd82ef8fb3d446db85b4946aa947b568293dc4aa9ab883d3c88f2cfbc7a92a37223b6bf6df99d28e8e986beddde17166808ae3d068388afc4843e98dc9b479ddf268647d002de2733828203c881aff1c003b7283c395495013e179f60bfb1e4904b7183c5c14d084f04656ef225136967007205aff66dff85a28c5c9b88fad4591edece8c53abf51680ec4f4e6f3f20492b7c57cbea1df5350c28b0b2599f242fb9527911addc797f6719c2a3ec28df7aa64a7f9b20000fe1363b6c8072477cc9b30050b573bc7bef5bd31005a6d20e7c6b8e362acf47bd629821db4802a4724f741e617d6fd3555a1d5823aa013843a8effc17bedc7d86c71e2c3d5286e16ba7b5f7dca20977306380d123e7eb054cb97b61ad802a01620dc4c33c04d48183280c11f8348097152b0a39a818b63a250d3bdc783c88eb52c0cd188bd21071aeeb5a0428dfeaa33cfa8fe214642f0592c290f6c5fa309d521335adae89a0ef9814ca12a9687eefc07f11cd4f7aed35d566b964d792a3ad7acc2b0694712becf486bbb1fb9ddf4250b785180287c293bef21685ed067007b10f2a15a9c60fd2b488ecb65ace337c0d9b0b78a5e62af81b668e836ff5ec201b1127162035a78b3e17728bdb607987fe87dc9156599828c69c32d96b860726fddf69b757f98ff1cf23f1011bcff6ea4e117eb03f20ccaaa8d24ba9cfe5ce4bf1be727edb65705a1325bcb5ee4ba2cab49fa2960a6252930f894fcad56d79b916214d68f326327adbce4065104c02af412ebed1a5d76238c7a5a308526ae950b12f92ee1a067172788b7ee4287a2e1237bc4729ae9d0fd2efdd515cb6a7c1c89b1bb6f6dd312859e02fc3d4d204cb4c48dc7f8083baadf641acdfe357ac3b023519787e3aedf1b9d9ec701d2a33ae314c3c822eaa8f2a7b1eea6d648171c3cec8505a196f79e6287d10b87d194648950c4426ff1ffc23e7f2dfb39e5414f65636d926018151f7b40048fc1eabea376cf06c0a23b38c3ed3535a47357683f14ced81802b0afe94e72466b9cbd3f9916070d1985aa67e2b1534a87aa0e10ab3d74d69ab2b5cd092b5be893a5d255c19eb59b7ed7f55b544271076485542cd7217f285fa026b2391e78aa04e0dda8a0c3a541e57caeeba7350a85f4000bd6c9a351c994669b6e48587a23c9e21a29454d5b5c88a528ad92ee3b77257c71ef0d661d1809adc4fc9b33a11911100fd402020248e54d8f5f47023a58a5f3924a6d1dc343f44f400f2e1a3dbee0246f64ce0965ddd355098be8144a15554a0ff7dc30ba85267c81ecf198818a9f622cee7c2e04fc572e70635868a411804d49f585b0dedfe64a62903f6c633bbeb6f4efac1f5abbc90c9981ab931c55532bc9a5d231fbc34f9ee76b4d5daad7298e2b4ee38442dfcb6a77f8c3052b99516888367502e82611081f13ef4415a8f48c6783c70d76e3facedc80f80929bb02c1f09b132b73ba1d90a8ee2cbfb45b8fe9ac341d0c851a08d51de82ebb926c2d1f1e7c9ea7ea4465288d21d1214f78db2caa19bf440e3741f75982a3de36d2a1b0001dfbd6e4f60854d1756da8859f19c64e8f813e2e88de62954f3211f32f34ca2f33784a5ce68e406b112423a86ddcf4f72a629855ac07bda31a2283e0f35698774f2a5175e7287ec1592b322450053aacf3b196aef77d3ec1e126e59f9bf58d6e98194efc74c2ded4f507794ab5c1e13a0181772674dd4e628d4b0dd0d951f919196ac23431ab801c3e333b67a8bdb1df8dc7d5b4a7c04bc3afda40b9df3f7460e8fe354ebc2969ed3513f085e33629f319c46facac7938c29bf8825b5db27dcb0cefb784a99a809d18b4d061101b798c4ac6450be9602d1cf4e9ff6cb7c88efe2f589ce8d7c859634111564b98a447bdbae602f19446c2e934695dc6f0f214cab9599f16310e9f7b79e085e53d463fb61f9d8086dc7d41a908fbeb903616145844166016afe70786f7a677b534963a568ca77885f5ba100352482fa93c389fc7ede80d2e58425b446c16f57b863991fb194f5b7371710bd06a82961a0e65565f4b16796587b101212b3fd7e41a6e9a34767b852793764c41aaa0d8c6517e8baffb35aa8e12f44fbcdb90ef3715d75b2b93f671fb6bd191320673587559a3b5bb305b9936f74265ca60ac999b02bb0df735860c68dcab4b8c785b0555a00891bfaf06c2ad9d8e0b79fab9d22fc48b9c4229b7b116c149d4acc5cd69b2f2f7ec7f8e53da93fe8a747585ce6dfe9a3eb76b019dc070bc0f5c24dd438bbacbf077c6976ae3fe15506c8037d84c367492f068a2186b58324a95e8d64bd3f65620c816d1ad45c441f6ee8452daf9926616525322e159cfef015c12fad7ca3b49ddc9d7fc6242123c11678f4f0a5c02a6439e268f8213bb53bac476d433659fabd21650c51674401ca1e0575180700b0571fd02e06cdd9a94b3a0d9504628b4aefc7f4a9df6f6dfa884c4b1f2ac85bd3dce2ad4f55817a95d37730cc5cec6a353f9981a280853e41d24ace1032b081b20be6a363cff9c00f7b7d912f1798f8385543adc86c020739d53580837a3cab7e9f3e17ac987d9d08dc737a5404094265b1862d650fa0bf011f69a5ec34daa2524bc5f0fe9524d6e4d6858c8b9de3d79960a62de4178ab16430e0513dd7282a76f71a111f93478beb80c90c266faeaa3ab02feb38f7051941ba43ffd9f2b97b5c081016fdad6a3488d5880816343775e597ce0b1eedc9228c74c689b79264424b08b8da4916fdecead0a4d3fe01a45e8a743bbedacb13189c178296f8648c03426394091ef5417c765c3017a6380908c5da7dd9b5bbee26f2e3408460619b6377f892007a37eb1206451fd8ede71e8a61d363d7ced2d4f16a1238717bad42793e175592e682f08b46f432d4edd9ef39508a0aae5dcb49dd0987b55c23038e6983441b99470f24c416754821b47efcf2ed0e52a55ab99f102d70062a1cfff016dce8a33b3be1bd4feaa39718c216dc8cee3a8be56e565b5bf2d14dfe05b0e2a3bc052d9d53506ae80a7103a8974a0f9f33a3004edea6e1d5825a9aa606a658cae1c7395cd3b82b58e3ff7e1ee87d45568cb00caac01a7e543462af3279485664ddd92b9284320e65a71a9aa9c68526a0126da5dc8e9a3105c7d9614b5398f59a78d410f8e20721d2fcd50f150820a44e871072967605a0123023d6b5fbfc1c3c17288fb6688113ec31171641bf4c29d07a5a8a4733439026161b8234d7d53243de4ada283f7978bb672dbe76f28d5cf65f5963ac31bd73af4749fccb049fcc231341bc05cd2b46aff7f440f03b9581a88269017bd4a41bb10048dfeb127f2a371a86ee8a0fefb24a5dc0ad48997aa5fbe9f41c22599f0e7621f4bb42748d9d4d562678f1498152c0d76927c15127f7387330bd2316fb0327e4f20159b441a4c9008fe74748b8b57953aae10e7cc8d6b7c8ca48f8f5fff8c28007822c80ce4b4454be2c13b06f8d965611b583e6b4ef77213eac3c5ec5b91ec173db5a4a45afff76f05fb65afa7741f9140a48fe059652085bb766da24ae6b6b4e5c545d82c8d7ced993d36e31ca18973153de0051ab1206b226da62ee48a12998b3eb71016ed70afc606c744b71458c621208874eba46033601d5c45a717ea31bc82d948f7565c66f343074d112ab7d895c626c30ac0b0c329b6bfb21687ed566988b65e81daf0d77543dcafcc8b2ef8b65cd472e0b438717d4b1ae9ce86841b4a5631d5585bd09da92b41a21003dbc5db67199477b531a894f3e663e1e6afc1b27d73e2df26e11bd4742b66af6b9e6cfb942608210d747abf572920fe239f9a7f6d4fd87f5cf6e5498fdd388a3f073559a7774c4a28882632da8a125373420be5773e2af682bcedbb059d0a7608df7a35b86bdffe3b895234a1a928388466c7a112cd7ab6bf8e68d22ae6ea526083ae1d090418652186292807a414213b2368fc3aa0e3bd189c4805ceaf40212e3e0f99b22adf0296629ade5cfacdad7bdaa31186de212fce88f029f651f87281d75ab8995b6d98670503daac3f794fa73e5ab7c2c9680bc00b5383ea7973f87d22a8a650be1ac0d7a617a6e43b71208ec57df5c8f8d545ff30c23dbe40a5d8354fb753525bd8174e28616ec92cce9a4970437ed33f4b3f869b3d015d58f7a1d193f68437bbb9ca914016d886ae8b8ceb1fe09695ba338a6a8da20c6c9067bd7afcebf4d8ad83a10c8415cda288688acde9e630f198a5ad3fa1b81c6c4da39d8669a950bbf3820a987505b1bf1b461f35b75cee54394007433718c34a5c6b3ca8b72bef9dacdd68175727d720f83d52d74de574218534bd5a6e937f8af36fa63d336f6511be213943a81c083d2206446fe2b9ebfcb01fbdae38cff99e72d8a3ea284567e2385f7c7cc07b156d5d86640759d720cb3bf7e4d447c929cfee06f6f41ac058c573b92720036f81b684a0581c4193cb1633143c99d8f4852c529b5b0c3e7a9876986d83874081a0857f98f5055190466ed226e5aa21ef8fbf9a94eca1d57fbf8571ebfd21ec1a824c48a4df40c3401e6376e0b71be561190c439fb8b9e06352d688ceb1ef167944dc543a3e6e799703ccb2859d5825686b002743b1c31e4c2d24077f0da890acba5def8236f785268909ed23a84ba536e3a2bb46e18dc53a80757dea4cb108ba563b59405b87643a6e39fa70d22e7aec48f4edd846ca321503b5ea0300cad162eb048daa5aef5de82a47a0a4006d8252422759fa462008743ecdc08335be1cbe788d1fb0a428c1e5fb1b8795ede6eba2758fe13a86c966c12b9cc9944159e77904aacfb1f5339ef61c8268e5489b5f22b28f2e957ccd2062e31bde61bf940c7ef19911cc52a4b73014705cb07fba16dcb5a2b23c01783f5b21cc66950143d894e6904a9b12e214060748fef9734f2bb1be4d27d98aa4e57ab57aec42841d3106414b382018b28349632dc4773ac00bf1b806bb2254eb4b4987f6da0624207114ac6937aadfe6487a902c78c8018980f6d118056e3f132bad1ae408b10eafa97fdff099542b9d6a160991948b56424f67b6139b279da8f78403199f0c060a8fa2698fd31b37e4beee40e6cfce33ed862cfeef732d3251a0f5e2297d38092a00d52e8cad9d272e9837da03901bc8eb11cacf5dce4a649ff92ee89361959546a3cb1898039bbaa70c1e87d444f06c36bf0b690038ca45dae75e177cf1f0927f93849312f8f6ce9e518921ad893dd3fa5db2b97f0dba6de604eabc017e39c3d9e792815f92fd7758f2effd8ce99d2cc616e5c14b2f9a82fde54b191c72c364844f0e09ee6ed4e7880b8debbf16a41d8328266e575b3f8742e4179a36b2eb809fad5c2079e7620a1d20a6da3ed12fa5c84bf4aa2090913c5a8ecb6bb3def8ac3fa344986b788cc8d0d9fdaaecb17a287ead315dfb98df80d0cb572162aa67970d09c535ee585971889c8708d9c92fed2065044a81239ccb1d49d8c89c30ff40190bf0d097583785b085b7eef5f4ad9aa2cf587f015e5bd3e68d742c849d3d1f674185a98da4e4914d7ffbc45b82f3e8656d01593cdf9679bbdc871d503f2143cd2c6e45091487c761e1f94bd1267f26f31abdc494b4075da8e15561bfd680a82891ee38fec3b1a5905e373e8078d0d09aa7630077c23732c24c1c3eec07c32b0c8f0bb23b41cf1af16121fdc0992058ea9957ec1886dc09fb9de52b4673bc4d36bc0f961345f191538a287dc1e9ad2270963bb931fd8c2f32e5972997b55c0169cd9354c1df4a4d104c15c0834e2851d9ab8d6c1b2692707a64f27efa78ecb827367b81f2f9264b72154b3bcfc6a4f6e99515aa264946088dd5538c06e49c179c182437d5e15b341b0755d2aaae42281937f44a5adcc3b2cc1abf18b5c183a8f3889e7b91e151565e89f40533f9814760768db095e506f1f30716d86a235f27d45edbd8d51d0599d11d05ac5547725533e8d289a05ea8eae17ac5f058e60ddd040302467a02a96eee2d8b149f8abcc61f8a53f2682869148c52799ad9b129ed8a3d05b444f217c7a86a948e874ae8d9d9ef6fcef6ae8ba053f6bc2e5f8724d9918854ce17351e8c85d7802b9ee1ee7b7e7849287672c8a63cc380ac0e417f5cb8f5362d8b8a16445eb2990147f0cb93b592adbb3caf53e1c40c64fe0d3ca131360f0998a02cea2f79ccbec3e71a9ec7ee7f1e41e212dade1f8e119b151b8e212d0ca1a55b44fbe9123c6412c05669b6a9ff01072c3ab313d3b49aa72aaae148fe587c99fae6b0e1b7fc0ac2e92a216576a92018bb200343563a9c2482750de435097cfb6d009ee6c782441e6545a2ad55e4c4a91ca7820141fad5c74687969e344c228e8889b98bfa171e5cdb701f33d59425b3a08e520a9ac6d88d49a9aca042b5c9f51a4115b600a1f325e2c7f03027226dda9b5d5f2069e5a91a3d2dfe011176b66c1f1e1cf4ea71e6106a052495bf0160a15d12d6adbf6da42daf5d0d53b7824018ef7569b5bdbd663d466b34eba4a985933d36e4d4f18c0b63a59f958833986ccfc3d553d12b6d7b1ceae0aaa1e1dc92683d139a91364d96229b944dca77a773d9664f14a36a3fce10aff6596d498347797bb082eb299021a30477045e049a5ef21ace5545f0e5c915f6a27d5a2ea827f64e8d2f92a7516f84996ea54ac20b2306a8f5ce2e833c49e6da82a5042a8d7acff6a2ffb1fa0bd2eb7dbfe35a4f3ec93cd886714a76e128d47ef38832981342db0573abc6c2636a5fb8a653ec3da8695c5c19bc5cfb564a3580963098499085f1ff89d6ce44f968bc696c0d533d39fd2903a41bd8d95fa3fc18b377f3be139a353e08bae7fc8298decff8185ede7ec57ec623508b2d5dc9ede9afdb8c0fe3b65b16a67561589f292aee5af328aca26af5dd679296c95485022fa79ca09657cec3a45d51a01083f7c33d6e733154a039ea7288fc3b0e13ee881aeb38ab3eab2d5b74da69474919602d693cc0f5835f0ed58e2a31904f21a016d85b03507d3caf34d15edd92145eba4149fb95869efdd3a04ffd74b0203dbc15193ce0ef5b8ced2cacd9d4abf503706af57a6241bf355c2138de5c8179105b18e3f11f812e046fd4b4aa78653b7e259fbc1be1ea3938c2a50a6772d1f7234e4e2598a645d934d06e43819d6046c67ba3ea4e6b7178b78fd58dbb62497293408d140142cfd6a81ee92590743da1e70006f3993b1de974afa892e49363c3d79ca36fd351bd74f1718998ea7da62a9f414943fbf0bf98d41150b50d2c612c4036dc39f563d410b87aa1ef3a56541086dc61ce6d779da9842ae7789963dc4dc1876883abba610759065a98bffb9c60b120b76290512644839eaa26bc9cf2fb6d2412a18bbfe25d166e1fc467f1d2d999f8b24310c2ff959c2d01a236c77d5ec92b894151fbc8773af805651247ec76e717c0e0386950d5b9b2b1efec42cfb25472446ffd55e01f879cf6613c9c360a6aa6820c10d3c1e21f46fd150356ea286aa5380fec38ee2c18db6dfd6e14d116c5ccef2a6e1ef6a399a3b1508f1a9b9da43469fe124da47a47aef53a384d9610a849b8d147ec97cf76cfda628e7f1f7463376a09940d76d6d998e317daf47e73186edeacbec709a83e13f0511fb866de6e9270b1c8b40d2a49767f738abc8ab0d8f3bf1ff64d885a70bff50444b74ea1b42cf1f1a33cdf634b4b5561d9885054854a765b0be5c34491f056aacc2aba81f4a3896fbf0e5917f84d5ae7c71d3989d7b26bff28aa40a7b8578e58d1e6f47f87f095e20d383d117357b0c756a2cc341afffa3dbbbfe8471f5449069ad2a44d6d84019be2d76b6513ce454965f80f66be6a4def9361ab25da61097bbd5fdfa14955e6aa8f84b0b944e47112c4ea957e6ee387c2a222e889b865a240ac3cbf0a09de92814dd8067a0f70597e5bb76f4a99466a4b52335173a9b57a2bb6b5d3758e8dae82575bb2b85d00f14c16a233d78f34848e5088a895a5f88a9feedcf69eec223768f98491436b8f407447258867a00a132e648832c2c480b0578aae1eda9aa6c9ed2a12746caa74375696f47afaeb3a1a147a98f362e74a24c62a2d0ab3ebe47b64028fccc40fa18284f66bf1792813463fb8953e371bd253f302fc2cbde949dc47b4e7c3ec13a937e4b3af4232d6f41ba84e46ea61b47876a6d172d7ab77127dd54484a2569b2d1bbc51c632d22b6d4e98a8408db3e79156bacebb53789f07bcfc69346408c47f32fa93a7c1359e542303068b6e0bd93280052cd8a7ad6d679804b1b8408b104769f07003154023490e0ff5c8e6055bf6f8e35b217ca334ebaee111830690923fc87a6086b5eb8a1f12ba143a1cb136d7c0c5ee057278a68289693bc221dedb8af3914f803213dd466529ad4bae7db0a5b2a2118a478923cb5333bf59be26d649ce2bec9136a0306a5351dbbcc2d8958b5c4658f929f6113a6c272f1de18d00d07b5cef943b7ae414fb1cd106a19b8b8aaf25aabbbf1af53fbe9628f027fecca65ad957e13ef142d6e00f5e5defe838d55f78c47fccf1bd0288e7bbdc872142d82908990a4a281eb7916e508a0fc448b7198fe3079de37b913330b8869363a318704e2db53dea2eefebc7799b632a8234ec8aebb7bc65dadf602ec7edfeaa5b38a981a4dc660f7d81f22a2939ddd955a63bdb2df5b7d18ba1d7192640e72d741e879447e3823976831b422408bf911f1d8e9dea1b4425f29c8a06c1e7395fcfe0ce7efa5bd7e5746f3ca6228dca7bc913f934dcdd5de88dc9d355107ad683dad92b14164355ddf06849c668e9881297503fad0e7057a8f6108233f9bac68cfbe932c570a7ea3cb9a99f2a288994c68e3de5f29206c4614644651c473e0e32fbc1a0d08fa385066105ba02d75dcbcb566996399ab0f3da1ffbfd7114ec334207c1f3aefc5f0da26a8a0e7cb01cd2ca71f1731cfb454546df31ce59907d16e784ebe2b48d7e014b7b9935092ba4b2bf1993835aab63f0392da1ff34d83aca4ad8c0ad403bfb555cd9ccfa39d9714caf6077dfe815cb43cc685bba48d1e6dbb0300d2c23e08bc15091176b20f57cee60ec3e0fc1802a503e14d71063765b6a236a583f9861a8bf9041c453354dfc6f5b8d607480c756166a25aaafdccc428f3988f663279a39edd2ccffbb54a434a34ce571dd2f9296e5421ba077952a5346a059d038d4acd9c9b3057ec92f44797d933c52e6d8dd4051ad4de3d48a8ceb922d49975fde6c12de8528ace8017c14d4a8f516b602c72a8a6ab2a817b546bca01724d066cb5bda303dd7b7400ae266a1881958836a94b56fc3809b1c3d28f4fc25703fc6be321eb13e57e81777d3cdb557837bad3428a6e35932d6e7420f75e3ee6dc2d5ce22986b13ce5db701962810f81b5a7f4aa2baff721563ffe5a0e5015d95099e4e8d2717bc2bbbb031cd5e55e2a9d0a2bc7a83a9bb643640c8364a2f234b60226e03d112329fd70313783a96d9c11e554edb2715e81109b0ddb8cbb0f07954a59e5cec053955738cac1c815810cbf1411421a368d2f86e8844730e16a0439bd7bb260baf94d83099de66c050b82b1cac35648e5ee54677895322778ac7c3bcaf45ecb7adf7a189b625c2c195e23cdfd09cb90393ac6233a90e447b4f50e469157171858e217b718e801cce0dab9f8077cf4886fba6e978b8a025cc7b13c1df508f801970a15210aba7107b0439b89f5f5ff6c1b48a33685055536a69ee51d3c5739081bbe0b4fd10167300bac2d6296cd1172b08745fc14e99dcffd965634c8a114def3ecb094fb4693cc7e1fe13f387ebec26a62ccf250041c5b47449691ce70b4fbec6df95c4fc30e3a273d890a739a8b0eb3de55d8f81ca30dbdd3daf53c980033b0de05a5be7f847562c1024217ecea39bf9923044f8b697e1b71313f6bd06f15f254442de162b8e9a8abf8f1bcd1bb0b0302fa19732b729393c12094939b612edf067d7bf88908e2475402210d65c307315947757fe56ca3eef265f6dcff3e4de792124a53d6fcdb17fcec30e2eb457a83b79061697358ed4d4029ddf771390e9c33f5b13dfa6a573ce931adad13712606d5bd537996f551f59a7b5d323e840cb1a4f28660a64e4a2113bcf076ab01f639741c7af06ec25fed462d29392e18877df2c53f7e617443f6b39163b9eb2191e62a0dd85005bc0107f911cd959037ceceff352f6c256954f52f35c384935150c7590d38961275d4dd48d8e816b57b47d6bdfad5a82130507f65145289b7f1f36090cadb0e8825d16ebb770085701a4ed9f3886986ebe4ad10a9ccf8aa0ef0923ef05e2ba359f6c1b8f32a86419b5548a8c5427127c6608b6a9879aa1152dedb6ab922385f7de1dfaf7f7a71d06515cac969ca77b25c6781a68ff103122fa6ad6205d24ecf5a21d85b29f5e76334f12b9ba44edfa1188a57e52173835978354ddcb4018e5eb56dc999f0b6b96f9f1c572d95823a1175e03a0d5048a0868cd7caa3273beb4c3d100fc15db92c89cd1b514e967957688c1cd9efe5ebe21c2a50de4e6e2f109c3aca10f7e22fe5c66ce83d8419f073e6c02c46f08a1ebd70879f1108d3a10f0251046c9035c85bfaf4e730796d8e2952abf192925cdf8904fa559cdb07689a0e024709f56796dc8f82673c6e3425c42206d012564d806e2de8e8072d4efe5f3e32f501fcd4bbaa10d21d6ede4cced641b086be64132e2eef0540d0c9b83beab2fa91309f5fb8d09501e863c12350326e476b71f8ec18f620c1bb9cc8fd53ff9ceb8039cb3009e5d8b915adce7f9914e825190c07b1537d53fe05fb7551ba4cb16987101718143f628ea2bbc7fe7262616292ecd622b9dd56e518bcfcf325c6d95da4d4733395887a4ef6211a48a02c08e91f540dd28876233858c10f5732572a02a0aeb07ac3ad904f14826b9850a6c14ca77c9921eab526f02343d95ca499fcc1f9cbed4c9b322fecf135c85c8ca5daccdf03fc17b5eaf767226c9888f8ea97cc093e4c66a21c20196bbb7972ad5b4c752d38e7a22c40f156aa48eb3cf33e5e5145ff498dbff491273773d1a5f719d856757056cc4d8596106bd4f132819fdf55f5cace829289533f3539a50d19ce810d64c23d94367573e117d8828180da0f5e125d00e9a76aa0e3fa2fb32668b36355977935badb9b7dea4196178bd4dd27fac9314db824dc2d7a2783bd954207d81aaf536b733085ef850d6c6925c9a1704535f47d300af6c032b9403674a87a2183db74e4cd3b08c87fc862469f95a4d18ec85644d3ff292b234c02441e7ecb9b0ffe350f2fa12ce6dbe3b256463199cd203bda8c87a0b280be1cb6c1d147b0f3223b1c6b4ee7b75047a9271633d664257e8c97040d17c85add6efd963298f2cfb4dfa7cc3f1419336f0a5471c6822cb4e52b6c407c70dbb0cb176ae1fcdc2225d4303fb125cf273628860cce9dc0b0279638bbd21220f393a6710547dd7525a5e4fd3569541945ec9c697989e15d39e9a1ab97508a20a06a9bfb8dc05e6b4030bcb6f610884ff92b7130a74609be77234b032f6a52482b19289c0c20e7bb3fffc814c22ee989438331244ec39e8ab9f410ee8021ea3bd51b158da859a4c7b21eefdc2d3ab0d6e0422033fedbcddfc1817d82508279e014dabce5b0fc0bec838673fa40abdfd28057c0d3b28f136efb35618c4bc290f00a2e30167cc46bb7ed95dff89b6347a3d1f22653754ba65a2e0c15d0bb2763a8b59ed5813c8114c9780eaf75e570c0f310b26043206eb55f6a607ca0541e7af0d72775ce4ecde8c4a6c29dfa1902beb39efd547bf98072e1c904d91d9247df804ded2b24585bbadccc9ac8827dffb1f07f2507a957681e62796b8ff5215085c1f604c6e8b255dcf39a9dcb2d7cbc4516a8c60943babebe7a405c1b1d6c485c09aa346b0dcb952e517e8f7958ba63093dd1e717dbcf6654ed8d29db0d0d8397db9c176a023f003414650b32a3e3730fce698030cbd27bfe786bc5f7bba83b17d8e0c16530b1de6aad7b779366718b16a48b7e9721b6d4c36e9a250755001eb0ca42163c1f7ffb7dea04108a7247c5c27aabb19ad19ffaec2a02a653ff310145cf536a6bc5c0c563debc3c2a503fd27b05d0047781361a825273035a5ba32210026b9614b4f335ee005461a02b4ae63e37077e0ae7f5873c5cee47c1da3b07cfa61db0c0990e6fda20b4f83936855cfe913da22a489ab7894427312554cd0f0ecf4de56ad72132abd158c3fca59e8f2b2fd705122d678022c441db8ee83eca33a4f68a160a79505fdf99f956dc797858b01b5cb5ee8596e97247f10319c2c95a307ad7d4f0f5ced0bf907f81e489a9070fd94ce6ffae4ede650d19dc1d4cc8cf6b1bf65b6ab67706f10b863e0d5b8b5c0505ecc928d34f7bacfb5dd552581e1d2b6b0c5dea6e10139f679f43b58ded61420a9f820a744ed81364f380bfbe64a053c8ddd489b5372656db4fbed6e6df7bbed34619ed07200c29976537919860efdf43846f24ab451b266c3ddaab81704fed037d734991ae9751f2d56e4196c7f8a7e3133bd0000cccc060efca0274cb777768f701e34dd2879bd0eed17027cce2e62447ff478e23aa4033321f566b1f80fc182b5aa0f02c0f7a5dc92e25a63714233d59daad169b7a6cb1ce4a115ee26351d65a05e191ef25edc2a24f84ff4eeb011e289690cfb7d885df6b4fccd21e3180f80f96a4cbf70b2ccb3a470a612ca004a088f9c563bf29bd44fc16a29c56f8b2f151e203f7ded441fdfd558311de995bb333586795877217708fcbb0a9056577c2069bb544dfa8090d6de3d2efe453ddd6a48d221498416ab81a5e66f7b4ea7d3451a81613a31edafb5526e6ed26118aa6c57c452ca99a294a5a4197a4fb3519b7af5c86daaff284d4000840fab83118a2c2e5fe3c2e8e2d34b84996d4e534915c7ee8251ba9348de55bb0aaed647520b488d87143d2e1b3629153d87055f204c0ce9d3428e232d7a90233e9afd5fc9d50bad13c5d5de3784062ea2710f907ed7db066d8346f3761f4de7e5925ab9e47f1aa7d01513445032a39a37eff792e464aa67b71d2f1cf6a08d63dbaa0bc96fd22ecb872f7d9d4a42e1711af022704e97270495008a15c4b3565d6291cbaa916b7fc143e887a1ebc15b8bbd556b4025e731f0a81706e0fd62c9ef97e04177d5f377dd3ea0e99142d0b15cdf7784693681b9c77207449f39f0c6a0bf0e769a6896c82f5a6a14461c7f1e722b1aa5e7059b8dc6cfc37c8f540b4b65c6c3c1db8d8220a44b6efff72d4132f4c446c26af1bbbdd98f7519c25ed04423ed7f5f0f529b04511873534f38a2800caa44734e9fd82201f0c97b71b928ada15cbc625abead92eeda89e9f6bf514dfb7d270b5ca6b7ed2e7a3767938c15f40e57391c7b02d1a5a8c668a92734f332dce36a6a3e59648260022bb8ca6615873c2be70362fb3cf3ce25c1d1794db72a05cb9e019d6fd5e52758f35bb5c4e280a1dc802c130a7e9793a7dbecb3caf04a06150e67a606c818290deeebdda87f9e25d73a5d1f4d374aebb613078e490a76ed3ce20fc873f7e59c6a64d0967d428f8da956808550c88afa5028313fb7fe6fdaf41a1d5de0012e8208e31049b479a7a9f70c9034a18d40713d28275690e073c674f505ede23362805d2b812c6e7ca8df0033359723715212f70b5a85fd89ebb0426c69fa4ea94ed83bb3afa3c7b014d41fe9a21d5e5591f964fa38dde7ab8afbf55e420b61eb31347101a40f7a62c787526d767b1357a3225985b7f2e5aa090a73a019fd6f6b5fdc4cf71306f2cda88fdf38844b34a62780f89c30d6478ff554a759be1fd29fc023c6ea8f18ba3a18b42b9a6db7c4813aea59e90e6220ee100d1f4f735f959f16b5e6175a68029cb93a4804d5919ba5c46d93aca202b8df738e7f4790ff7801c1809c9928b3f46d645517d6b7f3ecb230098a6a8b995f64af05715fcd24b455a4ceea42846c0fc46d6b4a9048ddec20319dc36a1963b40153378aee3711a0963a8e851eba7035498fd3204f6ee64279c1a668ff1ca7ca80997f5df8b4039c7caa0f34a91df2aa776aa81bc80097582dae66da9c8fba46a7888994a5cc94df209bf2d6b906441f35755b659df74272d9d00576727b6a2bfc6722212fd5917661c24a32c883d0525dfb042db4f86707156b1d742429b07fe0d7bbc4ee13aff0618c852925c753366f5d43cad6df6617f0e323b006f18aab9c5d365a0a98c64eb312518e585d69ebe3196b9efec94da2d5a03dc422912716460697eb75dcd3f81bf9bfe00d342dc8f7ba9afffa0c2a7d48ed9733d9b5ef7cce27542ef070e1bd83e76c4b62bb5da7a0ecb23e163df00db9905cf46c374671afd814f8ee31e60a64b2e685d33334efbd3a617e56cfc2e4f0a6aab7a84b15dd879be21df95de33e025c4e2b724080351513624d10c7bafe329d828ba1f492e6fb65aa7bbf01f1abe640af2746225b76dea3532644e7fbd408d18f1a77f7a8ab10af056e81b36917daaa8b279779d575773fee8f53cd4c39c6e27df81a81d84cf79991d75596ae7bc62aa4109dbdf4d7fc2347f717ccb62e5c5f5557ea837c2b274a3f3cdd279e19ebc5bb98cd25599aa2049314646d1ec439ca7736f9ca9707bccce55d4a4c7f441fd13093f21f2c59e3696625849a9511139389679edcf0406df36f217b2b9af4b816531c1cc04ce6308e735c6da86240e28c6f50689618022468c69a1da343bd00417596d1b627f0111d79990bdb1686226766b997d78fc08f86eb22215124da679800a6cd67fe541f2d8b2472c9c9ab993673c8aa6fe5e0f0b85370b342803092c4ec232d7fa67a27e806a259903ee93cf6a6ac81a5a35fd43223d7021ec67069f3a9888bf79528b535b540c922c4423488cba82c7b35612b3e5b1aba4adf0ee4f2659702dad6b01812782a2779c3aa5006525cfb73b9eafd12e4a25c798c6359461630fa50ab83e8130bf2c0c9ad86d0e96d5b354ae5723b63b81279578d900558a59340cd5ac36cf20e99bca5ea3e69ca2df094fa6c5806c5a49d41fb5740d33b8fb76dbbb1059627d2da7e97446549c08f1a0787b83635ef428e7d9a812a34e5873f3eddfc55caee517495dd667bd35a39882e56a0dcb1460c6594d8fef82a72f8e6d1d41f64874c2467e929ad2881d71855842cd3b99768652a07374ddccd5f4795da8f0769086d6f706e339733f337bba6d1b6ef73b5518dc84323afae448117674c9ddedbec3c66e18c2ae5bc2427003aaa5db9d29ed34b000756c019c0b8c295bc1324428d4dbeff1b1651d32097c809aefe0cb57170c2e769609113e0f3520b1917f2ebb2daa9217e5a99cb212554c06e5a941e30fbaef42d8395388ce0ab34855145e2a4266a949a3ad7b5d2776af0aa0a518348c053cf534f8974541c2bcba665163d531983a214f6e4ed7e9184d74e32a76e4a2b8e4f8487e167af84649919ef7a4826134593521c153d93efc8bd9e583c22ed687ca26b5da5708e69919f85046ef0cf5f9902fc20abb4dc792007967e53d6f71544670499c9ebc97fe1cbcf079c8d73ebf6b1d7ae37dea0b01e13de1f68582faaed592acee93b59264c7be6a69bbaf3d990d3e49869235a493aaf57b34ae7558eec8e1ebc030c8bb3aaff0cbe5a9480c7b9cc38bcbfa1a296a7525b6ac8d15fc2c7418ed60ae4875549d8a3e9f3130f264e1d301e95617fca79b3c64f3eb222e1bed245de58b2da725c67c426a401d369a366590866a742e50f3293c54cc74001fe9ab0210f6ff9fa627637091c9ce140c6424473edfdc3e6ae72860bd599351e123ef9b850899b1cd3e079c5cd5c601d94ba173c53fe7ef126699beee5fc55aae3b5a461fdac99b81268c607c042a53d297cbf1c4373e0291e186040f56c03163ee844e6589c60032759056b6da7947ea949c67d277157e0fc8ac469482b7641c27d038f6e3aa90cb27a349f0cc5bace52e44defac79f6e68f330d008e69bd83dc85b6d1e2a5b503654b4a3c1244e1b5c0fe119e5a1adb95751f3212ae71d16132902285aab81f5884dfa5fd551421d75dc76b31fd59f990b16728672b01697ccffd0bcf90a16fc967b99d022fbe7c9351904bf7e7a1e7d3175d5e42a214aa7dd790b28e8677f9fa30cd4e2b1fe1880f64f5076e0d1b5b80258db2ef66c77105e2dc0700a157327f4daabded567044c2b70a4879c947af5233791cfc71cf91929b6dbb142bd85812ec4d72d7fb417e16de11ada28c5d67d12928c6b8dd261b746275ac623ed708425092cfe4dd31031b0a60e57c1c2ae367c72e871dd4154fa6c98e71da2c0ad51fdff37c6c03435e6bee8234be8fd6ec0c54c32cd8915eb980697eed70515bace5dd9b5181d285477c34d00464dda8fbc3c3db9004a7f4efce1910c6e475034b6a7cd00b359bff757967db947eefe290f0882c07b6647da875c69def7b4d8aa06eb30099a4c83b761e6e8f611bdd51cb7d465c9700f244a73fec25d67a4699daa2c395e7eda7d4cf6cebe8e192a0f1c34503b4d5403518d965a9da070fb9c9ea2435f7b45f85a8a05d1a40b27b6b0fd3485085f9779928cffab786090182611c0311907e6a512d2825aad987ddf7e823096056371454b5d943f72f8e06364bb5555f04ecde92b8c1123805b9569d0c986c33aac7dc1e096c4a5a2713a0ae8cedc08fe4f54b4efa23119d7c01f82bc5ac4b118e1b162df3346521e88a262be47425edaf50728d3ca2ef7fd6a18eeb4b42b2d766e314b05d1ba3e35182db9d83f4183564741a2b182512e963be8c7a3863fa62530ff567f8b9a9c2dd3708f76da9d173d7884a8d0b8b6322dae4de63ef2fb95b0185e562d986bbaa67994d6a9b75410f518bee86cd932c90c2078e28390af252d261b81a699c1a971e93d0349f718a007445f2645ce95acca2cd35520525c851ffecd74084d76464b4fe08a0e45e158eed0baf0aa3a328feafc92820faec768bad21d79306dfac6c324d46f969a2ee55cf448c98b29027ac3621064757f28ba59c04b25f06f59618a643c2d715a4a3769fa33de62362d42ca3cb27e48faa6dafe7147ea7b38b8c7bf6cfe78133f3c54ae7dd839a7aacfa0930d3dbe93999738ff27035d472a5d2f79cd72a88f8badade92ebf508ddae98b3ea7fed8b1e2dd3cde9aa9127a68be0ccdc047ba11190624ba46bc40a0d0cf2018acd7e083d7ade8b69633baa5277eacd3e19f66eeab617b89bbb65198fa9b6401b6c2a477a80f6038e8c34f3b02b15825a4973ed4209916c0c45a2ca49aa50bce8901b510c57c5f2b325bf562738143f8cd79aa847553ee35fd4054faa36176f86e82995b654077756a3f0f3176ae1bbf122c9b159339834c61790e4d1fbf8b70ce550f5f9e1ad9a328819465c59df2939aeab085a2336e2c50422a1d875ae6b74ff56bdcc367ef5e7d93e3987c1eaca6f3c5ddadc6aa3dc28af8ae6646cfe932014e339c3c3fc402242b4a5fc4682cd2f5a50116ac0437d060225eeb1b24b82c8e60b7351d2007b2c5a46b61fcd7fc836f5e2bc375f44d17396c8580115b9ceeb1bb7d1f630df9fcfe64e1b53d1aacdb85e4d0e0fe7700a642047159b88ce4fd65832b4f8fc8d55471743d2f77fca661029f7e8812ee14f7215c82214fdcba8f7559ea142b8bfb3fff822b2d9cb4003ce0d699f1853c0518f8f6249e299573064874d0194beb02bf83cfaab74cc5b7c8bd26795483e9a81ac2a582b026c691d00692e289a95f05a39f4e28002d1a26d0054ca150842425569bcb0f85dc1fdd6913c1792223515b2cf546d6fc291cb38300c15fff8aa29d4d4f5089483313dd3b724505124a738d96816ea7e8b90464a3ac5c59f01a4bb418b32f0db34cfcc2c10e5531c17dfd88de24084e5592a644f0a0d9e68becb7b31288ddabb161a7c15feacf77cd49a8849035ed0c31d3a186f6e2e823defa83d654435b05681115fa517588ed39b3183022eebe907abfa4ba8ca449e46152091bfb150b424a7557e7c2bae6158ba543cc51490cf9bb33dd40a96ef9e84f18a5b6779e6026ad80c1c08040d83bf1b578e9c4c9bdfbc99ff755d3e05f624821341652c0d21bac25b2d9125abdbc60ed9bfd2d9a36ec84ae3f4983cc5e1d51ff61cb4a26c2453647c5defaeab0087767ea00a41dd94a005c9797ba9aedc6201e18745f1d6de9c20925634f79cd563ecacff662ceb14a4ae5dfab8169028464b94f81b5b0b1976f4a13c0097b47c1f31b49df6d1797b1bba54258d72b6b04c7cbb379778caa1a2a202729ab7931958c31e58e04ea43cbc049983bfc06cc163b1796e4a8751b64c48dd02dae703b65c6b5b58e3be47a8b522b7650e315e20143a6e21ec7b92ea834074584cd06683279f483cd4fbc84f772e17bc029c2a38fae0f04ac3a117e1182052867c23f3acda48f3332f12047f96dbe73f70498bcb34d4857e7b67d9f076389a255c0b0fb654b2149d63086376e8786473798f6f100424e6c8adb3b5c3d494146d68162ff43c0ba2bd5bae518681729be5bcfa8881e7b004a5775754c9e8a55a3938544cba4d214e96c3c8216401dd970dbf752d078dbb389f0f747dc314ae344f8e91831b3a2aacf94790097f607a50900f2764f587c8503f99f78fa277f63f746c456c5b04d74bb4262cefb50aaa75c2c8f4fb7f3051ec54f45347a69c40fe9aebd4d896793fa1d1dd3929c9e5a122abf76a0cc16678a32824003c76f3006bc8cd81cc0873e258ee0f9faa9a58dd2116945bbc5b6840ee4a56fd05b80f44f59416ce82c067a37aa54b90380f51d3ebd4ac46d04339a246c2b61bb7f258bc1ca4b97d9896381302851e092089ab5ee7194ba55aef2dddf98fb4c0bee0261e257b80418b86c54e476ffc8d8f6895e9bace7973e9780cf1aa656a626a5f580b5017a51e8babe754b9f326ee9e08168726037577cb3f85d309942ca4230477ce4a13bf31e6bc8dbacdde6c25f80b50b070e272ae25cb94eb09dd9ee05ec4ba4a2a5d88aa25af4e028df37c95c5f11d58c64c4bb93b368369f5156b40dffe4021aaf05d751e69e962e4db73804755009550e0c877ad97a0d0bbac0fed4008b7a649c79106c58ef85b50bc83a80b3a5e0a3c00eefbc0797d8e28bc4948089168d046ed4582010458799824a1e044517ac6013965a34ac7539153ae9e742d4af19e950e9a4f101abb6dad899c9d073c94261e901da9774e72e3fd0b18c8a135f80aecee15ef543045ee01c266b65eaaf530ab556e93e52372f7f4907d51eefbd288aacd72dc4d92539ed1a826b4d6c8faa6e0fa3bd92f5301d7367db5773b38e2cc758633b146a5770697764c7a1dbd861283f4a66877cbd507511a36e0cab396e756006f0b006b7aaaed61d76c3256c13f86a33f150250d6a23441fb25c5a6157fe22720c1bccefacdc75c5a3ae0b68699e5ca85917a059b970262e0123da6549b7ffa99b7bb78b2c8c5b1cf3a89212493070acfb6f61bf8cead09f1452d90f6996004002e8a3cbd56feda6830faff34359aa432601e2e6c3a4afbe56b1755e3c2c0b8838e3e8b5d14347abdfb45b6f7f221fcbd7f56d2f6316a19626e618a1f896d14cb6effa2aa514db4ff4e7102577a9a95703984d2693e223b50d08d2ed8ac4581c73315f4a347a0b9fd8fc16a5d4e7724b2bdc6ce5869e524ff3f40d8c40c04f6a1dd5ddf0d422de164847f4c057d4566ee67a0195f8ca9b1b1e6bdeb208f39b0f7dd2c4f5887a430727668da297569aef90e9c9d69aeace865a3691b844261a7a1bf1faedd2bd5537e3d26766a5d3d572d4c1ae142ab0c4b42ab14b6ab9ef27f89b7b80a440fb90f953e99101b35f9047f8ddabb0d9c7199cf23fe0297caf6b91899af2d0d39f72ed2f1120b384c08eff32e6d4d8642061f1afb155805cfae9d6c806ab2d6c83113ba1e8e0a309e713056d74c90d85d18bcbe9094e3372c8148f7ff31b21ff8305c429fc101e5eef6ea9be824650078345c55d6a4aa61741667fd8013a35fb4e922ea77ff710c80e6124e931e9a00eb750f375993b0c03e690adbc79fa26766511e0c9c240ac66c0383d8b164711941aa903cb41e0eb99185c886f018d97177f69962ef22f1a9d1df378177421cc0bbb4f522b17df4a62c4f74282d0769f9addf5a9b5dcf5cb7e0b1fdbac7eeffa861aa98819e3cac9d1727501bb73b6594350bdf71944a7d523aab77e242a5e63dd0d00de1cd5cb1131848082f41b258172be2fe54ffc40aec3d2f114fc06a70d00dc1e7b422158074ef1abb088bf22703c34657577bd921abbffb32881d45c8fc4ba55830da5f362d5930cbad239864ef914415bac5a2462a1f7b9f99d6e12360935481f6b61039ebc9959d8545cb2a3e1cd42eb44192e65b803d549eb9ebc180cf49ce5b4f25b2f51b53184e8d5e38fa02ac2cc3e9104843334e79f5a0dc6d8238ef36aa795cefa9394fa7749596d9ca43ee458dcdc251c628679e8628d77281e0a1e670aa996a4f9a04fe349b61a2a805ce98d3f587bd7a3fdda4511e3aa17cad3c0066fd245b81a6785adb89b0571fccdceffea844c35ca3211450601bdc87c18a9a7a7625702bcb0ccd738c136a77be8ba11fde3667d5d600b116d5d34266e577d9fd5a315808d2449345174ba818adc4d1415d39c6c7693879a069baedc2588a7f54cc783495938e1cae5da0fb57368bb1c59ea68f4272209be122abfef3a461791d9eb325e0c9b83954b93d12092c4b6d3cc9b06f3fcf72378410669028418559d6f163da6f09e90ac29d2aaf8f3b55994fca7f9c94eb5d0e0ad808da8da92629c7e945fd30038207848d016cef18c786379fe6762d6dd6daf605af596bba1ec2467071729be4f208036c97eb795b691eea8c251a4cb01b563c8c7576ecf66005ef3646b00685970308017b5ac5ea15ef6001fd5bb38125778a15ba7926f3e609ca533e2a9156509d278f123162d6ecc31ccb0ba3768d2341915092503392183dd2a738b2f8b2c09647a1002f1c7397d53872e1b040ae56ddc38695c9260a6540f17559e8b3db141d76f807345971aef0dca37829b127f5b8e6fc533ac6e28b55ff4ddb3c59ac2374487e3770e35aa0ba36b80f3b8255d54888c2ec3e6bf1d8da845717965754c9f0cf3d7233fe8cc22214acd29e9aa832d488ef24bdab06c2bff6d8fdb47e79a8aac2d5aa3e895ef87d64b3a4d3633dfdea8930919b8f5651ce79fff09364e79d5dc54b0ef317964423aa8fafc7d55c6c86ca3e8b08c80ced3ecc62e54184e6fb9731026b2c5fd2b6a485e123e757d873d011cf9ab090a2d7e198431db8bed4643d81731a2fb8a4f1a63faf44f080c1f169a040b9e619012404a8057776e016821ac4e19eaf6d531c1f23f23091d3e220ce7df9ca81178f138c5b89a2cebc95dadc3177211ead4c8304cd06d8b761d7ded545b1402ad22fe54dceea6bd483a95b4ecc7b1e6f5a84697b63cb8446de096ee73f0d3e54b1864c13e5c6f99148651c7cf418a617c725e5b57fe657515fdbce28dd3574164d522599f7c77595e60fd3737ea937e989072478a6427560ee36d1b4a9431414d96d2b3dc2218e483cb7ba02730d5b68e3c3f63ec94ace9392d2d18086940a9e33345baf83ceebe0ed61b4e1feb66f0a7ac12d0c2458d4cee5d00fd58808cf4b59877f5c6c34440f7274ee969b2920f6c4930d9e885101dd8d44536bd8faf7b5ca3bc5b4e01b7db2f61b2961bb2c66367efd680c9e4cb5eefbf7d4270c42608766688e842a1cd87e94895cdcd9f7d44b3ad7da2e6887922d826de519d6ac37a1cbf3ae3fea568513c156d852118f27d4b687c3cb29ba49c59e0d65e2a84a35fe2f56fa7ead05c401a052b7404ca4425a78337571119941d8615c540d49b6b8445a84d80a1aded48076b1c262499273a0e30753f67dcbae58fe9b9c049ebf93f06f5edc797ba36d1018ed198936716eb22f403d99a0cc3ed9a3283e8c24c9f917cf01a28d71f9abd45bcb7984c3211e12722b5b8253e221095befcc689624ba77054ba2d40e3288ce97b51e85de06644ac77b6eb358f79e9145dba8d54dfb6db1d5b5fe8c571a2eb3b57b357c1650cc16ac5c372b5c2ab71860734cc2d96a191723bfe6dc93294f02163c76d8eccac75d455aa2b34abb46282781b7bdebf060ece1f92ff61afc0b40a7144d5cf16470a2600a1778cd376bb5eaae2feba553b0c36417e836f68e79076df297d79933adefcc436847a49b14bcbb2b02836d4fef311f9f8042b3e90df4f8e040863b418dc99115a00ee898de8fef934dd8927ba4dc29a3b12de34cfc145aff5e4f995e21d82f9ad45ff0ec60dfb4194f1ac28bb237412fcb588e3a46a0e9a66f461b5afa03a3fab33116beea8353d0062a7915574d26190d993eae71c4e026385b69518aa0a3240e424487dfdecaea9533173eeec832bbb757697751db7a4c333a75b7b791d694555eb378f7b8e040ab81d7ff2d956774912723c9471ed1048b2c8be0fb7c186126f4b92955b736ba6ff6c5bcf56f35c98c1e237aa8d549f171bbfb7e88e54716b4849d6b7fecca937418bcf742760042e602dedceb6419d999ae3fac7c2389d42bc8aeacbd3464692dfce88588f5f4f83023d2837017c419268ef96743863e6a2205a5c25d1d0bc6b6e1fab0bd2fc713bb2653417925388724cc35273b306d09922d220edbf510cb88e83a0d202609c41cdc4779383796841efd4ebefeb42cfed76562c79379b045264dd545acead1cc6ed41df87800b46e266db92e101561f64801a33f0b5417c5cf69cc083903a17d0649e62aea6afad27451b6adc02b20d766bedb9b15169626ddf9605d578d8fe26bf2032c1ebb732d4c38b9fa09ad4be21f946a93bb239c20a5abfb06944347bd10c9d41fa6ffa4ab4d0a759bb0483859ca69f47b756b8c3983d97fe7d3b7ca11ef7797d921fd1b657030d259c2084524a22035179d061ebd22941bb031e6e9369b9eaafacca623d8ab2ebcb5991f9ec13d317f553037f2c2f43f256aeae1683f4d6ec1ad578716346fc79eacc15e1fe302972a4aeeb9e9662b1c78dfd1d140772fbf48cfef13c7b1352e8a8a3b04e7596533fb47e2d9d2496442f727ef7b50d29ff5b5c80baf2e4009c6f394b858ae81f39633c12baf481218eaf9436cf139391583fdb6199a5e65438507c6a2a556256059385f413ae9dd1ff4b6512c4e1f3a3b10de6113a59da87d800db1c77269ecdaccb623667f5df938640fd21e0b956c3e785e5be15c8e545a4378865d53e76ac051ff2a15ac3bc3e6793cde9d020ee849c0c6bd808d2057f5f85330cf3b5a698b7a97a80a9cffa9958cae93cc2d9a7efbce77aed4e1641c44e0ad37050c0aee8dfa39baae08834d3392cb0d26f812c10c0033b9636c07b47ea37eb776e3632da16cbdb09192ab2122875d45b88e89cc34f7e72fe6a4e0ae6c96bf541e4ab31425bcbd5e2712840e54f22cc7afb14da52df24c95ba7bc3f3f6ac9b92d5d6c78b07343de99218b185d7607db953b1257eee0c0ca8e6b56033f4aa44e4cf9a8b277bc03a16a212b1c1bbf3e79e61ea7b31916b9ca74211b553e8f14f80ce2b2b1c25a5ea1100bede7633ad6955eb9fc498839d99d7fecbf7a8b2b7f48bde2ecde457b473ddddf496d98ce593f16e9d81674203c3a84aedb38bfef571ae18c5c12d6267d9d06e4d9d1a6eb8dfa454705ed0641b77263a035687d608f6063b1f6d936abf733f482be1ccb75822802b53785ed8cb64082748a9f9064590186694793dd96bd9abcc50f3253572a9171312ca4248e6fde857ea079a41e07f0a1714e5e2fcc6260420f0a7ea2e346f7d67a7d9cba5df2867edf586101d179ad10dbf5df4016de421b811500749472d4bedf3ac3c1caf144da09882c79ed98042277baf3c14d3c59f18fd6db6fa65ef31e13cb586f1c7176bbc3fbd4fa8c8307ae35ee524d3fbea701b91eeba38f7cea760673c6a19b777fbf264d5d066e001c6141fbe75627e468c5df4455da175197a558dd0d799363d9deecd8438c0918982659ee92c6a080aa548262ca7318c9d2057f6a63d9bd773597a81653fe3af4b29798c7616a7fa9720f91c8010b715b11ce3b896aefb44e08ba5e6ace38a37ca105b198eb98bc909b6401254e2a8e51c1cc54da128a51e5611bf67463317173bf602f05c2949b39581eebabea6d6d25478e09a492957ea2435c5fb2ed8d462a9cc8e3f2a89e1928cbf4cb2f86d3ca4a15957951bdb647fc7b10f724a991248360cd391ab1ccd60198f9532cb85fc01d111e775d2e2d71d8f9eadcf725eb959dd6774e2dd5c28c0fba7807e17c33e142f470c48ef345fad91ea1315d4e7328bd295c2058f91829c4043d3a04bbe560f5814acb12372921ff7f155927fc2fb6743dbfc4cbb789adb10f9fdc2cbf2584e53c4ca9c68e624dbbfce913908ae6c721da38af244edd6c05c573e473d1ae3823cfb949479eeff14daaa15af2f6aeb0256451a9afb85b90430180e7cd79228aebc4835e79800bcf94035bd771374fdf3266d9326d93dba590fb4eaa63ca01981eb1a3e007d458c82ddd36e4fee000110a78fd479e435fad2e5fdee17e092c5d7154fb3499993fba2ed9360b75b92b8fc40a0ddf6e3929fb1d78b897a961c65c6f7da39c6d0418c794535822374dc37168c782a9cd50471d7a037ecb252d8e74641c90937890597ac003f37ad1086c5d1e81a7c42f876c6758fe608e9245288410cba416b3707fe36ab9f3c2c543878c270e6bda28a2ff0d583ce5c68f1fa749dc2a6b17a31f9c836d5d51e68ba4593160d5ad1151875073f26c16665b5cfb36ab619959dad23084c20dcfd7dadd27783cbb7cbcea6358ac2ce9cae1597e39ca6255dd8abef2ebbc6bba64757658a48b104ef329ad705263d599f97a5d4f41e35e96623ca0f4004ef3f6ed51a2b2b64277b4d7c55dc9174e2233611231dc94eccf6f51ef90019ace98160b5a769264214bfa878847a03c2cdef55ef3aa77b9a1d3aede37d7f005f4e7dec931c3c7c0e2360e6fb0400025d45206a6f3996fa984c1d422503e37c40b3b7adec3ff07ffd2c15bd2461067217a4bf250e75331b975636b8c91cb77266ea35498552f6f3723175b3b5289860bed53f3e2145bd764586ce89135c283039f85a6de9a7645f9ecfd3b3079ab818d57bce90545fd4aba76f561fc0f23dbd697f4071b36695815e72e54f258f18e3126835e0a68a34315072c916b3a6c26ff635d239e45f8464cd9b5b38a38080e2631b76c6724cc1c081df179bf2ebd6187c5cb9de8e258c847be07d89222413491e2629d05b246cff74eff208736948e4c41f8c69614903027a9015a9b9971bf3d2180d940c12bb7e186600fca4ecb8b798acf050e48b6558dab4ee187f1273e50ac1ad864d330df2959997bbfcd25a0680d8f91ee52282658fd6885fe5288f9a33d520de30865b75c98e32434159251ea6bd31b18a858c17a660f4645969b0a73b37be9d0d5844215f3e0f66c4bee8c55a5fa84581a4033dc22496b4f1f0f9dd88c20bfe0821bb4616875b3408e015513cd54ba706a1d49083a37944feda204bf46e556f58f99c9c7c75286ce26a909fa61f66796e11d011736d09119bf056190799966c81e0145178f5b00d4c952a4c9edab9c52b3ea2de3e13ea8b4803155c999876bc7161f9cfe3bb18df3d7fdc37c2790446c83fa099b805eac4073ef8f43d43c05fd05fb147c5976804446863c153bc363ca800e91522c604694b38237b649ec265de2381692de50fea2b8b02db319a07aa1a6fe7fb6392149faa43e693b3cfe40fa17576387c75045ecaa4db6f92fd69d750c8cc7a94f03aa3f92231823bccb20da581a47bfa23a43171482d163f1fc2b4749cf1946ecf5ea0fc62f0b7523024efc82b79f256f94ada2ec7a6f6b2ffe96c80d4fff34ef12cbe28aa847808b0eebd337b426e17f673e1ac17614213d940c7366a1180acc27268642a8364f771c1ff267e1cc7a9d34e603340d7dc50085e91c287e9157ae2a4ee6fab3c0515f03835303bb948b70f381b6c1dd9718bf028d64ed34ff338549b52b82fc5267b3be4b321dc0bcad6a96cbc4a0faf402c5e2406da7c7111e68c71cc2ca3e27690a6f77bb68450d8e7b351d6b8664d612e9ff581e38b9efb2d3961594d46bb5f3eb1ba69f2d5f294f8ae015dabd929be0c8517b1dbf84b98ae831b6c83a71fb61245dfdb9ae4d3caac8f98d0baaf6a11341ad1cd973bd3ecc785b10423ad3a993f63498923a84e0c0441c033427cc7b420f706eaa136b93904db27ded351580e16e0d140c288eba8e08551a76f924b8470e4be6936d805acd049c6751b7bc093659fbc576406fbdb46764f2e0ad4b0a090ffa52d03123d87c420cb0c8cfa0567d2fa2dacc9dbd7faf57eeced035e3e99669747596ea7b389065462cbb86cc8df16f7340adba155e01d88cedcdbc39c6053bf7b30ccb53a2f6395ee297c2aedae6110cb8834973d3ac04df662cc45c926d42897303f9e615b2d9692931da75894b4c9134c68f42191070c9b28e797eed9ae07ca5a65a393e12248699d252da4fbf4fc41c598aceb8fb99d12690bf0a8f083c8d80350e69781f169a29f6ee47790a1a83843d85440966b08c6fba06c0c11931ae6dcebdb7b871ca37299226c659bcfb25393a593f73b4e32d08e55b10e4d1133b4e0f2e732897d1f7fbb695571343bd6e6edfaab5759c3621e31991279ce990576b81e9b03af09c84de9602523ecaa56c6f07552cafffdb6b375328e2f9ab7adf587c0de56e3546623d35ff89d7c28ff65d5df626eeea2d41d413acbf41695da10bba440fae028797212650579839597293b6e33c1befb8138712c19e827aa407c5971f02ad28854c2f6c48fee09e153cac6f8647765645217be753801f436c53dac7c3330eda2b11e0d4502197c5ccb23e31ab6440aea7caa5c10424c0166373e38f1e6510868665ec6a6df6a2fa6166e0a078736a1004b4e641f57c4428ae583274349057cfc5285b3e1849ac11001370c84267ccccf12fbe5642bfd210490133a3751436ee3e6f29d70ec631cb3596724f762d64eb08e0ade9a6897a3e2812d83054db7eed4049c7188ca24fb3d36270501014d9b762847cb49f7b080346bc930fca1ba3ded8260b05812e0421a4594aa8ad85477fdf63979d23e5b528ff3109b8eb1f516bc2e7d4bec0ab78f68c3f2fd2e269844f9272eddebf69b10c591cdb5ab80ee0a87cb2819e0abbc6a900954d8a0033192469446e79195244cc4e38b4cc99f83a814389e2c39427bffc3e5bfc59204c090b11d06bdf4e4d7136336bbd5caac1a3308eb7eb58dd43c57841a93c22fdfd2f7f83ece23bcbb0597210c390b56cc38ab7b643b1cc5724d9667bf6b522d325240316cdc76cb02abe46e6b2bed81259d49e516e100ba1261a58688f8630d9d584ac1bc3e32ea84cf2bcba5520fa4f31eb33ad0f027e7aed01cfc94876fd9f4576546ed7be2a04db356dfb46c89ee52a2c80565d3faa5328e000413956ea63c0fcf0aa329b4217355869891490826b5c614f6ff0231652ebb49b0effc63acf757b408b98ff06d3dd04db9dd4ff5fe03ab1455f47656ac1f549d09deb55af5f04ba9ae56db7362b4c4e42115019468e4046baf29b51f1b74a40a97c00c0d231b352c00c2aa103d67a5321ad516818dc72d7679349ef1d8322af60280625fe533d21d3afc85310b42edf2103f55898130b826e15538c28fc94620ed39abc5aa319a7ea174f270468b79db1748627e2f904b1c5def097d27dbba4edbe3f382fe0f9f04f032d637912735be1348770b02d25bfddbd895d0cb4f88d42f9c128237f2bcd8211fd2d0dd88c108f7b26c64dbf84d0dced32b69674c50dc4e232d6f4bd5e7c33297b166ccb636b3245a05dd687fb7bd4b069ddf9649575f288a6efcfff1c1da12ecbf9b4936d72d57579279da0a86e0a31b8cebd667face48c958135a3f13e52c411779ac9be6dafcbad36b1d33ff4746496a8f25c2053eb9577044dc4f0886a62e6db032784c54c1364b4185b1ccd5a496a8d983ec453292aa5db2970148d250898c64b4983471256ccfc78df0d2f09e7dc918542673f1fe75ff0c26c22089bdddf08007989635e9ea9e1cb2c2ce99fa64c1b6d4650806e7cf0b7dbae7f13e4e291eeaa7054e6901aa589c9051d078cea8930d6f49e0a32cafb375c7af282aea163584ac41538f2d27f16600c2297c4ffe2bb57edc1aecaf701ea7839410f240a609debc1f310dd045ef0aba6830badf7a7c9122d41ca220bf185a6f49ba8243dca921f3fb87e6f47a2c21811d29de7924851dfa57293a5c79c25d7d821314f8e1d1457d96361c65bcf912a8979e4726df33129900394f61172e67be158d91d433b8da9c90d2dd5e5d2556a7a3487d58bc0167665d01a2e31cda4d84f73224fe10b8ccf3bb5e6216ad70fd3585e54c57ed92f5e8d5c785391c2833e5c95b3a3e1ae9c3a171847f15779281b8ab9a32f495a6038f1a8b16a769f0c0738451be624982f11df7bc5eb2b4764ec978f423c5c27655571083b2cd06e8d81a5751d89fab04b3d5203300f3b10497dfaef6797b095c6737872ebd62eaa1cfdfee75b3e7ee880417cd7e5fde9fba1f54c297779596dd20ef967c76cde808e851cbc5cba822a6b3ea21b77132d20d5fa7f0f77050de85b58661e45d300081704a9089801dbdb22821021b1c3bf436740ffee8027fa68f410ec82448a7383503c728a889b7fac27a569e122536d0afa1d9cf281959af2754bd7ef07578abe8cfc9cf6e73d0c8b91cc60b5f720d7597bc97dc04e25bc21d8fb97f602757ca403dc4d71f8533d6a4a4899a714b179b77f3e92b215a73c3d5831994a2551e84e4cb1020a7e661e8164011cf661cbeff1ecd9ff474578051a22ebfe3931f54195d389bcecead8bfaad43327a25d86575f1d8b118a0642da3f69df3150b76a210754e4245e348bc3f2a8934727ad2c7dff4bbbb0585ee7a8685bda38da562bbab3dc60280dc7e4f1e05d801e7c8dd1c263b4ea8efcb344080627d017d44b2cb163fc68697ce842bf9382b39d93bd18ebd99d4cad9a9089ab4fcf16f103da072a93cdc6ba52648309122115ac07619c11d53bd9ec8145fd82312dde7042231f0af4357d240df81e966b1be1f3e8dcb1dc4e2b2357dcde04e6e073207e8ffa2d1d3344f00578b24ad59d8643370675cf41f9ef88db76ca192c74fcd7532e07c5282ee21c9a8a71cd61633f245c8c54c58f9ebc29ddadbdfd9d4618eaa896a943ff66fb8b7a5fa774b2c975eb3b44cdb5d7dd34c8a43b452df0ec63b3378022ca338e4d234a240ad9d5bf41d957b53b4caa405d2f7c222f8fa655dd562ae8f5faf1aea600f4572350d9f401476c8dda5d8026cd68b8d79d7528466cf5ff944dbb6063fb27918b296e59ab2f18d9c7dbfff2c6eb1e5b00ffa2556b3ce7f63d64641bab844ea588346abb0ba9eadd8d3d519d42da527ea93bafef9423d11a6caa71f7e73508aa0a1714bbfbfa809ccaf8939b4ef78c4fd52195467c33bf13605a220c087655961c7d03f5a22d2926c3b9f4c3ec14e469562b4d54ff4b39ca4195aa5de9dd23a33f46a00cabe053676c849f1e5dddc38510e60fcab74926990e406cf4749847a3cc1ac305fbc07e5be002eeb69f9861c29c8fcc567d8162c4d26ee6546aa84e97726ae1d2b31a4aa0ed9ff6fae7bcc636ef3e7d049a1164e37cdd660c19e67efa2ae439bbbb1e0c9da993973c7af69195525f2cbc7fea2e74ef0c42cc64fcc7bc1db916bad31706b35b31a13615188993dafbb78cf20463b4b5f736148fa1bb037644ade7a862f2310503ad9c5a3f634b196a9727dc3078eb8e81c89986ac23a883757fdd6a660d31b7ef92493777278513adb1c709c9aad32e80910e11d9fbc27aa08379e76f0cfe29d75165cd8cbb7f6b03e7bc49198ca09e0bc63db3deca7ee23479ed1f6e0bd1e2288290ca621e19324067a5b46e777027393e9e356262793667fa07e277ce491bbb0d972f908dc208a59be1ba567e11be8285c88a58798d46634bc631f32ba19ff1df95db0002f3b38b9f5094366e95035b3b4561280318e4075989d35e6563983ac5476deb1af7050403cf57d4da0d67d9333abaa74efef22e1be7004705d58edad1c68600a021c57d55efe70ed9c4b4eab23cf2591c3a1acef36fffced8187c8f9c5b152f701c34abf248d6b8ba92e44298463ceab8446719ea6c28ad6bcd4eb042b6585c8dd4044d1cc6b59ef2a8d807701327af2ab0f8b57ee9e9f5e07549e50271a701794ea8b587009b2b6bb483f8c897279b935cd952336c2256ad7ca03002fe07b5b3ee0b8fab2954dd120af95f0de15fb3728e2006eee2b33b7205061fc3006aafa87ee6a345a0d6f6af039fed87f3033cf773fd7c85453e1cb586439134441d8a6b0cb81cea6b846a7902573a30e4735314ab8f8d887e27c6c71e90b37c61207d8237ebc1fa089632a811773695d2e01b525e9b07f78fff3816aaae47f2c2a3a5fad7b6a3de26c63240f1aefd6a933f8876ca3f6c3bad5980c0e38a245e31b48d2f02a8c7c9b7415a8b32326b0bd4107041f05339f06b114dbccc5af4c5ba9a638d335febea1eb7ab4a0308a61ed17cdde5e91a6a210db662429cab91754b6084c2777cd871936231f604bd2d7fead77733d238faa3167bbf84953160331a66ae8ac222572ac446b94d27b6f67b658ce39e2aade3f5fa1a7088a322f0cce7b8f5f33abab2f4ee79f993fd1b6325e81b2bec91d39fed0218ac30b1f3970cc33b1dd66995f7eee2b7227e6b084ade36ca499c50cebc057794a15a777bb2e89b0760a930ba34e94c52980a7aec17060f07d45fa623c015fa5d5b798d13b479e21d547bef7d85ddb46d582765b1b632f0e44afb5d905b5418b060b5088de9af1f722ef7519162e7dba9e67b601aa889838631d9a849c687f469a4b4e9404e32cc9e9adde989930847ad9358d4f5a18c5cd8cbf4277bea457053509fce72edcdd394e39cb7468e689e63d79c5dc4b06d7c41c94e70c5d613368657b8afd50d9c87699d673c29fb659cef4425bc5c08f1e2448c7a0f0620eb66d2c77e7f9acd1058e9ab2073a9bb7f536457d1289abb4bba9f129eba503431f0e73721e80b9334224592493258e36fc30ceea4894ac2e61f6480eaf2484e60082a1c6dff229ad5a55a3bb3183ac36d6e05175d335b6199f61ffa70a54d3e4ab4a2618c435e99428713fbed5daaa2000e7830fcae7c7e3dcba6ab76c6713d1c1dcfe46d68b65d00f61c751bd495f8d563fc1bb3d742f65f16943f94fb50fa6dfe2ad44389522424851274ddbb0cc5229b794d64a9dc0a6ce528da568da1f3a7ef3a1ba0adf2f4a9ec71178b7de439902cb2e001647ebd0776e76576c2539ced0b1ac73811e247559f38024975409d96710d190cf9bae00dda839d15137733c4d3d33b727ba8b67979e203604f83f3cf57cbbb26eb2cd8f18bb1a446f8a67cbbdb28824ed87f5542d2af6b1640e4488bd76b7bf851213cf2d79c20bdd3d1485974158c949342a9cf1688b1ecc086ee062d71de2c7138c05b10b17f5324a2c944ddb657e50922bf6c221c1670a4b04b459bab3b99e279e392a7e2073ffcc6716b24d23a6a9bf0b2a07264711c48053ed27a7daf92fc32bb9c57cb3c82b0dc04b28e93123d29fc5e65c5e038b83ce8273a7bb374cf191ed03e302655aabb856d38cf6a49ff1070d728543b6a36b7e4edf6cb6ff8f77d9b13acf6b633a739f524efc4289bd265d55abf0cf814208469d1a7ee6724b2fe03f6ee8d76a6b0f21137c4b3e6b1800842e671775f8782fac0a7bd09a32ec59b9dd1635fe4699bd6ba510029ed1ada44b5863445b27c1e6c7ef1bb0571f92ededd6fae493a2d2458f8634838f71f7957c2bf225b9c6a83fb09fa37570e6efded96e7c53990dee5d1859758723edfc2b1f1089cfa3174091d8a739ae3dd34d4d5186af2a08d58d30ac76fd1ba933da7d42082fedefaa680889d208bcc3700a6c84129a0c820ff7fa4c496744ac717158d099dfd859c1764489ecbd7425e223e9d0001ae55f1004e066f93ccab1f5cf8e1de585ea117ba33e13326754feacbb6acd456c7b0fc482ed8bfaa443c5aa9a03bb153af801b873a96aa13bc9f77fafd94b51fdbbb85bdfb67fa75a8706acf06667256b9756cbc161c2472ce27a9430a12704ceaaef8987cb1fe0a7c1d62f08d816ecebffa1944998497014c8465de8b93f1b67c6b6ffda0d1c6ba93bcf24f050f3b39469c0bc1f5b94f53faadb9d5a815bb4b495cc519680eab7a2ac6646d540489b92582a44e2d9593c99a349a4786f91cd87ac89d86b95c00a4286f55f3d4cef692309ed0e703481ff1be0ee29b1710ea062e7f47ce4ebfff48089df62d2a65dffbe8ee7d85f53bc0d5192c36e210d687c686bd43aec7dc5470638f9dc981de98531e7ae3aff406fd601cae534287964afa3c94b2dd36a467c0e15f8f28fd5c9d181ae2cf29d1d6bc327dfa55cab8123fc7c5bff176b9adfaab2c4de7c727cb77ed2bae03aa846c19b3e11b5b6ca4883da5c46b54668ea277a6865f592af7f308c5ee7863a1c14a21a2f2b82f664346946b98e7a6cee0b9eeae3d68bf957d7a22760aa99ce88bf3c245394d984608f7da4870f9749ac1138380844317ed7ed52d8fb7100239879d03a3fb6dffb404ecaa4a25e2f233ca8c92883f0aa3b6779e0c45a371ce8c289ffbb1bd78766830368c0641335f7f620a96ddbf829ac25ab964f4a214afb8224e87ef4063887063cc49fb081b7f6771414f1558176d8b52cf55a1d2ad440392885b32e5b42dd382799c9799f9ed8b89dc1a59e70ca8921839163513b8a64a0957e849fec00cbc88b0ef8f2c3c22e965d121e6b96c71abd9defa4788d3244f5adcf20f44773b8dae01530f04b924278a068da655debb093a594a93c6cc241ffda5dd7bb4e20c7f6b8c745f467c4855082378b2c8a100e626cbd11a5d6713a704247f62b21ace3cb24d1549ac11e89f04d917a79353c37ecec1ab98d2b0296bc043fb6e282e05215af6c7ba363e46c4fbd332ae108e73f92506ebe5c6ceb75d8a029b9bddaa0c2722899cce25d88e1b1d7b4dbdbddee8726c77a4a117d1278c65b45306224890b3ad40b3e0705a6be0ba969b3518071e25ad57263773e71104b4e3f164ec7ffb031b3f5f3ed4edc6cb61066f8e057a66118444a42a18a1ce7335862553647fcf0d04442596daa41e84c4e5c3ccb6ff9706446548bf35694c589a6138ed53125ae62a2c6121cdec5b4bb7749f5959ef1c4fbf012282909356be435a36533a68f1dea94b31e04d9ae0b9ed2795ac10f37a053c2c2075bc9422b3f7af7368a5cc5c56292503440369dc4c49e3d6069dbb83cde1f0c7b361d645cc9d5445b0900cb46de0baf5baa2103cca7283855f4f7fda772f8a1fc9928fb4a019fb90a63f6a270fd21173a36e3c5e57cab7d42e350c15201b4de45f51d595c3ac48193051c775b49a0a810038a2398c6bd86ed7433e6be70e41f9bf9e91c417f9770ccb21dae811efdc7a00f99691cb9dbcaa06b175e93bd9a31e8eb91daa2c446dd7b3140aab375b4d04d29513ee62a6363a8118a3d2f3676a66b1f71fa9ee306f3a978ac20473bdfbc3f6c7470bccd4fbd308c1020fd8c82b95ffcb697551de2c18cbaf082c56d82b308cea887c868328cd84648951ccc79ce7ad17b142d0ef3a26aafd1767fd4733e4e6b5bce0269387bed7c8f66e760bd4a95d80ac3eae845ddde2305aeccc18ab0499833992a45086389ad45198b208602df59af3d70a6df2ad6ce4c5a1181c4fffd096c357a896bfbb48225b5a490aa0944998209eafc9c606d94398a39238fb69e302808bd265b3aefb7f288d8c150a1b5c4d7151beff5ab60e36329c29e037d8820384e61b72f82e42702c17bb9be21730b8bbafdd82f00f507715597ca9fe74b428a67dfcd555fb26f7ab8bb37245ba4c4a325bba036eb6059bfaa443a1d084eaf2784a59c594f119ae3a74acd8a3b7191cd608058028193430c886e0df01cf28e1ab96a1302e9f528e4776fc4efec39e354cefc39315234f9d23394fc43748ddd2bf780dc5f56ae6cd4ec2134ca237c0950363ed4cd75620b19c41b63cd3c11599900e8151eecaa194facc17297059fb4f27857dbaffcaa575d7945a871c07c96bc10e7df268d41ca3fb2862bb230c95c6e01b4a8ee791acde13190326d327ac27c4e3a08df299fea1c89514aec469ff40b68de7a65d2d4da1a5b6a092306e07d9570ecd3a159d10c841b2ec5923e97a091e72537163f53b98c31c0c01f32fa3f0822f18a1848ac1d820bfa98bd1a4af837c20b179039f823907c9128f7237d2ce7e8ba039fd39cb881b1fde1d049a27e1c1f66647d251d79fe35081b951dfe109d022ad2da9d6cbfa570b525e62d4439eb30a28ad81bdfe77f5f0dc87adcc01891705e0e66d5634aee9fbe22244cd0e073c87e60987ffac8a9d20f0e50eb6a3c0b2a7de8b7f8fbaba49cda59d022da78e169016ce4f81eb6b1a90a5a111cebdb05f8fc6281f7dbad40cacc638842d464bdf3e439efe5329a8c68379d5e9407cebb0625bad4d72692059d99a84f178a832709e9d8c6bb1a5345d99316c73148b847d4f16d19a848daccc773d716c047b37712c83de41b9eb7ca5e863514608da971e16f6449f483254e9598ff3aaee30bbd2ad469e2775cd2b39468eb0e54e3cf973ddd9064d9cff08fa4c77d1d848b5ae12304ff9915c3b60ba992df6c24dd0462ef4aa9da371a3f8846b88e90f70acb59ec45a4bca93ec6bed689715c88686312bf8af0b63c6f41287f070f56af65d9f65a05f8a2e193dd6a43587f1f5c799c28ef0ab1c372c5560bf726fc8cb50bc30ef53b06ae06a983f134779b813bffe534112dfbc5edbed9b31335b2a507bc35a49a453073261add9567092b0753c77ace5933d9e400a071af3d70178d88747f733618d4537d6a0479f45a4f0a13b769245685e04a6442f06d6ce700ab39aedb70568babba8e3843de25a637aa52c2c1777016f532d0eef1c297e237444ef466ae5c8e9fac84636e29efe6f48fe109bc8cc0082ef94b6b1a2a648d51bee1a8bf32e509bc0f2439d669451ddfbf00c66332112b755df2f352867c5f30050c5bc37f088fb8dfc69dda508de3a24210656a754f0d412eacd1992a733bc14837df2cf18dfe2be0bbcd7150c57c321789ff76e696160c16fdf2b0c82fa0cc3dad09c46b2c3b57db7011e433ccc05f5b3963ec8ccd99a84e267d4033928b587ceaad1178997a2afa0c99ab78184d7754157aaf580a7debf4837df48e5bddbf411ecb848208a17bf5bb719ae5b91e4867247f126b212b46e7a44ef5bcd5579259319ce7f0b20eeba944559d42a010771ac676ad4db907c086840baab4066925a408798c1aef2a28f71b89268603c27f80d22b426af35c10cc8aa31418418bfcea36e8ce8a01f029b788f35eb54d58e69deebb51a0007a2994c0afbdc81652562022a0d1d90cd76da89855b34c070a8c846f073080af7fc14487ce9b9b5af7e1ecf4100641409b93fc126d677722740a1644579dd387e69dfa96b51600b06479daae2371eb422b0a187cadc08c3270d5045e53ab5b65bf4971b247912d214b9081dc21a9da7cda69eece5de49fde4316d40c11c03b4e8fb3d9815532aed891b7d06a1d7e8f4f3ba57997a5e4349a13093faa55d0444fb0469d92a9f54744f1eeb3802e77bec17cde20f20ebb49a55b834a8550ea9609636aeb58058b117f318854868fd9709016f72fe70a24dd0358cc632cedbac43d0797421cd5453bb4df97b2e75e3862a792abe80f655c6a66b20e43c46c0ca28e151111434fa5ec2bf99271498790b938c9bbeaccb95ade7621e1150ca05ea1f511178ad570d940570a76d5650a622fb7aadcd976447e4e58b6af443a46fca9be7863f65c652fbd19282a7414a1ac6e357e8946cdfc2e4f238e86276ac384cb0ba0d52332e1e5a5847df5257566f43e0bd20d6cf2a1fbbccdd85ac97f0ec7e05603a1256490a5f8919e92d243497885a10810304fa8add65941bbb20b04accee238608ba04dbd3a0e57aea5822ae4f00f2fa6574085f1fdc8a756e2d5b8d8229b2de22e792ccf3fdac012f574f93308446b7900a7347bd7d635cf28c40427c799d2fa5e81d77ff637141485fb6ef6a9cd80a17ab5578a57edc82cbdcc00175a9d96b6c582eccdfc7f4d78b6bd907cfbebbe246a4e594220d05b52ff242d6f9d823ba88a31e5525be22fe80506f5c41fce9c4641429e117b51335bbd347d29b16855b41637c674bcf7ae86a21c08b5b17d45f7d0a85026679651af78e8597b1955a25de421819d16b40c9bd5bc88e38d11535a03cf493c6c3bc0eae3690833de75bd54ed612ff953b766f96eb85c44d89adf83123b09bf3134a2580a32d433cc8e5aef957d866177944a0b6b0860ff24c10c08e676630ef566f3d1bd1dfd256148b15bd0c0c08a41216a4f2e787846c122dea51b107bb45bec3a778a10572ca676700ecfdaa5b8321cf998cc3e2b0505bd825566a1ac5f24b0d1ffadbacffccce70964388bc6105e9b6104633fe6508bfd8ef5cc35e16428835d89b3b6559b54bbcb2e38215972afc7a85a0bed9aafc4b3de9e0714a2611ce6b9ccd6d84f605e4ed7a6c081b0969363598a622ae672b72b5ed71e75f4d02dd2afe1db4e829b2e58fe4dc7ab84fec6c7625ced99fe9c3f2def877ef82a3515b16824202b9f42d72a48aa4387ee125ca7409ea1a16cb185839f353c196baf772b6668bec212ce714b5206c0321b2b900f8c51637238478dc0909a8c4c51f4d5d9e8b00110332ae68cfb819be0743da0465b32af32fdbfebec1d54cf8395b06502b1740e4b6ac3bc488f1e60ee359923b055e55bb95c801c3bf45dca639499eeef24de4b753c4a207a8348f8e9627d5c97546d636cc83a9e32b59215921f46f93dfab0a96e0f225e4776b371271fe03aedc2254c10ad41644431140e705ed40590166aca4e514838bd235f38b60dfcec23d9403df62d5cb6288835a932a20495646a637f65b82351b143a7bbd23729de085328036b0187043a8bb0b926b3c8391c9605d9c188910c724a3de31a9d9dcdd8d6de4a0421e4ba9ea2fdd26a387d2123941814f6f9baa2d97cbcb412ca124f19bf8622c1ce631ac77fb0faa9720ab19e368c375bb7caf535e273b6a6b39674b82ed99ef5b0714337a424f87e2fc7c23461c3cebec9924444ad2bace298daec0ccd09d3e8612c6bbccb20c0d2cb7c349a688da4a4565c4a80327b24cb1699b5a4fbd8643bfc4edb8dfab965c13879215cc1a019fe703fe48648f0ba851f2339d194601aa17479c897ca8900ea3c6af9cf1a69e702ec069b3d02e44b3d781425dfa4f5d58b6b17bd72a14edc8200a6d99835a315f9668787cae592701a9ffd86d0ab38dc859cd3b7488a91ea337e2df8bfab6ebcdcb50ac56c9b7e3eee18a3d349aff6367083ba3923bd0d7f42e4dd33f1173c010c7bb8c9741eb046ea630830f631fcb140b506985f286c33ca574df08717fe0ac5c5dc5792c38350b31f9de7ec5829f182039dde5496fcf65900420781148c759c43c630e5f9a026aa98c170f0d0ba54b256aed3662ae5dcd5f0d39bbd4dd2120e387b1a53064798823176a16d2607487b5fc48d87c7dc27819e6fb026334ce1b633186008f6a5492bec9ff285213f9003852b46d0822b7f3e0cbb3a46c08438dc204ebf436dabd1409f54cb6fe1aebe1524912ae03cdf6a20f18ac398b64a7b4af90777ba37db58466c61dbc212d7ae01fab4c197e7343e8a301273c756d257cd4f88c7e1e1374c8a8200d25cebc21b135d2f868f5fcde0609521e6dceb2b1093b061bbe64956f364ff42d12f8e0ccabbf9c5581df478f0b7e924f9936f0a4a16636ec1a61962ce4626c4810fae612d85ee84869ca554121a4acd7451a9654a0cb2438e383bd96e66e15848d68708f9a894092b858e4b99b4e2b6f26618c770e60d6699719f2e3dd9c3eac3d9207debb496bb1042a8558b9a233633fb773cd3e33cdda0b78ca30a9c7ccd0ecbfa238e4c319f0dd3795d2165ed44ccf5accbe3a2ba53a71e386868dc1993db7996bf9ca4095f87da709426f122b2d4631f994251d44e585a76a9866abe5300a1c3f5bdd5f0d7d5481a4d086dc450786a69ca8594d59a079de38723f39083bd647b6b142484e81dafe43feb78f79d2b4acca52219e99e3fa1a3ff0bd8adcee22aa378aefaaa00b6f3773dda631bfd67fd1fdfdbcf458261779cfe5b089049acea93e6682e6f5044abc2940cdc7162b60558d8bbb3fc05d3fab82aec2c611dbdb33598e8df1d4decd57b88fc9a8de4b143f72e3e4d71c90e53c573afbacefe0f02530f4940b76b578cf2c055c29b302b82ec9ec8ce174d204107212d9b72e6d5b3fc4d19e680545a5568ee83981e655591b36e14b2e579a081f6ee571cd4acfa011fd1c79bdce00b35ac116e8559c0fa7a8d6d49c4bedcdeb9adeffec1690d0b6ffb34cc8c27516e5138d8b27de8aab6127e0ccf87b09ec3d9d47b0ecabd34ce88388169a109a1b58187e6191a68bd51a30a3e4b8d5c223777964902ea4a564a98f117cc686b816561a2f31e31f6769d62c3f177b0f8659cb96f67d8b7091e7dba2dc45b2c2a61ae23dd7b3a1c75d04105311f310a02257fcff11751b6a747ca8eab9c7d579d05547413b88b45a719ce73951b51e4cea112a74dc09504714d63734e4beb98088e4f8461716e881a582f227e84f9b08d0df28291d52cff57d14ba9bee9d28f29e5f22bf40c594ecbf39f8fbabd6c2cf605f81846aa304c82d897010cf193d078a761061771c738c27a539a974b68680108ab4469e3e13cf3a9609d57b93ec144846411c20f340e1e2974fbf611f9f0b5be4c5e4e65b31933b30309f01c277bde748756db3a4b3c54e40d3ed2c7f491f9561940868c8fc632a4d02dc4a5827c52e8dda0647f6f1af4a3fcfcc63abb8416acb9b18cddda9a3a98f33fa22e3f20d96e2c321608390116b72ce9683df62861b09205b5dc5a252201d2ae7a536338d8f207f1e2c5996f6bc17c498655fd0b203a541255f105f13d4d2f75a129d67c42fa6c18f209ae79de8f95880fe296b253c535844c3929a4acd21b96d60802d49b66a448fdfea3c5be8c5bb6120796bc3a2369517a8db887533a562e8e3e57a0f8209feac0c774bee4a3e1d249531bc0fe2a32f5fc6c98c27c7fb49de8232579363c82e3cba3c6c11473e017316fa94ad4d96672bb5052916446bb837d4f6c69442c61608092ce26844badb603ba736fea089da85c12ce1c374f707a4a40afcc3a6e77f94d3927e6ee0713e86ef18b628528ddbeee7843e0a32df9474fc34bdbec8cc329ed0ebe20b9ccacc2ac75cbb796a150b167e9885f355d88b30fa6897a1d35f8c12c0eb7e930008ba0833eb5d027d840fe758196fbcd18099bb601b4aa5255a275120c5c28e8c602f69d2528b8b46d221019b14f4bc86eacf6bec5316f487b95000b16395c4277743ebbed2559c4f74c83c43c8ab95dd6aedcec6ff408c054d914f37a95dbfcacbe4e838fe5403cecca9fd3fa030cff0a70611a0948aa86c271148aa8bcd6d61a75843c67c25fa20e35ebf125bfb4afad57b17edfd06c12f55e27261496631e20e375ea678bb1cfc4df9e2e32092da73b30e8da5617a7b506f46ef72a31fce4266e1667158f6eed97d6e1437d6c07c39d1cf072f05cc9dea5fedaf5204a198b0f4623393915b2f7919484f903bc8d0fb15396c9b660e478cfbd108f3b691765a7718370c4d11b8903b8795b44f6358ec4fab47539a968f70e7b7eb97ad3dccc55517c4adbfa500c8b1c6982ca00983cf7b7fdebd2d2c305d98824c46c1ad4b24668670e46d8531185829b923302c788d935a2d75695dd98663f5600c3de6080812bcd2cb1408d61af3487668337d49d06fab5b53f2f886fdbc519e57f749ca620f86fd595b650211fe403a19137c196ddbfef208c6c0e1e7b52d212c34c237f19fb34c3d5ce5ec43ee174c1ca63786ebece25ac7d15d92e7a81f0794926a0a999da24a4dbb7a04830e05ee1470f1c661e445fca1167bfe9e3725fd4281efa49bea4e24e42c4cd72e06af0827bbbcfeb2c5ffa74cbdbe785a3c4a8d506aaef4be9e120ff732a4054bfce02e63e0c4c51d0e3f31870ca450518734d3c52d3f032646bac330675f747f79c4cd9294cf3e202ac5a1071f64e4c8e276506753bf7a4311fc2541cdf528239086bd24d2d39c0416aeae867dbc2f30fc3a6edb7b8b4dab59cadb93e61f6a41c54f63f5213adbb50d1e76a64fd702dfae7045eb760d9b3c384e345b3bf1a3911b2db8877dcc9c77e58a1182f659be6477b88c730bccbf216981e3f46624f808dc2a1a1216e0296567badc0c98714dd646a373c2e40ecf89e064d5e893d71a604a6a5cd5e56be96af55fff0d7be2e3a017b488d37e30d334bbf149fcfeb1b7657d0c8d80c194350853791284f12a2e852fda484a77c01977a59eeca749377b56fba24e8d17178f2f4f40231cbf820d176b707e3730ee5da49c8ba81358a1e822d7f61df4e39933aedbbe7d0bb568b7ccf6ee7d606430a0ff542ddb24646b41ad44d6b7d6fbe537f4266bcdc191422d0f6313b083bc751725f0b0479726b6ca69cf697558e2a89aa7fdf6b0aea15e45785631c7591677677153b1304d9bf6fc0e763c1803ecbfe648eb7319c9a8c5a260af599cab44e00f558fc76786fbc72f72a0aa1c7ca7bac86bea3bc3279a1c8f0dce6abe74549a7c5ac672e78aa0a543aae8d8ae7364fd6a9ff4beef1a8c976354e052644636fb183fd11ddaf2ccc83bdd88f4d812ff2216199a902f17000b7b4681472e726362f7466b3e68afe1ae7d1334df54aace37d72ebb56c3b77ecbcdda7aa6c07664995d58a0ce8508f5086077a2dde6b1718c1c750a769c2b7e3cfa816a4dcbff0f59699ff5b8e0c46ba817d7c55f3a9e0ca439aded6e992df113ad91430fba8b0f874578e6ced56fa986f75b8bf16ca63734d78b159dd78069706079f70a8ab25fe60c10410a4c4c8944cb5a05d7f79084aec816bb1cef85330fd5d094f09ee27f6bd7607aabfbf6d55dfec1d3e807460fdae3afaf55de83b6c4f2f23fcd37f03665854b3a42ab9b75828c0dc495de60a80d47b1819b076bac5e571ddb5e236e1254cc1d8a90c2d687c05c46c5089a1d51efeecbd81257ec1d457496606136edbd61d3a2010d2127db4b09b6216aaf1b430aa50ea7173b7d7387d8fc6a5f0279f97a4f7963cebfcb9605f4aabb01d76904a0e30b4cad53a13ee5b1b447a1f16e37b420b1ad1de40841ed4c7f67ac326389cda58f246dc302b39c3a20ec7324989f9a1a532db65e2963bb63a04c1085b3eca3111eec4c4671f224842e57e4bea9ba80c14f1424bcc41bb264834cbf6035cf2c10d077a8d152a446def159c1034d9e196d25b173b65642a8fdac7ded34fc5e38e4c488816684d19e2afef7b4e29d1302a3e18eaf55ec0121babaacdb9c0f804fb5f81b8a7b5a0da096076974c35134214a1e1e0ba6601c248f17b5dfdc6308d6d4c01237c2d3d80cb33969d7ae7ef90e88701bdcc85bf7f172e7ef942af309fd51becc6140daafb035b01de6089937481939189a2f094e893ac01316fc411bcc3f7a462b41301e3dce9b8f799d825eb0d6122de6ac1486ad749c19e00b7c28a69b1b25192ceeb50a5872417df3eec81a00423c27364b8110ca2ecbdce1d7b0dcfa6a2ea360d5c119093353ada5584468d851f222b23f457e75f7cb72e201aca27d4cac1dfdeecc8e047c7d6326cbcd14cd27111981fe8ba9741003aabf0f83408ef397e2ab0afab37fa032c4df9fcf24e8a49c68310f8644c76317c17602cd29de8ecac26011733a7d371848b8aa9e6767e93e07dc7a37601157e03aff0766f2ac31baf9206e4d847aa88f3941831250b6b29f39155bf67036ef189d3c54e0365f860b215a2a616c60af745fc8a6af552ff53be570880e137ea963ccde18751ebf50820a5ce73bc75687c7dbba2c8491053493fc06d67ff345390e5443c7707882e0fda1594f3af56706cf5430f1489a3c22fae76dc5339a5b3a8c3d16e4c8087f6b61b9d7760866aa456d9c0587f51297edd61fa3a3557054bdfac53593d71d152b8ade6904228432d36c7a13e1c753eaab8fadc2bf9d036527d5cc6bd767bc08dc3dc727505828ee6c9eeec2000a3eb312a54509f90d089e4ed463d69815facec64d8bd35ce54d03bb85f536d3601c7fc661fd747752a447d80b496e363b13dcf35d356d7735b84ad36adfd99ac747f5dc222db3d7ae62dad353c3328338e02464e601f311d49a70c90b86b4a5ffead1b8ba8e8c19a6458bfbf1c219174556a82b81c0af88672c49b37f7d866ecc1c73c1e78ca03387e70c11c0fb53a0bd0204d256b6eb1ac322555cf1092e83cf652489d6a48055c2f1bb6d83a149a8f002dbdca1978a2bf85414dbb795886fce6ef7959e16c471e9805c2b9be4371161a0bfae16fc7878f86dacf88279a31576bd7e098fcab9e9c6266a683e9a2aff6ee62a6aca5d892cba1bda00023f673c824a1f140e8fd6b903d4563b2a507c33ac8fa4cfac4ad3c4b7d29da2ece0bc5d6741dbb30e011769cc948318f249fc11cb0729a953dba378b0026ad0e486c19d05e9bf8459e0fdac3c61a32d69a10bfc1f7440c68e5a25b361295fd1be0c05adf872c41a353d4ab7f18825d2d3b3bb0c962672e1c08fb69a592ecf604219de5c2ad281be386ff967a14b2b5f6921ab8587dcf9b929b86a76f7840a151c77dfca5135d2ca3a22e3c03c45a7a9e0de290886958bb61d59bcc0d3311b60d95c139102f5bc80ac0633ec2548de4ce31b45bf8665685fa9da5c502d1bf38d71185b722e2d920332af57399ef637396054e5017a3ee90b094cf1612b8adddc8f4b56a328a3122ecbab6c6b45a5d838afdf05cb820b0866d20cf9c2498634707185192b0bf359bb8c9dd83faf3e0eca97e5340bd0814a35532181ccdb367d20b2fae3c6def87943d8d9f107fbbc921823b5d70e216cc9359e1045b7e0e14bb99c856e4275940b4651036a1ab8952afe4cd3aeaebb05d70425ff9017669c4a87bd5171b1163bb8a0c05fc9f00a9ed6ecea3bcc58786afc4f38502097ccdd638193631003f0201096ae31951671de7d0e122cca86416365bf6fd064c8eb3f19aa4eb766019f005827d0a8dacc801119dd607448363a00188e0bd15a33fa996d33bce7f7b19eba708f6da1d37801e81705c5d6b3d54be5cc65414516927d5bd20ff8d8932ac9628c7c51727161ff53691b991df21c839d539ef51987a543c595c6aaa06eeff7a3660eb95d58a5872b4c6281295fc7dc4e28cb2d4c1c5b19aecbe7bfc71c7bb12d233a627ac7db1c02dffa29e95f15730137838ccc1acf62f1f0ff53a9f2ebbb852f3a8893ee89601b5a0362193079239bb372771fc1bbe153d79ab4c5d9136010cb45d454eeb7b5f0c39a473f87357cba58a118a61c7752d745aac0e54b43edc953e3563352cee19dc07841346441277eba7460b4ef6ae7816fb43c1eb5ac7d36ec152c771bcf3e08665193434b1673d5dd7f0e5ed645d15564bdc7acca61a7b01c25513f535295d0f3b58ba9589849920f12f91b8dfd21aa73592b88cbf260df7577c15a7e7a636133e3b7a241d5f1b6a038d985503f2ce4a84bfb3866f2c954306bdfa05dec069b0705fb0087551d298225354fcee1d6a63ccda5dfbb124ed7750242d3fdfa815b781721eab9c9cde488ac8ece059daaecd9eb285558f708f3946a5e24ff4f922f4c2abf3ae07601e9fedb8654b7a39b9e9d7eaef3bd7a5227bd5b492c83d346bbe0eb2208ee916f320d612f88a4cb762f12e1fcd1964c70cab581e3a319524b60d547337dd512b431f577f90b1998a3f14633d07ac4bad329a5d74fb71d4edbb6fba7db1417cfa26adefc732eb54955ea5ed5c421e2aadec46c8f34cb7676875f191bfecd0ff8cf990750acd99cde6b04016b4e35542f15b4a5ce205aa35ae0e0317ee1c53e5e4a74e7c6f745d042ece7a3e1e0905892d61cd698e82187972a8009f4fca4eb0e3fd0ed039b9bcffa992deba0f01a24476736235716f40e9ad670ebba56cfd0ee250892eeb90e0ef4d6b4c79b189f25617c912b9aa851ed7d08598b0180190d47f024096a9b00c7f7efbde19ca8ced9c24d7bf30e3602c3bce9ebd99263c8aae489368edd9e529a8a784c882f51ba75ee9f4886457c911e757c3c2f6ecf4722538656879d10a4e568b768514137071f01c2a10b9669570e765e4b037ef39aa3f2a0daf58904e30af612887b126224254fd2ad6992a88447b761283f2167967190d9b84750345896fd2441633a6f8d1c1f01d391f0a49970b544faa2cb52813ecfb92cd392a6fcc112fe65864039ba83197addd06bd7beb02dc62e612fd80840ba4a1a6fd20562e8bab32a3a1a2a358ebe73b1785a94cc60c04ed7f6a71b4731106ec43d20ba712858c2ae47bc65f82ff0130467bdb6a6682084b92a7130600c65052e19c2c6803635cf8e6be702b93aeb3911ba53a51c47461c0a3245ecb3c11d5b43bf19049305ed085712ebac5034dbf2187f0e59caf45b5b9c10bb36a19c432bfdee85eb9c66584b5f70889fd926260f348819f0263062c42693b046a61152f16c049b61d9f3601af8066dafefb6656924bcb9ffa6dbe33c33834f127edc9d1c5c53e90ccef903dbed6a173193ccb0e2e712102628e8d817ad3c17297090e5777122455e2c8f9a423211a36fe485170992b17fa892a34b86ef56bf2a595af8deecc8b6ce91e22a547c43922774e52fe23a0a96553182bc7c43619361f5f692760b6d1e0a0caf6e5db3456c08b32565e0f70ffc91918a6dcba81641773856aad9bdce9516d198f79874cbbf051613255c1aef0ac4c2b64dc549f3203d98d2df47289209bdc2666b2c6f449a6a1815a2fc1b622b80a8be6d12ede0984eff6d6cbb83b885632b76967eae701d9ca61a4c9b92e17c1e04945434ec04630d62c2fb7a05127b536803a64ace2feaacbb2d325865f164ed01f98f3735db723e63706a4514f12309e4de2127dd47780ec5910091a6791a8e3ee5b36ce3692351a55aa0cc6ddf4092a7ffc96def873bd5eaff9fd5fd67754d39bffb6c66c9367916904ad61018fc6991701a04e8517bc5166121902029a189623b0168f4294849a6416e343f32b0994cd54c3b3ee527de01c076f7542a559f6a6c3e1a94cc27e8da09bb3839fe671b69fc4382bdc61d74f8f35014b29e1518076f791cea8c6c88e7a905f472045db36116e0bf966868bb9fca17080dab26709d0707ba0547e73c63d300f96f31e279b028e45776eca39ae36e634867a5eaed7aa5cbcb61860f4022199c1535384c00a505f9b552c1efc93b1a85be29fe2132ef0e9c05b03a440ae81eedb45bac16a334c4c2ef5f9a0f5c2bc9d3d79ce2594513978f03e18fa7b90f8c9c9df8864a177eeca2d30b7d72f09fb9b7de38fba9a808d33f9fac3db3cd81e1f58d1fddaa9d1f2cf3b0a1f3eb39caa114a646e538d09ce32bfacf0957a36ea2dc514c1f9d0560146046f95ad0aa2867b62c1d947e246b9c43b12f50b9d97d83c13fbb94f15c45b3394e8da78811836c0b98df0ae2246af729aff1ed195d40c0214e0f3e19ce37c944c77348d4174b243f98d88c5c12d0cdcf7e6aeb0440f3683ce558cf51271c1c995b14de79d07ab9c3572d73afb6aa76ef95228d61c32b31a74d37b9930b97b57846b7c5ef8fff7665bbd89e33c048e1bb5582857b7c2210f2987a78f65585d0cd2ae8d22a750d4a8dd070dfedd35edb723faed8bef42aa8d28d9396a988508d38636f147a04bc3a486028351d88109738d9aa5153d29b522fd19c6ba6aa9e93c5141349855763e566d65f8e86b18e4dfb09bc69cb14ed17a60092f4ed034f0fe7f97eaf3efc7e6f1f2ae186ef5eb96443db7840cfd2b8de9a68df961508d077503e0a7b46fe9ddcc5b3a22a13bb46d4724b2eb9d4ecefa9acb5fc06554fc9fcb3ae81981fd8f9e000a06b59fae31d77dc3d0e18b483845ae6e10838afb61b2dd21b2b392b323cc448556cebacc1570b9a7060842fbf381d99eeb20c8d3e4c540a40d7b055f0606fad6d411d3c55caa35ac7c75a741ea39df511667153a1a72455d81dbfbe8d795a2adb7a3429bb5fd137afc23ea96135ef608d3f15a4a7a3e6d98275e4b409233b74443f4ff56eee4ad04a0d9b30d23632f0993e7da8daf4855ba14f017341f0791e1a186c98496f79bbe7fd4ade35798c53c8c85785a661ab18ea1025765b1a717c53886fab40c7e6d777cceb53aad0121edda2730c50e4b45a861f6ff74e7409f7dec6c996a57ea975b24b27231a8871a64d4c11a038e4ca7cd6f0b6c2a5211a4b10e515929022403a68bdd1b492e298bdc8ae67aca2ec007d397b736f1442e61a7f6e67728e12fda6295c2c075876d71a054fdc0f163f0723d669f34922978d2604d68a2f998ff088192c66323a47c232cd1d9e04859a9d69ff07d6464d46221ec358b543f625c192088aa54d7c61208072e526f0b1acc7ecaa4b489af3b84d086997e9dd57223bae66ee98aedf0c1eb721230a2f0355264abb11cca2494840f3ca12a6f2fbb40e738739bf7443d6ca0691bc5fd4931ef3f1d005e19fb730cb28736d7b9206313caac54632f5149b34e26011ae64e7d7f2ff7a7dc30c13106080d09d9f77263009f27fac0ec2736215eb3175979c597536cc2cebaa6317d4c2d2fdbabaa82078f43ba9f20a759be72c38629a707697bb19b225b190831fa7a7391d458eec83d23566968ecd2136aa25e32be54263d144a4c26284bad7388506b6344bc0310fa2533c0a6c97a9c2dfd78ccb47e5e45825a183ca7da80fc71cc031e2567be35c6789493a83faad157df7fa92d7338ffe7fb168c67d290c8fbf12b75ea0ffaea24aa2a77a8dbeb63246db46e8fa15a05585c48cc5e9b3b8bc392300e7dbd57d36ee61bb47ac57102af1411c649bbec12646ed31233c57693397c75028e425aa4a721d86957201e0f4b171dde8d80d06c4e9b825a3524f35f09775dc9dd7c155a2e13ed68330abb7b1544072eaae949b15630d66d69bcd685afd9cb54c9d42deb60f286ea588228d740da80363b4144aa6d209b33ecd3f0d3638e95935ddecdd598a88a5ddacb31fd2795d86b54e6641717a4caf12ee3052da4e841aa0e1fd076a014d2786b2081b09542a467b22a84247606aeb85b2c5501ced04ce2cb7e60c735d2c96306c0a16dea9f6bf74d953c2782db80e765fd5c7b4181e22161de518ea28dbb8bc9ce31e8c942876dc78090a44c01ae5a6eaaffd5b973b092f3d7af5d38661a726aba89f7fbb03dba64224e0fb5b2c9e28921719b953e55f6fd6e3db6bda4168d1bdfb84d760dee4b326fef33ddda89d9b326de9dd5b0d34f21dc89725cead4533d170fcf5f67130ddf38de37aa1fd9741f8eeeb7bdfddea35eb52b6d901dfae4d533ccd6ab9827e2c3fa420ef507bcf2d6428e2d5e94f803bfa21e49938c8d2b3980cbc43f11027814c812664f8a546622cfeab855c69c20db756d554654f46ba620f916e3a53d552427f69a1b5f202274c2a25525ee5ceeccc4bff626480237917a316875f73401d59d4691ba0e9d5096029ac1204f6b794e6add8e8f9f957646b58c1ffb8cd012559608e521ce93e8d62bf22250b55505945461cef531d775616d11d6a708e0f49a15e396d5c4f0c10b7d16cdb55fb515744ff4dce3dce1e0bd41b839cd0a1e048dd41222b1e09497f63244102e3fd414d0858810bb081a2835d368cae0eeff05f5d823dd97fc44274088b4f32d40cfb3951a6091c3448dd9f68390db5d51e6f7fbe92b0de90fe38b1dac544c91a729258aa29f026ec444de813c9e9fa6abe7115086a027048263df04c948e99ec3bdb6ed04ff64c30f9e1e6849cd108a1bf93e70e429ac82b50ff354146eb937f560253c997965a16bb04513eeccc41a61d5268a2fc63ac2629b6e0a541f260aea918cc504c443045f96d0e31bc126a6f89046615fff47682a7f41d19b4c300ed37d37fc8d9ccbd47c6ad4b8eb6907496932552b910a74c959c0f9d7c1e8cc85c43cfc75b710bd54cad6f4ba618070d3527c5a1b56dacd19af2e66d651c5cf3d0213517091b9eb215cbeadc321dad48ad5c1a20aecbe7cd1ef2c5bf0c773a154d0a1224907842c6ac2eeda2f24ca84fccbd7c003145d957382b6c26ea4b5c08d4cc48e1d4fd1ece3009b181b0e8643601415999ccfaaec12a6d7128ddce2e5cd22ce83b93b90a300a9fec1987f3a12d8d26846b07a2c740d71a2d2c14a8faba0b839b0027a19f41f8195586e8700e821224053783d2512434e06fb8bdbfac33820d3361fc97596bb0ea4da6c17babadc8946cf5f03ddb6247a5d3984e26ad738cf354de72d3baa2e20a07cddb12fb624fea7cda1b842f1d9863d4de719e18c1f33f6cb471c6da715d38c17ba8dc723b753048457b72c07dba8b5580290e812da4ba472038c29d7e154297a4d278ceca9235861e63b13082fe09be42c628c9446f679502b0b0e0c26db6601ca1fa77fe0fec85fdb056b80556e426f63d913c40af916e8c6a5848e51715caa4e8ebac219c131dbace9646081509cf783247e965e6a68b26104c56e5b65fc5c6e7024c82beb798d5e2457f08bab40f7018d0018df2a0982ac1683fcfa93e9d28bf17f60df687fb66e0c0bfc63bd622bc8202bb4c49dcda7ac130a25f5e0968e0242b781a5108785292f027af85f59d8775739133b79bdd8534afe78845ffd3a9e97735e687d8a1c51b78ab9d15fdfae1edd3eabdec5aae40ddb3ce518a01a98cd8aea632c131bba44f3965696d5e672df53b0554ab522e2b86a1cc9406dd841664ca2ba6176b9ec31de0330bda0148d4467032811fa4f1a05dcf2ff4e2ca382a22b2e7c62ba9cc58ec9a5991fb39ace9b0d783edadef1f77f0e2828717a8041f669d94d9f85e433b14b18cbce28029c254eb5477b8dd0da9df2f837d12ee43601122f3dc3579a1f3cf59e4acc553629c60ae22c89e6b67ba4734441f905d075deab596dbf43a6f7f758e54c710fe555ceaee152d40aab10cd9883b94b378aecba1edfe6ff3c9e332efda47139eb52eae424544272761565aea8f8ade72fccb62228bad6547044f75fe9eef1801a466050a059c1e54d315311d28ac409da063331c037a0e3dda7cd8bf7537564b5223f8ee312803053724ba625e5b19b46d0c3e8a808b2eca32d7c2451ceeac0b9711368fa399e1e1ff66916983818e621889ef42f7f7dce5b995943a1cd6ef87a77d5b5a3cf53cd7b14d9874af401ef649788911d7335f5347e328f8bb513db36bb0d2dbd1fab25da34ccc8ab3be6ee3ef015a214eccb503553c6a4ad9c679e873002cf87ab45f6d3d2f9e7cb3796a8d302ae6d7453183b914dadd0bae550f692c5f7c0e3ade7b012433647388755c935f5eab318303dffcec18a7b5abd029c55652be0a843e9ff4508edcb65fd907786c639596b9d1e5b34f9ff8affc85ce9f00c2bec62fc992eb5c22aa0d5783ab1c4a557609de43629f5d03382161a5cfc9c915accb6a065ca8792fdfa5e8684acfed883a7dcdb8387a56fc6f1f120224252660f4f4914c9de2648697484ac4b7f300620cdd2533489940870779221601461769bc355eeb68cebdc1648359edea853171535aa5934a84d00d0158585a0fa3bcce9862a7715eb5c1d0a209fb4bc5cbe2a97e203a15d6fbb32c73ddb77e0c29d116235bc543b86e5e251165534b70756b7417bb39959d39decc0a31d7477ad0ff60d0a903017b7c08ed53181c66d0dfbd3080ab82d68b3fb2ed4b8c294cabbb889b8c38d4385334ccae3ba7896cbc9ea73fc4cbf89be251eec396b38594616e431bfc768d77b8f56acf2a502999980169c6542b1a811cf31415f99000615a3bdefae5846ad7da71ff07721a44da42d18e15197dea625fedd74121b6c25c0989c74b9d122a01d79aabe35e90389983a1fc2123534b7b53660e5719362799d701bb539b2941df1f86fcbe0c8b7ebc1911b28e0bb32911caf997af626197913b58dc0b01754c6158ff2f699fc24f25be5319956daf92e6404575158cd34edc2b650d800e9a3c1022a9186ca8940e3e13b569403ca3d2e774d1a82cca1719c49131ea0302a9e53590b67476a73550daf24cfac36bf26949308fbbef65edf6e92183d225a4e013cf195488ff0b9f51972b5ded4c41ba2808f8c7e3790e2d81051988957782ca5d93b7a353d6585332270bfb162eb5f8b6ea192b975e8ac8d26a9d16fe824537d219bf3a623433aea7f18837451a86fe76ddeefd372539f01c42fd28ee736cd83ca91db1ff1ecc04c7f8ffecff7ea9de29b8ac87b4e49db0f01de65c47374ff3927fa3767829f431b3dfdecd020f4e9858a9d82d692d7b583bf94cd034102f8c6a522da603f5890a2f359fc96d73ce774e815bf4feb2b98b04103ef9a8225edeb9b04def6eb820042113ae0f3a2d310e00d23ceaf9d52e0316fc9b2bfa5610c6f82d99bd72c928aa3f251849886bb16ebe3024615c8c3295262c8ec3c68dedb19ae5f27f37faac071299090aa528d6b3c4f06b6d8bc7bd72699c8ba3e23f4617793df64656cfd0db0004460f9612450d0f17150ccebe32472ab1c95c430226ea9885a4d59825892647c1325332c23547e13cb885195eeb753d1ab08a12864acb184d8f6961a84b732f701f83550529ca101a865da33f70438c7679d4a563f1f12caec1fd76dc5ed6f737fd77ec7f1a20b445a2d982ef40401062705d11886ca108abb31aa9b934fea49b6a7e4c7689e455a7f086e1f53c34acb9844fe6676ffa48553baed96ac20f00a9c3ac98df4016635563be27f06b722ad402a6c66f13e9be63573a3c37fef33b3a19bf4dee6c7042aacc63849b84b67ae2140c8526c35d6bf1663f0c7caa6bc0ce03a2a22d6e5107e53d6c0660cf5974359212214cf1e4345029f7a706a9cc3ebaf06b872f8c9e278108d9e32c6a7490adc1bb5f28e4a9a64522687af87604e3d0afd926acc3920d2028f5ebc2242847ecf8d700da0beaf1e897df2bced9508497120c7826ba5d9710adb7620323593cd835499e4282c59aea3d157b93310619aa1725719482d34fbbfdb01537321899875ef64aefcd1b6e10e15a240debd94a3c469567f3dafd3ca9bab2ee4782200b6086c2c78bec42c82bd593daabf754e7381b0729e371ca816fd37e15d32e58072b7b1b563f1631a14a6e60410a252959dde2ab3194670b107677d181ac3d7dcf32d28a9059e81de28b1613f4295a46fe58199b8b43a55ff730fd26263603446cf71deef5d56cded4660fe99aa395a3e432e1eeec06a9acd2f945d157f8a9b259739a359a60106d4d5e1d84668a4b710b8903388e0c2ca28ca096556478cf109200fb5cf08cd649fe3e8bfefc3b6e071f051968321433ea644cd7d670e6353032251e2192dbbad988a8be58e66d3f673b3c29a2989b0b484ab04ec14ba998e121e926bec5163503cdc685235b3be31071974f30a1ca75f8f90ebda212bbcda2c4e29d8662da4daa4ac8c7b593f19d806f9c5e3cb0e88abe3dabb79d94c7867a20b0d44c349be575b0aa0333658fcf3b948940771a6c4bc6417639dadb043e880283804d965290db82de44422faa2e2495ca47d6d7359a8ff19e3816914020b44cd6cf2c1271901bca652fbdd72c545dbe2845272e3cfdb16b517d33fd22f6fb1c0f6a13e184ac306a1de9167c662340915792feb66d1ef4af122d973fab568f68fa36e561a814b442bc334f0e80e0e9c70a9cb13687e2590cdf6fa26628d40c2543ceb0c2049bb1d2a8d42cc17e762ce09696a9749ef004ac9419be37e3fb597f337e0132c2a8180a9141931d2ad38effd7abf53ed97b2313a6e3c3a2ae9b4c16fb38260717c91887274c0278a6e530bb1a6fc20f3051371a5b6e897467b5bb46573c3422388616cf5286b7946c0d99c2fedb1a45c1dcd37b3c65ea8c7d5527ab228d61cf7cd7e4ad27c5beb4701fd1aa236e534c27eeeeae1743bbed249fea35127e55e5d1ac0b2d8b058032b89a151bdbda3f3f3f05d94b1b787ced42fdaaf9c34b3784f4d1be4444b654b54bf95c8dd58a51459c8728eb40b5c7b50fe20825cd5fe3510f76d4600671a0767acae693315b96cbf3d518223ef3bd9fea50004c42296953503dfc1bcc3880f2394641e54a334b480f53bb570ff7e8d7128d24dcb15a7d89a5f58692358128a0545ca151e8de74d3956a212602b1be4c3310463308a7dbd6cf1f945bbf5d072313ef92d94e2ad1114526fd4e01711ddf2d85949851056f1a860f20563f24ce31b2dc13c3d2c85db652e212b1da655444da53c2bd9cd2ff3faa99b83a8cd024c5e96ebf3070acae73e576d61b075fdcad68f1d267aebbfbe28baeeb89fae7dea4c68003b36ec689d4f821f9a27215163fcbd3eb9de77d8382b83f0851ed9165c1512090dc7223f19713c0bf159be94e3ed80f7c2d68095ca186ee13f8892b49b5acbbd98e802aca151b19c2839822909dce96992a4b2221a4e42d87c3a33600a6b891752d69ad57f3eb85d2242d7b34274d376ebe169d6a4f0e4e3cf4560abc02858a4fb1814b0251418213bdbbec032064d3606882fe2e1ae379a6ce2f6689c93b0be530d0311dcbd6a61db72cad4843eabc8318f2cb9b193889fb364f74a5418798b3f19baef20eab7be0b33e359b69198fc953043ec7c65ba417803b14b07dc0839f2e9276e03f29e7481373181b1a0533c60f7c7d8cedacf471f4994c8882326d214b25ce1ef5c4cba8aa1faa26626d2b2b6954fea67b35baf9a6d68cbda8e4a03162fcef4e26b8ae31b01d027d55d5ef7df6b2faea8de39fdf7202dce5a831bb9a085e512b235841b19e7d003cc4f2f6b623cdf6b6b90d775498e85d0a472eff3caecf7ece8e7694501ba525fb6ace96994355770818fe2360b60712d48da8d8e4e3ccd47e0717ac22bcbf97eec2830ea7f3cc877875d4b8e3285b501bfb992e541c6db83b679aded1a1e1b81a0c6253f6c5a9dbd004ae5a43b92c2b1ba6f671a8f09ee14c69d8ec6118daa6697cf49e7e013662455cd20097316cd31d0a5f44e68f5ae63399329eadfc2df3ee8c66193aa07b172926f75347d5bd16e51219152644ca5c226d1339abac2e8ef3f6697220c0e3a321587907b154bb84560342a0e34c3e3e185a67dbe031038cded8f4d916217811df200d734aeb1c986f7f55b40bdf8083e23804b0e73d4eecd1470ecf5d04eee60e9e056e667cf3822c48f3fda232e20adbbdbb0d05c21985ddd05f98dbf64525643591164f03b231c1f0b7ffa1566d7c772094d6f8df77a0a1a11e86bb2ebd2824ad1af4fa3e7daf678b1603745393b4d67230aeb25d2336eb719d39a9e23de310481aef2b62eec66f9c5d9bfcc562d943142efb57d6e525145165a51d2f4bd21040edf38134de72440678ea39ee618b6de0807940ecded2f1bd8f9ea87d53c075bd181f9244ae9ff8cfdb8b97dcb5b708e4bc42ce8d2f82f46e0a8f135bab42d4e4c224c757e6bf7b2c30a0c6e9d66fa663dc7d6fa6b77c3b3ea3016ad88ea0b4a035a47fe81a6b0cca58619d63f06d13bceb1dc4ccbfb35ce9dbabb8f539d419ca782a2c3fa8b2a4649408acc6b30ac7fb9bb1ab706b402354861e0f09f229861cb6ad29ed3199edd6d607e05f6e0f6facc7a74152d22809bdc69b75ef204d1528e074ffcb7f31f7a2e8c400fb77d75d07ba7555e959bc346a096024480e4e9094beeba43d3a0e67343b2b181b463864b22f567dd0000a1cdc6f847b77cc808e1f3642d148315bb7d04b94b63a0d9b70e36f6c1e12d5d566afd4870b441ad68104809419cc87fff56fc2ee3773a8fc4d1ceb7eebaecb212db605b50024c70d5c6b57d787fb133edc18f8bd8aa8a1c6ada915bfa8e4ed849255d65ba7ee6455c6c6e3207a6c2acab52b09c13a9e25340a8324ec4e2b396245064d0ed2d693f1e3a47d2754940f032e3838e08d7c31db9fbd3cc9ed2ae9a917669e3f0b1d7e9036fd171487f75ca645db124aa083e093d94c76966c098082d3c9044b0b820d3a1f785cf0b0c1f5aa31167f340c7605716fa215c9a646057666501d9b48594a18e6fabc6457352c5d07ac7ded929e7c595c2e2f73cc63cf5591a6b3a28d05ee21d76ceb6f5cfdcb29a8d343813b97daa6f4ddc2f8511f1a84127fd8489ab1948925336371e45f62b2f1aad2d4564c849686e08a637e87d43234799572330a94611906e14cae3e11913e05772e446d01ff513071bb06d7598fc4270c939ce911599850b20223ea98cfc5bd2d30fcd948e7de20795d1eecdafecdb12a2d2df6aedd7af6d4642beb88f859083e3a6414fef15cb7d925ee0daec353e36d89bb8ed3a29559e5b8de20ef070a822a4084e7c5fa44f3376f8c1545593bf2b2da2e399f7230bf7414da5c3b3d614986cdfe302d94be591c2950b00307e0872e392abfaac05085536d02979efbac92e20e5975898f7090d143d5a6f1210b5c83fbaa12e5a2fe9f0f62949dee9d5d2dbb0ca3b672dfe7f887ad0c1649cbdd28479e1940a073bab1fa2d06476387ea8ccbdd28d4589b86c9782a0923853dd4c54c8c7a95612eac6cd7257a1eba27e2650224d761a08fd5eceb338faa01af5f00d9f3dc9132abcb4c11675cce917464b5f7571a0496795a65e219d20e1024236221d6bb209a9afc9f5785819a5c53baaa14d565807fb0143d34151a735f746aa3460e882ec76ad4318c9c04f93088007187fd25d6d70b096e823ea95bde2c7821cc36fd608b16ed34c6dfb97ad17cf290313c79f3e476f7059679a21c276b5672ba92dfb35b4fa92fc8183d93fb0eedd067320de9b0e6850dd537a4b5ed03680b8e04c11352d814668dbb0ba8faa92d0d8f88a28f670036a3509c331d334f705766afb51731700728aa841795a36bcabb967b161666665270d6787b21abb5af8df09d6a232660bbc64a66c0a3fcf7683a8454c24da9ca93f02bc63a17ccdd6870f218db64600b4f7c1133f318dbf770c2ebfdccaab573fc262bffc32161466058cd431d453cab2800dbb1b8cc09954192d23ced653e513f57193c1757874768d83e80aec179b3d94ebd2ea25f46309f8d019311d565c2bf0c87c80e5d8db1bea9c9defbc79792c651a6917c8f9e83c018187256c4e7e0c5b47def6a102204d4777ee046198b34b2fa1ae830704626469442ae119d7ea6c683732676c40ed7629fd7236396aad6b6ef7c8c3a3f5042f487a7b55000736140c998dc05faf995135447ced80a170002bdf23b51c022ff31c6ee8eb4d7e5609fa0680983e6f5a9514496ffdca0cbff51a36fc12b87ba5e9a9b4935e329fcc6394181f72814a82ea85575343e2688d9675c7d104ab275cc571f4702494e3133d3518493027944f619a5410ed5f3d13f82848623c210bfa9f275a4b520d9ecaf8200fe52c734193ff83e63715f40e69874ac12f019b2753a354038e13826a4d017eda69607e2e2c56271b153d353029065bbc37004231620abb4ccc6af86f21b96c47d85b91661ff797dbb8e5159cc68cfce8986b10074501996aaf15dd46403019f26ff669f64ae6ef25c070db661f58932a1f970264a500a9656c5738d25689e791f5169c7aaf5f361f4ee8f7a5d19a46385287ffbb6bcf7da2785250e3f757f76f05baa5059caf8b846834b2b13572a0b18da44cad4df1fea57f5505e1d70e9bbc281460389aba2ce3a24aa2f7704bb69584f41d2d43a61e2ad608a90aa2a3ffaefd83a11009b6fd2a056639847743bba099e5fab4b8c5cb1b6a1771ce02e403ac862589416dec9c8e20166312f157f6b535a56a074ed98664652ba0bfb54bc9f853e0e6e2dc6fa245607e3e14f07432e066088209cef3ee521fa64648c48a757e966cb244ac464eb494bebe768d73947dc11cfea749b98f6c74ab7c003b81d870ecee0c7a80737a0bfebcce5112dd33d0ec01cd270f8dd3a70757ae1019559c6efc6cf66bb9ae17b3f87d21cff4aa5e3277a0d82e2b15524c52bbff5a12c9cfca08169e72cd4a60e89b09ba9cfd5b7aeb681115088bd7ca36f9a4ca1e969ad51a0f1c47bd9cfdb0e32067fdfc5c4e3cdbc4187b5b1312a426236e48dd07b0a2198bb7ada73eadb320219d26a4ca928465b21030b8aac53197731a4b84410e3f24d4c94b3c5f952fe7f41da9fb2b1e9eb5a0c5773fb3251f8f25db6a49ce90e920619a7280c625f70eec5fb84051b453170dba074c0084e11d187ce463565ef24fad5c94def47b86c1c900b6d650e3fac75366ffeade484dbad14b0e3ecf47e5fed0efddde712f9891c9f5af55816386d87e22b461d0cc2b69e076611f102904bd1aaa3fa2392e59a0a58e2015385d4af38f9cc879f2eb13257f2bbfc32ecb3bd461cea69f5472cf3d2a3c7a7f31c1da0b18777451955ac60d6ab7b1968be8f687739b03069e4c633553ec143bc797afdddbb3790c6af53f235651bdf0e7fe1a1e69d26114234d2ad1fc52dd974386fb78f6b921a6295169b42d7f981d29a726aff79430be5cf2ad3ccc8a6bdba48249bf2feefef0f2badebf3b597ccabf92c4e569698938a9eb1aa1d709f75406e09e5cf2bb9e2d9595525c445847d07b95ff2d2a7ac1a765e2a1138798c25e14f65e7bfa6478d1068aee380772acd24577f7371c8df8f13326f33b5b3b16f009d56230b9b9bc67fdde59cd57d0efb4e6196e3b303c41f10f9b6f9d7d5c8ad2cc6610c7961535cbcd05d63d8667e5371a66778e0fedd8a3ef83e3bdfee4e4f3c51d11203c3a12d8f3d336264fd4c7f8d64e6e2d89400716a573cde9d4a6c11b8547a5c154bb13a048193cb0ffd08ce3e0e7acd1eb78029ce897ba387d3c2a1f423f93bd3564eed8c904870d84e37c171a5629ca5b937d91597f93a8309f23d0f5da2594a30145257d49be715406df81f5c3aeeb597ef294cd2ad0ec4576c5dc4f37e3df0527176f936cd1cfb511936977fb010447d845a865c5ed4ae0b19bcc0f30649d6ede8985f4badf5e89d4f9a96c7fb027200a422f9df2b90b7115b62443c806f1b8f3aad3176de6657a5bb9616f22f1a0e47073497ca4bdbcb245a603ed7c2231ecef7f113959d7506f90a42a0e1773d50643d4454ad20445781856051b5dfe599f76eb7fdb46b0882598c3497c5aeeff6d6fb1c145a8f1c97c44c3e81e2f144034182b11532dc43096bc2560e688813dbc39e20841068bd8947d21da0dfc41570a537ee593ca84c1411604e45d1bf4fe1201c5ae0b978dfd49c0e29ae675995175ce7dedfd12c67f77d2e8dbaec8d7cbe8e3e32e793ba954cbc566b5298762e6e44cd1a02a1df38fd8435549c9a76ea17d2e28d6553af92bfc4949b6cb8c36f7314172329eea39ce97c48708a171f657bee3a4fceced058250727a504333c822f28d26a0e197e9a0cfe0324237d15fa1c46e8cbe27d48b57ecc4e1ced8acb53ace16c360ecd5f43d144942f0e382b8bb42d7183334e6d7a43417e30ab85847807969f393bab0e7bb03eff49cf3b061f4a2e4bc5f973bdc9d3e386822e5b0ddc7d568641107fac75927b0e9580d197966c2dccd60f2c59ec072ae279d0220bd9b8184487a894a5ab212a5d011c13014e099049d6c745a00c25c57f2c6c5fdcd02024b141eec26a24f4119e084a7a316ae0a6eb8bc7d088ccfeafc1795a7fc215e18ee5a4060f5e655abbb2b92a45bb8d800c27dd331007182c418058278616a6f70e7c90c5b56a6db96f0d886a15908cedc91bd0dbb86ceea9837c1e6bd63314ee341e081af1a07e3d7c545c2d792ad18bfe1ab1964b3659f70daa718ae13a665f540c98807699b19dd70efe1a911a64ec246aca1e9f52a2d4168d512be8789e4549aa8df644c795dbb295f0aec413b902fd91d91617f4e3a28e1fd927d2cd5fef7e110f6d5f3333e6f49614aaa22f9db53953fe23b978a6603daada609c345fbd022003ad6672d55fe1a5e867122e4e69986eb2d0fbbf45070c31a76f530e53db2eff59bbec1a531d6b1e1656759a734440233dabf79097ba3c60b8f4a1b2f76d7765f1f20aab9bfe28c025af0293f0739fa2d1828cb507a03f40066e611c374603621d6bb9ce7b3e1da8c1d92e693ba239635dc3eaadf0010a6572596aa68dcd741cd0895bf9bc1ac368ed446def3eca029edd04b6bd85331cd3334e8f5775ec6504742df5b3203527499f37016329424e398f604535abc02ec42b1b820813c8f3d5db330bcf52f3e4c44f612a574a0c21d91abd5b9bf46c64229d523787c0e35b8abf1da4b0c869ef6f4975f75489f6cc2f14730d584064ec2c10055490d01ebf82f7d96282e5c7874a45fa7577f8216d7ef8996b9e5f983ec524d1b63e0f2ffe355fbc4f41638809d1f81db2696ed2a1f3229ef2ad6e5f34811a1d3d8bf50122b428cae1d79383cb7936a7ce3f6bd2fde63e10295ed4056e0c0b454db4e82d8f6ffbfc2b85d4bfec683778c6fe0f70605b825c3ce372ba94921c16541bd25744277ba857e73a0f80a906b693e188aaa052e2239d3c052d35e9e8d00091a3e429b2ea76557af6974a39b425fc82d6d71de9b3e7c006c855aa747441f02fb63197cc3ecafb6f02b81771afa1021087fb70a41b03a84003f4d5bc0ce742982aeb3a8657fc9cd737221ef00023dda84397744aeef7b6c67b58be83b98c1e2f6bd83118b70db31b5023c2edfe7130b94c34de023b850a478e82b1c9f174c4badefe913eb84ca15bf8398b33ed2e7c101a4ee2301a04897c48fdd6bbd563bbf6f8db3af6aee516e79bc6a97e6b97add64061dc6952462f55bae46e327f0d498d30eda672a875d40665b4ad6a9f1d272898d7f088f3c497551b206e7a488dbc74b090b9333d54331efb75973ff3fbc75c9edba268e3ec343f40406e5fad18f36d047bd4396b3d2277c005de633c6739dcc638e9b3972117575e937f599205b7ce5984d23474f9cd61f969669c4a372b2cce963e59865764cca9d60d4a899e57e47baf2912ab802e6b8adea4203d7bffba323dab9e7467b7a971d5f9432f67c2c9cb0946ef05f7678dbcad4fbefe63755a178f1796351254ca132b6aaf6436ee9da4eb93a3dda8dbef77f710699fb024af6b01c33d0ab410a038464dc165e4dcc0b98ea27391f4649811737ea468e3762361f281b85be548f4ba4e6b8c2c1096318a6f6565cabd519431e86d89bd51451c80f7f2c7c48fc0a33a5bc07d9743861d7c4859240fce87aa82415e26a4047ce6b5e376cc36087404c230ba5056d90c8f4c33632317a62a414349ba8d5347f906b4a0dd931dd1e7ddd97f35f18ae6718cac0250eb7ed33eb1f63c1662852ea30d14f1ec56ec76777c6a52a7cd3cb0c2104486418843b27516e31dcb8dc75f5733f24a985277451d5d5df45642c4abe26bf41715cd69f8bfd1ce737d97bc069cc5eec01da20e4d6ae9e8efdc3cec81b4d2a6ac9c5f074659734404ca72ce172c775c0a5d662a281739e94ee33c19833c0612c2bd5690728b1b12bff7bb3f1aa5338cf52f1a3915310e8c46901a6adb992da5e018596bb7e282181f0bd9cc8d9313657d3d0babffdf80d0d5a5b7cf9227e2b657f00a7c7d6da1cd04f016940f8e6262f1caf011341a1f8c123572ccaf78060981d13b5b6f17843478ecae51ee5d8aff51e2ae4d89cca3073b4f2e9a4e50aaf2e059700372175c8f36c1282a6d1b128feadbd16754c4ae9f8cced5b1833ff89592368fbdcc3e9f5dbfeaf3b753906823fbb32150b09921f988c8683c3b32b5f8b78383a971ed4043a4788e41f915b6f554d416654826375fccddde2f8b21e67aab66335b748a05a306296be4bd3702ad8981636c95fbdbc843a1dc31334ba10867d5111e9b0ba0b0ba9aa8a4ae751e56324dba64c4cafbceb701f1c18a3c94197b8868e70f6531c4a1233b77d5cdc71c8e89bfba475b081d70da47ab03cd1a54c6f005cba56e514690f75c77f7282e6fd6c55f3594a1b90975a53f37b4feea9a0ff778722d59bc886f52bbfd68ef2dce28df4dd46795a5d3d073b8aa126cd747168cccc084e1fad70db150e2e73adb4d4a12faaa327b1b972ca3db33d28639556d58475ffa66e4da70864b8728dee4a0e98df8c74ddb32e828d93e5337af6558bc5dc5ba624f40d6f069d74b480a0088ad1ff453877f79088f685f5aab8d4b5f49f43031bc5bc8ad8bcb7d2f09c104330dec308edcd767e5ca33093f24c4d51ec3715973bb624300bbb67d863fa42b3f6c2b69d59bd9aee34b3d1fc423828460f636f377db779815796bf6545af628c4c66937aee5d65240847e52c295bba587d18b632dca1323afed4fa215363457ed6939c4cc5a204ec64cd26a7048ba54596ae65be7206989e59306c04786c387edebca300e3cb180cfa291fee3659a77d4545cfc841638fdc3277481c1c00b6f44adaf16b39f708d35322961c5bca081f79be71e28d247a841d603fcd5e4d0f9d91ca66174ba252a25c0be33cb3d42fee2e4823b2fce6efc02640033ebda1c287b14db31051d6110ba6e5613255985a354d8d307a696a3e6efaca91360211d4cf5f95a2a01dfbd457d8749517049c41a80ee2b55dbe3ddb1bb6767307ac006b7115f5e52ea471a015423c944ec5596664fac9f40f159a544f6be8e9a69bc9a8349584af567f60f68035f6df20bd5ae84f76a2af3d8a3fcaba6df7326a0907ac140cf220ad88786b1028638219380cb327da8818ab960ecf8848ff155c8bec3821e1867fb68e77842b39214d8972a0ca4ee7a174e49dfb9af27efa895b19dae06ca359233c236659f0296ed61fd321c5eacfd516dbac88c53e7d31f042144602386c43bd784c88e319a8dc32ccfe90799b2914de9d962e86b89006e76570cf994c186d70105816f6111712d758275a99ae08b473d35cc7873c582ee85b8d107a15bfaabf13871d1a5b4e20ecdc9d068aae023aaf8ef6c6a5c1c5c012a1de71af8765dd49d5ffe6ba656b57ae5e66eafcd3c8e695cc938c04860e6f91aa1b83a7fc410929c6076bb5ad08584e6c3c4ac19ae467d989efe5367b4e2317ccdc8c850b753daf4c6da1c4ab967c2ea483884be0bb88e71ab60250c0fb4aeeec46cde037922116f4defb0295f0d5a6d113b87c7c31dfec829e69978913daf8ca629187f8a73389e2128a79f0bbef85d0e49537f83ed6d38b99e0c339691c929928e517151fc42dab85808edd0cd3907fa3a3c480d646d2e9935e6a7f6b12e140854077ffda22224f773cff04013b81e8cf36f6d37c772c589d84a300b40a9c4f46c1db6aba499bd74f0492897942beb3c71f65d5040b5e01577fe6d26bdc24af9c45d2d87b48e68b572cbae9d2c57cd89c3ee185b213b431f4ac6395aa10fdf683d569d6424a727a6cc68b8921ba88284203f769d9ebd540378f1073d7249f361a3d6b777fca6de0d4e8f98778685597d681db92f84943dc6aff807667c5d80b4a15c20753748e9f80584c61b22fae985b0aaf027d4a2f206879decd0c7938b3b8ca99b002a597352669f8e297f992a0a79d94d6a88216ed3571b935b4c3ec941160bbafb2c9a06b8815398be76a20c0504cc011050107c98b893e0d1fcbd1cf856ef528ff7910ec03149647cdb5e269bf94aaa24edded68ce9401efbe3b8d90e33f2db3f3b728582f32e7d292c040a4035c171be9e3e2332a6ff627b14341c820821297ea9fcad66b465565b2f53c86b6632011f7d5591c1d24df0edace0cc9620b40b0e1b848bf8c8cfd5cdff0aad45fb81e22b7b92e7a1b5215eb5c7cd46e3081a7e73a6e12b5b5aaf9bb458b9ca236f45d13f2e75fc09132397bd62adc23f39714f89bf01715e507b92abf1f2ae96f860e2294b451c1cbf136bd06cf49901140b3a1a199f43af8a7d41b97eeedc94ca7a835410181a284be8e4cbfb200a81c241888603e573a08ac2b410aaaef253a1a599dc096d43799640cf3cf70ea99f53924cc6334fd128190be8eb9e79b25de234a0a1d6025aaa47edf1dbaa756a0a93c9dc8fe8ee4c80a4b3dbfd5bc7f9c6e90bda3ca89a39030bd77e14458f4cf4259f4121436d25527adeeaceb613fa0f2e9f4b7f4ed2bc32e931df85c485958466d35e667416d526553a6b2a9f5eb349a4df1561137f50379d3619b744e5fdd2eb72a3bb38f7dd6dfded74cbad5a63b3cb0b00faa40dbb1391eea037fb69a139cf3c8a52c47aa9e74e2c0447941b25f85261bdfb70feeffaf32058825e4d50994406f83fce25a3b04022fa304e0c9fbd6d8e3190fa8434a272fd0e61b61c5aa0f19f22a086553df35b4f27a456080d16ca4fd2f381e362e3919c9ccbe081a127e6947b9a250a933b887a16bc3a9ddaa85cd146ca947a21c85023cd08b3e20b78b098986b447a8f76ea4d17cd1bcda7ef6a85748ba5a9d23a1a7c76b5d0277cdb0453d322acf640dbe0bdafc80e202900f3a17d2d810579e2edc403255e4dc2d83d343572335fcb017a1cad26c45a0e14d60a286a3e26ca4e11858eb43b638e34d1c7d8aced60fe64da14a67d2f15f0e47e1a17442c28f851d676b758858ba1900795f67e0c026af10198fa27855178fd92557df32be4ae0d3a32e5e297c97cbc9d268a3bdfd7cb8b960e89791ed41cde5e2ed380b92f7f2bbe676725ec6790072d7e7a011f246e8136d77deab88dc1d25972f3eb92cf78782008c94cee7580e256342ad8b7fd5d4eed834410a042ba0c1650d9c1e306f50bb85d4ac47cc3ebcde2af53328b8af6fd199844386816bf93d3425b5b4ebf7323947fd0d707485db9e453f5801da59a2a8eee825487d02a18da0366900b880a099e2fd075243dfce985bde1de0466e19273fc37ce02c7a09f95b2fef0f27c594f37a40ed1f73a84f4bf339e00eefaf7a9f3b491a3fc3852e5ed9f3cdf2278451efcddbe6bc122735a024d617ede04b1c253c28570e216a1a55f799324ef462ec74a41ac7a2f20c4015a7c3b0d981190d4be36b99834887cb9e08bd6cf8d455091a04222fcb689d66d43e86789910ec5c731ac38d01dd5e4eedf7b9c1b3b29c8de3f4fb94732ffa498ecc490956cc536cabdf378a3096b2c428fb7b838fa7ae49f87ded11bd692bb5ec44b7b64eae113e6e12f0a0a71025a0b3e1b8b688bf0076614ec2874f8ae2dc0b66b3be648b35aa7ef53e2685d498ad6d0ba75f5a0e64a44f05a71751e93987ba573c42cc45ff04d2a9a1424f173021b30115a2eb486653a11b61e015113ce9f85b21c66beeeb1f443f6f8e9f69a8b35dc119306f548435f57b7002e8efe9a2049e4103f0dbee7b7a8c674e131a68e25c51c7321d45b12f81025fc1fe0ca856487300a843737d841d4c04f4c30872d2fcc8ffbafeb2362d5e7456b6be941d7833e6409ae03f48944addd94466689ff27348d9e5e8b648cb60513abae7c1713bdf17a8a8a8ad9381b9af01a7c043c4739bf2f63951cc4c6c95661a13087269857de6a1134f52b052df78ff0431f0ef6ac2524447bededabe3fd9eb059cda4638bc8c4c45f140c519c13bafcaa874f794c84ab92ebb7a0497d5424282bae91d23b2fd2797240db395ae12a4c46726162f5055e55b43c11348490aae2a025a7de9067fb46a4bd5dd41f793b277adc6a0754c3a37c984edac48f7ed806464593850a30c0c126d5c4522a670093b4f989c414af1cb3ba4989a08c25b1c7f2810400b6faa9bdf57f41f005a748fc011b9fe0c3bcaeaa23f2c2575204fc1fd532b825fd111885ef78b6f043838bcafc7a405d427d6cb977529c7c99c97c17aea85b069bc9829e04b39babc27130c376c6d32ee2910ecc0038c8af0c3bd6e9c6fe4c1156e0df105914ee505bec73f3e0ece6cbe65309f9b83b9c361b655d14dab4ae4ca42efee7b443909b88331b93430815373b0c62ec7758861d2e0e2a55bd6809e9bdf2ff9c5df9ae6361dc94626b5e274e3a547d69dd93e074b7c60d4fa80b355afb435f13cb3d9fc5eead7bf50aa5a3c1b5e17f26dc16af98d472df6b135052694c29bd2bd7c75649a734973b1c3fcd9b483eac0f530068231df0ceac5cd0e1ccda9076547f2701cefd9ce9bd809af83790755d81941a41476869b60e1ffc074c749d9346be2a0b6749a8c03078be7eb6d05bf4bcbe6f49783676944913744d7c57d160da9d24d5d17b5f3fbe857c261f2e1d21d78261ddc137f4dfd17edd2a35dff5c7b0a5215bebfedf2e078127bc3ab2420073395a443fe3b3cbe661f01ac1c14d95faab3ebac1f12a5ad4f3cdbdb87448e98962bf846217db8400b89afe3198ffa6609fd917e6a8350f41e517048215e4224cd32252da5806f4a80f4edce7ffa8d2f4039b8ecb2fe65267f857419f323cd9cb39fd58bfd3c0c179fe46a4f9339472c1ea5988f3a0dd83c5a8589643b927e2013a59780b84bd81095eed7a6a1de6cd1ea45c6bb22c794714d59e7ff51d5d3e67c8d80aaba61402dfe8fdb0947b46d4b991836fba95b2ada2bf025fdcfd951788f47a46a1753aa8d3c53e60e737150a95325ab922ad0433c1583bc31dded20fde8536433048896df80987c00c5a1e55412001a290996df93c6ea33bf94045135306e59f2597b6809385d3faf85b1256dad0a69a4434d37e52352e48b4160f7e3833430ff277dd3ec76d0f56abed71b8184f2c6dc02e16ff751fb50d7163823ffbba96c0d7d1011789cb2d01a407b2f6a5cf54b5506f2b08349ac75ee2c056e2d7a15322a33cec138a92d551f27c9c66a9f70200c533eb932273cc4770a36d021cf230ef1053bf3c50ee2ae4bb6e7031195e12be6c668df46f1f6fdfc1b67228be8a6d44e381eb5dde3b5f9ea2ebadde294352426d10167957c0374340825c5e68634a5dbddcac1be49fd4bc8db09ca2819a2e09864f0d953ccb2bbba04d8a8c318161f5c93d1d28ba9a0b2e91578635a58a9380e06776b3be031429f82603a62ac71d87ecfd1d9a0e167f7c7d291a7750cf3577e437e8e4317138d8f38db055d033e4c24cd6a7d5ffe8e02c0d3fd0daba34d2d93a6b380daf8cf6182857695147b984c1bae64b2425b54ae01c4c0544629a80632f205daaa63eaeb917a68aa6e0783b2a58f251c25829c05d949028a38857ab216789b994a12222f89549da875b757cca3bfeecbdc7b68253bd56bb6341045ee09a8dab3c5e53a8e5d54d8b2518cc8e3014a4d7094bc93b50f9c8573d9b2da395002525b089a596f8492be40c0b550bc40eae19cac55c547ed47b7b0a1f5cc5706e9ad84860bf0962dec6ae6572489b71df61a65ed00042e6d1f0fcf30c1bfee402768549d4e485edd32de1184c5e1282d19b22e8b57230e70770905377cd6463d7b738faeaf3ea652a25b4c3cf8746742218f03321125d448566d88f48aed577c2aac9fc93907b56cdc0d02a17c47ae6fdc1901cc6663575a33712f009ac9dada90cda602cb08561aabc6e1f689c6b6a416775a290089e0a1ba575476afa534a9024a5314da28ed6b8a6f1bb5d97181e3390e8738c140681f7fa5b5e270aeef3d298522ed0445345f8d860dedc847aae615961acb8eede98f5f87e65d6b89eaab2611fa133d0444183760b0bb45d6c165448321500bdb738d4d08ba65077d7eff8a1d19fec337b0a24442be96b3d109cfa87d9ed038cdba57a919ca73fe5e3394a31b45d952543eb93888d8aca62d28f36c1cd508090e2eed66096555b9e5b7e8ca4aa0fc86dc7499a3fdb4dfdcb5e4a0532175bced53ae71e14617dfd2e2cf3133ab3ecf8433fa4b1328bc71280e8e494477b3cf402da6eb34608bc215eefd500138de3762398540f9473e4409d7aa3697dc6805bf9cbfbf5d7a61440d88693db6c31dde4caff3d7d65dfd40455137877e2829633fd210df0fc3214d91bfb4e4b30028835e082f7e7831beecbf6ae7debaf40225002d38c86fbfb918abcf58cfa005597d0f027a4ef1408bdd6f1bfd42c1e3797279a8f0a440c9ab8c6ac28a7ed6d13efdf5c28f8c469b78780521cd5ee23f04d1edde95b3ba2ac7f9ff566d22beb5a8ac9fb3b408b7210a704ffe3d4201b953b154229434cc9fb99d7b77090e90a2b06d267d5b438a5ec58a5c080b670283f1f63b26390ece210be21998f1bae838ba77ab8d890242062b943ef8af8e359042fc65e45848392597a1558078de10a94738a5ca3d42a907ccacc1ad9cc9e5f248514f1fdc5362e68eafb5618757197e7ba86969ff20dd19f08e388f3b43606ff8c8d349abe4e09462b5e6242786cbb109d94b06d6112deba4709a6ae60a3f21ae77ba20f99133ede260f46177b266622280b891d5906bfd5a851e51b4ec1b7695eb6e53364c2d6421c87591a310b710b2a08799055a8ed0b3d166142ad2b2c9c228fbd428067a8ce85a06153993f871e37708bf69b3a2142b796a4a3d2f72239dbd35bed20cfe2d5ccc014f25dd85ac97783a7b6013862e1dc3570aa2087f88a22137640a5396411c64581a5e9491032e2d1d02bffd9e1dcf093645c7c93aab843e2b84b55993d92ed56be22d66bf2a3fffa69340381629ff3014d9f07ae2561acd6f04648f2a10d2ba3bb19e25ef97038125c11d5f78a9a52708cfc49648d238e5a42b056061491fb7fe71003b9562cbabd8a72fb027eb0dc7f07f49302f9e1bba67384a9f0e6bcf262b652d9986ba0f17fd18482867ff80babe3b45fad721014760b89579fb65d1869590e283800d3c958773b93da9da4ed772425448828292f605ef54e77e7292d575e2f9b8e9be5ef98f242ac0774f2162010bd426b2269804875727ee57b84a8656135861eed1b34295aa940e054f3fb759a36638cf2499b16baff54677db417749fc947fc6547d91ce0a85467a41920e426f81645a2d28da2453aef5764a35e507182d219cab2c793f4ffdb5263a653d21aa1f3b0aa6bcd3bb806ec3002c98ce6bd08a01f434ce6cd1e63b680627dbe187fc517a3757fad789543395aa4296b82cb30d48c004503e84f1798cdd483f8653f2ff4f7414f8ecddfd4f9909436a96214b0a4a7d625aaf09b4c1f821b46a124dd4c6ab95b2feb56d09715644e9a601892f0b3e753f7b59c8415799e1d50317e7350071feaa46e33990c2c6425eb0196824e109fd5d2cac33d29ce28b08cc5a68feb28c3091e5c4a75f4d574bd2c78991a3457445bf72a07125368df6fbea7b5effe766b9c8dfa1a71ce8cd72eab41de791e3912b87046070504f8a6e77582eb14d0fde8b148fe819b6b95dbaf3a041d229d75d40c61d758c0440284f375ca79efc83812690012fcc3997e9fbb18e0fec7f98d53bf855bcad3afe62996cc0e40f6103f98ed33552a264288583c03a75aba047c322c51aa7eb07dfc3b45aba5e5520d28085f49890b295b676879a254b394cf53b5b3f29e5d84c313731b06003b24562480e04acdcf913aee0174590359c8c7ec0a5eac2d404933280df6968bf10b75d20ef36d117b5da5dd879596ebd36986f18b54b883093eee73f0fb66efd3176702f85bebbb61f8a491ab6f46dc59cf91f9cf8a9a0e70add6a392fc5ef292d8ac0b27a27bf3b21a151f465a83267283b00ab66fd9580f83178e8f5174adcc06ca60585139d49a172610f223ded8c70aa1e32abce803338d264871b215f8d887b1e9e330e123faae95640f12e0f73b49e4e2fda28a8d7bc327d02b30ffb3a0fdd0b8464e0009745c5d09fea968e44c24499a17e691ccda1d36ec3e079a675c215fb5b225fc428784a6c8fffee6b92afd028ea2a0017bdda06158782fd7969a06bae13ef5d034870de50decc400089b64878df7c2384c70c88d1a956ae16b70cebc11473c12a3868548a65997e405f684cf9cec3ef3ba8f8186ee61b781aee115d5b5b1a150c113d1bf22ae76ceec06dbbf1f62b26dda4c2f8b7bbd5ae666831ec076d128f79ef50844b084fcb5af44b77b8680cb37c5be179ce1ddb81b28c00d602d9d965ce70680b916a800ed8e4fc44b446100600d494f38fac2f3f20f7de0baf7c8efdffd7c7d3ff40cde93f34fd3124dfdab35c75e4cb30793ddcdb4a2db5d21d4f9c9054ef588f71f21217bfeb89b88595bfec30c8afa0a3fe7b9f28313f44d44f7f220464872823c1ebd1521d6e45f1c6f745be34d53f069a6bf58602bbb3b6f8f51a724c23403b3a98b7329ca580dcbe0f24bd24e8168ad25c36956d1444a0ee6548aab0a6849f04078f970e187dacb544ccf09558cff9ee3fd75cc2a2c802bfeabc04e35ba1c9ded6af3c25a25aec20e4f57671793adcf70883177f52b255d094f0fa9feaa4d90410a0b020ee4850ac3508a7e84193f2652ed07b74a0394c836a9a50bcb9fb4ee5eaa395b529f75ae55250e16074cc11e61e5f029155395a684f96fe96d8ada6eeb1de3f9c591d7f859df77b49117efe68498d57b3c721bdc02a8c258e618436fa521d6fee975df0422abdec5b5945557ac4d7be4f574644fad19a27a439d8f5cffa92f8a199453108c84ed42c3139f6498d711a550d6e0134accc84d6d1f818db6a554f2661ffd056f852bc46d5a44fd35fe22622451c4bd41442de608469b8c4bafe557aa795f4db484c14a79f55c7a679ea6c70b8cffe2daeaba2dc1c0499328441635e23a5423baf701e8f585c2c535ce702022d4e031bbde295fb0c6fdb377c962e62b5d522a89aa8438a03d12db5eabe2ba848a5f084439e31eeeb1a18cff4061df633a40e0e7c61bae02eb663adf88ca8afe81046226c6104e68fce4ff9de2255502a8bec7799d868361b4dda1ce7fbe744e78f8b704187a625eb93b52b25724f49783a74ad4e7205e0cf0d0350eccc7c0451f766034235e37dd96f9288a2a4dff987c4899f9091dd93f80700768bf0215201f84e709bf41c1097d581973a6d98fa798e5631fabccf87f9b0bc9967555e8e28025e404a76d12b8ba4c602c2bbcd14c8f3860f6901de35aa4df410e55f0c9ffb3427f788b60c597d3a0d76dfd590978106d1fd918ed2fee73455f83a8c1ed75fe38cd7fbbcbdbcf280e925e9ba34cdaff564c44514ba3fb9b136af03729a4e7a5671673fe13867bb9de809f0649c425b6c956771bf7c5e3bf8c556f6f0de8ac88005765213960557e071fa50c0ce73f9c4704d71a3b5ff09019f1c69187bed032302c69d167703eec5180cbf4bab198aeb941803e07042940de69db39447d2c7f08126b49623fe0a2cfdab3b34740709e3e7a796337780b6faceacf50ff30f49558dccc32f6438de25bd72ce5f2729fe1f57b91f1123b188e3e61e7bb2a5b902b16ae27456f6e621c748f8f218276522eb8f4a23d3383d946fc32d23930a7cd1a2de3b1080c8b50290e353039935a9cf145e58d220a3575e60513e581d04e868d3efd3094ca629b59a6bdb2d2c5459825d1a6625d78bba69fe7a6d3e2281f395379ddf3565021ed585ea414739285e07c91b6d2eccd45f3fef904786a05f04697fca6487cb52ead211bb2e196ce5388a2d3b7a042b81ca5ef64a572844a4a987436f6ad74c67e318bc15848ff016c6e00232273a987524dc43b3f91389ae368dbfa1826c633fa2889340716a1f13b9a85e1f1e014a4a06a2298f7cf4aa290105d77b91649d7e105746d7e94cdea0dd006e2fe09ddea6013c6a119f769d55aaf161f6ba0f3153baee97c9b67723ac3cad36ff026f2b871ab9095c68d3b312b73a3ef996c9935eca61d88dd0a8b6728051d7d3a65d6c8580da06cd9068ac33e501c8246b7a0f466758524de4a9db7550483bbb2477445b85bfd43f3ba4fd3b68b02ed66dff939a14918f468682ca881011ea559858b21ba7d466e66a65f53dca264177e9cbe585e2f4be44099eaf477640f9a69aa4687e2a5cb111c92c459a3f30441ee40782c386d89297ca808f76e940fd0db11d1b568a39fedad2f9c324810a99cdda3f92da094dbce14a034e99b9355193d71b8e6a4f6f5ca29dc29529a0ff5d3034d80b4b57b4514bd067cfa67c5cef2bc04648a49c3284881b2ac1939378c21eca04fbbd6ba176909db756274a2e3f1bec17405815c7c543ee34305830346a1a92b91b4492a1f41d95446d22af1a57b15e747cb30aa4b18f9226168ee2a4989aa9ad0d4acaeb97b8bd5d98d8538556f2896424b9232b7359cefa60362d198c986f0a338e71150d01b92ea82bea3bf17b515dc69a04339c4862dbb8e1ff8e5fc3f30ce1ddf867d3f6bd157fb7475fa08c5f774e4b23ad1b16c005f0c4d77a248f55f7984efdb25bf59cc6b06ef26744ee33c182e00047673c7b457bdb4d087b42e740a51a2e3f85c07c595304a91b339b944e220889b3979f85299073fb5651789c39f807f04dcc1e34dc201843652f644db8fd450dfe50cfbe95bc68bb6b6f8dff1b1b440b40f4ccb38200d5afa468c2ad24c920b4005ed8cea64fee2dc73fe122464d68d46448de523d8a7ee41054297d0e5a7ed13d583514448552253b2970f055949ef02eb2181c787f242672346c060f7099944091dee561328edd3bcd4e05fcc635314f60953bbafbcad91bdd377366167bbf5eaaeb7e62ed53a32c97d4f2297d02af8cc17d6609185219e45dc44dba3f45c82e19244d8e403e2e0ac6239cf3e580c5666fb59c2cfd1c33e5946a1b1e86e66133470fbc01b975addfc6eb7331e5e947cecb802a04d32ad049554c15c8e4d000c934d724a1ef374d170113fceda19bf9dce6cc511df685f54b6d4a91a41122884ce8fe50e24679182ad13ce3a7a56844adb571ff500464706d1945834e9feb053ac05541a13c581cc381fee1f9a7b8165ea7ef0af3bce87e802791d1881241fa9a1235cbfea15f49074ffe704b4e575c42d165444f48d9402248fa6f9024c43c4cbc94980ffeca326f0c82a9046cb5c15d7f53af8d6ae26038d9755c06f9c9e45411b43113215721abbf106a23a4124190ca37de85e4df2518a6166dffc50e15e1b8f39131cfc9273080d298860c1704377f4093068a99bfa6cc0709e900de216cefdee98d71ebba8c4a2f0e0a28fd0ae42df0edee5cf9867b0a2547bb5d692bced4ae0b055ca30a36651c38ecba7bac034b16ce504157c1b17bbcff2c0001b482e4b24a3cbaf4ab22a5607b0cdd30fa1be78dfab68a69b56a5902c92a5fa5f6559bd047846cbf8ab9bc6e8d79616407036ab978591c288c6337443359619827dc5bb7a82ba5a5ea8b35dc7067b0657be5ac1dd2a3f372851054f558fa92acdfb5427f4c45228bdc58ddbae7dd7e3fcafe837da1cc912ef60210bb526cbd4d5c097fa15e8a50d0159fd94dc1acfc03f29cb3cf3e8bbc4eca1b14ed33d97dd59151ca12b8a534e90d500b29609d1aeb20c5166adccfc340fda37cbf19da5a18b23bd4aa9681ba843d183aef75eef5f013807f45c665b64b7d6c0bf5bab86f486528d3f050b8f721e17a60064e92ca67ffb22f88467f5ea2d0b00b0b0f4cbbe818ad73121128ab9cabfea3271f87efd6b05473eaef6c1404b1d972a1f58f7ec0b12bf2dcb125e3ffc2ff6a219a9b26bf88bdccaa49164dd05ba508d87b0cbbaee6e49e96f9353d194cbffca1d19550b33fb110ab2353f3ab0e75cdedc47978ce62ab1bf65d3b939920e8a139bdd46ce02f7aee56385bf758502e4805c6ec0420336f012bae2311109841fccd7c19aad709ca20c4b74954bf4d65cfd8de8c5460e6fd9eec1a54e17f0441c7aa119d6389a200bdf756b80cfcd62495d89e61519205d81d8d2a960c988bd4d6e1d5e6ebb9c25cf6712e27540f02c11f8ab000d031eaca60c0547babce452d08a0a9c488f6b1ce15f4bf5c32172ffc364638d7f896fb3441f52c562b59fa68b38d436e8e8ad1348ef3d290a5f6aebf80112192f6796a4c0d9b9cc7041c0e56fbafa60917e9f4d771228a8c63c765a878f2df415f92c74c5afcc03e2ee0075b7e023a7a931e5eed6b2371960f3289cba7156371b5a5688f7200d7f07395e27b2f2a368e9ae2c8b05a1a5f72a759b7634dcd5c6f546f443fb1d5754fca810530e61f547ac5211cf1b2a5fa63522e38ea105b424fbc0ab974bd1dc705742c4c57e1472ee637aede1f7ac104c967ca3451fb88f2d93235c81deee383eb68080c9db808ab4a06fb2852d0730ffc2594f12e85964460b0181dcb257d7f9fb64276ffc904395f106921aad66713a3e06f14e46f6636cc4bacbc836aae30c6e4ad7ff5c2787b46743ae203bf8b7b2aa636387f347485b2f2bcaab6f2fa65c9b67bb195f94e53c0f6ad0d28d484c742006ef93fc97ee290562c9b6aa092052b1a37517a5dd0936a3e784d3e09443213bde694ae36e3a83762bcb7a64734877bb3a4de2358c552613efe64b29e4133f3bb58d5a908a14375ee57cb307d25ae8cf05effe90fc9274fa3f968b0424a3870d501604e29ce2ec0adbc29f87f9d4a20cd505ed4b62e20c59cdbe54f932c55583afb2a76acf9f7573c411b263d6aec6b8375be4fb77a207fe176aeefacac8364834daf89b8dab8daffda7a691f5d6bbc5362faa1fa07f1f082c9759ab921fe7dbc369d8851fe0cbf265ba8de7f481ec82696fdb49b40a34f0a1685d24a85f577d03e4a0983b6ffa138fd41a93846f4b12278c75d01ab5fba9a5af5735cb0140068651e84560476894ef2ee15bd3a7eaa6f25c75664ca047843cea255902ea4f5aab7c1c29f488b845638945029563919a7ec8f9d9f24233c48cd7b9d3334fdd4473a92503f495df779736f372ca9c9e5a3fe555057e7b617c0d06eb37a4afddd85e29bfcb853879e39a4b18272fc83b71d0819c6a81ee2020f55237c64b2e8efebe5bf91d58f4d68ca47fa13176517f6e4a83264d7a387e1dd6393273dd2afb051f686ed513c390c4daeb2d126c73c5991e122f6db169c1dd94b72e0793558f35cc2ac03d8aaa292ca2ed296345f548c02603f69e6a9688db710bdeae637b7b37b61bd41d68d6c2c23533746b77b40a3019d15294b17f1b197b1c2afcca9282bc0b26b2326d88afb3f046f6436e2ae8fc34797a26af945fe5d9e0a8b0a56e7cd1eb1f4354e31ae2504f33e987f62d473614e236e40b7d8ae8b67370862a8edb53fa40ac594e13f733a9c17bb0304b0baafbf1066dfcd0ae55a5f99952f11656c1b0472be80b3442a7d8b37cc7ea606ab383ae0c3853137361a91633e4cbcd82b0622f237a2ed12aa8e3fecceac31efd341b7eb3e9cd3472d95d1f146b0fdec2943624ff7dd946bff7a15de17f28c562fbd66b15d9d1c57c6eb1d6c725566ebba83dc4d2ad83ddaea9063bd96235b83111e4461c55e43df1e10a8cac89db9ea739a2dfad2ce5edf4edaa5264388c0fc82ee93b7908606c44c872ffa8a6e92bbcd16c9dcb5710a3f7a9c4862bfa2a1289b58e791d2d2aba4eb7f21a1b65e98a32883ab23276938ec91beeeeba9d6419e570d014d4ff9490e37be9491536d359c8179e7b7a51dbf5bf91d2acd4a64229686e9a8c808a31810bd931a1c2130e2137413d1affcd61ebf6cb1a8388478ae3406deeb89700ce66438366680296c3283f7f15c5bf697bd1553c15aa846d134372da776645fe2f7ba8d1ee06800063962adaf680d6f73dccdc1ef60da705c1868788b778c86fa1bbb5aa3e941673fe5f924c45616839558ac49b7313249dd5e85261eaa314180d4ebbfff0aa59c7e26d937dafa7f1759898980932f4ddbb7400e5763929052fea9fc7f49d4e2d23b94f66bf57699fdb09bf2bee152526ba96c7f35fd71aeb3e609485b1881328e041a890fc8e764414abe70d4ca0cb48ca8294765281d6e7dbdfdb014ef8e1e46af23d892f8b5859f5940af9a5a97b33f6c73da35926369c82923f002704443e2d35d788ace6c85f4389bd81bc9376fca3fce4e07fce3758b65876ebcda74f58e0c652df42cce18b6e1bd2adeb0c12b904165be368fe40ea4643b6d8784aebdb1a9ebe8d256c85e6ceef41ba6957b51f34f327fccd0ee96887e2e6d86d67e55957c4174252ac7b4152ee04a486d35989d76fb31162347ef9a4c59bc1f49b49c029ddda83a9eaddceff969d9df1711e6a641de512ddbc50fd25c9212acb51234443b0fb1b8201ec9b589484ae8a67791a016ff8df01fecbf19cffbfc601936c877cc35608a47ad203fa168b2866171aa75a8fd0f61ff460ec46104f1854c232dd4c27b1d35cd05da678bc0cfa8d1713f396b15051ed3a925cb6e8f723e9393e9673dd8249e651e8693cabb296a28a56186303a75182fb53ecd5a1467b4a56f846eaff8b739572bb783f747b24d3710ff08f0d9ce66b435552f8370e0796b56df87f64c24fcfdc8969a19fcf7bcc1339ebfe27ed4ebded7d0c2c7c0d197e315cf6518a452f22471b71b4259b7a444857cdc31412c42711c2b1129a1c46356a3268f687dc8aef064165899cf31cec8d3d38e2dc477537c149cd4182cfe2e1480ecbbb41bbf59d85d3ab923dc963231c19449bd9282158ffe5bd2f977daec4fcbc9726a919eceadd1c0c9dce0a318c07fed296bdaf99e36f8a2e07b1e42b657b4aa76c376e2d9eef2f975875a2396b7390fab4355fe2a1a837cb6b19eddedb5eecf3b7dbd1201cea271dc54016b53397f9f584fba91b776cbbd90756b905bb9be80d61162ddc0c7fca7f9a4a9f9366a45ca2beed7f68bc67df1b4b088e52a49b7490f6a757b3a0e93cbe58952bc180db15e7f4ed281fdbb636bc5761a3569d5f04ee11a683bd3fd6c342b2c4d509d1c71c3eb4c6e7069ca1af13c9dccc736c542c047153cc4dd0f127ae61d19d1b2b89f2423000a5cf1c14974972feab89b3001e5c22f2df90eb88a9bc7dc93fdd9ebe8533b5c4ab186e88acd2c75163df1e86a7d2755c2628fa85e4b6e243d31bb826e3410ba37b41e76fc8d7f2dafb8ca5fc2b8d4b90e3d9726eecb65b177a468c27d8ae54d5c77f9beff6b98e47e079780a142dde0d232ac98a31e6adc6af16d9559b64b1d474798dc6fe1bf1a0713a6e2f0eb9f75700e2b8f87d1b88ab055b0a22552b3a61c5261f8e26ea7731cf7682c7149086324a0115a98423b89f2fc0144b2739bb5b8b373035ad0915b8a0c042734f51babce972c95bf7dc9106e62830146cb2becabc285e5ca5dc72af2c96699ee17c56a2b4506bd91957d79394bca647083975b8fffab0bca4d3f48555a3f1d3b85b6506f341bdbc8765ec9a3f78e7f512e1d6938c3482b145b753685daa1c544dbce3c241f0af8f56880198d61bc4ae68c9e75ec8ed44cc0113e1f49a9a0df5ab2318d25a989d7bd49e80fd77f372e0ac703825350276457ed3dcd7868a51316aed46b10e26748d3a234043e1bc2da3b5e6efe0e81ff7d9d290cd1d8c23d48b486470a1fadea7c45c4fc05ae2a8944993bb5e5f6335e3e60e4083e030c1959090335328dc7755c685508870a8f8ed2e1fe6cc39b7cf079236907d27ce027c1ca2fd16fc716f7ae113a0bb3d1121aff32b56cc83d7390e45d661e145872a0bf7512d9e0a4a589b061ffb6b4434fa5cc35c3817daba759da31c38d8abfc0180655542c1e8b0a1ab19924355456c1682e48516e1f6f8fa9f02b75972e124a9b0e0b5e229ceab9e6247e472879802f564e78d953d227e4583e11af3cabbd9b720919b05e84a04d56fd7783de6eb778155a81e0349dbd05712f94c51c317ae16d410335bf5130ff09e3082a85aacf1eee60582b34443e5f8c4a0ab5ce2770f3c11d757ea0788167cd00fd11275801a0d55d0244af52d170ddf7b858f21fb8ab2d2064bfb0a4fe946e1d598c995bdb4ca4807e6239c058bc253f68e0cf181428db7050c13c6e8264bcc7f723bcee3832b8b16288722d38f83f906ec3785e1e276a891382631718d033ed83e8084c9ea0ec5fe4df955ae71063296a1369072e441f3483fcf3899b84cc37494b3195421574776d38a99750c0bf8dd1f1d56322cec68379039da4583795a637d981a077ff19addebd878b98c91a9bd3ea59248bcaa6d07723b73de4164c0c5e11d64ba036f2a66b5eea762e24706dd914bc0fc5f0c770eb6ef3f36865b2c2b274ec9dc626864061d89a40eb7f69f5ec026ad8eae74360eda3e451b129f7bd31c93278b33ea53034a733546ad7ee315659db593a555396d93b03c216527c27662eab5e8e587ac2a54c9124b7dce6e67b095671a06c6d3e15a1911226b21848f43f0ab3d09504d9ca3548e9d0930d96681235e8764d05d1d566105d0f0a1cbde7236dd0c4e87b73a070efedca9ed747396b4dc02951b5ea3f462d61231c2624be9db08789b4013da54532a8c2174ab6ca9788298669db831c37476247562f6cf6ef4619c558dfcb17f0724f3cc7ba5e9a708026fa08a405c6db3c2811ecbb39eb57af8c06a0a26376ac54c1b02516ac0cedc140ea71a4637f2ee5a5b7b04ab27c3690ca98733650c6d9621f2a14a2761733b4e768bf9847882ad411f9bb22ae6324984e8c029076a3c7b9d986ea81fb523f17449d09312bb3dd965d8c309c4c3514907c47e2bb5cdcd7d7da6f36b636185e1a126ed3c115f6707ab44bb3747a0cbdbacd6904f8eca6557686c5d2d2582ca759c1218cee83fe32dd57cce0267a9a99e512230547493f4321404f7a430085115a39a6560db9cd81654f10b3a7bd6d10344ae633e835166c30bc228b011e7a5d2e470d7d7e9c1201a18ffbce5edea5bc25626adcfc57652055a81736806e3681ea7c8566a53fc18681eafe3ae2e23ea7e6059af4541beae8b89aad976149ef6e5d6318463e04cb3e298f55a8b19a64aee166c58bffaad615c19b5f007359d901f8ce302068001c3909427eb2f051f9103476dd203398f7e7b980a0a647649f32ffd792aeb4ab4d4b0af74d0d08162b4730efc48d0c864d277cf91744516c0f97a8c2e6b076aa8d0ab686b8ceb1ad2f44d587a7bebaec64ae1a075a799f462b667599652cd03c7dabdcd13fd638a61221ac3e7519fa7bc8341295f4fae93dd479626b553a2d3bcc7bd14426c09e178ec05e59333728b9da9a25bb2fc1830c9918e43d8a5f08a7bbfac38e4e11d3389bdfc72e662527731b1c188a585a9ed0ffb11a488fa7d3416b8e0e48d5e95c7320e1c7a28d94bfb30434e2de185daceb47de21b7496ccb4fe17df3aabc61555d8fbda0e938c86e0842305e854e74c4fa8c3a4df2e2e5878ec00f22b2c677e5a397b0f134af65f6c3b0c8046f707ca980bff7bb1dd880f2fe262e7b79a59398a86b8b9ae8f05c27dd2a83fafb259a19542945487f7c5ef130104eda0bf4624a749d738c5685f10a680005736e9172d156752ef7dff2fd46f8387e0457f8cfd2ffce03af0c82764e0e9c7f95c99b11639d184056a9e679088ae05fe3a448a84862c872718c5dc4d1a9e83efa4c3f216af1a97d57d67f94ca47977242f0e8b5a277cf17aa1874a3154929858238eb162820f39464509915e189a9a40b57bb418e5086da49ca70710880bec864cd228195f3abe966d774b135760c35d234efca44b25b4e976fcb4fd49bf9e459ea111e7e9a5d929010e3afc3cc01b1c426ca5ad3e2a2e91f4f46221588685645c736523aefe8da9052a78e3521d29c1115f19ef0fdad5a193ed3c67c8f2bf74984315ac786b3a93b3f4fc7e8798d58f55b4d69b51b4674b86fb21825a90d79a8be2afde4587a78712dba379fdb0a3f5b9360f9f1827510f5b7dbf1c9e4ba7ba44deb19a53d4def4ca4857d84766bbf2054887e78eff0f98487153301397546778d32abdff4030a602c97685108774fd0576d8ec3b00a61b370aa9c99454e3d63d34848dd76ec38da3d6c084957be72f977b2ade2f7a2e2001de5759a5ff6564bd715dc66d1df1d9ccf0b752a5c059139a92fa677b77bab6216917fa0fecc7430e0374fa58f9692edc0e47ec49b496efd93c3d70c9b2f37e2c9d0dd26904940c0d3ab9f175951cb4c30eb5d5071f8d691257cb581a61dff1ad8e96306dc554ac60b3f5a60489dc81523a89931d6f44c07f99db84e3d78469d4a1f8f18365729aca4ee28d826ac38577c4722456eb78b71b5c5e8518e726848c6ea948bc43e92db5bedb735e76f1d27cb0be3db11f4c7eb0da505824de4ea5e61bc0fdd17cad26f8bbcd5dc1e822f545cf1bb4f07ba5e736ef224b4b0c3a87553fcdb518b1d7771f00a87b6e2576e9d8390fecd73ca2726ea010b0e7ffa5309aaaab9263cf4efa0751f6a6dac88ef8d01af499502ff1c962df74397436ebe9cc96481a82e673c0e9257a610b28f125faadf09ed91d794f21fa75854f8e1d5e5d279c004189732f0d9d001a03945574bf5901a898c32efbf6562fb3afaddb24e45083d89bf9dba3dbd0a6106b0eab34cf61a308b4fe3d7644a3ca6cfe15150fbcfaf50e2ba1cf6801fec41ffe47a3fc35e2c76c70b75d02a15ee812790405e1c3c9cb2deecefa050a6a11f92381244cb19cf955b6f1abed3e47bc1c924b34acacd95282672d4bba971d17fd867cc7eb6e1c70f372ede81c41cc716ecca46812f8125600a29f0cdf53d2249bd37b7dd71b97ded61e64308c0e71ba2ab5306fc7b2a048c62ad0b5f9f1e9fc9b270c4ff67c26072748c570a5dddfe9f1d19390dca55c8805922a69238c66e3a997c5a8920b9cf229c4fef2ca4bdb83a4cdeec86f04c63e6b99c5ff46b501f0fea2f19ee520124e3e2c739908a81fb658743f4289fed9f2ae0b1d8c218cabf0e546778573a8b00733f29f611b717503a518fba7817db5dd046156a904cddf308cae1e2f0895038e6b8674b499ae790961f4a18ed74058f8952dc2ff4ef3e3c3e14a36ee7a89fa10ed213f1be8d430c27a0aaf7ef34b13fb42983e32345d88c20faf4ff1cb29b23a4fdec48d0764c6a011781e19a095ac7569ef9da2439a1199467c9670afa102dbad695281483487d57f1dc8bf3d45c35e15720d651eaab5b27be606362dca1a4e94490df2cbf47ea3f49b97df770e90ef0cf9afa9d6e8abe421e97ce30f7ef0ce9228cdca9275b445b375c2bdf11e3be8aecadc30bd4f6de11818343e93fafe187da2e52694254acd8f88fac2073aaf0ae99c9817cfd2c3ecec83ec8bd2ace1ba02d129db07becc944894c41bb67c7ca850c67849d723d54d966179645c2969eef18ca7765fd3c698907cef7afffc285114ecad002db817fe1efb963b820533ee58c0878000f4c3b4160604fbd7bf66e987d63efca1688ed3f30e8c72346938abf176e7935cd5509f87e575655ff0801bae0caeec77ab4dd045bb9f69469a20e93f41b2b7282d33f0a478f561cfef26def4bc52215446f4b638251d225a73c7fc049cf36dfc0d3df0df862a57a7568f5d7db9197d0ab235af88fce24c3010ba3a90b05f544a59279e63af837928134b2392edefd66a5aaff43badd2832fc15d255b9f676b9474d2815ea1c973048e7fc15db380da3d6f84acba9154358cde78825eefe42bcb3577d4d6b9d1b1a9dd825ce9ff5f69ea62cd45c47bbe5306febddf3d8d72b14fa2a19256f99f38bfd434a8a65db6e89327ed096733ebda320273d81d755cb800ddd3bc41b0bde1f55a3843c0071e54928004d5675807b061cb490125aa44887a83d8968fead6c68010a5cf3a556df04995f78c40509951d831633ff2108373a103c456910054e8f26b5b11b116cfde4c1f42f2d46e3b96b650febb9e36787294ad77c7a6de828eeabd434afed9d0b859aaa27d9c7bc52b7f121726ff1f27d70465ff3f18effd007661c72954ef806d984ce9e47fe4611590e92013e6280b3a513280a50f8ddc6b5847e0202747bde8f877e85301c78c57989ebfa726236da5f472b4cb3108c912af0069b7339a412cb7f568957d45e5c0f7ee3516381ea606428beb2404e19bd4d48247b3aec63bb744e731ad1ba336c0cec2fb2fa07e5eddced1f2189b94780e26cffc775b78f7e05ff2c40d4b13a6e3869cc619f06cb9ff97258f7ac7473514a167a291149750e0dde383e5e3f49b358a66279c7b08ddcf02d3d8ccba7e8328be9e267067eb80016888a3b693e95a37b14ea1f99d187aa56a766f91d98cb6ef68e1cc8ce442687c217470e154e070e4aed15e279320bf061a1363d1621c99120df8ae5fbd2fc40fc893c49660dc1b86eebe86a373b9e978674c5b68b31208e51d2f639f670029d9ab380442f2ac7221a8f4a33ec2dcaf8ccc8abd4bf44889907140ab79b07d330b58359792e2daf765b273fa7e13edc51e5060d983d30ba085b684f2879da54c436bbf50f60f592b50d4aed693a970f70cdae3b1d6fa7f2e15920848aa35e0b752419d873625929ca170bd81a87da6daf94316093b7f3a9b5d3c4e0c238fda9bb44cd83d9e1d8a90ee4b89570a03c4c496a93f46e9ffe696f4fa8be7ba45c945bcb5fe4317473346198d021412333a4b9e194b525cd521905a174d731e10d4ffcd568c83602e9f8f870767992c842bc5bd1b6bec962dbd63ece0b1f7eb9d494c9b69c5b47c4af8f1ab99acef49db3e6187f1b457d42ccd274b1365be58b3fe9861feddeaadf4f3fcbf3acde4fc8c2e0e179f1dc786ea05c18f72aa667b73719c27940a2e0cc57e10e1a0acea7ca1e37a44aa01f080b8c8ec6ac541c79ca441611a49cd118edc3cf2bfa343a7c463a0edcd13a7d431ac1016758e8c87d8f585db5f391fbd5d9ca22a2af15722bdfc2721416eec70e289e32128bc8debfb65f598d8c6d85e4d9a756bba70a7352496b0e61a5b20bfb7d470a6ddce8ce96710082584ae20a60cbc4264355d33d330654387b9b9ac3b1a0a4941a0cc7aa74f25a0994226bef84a3f028b3fe58dc50f31cb9b2fdf6f66a6598eefa398b3641f5bf1595832fec95392481c9cd0d0f173118ee5967d4745633ba4790b3cdf0019880bdecbac3f19e866f600de33019261ea5360f1996c80fd2d70648b6d964f4a22af1fa28ed901ef6903fe992211b19592c42eb4049c7c0a986b0e3312a720d1f67cde097b7ae8ab77645257710f67d05ac6d9e45cc585a5d860b2f87f32b3f2b6512ec06ebaa676f5f9c998c89bbbc43786c9822f584c91bbd448c8d0340384dfb5b42d2f94ddd6bf0af644627695f9d43bcfa17b5da8233780b877dc7c834d959ba7e4fc68a2872ee945e72af4c7a01ccc9d61e614aed5545cefc45075284f22cf285125520b4791819e5d26b4c47ee7f1ba03d2de7ecfe6fc18afdb3cd0507006dd6a1ef24c17dbf37bb08002633c23d19047d9f933ed898f64e1b750700e8bb1dc089fb349c27dfafd42661016e8b409bbc25f24d99aabd767612815c775e4b8fbd3b0468c520058d9bae2003e10cffcc58c82d644fd3457a091870c8c47bcfaa8109c5c9b47180e099593b2052e1a00e1ef11b1f3773e29662eaa81eb23f7e940569ece374a3c0589b3795f81c0e48a47a4d648dde41ca693ea86a416856eae5ce86b26e4dc52556ab298f329f70442133391520815c88c99a1a2424dad9ff4c56ecddbdf6d4c40a6c56e3b718d1ce88cb2339d273a3fbfd578bb6347c929880419eca0c29a1a424e2f41df3028df27077a086342c3639b0e99ed8f759f957251b4da55c78914cd7247d972b0b9942b712a3ed33d538c632ea8c876135c324d5c8a5724de4bf1086a1e07d2da5bddcc6a9e6b7a8ede5890b7aa4c88cfbfacbac372173c39f9caea0549b39e91f1f4d5b588b12c128ce7e26db5ea734de9adf4287052050577a132adc8078c478128d09e493677e2a1eaad244eefa14ca05d2774928e222603c2f5c0032364af40eece3411137862c0efebcd377310a04e01f1cbe8b4656f0f073e1f985380a44bcd1ad93884bbd545a689057de7a2dfec5600e28202d8cc2e7caa620537a5aa336b4471f471e26302a7d4ab8670fc178e3e6fc023803765b469a6fe9ac5b58f629f0a92b1534bd161292f6527e91b6dcc0f890258e5154cf517fbe4f1d7e19b420cf8c7c7fd5470622ee62664b8dc95d48e5d82dd9ae2256813eb8b32b356be1b2af5d2ec47f57d158f713082274706c382fd166868216a6fb5fc2491710f4b27152a736a80b51211e54043bc1ac34efa366375f82959fba1ea96d3bfe43631598c12697b833208cb890e3ac0d5cc3a2177fe3d7831fc0932b82ca30e7489a9f03d6c901783ff8c35bf0f109a98a254a9dba4929f1bfd5f75b80aa8adc6ab892bd374c2ccf56de0e346e412df09840523fc8d43038d43e2daea7b75387aa3b95e56462302ce5389e9ad24bc7e22c81e4f7b6a6b10022998813b83ba418b7b11564a718c04493d42fd14f18464b6d53c272a4ecb35f04516dfd8c8a555583f271cd38228c1991e42412359f5cb293b10441ab95698dc3002e31cdb5abe43bda2011c2dbb9374f1713ee4f2c12158794ee8e8314bb388786d37b17a4c3cd22e08d4a648c90cd958b5bbef84be58de73a120f657f011fe2df719b07864ce94169bdf6956b5d2532685ad5bb7fa9d53c3bcf8d14c0082b36313b31e311a4629dbb8440510fe97543a775b590b7a024eeb5f37cb4165a797675b39567b47750dd69ee664862f04e9001b1d876a11d7be76be31c391ff9ddda57b4e4a66b7081448cbaa08f4d30e8cab65d59213f2512366dd8d7ccadc4da925a8aa6735d1e7edfba7a06dbbef4a004214fdf67774788abb6bc9b3468dd24afbbd92cdf4891a2cba0c41f18972127c2525a244cf711de1188f45072708f554a1d951c27eb7f69b3fd8d8b395d0049ca88cc1964bdb7f16d7f731d10b54ee8327d644b24dd76006084a068c19e43fd7475b33c60f40ae707f28a1fc0b0815cdb8f2fca0e08d0a442455d36038bd371c51ecabef8d14145091f6338aa811ad64f3c07e5bd91ebd2fe27170edb8cdb3cc3339243d402ea069362170e8f560878e36652a0f46c6ac002b228f755811b37efe36d00579bb40284ff47e5d266a60e6693dcaa9444939e07fc25d5e4aa5ed12922faf0eb0ac9467f4dfe95cace0a414be61f49230fed914da6a1674a2fe9b4a9cafb15409e16b51bc4c7e3591ec3d7f805b49b07b85f4b4a9fa60bf71831b6ef6a2718a9cdd39285cdc492203d9cf33b39c0528751a90f06173ac1004475a0b53899ca4468b9c46fca75ebd5c5c28873a8fc0e59ce7059af43a66c3b11c66f051965a19fb00ce27f33deb26df824c4d0b8b5e37eea1bf7863cbd1a90863d7bf5902e119bd3d3537fef9e631d93a3b3134a6f5897ead5312257e5b167ffce8635705b3661ce86148cbf9067e04591801300f2fffad6bc892043c916334974750f9fdc41c72a073d2bbbfd65e274cd72aa7a025df2ea5fb44b7b63952d8631f0d07b9d4dd7eb3a869821f990be65f71dfd515c6f66f418a26cb540db13e22028d321591164a41f79fa3c3582cfbabe748bae7bdf8be432f1e5239100d415cce5047a9041a3c3d2d3237f16b70fa494e8c59d49e265ba80d9fc8383433984cd0f6bb456c9ac0ebd687d97c3f33f49a68308946e463f23f5b8d7e133a2a4a9013650bdd313c72a0594a23d95abe2b0247de6b510f2b5df297ba20c3e5e88f27255c5fd52a099f152befc2a6f65ee3605815431c3beadbb657f3d974c5acf1738233ce6746fe159cf9c3daefcf7dca1e1a290ec9c65e768c3c9364d775171f5806f16498cfc804983747872237c51e55e4f181964918205ba1beeacfeb0ed06a165ab28b61e982d07abcac6d475062c9f78c94eb62322cff5d8cfe8e45ed2bd3ed50a09778d81ce833e5fbeb16736176f2ab1bbccc169475594024275112c3adfbe1722457ff059431946cc5b23f074cb6d6734d1036e6d620bc4adb0de23e14a00eea1cd13cdc5060d3176e1ad367ee1924975e782ed0cba04709664668d51c67b5cd38bb8f6708841c6b9e12242e0daae4ea043981ac907dad6acb2e9038d254fbc0880b922f10380e004db90c2b22eb800b0d0f644a952545ae7c37c5d87f80e81fa2f2dc2bc6a7d2c3a8fb5daebeba321c1769b085501a29528757c130e234145d1fd1d8a8a91c631e461fb90dcc7e923dd7db28c23aa2dba3cd3b870c20815ebf4f2f87c5d1a6521f4456cc71e68cc6233a5249cac31b1cae990ee39fd3a6828de79da84624a951cbcb5dd48c3426b6069f7246a7dbf0f17ff2aedb83e0750228d84ef736e29911fe53eb732432bca2790a24ad1b859b3c6895a8fd63be20dc263aa29fac08d27aecf56ce4cc637d0ac0d252e38db0fcdd47aa6f211aa1a3340d69ff6a0a96d723985a6970c99e201068e30f028feed6d08ed54a92a7f9b6f78322581d61599d0678b8cad99aca5c5a03675e014fa2070ac2e3d38da589e4ad96624babe1305d213bcb71ba563a996862fa7c02b56773d65eb38f7180a445455b9d014fbd6234ed840f10e2d3d8bad4086c66a8c322fb0093e0d516dd1f3a42002320f96e3982fdfe88cf2848681f2d9eb46a866c3224fd138c14ab6a2bbadb61d8fdc6381a4cf296af1430ed9d103830d8737cf2a74fd43b302f17e6b775535cb9926b269e9b92569c8cac8304ccef4bb673f7a03cba2aa4f98f230e008ad5f0f674a7bb79b5857436ef6c4c7cecc1dac571f96fd49df65687486dc59a323c29027956d3e8d28b49720caf0eff8cdcde41285aad2c3cba5027cc434e105e0b4269314c28fbc1e2027dbe6d3a54f120882bcc230a8d1633a93247a5eee83d3b0a105d1c799c7d7f41b556f47d41cbfa05f5d62fae50af80f3f5009fd5dceb225e170b48ccef07ec317e7e4d4420103e240ab0f846e90d70b9ef6ed91749f2f85253d6d46d10c0fa17b9a2b26f354ffa261f0ed6fe41150d6308251aa049baff65f2f3bede5e64128fa8782e5e44108e1a33de75c747c1a1be2887847dba22f70db624f7b2c28c78b16346842ab273e38e57adbeafd0b5dadb495eeec6ef7bd251ffc35deac1ba7d7df79f13dce44ba2097ce82fdfcafd871fc286eb9dc9f15ab7b10abb7d661a17f27387ecb36bfefb18f8ebe9bbaa202242517875bcaf1882c3148653940f7edd79ff7220af0f91e62ad4fb3829fb4f1b1565ec660584fc500056d38fbddd37dc46223fe7a600edf8fee83326f14059b76e05b946565f538f9148c5330ed17ab7031ca7d53ecbe073e20e7d5b5b0bb1585588dc534efbd0b9121097762bdae0dfea7aa3c8d197479ecf028c39b9175eaf844833554d4d4eb571bef043cb42079e4280704355f5596906cacf5ee3e2c544131867ea7d445ad8843fc9cd14c761ad71d19d94bd3fc53b06ff32097920ac55a96d1a4d2bdeaf1fae35fa97e00f938779a6d9c37d9846b705409a8f1b509a0c573c552d708e7a25e72a5c09166800bae57e22ef36bd7b608157cad56df53e06656f2f9d58c05ed7c954494c8cf1993a7995e38f9928a99338d1fce9f74e3536ec165b98263f6b3cdaa234d527db7712e876126dede61c55ea93a9c98c04f4977b80cb83874293979e236a209cfad5773e1e5f427931ebd4c10f3bbf424a3fd5b41d92a8ae0d23bef1e387818b4362a4e7d5d1d76dfd922510502476ecfd23b5ff479d0413880f8f61afed323dac6d575801020236ec65ebf68a735e9674468a83a0f39b8fbc061381403bd2bc58826becce2065d3956695c04e45e52d8741c8278161364b01285994db3d8b9a2fb444dbe68ab6096b19eed1e17d49d4cac1d2623b02ea37575a222213c90f440e93f6e1715b547afd864edcff2c5cfaf0823a689393ab6ca02a0cd5d01c7f56ae4abdfac6a9d86efd120115115e5932f78a18b9cfbea5f33f376141705bcfdbba42ff90bc7e8564b613aab66bdd516a4ebf4c5b2bdd7534dc7c4e218f0093a6b4bf42bf5113f912d3a4b3239c5b680aa9d461b6fa1eb287c4edaa47269dc15a606e72fadc4284e2a0bc0265a98c32f77f90285cd8deee688992e50c83c256ce3422b84184e310383f292e7002a5e5252bbb8193f01e07666e4395b55244be984af2a566e0a52fac8ba1b310194523fb244c67bb2287c0c9c337db2cbb1e4428fc8344e8b8a314eea0878a520f52d7520366ad462f15472722293aa22d83be9e9d84462837550356a83f17a7ae7cede52c247ed0dcb5a37f5592756a63463618bab81e34d77aca9959a824e395ece1d2d8ae99082d9f675d552c6da8837542de3d27953e97165cb2f02d7c6fa82230ebd08a66c6964b2c891dcd1bce1e06e84ee2b023edc36e3e2d1a1f5a7a19c345bec3fb8d5eff5c62743cc4e37cfc9af93ad5035e30b89e4495752a65faa27629fd4534389488e05337ebf9c590e5240680922ef4814c96e6652420e2089b1cfe714420c6035834a86abf64924a8a153546eb43db65d4a585646db87b13676d2ece015e2d0c205a3ddd8b376b2699ad0f22b9a5c4a485c8df55383df77af43816b188706fc1478cfad4fa6ff6a1aba78830cd31c060aac9df50fdfe100bab4225b5dccbd79ca07365303c7e1b72e59740ebbcdf0be14846c966aec425405f00dafd79b8e9c68e3a0018ec8e927a9f91f037875c0b7f048cfc45ad558df3537793a8581b39d976b282a979589e1dea14e55cc73cbe643fe54d11f012d8f4d7ba7ddc63c38303ba9fe8564c719a6a795daff0a615e46a224ce7c0e5c6d284b1f26c7c201444d078bccb5a018f1952452e54f9850abd777ae45169bab217127e0b4f53adfb95c7d02ab98beb1dcbbc49156d71d4b98fc39f3f8ada241c4836ec12617c554d746916f29e1699b1d093f42730c2729f98f3e99ca087e8d80743c223caa85930589d826250dabdadef70dac5214305267735feeb964162d3042e64e9a567745ae6fc78ad393a4799e562be02b887dac2cda236e928a69721d19b0765a65f890b208bbd12f3a0c84ef115137ff6dac7ca0f2fd84f47ace9cc83b455426dd9cb467571c11debc9c7817d7fba601530b1e1e319b8b0f1952778c0d4e7251bd9993e54863c257b63b9b7b28be0d2d123b34facf194213e02489b724f1ed7a4c8da9da3aeceffbbf8c37f7e9802fab7dcb2fa1c56fe27919e58d692a18ed9fbc4f660714cd173d00c6a7e6bd5f88ef80ae47864debe5343630d233297de891531c4242eb92153cf8aae44ed5cd6bb24c9c1a54a7b31bdc77a13d606848db283ec65905906cdbdf91f75b3b5fc505f4fde9940e53fd0c82b912681b91d1e57e80c3890d1bd4b92f02bdf5dce3699bb284e91de419cd5be5b63a64331c8ea879e4bdfb8f7b29790744d943a1163de9632c20c975a663f36d68869c0648f77102a64d2e55413abb264d480cbc66b279e0ecb5629fe74c125ff1b27e2f6a88a562d1e30a7da1f9be2608e486d95ed2199d62b54ce20cd5cd13903d87c4480fe29b303f97e7a5a0a2be6439969a082364cccb5a261eb645addb5140f4f3919353e19acd395479f8d2dfb12e0ce8fcd5fc4c49426c6c76251ebe038f496fdbbb491ed755a2787260982b7b64bf8f69cb010ef7f978f21c9411dc61061028aabe01fe847f6573b7fa61656d7417b04adcda485ecc6f40a7c53dd3b2c7fcf8a563d9f3879fa999b69baef4d116d293357cbf7a74edb0e6e1bf093ca2426afc626361a7749d1df93f48a612d5633e8c2f070d8460ba68bbda1019959c3642f37409765ce18585d276686e57c471d5cda01027beb9217d96ce2a8ec8780676a1b42c33c1c155413d5490b65fde499d684154f5eacf6992ec2f8b1e0fac564f0963fbf46ce920ad0b3c906531bd0dda0d6e22ee36d79d8434ff5c8bbab05cb049fcdb0c653b43263a6cd0c38ce20134edb441587da7f70f24edf5af8f7485e523964be4c040cbcabb766031e957ee806e27e79edd5d6ac9838814f0eb642c00bdd89c628978e58eb6c8370cdfdbf2eaa934cbb73f937abc6b9352d3e5ea6e17f97860f267bb4185ff0e77ba24f91faed0bfaf6c1166b04337dccfda98fc5bfdb910498b41cce9873670376adc34343a92d0e55cd5deca2c0a8f802049995b589b270e18b9808a311a4d44e0d488c21ffbbd1a083234e9c8497f099100b41a86a2b7239a2794599565a456759ce146c1ab697f8889ce271a8657303f1b73da38a6ef70f7511a28f632a1d32c575901bb5dc3ba47a95484dfe0370facc5dd3f3c717ad6ef18a42aa010604834c0beda89342b2baee47817d1ef77204346b7cec69da93793ae29aacfbeec33f6e04a9b22dda634cfdfff52c596d3d3aa97e83e66a3e7425378cf7db74ffdf025750d741cb8023367624c1d64b3ec2ce7d6b180da6ae652f48f94bb481292d5b575f55c7c92f97e408bf8d275be305dd40529b30a1c7a2425baeca08db9fab42c67822624193270115adae9276214cb90375f3a48625e2c89f5e4291cd56d0c897fbe3565b16954297deef1491b5666ecaed4c75740ccc62d6a30ffc5db1142a66aeb9c84aad2f3fe8976bcd6df667928137cd3a995317075cae3f4a4fb05aabc9f4de1432798999647ce7ac90ea702aa16bf3bedf4e4d8038f610e84436220c46009d55bf1b095c471270961f7765dd4dec95908eeab7475f53fc8e5cb9e975a27962ac8afcbf787411e39f4d58540cb3a349dab00ef41777879ce36dcd17ebb2c21504d95cc5d1822531246cb31efb5e1b6002e7ae1f7d8dca8b1594ccd6230fb5ff6cf30b345f5263a0e763e069591bcb9ea84dcf97dd191c2bc94f85288e996f725f827130a0ae78e1e36c540dcee008880065659a208cae0000c26ab73004e2644a17e3b2d0ca05d678a765db7b92452e5706a1b9ffd4f1bb2812493184e30f7d764d819f10d38bcb0202d4ec25e23d8e2e4136d7a63786af9aee6f26518ed97c9fc0c301c56f81d52aced43cf28afd2020d9bdb9e9d02f6978aeb2dfe2466aad2ce3529ae993ae677abef40ab7a46a3efd8c1a2311cb239313ff7ce0aee6fcacb41f017d3d9f58ee5ed828945b01c46377e97c8bc8869ad1ca651f2d1918757b57914d3ef86b450378709a0cbc214365f41dc66f3db6ac4e1734972d607ef60d045d45031deb298b028a7b032e1bbfa996e603d89b950d32c60ba41eb92b4494c7a2dd476561785dcdad813fcaac6848eef635dc4cfd67edc5c76be7b08c3bd3f3ed7e131f124a9538e9b1bb4bc18b7e60fd08c27c98bb79a69c614b0ea546a469359581693753d46a4942f7b3bf4dca61998a0686a8ac3ed8fb16cf58abd938146e1554e7eda0e31568c2d1a0e253b55f0a1b2d093be97e1c9c1fdc3d275ffc9af4047831bb67ca51c1bca07189cfb45977bc1c30f729c4d26acce6b649f2f2be1346e1b65b07a0f55e240749af61e9bb4193cba7265a1007c239186ae73236cbdd17b3e90b99b8114d49a03058e463d3480543df15d236edf64c68fb3aac0eb2e807122d81753d3db9bde5643eacd580e93f87028080c4cc32644efef38e855d394f288d883735ad5a0bc965338cc6ad9d53afbf653191b258dab05c25e08a00e021983edbfddfb3940a00137c942da9e554969d52abd4ea7ff377a864bb30868dbf7bbde957218edc6d033d1ff6611eb3041b59492d8c284326ffbe17b7c690b5f7f9f21e395fdef5c972f2bdfea6f1985f79e8ad3537e23448374ce7771e07b419c2d67fc4f7f6e755279d6441ec1ad82fa86d639047ec511dfaf8fbd62fbd4cb020c290e16a70ad1c8e2477055a7972227b94962a65e15e73042a6fa6673a6954d3c0f42eb1580feadb85e8f7b51f2e9da71496511fdd60114c0b6df2562c2b89e4750d66d1b24909c32361cb4c928016d9e206899b8154c623ee483f564ad8f694154713ed63c1fa781204c3071817ed4a7eed0a7bd22d339b831538ebae0f191c27e909f4174c0853bebfdecbbb630615d8ab95b18f5a438b68b1f5803c3fd9c6dc33b597f3d0480d1805ea630ff639285f8f8541625cf4bf7d75ed7f887415e1d09b42e86a8301911f3db3e6e060b53266c63ed99d2ab35306aefb0d80131f7d3ffb3b2bf816179bf0efab5ba92ee43122198a2fb4ae430d1b7ab567e93bc3e99e0093d7886b31a5a73175a643530b680ce4c2056ec7c6f4dd0348848afbc1064d38ac42dafc8e9f3046ca8e3296dde748132ad766a89a5b7f155f0371efc578dbe513c074abd58eb660d9abc51a28fa896160588349282ddc88057673fe0c16ac8560831688bec8a4f6ee2ae0b589a8e0daf65c311cf3cc0bfba89ed1ea008902f89e19757a5f828db1a98b5e3fafb97ea3766d06b90162e0d1e48964061e11f555d9c5c74d6f1f4a81bb59147eec1723a34645277020f0555fe0ab8a7204cd2dafa33140f4f22dc9755e232bd80625cbb85a33598df2b3eab0e8acc87bbfbea09c12506c192ab7e41df12b48bc19b670e5c841022a90168ef7aaf0a941e3b84e927219b5c5a5f1253a0336cfbb297423c8c2c567d7c5e2d8a59d233b9faa17407e8a75360f7f2d0b3e32ff6263800a1d39e2867214e649c7324764f84d5e9b8782a8ed802161abc0ebe1c068d76205321c6d6f99de65e211bfa3c003e11c8cd0aba9333b3ec04b895c22cb4754afb19754dfbd93f7e4e16530e79ed1f77929aafdfd56b5c45437f136fb426d01c64f84422db6ee14e2fc0ccb8ced8f5f19740b0601af9d94221adf3523d164665b4bbbec8ec618f4670f51431e7054237dc0601927693594d7e76909774e12548b983cf59a6dd0548ab7098192ca755fa396573718e70d61ffb520dcfef0443702159aa8bf58644408d25802cb23a54bc2c0b7c3da91d4eecd217c8305aef3485ced996b2e8a9e6d93e9f86ff1a948dadea2201665cecf755ca91d36afad2d8f49fd4c635a5f47e634bfafd70fc85dd7f9d0f206ef4ecb13711db766800664ee107621612ba90cc2e547fdb7487f1ce4e4a4457ae48116c0883512b8cf1a1a3b533dbee66cba247a4587c32a42742c436df5321bb8ea3e3c187e24154f17db2d879cdb203a985c49cc0ae0328ace0f42d4c79f58a66195dfa19038ffdf5d7200eb658a376d10012d981b604a24c970f77282a6ef660678a46c238244b24e4bc6ecc58ff83bdfa7f3feafd1e5273bcf8d49ac18a116bf760667e0343d0979767267a4f8f560c4e3d00d5f1c5b9352d087806d98080f1ead7a0a2aca827f70b9ee47f43a978d67148c54141619577a01e5e34cfc0d1133a0ba3400ff88d30705df0477a49a2f324afd026668b1df76f62f481438c8ed254b7bb0a62a89c19be8bf9377274f3f3570928adc34d06c510aa3f94c8049ef4becc11a6549e02be5a7e268fc35803dbb2e14b52b745e64b0bc84ed570089906af25b94c6275058eb95ec5d48bd52d736153084276d66d37c151c71c572d8e4c59caeef50fa6b107a2782a2f5a183cd2eac1611b4da0f17c355e366565ada01616d28390b3a184f03427e296e69d3480176357568bd424e605328c4f034ed7d47d4a2ddfd93be934cc4ad97e3974c428f8e88af55ed85d9ca9f5a15789361d8fbf1dddcada7b4964ce12bec954c2b07800256f8aaca33a3a8dd578d3fa88565eb7e8865f8b6a2686b3fccecb294e83eb97d07d76e3001dce2251b07328906181c5d8d5da59d78f05fa2fb64d13fe33aa4d54b6cd3952715c9f67d777a6b8024099d9c849c1fe1b09e5c9bc0432d4a2bf722d42c1583e67779a0f229b85dc73459e0ecf036ffebfce54659d5f776fd5718eabb5ce79cb24f9d9f51085614d02c47dc0f89f13d50c5b2f5f0292f197b9e08dad3099531682351b803f1cf5df58a505c6d0373a47526e43bebc997bc0ce52f1d8782778e4195126126663b96f958affbd0398bd691593b78b8c4fcf2fad810a1e2348d1f67df6c5ded6e5d9c4c593dfb23736d71fe4872bcc64122af0d82570bc5483aeaff5adfe2fe56cb818d8c389cf5bde0b493a245211070fa8d15b6ad715d3ba1a78c3e833288ce693b584a690b8dae45db3e45575aeb905002eb14834eb1f3b0d132cc8bd8e9e6eaae0d91ef04d4586e1981173fe3a420d6bc37d97301f4598127287c272d5c3c191e999b45d54eef4fa55649b88c410028afc36479a0e5f1d5b05cdc3c5f49ef67db1b47f873d66033a5a6609e45e1a70b86c3fd50da09a989626bad8f66fc051497c46adf9b84f153bda57e5790baeac095420812d8c5cf10d95a1972b5f881f4ce899514d7175dc59bcfcf9a03f8f4f89840a0dbb1d7d9e1f2067e55e8fa202da64a98a0150186b9c2543d17e8af35cf4dee9533878135e66ebcf7d0d0eafcac1a6f5c9ececc97f564a81973d384f4d368ef6807802640b332552e7df89a56f170f259b6fa21b4b4330268c483a239304e5d3977b3a4b9bc73665e6509519de195df19bcbd2865a6c33a8d31024b0db3332d7c7bece9c2c6748317b9432dc3d7d67344ed744836dc9aa9e47f9a020c89b3a85c8fd31ba319a83f6273ba57deed0ff29a0384fd60426dbf5c95fa9ca7de242e5cece5cf4da35d7ad7796ad51ec8aa4f13cf588090ec6a5bff29a7da8bf339065d0113bdef61e2421cfa9634a9064c80284312b59ce2efcb85949ccf7258812321910e4863bd725b8f0b00c6c4b65768ed86e1bead79b55ead99dbecdc85fd849a8480ee2307b0cd9c5f46bc06c02bd7ec2944c49979bb358f67c5061d222be8a29e205db5318c298fbf4a9c3b3380ee0ae8f47b9c18e20ecc7806e1475689c2a04b2e0605cb6d17c641db283c8849f4358acabebc3c7a327950057186ac761af87f38ec6568647f07f5f8d27bad2ee7b6371b9b01f197c47abab020722ec095a03e6e47037c02147fc5bd6b2198f5fcce79ae12cee670516a6cf5cda7ef3de8cf3d3fcab45b0b2d5fe5c1838297b98ccba9fed40e9dcaaee89bdf3ce8b9e581ec80b73a64fd90fdddb9f85e644c0dbdc1afb78d91ac972f9dbceed17d16407e0cdd8da02c259750d5126520987f60f16131dda047ad717dc98c99875a8f8f1b571ab2fd995f43a73b7af4fb72eed99c32c21e6b96f37fd8dd47a36c450eccb0fae9f5a5b2e20b03315f9932db0c72af2a833e8e746c80242433b8bfde5a32dcba487631e0952b2335efa10e12168e0ecc263a58c9f48a81ffef7b4f28b66f5201c85d89c2dde413ff912e7d7e2fa8583f1ebcf56e47121b8ba6e3d019d77dba0d441b0d043089c66cf0d60466ed608ed1d8b79a5de68aa1e82e8e2216f74f020f3f18cab2b4ff27da9deaedd709bb2c7206f48c5a3f7c79c1fce460a8837f9d85e29052d1929e2fe75f96f427cd0f4f7a977fe8a3069bfb80d542ebf5ad52c2ea3662c2635fa542f5baeb45437ae123c68ef1aedcd95020cdfb645bc31b4afbbdf8c572e42077bef74e571a8cd6ffd4eec7c23d2101e7ac94f6df08c5f095718a13ea4641981e252037a0e19a6056a83d89aae1a22b42a7d57568cc709aaba2646d841c73f2916cc8e471b2024daa4e351e5548e774ba38b613464633b857d16730f46bca4766a514dee87cda712bb3b22c6a3b0bd2a9d0c725e6ed0bbc04261420999de95cc3e75e726234ab68b9e5e04fe492560ae2abee960b3c418218c963ee78de1ae73cd1201dc634ef7967b1229b5fca84f183110c0b8956b46f7f06dbe7cb320c3b42560d9ef3eb72c475535c0275e4714e6eccd537d379f811ba7a1a5f65982b0d66244fb359dede3ee53ecc7da6b613c0ec19050d0d4891a1eea735c3949970b4c1c5403fb553f09e90ccecbdc21d935dbcd2be18905c4ace8ce4b8705a79ac14bc614f19ef388f349aefb82f363d007276086485e6a69e80c9d1df37038b3c3ce0cfef5a7b193a94110df1853fa9ef6d67efb3217bb29c608fc295ad064446280da8155156bfe14825ad53e137e977d3847c3bac32bdccd7cc50d28b6767cb0963f18a80c2328e1aaa353ac65b87697d3520ed4a3c79c0ba74f92b3ebb50854262f9f29457e75ae4bf81f53ce168558e7e4304fa174ec838a9786e2bf2f29934bb0beeea887c3d89be3d215e92084b1e30d7df3b79cd9ce200a0031c6a900d8347808d04e0c7b04dc4d197122e0009deeac1398396b1d3060810f09efa13f12987e9ee21f9db07cf6eb9d90d4d9b2b641803b70c66022204003232a525db665adb1d3067eb8936f417d8392d7ba9f4e2c3aadc7e578ce4728eb1c8d8db10abcffcb6c1f57c86fcdb4b13b877e34db7441407ce43358eded5d23a3ce93a9c18589a60c0270f8459bd212bbd34adc257d9983454e7e32e2a5c35712e69d3372a7f56b06b5ffc5e5d8e3ba936fc920bb2bd16650f19411bd9ad11f0cade95cb402c6e3a6bd13017654cd2a4437bf522b342b8b51123fd88abeb0cfe025ba337164190e5f4fa8fa7e592a12aa3d52143825717a145a288989b398b28dfa80a2e00f7ec7c34e24c911aa23b961f965d455f3dd4832edc1ddfb693d469c919381ce99aacd67b721a2fa881f88065d63b5c20d764a8b88725684dec0abf0e8fcff9fbe63c084e99c4cf63b5ccf61b6d1a4aad2f92433354438d5cd60768445aff7021edf19a11d91ee4ba9a6de188c9e2629e6d1b512182e82c7826195e6d2aa2c1772edeb6566e2ddaf1f66632d660f303d4d33214fa31da3f2dd3d9f536391f0295cf177974267c496ec6a865056ff556c4102c7ae4dbf240b7a9beb6e3af203269df999b0d308ca0128afc7b30a7ae3e8296f7f1abfb76af4b052a8b67a94bc55d4883af80aecf5adccad6d5c03d516cdbe99229707bd1202bbb6ea5cb009ed1c3d269772666587c0d7d61c97d944202f43ad31b3cd3d391a7ec1ec78e28ee60f5a12ea3db7f48bc0bc299e49bf0cc7d00c2b6f63df9f80d53915fa640d58dc854ad465dc72d200d8de846eaf686a64e4cfb5eb1036b8074acb7b22a5f31df80b48bee37c68ca95694167cb515cfe4b2e99652e22649f3d67a14d511f847a0ac10ed42da41184ac323cb3e9b23c5db78ca652064ddbeee197d20b2021086d05d45716e003051be296f1bc4b3e4ed96fd2cbeae1e3b71448b9da8fc2c76cfe029d91eceb18322845677c8605bea2945ce2d8451a676abf6e2e0c798b9b5b127e521d6a6340be69853233d86e88151d78bdfb9f5f224766a6fcdb351b4048f203a2ea0e174f3735f223235ab2de11a417cdcc501bedec3f10eb2901e468f6877e36742cf7e2c4c0b822ed6ef1514b148c1bab52d7c967eb68f097da598f6735261ad9a9013fd1065d9448c863bc51b3de197cce89f213cea9fc2ebd2db35440d799e963d11d4e3afd97e4fe97b10be633fc81720360c3928f1e7f8d046e4c85f16a13cdd7b3ba48ded6371fc5941e9a7b63f010dbad9b45a35af2d0522841a3497765309b4539ebbb0bb1f2dfa24d28ae9abb1d73d8ed2e24c81f67ebf78923ac33600961e36d87ddc1e80800f1af2da66676230f3078f580be3fe6aa538e443234098d425fad289e928e7cfb7fc273598c19e883604ad9034252a459f1254fd3b9d581739fab424bf377a615f7462befe2f4e8525862c2b269358403b69d78bdd451247f4baa500842c4f8a1e4cdf4386198c1e09b63d457f73d08ae6f129ba4eb807bc2ad006dc8d480aa99e164d2aa296fdfcda454f346e2032017da760c109ab903911f2795de3a36de0fef091c485e6adc3a8cf13bde5ef830cb25c993fa5df02d00652a213f198c79abd95d15f4dd7c1acfd7fd4cb6bec00a78294bfe1d07b21508a6b6cc79cd25a15ca485ab60177922ae799e00d7fefad851b0a8c190dcd115ff2142f43883972954d308910ccf1f9667aa3188686e17c0715d5f9b4c74cd4403d4aacceefd1176bc18bf582d2b0dbfc3fceb6675fff10bfc116dfe9a1ded62c290fc3dbeb99659deb4a238692edfd2d6ce0967657d5743c52218c15ffadec95d08ba1c58667c16016d08615baca0316b9a52dfa18f470b4b379260b3f2d201227cb2ff11c5e05c4566dd5788929be932089ac44c7af859d936c50a1836c636bea2e0b5c8b5febcd7adf05460092358afd3a20d5b74b6ad90db42982cd578a1ebdfd3f5a6da65a074d49e17fd070da54f09bfb5f14f879229d95bf43817c91ed180aa51b2ff787def4c375a8933c045e8a75439d8a92c01035457ca929e8bc712c9aa2d5d8aa6b236a3adb8e369db47d152c3bec46014f72d57c4e47a882b3761b76a652f2ac4849200d3ff48f020ffa9525f06311b3afb12025dd91f2c6ee89e7f15c4f8278152deee078133e37f3699b5434a503b6ed7cb483e97e07b0d67fcb8389eada82bbf7d4bd0e90e41806d733cd34085ff95090d3fb58d683ff70d7d06d32fa28a4cc198734b196817e9dc219f2a6af8e1419be074882a89ecc25ff15afa2faec7ed0c5ca0a8124962e96ee19876dd9f9071e9e4f25aceb24b8e870d1bf5d82689b39af7022ea24b2fbf2b89ae40f01384e27b4e0715cd5b0101de9560f75b9cdd86ef1a96245a19a806c9e5578adc3b75e2e41e96721a9bcd9c700be90d0ce1589a4fef18d8e0ee2cb39901c9b9fa2678f78ad25ca4935cd2616eadef3c86aa810d44067bdf3a5b9f14dc37dba50e18a3dc8fbfe9455b69a6e2487877db4308f61b95c0fbf9857195ee66e3cc8d9cbbb0b73fa4df2870b803148a9e6d760ce4dddb58aed0c74ddf511d12ae0932b9e69984b57c2bd947fc78a33c44be94d9270dea946975165aff09d6e4ee2a9473a756ee414c1b9a16665c2e2050099ec5adf0e133f509bd57ba75bb1398444d72937383837315fbb250942e47e2c7a80e1d7e9f4c08e58afe0deb128bdedaee4dcaf434081bd21964bcc84c553133a5b63b5adef5e9fbf0febb31861acf30e2acf21cfc93543f94a5ff7d5298a35e82d48ce82c09aab9ff98adab57f8b2c2d7bd089b7de01ea4e1f4865bccabeb1689e502e21fc6389cb97c70c1cb376080afd5f8dee5beda2b1b33aeb3e959d7a39ac08a047251d1c1def1854df6a6e786a3fb8949fa7daa4e59b255b3ebb3bfa7f3c8b3c53523fd267f0eb264d679793d4ff0fdbd652c892fbb7255bb16c828267d97d91913dcffef246a136d872333d258d1438aff2eb640e3861f184d4de6d1e09faa2dbfac0844762aba9dffcad74abca6b2bbc492fd33b088a98b5ba561b84d6c4dc0a47b9532d1854dc56cab09d6151a49b45aaa3d6340c2696f7d919a166689d29518961ee6c7383b8d8fd72be838f6e893f1ae2fcbb732d0d7c0d020ce80bec155058206ecf33b0367aa0527a7750f32b00a64143ce490c4cef91b1c8e1f4b6e219865ae05a2048b2156b1a92c37d4022f5f0cd278cf1cff3a68a697c8dec4e54135090a4b3aed11ef97b2f9363cca2656b463ffdc3b51902cf7f6afa566b331f6e77a09d47deb06e06cf0db1d538943ddf0402718a2f1869fa547406f0648a4e194a20d33e72597ca7796383fa281f883a0c2f03b983f3661cc3913d2edc2326b3130b4e1a97ff6e05fd119ee82d47350046847150d388a68a9b96c27684a45fc80550ba6d039e34fbb6410b799c604cc3cb44f5e618721e6b52c67b2eb2d6591bdfaba7a20e238b64eb5427210869c5531fa3d49a52b93e29a86cdc631c0b733f4cd0355850a0cc8295b6bf63be011cbb9517411594b14716f1bfab92c7e518df8a5b13bb096d4a7fb7d1f15b8d56c011c1f217a0f0ae2f3f61d9b201cd832deeaeeccfd943bd62ca5b91220f3071aefb2d52bae32b8fb65f26311a8317eb0a7bbec808deb736edd6b93b8b3916aef2f32c531111a37645a535b9d1e42cf54e49ba9f49191c63f07dc706b4b62a238481d4da98168f9dc7ab86eb017046032d3fc1d602a0175e4281944983be601566500dd1f474a97d4964f9a74c514ffcbb5c00e498c5b0a858fa7e249f5434e362c1bf423b14d3cfe39fb687355be9fe9133769eba1fa23fcacb34f597d451f95034ada351e62766f91fd3541ec2daa092c97f4e342f39c2f6322169ec3c224db3ab3cc9d336d1b1eba311b3f68b4c5807fb6cc1d52c450f6c0f2bcd2d1bb4014ffbf46e128727304c857bb0c58013f8aec727f9c49a18eae9361faf3addfc9b14c3451a3c0c4d47816d358006a9adfdd7f3116c563f4c36696ec62f790c28a2b178b85f765124f78b04ed35beb1678c3cc32e97d317aa6beca777cf0a7923f59ee72e0a2fef5cf5b14a342791137bf1d87729a7bae356e0b6acef2bef5fb7630504a7ff56b4163bf31c0269499788141d0ad196aa03245ee51e9174f74cad2eef6669a5fbdef5aff2745cb1eb9d5dd73acabaf52fa24e753a78a606dcf4f5ad6955e58bcd1f50ed7092e7f2c892724f4bbc8c6c3f946ab8f0b798d4a0cf71c9b9b926da9710d8e5991f71eeafa0d59ea57df7e07348cfe0d13a6e7e381d59ca2b771d78dd4440e5aca481e12d771aa57acc1b0b01521f5a60a6f0d094f12844efff36e606d77611ef2c1f9caa7b4db7f083422f1b9495e76d16d4545fa367ad53634ad9651a94d7117ec9db9e440e05f43ea1c8a00732fa92e6194caa860c51a2f4b8f1b1fb47ec83bff7d33b1ed64822282380d1e0f918d7f4ca8806fc8f21ff3a71c6b6f7f64e718498006f5f4b41d856883639e7da714d438de47b5fb370e272de2091cb972e9c42a37ac7d0a214095acc80dedb777d6e977526f25e9e38664f72e6f02d3cabfe2b5457c6c81e1abd8a56cfb380a3af3a2d44747b6e08eb8329dedf0fc8af45ddd81f6ab9984d04c80327182eae7119b0a9da4f4f9365583b54420109777880192f2032bf5d12e0e97398588ba08e141faee0f7c34d901fe0935a3c4f86bf1603f20c6852f4c36037c98798d9eb82e78dbbd8f43caac101dcbf505dec025536e0dffd23f6ec67f2f1d1b6b0dea45b54a3bd7310d96f4d3156a484e1dc6223eb65071c4f02f6847d9c6db347ef58eb1132234934dfeaed316c3c62db1958a1c78c00ee5cb215eeb059293d27ace4f714c7b514222bbf776ce92e593d214011253afbe4a8f4b0a1ecee64e690905859fe609762c37d593a75fb65ef10b8d300a739a93f256031dd1a69de36ae91b4e627c798b38a49bb3e2810b1488b39b694b75c0283c6145bf77107a1e6f6a7fd0c945c6a7136fe5fe3958f601f6fabb6caa8eea0bfe224aebbd61266cd326071c38d031ec69ccbb5c01146da6e862f06c5dd82bc5c4c35e5d9b9b1662380cdb7ab5c3b1a7af0f6563d3a8a0caa5f16cfb9567a2f9048ea90cdb52a9a1d79b73fc55396b51f75e2a46b0082d511ab9012986be1b7e254806555d5ae65facde4d8f8a04ebe935f3d4c41896492958e1db7e11c4e2aeb5ad943c786ac5520db1781330ea0084ee22f03e2db6fe1b7a1c1303720e69db32029550e2ce3f8ec5bf72f26271b723010c7be7cf59561bd283a020b98a4976f27a5820f73d291cd748b1360efbec1acc6ff5a94909f9bb18626fd70f1e7183a3b64f42ae94d140b9297d255deb3db4aca1bd5273feeff3ae7a0c42a0873783e5ea7fc7d5350b8b1fade0fdabdaad69caa1a7703e50965413bffc8d539ba3e495a0a909487309c9969a7546a2cd332a26492faf85cba0caca17c9811cd0a93b584976a22ba085a62695be459d024353ac70247b4b6fc809c7470037f4fd82f1fd1a3634dd9c7f0d0813a63d57b95dfdb6911e11ad062c9d0348ff335985da21468b37e940cfc7d40a45c8c9afdfde279bd865b08cae02b39ef792273ff6ae7ecc7e3b893aee1391d8f9b1135e6bb670f3704289597ee0d6a4de9056ee636eb7d81c6c9fc2e39e5025fa8d64f298a136c49bf1c3e4f6a1736962de056030ee7fa63ca69998f21698a37ead9dab9379d950e9971ea27a3c62223e32fee25646ea1a4ba498b3c70a202782200f98148650d3b9bd9409cd2cb2ac70add82c1901260ae37f243688b6705b83e4c78b08540bafed46d524d248c2dbbd6fdeee606ad153dbca4dd18662958f4e98c5c77376faee6458b4ae98dd742cc91d3d344499996d4670e109cf4e432710d0b24e852ac1a3eb648e40cdbcd5e90b5d0679f0fdf10f979cb4c40af6dda5cf0eaf47e8d5cef61cf6cd358e996d697d1f5fe5d1bc3ab77dede1ced39a8d13f166509dc9bdf8e5e5f616f3a29a8454372dc8353ff6af277e5585798f26084af88c5a6bfe929aebb99de6e4305dbfe37e7774eae6545d3b2ad30e7ab0a8bca82af6ce125116ddd2a8495c0b7a6124374c50f274222c1df4e60cbba08e3bac182968b8397576bbeb36aa9e47941a91431869c69e95b92b0d9e31d6c65a7ef6dfb58998b78a8125c98ab2fcfc1f46de8c7d13b022657b702e2703227819223a05b27c62af6cfceb4c08457bcf5dd98610e2baa310c7051c28a3ed12aa0fc1ddc1e334ee7a195c62f8d18f2343c5f7dff69d0c40dbb7d9b03d323544f57bae1da997a523234f92d3c5a6459470713a221fac957e3b2ab6d1c098c2fe6a371e9b6f0cb4087a66c84f22c9bfce891491f9f5e892708e648b087e104ce57cfe46ca2ccc3f8292ad1ac7c8b615fc190af52c2230939868b958e8cd1af7138f5acfd83be15be8ca2d9791bb8b80290c3deb6c85c661fc6356098f0fcf6ab1b9e7a4fef276ee79118c5b05024faa91045fe32c3fc94662129ff3723acd3a318618752bdb5eeaa849541fec898b66855ebe6dec4d9c0f71af4cdbb2583ba9942f576f2b4bc6d3a38a0bf5119ee2c7c26d581fd730322300c8ed1f9872407be6528a507f33a7510c496a8c8075c786d326fdc91976d172a738e3be703ff8b742e6a769fe4cddfa28e7697832bc72c9af86dc5821dd2d606e49b1be12de93d1c4e2b04044023acc276d615440c0b2571ec5d759e2b1d00846c41f48550a3769135b73062c87cf0a015a7e268bbf8d37a0cd6c4359c0468b711aa8e8f9e2feed229018702c8df62b8be6fc14c62cc3d14c63e4251c211f195bde1f8c3c8e18e6d6b32176ebd4f93062cf0e3447e4b9c2f19fbca62b5572c24bad6401f166a51c1a9e83e4d54b5d85a99468882b23033ccfd71bbf8ea29142b6565bbc8c4ba9b64541023d2087939f17381381127cb587e8deb726cf676d954dd14e842a54ede02582fdc306dbb8e65e5a3a487f026984586c935020fc8fafc4ffc169d369d866f0418113f6a29f8e2dbc8980166424b5f24013c4f285eaf7642cbe10c28996c92fb3eec3fda366591a2a8a24def1348db6827fe32ff31193d1db9b8bc46392039162985885ae4933440c89fd1e8f83ac1ddf356103622f3d63582f7174bd8ef417e02ecda7ed29d0e340846de854a30cc7ab72bb1d9f29edbe70cf18456d9d96564dfc6f8a81a3f3c6ee8e934e7a8e0ff6fbbe55d073b364898072f32ca3f35d8ab8a004c7a3700e09abd43de4b5ce87f17cf3254e332dda0ec7b7b43edb0517a5fec68b7d347ff5d86e110e43cf2637ee5e4edb2c5bc04c8ccdefbc5945ea57dd5f0d32e779962fe1ae216e72e1329192fe4a8d7f3eae932b96119dfe0728867498dfb43462dcea7d19badd4824f33d0f96646a0829ecc54c64c91d2b31013cb1aa5180db5f299e10f7b1ac0dc1f044ba02ba46462632bcf0ad47d467489dff03da03962232de80553268d2c337fd91b352a245d4c59ca41814a29046bc1c761ddfd4691faa99a4fbedc0b062b081adbae86df030c9977d61d37e98807e6ff921ec6070246834332081f56167e6b748ced071f6c777f5e9f33598442e6cb511358f559fc686b4f91857e2e0d1be5860f322c4cb681003bfcc572d372a2b2cb662bb49f8e0818aeb34c1e75209d92e1c14a5e6973505444cd7abc9bd9caeed49cb4dd69550cb0e158f53999a33c485d55f39c3c38488fa5bc01f1096bd2259b1ab80a45018f855bd81acee939591cd513ce8417d80c9bb096a82d801d1c75a6972cc7aa3c24dbe09364db568dc49f9e7d8b7be0b7da350190006a197789226cf0f4f38ce06bd79d67e77dc5ec8ad03d50ada10e9300a208fbb34537130e02e027f5b4e0c95dc910b848e13ee17e5f8c35fdf283f8d16eb0649eadc17ab2d41e94c896e358daf80557f228f4023963cc91ce829596f5e6368bbff060e0413257f834db91c273a06f5fe040181ebb868b97051754f022ea30c4121b6edfe527e77e713f30cfb9fac963c9d26a57ab7b6ae4805d3609bbe886ab8562ae17e69a04ebeabe8a9e528143380a2e811015dc8ee3273087377349e657270b3b8e25a996e60320cc06d06730d82b173f659a487a0f3ed4e5517865b409e7a67f1640f416bf87d2d1c8e676e5b2295f3ae822ab25f4d09cff36ba8b2ef014d49ac1e7e589c387523aa5b2913d0183748ac9480636fc89eb5567bd5173412f046ebcc4031aec06cc06a32325d226fcf65867bd29c5d220ceb333611508056f4dc0d2a3c6c8a7af9d4187930fc6de62d030498c85dca6c641b65fcb2e31e8dfbd69089343990b624428391e8f196afd64154a19cafa13182fe51e32f5a0c69b62cfa84ac578262dcf3fa687053b849a4248c0f171f43fc020bf6ffb70334bb1ed305f88354ac26de209899649391587c7820413d37ba95ecef7bfe26f60937d985c8fe37f6d4593bb3cccd71098a272e0557610b516a8316e3f4a9debbd8d6692d2355c2415e8c01b43add503b923397e9cbb3f1b46aea59a6877344931fd96cdf9f759f3b40c5e78ca41400a437e52be82c4f8f07bca66d080c8645665db74872cb39a26b0deecb5dd4903c75c9b1cb2f36a29eaecd95de7ed3a097498f937a815023c2cdacc5f30bcfa00a3581d107dee99e31e9bb2eaba86db898a190eb326e227f0b95ec5a477a78296b9acef44552679e732d8c9e0651fe8e5c7ecfcd12e6ba377fdab4143feae6cc2650c32968877679f35ac272801ee618feca0286ecb87f1fb2288a17c15b3ddd52bbc4ccd4e417d9e62ae995e04aa619000694196bfc1777008101cbe87c2ab6c7230763d1e71d33d3c929c9f6bcd618dc57fb9ea38be89dfe4de698b77e7a2c9aa999f6563a040267a6860b12e8a02c0aeb7110c2512ddccf61fe9011909cfee84254dc46800b0b5b6776bc2853881256251ca55b48b76d07e88df5ade48cc873aadc80b3462144db7e8c915b657e3a6c25baa54108799305b1870cfa5ab05258999e39beeec0609f042b95af5df4aa0132d245758abf99be6117b4e51547500b42e32f94cdc23dab2c4bc6d9ecd9dcf82a8c3df16e08fc94dbbb998d262df4bf74f074e943186e186c61990777c1e18f3780af40d11059461e763a5635b417ca740111e13d32f9b219ad068f7104931ddcd72cac0e25fde963c7f1ed957237378b5bf77245683152b841a3775f3e35c6b41cace99877742f3dcfd70fbe958a5b5f7d92cc9da61cc5d4918dddffb0ede488aa37b968dbd64fa3d8de146e5d1c53935678381b7967c7d96a67188609763734ff933a896d065be59a43f17985cd613885462b17756983d9708391a74019620cc1f8e8ded23931efb304d11545cf5caea8fcdc49ecab38d7d496da5301a3387a9ef2e632c2f2e6e760237dd7e808974f49ce378899335947119d346672f218fc379e1f1227cba719536ed41523029252176bd40f8a515d7abd8495756c49b638784fb9b1e9db8017397ca351c27fa082e894127d3cd9e2cb25320095cb162318a73910f0e7bd8f6ceaed593acedc83c96405bc4352b082b1f6a63068505126c642abfd512738ebdec4999ead8b5d28e227981bfdf551d3696134ac90a5e61e41738a49e448fe0bc220fb235ab5146de6237ba30f3360313bac1bbfbad5f8f762a9b537b23c5c523ccfc1839c4616d2b16794c13df0f4ee19cdc7419f876fd2298b41e0a823d423185d93e84d0a019c4ab7fee07a30514330e77d07e86626ebff175ee1ae3a9ed8a9297c2722f86de47049739b163612b4f97d7717d8e614dac651d003b3f45f5ecfa0db4d252727530ebbdfd226a120975116acf3b1e67781a617b95823bd3f23719208ef07ff7961dc663789a7c141ea0ca153478139797c994505b316ec3b6133139714928e278e0e68ad18d74c1f977e578edd95d1a90b97870af1b83fcdf70e97962ddcffe33a8fce0b8db4d556e6815b0c835414391c080cbe0aca7101989145a85e5baf1bd6a6869e7408e17c9c5eca154015aa37d5541110a9bac5b7edab64fa33ea54fb394cacded4e909c080f95046e9b3b3e93a19415dab25dc1e3e26e574861af0491e3ef4e8f3f55ef42a47438f1ad9a19e0717f2e0a11678858325e2b0eea9b87c23c1ec438497bfa50424505a401386ec51ba18b032fbb00de19e85bc5761ce9874b626b20d74a3d0cf9c502e43d863d8533b186fc7e85ecca45aa9e92e10014ec09b60646522f04505632e2b0e7cedeab0d0f272dd3de84b5d3cea16ae8b47111b7e548ac30fdaaaae34ad98787c1684979bd72febfb03d27513d510eaf7218553f4255b4e86d698fa936ce62cd5733c6a4509e6479fa46fb184ee3c1d379833784934bd0d01c62be722cdd13efaaa288a0ac6c96271cc408995d8d59f48a17b6080df2b40e62c6aedd81567173d6ad27f62a10c92f5b0f9d87cb253436fdb3005f16b6a89595f13f8c9dedde5a0bfc7c34899f172a48c142c02e573006fef0d0111917c6403f388cc2ad0e64fe709f95082e8b06d97a57644dd4549b99e2bbe85d9e3242795c1fea2bedfce07a8c624da1d312cbd43532fa24270c5e37a43a9de2517107f7268dcc5e74427d69014cdc2b44ec6d9974088bac864866a86c9e5a1beadfb82f3ee2c86d88a84e6104c7cd466c5da9b48e4acaf8a541b32cad4ad6aaec4e14e7e5b534b1dd0d4598c0ee39ea57743ce203acbde04ce8943a878366e2d1654b7f1d600614f3839789f33032f4e8ca15cd0812c6264f8c4f007fd00b7eebe1a613ec1bb20055f06ce740aa175bfd7de9a17e9c442e47e1837d34d995ac04c077ed53f5f6690b372dcc9a5106a1084a990cea420c09c6c50b21ef58772c029f447471534eec4f5f9e3315e372e92e65d45a84ad69f63460af721664c1b626313bef365c9a6abc0e365e2949c6228773106358192507ecc022474647fc73f1a551510d1541e08f6063d27bbee55c84032489b2c5d77c58b4ad48063f4140290b3d4ba76e1e8d9d824dd0e3bf7a0653301c104933aa5788e2fb9435463779b12fb0f75413064710c84fb9c86a772a74e95e412a9a22f048c9cb53e3dea003b61bc06b6b42f474db8344cdd91526db6957d9d377607e26a224d70e7304f50bc7fb6a4cd2d64bbc1205f563d8c6ec4b80b85b3d6b754b30efcdfeefdd8756a81b28d90174386df96977d6383c63755edf30ec985251df37ec32d4e620803060718295244e873ce32761dc9991e8d272590dc7601ad3ea7275b8bbff089e0b0f621dc1e8a96586ee649d5d25e36f3ae6adb16097632060609673a18c9e52658f524e3e6f8ba12606e28a9646dc474fe4f2e2b16742ba6299d02c8b09c86d46a144680708d40bfbf1dc127785371e2ef9992882d687bf8271686bcae0916284b95a6fca2ab410141f9efbdf0fdb0f2f87c3a80a58cacac1e8578bc1548554b527e42abec050e71885c457781f24b0841cf1ea9e49bd29ec05c140eba7fef3f481dc24cf2ca68fbd9d98257843de002dd3a3f6de0e3df3de9e7de43abb6c82da2a2ec99210de8471ec753d3739d7dd155369ab3984a40e3b9cb5edee86ddfe74d09b0e08d4cc5fd76c76860e0b1a5a453f67fd3dbb657f97cecac7e6f0b83ee581fa0b65c88c83b30499e4bab63f878410ed4235a5057b636ec0e01ce996a0f786978e80df8efc17a023f23a490c62c0e635e7875d3534013c39aaa0529866cfede928c2190d2d387076caf723def2bdfa86088b164681995f2f931391a910998fbb80f2fd7dd7d3d688269a5c1b67fa6f67ce5bc41601c2a470073a2350f18631a8e9fb752ea1bdfaef0015605f6f8c778db1db94794808731d534e92e79553fe4809764c69384890daf67d3f7891be3a38730d8ccdded08d036097e8155056b83f91d34b01882f188dbce6bf8dc43fc4cbea37831800fc4a8025237b240aa6cc4fae8fcef9085dda7dd8747d555b028a411be38b01e2bfa5fc5e6679b810fca72ab4c35ba0548482236ffad81d9b9cd37993daa41e2a12b028a9fc6192c7767e32a1c0d707253a03d6d5f86de8c2325c9d9cc1f50ae6a6b58cea29c1f2abef7a67d01a813054735d6ce044359bed4f973e22ac9c39083e8bdf063870083e023584f2ebb95a5055486531da2f92736c9ea2d45a7238325f5dd18aecec4da2d539c345c27881b8e18acf4082bfa6bbca1773a2f77f45832306819b479740562e2cebb7823682eab4f62c2cc2ecbb10cba949db4fe73a57a20fab45a6d6b84a547182292536c3d731b5602a22bb5809b1253c4f4081031770366ace2c291b9ea487ebeab0326fe5641b8b9a7dfb15f9bb1ebd3a3631c2836a2813604913f318e2810d37d4df895b5a12b47bd4edcd3940d60726b969bd88ce7c3564f506f518ef920abaf70e1000c33b2df84345d7994b444d179770229dd344ea2bf7f96bc4770f5eec59ae963aec1ccfba07c533e4acade6596e35cedb7a4c3a2ebf56eec21ce0b2620e534ce0d67c283b62218bf3c6211fd44c84b03744aca95beed7d50f9aed8aec5eda3c25669228dfd9608ad114220a26a1ed99371a01e7b7308ff1519021eef4c8bb73b67c3e1fae3aed39ef4db98bb1b0e77cf13224e171b590e2c2d8279f2307ab80efbec72754c41befd5b2e32470091ff4abe977de7376f18b79637c82861dc4a5b726f1210f905a1bd273e4982ea41227c90e33d4a9677bbabaf4dcf21a5baccbbd9df382094bc0140ea07d99fa7fc2906fa790df87cae0f0035a926ab1770fef595f493b466ef93ff69c20e50bffdc10dc3cd50d8e7e11039af8251a051d10a81298d3e865a9e23fc811bc570a147bc850798416083554c1f3e3881729dba2f29837ba5234efd212b45a3fc3800b97b712e3aeb07c8fb769f4d7742e01fb59f765d19973eee676544885f8755d5660f0520d54594b5d3694fca4d5066a17c440c24d08d840bcfb4c4a312ed7809935915d73c35936ebc58d6921bb1fd37a81ba7a6d35bbff28015cb52c0d8caba5accf28f65325c4ec08b0768eb9ae249b481c68ea88d82b7aa012f3843b4fbab1d21a3f76947ef2d7bbeb1b50cfe3746f25ed3f2a0d4eaee114048c3e58f9f1281895ebc80369ffc615b285bbd10dbb491b67bda133b2e8e3be6578090a2444e5f7b70aa7b961bd5e8e7f64c1badf3f2b840c12e39b1d42b27dfd6e1a5c950eff7358c8c3a1faa9e4f27212f8c30f35ba8d02e82d3893bdfab0f26eed4abe48dee231aa4c81e889e926da6965e7299c39d50ffa959e66d52ac9beb4b1dfd70463a49dbf1d87d0fdf1e22cffa48435b5225cd6a08528bcb0ad6d3b4437daad717f78dd165a01c374c7285e1237cc1b82db6fb44e4c18afc94b843224b7b8f1b967810d218f7a600d95f10a197e064ae75cb78ff0f68b37812046509030189d2a231c409f329b02db8377ac4f8233fae0c460320d4e8ab006f5b873c636697fb0b649f83d3b19e2fe9d0a6a339384378f7d8149887ac69233f10a3c31fe40dc1be96d103331fb20eecde2f6eca64eba183d40f4432da3edcecd62f2cee6c533479756a6c8d96d5cf740bf1e20fe5c7badbaf08a707249210a7783795e531f4b7e996164be2b7fc23150e8e36c299b95d73945342d177d6c4fbf2611ccb56417491ea321a8a3511ef573098ea21d61e769c39ea3a15a7af459dc2c0bdbef43282da27d99963483aa5fd9d2c566fba23da64a49e71ddb60fe3d800a94fdf80750b14bc5263098fcc5da68e71533092ceaa50076f22c245c5451589ccbb2706917dcece8cf0bc248e27112c9ea5dcc9df8749beca94e8e6baf319445a41c6ad94fb8756c0a57887928fbe3df73ce1c5db025f060c1310b43d15495d39c6ad4d930b9eff4b18d66180ff239def9eb55d7f4e70c1176cc047a131412f28a7ff4db38e07f04ecb2feb1b4634336892bb0204cb22c204645d6ff7c0ba7f866997f79fcfb857fbc03affc039e92a9c5dcc97ec7b4b07f6cfec7d16dbce580f15e705417fbb28c474e5ab3de1e0ad5894a3ef4f60c37adb717e497917b15b02bbb9b88a960d61658b18d19932d4df5d713cef476530cdde3fb8f2ea5474357d9bbaa3809e5f9c3a251bd6991788738621b5a24a6481f881bef5a4a768911e0fb54cf623a383ea8be5e9eca6fb3ebbe7ea2f3817ac114d074ebf6344d5f910998ffb4e9abf77b0ebc918e395e4a9b91a0dd1deb664db98c19d18b897367ccdabe2943de51f8057c01d92ca715138c88c9a5e94c2ffb0b60ef6adbe5ed419781c49ea37e92c776e2b0c0fac52430f7d369f860d596356e378d9ee8236cfe9f8b690d218c9655944b82b2e3a890fdce9937b6b157ecc0bc6e95fe009691a41022c432474d397b4361d67d019d93556048d389ae1b9adce6be14f6c288cf3d5518185018abdeb573635bb044706a5e0b9305e5f9d092d2cb4f8e23f3626dc225a03bb34a2fcfa33396f52b3ce3d1e36f054f98b868f4030a0cbeaff6eb62e467ecf4dfae4425376d6f75ad5ab1a7c880a4c08b1e886792d15f474e4f80fd54c041be6acbda7f002866f2c7e559b7a5b093f0e0e2d29ec5b0960559f2bf535c7e565bd10301eac782dc7f27b821b9560566eeb809592f54411a8485cc6665041328b3167bc25ace7d037bdb643952e283e5f338965a3b87aacebe5b51bbc63458e127ef23af3de0b6fa64b83287564914fa81a701a325d56a19fd901b25e66032756698e6c6798222ff8e07663ebc3e9d53c098c9f7eec0f62038c27538a9c0e2a6ff6a7e04e9b11241ee453c443996adf1d7ccd426b20517d72dd451c18df6f19d081ae494d761aa37263c97e7d7803c8d230bb6d7da01494aaf8117d5ec7736349fc19170660ffc2d7bcf5be7205b4a03be4bdd0edb7b5ec34c9f2516da912929027a5a59245d16cdec92158b57a764aa4d6f6eeebcc486feef47179daed8af57e29709f4504797867dc896608e48cc984fc5a815a953d8159aefbcbbddb0a4db67eb8abafd91215d83f0831492e629bb23c37506db2d50ee2f7c74d03813124f319842cb9fa5794b665c9d3ff71026e9bf78fa8df0b6f1381e4b6987a1bbd323d7e36dd2920218f73da2a7d6c8b0d1550115253ba168dc9d24c459ac59ac3e1cf8059af43e4ba8eb8c209949da9a725e03a5945baf8e9f0b7829eabce4558ee9d258b345f784f859ca3763839c7e30c0346f5275b09db91bbfb86c01373530c81ee55ac48a3bd1c4b22d71eef0fdedcb5eaa8aa2c8ebc3f0eeed20b648cceb680c236a524bef1299dbe01f1d6c1ae4af0c0bd7a376085db7cd39c802ccc2fa657ebaa9a24db945a6778e08dbfa9921cd92028e50fc02863e9f6acd995e601b20a43f398077678b541afabadf661864c3d3748111c0793100e15f67531e3c958e4c8a44a3a027dded9756331974ced89af08f3b52506fe343fa2dea639cabb6eccc88b34bb0a77459bd48e2166ae918c9df7971636fb2844b3d29d7e439664fac40bf13a6c442d8446a53df48d080ab623ae70bf3ad98bbbe0d1ffe91c497a1694d2bc08ba373225ddebc986fe04f76c9e4a8a7fc5fe56326b0051c3431148a7d3bd04ac32a628e1056880f2ac92a1f99993a6ff0de834261461f7657de5258f8b33d996fe6ee94859f988ad44ee21dc21ace25cfb8ac4b7f4a729813b1b755ac0904f7ea5d44206b5954a698bb637651152c3f77935e655e86927da47a0b76e0606b5e5bffb9b53ac8953a143c2e1766852065a7120ce3602d3fa86a1e93f7b805abc785dbbc86f08a3fc91cc1f02e97f4b431ff856e6fbf7d7ab86a9c6294c3f9bebfa579102c1c249ec1b8af404ded429248f164d55a1a15b7e28499fdaf2534a896e411f73c261fc5fb2a2657b3b40117554271e60266ee65654e1079975896e7ad0045b9b5438a14307f449eb584f53fc4fcf191eb2966d16754ee86663e470d441bc05bb384d23f1c9950d98753070fc5b0cfa7d911078faf85fdaf01fb893d21d39b2ab64844fd4699a50e947a7dd92e3d49c5cf73bbeb842b900e09bacb32f0328cf805eb6b37698612e6d4cbf6f444db35d81e2fd9ebae75313bc1a45c5252f0addfff929009bdaa92793a494773fedc36a1dc488c14f2ec59179b23e24eb78709e4bfbec46d296ed58b10aec98af4c9dd8568bf033e539593389e2b83ff1efb279ae7b4b3ce37e2b456ffb9e9e1a4c7543d47d13dc12400d2b39fbb3b532ab43bc95d38a304f395e511e65523ec4f042e98747eb3414b7f046c53791f7348a6a7f0c6361f7880546946fd3e7c66b14ce16d301edb858958c755a5f6abe451d1403b9c202de51f4528614078400204a486b00f4166f26f4a2231c4353b89f7ba8e7478c41fabd46030563f5f90ae2ba6f7ca400c479bf3e159e6992ecaa8874a5a273e31db1bdf807a99b1fd711f9dd0b424087a29c5e781db768307a7229be942bfbc551b1e21372e665be4a5e4e705c17494f352202e3213c6e0650f6e3a6cc612da8891496450e3ffd110ac22d72f820a3aa99094737d979128f9a1d1e23e0c3e34829a2602f7032bda4b30ed3113a0bcebafc022156d244f81a9a3853ee2511f5e8c31dba84d30729e0d6d0b65518defceb2f46cfb6e2af84fe2d184af4964a0032bdbc997a42cc44352a367e85550937863120e7694094044e23d931604cba3330808657a0263a3e99fc2d183b017092cf25e3da754add8d5ab642883d10c1b71b4a04733de8ac06406d639b38752f81d5b8bd4cb92c58f55ca298eb6d0bc83bebf8abc906d8b0ccda0637764783051e6eb5a75509c8ad63401819d8aea32b73a108be62e5d4698458f869d90c58853a2c1c28891a52b5f54e2f318d21ccb3a6b82c85f2fc1329c7a5697414b7f7f609273a9ffaec33895d536ddee4873bc67eff573cacf0f71114614c07075ec09476c775931751ba397ebc0da2fbfb07229c42f6ddea2dff0050ad5aca2ff93727fe0625d34fd905d97358627dd6056c0b41530891bfef1a98a104c43f4b6a0cc5e9c0d260049b4fface0994d27168bc476b81e2db50fbe32f509ee475207f27a7c7c3ab5497fd1c0e17b69d18bc242615d8a1a7b11be68ba8e49da951491e72fc8142eca4e6c34df8ff473cfd0cdfee497066e1a6942c78e0368251ee7125b28d3fc9b9e559e50cae13d1b91061e8799350e201e709e730a8afc99ada588d484c85ec95219adca61015c5c2904a6f0b2b4b20b6f6d407b47e0ba7c6e61d1f47bdc5a38543af15055ce56283462f8165a2650726afa511d43ef143f63f44ddfa3253551e845b636cf9ceca2e84659a98e7204b1a329e707c62e26860de1b821376ee1ed8ba5ed77fdca1aa873c9e3d985ee692280c508563d4f0e006c11990ef33f0ea13db3a6797a25f73c404455e56481a53a0cdb5fc43001541c6dd164ff151d71a24fe57379db4acc344ddbf07479f0f86c06a1969a960fffdc10d2ca68f4f078f83f8adc9652d35060f60e4b53a2af7205024aa5c3ca7341a6c171c0fe8fc640cc4614144202704b45bcc4a52984fb8642583d6822eba85cf946c58c724a7400d162708c67d6d97647cb5a2c4b4a1c4de07398fa3560a1c4dead59f4cc92c382a783eabe2d6c1a7f03716efa6d84860d03e29bc3cd8ba739af60787a7cca3679060626efd810de3739f3988ed2943b41fc32e86ddbc51a6426da89649a23afe6c6cc7863850dd6effa4c8abab5d914f3ff2bf7bf45268e57db1f7c00ae98967cac873b481b0cabd5871b480ee880eda0bbe5ec1774c77c6014b7bf69297de6da49183d3a84afeb18acfa59882a08786be1223833bb1053dcb2a910606ea1ea321a71b76675113b97949de3850b1055971f6fb2c13c7bfe99fcbb9b2cf8ff116630cb271edc7d423ee675ac335285099609f563587c5b96d384c6d039996f3724be94470a99e67d438806befff8163637bfb95e5793e697fb579aa33ea54ee7d101aebf04130d4cd407762dac228ee1e7d34141199184cfd8af85fa30d2f9563e59574405744fcd672f04c814d2574018e310fcc50959fafb82d18e3467e65db84443cd22ce8edd2ff13c4eefe6ba2de190f0f08c455858947ad0d48f41fc98f2d62decdcb793cc02c4688e2854f8a314a1271b66c49a4b5f08bf31c52c9b0e598779776e6e7664f678977e837afefcc55fcae6b5e7a4b186ccbb45f9141365a3eaa239d5bb7c7f89a9c430da1e73b80679d67e27afb71d32d3d0c5b1c940348964c828eac57e5cf950764c506df1a9ae1a536fc7d7ed153963828225792e2c16ad82694789592aa71752c3efe4d8266ae7b9c40b881918bf131a359004b68ab42e5d577de7d167ede5e077b71aea9cefac3e22a644a6fea7f2990af493ab4dbe154ce327719cf146aba6a7cf7915d3f565c2ba74187a49f87100fbea224d543360fcbb36e24b64d7ab8cbe0bcdd4e0a524a980da02eb5b309514e1f612566e50e25c4338b689b520cb050d52f957aa6bf5b52a25c787eb25461ab80565596ba5aaac9030f855f7694c2843c2c49619f97b72e59d74e3d81b384e0650004dd8e84071edb2aeb82027717d3eb69a99c8bb6b6ac0bd0556f67cae99a17cde3d471d45c839fc319a92863c1bcd92ee3653457537866e1dbd23972caa10c56a212179001d575c694964379c6932850a8c51035f7b5de6f403bde9cd7978abc9f9e36b6373ff2b6b87073ea29003b198cf3434c8ef26e947f08579e636d4cc4e73239e40258030e4ec39b2b7b3d681449357f5831aceef151c290f145c5bcf44c47d4ae96524534bea26ae7ee4710d85950a900cd68563d7ad9765ffa2016a16f56860ef2e1fded758857f61948e1e1f184983aa06a9634bd918dae030032df44f81ac97087b4b008df5cd91332bdc71c02cdaa0e8e75162549d94ed03386771206fc355cc3c65602f1951522748bfdb6b454135dc7deb4cfbfdb73bdfd8ff985b424fa737009b3b2a2de1ef2ba05a7991b6dcadfa34c86d99be38c64413db50f2411149bc30da8c9f57eed0dd089c303a65e064743a870cbeb30a15caaff3b1cad3ae13921d8480ee787afca16edb8c66ab217ced9d7a2259ed478003b0654813f1bfa5c1fdf039a79e5b3430877aed18796a94e24aaef3f70620a3f223300df6866aaedd7d8b792eb1e201d7c010dedaa213cee6c203fe234d7665d88d2a806888bf15b682644574b1bc5ad2e4b442a8f724739cf72acb8a4115c68da37dd9175fc71383d20a5d6d95adc92a8688f534bbb240c5149bcc5a36796d4caa3063606d06cf115b061582b3d78aa1af6d9778f957f669eb49f738a55dc252e89db38abcdfa47007af5d363710bd8c6778c39d5e74878fe21f79da156f78d8e05a5d8ea883860306c1fb092e27a5c87e5069a79b794ad216447db2da5956928a3f0e79b38e2a22433d7164e975b7239fad23c692bcbee6c1807d25abd5ee19a9e176c2614a2367c578a5f9656ee0b450bfd791707660b70139452ae0bb76761e998575943eed2f8a1b830d4f37ec578f8b5fecb8ff5afa41e99d7cfd5f9c1498ee719cd3b1614c5a75092362752934f43606495d4d928ac9f643ad64b1c67c98690a588a9b6249ce3c7341e1c160629a4e7b5c2620bfa4c943593b71a519d070b9ed4c33409f153a49771f1070c62c68fc2aec0a543706ae8e0c38203ce73fc0326ef4e4b39a770120cfd88db8ba9cb4bc878aceaef05a5bd2b4c0b7a7156b19d74a50f80fa6210f5307515edb85f731db5685ed4c4f4959d08aebf9f9fcee02d83104cd009cb3ecbfff55bc458c0b7273e8171a0140681e19f528b1a1b4c47b3c3d0da72f8cc452de977c9b2ec7deb1975ccf8c6aa7023c36af16c6421488c957024adc84054db65586f9c40310805c7706d014de8eb3c688c32bb8161a3654ed98c95af1918773e81a45047ad434c37c067b595c5a51cf11299aa27747fe94162dc91b118032260277a6c92ec6683c1421565d4be1f1f970c5d84099c3963fd9eb82dead016f09c637b39eeea6c4b15e4131a24934de7d5eba0de192403ece1611ec62977c83c990d0a41d190a1b9d1dc04425b83b9ebf5cfced79baebc9319055b3b068622225f43cf992052d84d9ab33bb09a77d1d13c13ca83d8b78ee736ec4c4c434786e59dd0805903dcfb6ff1f7078275a7374f67f7cb5b02babd60c31c46800afa6ffb92134bb117f5654528bfbc7200ce05da40d2636cd0d3cada31bb56c07e1762eab622ae438625a3474c2fe3501f49f32032b3be638454e84e1677ac2fb962af82f1dbd027f53741569551089213eb4290782dd53701b6d866fd6baf2d595218aac4a38251b75dea039ecaca2aeecbf876749890610413d9dd86ed2915ab104922ef496ec51fb475ee8de37875a2b09b52eb7889103928cdf050a70235b0ab2e2480a999e3f02cefa21e32a4e330d3cdac210cd126e9ede3441b20da9e4084cb9c1c5f38d8ff601dcc05e145a4fb9269db334bb600e21f9e117ccd2f47a5c0c098c52838092be4faa6523266057ffcf9c9656f167fa99b43b9c73b660c95237e0e9c30bc81e5fc5d9e0e924ad87a49aa2224cabc31596c29aa1f947456e04e8b11874d1417210aa9518835e5839dcb7962d650b9f3d8129aa3d6e6832a20c49dd2678395efabc50dee69d9315eba096f816a45b6988a1f9921ea4db5637d55dba56b9679738097da4b644d9631f5ef8fd701e217622133287ee0e102caa6d4ed8bf97e0722d4b142ffe8052c98a73fd703aaec19da4d9cbf77d7f44f55964407ee700562ba675d2f78bc14861623667dbba22379b5af99686fa3c77feda04af7b06e2160e04ce405a5f1351bc042ac5b84217862519e5ef3ed2b955d89473ea1436cf7d7807ca3c76bd8e4f5199a46f4757e8fcf9c4f4cf883d8f7aee18cc64319fcabeddb8229cc1fdf830a7b36acc07443283a433cc8d70477f3160ebf4cb83e72afab9b415470106e4a15c73ef0e0008f42b0186a09fea41b154645f903d033cc9ac21173dbc2fd333e84a5ebb7cea53609c73efbbdbc9910dc722d7f5586dbbef59b3ce998fd858395245a8fdf90425d6a158f49f331ec7e061683fae10e6287a5c2d9717109ac15fc2b36aff45f7ff2d4fd793ce58b2150368e39d8491c9d25869dbea917f321537ee120d8e502c4168d4ea0ac19a25dc84a1b8afe65b79518b55fbb2858f853904bf225d5b3488e4bb13d12b3a663c37cc1db823c1721dae1b7887c43eb896e76ff0219968d17203c8b96358cc2cc2a7cbb98d5625fb16dc4f6705f66e64e6f897c13ae1b0846073150e2c0f4600881335eea6b77d356e79baa0f5ea97858df92dda48899755ecd631ecdf51ed071ce48a8beabb072989ddb5b261dd87630f40460b95e5a1f3ba2f745cb26fb6a308e7c4a3f1157146b67696d8cae6bf2623d8e1bca48b72e33948aa9c5c5dfcb6ef716fb6b627dd1eee9499f7e73bb9018a2218168b4278a0d06eabc908824359973174ed21c1ea102a653f14d2d9ea2c90e2fdf3c107c038f66a9dc33e6206715909650b6891f46d6481cb644f181f27cb3c163b2da55e43675f49826395a02046984fa8338e3bd71592f6d3b331a293209bc82ccff4c656158fba650a6023e012034f10c80d5f4271978219f41c703b9df2090e23376571fd2aa1710b8d2af626da3edce61f60b412ae0c801469beccaee158e53f4d7e4d06877fcace7209bfc92097865e22cb7fa98a9af0e59a9619442982c2ff5578454a2ed29530746090a026691f48271bb7348a9cbec42341e9d4b6e52d12f0279332920c711dcc63f55c5203f514afa1fe46e81c1a446c5e8240649cc20701d4313bf7133fb12afdffaa030ea01cc011966405ae88cd1398c91431427349e0584d2ff6e96761a5b081fc2e54f953bdf3bb4ee37159e66df93f62ca84333f57ef3236515500b4444150f2ba3668287ed3828a86c19bce6b914766e3231404c2c3244679eff2ea180ef4b5567fad5abb6e50c92cf5e8d0aba3358ca1d345e807f47b64422624af5db965dbee6eb7da73f461d33c73f37276dd7cf1a4e143792146286442dcd8c2444fff27e5e131f520f0f56e829e72b11aace891294353c688c6a995633e6130608f0a794b36d529abfe04b745ad95885efcc1105cb8d7bf0920672518a27117136b220fa61b8c0394d09d30d7a854d24d25bc7be8e4175795425db332d1f7d9874acbf7b1bdf268c3000b3edcd66a889d8f996290124769bc068e450017ce9de453b157c4a0bbbaaacb7cc8404c0a0548eeec5348938081918759a75227cb9a5e3bfb4a8c901451dfdff48ea2e253ef02b355aedc6f2b3066ac11f990e6bd83f69748998a6cf2915951531dd1d987a5c3a9d88c5c016b6f57a41021e241d049565200f41fbb111d248a81709078256a1c3e8313be365781f9b596a1378441ef54040883234e348b98f1e89e79739e8160992a115cb0dd40c1b0a28ea3ac82bcb3c20d688f989e6dac5667d1f746a54e7ada0bd747944f7c5eab49c888fa564ebe2b9a49b58b799748d67d1185eff6cd7292a2847fc8980fe2004ea3f1d87368c29769b663d1e60bd6350daba61dff21cd7cf0942f9d7bb11a5eab51f82f8dfe1ecddd3fe9d878f307cd44958f565f353c125e7e769ccdcc479273549730f662bd9023349ec224054a06ea54450074e71f46358a34bc24e9d22cf66a5713852c834dc66e023805f8a5acdfbf4c19e571312cad1b466cde1c72a4096c7795ec69edbe291fda8f935d5d74c36d06acd4b0855dc1d3ba009ffc75c2bd397601e78b6860b1d1f2a5768b12034907147e2b090ed502993d71569b7c246bf73d90c14a1ce8bdb4df82d2de2f2f80bc7ace462573992c1625d7bbbdbd82f8accd62bfeee090500b95bf50fee9cdd7d73268e2e731b3e7d181c516dad5d29deb4eae3f4008ac30efd082c8daed8da4b16ee4848a09062a44226b2afbb694819bc1b807fef3086578e05210612293e50948ca80e02918e11619ec350200dec728968f0264b4df80dd658672bde496ebacab553e3536e87aaee9cea8000bcecd1e8570b0aebaf5a241fc94753e591c660cd557f0244295338fb7fb9ba06af333b28b87e8937e2218223f28b0f2ebddd3c3f85e717aed2a5663feb9f248ca0ee103d72386f6f299e2a1d2c4fd17cb277a8f1dab35a2eb10e913886c74a4b33cabb4c9f38e32a33c7e921c87391b21606c7c1825107977dfe1f5e58fe755bb13726d38d57497c418fdf7ee3375138ceb1dcf361a72c9805b5c4ac857f4c9f9f5329b862c03e7d865f673b0bed7b7ef3827b83a2a830dad176f280c5a628d5c32be1abeeccd635ad2ab2abd699f28572e4616ff75322b5b78ef76df27ee77200064dfe7866a60f1bc09b96dd5acc3d26e41742f56ba49e8db9537b6af397f30f503f188e55ae10782d595e8bd2ccd8bb7469ad00d711d208ba7de00c4d283e7c5b7b2b9b1fa2e4cbf8a131ef665a87f22474769f6d678c304b432f4fb9a853be060612d32742d01489f9d1982e40bef3b583aa5e1aedd992a8b6df127b768b1deadce42af661c1badf6935293397982a88df919ba8eb40da89ad9674ac4468d495455417dade690095c525b671a05e4f5bbb068476b15543b527b47561e0be1d86c77008f1ca088cea492714e7dfe22a9c43c2dfd1f8447565e14f7b42e6dd266b15f200f692c035284245d67a314af07573094073ec9a829944804ed415083efe63d3bb1eccf69cd806f786ac49b9bcfe628eb2169650fbefcd2ce46fe415aff2bcd1627a48d4b74d5eeab57b3dca7b7a2c3587866de2d4b69ebf585be34b8822a5a5696bda9e2bd74b80df6560cda4d69d7ab6b8be8b98749ce881861ff0546b6aa6144c8c4afec862087d8b3ed50a2a62458491c8f34f9ec15a19f4d5f7ddb59830a3e951dd94a43cca89b9ede71a54e333422bc93c5a5db42aa5dfbbc673c8df54038ac27b240f4c4ed762820cef954614b5c5e30ea1d019880f5f39dbe171e24c3bbbbb706b484c1ebceff21fd9db18b54668b34cd391b9c29db8a06d26c1485a8c5cc1f515e562e7e9a470cc00f2521296356b510b8623e91abc751c6f254ee6072252d80917d72304ac9da2feb1d1a2027726d5e48b7a9adf037659f0a789a36800ed637dfb43cf17cac5ab325f752c36de9b5e303d27ec2d57647d2bf2c0556e409a08262d4f6702d160bac3e3c92b71933876509b932a25ea996d2b914b8af21ba4bbb6130e9f3dd2acdbb14baf7e2b89c869479f2e51f16cd0e1d69c4d366d61ee141f395c41058cc7347d928193ba4913da7e351f2384bf87b6fad06c360cd1646f1524a6e75c975b7b0e8654ba95afba41dc0656df59b68b8465dfc7f381d8d1bf334f38ae428a151ccac5c0bc3100e2b2fe88972a356be78b14cf48e959ba325b8c0497e2452e2867ab1d84ba4024400f52ba07f8d8ae822a893a3dfad7e216148ec5bbf2f99c13fb597dad19950cdfc16a6f57352b9427eda76954c0903979ba8f8f625f8fe39772c80977ddc379918673db1fe83cdb591a880e4fd2fc9f5007d1b6ec42736688b5882b30d829ebd37268859db5bd4eb813c730acc1a8d58db1eb8a4dbaea1190040ff54e1ab071cb7bc3733d6312e0343fb28aad60f4597579473ada47804c0fbafd96a2349ead3d13249a8e4e69f14e4d10b28c3e2639f2d3a0e6470cd06eee09c5f7fee899e97b6fd913f5d56b40ceade1ee843003d22d75b33153609e74987b7bec347ba63be9e166258b00f144f0e57bf0c5b64607becbff6c976859ceee80caaa4160dc5a7f6dc33447ec03b5db341409b9addbdc357f62176647a2c00a7da43dd4e453a0c287dcf1b7d67872e4b45745488a2f1def0748986836b3186b81be4abdbdf15dd202a57f7c3908876b50621c9985c702461db94051303518e8e8ad7cabaddc0ec54db8a97fe5b0dfec8887fc34bcab06d56f6e22f48718a256eaf6e75135eef3b757ebb2c065c71ef17a61518a24ad6bf80605608aaeaf79ea4debda032fe60a8318a389195fa7c8d07409c56d771c885fe812e8dca672ff60b46ec01855f9910354f1253d2e932cca00c303b568462397f5ab0ec1eaa331e3609ab53e42195787426497811e100c53bed7c9f66b808910e20631e5818fe728a468816ea9574f00d22252305c5f073a5ef97fdd2b1af9958bf2cb153cbf226b36a3e97dcf92f7c909f1160016c7ab276c3fad180fd7030e058daa866cff49992ae69efdabfe8b6bab128daf87562346837c1297a948d0da30daaf16e69aaa9a301822ba41d5ba530cdbff24178e14c72b789961987e365beee308571bb61479844ce5af9e76a6981744a7eb3a9cc992a939ce4f533936b72a66b5b636399800018a0fe137077a0a4bf997e42ebf546de1ae191070638bf6eae5e6a7dad441a59c17a14f28c863d97687c3b515adc56738fc1a1d9b159278d4615803c000ee2646b02efdcbe1a74434de89f1adaeca97ecc244f8f7fd3ab4777ba6dd93c74f48d728c80067b00a2a9bbb6b2f3cc85836da707ddda5b03f191c3c6c7bb80858e7822a3317301a6a3c80d25fc7b7e7f5011cd05321c826bdf96187a3d6aadc6dcf1eb79e64d0a3f41fced90abcc175946e82e6a2d708ab4b1ffee9d2a9f4d546054caf4f0d4d278c9bcb001cbddb5b01635e91ced751bd1e4036930c32697297b6e9ee37bfa2b94e4286124766a585b08dc5b5fffa20bea9b36d22de256bfac7970999acda584e392cd917c7c26ba6e0443bc7a1fdb7f34e59b90dd1b1c89060f8db762fc19dd9c9bcf82e9931acf7a44b6248402a83cd9acfc3e968d2a44d9c442849d3300bc66529aed75d9ccf00fc01fe4d42837f66daf6df6391cf54c728a6d3157a7755ba5974d2b2b510867a0e5f6282317289ee5b5aa7763119e84b2dc71d3575d00f5a5d5e0846717e7abd2278973801fcc69f3bcab9841534f3be0678c5dfc6b02b5bb4e0cd0d22612d88512611d1eb55dfeb24b8e74046fb06fa45665054fdacdc7076b0761c03ca37bf69f5d280842888ba5ba89558de44a7b6bb44d38b46541a968ce2febd29c677f12d5b3a691dd5f15ccbb21f3aeefdf4e35965f07d05deb9662c822c9ec0ef5c09987f39b63721176df598f29d85a8ec79d0ededed018d9899f9ccaac2f7981c61bb31a1a4add93c7ca1097d528c9ad5117b8e1c03e32325a0c6370ba28c1138d65b5264b071be4efc92ee1b1f1687b16dbd41aac0589289fea03beb624b9864fd338be91d3dabcfea7bc8b50e3589130353b05f4466e32a89af04b1f3ceba668f1fdc72cd93d3e3da0ba0be9201f883f2c3d72a57cddbee1c2f04a5275425f07cb087b32c72219fda5fa78cf04f7c1c151f769016fe0f467e1cdc1b2b2e9437da090516f36cbf60755c45037e84d85f4129769c64f96d931e3c3443cca7746fbbeec04f23270f2d528edced0ebb3e0e22822670c5fba0856b7227c2f4ede2d3622aa6e7403c6e6b2942a06b82fcf88a935d732c61bf66e2f1e96c9b5864e0b834cafc41944db57e108bf51b2bc5754c3625b2c99129693a07d4a8e30bd28eb4c9d4b7a2ab038ae0950fd60af121ab72fedb7acfc8f03382644f92ee3a42c5b9b66bc196e05373e2b6e083ce754ecd3cb30ea5a1a0fce1927b912853467951da6da4c7e59153633954ba41f60f19146de25e2e24c3c186f70d387bfef0fa64ad839cd856ba035eee6aedd83de2001f1f1d576f6c9fd0f6a2ee6a044860522c5c04cb9905ba29b9e008c7a47b254df4ae94d70e9a4df0b473c8d73d22d2564a202dc2da397f4d1c44975e778cc40a9d1621506491ba2fb9ff8d37477833d6f040d2a56691afa79a8775dbb47e292d4ecb90f3f3500f8a43783166c5210de67f6bc1667c66b9908b0594e12d492006d24c79a3fe9722b6d0f23bacf0e4941f754eb700886140cb976d0965c1385bad3db1b17e98a2b019c1f1711538ed3c5e599533eb8a4e16f2f118d9b4ec768e634568b245dd87eadbd25e3d56b5c2c4e3cbe5a43b28cc585e8f6797a7e4a09ecf66faf6468171e552ba73f73572e97060b37fcc3b8dda0b52085faddc15f91dc6496b973fce9f177449f77e4578a84c1f572e2afac4d5771c7eb165a9afb3658a8dc99c6c62bf198f7f9abd4657a72988f52f9f731d6fc51501bce8b0fb97bf9d685a193e70698cf8f82f20fb712f9b03925de4f33c4291d19f29277d5edb327b8df43f892b352867b40c8c13c29a4b91a2d90ca0064a2dd5bd5dad479f575ab3480a9e5e038a8e320509b29143287fad88d58cb44ac16f647c8990b6540b02212a18d539238a6c48cfe759df184b719edf106505698cb410fbea7a298a905793bec1f47f423d150f794ce197117b0e2774c2c1c78d8a7513529639011fe1b87ae05627bc679b65b5c75b0e38b518a9edc2b9483d8b075b8f2c9ba4a2a659ca85813a3141485000b18c6810815039a27bae415c8f8d8e0b19c57408c10987eda2d47e710969b8bbf43d76f98a6ccac71b7ef1853d8053254369b8cf8214dba856ef97c010a017f63adf5825baa8b043e9c26f90a9efef8dcb4ec50a5e5fe29da654541197cbf67a16d99eeceb81227c8ec8421c8062e5e2e12e0bc9f9004d3e71d0d11a907edd9860a6936fb021ec19fe57255bb683b0b950999d52d37fd976cc43f13bebe306a3477d58986a3fba77f6dccbafe2174a8c80c8e372fcab6d1c16a5182f6ef8cc2e243c0c1b44af0726ad93ce151b9f3177851f8302bae8be6ba7574bb2e5aed02418a2babc33447ae735f6b4144ca59c5d3e81fb30e2fceefdc4dd2a1c5139330cd7d54c2217284837da4a2ee98cf48aae1855adb0e2cf491aaef87d4841e39d8d31158deb0d5900a9a056b33e02feae5d0dfe8eca6416edefb574750f3e891d7c8bc963b3901696a83e3aadc9f440caf9383447d04bf3b4582571e075a7bf6587b25c50c5e60f4dace73cbc656da70580610e943b433688f799045fadd0b69e5b84bc58a5602287f0a948c3608661472a322ea7ab6984104ee7353c8bdf08b8229638f947957980d06f0125048a8c81968d8246c5e4a0d42a2f329b9290b8b6025c0ef66636ebe0b4dec877bba396c3d74918f76e4c51bc07990dd3c8d1110a22b92298a77da49be8db7a639bd688e13e5dffddc179644c8fcc0f31247364269c8e76816d402fd6de13ac86b4f7ed2f9c8be764305260eb44504ecf76f8d7da8d8061f0492646bcf54a8d06206ae5f0a1cd5247b41d27db55ce17c97942a8972346b4e5cbc1cb4bd10e026d5224e3e2d2356779262ba4ef6a9db91503d7c2ee6e3f24ddda208c1fb4c1918764752c71b0a922b5be75b5d4b6bd392284e46e6a195384dae9f0b5f29450b21053f420d6d63b982f547b6a8eb73e23ec6748d6f83dfa76b27eb9bb6886235dac7f3328bb297e21ddf686d953ab6fbcf63d0dc1689612a0614e30a7d5e8581159a9b5b7c3d597f5bd0c4e0cb277e0f32ab2f7306dc0efff18ed72a05785671150701e649a3538d0837d8a0d5871f2b132f73a0c7719ff24f256cb6b2c57f81ca2a4869c50c8be0df4874be6b5a82cd494d2b84f47b9de7c3ae7bc514c86cc70c220dbed940df1bed5278584eeb15a4bc97a6a0b153e2be0115ddc93f172261295204a3117a23e98c354e4b0bb26472b4385ecfd011f6efd09a85c2e1db3c78624fd9c61b05e54a74b129b5a67129816428f01be2fcad3345fbaffc607e7621ac7dee623a43fde3bfc9ae4764d60be876e4ad6be96d80e69da12c2c0006dd06e6571f013adaf3c7bca378d7451059293c8f1c4ac904b76b1693a199ec6945377629170ef7e4d189b41e33260a85ba820fa33195372fbf183478cf98bbb7b0e58482269d4ae5caa7f4c625a69f5f17a3dc78ae12f57f201fda3a957d0e82f52a234fd1cbbdf76c9c675dd6bcbcc0bf6a88db32518da95ea8df9bd3b4c6f3688fdd2a698efd637e41d47bb3f68b25bd55eb7b8b801311e50962ef580ab81b47491923d4fa4ff9019fa8129c7e3211f8bf1cf345d59e46ad93668d4fad1f296bd9a5ec13ba46f52d4f2750214b88992e39484db96d71a363382021f92cec7660b2c9716aefb5f77764e08c1ec0058f31ff1f3326431aa078a20f580a4cf5187b7c140e9e368e98577745799cdadca340a2c25100c18d1dd4866f4236a37636289a848206121b31584751d74aa6ec26c2e5429f93c51ac886b305d67c454c3f954dba394814e1546bfd55e67fb7f8c8db00fea5ec2684bf1a930d8b5269fdb703d7436240e835baf45665e9d484c2affc395edac401cf916cc7d797c88b4497b66d1aa857d34d900eacbfdab58a7942191acc05feb3161009f9ea27838cd8cfedf28009410bd0db9f9ac1a48127d0ffa24386d80c28a1cc53aedc8fb3c667a17c55ccec6618c7e0f521df6d1eb773aef28d8a146d3139f583c0525ae0d113054086d4b98ce5e02abc7539df90438d79fe73bbb0a675819d8c0c65b0e45efec10c449365d61aa3998995172133940c73d4fd564ffac15bb4bf0c22965913403c9901f1ae70899b3ba8e938a30143ffb4b352adea815099e6d88db9c64ed67edd24d76503f96de3e2f1ab4416e249657990d4bfef1479fb5d9f8b9185db2b112aa950cd73fd48cb987913edc2be0130f0c7bc69ea2c8d056faacd1a63c5acac284b7e4dd6dcd452dd76ef4323a0778c3d99968d5e1a0e27464663eae121206a99e03004f7cb24ae079cdb8200c5ddc1927cca55f7b599ee7b5a7034c56ec96da3c34d744e76f42d9e756dd0a8a7b803c89c5f41fe343ccb670430f4c49d23e73b808a495d68783b84ec02d252db78fcf9afa9416d0dbf5e9f24a8ac791b45edcd08f6658f36e15fca4eb1a0665485ebc2a31a119e2b6233c41738860d43bb4caa5b7d9fc4344f20c4eea96db01817c66b60b4dafa3755d58ae5cc172e4f5a3bc4d3a3c8911e9314dd1aaeee4a98dc7fb944dbdcfa9bf3575266a62684dbb04321a97b1c3eb5bfbecfa9d18c7ee049ccdca9a936b593edd53365b6ce3a55d905be20b9fe2151cae050c010fcdb73d61643c20dc0cb38fd0011a4d0665e3c91569e3b78318f8fbfb947ec1970ae2108fae89ee68c1b5f81c3fe9c65f81dab535958c0c92fc8838f9546a178afb85a7747b3bb025b7c5f5ea243023401d26caae036ddc2814c080c3681b299f0fd8890cacf334369e7576b743c8014e3eeb77360654d996a0af53578a0968850ed5d3db4f8ce97351300c090fe42b5d478b4158f4e18b2527e49c706f99ddd8eb488dbdeaf4c0f4aef5bdc52005fe4114e0aaefef45053919159d5612170c86c9b8798638541ceb06a6a36d68c10595bb66659934da99e892dbcb0b6de72d1011ba53d13c228c3f12bf6e09d19c0f2fa37cf01ce7ff8fd3c333eb6899aee8fe6f7f1fe62ac039d73911b4e1fb5637c01b6f8520b3991bc477ac57757046ccb77f6c00dfa7351e7e15dbc8429d8885b5a59ee301eb458b428c92202a007f360902defdb150b7e9bb983cae890b2c202369fce34a83ffab15f129a5f6066bbba4efecf96ce613ebe7c047ea84263ec30b0104800100818c4869435a966fb21ad4cd2520f708e1cfb18d71c20b9f9220259b207f8f069892e4ecd4ebcee1c399a09c5d97af6f03472947b3f18536115bcd24c8d9cb65e2e1a1ba055fd4f90bbfb95e522b49d068fed59581f6cbd70ee07d547a9ec6e72016ec863898cf230a3f4aa0a7ac4db7d2b84f5684efdd9bee070be891387d30cb7f68a3b37ad2c1c8057f93ec66ef5eb00c41478d422d5e3c6d6493cfb3b61ded0cd39d245c9e9016bae1aee86f2d425234c5150ce3b1ac94620886e99b685d77599f9c64b7ee50b588680445eb44a08b1a6215d90ebfe4a42276b5eaf1ee247fadd8fd870f9e783f8011f8effc07f727e535c89924c9f1d8cf59c45470bcf614f631b25d7ca9cb24c01a0b5042fa86053f470d4c217b26512fea7582cf372ee13301f5686d3758a3baee47f9562b5b487b0cc666b73f7370fb4b720bbce966a81d776c6c4dd95517a865260457a684ac2b23751d46f446ba69b7f7078b7bc3ae62829e98035da818bc8a6617cd0543e599914e4ab4ed94772dd8b5c486407fd6ab3772031e898c7fdd2555a4364149c5a06f03d164705020257ffb7c69726578d23ee87d3c68b9b43011ca2d9ca4a173b7a0406a530f9a5e2b711c2c55b2ef2cb8e7fd06edaa40641f7d24fa5016e41b2edc6b0b91785b77844717cef806d41fcd847bb3a20198a4403e336b98d27cc17a25e02dd3e684acb25ad64e2ee13b0bc4da95f501c1f79f1479da315a0180fac1cd7b5912d8ef3bfbadca54dbd820fdc9f95884e6c64a48b5f466979e15c22f6b511ccefdf552904c3d60d9bc38739d42b5f2db47578c36a78bf0100deac81f247781db1756ccfc836fb131d5652714921a9d90ae940fa22431672af1f5012f04f3694e5295b2fcd98e6a052b093a5a8656f60c9d864f26233984f4ff04d4e9c5cbb946446975edf480015cbdaf0abbbe9d16d50651bd942af6fc250973cf9f6451a86a06f47ed750235c81ca9865f3c37d1f9a5529bf6414b9ca05ae35f0e56dc4ac3068e2862bf116b86b316cf4f710e0e4b68e1ef88d4fbc18c618b2f6dc51d23dfddacb069cf7d85d8676bdc6efc49040c3819c3ecd5933137d51262d08fb7818064f603a940957869bb32bc7b4bd5aa2450e901a3f73005685bc0fa011c0d3551d181f263aec48c57e4328b8cb36b48acdb815b5a89697f10c0e5b3f6c0dd1c3f85aeef518057cfac9cd6070abb698b206bba836ddcad4b1ef55a70b5708a966e769f2e2f01ae081601b5d6c4fcf392e1dfd91b95d60ed44de1220b1bdcadb9a90260cb9561cd75f9fc5eef5ddd0fc34769795233198607565539e129570c10b9bc7bfdf66f56233338bb2c3b83065a2d3db60332b721e90f551bb819fa09f7d56247d2bfb28f8e294e2467fbd246fe21501a4290c12df34d26e937557c8d52ae74be00a9a103f442caac8141466dd7b5edcceb4249bc165eaee29b7d602d9c4a133020acdde0ed39ed5b126c2d823445c5db89dbcab147f6115157776ed6e562bc7897168cc58049d9715a6dca80f448c1fc4a9a1f32027d663eaacb4f26a5fbdb9f724851e43dc9ef16f860e66bd53293318c0fcd82f22db49d69d64545a36ba34e2a2d333b8b3e707c867b037e6e929192f079138c647c66ca73ed2c0cad153cea85eb97234574846b3cf81ba43fb5695955a01c133eb514f1681c44255778205f671aac77bce83d42e7e0f1ba73626228d6052c71323d91762d907f8f0307dfdb20c4ccdc7f87cd7640712a1d734847c80277c3a14ebbda13404be7fcf24af55e582da9cbe1bc5950933902e18edcaff80302d9f748b3c6b6f5d3a0d7accea3a312e66c345e88d2417b64b60202b2f16824580631ac040cefbc15b72bad51661bf3d7d824e5dd8244e447c64925ed1dd0c9b7289c2d0ef03e1c4070a34dff6c243920053ba6cc1aacb9e7293056c3297d16c25e9572e49806eee120acd8c2d8db3140503738f007d30e7bc2af48c0e1629233f7667b71b61e274820a495cb21065f8e2aa589d1680f7b2a1de2afe78f9a9c313b4c9689fb4247668cbe4ecffc71bfc20e72b96e78abe24b63f2f80a6d653546cab037b6db9f4ed3347a68cfba0f357870fa4839602dbe8c68125d3904937be2289e1d5031fa2c18dc33f198a111e2364f979b9bb50fb1d73582333c6f112021f229bde28d33efd13e6ea405fc8355bc52f804b91322c8e479849e56d21302d5fb59c777d787f6831f354b579c4faf4286b4ccd8811cbacab4da61b758208cd9c37db26bb76b2c84900b021013b91bd917239e8d07ac48d1463c9a487fbd3740cccd74fa2a542591cb6947f8702b57b254719cc1619c212ef4cca5cc9f0f404192e5d61023f61658cefd742ba6818069dcc3a22c6a464ad419971d4e76c71cc558961f22bf1d3b7db74fdc68a3b60c8eafde111b6a0ee36bdc5f8a95123b7e59c3f8598ef42e62d364b3387d8d8d4a48f815cac69dfdf674ecd11b7aaaf87f7319ab77c337b078f1b4e0b9d67c1bf1ee6de7161115e432b267483f00c1b8655661613c93d8a6406cbbca0d12165e9735b4a69a9c35da0784970fe14ac30ad6e70abff40e3ca60d220c191f103d686118f69c9af38a6135c7e06bc7bd7b8de1d09e8ed250153f1dc9851a01cf427042e05153528299d70034ce87b00b8a7f512184233b153777bec3804b44e2e9cddc4ca1b6a60c0262007214176d536dd65850656198c7dc20b7e3a3308a918ff2327f87bcbf5c1c325ea0a527472c06474008edcbc7ee02f5030d27b8380745eb21d52a0c7321f14ca03e8a68f1e86ef311bee7027c39192c5b6f74a70bc52dad445ae269c31b534cf3acc6c76a7fd24e3d6f3af7bca75f1e99fde7343277f9037f426a634a85101e7f0ac1d78adba6dc458c957cb9682251c095efa1c8f506839b5b8d279269de20f3e72f5e1119cd308e6e055cb6406205a74c61313b933090eab0f082abbb070688b3cd92b1f8d4b6a20ba62c71bd345bda6f022512c24201123f8bd8176c0212a4072bea6902810bf6d2ba9ce311647fafeb60c86d66231ca8679e237e6672bc75f8eb3264fbf535899550f773ac2e817a45e33491765f8fc96ba9e9f75bece01e380d4c31bd673744c6d04d6816b4f070142ca0b72b0839e345339b8effaccee4b0281e370e72be003e6143b44aa81898e35f3114af1f0becdb42d358e37ccd6052bd0ebebbbc511f16edc0be210c04518039bf53ad979648d59caf1ce53cfaee6d95f6e4e2e6e5f4f3e6d8b4fa46438292a60483c167b4cfa1380147db61a69f629d0751bf43510797595d609900e4895bb9746923fdff78e5fbf270863b61a93c6a21600c2ac64f8c463c66029c6654af80a3f320442d3a96c8881798814f86c0f013692e6cf512b4ef6dc703b67fbdc20a6596b388e814081a2f7b3aea7af2199c1ef62a69da1a2e6c8316132128a3b719425bd08dc6c15533bfc4a81fd1ff62214b0e9b6c508ddc685cf0612c9ecf697a21d6727fdc5ce3c120262755dc9ac5ed829066159df317a00f3ecc23b5054d8591a08177af8874ed9ef0a8a8ab48c7df2e8e10b1055f3e1b5eea3a7de2563f767804f818eb2729a1f49f22d2428abef39473a1fe4d1ee16c9782ce3f026a35840d64acdcd95316122d304fe4696cfa9206bec092a581cbb6bf68b1ec0a655f6220b0b8f897eee2a5a2393a471e593a11618f36ae4c8dc1fe5f2eda73da13d569a18cc2d856034097a2dcc42f2a8dc0cd73d37cf3c5b075ab05a6e2897a4a637f04e5eb8289db03462bef250c11bfe4895eb69667dc90fdc2bf097ec378ce544d34efeebb0851f9751dcc04d73afadf157ea9c99e7cb58b033e958649ba51dfd41ea2d76186dbbf44026c102faa616d30ca4478064fafeebdf9789399d9431808743d0457e06c42537e6eef6874123dd93fcf00411c1d8105db1297e19c5362ff38c1261fb507fc5fbe5664ba88140d0d90eb90d0a72352aa64f0316a50b45f023958638da22e52da0d525462db8658029eea3c8ac0cc9cb236f2f049f7ccd5edd18e4fe64577d81172bbbc1e36e2f48205ccd3d2288f9912c9c9921c723cdd07523d5d46aab1316912541214338408865be2f17630b54dd3d0c2abe332db1c176fa7ec0f3b17f57372b9f678b5dfb1c505c7ccadf0cb22cdcab075740684c83478aaf24fc5cdafe5e30b689c23dbf2b4622f1f2537284b7d5eca527e1dc831bf1a461a9f365a5fef15564b766455e4cc7a3edeeecefc7b03aafd14d62eb03479b8650fbfa5c010d36ec5a2fdec99a2fa57d871abdc25bd59b4178a203884d5042d0ac188de6bee8e795303447e60a2a13885bab5017ea674e7ec85c097111b41b96405837147b35cab3c37a0b713240553d2c61c475596c56cae7eb0c508c32020b6acd7287449b852ccd8bde013e24d6b6cc52704395526d53d800894844b5f0a0955e1fdb2cbf1f46579e463f6bb85201dab97035e229a1d156bf2452791811da2b4fb98b4b7bf3abc95b1129c2238f555183b26768f7f6cfc3415391505bf2ff679abb4b4b3abc80ed148d910e3d33dd6e7f69da6d0dadb3385114845a57d44f1ce06db093d0b348407ae17a91c17a541e782adce3d2c5c53f53f9073cc7abcc05d736b5923ab45fa0789174497a80162300a2fcf36dab3e037ac5b9e87247df0e386340b1ed9c296f699772cfb7d5ea6fbef23a9b49207e0fd6603bda211a1d03dbe8b8d8ac0652f1471202a27db038e28d6ba01f5777e60e912db10f6688ae33a3a99946474f92fe9daa562dded3e09b112c3a21d6b1a26a5b1e2dac0ac7c2ef986b8962864f174ca531109cfc1d5d43ecf507ea050abf4c8dff329a40f737513164019b95d2a85b934c2cd1e475262365c1e4cc966a7ca28863c9a3b3dddb37ce0cbdbd2cc9d203456d9d5ada38d6ab9982eb197752f3467e6ea76c4c7f16978400d4cb477d31a81ea03748761c3e6fed68d7a6981f23273ba1749a70784ec5446038d887c9733d9feb583af14ab12be14353ca57f373162c9559b65fb9f6ae13f483045d340600a4dfdd4524475727fb613db8e91b320542fcdd5e34297140dbaad76bc8604f2cdc80411e85696dbadaad6966a811d6316947ea2f58bfc7c34d5adda07db70b3c50b0e084918f546f0c8ccfd9c0bc2edccedbc1e29222dd0a26ec9e87360bc23cc06a12dfd5666142ff3b66f330a37b2b6a539a31946b07295dc74ac21ffc44ceac19fcf56f3f9a905c77774bcb767efd3dc18faaed2df01840d0c619181ec92d748c82f72426192fda16764cc62635720d9cbab5e48792bd53b2f82c2bd63de9afebabd50d36ba2f1759a1c7f78871b106199ae1df6368c3eb972a1d4b4773aa4a3fb7a3ecb4b31244785095976e52af66dbc857e70a2cc00bd87adf55c10c60fd81b8559b19d2f1bd361af442eec0405afd4de75946dc84cd6cdd4ac498bbd2e8887253d8ea13939fd162556a783e3fa473092b361f7e74e578ff97c21ee0b8b21c29952aaf5c4f65b67891d07fd1d74ca9d5bbbb1a225ccac8d2d15062caa4e16653ce32a5ebabc2a743772a1fad99b4cd5391ff91f50cc7bd3fa1d1df3fac1a855a4479eceb136a6dd38a2e710750a0e38b1f5ed1c46be1c2095c8727d37841ad249a7a619cc4e41d8f20f247ea6b3af5b3fb9e424c2d745eface2545b5aa497c6bd6d9ba5c587eeaf12b202d81d9bf8efb5adc7e195a1366b9d94e8f441978dcc1d1cc02b40c6ebcb64fcd8420cbef41da75982d5b001a59675133b8bd91d22d6d6fd01a972a7dc534a694d249db99206cdc03f05b0129e8b69e767f49c3cc0b3ead9870a871bcd8d8e0f2760248f800a0a86b47ae73e10c67a0f4b48a9601b8172e6f283cfca2a1bbf1d0e02f0d6dc972c65216d0c75ddecb96fb5aaf425f493ffecf9c9d66bee355e33ec308358b7a98a22443ee813d483c94713864880bb08a8a6dfc6a26c052088d08de6933460737275c8298dd9bd969281f239c57ad8f07fef92442b4a6e47d440c8c86b5ef6765363488821b3f1d08359b52db1710e81cef24ff4d80f5f6591072ee402807ee6d439e5923919d622270b78e13a387e5fbcd393debbb923e98d3dd2dcde03cd72fd170f44e556178601fd1a206c9c314159e39c14f07ebabbe649ae1ee9c1cbb29bef40629f6079a43baccd6fe758cb75fd0e58ed896822dd0038897ba46ffdc42954dc3ce0278ac93174a33e1f08adde069671d7d195e4fbcb246acbd4313a0710d7e55394c377a23ad66f4cb3e404d053c53b1ebf0c7b59c7b2cbb974abcbeeaa77f6700f04b43f12e55e79a9be17bd0f7e5035a4f351830119b002c04ad1b65c195452fec4824a5f65da90ed3e08111022d45964242ee74adfbc6cb021bb10bd0e2da19a65fad0b06713232cdcc42884000a9f11e4a0bae1c2fd2521876bc99ee5649d52e98ae5b0818b407205a49bd927a08fbd69b21c7d5c423727fb64343f715402e735770d87ca5b4219c8182cf4d6d7636632342bfd3344ce31f2101427d1e2cc5c127299e803b18aef69322787556f2dd682fa42c84ab359c5ccbbfdadc27f9e63b43be1d4c364618dce1fd7335feacf97459b23d127de5ebc3d4356b80718afcb030948b9f52e9791351348a3306a8f5d99788204564658874e99f2d3fab326d704a9e69c14a58a955b0c3fc5a64fcbdd0c717ce71617402b8d8c9de8a62276944d1740744688870580e35951d4c2babab25e10641c3650c4821f4875c479842b4ba0e958b468c422adeaaab2ea8f061c0503bc43a22d7c0d2e5ac62126f6723128085b8091c96b039c91a7e1a419e83d81178e90a5fc632fa6243f817538e996d2d9a534701ac7251d2da724f7bd8b16257ef8c3cbb616b14157a6d97b8ed267c39a173bb0e54088ae3dabbf98fa1616244cb0420e6557d9d1a6a0ce6c052abf684328b0d0bdc3a37bea31c455cee48fc08eb91cad08620145bbd3fc5afb6241fae4d09db4d244fec58675f245755624bc4dbafa23791144e285584612e642512ba85b0280b6ff90282f397991790ce048fdfd92841e42c04f3116043e47e7496086a38c95651106911e872d5a9167801f379f6728d0b2c40df79a6214ff8e01c68da652f40039f37dda73757db85282986c0a293d490017a6610a5ef5d3c3ef2f0c6094a15adcf46b7be6fe33ac92340cfc7f0a4ca0c45625c96472f72c537e6631a13275d541b0e12e45ea319cb053a2a13fcc3a39c52e886766c64b0ba8c4f8c0425af30ad8d04f37aaf2a214bb3bae75b24daf1465c8568a33cec1327ffe06edb8b27f3801d0001fdda53aa4690f871cf56b53e02a40c191da7e529a5f411d0a76c3bc8d7192a21c5c5e937b5917e094e0010a21edc8a840d76bb4f2517638ce340012f23289c8cb80c58deca204bc67c5e4361585e6fc7a7fa67860e834679614297e014e4c26653c9617c923b0461808e78a4015ee68b76434f2b389f6e39e8a65b4faf9aac20c1aaa27b56c84d7a24fb0a0d8cd7700342db9ebf00ef7c74d93036fe7ab08a65ee61f5538479f2309f09f56f6c9ce3c988c6cb3ec49ee502c547ff287cf7fd6d743ed05a88dcb9e6b634008af1ac3cc0c9e9b79496f6d3c4558e14eb63bcc1395b1575f8d032b7c1c7cf2ef0f6215d22cd6501b0f336fa9ef1018e220193274f820df743a9f3d803832adf749f5b9c1cbccb15d7853ddc8b0c0de65d3956f0ae0bf6b034fd71387318c98095eb0e66e362a61ccacd52ef753983ddf9613b8babd5f10c97fe3c9ac4eba534dcdc44e837b0411fac04fe55a8284c20a462767872c87ac84827f4b66e5d5575e0c2e1b1233719c78c3622623fcb4623c5802a0808bd35cd0c285e5651e35ec829384fbc59be0b3dfd5906af4662b3d6c1bca585299d36bbe82a7fa9b71b13edb41924b6e0b94cb7f182ac0ac95c11227f3d29e9693e9a38d99eefffc6d68d27779db40c291e06a9480671231bdabd140844cc11ee2880a65cb17fedb17343f2912959b9eecd04b647006b8f381544a783a2122927384efb4666ea4782d0aa281ceb44a0d4db5fd53c7a80032a10c050c5981b058d6b18ec394667d5338a95691c2759c1f062ce66c82e3b4b01d0b50a47c911fbd14bb11e2c3a9eec2db920d357a953c215322696aa60ff6a6a9163736764f3d5dbb0332332c89cc411d7cc2ac1cb4848c8f18bd8c424cb670c978249a3aaccdecb47ab813f25f2cfbc90e15aa90a8ba82bab9fe79e92a4fc91d3386ec805ed82bb6ccf551d1b24d38b0cea9474ea8b86739f486d26fcac346966862147dd21d09ef543cb1dbf76777343f4e2e75267d637c56b4c2a85ab1f1643a0299aebff9ff67e5e067b582a77afccd7572a7d59d12b94b04dd6dac41a3fc32c85b7156795d865971d3b1bbc490d78ddc086f712c56f7cb62cb223903e662eaa8ddac40a9d7eced0b96772abd808553c371fe63e5798ad64fb4f94d324449dae28891510780b2bcd14dac4ffe774fbf3310ba029d028314a08e644c7b71060211d5df6bb113f9f04ae0520bc52ce89cf35efdc5875e4411e799ccc7ee8cf984a3fef4aa1b2573e282d7cd0787a0cab4009d4a886fd30d80880b2dc4f76db6e980eab0c76651294415737794658e0c9e63719b3a827980dc7c854d84cb11bb70349ffe01745ffe20b64e3a01faf9bf347e4133ad16792bc9486ba7469ada0cb1282e784522ed4c884d9e43d890cd625c0e0d31c2df85b2fc4387b3e19f53424db05394e569c19d69a804de47d0035f926cc819f497361ccc252b1fcf6969f096500d8af6e2b6f2b6b9b17693ee502478cc52ce5f3387b5ca43751b48ab65dc19b2539239b5dc09ca645db0c898e069fb436ef54c9661cae566792c5d22330fafd9335b326388fa69f5b8811d0fbd914ee7279aa06ae42b6af44f0cc798957fca42b0735419be009f7a09385fdc140d50997f56b3f1b0084da51a94ff25f556483f4a628e1993c2b518d50317f7dc6dd4d5fce674d1d4184f1007c3ba308df23991f0a649323611e40c92a82991ea9c54cee1444a1ab750c0c3f4dfb1b4d513d92264f0fabffd22264597faf60d653f9f5c1b86c558f74fd75c588b29c78cfbe0ed9ea7832996acb9536304efed45062e334b47486527760aee5d99a90acd530d21c5db0e1ba238f15a2cff7054d28e4dde9410666f5edc1c6670820901efa9c556595b719dd2ddb3635f167141afe91f1585db169003589fc390f1ea94ac98a5b15d08076f018bb7ff7aed848c3e8a96ce3bf8a4a45970b2520364368952fd8df15436ce540ec11b03d77a8e46606af315fb5f5bca329d0161f24173a40e1cd9522663d5b82cc71cbefb56bafdfb2882d6d6041abad0405ad725e28d4c051dc60c8ce9c11731d761760d1163a101b59558532dec76e29d9b4b7932ccbbc571a5ec0b89e3adcc91d40ecaeded4c06a9d0e1fc4236ed4dd99c60e5eaa84006be207201f421c84744b1d4a01f1bc374b232e4f1000d6ba50e8f7d211e4030469556c316b64594ac0a19832c1ff73bfabaaf5865359b6dd6680ce409deab091a384ad69e46ac08b22e05b204754f897eec9e95fda63b302d1e15c7876d529183a325632ba5f078b06ad72840c59d61020bbe78044a1de5888391c179692e8eb3740ff82035768b108569d8fc76b95932cab1185bb3f4bba409da166ee56a21e250cd39861d451de4c60ca2ae069006a2b9c836ffc574c7b6265dca33d5a5678cb16b604e348dba257a6429d3ab0dbeca522e0e00c0fab442d55cd880dc45e66b6a7901b6d08c23492190b5134e855570116f40e8e98bd2a65ec4a2e1ab6a9b6b62fe91e91e4f4cfbeba8547154695aaed48aead2f3b54d6cb8504a7001be6718a74cdd24ec18eca64488bbb177f7f45201a56f52f060c608fd0d85364eecf5fc51604c3906bd5497c3283dd2ccbc3087b130ec8c982cc9e06e7cdb1c1b86fff2e77e2f0f32e11c5a769eefd894810d75e43b362204f798a9956b16c4fb1e68efa89c859cc7f640283313dff03b3fe168d56f8a377d02732987700e9e78d10068c6162c2ced09d609591f9ffb9f9e2c92402a2bcc97a6772cd2151763887318e31c47f813137376b6a7e7353880705231dd8f1a35df15d663d447813557b6836ffc489ecf02d243867ae407558d12473787433a38fa58040ddc00b4ae67ca9e6a6a85299ea34cb46880f35feb94961b25b576bd956e9565efbef872d84d0a918c8e3c34aa0ed039cdae8c4df53d593a58342c1e2c5d2c577ebdde2c796d3acb63003307c1edad713523d1f445e6b481e484cd2754bdaafec1afb8bd7a16cd1342efd15b13f307183411cad3b5ffbc78308c873894d69048b6391ed24da96ef9623f761300242513e6b47eadd322ca61e6740ea9987b0f5e683f0ccf26393326df0ec9648639a85ac904fd0d5f244f783c3eef2dbfae39b0a9cc59882fd0c30e863551cb4999e36a75d0ca9271b600189c05a6a9e433c8f790bb5272f70789abdce4afa9b5724e2b725ebd943e695fae14f0ce29892770bdfadc864bb2026fb45a0759ce07cf4bc1633de09d8b017692b6852d5ba820c5e738b970950c05dd4f1b3e15a1248c9ad1fff2106dc11e6e46e34a228b1a996edc6397156d6369b75952318fcd3511989405b82f5ae0845f6d2d848f2987b2a8b78f2dc8b008da475a956c9ef24278e3fe1a5acb4e8b456f5833edc27ad53f462e2a6f64b28534b88ce1e16236d0909bd8bb084310b1430aeeee085b082fc579b1ed419e691506876e897d3b1284d1a963afb545ceb68fb77954f86bbe9fdca26a46ee0a862e746f8ec73ea271d4fa06a6467283ba482056dd38cd873e8f16d80c43a89ce5095978b8fe5adaee3dca87b5a18d98b499b88d93a092da1d700ee299bb5068ab4a430fbecb216c3c1cb40ce1b67feb36931198485b91c8b81049911ab9ed28041e6bd53c3b8995fd3d815f0092f1480cea8eae32c8b0a1443824c195caa6dbd7cd8512b4bbfa5c2979ffbe44cfc5f9b25fd112e721a9de637abf150004a9d383b9ab915f9aaa236bdee0d0dcf1b5b9662344fd0c5650997b0930d0d48fde5cebd0cc6faee3974ce46fe2c11475c2e2606fb6710b48daeb7f4d108a50be7cee8b3027f700da4d3104f495a928fa5c2c7b371b65e58ccd4d9c6db35bd9876ebbd1e8b7122f54502e9af269003be4df40cf3a6a2dfdb4ec585ed80371881532c30e8232d3a6c33ddb9e2478527a5dfbe0a0544f81f30d46e258d83ea45a7b12f0a244e544fe5992d289aaf50e08ce1e79acf479a020e24a5354859cc54f04dd284dc86512ac5a20dbf9192681a650fbf1043bdca0468c2da6ef3ec7b5e79fdf3fff0e28c805220b994aad0dbad8ab0f3c0195f451f3e3a11b7f61e8aaac948bec6636627defb9d02e886eb1ea77c1290feff9fc7106d4a6e99b03c6180d26e6dc7fdc1e2729c8dfc3749f2c87368ed7793455ccd0ab2e00da54696778e904367171d86520f061dec285002333fe928306e1a4a3b0ed88ea00eeab30ed8c4eb5a052a05021fb77993e82e1e988ddea77803f9d05be8929c44b90890956b9cadd6013aec90ed849af2d19136388e325cc4be3d1b37294288148c85a4f8dc28af044feabbbbfcac171f85bec7c4f666b5a636c2491567f1214d6274f0fbf6c61c385824c567cb2057a18858b1211b219f08f2436569395ba0438f58cd7e8b10d744dd50b53cc171e0eca88c88a4e61d8a65fb38341a00765e3e4844d084d3fdc10cb1bf0da3dcae3c8f70b0c1d2dbfd13c8f19ad2677e74bc49f97234aaa23abe059156e7ee36ae6162297d270be59fd0482c0f1ec173cc13b24896da32027a7ffc6e120025264244721cfde43d0dcdb744e69a75324b8a2524a5590dbbc4f3bed083769495cab74910b2c552163a9187e04ce351cd36228674c6b769b4af9658f135d46fa03c9b49afbbf6c2e8ea6215cff3ff83fd6f0f3d507a60d8961cfdaecab59820120928380790410057251890d40841dc25fcb33b73e534357705bc56d36acc151d809e8328267d024351dcaa558734eb9d103345ac054932096b9cf12b66b5e4d11ce96769b0c9136be9ce3f8a2d8d9de8e1c6aa09456b57b98d77c8d3696d82f44e97d2efa0c88e8590bb11abeec4b1232dc25d5e2df4f3f6f45e5508f905b7667b05d9d912d222a3e0dcbbf96ab4b4821f05c695ffaaf0bf98f763816a5222209b1b74a65d1f6a19281f8f5bbb76560e9a0a71dddeeffbfd2288e9ea8267f69c9afb3af104f9de8e4149edcf514fce2b328b87ec09bb2f52866cf00ff5fd78830030d131975fc5663d5a136f066df838b1e25b5ce13c19068b5b80d295f082f17b99e6f4b38cf14cbb2009ea2c553159aa0560912871eb24170061b6630bb2542b5bb23e48b10bfdd0b12346f2ccf0fa374e1517b1e8cd627eda0a90db0513dd6ef0db9e300d441cfe48b3f045e9790bb4d2748c114f437fc778875e50a25aabf0c086c8329056a6470775f6021ba0ab08a6fb592271a611d92883f403717e8a048e1a691e60fc75297e6ff46fb777673555580b82e16e810cc4499cd4b5da223aa098a47a55a61376a727cc39377c78c92a17aed86ddb58323ba70087a7dc9cd693c8f679d7e62800053818047642d609cfa0fff2f891e312b1317fd3014967cca9b2fa415be21054415d58d234e81e1f0f22107a325fa828bd5a547a9e93dfe4a46411df52c2171de8ecbea8fbd96f58e46e0bd5ac4151db5fb2623216ee9c292c20e701fcc2642b7b2a65f1331c41afca95240b5aa75b9cdb883ec99ff8810d0f713909bd3df5e29d797bb891933074882b5577f1aabd4c43fd1df9146a740c68684b966b2ff0bf0edf5a91f57d0c3604ab64cab1436d269db43fe0b169aee5bd4cd34b7d2b5ba7a8ca53c32efcd42a72934b88fa5fd611385cf36f2b29cd2a07f8af926ca563b6ba2c960cd74212671db05228c8974237289cd1675e22f1345082520723f0acc88468d2586d6929202a7b295785f00f95fa8eb9f85d7ad12b64e79e31a34419d4e2725678dec474e9128822a4be1571139d5c9cde0bb1f9b74d52be38ca09396366dda5b5210031896785a5e2a3fef23e223aeb23913f8b1d052e110f632b035195be544c8785d76a1044e05895c3e1302979ba43458c9f61fa290fb3621b64d95e7bda20e7fd4ea7d947f798733e87bb7473a554a43c29c9e5f41eb4b79ae29abb43a93574eae1866176723acae9d49bf2f0e5e24d15426975c3757b85759150f8aee6df34e0a786ae41ece1c309cd31c4c50b6067098465cb0607501243845b93c520686b50885ef70dc99ad32c53df4712fcb9d61a6f59321771adbf2106f78edbc93266248fa45429c611d93d9542155d6267113def46c302811ac6e895638a83a0ba718a038c7bb7056d819f0de17c572d3a64458ddf1f211d0bff1075137e1b29a6ebda28d3738584fb23152c11644d48abb533397d870595b13f20627e39be0d658b36c5ad63788b6343877bcfecdf20be85f47f76d078df7f1ef4203f72b375d884172b729e85837ebce9f6592c4310685ea6dd6d90ea17eb8f4cab3b8424b306c143edd0165aae8733ebd00bbbf9b8d1b460eb4cc3baf905aa101e58a5dbd47567f542e3c944cce04a24a076c77f10583ddc695bb4a2a737bddf881b79aa229f5ffa0438ea59c1f3af6a7f9aba25aba81f04de881cb851d45047eb7fd455f28fee2927ef93203a1795db96002ec958f8c0c6c68cfed305e73f9c1c12d4adb7545f6ddc241e0e706f0b464208ea77ec52511e52fae59b32e2ca8661b2c18a1c668fd6d0d04295ddc31483ae22cf49be309910615873fa567eaba7b75a95776766375c7e7b63cc622d05bab5a0d122af2f3ec4951d0ce1417a7f83deac5f8a1a972308963c78cebf90d8470699af56c13e6deacde955edcf4883464378be672cade0c299ba5df2f2d1783e79d4d4dab22dbcefc6c97f13be028dc621a4ede66c480a47da677e4556d886adbcc610715c74ed609743ac95229b650c16710e46ad55b536eab125dc9f22a0d08aaebf2b3343a80179b00a7707b63ae0040ea3966d91175c10e40f2e9e16734fe4ae8794496689365e5bb63b9ebdf9443131b104bc71b088608bba4baff0a7bd35ad4818f53a291db1f6d0956248cbe449678c25565fdc30ec3c754531c208c12bc1b0aa34feb5c2c34adbbad045d4dcd6744c280dec564a02d7fc313f480cdfa99a9368c58dce1b4dbb78c64608d071b0395a9e42e05e0262820edc5a13fb1c8c4e6eb16ccc94cf119bb82a0fa3705e8bb22d1c699369d5e61a557fc4afe16d9df28dfcba4a122969db8b62da25de0b6b556fd4de01f1a8cc182bd01a97e03b91243ac6db90a4ccb47cb75beca6c421f7738425bc837d6deee7ffb4a48bc4e54cfbfa3a4aefc1004bcb4a67a7123f9c33f8fad4afe34f8bf42b61d8913ff2e049e23eac28d93e2ef82188811c5b43d89ddc1f87f68f91d20d9275c7b2850ee993750dd7bc1d4bb65132f67a3beda5c6b00792a7e31b0e83eff644be95ce9c61a34fd4dc1489c14b49a3b439538eca2a8a9259c6df47e61d2c85abca950329bea005a4e67fc876a2fc37e1f79683443ed85381c54f1fa849a214894cab05200e2d313e3e280a160a56b848185763d1769177c3f9ef8dbda8bff2c8db0f0441bab27596b4d6da979e9af927c117111561ea690d476572a2ebbf4598566fb3adf93c1656c74d851d33896f9865a0bf4da9835918cde06ea9b3cf12c4d5ec14006a625046f565d4ac186d3053a24eb8fd3ca4ada1138fc58e3f0ac627681e7c13e3d4068c8a8ba56057412fcbfdfd90347ae96e8cabe29dd9db0c8582fbaab54001e82d2b54b0cb5fad82ba97cde5c3cd33ef1f4c0d3ce3913b85da8f686af301f64465e9a8af6632aad4a9685fd1a8d46db592e4cfc6fadc483f82a6df3704277e437fdf46765679cbec379f0f147f46bc223f9cfb696f84970bddbff7981a1d57650cd87c8012634c595503a3cd21ea0eccdcec232003998ef693317214775a3cb518d086cecf3d5ff0b5c385e3a1c432807dd1a669b1f8c85f3f78738f207fb6067b4a4ea4c37e201f566c0dbb18fe906cdb6ab0fa2910d229bf1de5d0350cbea22e61e800f43dcf82301b64f3316fd69254826eb25fb65d76c85fc682e57d87bc0ac3b8bcc826f63ee3158ec6b6752e086acecb91881b32712c824abc2bc65fd40e0d10eb8c253db27efa99a482eda0dd120c0416387da06a6d1e681ffeb839cb43b288cd853f5203c922702375f7b4770afe0bb8a4b76d2e9010419d758fd69694c0fa86d66c71b003b5da11e648f3cd345b1b044a577f5e820d5c2fc7a05477ee76ec8c324ee40ab7aab23c841d58bd8d1545af1595a1b3de670162bcc70d0d2c54f1e32e1bc1f2c80208363bcff3ab5f96b6c948a3927e1f72afbb8ab44f9b8ec2dda173a804e0bd7dfc0a14173f5f30925e556b271053d274d5129664b7901ebecdfb5e6c9b7f3c5fd8aa45a39f95f002979b463c1acb1044730a3a2a30c1ab371909a903781384bd71d6968afe4b0e58f328aea344abc832a941e8ac12f89422e743984c3036151301ed54b8911242a43f7796a626b863d97657a5b8833103bb2d4ed6e95bc91bed189f91c29ae30eec6b6ae6808acb80e4b47219aaaddc49019537e7e087e4fdd0359b3b388ad59331ac013c6a6cdd78e814efbbc95708da3a3556939bfb82532d133c5ea55dc77ae10ebd80858d13014876306ee2d3b4e8a2f27cbd11463682bb0706336decef58c5a85a8ae9ce10e267a92de3c8810112abcaa35647660458916c422e7b0f050304ffd88ecba7dea713b1bca94bd4e273f9b2f5c2361fe389e45ca709af98c5d9a667187acbd566b772fbd9c37f01f740527c6bcd91a4a0115be12bc0fe85af5e701a51cee0db65dc82716027eede0619dcf4c9e32721742c53555805bfdce139b1305c451bf2d1bbd979438f78e1d445a576360bc558131572aa58014700f0954767223e3e2d04d367d3b48eba693d27db487873431a8a68751df4967871f25a5a299acb9f2046513adacb2703e44ee048b2769df93ee8123192f76ea406e4bde9e474ab2058fd4e2695e0a2f237c029e7cc3eaf3048d3113c942ca6a4486aa20ba6362253d0ff9ebbd5187246f311b7bcb5ddfbecd75728348b075f9e4f119ec1d91ba51ca38479bdb22dc1f751af5912a154c61bae539671b4b35fc15645377df4df45f74b227387a75e86db221cf7841cab95523236d73c8a54c978955a8141e92b5391e934d8ccbe147e8da815dd40a657197bd0a4279be77873db9bcb4201f3478ffc08dae0d210f36648331f66acbb29df4cd6f26fb36dc77c61bae80a77fcff0045c0de274fe0ee64395e806036926e3126eef7014ca729a7cecb6f41128ea68a214def7f4fd72270edf3134feeb89483f047ad6486c9a9ca22b09bda0ff51e602c84a4bae004e45318cb443f4044a5d5013ce8b0e83acad5731c92dd354fb00a1e393ee802b7e6ff0a5edcd60d83d0cc3837a8e2059ad65342dc241b14856fdce0542bcce45166b7afd1bbaf70422138ceb337e6079d59511a8dae5f32e04cd7dc2bd7dab2643caafdc81ca797b4df1257b134c022ce8817d4cf7767e49453e9d90b029a828354fb24d36813d38791d0c88aa41d06f637a5f3c127890828fe209b28622805fa97d2a785d1aa9614dcdc9fd806845f030a1fcdebbcb49ac9b303f3ad29bcf582c0f1155ab7bc94812791ff6e2ea8b9a0301bf20751f5f207fbc2ac675d7f4aed47369a561cba5c5aea4cda5225eb6ec5efe59af44f83ec9bd3f67d28e753e73013c27c330eec19a38b0fa0e44bf9a4c1665b84669db5427eabae814cd1bd0463ead3235c8f8ad985f2719f26d37d668e5d02a35885a72a3cbcc63ce4b26a392c8d15a86b57f113860fd67ebf16833311cb909b17bef2b95b26de4a0e26fa99d4cad6f1bbf5e09bb2734c4d6877aa4fce76acd0587f6a639a6997f13f590f78b433ca3468b2a0ad878e3f89877215619802977127a02c0d13fb8c535cef2fcdf780f868da2ed297e6483f30c0859c0066bb9e1e0d0b0cbfd38aacb24ad60d5fcf10a0a0d31d203a0e2e58bbf17cacd43a16e22ab3bcfbe35780b859bdf79a4615d2972409fa1112108e1afb13c2e7a86dc913c448bcbb0a1f0fd7c1aed2c719ff11eb0b68ec1f7d0d6a674c039fdf53daf955b5c177e2aebbd8547fe7dfb9ce8686744425026ab9be154dbdd5ca210da4867107c4b94e5a063c0aa873b910a7907072cc393598c18a97fed1f7318fe7f6f5872db242b49da9077ddbca947e0681b8fdec63d03d734c591bc13e31b2684c99291322b204259426e8a27e0625b947992ec128036bf0bba8935fbe99f54474d0442fc7544d95329e087849f8e9822a24a583053b85d3324d797587b7c5a842d6841afb6e7c346a2da4aa2b05f2687a858b69a7d0c6d7267ac0c604402b1577a76e7bc5775c8ea293e8cfef910893554353bd37dbaadc06fc6e5930478f2bcbc59073f8d74e5f9b1d0da290fa8ccfc0a00cc5769e856eaeaca4109ee401daf42c9c3aba0206a3437c491457ad8ff70fbfc1993fa18258c539eefbab868379a29096c49b382ee64f564b0cde78dfce303b30303a33259157bd0a62e75d79d7c3d134a2ed5bea8a2e28b445baddf51bc718de7cfbf5fe7bf5173279240284cc50893c1992cfe7f21fe235d19bdd04df5f020dbc2f37dcc7e30b61152891c127cb5b32246e5b6afdf15adacdb8db0d0371a3f4947fbe329f2312fde7e0b3998631335f2d3b10191db99632a4929bdcb860a0a543709d9d7b665d0e72186f72a8f26de795cc278cd81325253b271b1df85c34ca6c4529321e05572421cd6b02b21e260e5be54de7b8ad6ad53314b32291a15c0caf070083543f4630137d762420116f6e84189013274045ce166c848205f42be4c38c0ccd11c3527b23577550ce48bdb3d42e23f099f4ea78574520fdefdbb09b572b85c554b600236342db5a93f613ffbd8f23093cf32c4b075cf37597ab0dd8f38c72d473263f3c8ba0f4bb5281e022418ea55626d7d8859049efaca21fdb1dfc406818e25c2e648fcaf8fb00b7120afe99a2324454f0a3352679618d794ae54c7ba8f1660336c6d161f09bcd0fccd8b1013f723c2d5867a904384d40102551bb5249db1118bb34f882f79e3481237e80b59d89f082a16afa7dab8412cd9d89530b93b99d80fa85d7c9feb183f6cf12b26c0049b73f0190f18a386257deca7ea84100f1cc374d211f3696e64b0e8a1d452f1d79d73879835e6ee27ccac93d53b2e0c70ba83c5c20577a524d7fffbb9120d3029d01e7eeb162e1ef005713f94f6ca95113223ab5569753a7e5cde19ac6e9d0ba6016788dd12508efad1514d20dabcd2f2b312b4df5b449d04b257d9e9c7377d202a8787848cceab58b65ad79d5c1eafb18e527c1b2f3e40cff4e220ecd3cc03b8d43ecaca1a4ee71312ff8124c4181a7c431d439d9ec916170852e8fd8a811f208459b06505d648c122bc3d74a11ab133f2b029218efb69b696568a763702f78abc0097dcdf24ae498c97b37713d08adcbce825cf8ad3953a0b7c7e6c693b29edbb1541f0699de24f48dd27b2c9b0510d06675b84635fdb2f968c12375c1189331816d6c62e08fef61bd3a14c247453fb5483301b2dc57351cd8e978ec618211f0b4167939cfa72f4441f1e91e3f8dec688b955b6772c73f9da2bcb39efc024489acfe0ca7e399b3389f5c2d44363f7c951f11fb55779ac23c86715869629d8d0b945c7f57e403fb15e832c690a981c2380ef3404a8c45d0d904b2fc5bd06a0894ed26e4d42a33d95a92e654f3553e0b8941573f807df928dc93ccab4c20fc20d67640e3428dda6c49f1c292d142e7f0748cec6643747952c5ab371a4dcd8c705df7d45271f771c3429e2b4ae8f3edf90dbf20a4fb03d2d84a0e76351d0c7b0bee31eab31ab37d4520f5a66e6c77b6391ed587f2476a053d547ed759e3e20fcb3a54d7c2b584f7be9648e4a522d83829e98a1fee80e219785d1b585685d8f89d904ed06f94a44f5fc4140d3b731ab95cf3d421b938703a73e2d67a22fd0c77e46f6e518a4848d149035b71e270e6a4e1f236a71a80ef1054405d8c1534460637e517281694f09542c089860f199fecff29b6c78c9820521541d2bba8e625f27add80c4b56781b057d1363005cd052d37474973240ce6d825937ff1dfa2c3fe19dac2337ebe3197f97900df1f422cac6d21d6e570af933578679e2b39f8ab95274b0e2b9031dcde1854ec1caeb136cc9c663dfb5b6eb116c8962d42d307902a42c83842e5172b9811bbf71604d7baaeaf30ba26638980d1a197a63aaeeae0fab8e4e0aa9dc8ffb5cbc66ecdef46394c8ad74655d75eb5d0ea372efe34900f3b9c4c8b9b4561ee87a1437c638b689a5689bc1fe1e33fd20befcd78edabb119e8dc4c1b6524eee0876b5744bf6553c671f6d5679742c82753dc2973bb497abfcffe1759eba59c857beb3e63242c1af40a06c9a021e6017876e2e574cef39e5968a5b7fb54174fe0663c279e8419984cb1d2c2380dd915178514998cb40f1d8741b990e66b3585d75e7555854cfcdf0f3fe7b433d76cf53aabb969cf1ea1868b31d72c366b0a38d0f6e3ae33759ca3cd8cce9f70e12af47e01c63930e3a969d90bdd5471ed51f9ab95e8c9bd85e8f71f41e241d43a7ec87a8c4f9c326c1c254783fc3c29417464318e8fe5e6b5f0654604838778c981f1c0605c5332471fca88996f6a57f9dd4fafe9679abae21ccd199c5cbd58ffa03dbf31aa0b535a4f828e088aa8af251c5f5c1211fe752f8ba0fdbdedda29adf4ff2a36820e10b34329b2e822ed63c20c7754874cbdc4a7780a2059285fc3ee3a7140e97554b91d3016892d742e75b7887f4854ae12a4b619485948464bbad44c7847d3c8332b454cbe831c8dda0e47eb517bb9252f8f62b2b529b56a3023fa46e9ad15c5ef84a84e1caee6719704f7177fd68ea53e57f5a3a49e27b701820deee5afc9755c56b46cddf99863cd6509669111b5c5d5dafd3e1713cdf9cb69473ca5c77af97c05a8a12c3f9cd8fda6b4dc1fca64bb2bf0fef282c98d2352e488cc234eab9364f050da6d525a8aa611aadf53e4a7194eec214bb9039209d8e1ec9b9bb4db3d18f7938536afa2ae73327d7383be33a4799510a076ec65f8131100e503c3307289c91aa8058411b5045a6dd623ffadc4dd340e6c354c16e5f27cf27c80acf6b2c281853cd35e8120f14ae3280fb354e987a3117d51af938fe7ea7648571a261d34b5232266829688fdf961a24c6291d41d045b1d832c39b6f5aeffccf98c5378165301be2e74295dada658361601c795620b08e45dba33548bcc5a5d9ac8ae72f2306bfc64a9460fc2efea1a6f1401a8b8bef25b160d8eb03addb66a244256b56a04d23737eed735d38e3c172be85c14b1e2610a7e46c4fbc864224957c3454c62476d69a1cfd19da46b0ddb3987b12941ef459fe52a655c33a2e088906472a8153e1db7e87d4789f8d5e9b91170b0d5698a5440d5e95c0e977a438d15b4c87dfb6fb215e761cc98f3561931f95efcc03560b6f8830d25e30304a8f8a81c64252a0ee677fcf2690abc87423833533a4c0027dea5df249c4646ce55d7ccd6d6f0162d878dd291f7ccd9dcfa262389791909f11508b00748fb34372f1e5cc3d453ed73b0d1d13e66161d7db1bd5609170f6529d53c27c72bee291f9f07f1536843311bc47dd6cc9bdcc5f2db3fdb08c4eeebfac40ff9a4b96eebb7dcd761c7633abb6fc07438d6d1e9d0ed6f16eae5cee1582af5dea57b56b6a52078a8addd2988767377a0ae56f2c3b6d525a2a60e3a5f486b539e25060636f245db96f6d9442603e17b4284724e78a923ad9e01f2faa4a7c0ed6ea327b5f0a91165931bc90e0916955982d9fd779334db3e0c9204e521104f7668a944d88e0cf1710699480f472ca7831c472ee7284243f99bcd20722420b16dc852da037e89363788486b98198138ee4c4c4508c2e68d27a658db492097be64d00079b09c723e2862009a02488436efae15f31b40836242cf45330d04268cd41304e797bbd76c423323868668ba06aa51e578a77ac0ab22c4ec7270b13dcb87254f9a7ca71a4ca62d0ebcebaebe6579f00c3ed5532b21a5d9102e950853f9b2815f7a57f527ea4c59d7d134be90a21313955e47c91e20d5c82b51de6d654f84ae22d3ddd25d4a55945bbb769e9630bab0eaa143f68af6cd6a3b277369217d20fcb5b37b317458edb611226050ee35f20a0b47fa6e9ad2b73ae45a77f5fae4175cf14c6ffc8f2b29759b024a82c760d99628ec34969d1be5b2154d503c001a0eb3834883a4cea6fbcfb72b78b60b9d09c044035d3db9d9c343c37df03d544c03fd101df91739b116f9b92b74468215eb7ec258de134b204cfc13e3b1ee816bf15aaa992a9dc827074ac8a838d9fe7ccee7d292e3e20fccfdf97a93bbaf59e6b301d2d5be5973007573e940265c028b70dcee743b1c8aa688971ce9111caed32b6050760ba75651b26acbe22c9c4b1f189a0405a854c86a56d24fd0ccced95599e5b84453ee7504f249597af81a3bdc7d3e91384d0f25384d157c013b9de24fa22a197fb7afb0e68cb23686e7700ca1728e9e538fec1fb671812848c672f54cc2f4b7a9d8d7d074b50c43839e69efb7d9c5089015cb300e72d533ab91fd1958752616f5a25994a50d7870cad4c96d72a35d8291cfcaa14951b0507c431cc42d2b52328a27b70ffe26659ce1e0f2a510222fb110d007cf3e017e7dc0eddf6441e5c71608f49c82890b1abd8a64f88c32ce8d4b4e669ce70a06f4307954367ad2b7e39171d2b4fa03e0613ddeb31c712b26f13b747adafc0f3a861b24ecdc3f1f9a015fb8f853bfd6d604ea782f3f243d3837e98173ec3ea0f7d0974223531a9532655a46c6e4f6dfd9c2031a9fcdea2e3a433e9f485d8e2b720c8387795dc7312eeca8b4fdae171a3c680c78e271d81e80c18b99bf38ccf4710b1a73ea52bfbea2463b2266d1f48e1d0c182dc2d57042936fd4c052b2ba66d96f1d40608ad6f2d100b726dcf564ebf4113227b6e4569ef0505e7b76c120dda5c5c9ab299b6bb85848f30479e2804733618d20dc4f63efb97f2446098fa07a646b69098ab493334d31a32896314c2d3ca59214521b1908bd5171473984cc7b162e2192586ca67e6d7033da1fb8ce3d60bd77a3bc9e0fa4d9b8e29b8ff3b2847f55c81033b7f154525d2a2c4bccf427a8727e565a225d7377e73b55c95e620374a5c18dc329641961e62e2b8343af9cf8dcdd136c1c0623b2964f7537e8d8dab92e0e623bfcd4922d6a142a1ff48618a0d001faa89ffb5e60922a23771105670c194b94ac85cdb128391be2e6c817e42153b1e9cdb2d903fb0cb878204f89c3e18b2e28eb7b5b73f9bc8d9984eac85640ffe12d035e7534c6115df5b113011819f775448a14ccf99c5f27d4b81217a806343b2a1c9c63ad4c96f6c8abc70e3da53615080f553692b3605f4a3480d51c6a6a43c0136eb94454e834317c297be005dc74787c46be304892c15df75c99977b6e513c18377ca430b747516d5d4f244ebff25aeb85fbaa1168f6485eeb231277c05fa137c59cbaf640194cd2e55302f013b5293081549a9219848e88880c63af7baba4b8c0df7ae04c0d005a78269b113a454389d150a6bdd3ae8b862a697621b0139fa8d423abd269b787c1eed7ee29289c4fa44193924e8dd285ba3962826c6975429dda5cbc53d9508437266a59430fdbe6bbc94e5d2c23da87efd9f9f3d47ddbdee7fa706a1e91c3d711a5e894c3bfa38dcb203db2413d46de76a60eff320f80930632aef3d974ba856cda6caafe5b86805c6645fe398588a77f5bba8f344321fe3ed539dc07046611bd6e9ec85df0cd32880528fcd7c71cbffac0c6850ce1171b600429e11237d93b49d1fd60535bcdcdf8515588b63fa1c70d82e3a9e2b2e906311b2e5488b27320e06f84a3b0ba05775e0cc176ce5e7d85e1e095b2094c853925993a90fa0d55c18dfd7807cb524eef92e80e139249e2440b8a8bccc4872cdf22e1854d1942a83b1e883b0dd0cf8672ccd066921d9e0ea91daab5419145a201e62e646f3954e4fba5535c7d73a5a88044632ef7c32806b27296ef427e39f0982c00f2716bb43be253d099719aafce83e70881defb3afa96827cffeef532a7ceb761fd1da7e07e1921db188a1a5725872cccedc46b99e39550ce11272e334337c0861670a66cdc1388d9f02b2b3f65a8564776a412556df169f6aa96cdb9bdb1dd74a27635052d86f386148969cadd3f73284ef74e6908915413667f90d35d7a7daf665469c5b1cdb582dc02e8e032fce72eba51a38d4aacf8a7973deecd0909ec068c233f30087c29864550ae827a6575d6483d129e4ee3876712db7c0e0a02f81e6d4ca8b7cc9b0559a30f99de3fcc2f0af24552489e2a6743a3caec59ef4ec032ab23bb1fb7694eb0b0ea0bc6414b571ab46e228ab6693154cd778efddd8bf33f519336bd98aee298b713597f9785c4cecdd5682da4ad48b270191434cc2003990ba436c5695f6369d84c3edbf1066fefb4daec7e32098ea7e8d27a579d7cdfc80bcc8397da52b55d793b2cc4bb1faebb5282d9a78a76d5514f7e54eae1b55a689ccd6c310d8b92c5d4841caa936be6fd25cebd675e237aafc6473a499eb607c71bd913bac3635a9b6d33a0f67e6be7f04ecd0299913b08da513d056cc739ff15fb83035534da182dba519e7ad8d2566423331297e0196a6898cd1e4c855afe1cdd797e076377f318928c5b2df063a5a0b219a6fbe572b1b580842820a8414e9dabd48cf4daa4cac981f6588c25230895a3290c4a1c16b4a3d9ed396ab5d09fc6bb4c26da09ed6f2358ce7718c76be9f754065e12572da6c3c18730d3a484ba0804fcdde717d688a1405db0f59387be5d40ac73f02499a7b76837cd4e5beb920d95e0a25ce6ba23badf92458ba367cc762c5202060a8371fbeea3aea2be87830e980126912f4dce348d622046b45ce5479413faed1968e5ac0361a51a7a5fb9584bc61619d4da8ea2e9923321c4a36fe8d5b3cc65417204407342c7c010c2f42aff466ceee56231921946ce2933806a8e339b662c184ee8289f513d721eb251dd4340293bc41881177f9c5fde5cc29c91f7300fab06f9a55a400ac3806a4143367d62b94e5b76d6630547ffbb9cc81f812ea9d28dd08d17fd98538e21707d62883943da0f01b66c6c8e6d6552bf063ef896ad3f7a4433d9b0191e060d1be725a51db8c025a756cb13b36c1bcf60aec2a8973733b11ec446bf0fe6a99d46c48e01a196e4d053733e7e9585eb72a62a019d4f920e6c620b9fce49d25c0a5ae8ed041e03425e4dc3175911a1fac5eb082cbd1787365efbd3c6b57d483f3c9218ec9287da56b83b71b52e00fd6d9820374f3cfefabf81445e6ab074385346203f9120b58986c4188168306be9f236df08e0284f1d2e4632ac0bf7c95efa7087917d4e46cd3c7abf3e8539ff8bf8d2659491dc0e9bab2994c00d8e2d74a8680e8af1796272f1421f482bf258c4a7f8cede07b73165490049e6d1b1b62e9ae8e8b90776a2cc7d7e19f847db294e70c8c1af71ed91cf23bfe0792cbf1fc6702bb71636dd745dc58cf7e2b16cc33cd3777a1b7d2fe3bf2dc06356268898f037ca726b9ee06bd4cafffb43d6e8c8b37b653685ad726d62a7fbdb1b93398f4cda946bdcebdf4269a4470f7f67a34f9b052f160978911bf8b94257270a0cf79fbdf15044874b71f59306f80b79a7a39a7b12ee58084d6ade3662dff7f58a3eab8776daa9c3fcd913d1ad0aa28a3da02b72aca88f6e5b1bfd85d294b2a3e9332a76d635aa9151eb6ad50f54fa7b88fd05060a8cf768e7adad453ca3c52856bebf69085b99003b5ebe905f525bd2f0c5050742b98327d38607e928c525a9ee225305b4b2fbd6dcbd65608034262d4878de44499eacb30f2af469d6d94de1e3b7a1d8e418717f67a5c590050620b2e63a0ec752d9bb703a3750b9889212bb683aa5ab1d2ccf8df5fc8fd23b458e29702e29e9338af269b7612bb271455196fe9aac1025c87c37036149353c4d485ac92efd2343116ec31328217dfe7c6096b490e0599eeecd04d6aae033b495410f950d6a4842e0572de4b78ce161fee93b742aa6d742f565d09a58d1410ddd616456b02a647bed789af4eb68a9bf6e12c51b5f673757719edb312dfc057b83a68834d90c13cd794500211e5f025290430204c2017a1e5421cb374e2b8cbdc2bdb7c5b83cf325830973c508aacf086f0a407f2a8080ed1828f63b0c84a69dacac8d6feb43b492d59614a305799dbd20f2a6ac024765eac42c4a4f1e676498c2b4181a64260d3cd0533983eb07ba9ca82d2e359bb1a4c214456a11e63186acc5d8ef116b61500ff9d33535d8ba9ffaa1f5b26ee18561fcc0b2b7ce5c7d517a8a0bc3def1ff266af4164ec726f92ae3271395f38008d62030e3153a9044d04da6c9d6fb2202cfcbfa5fd7b53f791fa5254dfb3b686217d1eaac39279f341881a722a8d7895a3af69537f17ee9897b90a453314e680842cda083e40680d5010529df23c440c3ea7e5cf7a81ed4c40f9ea1aa3c97abb7713baa55679a3296840852c84e34d65116f58c891cc114019eaf6b3fdb11ab7dded7d50445a50e59081c03591e4e25cf4b332e1dcc84322159148a96d560a23bf4cd81bd6105aa4df42dd42325ed9e5ddc06f9af17fb0cc4083ab199e52b8be2eff963842ffd820e4a63bc3cab0304f5fc20ee7171b2b954e5e2f8b7c35c66a04ececa2c0ff8497e67cf4cedb985018b88030dfe3ca5f7cf6f3b4e225a9d2a09a49d7b6b71918d95af64989a3d4bb5382122c83641d76a0206e30b229cd9a33ec7f4a71092c32d292e798a1ab38d248ecfa6b537a1b94b10a714020c2edb32b0a92b64076f763a9020ab1f02bb651d7aadfe59a1ad9201532aa0c419b515dce88bf22b7c0c727c0162120b8356bc0b61591489fe0a3d7ecd86d20b758d77a7fc8b0adb0103e18e9576458ef0b35d54d8b395c96587820e81e6ef3f88a1a76b152d4e13a4065f3aeea0a41bd7d9ca94fbd3e0fd5bced9837da6d4b06e621f373bf84e84c647ab7d504430039062e72a6f02fab2d11fb167ab9906e6a984237c61e559d1b990e43af387b5a9827a11951a0fecdc2c500d26071bfffa038856e7539e363e857514ab3ee2f38f114aa4d895a752ae54398c0c00e6d6c3307b4d93b6231422cbb70ae5ad5b3fb1025b764d3f9098111f6bba2174678aafa5056c18fcddd3ca70e6a4a523fa4b4e73cb3d75a4f6a7e85dfcbf99868874a4fd35270616f7e550fa4e2a0b02fa119e9c154994a3133d77a614733b016aa0f20fe2dd5397b3a05d3526b4db6b0eb4c086b8b0d983a5217a7be2d98217dd990400edce9a622eb6e258f0df2273f51abf7590adee5bff8ac2cee8da1f8eeead1f243d89605697dc601b8cf05a71061bfce51bc82c9b6d4a8ed1c75cf31d438f05896812d9b2b8131fb614f24efbe6336d5cbbea42267cf35d94bfce17bb97fe00cf10a2e75c03b45bfdadb1d8859c057873a200ac0e684c2005072b61acbbd83dfe4739aabf454aa86c8a6538476a3114bf6ad509f44013b79b7de827eed199151357be3a9ac0cf5d2b9b2e0ed27fdf48cc0aa2b377bfb997da35cd06efc5d7a17c2c09808e758b57451bd841fbb4063ae588f900a01900c55664cc9707cc3b4e19bc3a62e8feececad1421b7dd398137488bd77e762d8bf1543994246efe96dc2863f3dbabde3e25c293e4c1a2c33d5e6d6adde11c93be305c61b779c7f4569e18b82a37469cfb79d05decf035b082ca6b0a5e772da7a651a89e5a8fc9c14c03e633e9f00a9df3d6cb2b5d19ee45610c42ea98cdd4c593b85bf8b990568837aaf4ec23cca3598da45e509433d2113f83185eb21f4284f2d2252e0c613a99a652cfd0adb820d62fa338c50af1a9400618909007bc32a019559699d18ba255a13a00675679710d9c7a349d8e8e4634b3c770a5ecc4747de8b865a7fa42e84cf53499198a480ea2632ddb4ddd161d49c31cf14c5a3b082108cb386ca9897cf41838c4832b106461e3ef3629641b254012ba43c62785aba6a72c6e34b4255cee37f7fd8c3a1d3b984707134e1069c06fef0b73d0b3826732d3bebc228eae42784aeb0c43e6f6b5bc32b7be301d697b6680b2e7f30b40e8489d14cb7161dd5539fc4056a89aa189ee268875bc9a8f076418f59ae43832bbca2f4488da6db5a664216c9d06c484d637cb9ab0535d036e13eb47043d86fe28a21480518fc0e86762b1266c60a85f9237b799c81b5bf5fd21e2d7c1f275a7749c4f986c636e4533358ed85d985a262df53de6147815e1ad29edfb38ed786201d221def61dc1252f4dcdc62a0683dae7fa342e4d6abf852096d4557ebc8a3b16f71758bb614a34fa69e855b6bb969982608d823581777a9dea695de2cfc29a0222b6e06bfa7b88ff8e29991092d8a98363f894073f8cf43906415937993500fb9e28b521a21524d51941b5b0035db5f7c12f1f261acf5b1fb01250f1f041fb5b26cfded497bb69575aaa1ffc6b080535f3ea74daa5c0fb278fe8b58c0883ea21cf9658b49ade9c11e5d6b5cb83d1cf025fb3ef4a1584e424adc1e91342963fbdc408d6d0cb63db764d4e8f41bd315db5347ce1f27ed34fc51b50aec41566fd7c5f2997625f9bc0e504273dc823e97d03ac83a6b6345b9876ad87f4b694a25ea0aa53ad709459f6a96643ceb7ff7c7bd77761a3445b312a18ead9acbcf4a9956fbb4e8f3f2cdf9f091520dbae99a12eeaac23920bd15f5d7f192dd1a70d1097db84e7cb9416263f651249d0ba7cfbc1466c7f90319eba8b91c5d0e28131976c6c77a43626dab1135c61a142682199ccc26a8dd4eb70e15df9aa5232c051890a39fda5c2ecb6d2d5a6f1209c5d6e55ea858d656529ac64f157e055301037971404dcac5cc4c1407985da19e3170ab7112168d28200f343c0a127acd9d97cb878b41399a7e1e334f80e4cad4286bc032ad0f4397b108ad91830b95e6ac465e85a6f05eb9ed7d4ce36a65c6921484ebd58e0ed56aab2aa207555bba6aff9af1ca72b68cf6146a663cf84bc8ab1cdfcae648b16f2798006ba63c9f15ee0a9b2d4b37703679b4ebc18c2415b1bb43cf123f92ac7780c1117a8d509ca26679bae6476d86aa2199a55e53e9d0f2e555fe881fc9af2e5ecbdb0004dcf7020ff7ef2dbd81a91f20eb078962c912528545da06271d2e4a40a38d672f3cbb7404a3005d4eb37978695ff4f04d2e9d19849aa79b641eb4133798a96a14b0587c855256c1a6e8d6cad0cb979f75c456e8eb6868671c8650620723246ff6d5f75e8032d48f3a1724008118fd56cb4472d7f1b35882a00345839cb424c11685f34218fc7e53f7edbb6acfef9b04652da57500e103c45b979db3f77f2879d23b2db3c412a14d439986a2eea1f9c3d5be69523d23668576262cbb49e80785dbbf6ef4514b7d0e86cd3f5f846989e029e509bff943396b665b337c1abeef9c45b0a617f1f06d9b6b0bdf5c9e1206927a9c6a3a29ab87b9f548ff4276908667df7046a31163d6d8f50e7c8a518eb29669551aa97daba115ec5f50be1e5f4b8bd73aaa3b1744f73758abae3365cca408f9ca2718e257586df2ff888430f643b79b1786c8fcbd7e5c52fa65d24f315f198a6a79021ee68eeaa7ed3dbd26d2286e0a7abb6cd5d6303fd9a6c34413043e8533fd95b97a82782abcc8e8c9eeda200665e9f12efc0e6de4acf03819e7d34e27512c8e2c803fae2199ee60fe59c7431d990d3e57f8ee5d2890f11841732e810897e23c5d6ede5a23df2a320a40542f260794fbf8e2ee3a56c7ef9cfbd4be74fc623d1955dfd27df7ea1012612337cfbd9b5426f6f2de705d901ca9f86644bef08d692ca77b1c454c28ae8eec8f9d4461240c80181263033607fedf484c6308376d1a54b7d36d35c3eeaf963add2a77240591ea3dcfd70dd6ea1e1a25e663ab4effdf9aefeef266e6b97e11c60fb9951e0bd8712273cea64d8ac5ebbcb3f3be122003bead1635475e4bf9fe0a947b896a8dfede28be5053b4c3e626c24c32a8ab42ee7371166a18158372eac6fb208a972150ad2dafc8609dda67a1bc331443d5f453d9cf715fe5abed3695c0ccb56c655b9b1a2528636b5c32b25fbb75538b312b8a6b46ec97ab63d74b79cd8c6a7c731db8680ad70d56bd2cd4d4041b6b03a5b46512c9dd5220ba5bdd242ff510df9670ddebddf4a72d05fa39c4432b08224f1f450c986de453c51fccb093915a91e81c99c58934c1b024bed54c6ca90e3eb2c7bd62ebbf04cb506558bb90b7cc7d7208316b112715add5370a960c59c399a98fcc1187fbf70eafbf3dbf3e831c50b35714c4222409ff2cbe04e9cec9d1997c63ae41cb97fac3fe6754835b53095bdbbe1c6b726b4a03f4ad14f032f72b7c511c121bea5eeaa8ce345609683fd590d0d791197b14c71496cec61d3b672795dc15cda85bafbd76293c7ef2aeae386d65c997deb6542ef6ff4b2d3feede338306b3feb94b72a440931aba6c31b242c848b62dd4c5e3925dfe6c001fbfaa39e3e618209a9a13fa72a7accbe1f912b484ef9f0601dba77edf43e6e22a97e59cae50a7272cc9693114fc714066a2f64505b80a2d0c1042da99a0c9526f65d781c338530c2b9e8688f48a2a9771e629acff40b87df29c39d3bf0c6d6170a50ea66302af4f3b9b1a5c7c2c81b5ac5c993d7ada7130b53a96f27d111e360ed5e5f97a7630b1a12259b6ffb10023985cc2bea9203780549299b43fb19c0bdc2d7b75e4925e121b1087302e35d5533d3e27b6857776efa6b6628d82c2ab0882c05f2650499f8196ae2d1310c894458cf44375b731f3d559aa1dc24757dcffbb5694641b350f25505d58bb2b9c12cdd196dd564d0905087932ef1df510ec7ec948a36dc32bd07d39277e1adaac4c2afee7c3839b5c547b59a795a7dbadf3bc39e9a01703631464f28cc661f50a46f7e5cd753c16c37e392181202ec55dbf199604f11eb3798390d18c05d4e07d42354cce6f04954be63c47e26bdd3af7597ebfcfc7c175fd129e650279f218f1d73b4d0347394a41e60e1242655ec7acb4c7e0acb15454aa02f6c2ab1c4971de71f09694e209cd3ceebd6ecf1c31ea3d1b8592e3a4e1c6518ffd169b6ea9a457407f06e352377cda780a16a6a55fa6eba4dcffc436835300cdfcaf6b2ace1eff22f6c585a65eef6b824f7df47ebaea9ec6457c1de9b6c2afc70cfb6b6021b0ab1d0f16eb13c8495a92b7ef88da4fc862908332d2701d6ca6334a012d6170cb858f1003ed43c3a6adb705342e7e801297ec5de213843bf9fd0c3acb0ece02355478adc8ecebb82d5886be77f7e199eb5d72c6522983d7f2b81babd112094bdf8b6ccceb28d7e3c68c85c8c892519ea21c9a7cdcf4ae114ae50ba6aa8bdda2367f779944afa9919aec583e5d621d781be9231a3bc96ba3f47147bbecedb3de3ae075ce404ac935b497b280f4bcfc93c3af522686ba61c5ca1639a46f8f51ea6e122fb73c9a19782be617a9a82991037eb6e37ada8edf710eb77567621fd2ce37f507a3309a08892f38bb080b34db86f06ff869a1eae10a86a47ae0d8dac0b0ed0abfe51ea176474e79a78be1c30b616dd17456a2f66f9a99ea818593e34e11a9abdb8f537280dd4c3abbf820373255291db005179e3524f84517923c81f6cff200e8f565386f2b0911484baab937689a7321b870f83c14c7d708cf9b0bdf303fbb976f6a6c97f5775dc60f11e7fcfa7f84a70608521595eba10c1bf5cbac5f395839b11bdfe52bc085bcc774137e302c848d2922b4a2f37f3101514862eadf2f8f3fc4ba6225919a2f738ff25afb9b5f65c657a20b9f35d339593440d36072681d9ad116a65dd8111126043db47a8ff7ea8227f58414bae80fecec6ae1e4f9961b9a1ee7311b33dbc76081810e9df724c4b2a6ee99a21c6b287b18ba8ad6462ae622b6d93ed094984ef4911e27c78eb5582f058789ae4a25d040a7012febf8215d42ed7824738e0915180ca34ebfabae1e83210458470c9ef938fc882bda74cd3afac3a38ff677acd6887f2323785e790dd8bfa341afbb602fe0ed1f285f38633323065648b8fa57f5208856f8608538e6b53a64a18b6281d84a24d4f11a61c8b301e1596487f2176bf417ae05972d0f2cb8e1215da2bdb41a328c2bbe228063930404c580bf216b122078f43b107df4810148cb301f3ad32b4d07840dc3dfac6081d4029c9def6374c8e1b0e8799d3e0c9ae3d7156fe234516b496f3c5f8ccf2cca8d2df4f331187ba76b403c88a2bc6ab1244f30de397b948c550531e62f0fb1ca2cf52e79c91000b79bae474c54daa0e63a7ba9992685bf44831e03a358234628d53f152bcde6839382fcaffa65d0f8286fabcfe25ae663cb2d7b9d7d81576bb2a5985e71a32d6b6269d5ca6608200846f51e8ff74393de5e5e426b8a0c0b3d8d045aec24d9bf3beb9e9701df87493ebd9084903610ac670f8c5c56f731070ac69b53c2f1e715961a2f5e4c909e5988a1be6e3bc58166581c16d720b339db33b9ea79da76a13c127f94c9cc8d595ab71ec19ca4d8e28dfbb4d77390274368381b5688affbb89de7edd9c044b006ac476e6a7cfb119734d11dac2a16853a827276c605b61ddbbe605735300fd3357a9b7ae243426c8623f7763f66f5d76660963c7ee51924c6d0b41b7feb09eb9171630d0c16f023dbae7b122eafa22e572b9d4fc9fbde2b2d1cb66a1068b75c9b2bb48fcc98cac515f4fb4b2a536c5250cd23633add504303dd2c7b934a5aa7071fb9c89ebed1c6657fd81185e8cb4cd1a50b038c95d9079e279f06bc8fe103f0d9dd1b9a5db689bf54c8676b4c03a08ef5ba6f303d94a636c6b1da08d4ab6aa4e4c17028930bcf1081059c4365a0d6f9ece649c1b96ed8d369ff7cd51d17dd41b04a3dbe61f7386cf0bdb7395af23bea5eb39eb57adfb8a56424ea0b1463c590634a3c9a3799aaf4b60980cec42141214e95f15063c170843bcc8a722ae7c82a666352769cbc5abaff1cc85b55ad73bc372b844e684659ad8094330a96ba8518cd2588028811085c9a9b4a1e4941148bc28512874482bff2fb261fcc2440d1281ce49c5d68eb562edac2add70c064687326c510113cacf4f9101d5068f67b21e30658e116d9698b05725844f8e6637378aef9a003781f6a53c19bc725c389a7de9a82e0797d8ef94e4c35670274afdecee2df813289bfdca80a0b8d8cfc94cf99ae7a6c9864b310cb32f390ac578e7fb02c8865eb0da979e91b500907ded102dfd6833a1ab62edfd95806d3d9120fcade38d566ff08bf6a760c6f24214b7fc09e1c70ce1c64e9eb97ac2ed4dd38820e53c262c62979985b34fa29be0821497702cf01d30956ad80e59e1eff4956f021b77004b3fa9d07ed9e7bce0386ee04309f92e3fdb350d9d4fb4394c8b8aa76d9a15143817e4c0179a92af5b1d17fab8559b72738c8737daf213f1ecfc05dfaeabb6811d09f0f03556a11d4d64e6c45692f5f18ad6178e3b47e1961ba3a2b55281b938f29024f3bc358c789b5dffa564b5d6dc7e1ccf511057fe8c6cf17d2f39509102d6f48f4939e73197def894ae00d14c7cb4450c2f7db9c629247a062b28f1d074f13530de66993d131c43e2fc2fcd070da35dd6473cd0f845b0050676c1b09939908b41cd70080eb7ac0296b0aa5333dffd8d12dc21e6b6649b917ab6b62264765a701f22cdf215e90c57bd68679793279411cfe5d25672e15413161e72ff226561e605958b74763f881b4801042781ff93d8075a117fc02f5176e8c79e51d0386061d43f80ebfcc610404266c9c13b5e4dbbd9d5f1cbcc39dcb9b6526b93284a17bebed66912f7b9d6c298d6e5629cfc007bd66b6f5f9ee58769c743b693924019a0f98b650af8bf0a528a21c17bae1358f0fcc8852c4f422abe166be57b3e663add6d3ba7f1331a4bc7822f897e5cffa9031511214e1c9a31d4f6fe2c0c58484216f5dc2e8db063cc693a488f5755bf0589f56804547a77edf97c1eca41ea976e1414e3b322e02aeefa76be42ed382881c4d951ed12fe2dc3bb5a53aa43ef294b0fdaab8f90d5334c29c58451a73177aa46935cbd8b9bc98934837d6aaceafed3a8c5802905ff13b489d80a327557ab78f9303f67dcd30fb80d14351c5b288e2cffdbb8e839018339a5cff6750b65e6c4110514ff9a3db51079ecf93485b5f6331846725656259a46793e2dae553be61aa7e3dbe624dcdbd5965e4b12668766230523861fd2091205c1313ee10c3dd49fe92641a786da324fb22ccc3ecaf8057113747c50c868969d668727b20319920b4f8b728cad197a3f3e530ed55f6b6f3b2c6ec3949cdc95bc90b89f04a72d38fd758f181df9357f82f3315615795152564597f990a435cc56f007d2457dc7615bbeeb190ab5bd676d5229c1dff1001fcfa55c34490e74e788a2ce02a34f2782adc9e0fdf24a351b39c7a98169545dc9a43b7f3c14ab7b8700222a3195897379787c0008fc579ca7b09d376c266f0f1f48d293d34eac5bc61ac591c227ac8d44e88d960e642ff2fcaf2b04ed6064621ed54b7a6caf298288b4b2c91765bde98986fd4e963d906866b730c65647d1cc9e0897efd301ee1dd2c78405ac2c4b8acf404480119691c69da433881b592f9700ed1365508849e8b8bb3daf3b5d3a87e520e95eb9a18411e3c9d0e17b3e079e6a215849217985e63a219a77f52b65505ab3b33e215c47f1a5fe779b2c5c93874f4878b00b76e0d876e727e5115a21c4ba39e4dc9830ea23c525737f815c85c46bc36cf6dbdef798089a66da229e7fbcf28f7c8bf7a203f4c6d9980247e955015ae5db8acb36d96d020a01a2a88afd26a8bb3097b4e733c16d936430a084e3714cb5731fb9d3265633152d8edc398b36640cc059e156fa854ce909d2149e4a0785f4a222539f8489a89250afcd5cb6ffec7f412ddc1701b40257ef9d6a7efe4b8defeb36313808c971aed82c9be6496acf655400fd58318d0b6c39c2da2cba3018f683e3675fab1b85939e187e4b781ec3b0f9029ebca9ecbe5a464edbb0ddcda9ac43c6a1145caf6b065671ff9bdbd47a33ca91158435874413594cff15b6ae18d3542d235387db9d38a163062dcbde85303cc0d93d7fa85ee1fae37c257ca78210cae2d448d627d8f954a4bd2cfe871b7abfaf079bb2f0197c35ec37305cc4f2886caaaed62b7e87a7b58a735296ce8708ef5b9f83edde2aa8b4c744c915a714086e96d136654ec34ab87a3c78daf438aba92c4ddd5d928e5d914002db7f573223cebcdec807dc3cf56a2782cf31440d63c98d5d22522816ceb3c20f21b4906cd50215088476df28c06afd4a03b74bc1c3f359e86e25229df517e3db7365d77d4d8e24c1fd0507a6e09b5d10cd909c4e1cba8e5fd36631d0c4d5ddf7e1b420bc4dbf9581d4e469420dff122e4f045ce7d25c829f6ecbea038b37c575f1cf32211aa4f0623ef6a59a3df3d7ec68c1e0da3d82136e2e014c0d3551cbcf5f205c64ebf00d766423ff7b8ce659f3b79145480704d7575ab73aac914541449d1a5e92382a8a69efe4be25aa14f22c132b9f4d402d3df7f848cc6ad2ed2d65af55fb64a6a0a4ede18913245155950d726dabddd5a5221c528c22c9d672f698188ab74b8c960e0063775cf299cd85b73e83b5fa08679955eca5a641d7bc3d5d765be4e1774f73d0bce7e43e14ede04a884171981a8a28a5ac216c40da35946a832ffbaba02f7b7e7946d776d92d8b05b0b54deca87b5dacf8eae2e18bb3cd6fa262c8fb59f569cd59cef4d599d02f1d0af6216534ef3429b5ff86a14c9ab0db30699087f5321bf8dba2cd4201917d635f1e637d26374c21cc23b26ff780c55d8db35640f5fcb7f708b673b770763ac301914650295600b4a9917079c46a29fff7d0ae1dd6a145df8ca77fa56b113a4dc2c5b6fecc42d80099a29c055fd79c9b6a3bc0533b2c016985907b3c23f53556c8cbd39e368e3a6d43424bf4a97c1adb2fac6297af98eb72e4b5c98c159c1fba15d3c690ae0e243b58ea097109e86260575167103aa8b980f90081298cb83b2df09bbfbbc98db5a4aff536898f815312bb8e53ddb28ac33d379867b0aba87d34cd1ed6173dea4d4e7b7b0851d95792978f176c884d931864ac8cfc33006165d1272a60303c8e52c81629bb08b8377a901a7175ea645e5575fcd6d78236fa0d6fb5d50d44bc88face22a0267476297344e49829acb4781da5f380d76330f4f4b52d93b4124700dbd60b63161d5474aa19353f247e66ceb682c6a2711f47646ebbd9c7302058f9a9d022de13a4cd6df5395658fa759aa42671641aaebd23e7d7582ddf47bd1a6c4c6729796841af39146e044eb4fe21d27f075f9f83f41f15b790f435a1748dc465627b706da4c6fe67b2f31bd9621c65d1d0ba15c7ad68485f128cdfbfe9ad143be82ce6455b65c2d5c6d180a15b731696eb209d741e43e6c4f6ec9f5398faa7de9c5b8cd866aa97ff592fe78915340a108766f609e3c65abe7340a03696e381404b1d0f85ee13dc0b9e0cbbc3aa390527248d15e810e998805e98713f6cf823372d3fb11803115da92abfe1aa6f1f75e0b4466e638bbe9fed7a43786a2da387e0d1aa44df805d9380dcdace9b6e66aaaee0bf1919797a97c68dc1c3525aa296f678aee3fb560a8624332a7a0b20cbadaf4407d110fa412db8acda4b7f5e3a729524edfa2aa5a9eb1e15ab2c43a1a6b6bf2c98bf88714eac63a7b6af5d7f429b27d2ca34a21c03e37d1aa18e4afba5bf35215a9d3903b11ede687e484402ff95258ceabda0d85332783822f726cd7c8fcb5fef8be3c789026c3aa334a1b8803cc58773da796f9d75a4c18e654758cabdab25d086a57a0eb28f492b2990580716256031be3d8356f8828599a3c5e73d31eb017512500de2a04b9ca97489b70445cde87f9d90f25c06e11e7229521c6d59f05fda6033e96c7605c986d30f73e09f8351c1efe1533dca3ffd9249f87fab74e8a1165bcd36c56be4eaf5d7bbb38a2c0cec75fe5b4e16f79ae3a822aeecd048d2fb87ec995926e7d8fc41606dc071f1cd37c87e58f4ea5859b0eff06ff5860e0234247396a5cbc21d272df4db63801ff1e54ad0ed4df659a70a1d2c987561bbb16e99adf1319b6e23127fbfd226a8be8043e6577a6a93510d2209115f102e4f6758c099f874309030d39e27923649a2d3e519e993450333098f5ebb5713bb38a0c317d20ea65c97c6bc1ae0b41083bf73091752136c4e1298db2cfe11cd31925b31f95ae6f6a0319bcd36ebc3cc3d7c02dff5ab9f5dc0ed89eb91c196348359c97987c9840858e6d776934a04896fb1ba54e3a639326a1699d662ae5c4d3aef56650ee9ee8e5f05bfde2e050fbb2e9d2ccfde1c899b4d223bb366b590e6bb89a077854f76c6c3296d7f2d12551890403adb17f134e25ae93b7c484394b7bef57a410e9cb93e755c35a780d0c14a2ef89a8117820a75c3c00eac7b0f1109b481db2d96d72d850315f81b69da3134d82914a70d2572fbb5ed9a8581bd48cdf27559dc5016c6b1c77aedb7d12d07e3469e172564754f51143734c72c4598c681efd99ba7bb3dc57b060002e591ba44c4758854b4e3926c314fd8666119e057684afe386f0aff3e20e8ac557a53edb60eccb31ac58fd2e43d3fa7222b3d535215f5e97a00098a64ce67c14eac28a01089698ff7706d1ef04d52b105657c363ae16b0c87409cd857f36f824ab98ad9f7094f1b7c1c151f18f4121a3df643a7a0c55ebf03aa3e0467d4f6f180012c09701d797903c236ec65ed2ab6b0d969eccfb5b55dcc3f051440cae0c50cad051fc77a48dfababd3af2bca30fcde1fb8e716b08c5fa852afa6d387c550d280be74b64195464090d59695d6d89c7658a9ef669ecebf20f8f36aaec9d1b9e0c71b50ab358e17c68845fbebc1f40f3bc847028c266182d984dfd68376b01b0f1fb026293c02b4c91838863cf223aa9d161afa059459966660aa8ceeb71cc09a474ae51371e69382ebb8ef4177c0e71ded85a4db605efa03c2c42cca172afd05ff302d690dd739f53e70b430761929e42af9d2dc937fc21b84eeba8d49e22205acd79cd9c3af572cdb9d7e1d2def297912a8b0a2ce712ebe05355708b20637cb16022986cd91178c5e80b341d944e8f7c3de9af8c589c13b15aca550dc0ba570a4e58aea07e215054f1042af9d764a103d0f3f75c67c32054ca93fb3cf9346f8af6492141d2acf859ddc118e92d42f65db8f95a68d6532b5448af0c90b78f10b0a8c31e681a2f73ecb2ac793350319db95874ec4b9220d55d9399b39fbd3c2d4c36fd849e5bd757f2cea9b5a4510af5c1589ce82c4c03a46f5e2a233950890d0185f0acee1d5d94b92ccf48dc355deb0364ba509a60f178b282629a56d288b9009fbba1b8b54fa7246b6aad4a34a88ae987c265cd97494a6b9c5a7bbe0c85ba06f022e31f47f19ea304fa09d902e79cb3ca06d6ea49ee02c76ed7f5af0bcf77fe7cf3baf7d3725dbd825b1de4b5074a5c8ecb0e8978752af664dc4237d55af756d581c02c61c603b3c83c8ff4eba482afc6d04573bdba795ebd4335730d6bbb20d7708472c9c14f86bc85fbb6b61b3d7fc39f4f24e616bff3f570a482904f84680c5d0349ef70b337c19c00f89c5a16e098d38c707a8f71acdada045cf7c01c569dac8b9ddb48ba24e7c47e04bab9fe10e1fbfe2be04f9c3b99bfb958309c5dc6ccef8235c41c4195856f4498575381a99aa077d9141a782785e674da738cb432767107bcd3a3aef119d754a349a4e672ce2b28df00033095b7d3e3df6adabbb409049b82a9020a2f8b6d27f332e9f708a9d9e2ab77e71a7b2fe4a66bfd5c5c99d3c81b732f834bbd286e49ecfb2f2c327fbd863a9e3355ec201859adaac66b4348be751c5603b33955cc617504ce91686df759842c3104850a4bfb3117b42d3df9718633ff94ec2931566456142d5c40042865d8059bb967c7fd55053dfccccf2fd33f77ecbe2a9e01a59f28492bc511bc00b59aaffecd8417a33c6223f867159f50a58a3877770b1f008a435824a5e88b50574af3abb825a3b2cde246a448b54d5d4873a12771e2b171eaf5f6329f9cda422dbf383ab807b9bc12b694a9828098c330440bc04adfade7f910e6d1c7ee19da9cba8211996d85f8e294496828fc8ca447098c31a0ff9d08f68b527870cec511453059bcf1f37476f87b84b98618c26db7f4781981b3a0c9c27b95444e1befbd6da231cdbd5deae88913c9ba27db0a1e2ff9287364ef82533e7ca680f8beb7feb76e791fbf7dc3518c66b970106c4d953f801ea9cdd29126cb66f476219b7a992a04162832bf7f29e7174212153a6766a11327c220aa06dbb6e7f22948b1bd5470dad94502479d851f94091451343b8fe5f69a100308fc65300737f9f663ee8589509383d34e6f028d2e9e7f910402ffdf027b7934c270eb311e7ac1d970b1251249bc9f2831b67c8954ba480735adac2410cc145f47a479b9c633b607a7a6080d889e8764a6be6781aea78a5bf1d973e164385c63459df47becbe39e2a4d712ffe79fa53db787fb5becf9504e5e434eecff1665f5414c9883a830a1eb0624b9e587ea11425aa75e532d899b874e7f6b4df46f13fd1608301d45443684f4d86e0f58a5bb0809fa797a3fbea9105ee7f04760b3304f7db9cdc03020d09234b1eca30af2a8f60504baabb2a9b69dcd3977b704d38989baea3693b085d25d51b86c1e6b9f0fa1e5bd20ad8f7ddf1d5ef8bf5c6d3b283e60343b44382844bfffcdb72e72706a7be59cf5ac3bf713e0279e8b9dced4d3a21f8830463be173bd0ce15ac8986e0815f8d6015b4bb13d852bcba04215c427e603a5a8c28ab9eef361698597653f49bf45ead81117a0c834eeff46c9404317408143b259dce1a2589d583e172bb01abba56f024fd829586669593a9f46560042f0c2aa51d3cf288e5ef94124fcdf8ad730d684b417d9e86ad36ac919eb589e1f5d7505c323ac4bda3dbc4a88fb0248b3dfdf8af84f312ef75d6168dbad423f6086d667d304bbaaa442d9948d3bfca496b7ab335fb33568ff32d60ac8766cf0f6db64b1dc2e68fdb3bf4d701f7f8bbd19abc35b9b148b3d6d5c32a2b883e3716f07a9942b30940b84d810749eed400e083eb945d4074f90277eadde506cb38fc490693981d766a2abb0ba65c69079b32bd6c342620688b11014a21dc68d357142faddb8abca77c285b990f97f90f1f56282d2f875a7f2b2df2a036a23fa9294353c023006681ca76e8a5a83636310e86ebcaaa2bfda1ab8e178fe1651734d75049d945f5300cc21f87164ea2b2d3f2ee011d43f6bedeb9964789a21bc0d0640f111988506868d6ba8cf35da9ee4c5dd2e3b42c0bf9c8b6f226d51e9a162d5182f4614b22e3e47b718d8388bc7af8415683c995cc20cf90e3b01694997cb2302c3cc092f38761181de752ec5957b6e17a5b59f39290425a46057b2943accee9461b0b56263eb8035413e82b63cd4bc63ae82253f1270a69b918b15f97e40e3d85fbea8563063e6e4a6f0ca599db8ade97fd34efa19e6a88ea27314e1bdd07edc34e7c650fc5696bff0be0044dd5aa8b0e1d596e83850c620e07e0cbdb20b875495b8d36d512e7b9d6e813b20e722de1de68e099ff5c98f5a69bf40c39e6a1d50efdc7536b71c7216d8b2ef94ceb70c498359c16953373cc106361fc151dd3094eca830c28bd20b5f7ae496c418378dd51237f958615c3d24f477b81941bd254596ce7e02886606056c8544f091246a073aadbfe49962ef2a0892bf511c4e758c75231d781b12b20a8d587b203109530289d357244fa3f90aff30419c99ccdb9853856f1e91931b73f2d9a7f88054e77a500b7a0191aba3e8a18b6b89889d0680014c3d49d5d98d1df0d3f9b966fa9d62aabe94e725a319e39a97a3a8ceaf24d303bb1c6d0eb12764380fcf7a03b70899a27a12d6a1ee5e90bb6ffb405f8b9296d573dcb3200d46a93f86f70b82ce6392e19a80d0a859ba39021b5a8347706acae018a25344af1b5f2bc1e6e720a8428d38f074c6542cc2714a22402ddf21a034e116053a3133305eec09a31f13658f0a3c63bbae6f4363b1113b23bd32e413af6f1e6876f8399171f4d6589103a6b03237bc07eab007d2919bbf6c992c88421b3658a81f4430563c77c37b3e832e6f1193f72ca115a501b8d87b1ae1da15be9637f047cb216765ec40a7ab1537f7dff25aabc902b050392eb159a9a2aebd565dc462e085b071bd4948ded2ea0199dc2318f83d65a05d68f7e10b00c618183d536a49f28fad8868b083ce63df58475b11a8e4c686c13e095aaeba1bf382ffca05d9d37c4b896be7aaf13e8349248781c67d37cd795b227d604cbfa5edaa3058a0895b288054821d699f5eed7a60495387f35eb08edea3f2224796657db2be3d17eadc8e4b7b91f757056deca1b38b818952010b571ea8a6ade69f86704f1e4800c107d83201b808271b9c1234d91d09df3fcfc52d56f15522f4e75aad8f7227aeb42870aa8908fa2eff77036cb72acf0bcfeae39f338a3f406f1efc32d6856939183b0980d51917a778c46f5c462aa8ec99c79c9ecd260cc720b098a73820e45498234dd367459a45e2194ceba2414aa8d0a83cbee579eda32afe1ad90361f7291dd749846da4fd39528b93327cdbcd59bc9e67f522215540aa0329c13cb527a167e08f757383f23901e745a8a66283b822204cf134fda4f325b7599fba2b490addfd4ba5ef0488e9193822f1fc628a976d5811f727c5563f7d0c3326a8ca6053ec7fefae52b37f8e7c8eb75edf8663294aab051bb645b33a1ca16f9f3071a90eeda81d84abd812c7f3a02ead0260c07508124d819573dcd4e1e06acbbc8ed408d26ab592a8b8804b6c1836fcdce1c5b882abf027dba44b9c50bb434b2133013abfa7a5da4b05e0e2c60cb8972204f140303354aa8661d7d61c876617fabebf8962772e197a2fbb556d0efcc5d058fdb1403abcffb13b8ec9df3b386d212c22d3fd6297cb3afe152b3e89e95eea5ab1a557588e40f05cd86a7fd6121bcded6972c1f8d0c5a862fb732d1370cad250c8bc6f968955cf98e0e2e7640b95a80508a60963d54d90b9c101d8a77b096e02b7f6b219593740cbff445d3a76dad59149070c3b1ba8fe779a28ce0f235dee1339ef2889ca9173c50f716d308845414d7d65dd5b06b5c64ceadbb0f1df547535e7846ab780cbd9fde3ded204ed04504b2ed27682d28e0591078c0001ba4871bfe3eefe9af3a4587a44d1ccee576312e8411012b5c98916302d4a356305d81900a7c66a77cfe487e4ab7620167fd01f50f71623c0a7b5d1b680eb21c4cf58986c6573f2c655806810c724845e19ca269aa690a0042851b20a2ef7356d51c796186f58977a764af2cc483a802a7fd57f748ff0cf12ce6459860c49e4d9ac2bdc4c6ff528fbf568566ffdb036c6e2e3d19c56c8d13506897fc412b512c55ef0ca707d1752896a141b799ab956a238047410b590e5f6bb9defede765e8e5565ae31b5844a6d975f2d7489db3bd447c30da3f76fca3f8837df80abc40bac3a56b4e3f6ec390ed11a3b3a90761a4e342f6670af56e1ff8026b58f687909a1885356a06e700271ef5980c4c875d062c9c45c7e95805019899b118dd05527c9c3e7581ed29aef698b359e5dd285c5f7d0d416547b9319e7d5477c6f2d8a8450c0dacbb3692607c722d17d22a042ab63284c36a7c4d8ec290bb323d547a3d5630c02bc47c79f26b8f492596e398d0cdd2313eb35191cae16ade038313a21baface9a3576f74e680b52c0d179208a1757d057509035878a48a96f31ccd44f59f02289bdf915f8bb1bbd9742a409452f8a05e64fccfde825dc9b32a90396f6c0de2833150a7f7e12a3fa685576d16ee718b76c3c054bb38c985ddcbe307ab0a95df9513f8baa154bebaf9ad18c0097dbfe1290e019180299bfe4b6eda0796316d44378213d98e26829f8d9d2bbf41ccdaef24e9d55ea279f6a641bf3dc4a0d246b53aaa335c733a50b5f09b7ca83bcb9b6d56bbcd2f8c1b3818156cbdfed12624def86320b03250c1714ff906d3d122fd16c91e9b3205f76d91010d9eea52a4f7d5074a6c8ba9adf53fdabce212e4d0679f9aac63c3defc11cc7b61f1f9daeb9199287938ebcee09a0a86e20c66ca878c042c40ff1c9e77cc04fa7ae53f7cc0cab3db55eaae9d52409e4c3180297e9a474e71bde23a75e65d9f8132353d9dca0e519313a620fec913b5f4edf9fcea6d75ae31c28870622117175a86e6acfca4460714f7e875d519f98eb376f0418995b2f850cb5eaed0ba6602989bbe6601cf078344b15cab00185e7c14aacdbdac228ba09809962343141e9e0a93c957afab196aa58e8dd5e4a793a773f92761940340f5fd274046505b73313ffa7bdd4b2ffd6b393efa3179d7bfeb0c721b1c8f8254a05e55deeb12b5ef3b367dd31ebe1d18ac666039ea4d02b88c696ee2b7348a3f3215448be689337e0742e9d20f453e78c3411b9bb1d4ef4b8d463aca881995220d38a4be6631f6cb4b409c54b8c6be34ec002298d6ae32e48b748b6175159f4ce420b5e0f9695945e04f6a49e572d2165b0d95bfd88e958828e20ccb926339e244e592caa1caf6bdf7b5f13c17e55cda3913a551ceeb36b45d18a23115decf7a21c69f01fa9cd2d4d355bc9f3f3bf1e3c64f9900ed002cd11d8e3b809012a3644554bc31f75c8f1426f625c2cf8029f2b696d7d9982c75a47cd9bc9544b700008eae770f3e2c0343d4e0b2ec2f1ec3c8f0f152181513fd6d3a45b82147f4efadb85c9c58bf6ffbf28e82693e2910abf1ba718fe75a8c1981c7fb0a90c351b7f8df8bf414c7ebd5b07afc2cb07ba8a31476f721e91f22b967d61404ddfcf9c83b1c6b1e4ea4face9d80e0a624bb5bc6fa0dace96e0f3a14f0786be1255aefe79501def91e432d5134e2ebc9e811fbde118a2d362213584886f11485c1ac5c85281e8e22d6e1ffdd4f584900863eb7ad8fdb12562388c4d4a78663278e057039d61963e2723e9bf8b80a48dd064489b66cd859911252e8d7f72942add6bd130a55df24d3a9753f3186dfc154c32ea8aa5b81d278438424a759b4a0056ea9bf345231c2750024b906717a08d0cc901236eff3f5d022990d059ffbb5c66c155f4f6a908d4d1ea04f0b0c57f227e553edca9433556ec42b2d7a36348b7585cf55047edf756cd36a5a90a559e9ee9a54c1107903ee5fae5b14ae4f676fda5211ae9f161760af948c26a3bccc595d6a7f8826198a998cff6f86d8c62c5590e6859fe915f59c7ad6ebd646106fd631c21688e2bb976432d78be150e57b13735e35b6712ded3f2133fc0bcbe08f1682d21cd0c45a2ec4f3688a9b3dced69bd88b999ea2b57cc9c5439d7b3c3a9372a1bf269f6d2ab46cb02e31e687cfb1dcbf1125b493dc06767b916d8413699306295f70e524c851951f7d7de0b945820584a65c1330bbaf33784762ccbc3a8dee4a45c1023f33bd408de41c98cd1f4765016092e4a8d8a978a1bd6738a094ff0f69c30276a8c5349fecaad46163193eee4ca5fc900279f013c97993b24ea941a5832e0d62a56ad96c93a8b74caee775f1a42ff09db17a89280addad2979a9310f618ae16f0451e0a53f5413dd4658e48da30405633ddddf806d77756359319190ea197d9b8c7092c21a0fc4c905ce38393912ebd05ece7e49bf522b40f50911c2e0c285244e05dbd559f3dfaefad72ca8e01821ff7fcb0fde62acccb3714e1998cb8e23e796c451acdd77d33759a4a2813a3f2dce69762c69bea8c91f8657f94a9f6a09a4b1fa04b6397f9f633e3024336fa3efed414c43eb58de3cb808003477437492b0bca63b97c4ccbb84ca11a4612c95072e08106b824875b31eb394653ddc1444caea47dcb5057c30ea097aa2286fafde5acd778a83b1adf80a958f97075b58594d7c95f7ec6dac18bb3e1a296e5898afc826ad912b4a15a15b371704f23ff12e41882ed7f95845dcf09819efce161f52aa1cba939f7040170eca0021240cf5c2273a3db04876f02ae5790a5fa7e7c0987806578d27de7f93592b68c6e3cd5d69f3974c80b2488debd7ee801144a86b0e8cd01bdb881cb17bd7142f91f194894ffdb553c298c5c4b45b47e5ac8d1f1d8fcd426a0e3502cf8fa026b5af60b7a7d9cdfdc02f0d7d3c9f1a50fe726ee54eeafa3d2fe4013125c63915a575b418ade803cb538211130df9b21f302d5420cd2d2182e77f5f566a4031cb60de7db74b449e140fbea29645a1bc9e0cfadeee8dbd5b4a7c779c6f466ac9ced49ee961e36719fc0cd0232027ca53cd69f113ad1769b2c7d436b1a039726c96154e958a606b1c31f3ec0efba43ac5be085e4b61c1cb79ca745ad5f686910663cb93731fb25f6c7ff312b7d3fc71d93cf913490feb41174bbb64ffd25330f1a6f1aea57c05b839e7bab40f6b9a26b73ce9b19b2155d6c39a90ad0405021a26598c3a472462bf9a42937edf7fde5fbef22cec6869e2c254a2721b10dd2723c7ead8ae6fc18fbc9aee73e342f333626cf7669da5b8647e70af74ff532fbe23e62d21c3b9fd7de75b8e99ead3491d6ba7207aec4dc1267e850b50a3697a2b9c067d82023e3c47563bd1bf3d78294d4a2fd85a3282bbad26c0bf9fd36313858ea8fb3c51c07e973c9b56fbb9965dfc7e3f17e797d3d321cd9997852cbc49e45b969ce5c29a30546c8fd6f2dd286fe6496752867cf187b04a5413b52662f4845b349eb08a8ab846e088db8c4f06fb30a887fe656e15f07239e52f4a7825e980b126877d1deb9ff1762cedb7fa2c047279d6b63472c1c129ef6478d11445b4be31724d7a9c7f68f4fa8732e332729292ccc500b8e1c86c4400fb1c914d650e4308f1fc9dad44055b3acf31baba8b9b4d96d966dd092c6f1092e2f9ab29ffeb2f8e3b46412e7eb6d8d0f5564f843c14d160bd87e6cb9abfb5bfb50b874e278c5e03ca2f0989c94e90099b92bb5a93ec03291900b29b2e11afbfc73f86736cc449493677a2ab3db5ff3d4d513b94e6a0a1d1c8b10ab13dca9540903540bcd493a284a039d3e4fec6c62f43964a501125a94e8a8c85b03b70aa254da3e77819ec1c1778dd5dfef9f900e723e9988285e11cae538b3ce92e227fee4f6abe76d6a5374718acb9244246a6d39ffcc7d53eaca67dca8c96bda8d8bfbc40df7299b72c88789f44db1bffd93a92d688cac9a384377f6ef3e6ec30e5a8619e589f878f54fed97f14b28fbde89beabe422ea6249a00565f6552993902996262e749777228da6cb9b0ce99a16c09c4c3226c7efaca0e847c23fb35ba1fe2fcfb65c3ad7e4a8f182fb3777d9a0ed6ab9e6eb5e6438ce06da8a6863cf523468eac80f59ec7dbe1890a85072034325d72586d9050df3b40e9f330831a8c31392948c9d25fe512a9d4885225cb769d329ab803762d314385335cf0497a3e23124df90c1c69b565c40b2616c3140fee89fb8e6e9c179c7d2eb80847f78a75280ca1e07f95e8cd132c55108e136917d2e3415f8817b0de35c55136c618b11dcd8b26858ffa74d214353780cc519bf10cd1068187079f1bf4add18246f99b568065fc9bcd29e1344f306ff3c0966f9256ef6781d0812bc1d9fcdeb4c8127b11abaee3eecfaa5b2af2a422392ada3cf3c02d2ceae900a91ef260787696267c82946c47054422f4212de50b16ecb80d97811a15f2fb5f9bea491e3bad015e7eda81e65f542f2108683cca3ca37d82447ffa28d4d386e57947012792351f023997cf347bdcf6a9bd81295f70dd961edad15e915a2a73131546b51513d545d6e910e9257cc12cb14117a46fdcead794051619a772b36545432cb2455d5e9c99bd6066945f40f9c612faef08650587b3849b90559b9b2e23786c7d2bf443fe64da4bc6bac83c2ebb7eecc7d9d540de2768461885fc86cb9755ff73e099e3415c4b128f503010774db86b2745be34bb74c45b317a2e74da8285bb6de6e8bf6032114da990a076f6ad953ae7b087cdd32b60f82f9df172d11114ab04e617385233890c73e09375f034e6873c04f93aa115df73effaadcd617bce4554d9405fec0ebc856f86c65facc921e46fec4965ff0e4b294d13180434dda0a7e7a0c3f241598d176e69bb7cdcd85476c22e58901a5041de84cd3efe30a9606282e317749036f482342ac174d72affb416fc63e25906e81ce2b5963433dac9cd2b20f31a3c845f8e1570bc6f97cc2fcc8be9d14636f85b5b84cc35e88b6088ee85e2055496ac2923b314dc11e9503e2ca6c5fd419c29be0e11957ccaa9a08c2df5da7aff19e42cf7dd48ed044642816cac5ad7d6d77bc1521b1cb367b4b60849b1434e05e0244e7f6ebb28317ff4f0e274f025b9214c7a063762df13eb63ebc5fbc026e67002e347364cc928dc143ebe8765b4c7a7523cc52e2f6b9a86c8bb822c5900591a97ab064e01dc11fc5a9e8e889ddfdbc653bcf6a71f0ba01b1588fdbe4564442353d6ed17ba2975bb8e28ac09bc27476d652c00d74bbb0cabd2fa842f141c242664ce83b822f4219bfb3df32ca4f46ce545259e1a092720d0b86b36f9b4a6fb760e9eae441979e8620742baed4203c0107b75ba92bfc2cd634e3aa83b4fc60ff8e0eb64e6743a51012a8093879644ef7d60334dc936fa6ee3fa7fc6ebe747008858b7c8fe349462eba07aeab86549b682034f67203b5f7ed9d4614d833459f63e53087c1a38d321cb51a30a90aea4e8096ae62f6a00326ae4e7ea0b72943965b3216dff040f77ed15bb45021db68543e99a399e658a7dfdd01e7af7578271e2bdf311084d1a636b9a6a7ab4187834ee79f06ae6fb6c40a604d90572370ee921e0c139831399c7f55d5a401256ea2b7d85aaac12b9c45c4e273017838c140e16a63fd1376216ab554dc8b91efb884993f087582d0da14539658961b72edef6e396ad46898a5565f853974074ec05387e6734347e5b704726f4c76cb2343ec3af81d19578c37ccfefa5ae72993e63fb1c82e55f81d6e67a0dc9b44abafaf8ed06e8e7e0d9592967f0ea04caf660cbaee343256d0a2a7dabbebefd019ead7594db4c9e1be7be925308370547350cd4d21547d64290d2479c1010212bb49797424056b0a8e57d87fe591611efe8b3f5ccf7dc966fa8beb03c797893c988003a60aa11906cca6d22e7954cfeb6a5ae7f6d6646ba92000c1d11a7541cd974d79db3f51659f9c0d3cc7bc3e082cc01f3fef6e9a713ff41a15c4e1d07b407b47dd1e74a39dcffb50c93cfafe20e4ac390f8d045d96e75ed6bb6a77320d1ab5dc98f565a2da472982b34e894a34cd755cb52f67484af52bf961c87a9b000c34a17f5807c93a9f243eabb1874215e6914b36cf9d4eede725ca50a6c02ceee781cfeac3d6f147b6a188a72d9bef9f27a48d3e8078776288c81f3fb22f732b8ca94b079a7e771c9609adf0e526413e1e59d1decc48ee72671b09c69065e3a6291d903708251789e7b33298101912b361ac74a3f5b9a09fab8c4e4dfa0debcbe52eefb339c25382838ec5e838cbf5705fd6f6bcfa6a4361832aa88d63466c5b4272c20d4141b8aeed72eef95a5fa0ee729082de289912a1f59d35ea021b992479df59621cf8e55e6cb03f4dd5722bd9bf1bff0f3737f5bd943dce902369858e82a04ebc9663e15a8fe801002b83dc78ad3f1baa937802f257785d4dabfd3831e26466465a4bbda08c01060d8c8111afbe9c784c8fba5f1f1341f93cadcefd2e42c114594b978b1788bfcd6c8c70485d9d9ffb1be129c70ba3b3d274c583314f656efb19031976894de96860773cf6356aa3e013111c1564befe0c5f1920b229c80effb00323313db0656df0336bf7bcf8b31bb35505ae8972040805c6db81ee9981021ed27d126db57cf5046dccd35a25ab95aff6c0728afe43fade85f37370be548fad7959f7fe554260c8bf7ba7e3dad925a738f8e5830b481bef572e34fac7a2f23672b277cf7a9b6dfa68e4cb964d5bb653f5b568d7ffd32f38a10fdcfa9d19fc732c1f5289e9773fea8b0bf9c9407ab88b866fc7dd4be644a5b68dcb49bbba817fc6d16afda82f91f25689548dfeca1aa849f0570ccabcdfcf982a2c1396d57d2fc7c3e10be710dfebcb2046c5b7a72f9c8efd7048023d1035a51f09bbed2aee8952a5c52dab3d4120c7980622e9b0c060f2faccf7b4ca7eff0c477dd9a5903329e0006a959f578426ff831d3bcb0b7b9e621f9d660e949f92cb9b4b425acc120dae0d53c6261c9322737a3870c6ac705ae37e7abce45ad869e3b75285cb792e4cbcfd4ed65949807356d59064a6d2c63bb1debc727c1a48ea9d5d9c2a3850a82ba70102cad73e988c85bbd9bddb2cf2362569ada606fdc75ca3382ac6be24d0c01f63accdd52d131c1a0061477cb49a1b914e4a43412f76d04196d4a5bf9122f954e2d311dd746a14277d2062335cba6e19958625379a167e49a40b1b815395f83ac5edea4231b5061f27c05285e2da8c6afca5646580011b6018fec4b4e4da7e05ac94ffdeecb367071704a52ee6048319b99dc939ee6e1c3bbcbf819d04363d7423245f9ec8526cdffbfff7318fd17ea28aa0e6135ac23d618cd256201eec9b1a9ca2d4ce009bd9037432be84262b223514023f9b605abdede9c76828c60bf6b3eecd467c1735fcabca473e11a64771c221c7dfaae0aff144be3bc3752681d739f059c3c1a0a3673fd27fd5a92ba7e7a6d0afe6435965e921e54ef176aaab52beced43e204d27abce96d446003ce9ba088d99c68d9b8f67ed807424984d7969aa780549756b773d9bc2e75ff9385c6b37274b118c0b72e3d5d3fd20b926a3a13cff1dce4c80289bba8845e9877020aa3153568dd5046daba0d6c9fc427719c40457c44e88dfdecbd5677d6c4f2be9dbc413e5fcbf5db4930c71acb7fabe1fe2ac25395171f63847a532f53c8c6ba4a3083ff4e41aaaee454f25448e3f496c0e51deae97db4a5c73c06a18c5bc63625ebe3c0d3fecf611de46e9b19ee70fcc3059b9756d7577c805624937e10329ab3c6f3f4990fdf5f6167f327905c196016147c0ace8847aece4a09937bda972281c4348cb43c52ea9522cb27f99923d4d1463683b5ce81453794dac87cf0728cfb04fe2ce7f0399ec75e775d6fa868c48ab4316d808a3ec2b802adc912a00c760a7014996b44a4ea5a77754d2d1efac28118be5c015a2e39afceaf4195bafce833dc3aed6e7fd381615ce70fd83bc6ba46a6bdb211d4f10fb67e0e33bd3e55ffcccf22caef199eb9bb773bc4e4e61a0d9029c65e0c3c8174342a218c9c32134c2fafc0e62572e779865b7980f9c8b7442a4559b56cdd4b5036027186980fbe99570195c68cd889d0d6e2c12666b7b2e35e23a2e0aec9279585c074bbd6911ed8bac97f77a022c1ee93923cd3a607247924c91831b026a68ea19bf06e7920f79255510469ca9427aaa7efd6f6ea9cc3bbcf652c5b0fcf3b36f9e54bb22be0f2b2e97e4a4420367c8a1095cf82c59f25a6ed34178caaf5d0706798c2dc9ac7d84ddb540fc05fd3be8db608b9d2603b942b84480067474c40701d61def9075c2857bcef9fbdb7ef252016cb57978d74dcfc3a03dbf86a84fac332d635d8bfec3c1dc3d34959c9842556b1d15b39baa964bde01752d6756a993c8f8bea97f7e15b86dd0f9b38b17ba9deaa45257fe873c1c0d2f879d4d6e89437184e895d7f1a63fbd0cbe30f0f2f5fa37e1617256b183e9433175fd3c29cff3536a2ccb15342af79fbd8cf8d7933afc88c8ae49568f221be08b65bc90ba017cadce5d173b6f0505c58fd9f85045b7f48958eeed58e9a0130c80f6988c94df426282d4d729fd26b9bb98bab0db1e4349934fd5db9b327a088fd98e4f141673178896b4149502b545278e3c28ff4c2692f5e8a37c38ea9c33d368c4458f5a7eaf100cf1786710694dc5b9e34ae6b1a718668edc9f6e5c40541f0ea096249e846a70ef58d61d9b0127071a4c4f52899feceab37a8d876bf0e30ea12e1f2f64bc288682653d68fc7f4cc51250eacd7a1bb1e6c90e76179b2a039d9669cf6a576e0051ebc6a2b73334cfc6366bc42e9a02a16728d5deb5a1165dca89c091d0b60e37af689281150e5058e7f53fc1ef41cde3511d79d05d8b244d29ebdc19d1a305eca9c737f497962aa8652bf9fdab8b555352423cf88b92c1c692a88d23a9df361130dcd783344e89340731c04dba9ad674b00693e3656e20e787c80cfee5685cc1e976cf2bfd949fa717152c4ad951d58f6f0055c5ced3b117ad91ef56ddf7682ccb0d04343e4e7b6e00d7cdaec8cb3e3add30a2085eb407e07cac9b6cf95299c3c63b97b1176fa22995bae23955b272a37c2171f757d9ea4858f090ee0531df2bb214084c95bb9adc84c801d87a2764b9bf662234b7b4a47b03838bb78970f0f27b1893e9dfcc622b312ade0e76f069aeea6173f07956efcf431a89311baec0ebe94479e07f035229bafb92a3fba4c3571ba08590ba6f270e3bcc6383bb0b90d814e13e12e21db62f1fa1292772675decd9f3fc812c210adeaed6dd7cae670e92cb4d1721047c85dd2f1fb8c6b06b0db25b40391f2300b3e18a007be28a7d4c8cc4885e8efe971646898dc34ffa660bc2c46da7f9f9af19a4f57b3b8f29b370dffd1f2a452e24ed161bce829b9b79cd6e54ffd6c415870e9a34b6ae92d4dd2dc0d4a21d54232ede88c29484880c50eba4725c6dba7f18fa980e351d72866e33a511fcd4a0f9b4dcaa151fbc1b5fd822119aa85a31cf4cf5cee30253d766056d3f9756153537879406cdb5ba474a488e8dcea726bd32538bea94d05b5a392d4c0852d1c43926b71a69f50384f32e420756f505d10487481545244d62b15a6d1138c87ab64b87f48cbb46055a80269c7cfa51690a40d67ca9182d634fb95a8f127ce2fb202672b38fa84b0749e0c0e86eaaf480f5f1c82c4df3a38635081fe43f0f777357b5d0a06e31b7d82c09bd6ef11db7a1bc47c656f53de1fc81e95ada9f103034a6acfbc04fb3c19e4ee0f413eddeae49617f91836213124562c24547cb303eb73fb80445afe7bc8702c3c0a2f148232e97e44f4de36dc0f395fd493a8175a6f6c12d726a6a9a7342b07097e6f56873f28281ce1f5df7aceb077a5a9ceca44bf6320d262e20df8efe811d9fb7cd845f27ed986730cd515a4cced46755c12963a1d9411ac0a7201e06f458827e2886a2fda1595b58aa7e917797552cd9f45a6b440d20342b82abeeab73707616ccea5b0b1ecdf0a26bdf6d9698a3b28e0b7e8ddf74a94fe9ecc9f1e7dfe66c8a0932022303e60c221381466550dbdd14643d6ba34719e9ea60e2db7810f4694bd2d6e3257ebf1052439b8935b4ba1fc84c284fd1f3bf1372e2ab67dca6d2f27e4b063d3ddd9e1c25cab0c78aaa00ae09d02ed7130539b4a3ea2b2b60bde86882f615c8c99cd0a11e820b52e2407ee99842cdc62ffc3d286e9763e897eeb23be8d497964ef82bfb5114a3bea405af3716f281d2cdd2175e4ab2517f7c31cad1982c153ed6f867340621f93046ac51fe63e2b78b7ffefe1be00062d49c4a19d1e7b7409a890185c25911969b2af91c3ff8aaf0ea0474e8bc24a6ccfde071b2d5bd4fff4d47760a573156fe6202cafa7163cd7d819dcf51f6b6eafaa8673c2af3e9deb3b4c95ea17c884abc1eab989c99fbb6175bc9047159c87bc331353320172b0fe5df03c054a4952940de8003eccd839dd574cd4e26531ffc0fe268a54b4c6f77cc1dc3ec5e754b9c931d55fc588a62483f82d2494db362b549a3dca487dd7dcd2ea27e617006e41c404ec368d3eeec0b58026f64fc47ae88065b5eff468ff3a4cede2b82068a9f4dfc375e015d1c9d1660a7f235c9fe6787336aed70ff5aaed88b5344842b46ea0ccfc131694cc765d85f8f7a52378aeda25b454d2f5694d303d751228adea4f3eb1539e953304596921d34e3c0f259d888eeec781cbc2b3102f3ec6176b604c52f63b0773f90d174b17c450b95c348d5265570d379a7e17a25b6df15c7073476c146e7d64923eb190c2381fd947654ea30e41531a2cbf43900bb2392aaf201feb541f85f158d19af29cf6e2f157ce5d14fc52b5e21f4f7990915de382fee8595c79af9eb68a5bccfd6aaf4859a6bd147ad9e426f1c7e8805a19eac6083841ed26d932ee323f522dea11997548f7454ee8c602d866494a2440c49bf380a2dc280cd3036d089d760942fe89c4794f11bf0bff8080944e99c3d5a18d8031a42c45225af01e961ebdb6bf9d3443ec67706dc4defca463c776fbb987effeeb2e497dba4febae6dbc10536f145553c74cae443cd350f2a047d55529378ceaeabb633e834cdac17091478631b82610bbad69a00ec51c73aacdbc86e2dd5260d3fe96a9bff1eb05114b30fe71aba6129ae4d41ac2ea0bcff53c7370fd2feb8a42cecd11ceb2c96ce5c4cac44f540c4adc31f796f42ced65df8c0a7d35663fc3f0351af5e9951fe16f614a6817e7ddfb732a21be3e87722097ffe3a05723268e076ef2cceb73a19f90069b81d75831623381a02099d6f7d705a90537844b1a39444e8a218582b0d3f6af7dbcced319c25b901eeced360e2903328f1817d7fb2424446d599cd141834d270614e038ea88ae11ce37556c0e6780d0b0a4da23ca77b0a2123b35e445da0e18fd68a62cdc043989d17bf07cb5476917de33bc438505304a4ae62b12a5951f0703b07dc7c742685933fb4755552dc1f003dc10411aa4700d72b581e5a9a37ff3b37ecccf129f4c00abfaf3d6c7f7b90fdea9586bd07997d4cd94e1f92a2dd18cb9869d28c4185194930c162461effa79ec9079513af7d6ea67a6ab7a7868207102941e5c6bf2f15141a6df4009f7fead543ce16ea822f4ae93bc3232fe21e3ac4cf7be877dad5568b7dbbab78a317756c467fc0f72f94e4c71967425259ecdc35d85f9be4a6f110c153dc9a23c7e211a8844f2c12be0044864e12e9ecf6cb000fd091fcb4f8e32731804ad052972ec4d971de567a3efca4b4f60a6d529bbfed2a4866b150f73551061f46dfb737555c2a1ee3892e4bcd3b8a673d86f4e4f68f7f4424331ca046fb96b13994e0c1d15c64bef73b126a6609c49f3ee02d3123f1f17acb59be94cf0026fbd55ef83ab8433e2d39d91004d606832c71a59a143149351db4abe152333769c299c25cabd133dbb3a62ebd957ccf853407f36eb3f2e6c59a8269fb03a8e967c7f1298474b1384d42c4f4eedaa25f270714d7d82551ecefdce45beb7cf0c4ba7319de9d390eb7326e8775aea87d26aa25ab3080b598b8e95dd79be811f0b6de09946d8b7df643655cf75117ad6b63293baf9c9ba36813a763f9a73ad0c5c573f7de64b6b8c14e88d21da74544515f42bed4614d850e551d533ba98db347b8f10c3eae986d48a74f17f563d938e3b3fdeb5aab3e7fdbdcc49864cacb1109923db2f34d29a42f460d5a798ae18b2fa7fbb2a1bc76aa5839a6cb9044e446596032c62ffd003364699d4c0310c26c9e934d725802042498784489bf2beda993a32f86709566615afce18360816dfbdc1686e442ffeca8c3a5b6016b7993b6a1181c19b5ab8bbeb1a1ff8db866b8e707403a14a27bae4f2703b9e365fa60928ecef60690028b9830dd2713c5fe03287ee8f818dbc28da36dd631f161456e88d0eec8a6158c1525e5d7e558d9b4ccc783c14e4cd413e9997909b9093d0c914fc2ad6c9766c5dfda976ab2f728902afe75cf66596963946f521abdaea5ef390cf0de775b7f189061b36aab39ecce873c3d2350ff9b322e18962a56b85674a6706a87758530d453412175aa14a6611e43f3ff4e7a135e48c756663bad5dcf673670162b43ff158b57a07fa77f4e2c954cba9c6d487554b76b23e592063e8c6cf336dcfbcb7ef7a74ecd5467d956647c8b999568b1e31368ab320869a3f5138b781e82b4fc724799a38f9b8bba4ed0ce56cefd413af613d57bbc0ff453694ac764e4e2e901b9f04e632dcaedb0130bf1f941bb6d096b4349b4f9f009abc3171b3e26935a279127925bb5a0fa9586a90cdb2062eda5dc4706ebb61425167aaae04d5fb96f66e83bdcd5eb45dd25137e29ccf3b16146b48439dc878ae750a4e950621fc6c21db28a2dad5040d53dc6eac0e0b5b0016a756086661f0574805f852f8687ea15add4cea5af999b94679ed84a93f3ed8c17caa129bc9f3636e2f2a45706f0b54261d597d0ff72b024fe4593bfccee279b51dab47651ce80ee4cba391b4822639c656d90810789916215be2b3cd256b37e76806e9ae1409acecd328c51c4c6c0dc9ca3f0a6142e0c1bf2aa00989a91e0676c82ebdf05282ad825bc3d6c4c204cff4e7bf05ebccb837a32d20ecf8cffc1308127b685da19a6394660d67fccbf83df2a099ebd8d86f0d1f7e637925f6fe9e912dabeb10e70048d9a62edd002c1d139893e09984ea8488fc2284ae3f24e3632c45613d53e3da52c20076a44ab64e305769b5d79d6c4eb631bddd2d80e3f045d8ece574820656847d0c54d66d880ec7a2e56025b2318037459b6f5f90688dcdc6d5c5b8e0560d65b9f0f79bc1ec95de89d34be84dda25943f71b9152de168e19495a2b1b4b725a30d19335e71a4c8d4f8fc74eb03a36b53c8ee9a65c60bec35b9f4f4fe1782b69d9b05575aa7fcde0262fcc2411d042badfef8050d3e6176d077b1c8db0ed80c510b4607699e19626f620c3e97b2e29fef284a481357f436207200821cab569b8958834ea6beaf094d490bc71ce50a3f8117cf9e345bc21e8bc9222a8481d7ac8f358a755c5e4b062bf4fdff8724fe43dbabb1eaf2769801c978dc2ff344517a09ca3a2dde391116ef6f46123814c3b74f494bfa15704b2d8bddc7914337855ef388f7d75f637e6ba6cf4a6ad5ec7b36700e31f0bf914049c43ba94c45e70b8b7d041c66fddf2e1ebae86f2a0905026dbd9b578dc9eb6c66268766746dda9cf41d10413d59d6083401ce0a769172d700daeca977e4ea93509e04d9021980a77db794b65c17e481f9888b15bc179ab8ef5652c887b389b19f8ce390e9fdabe381923dc4f08093a31d8ea1bc2db870e357901b5e8438069ac37fba6c7c083d0b40d23ccb4c1b88a6c13765efa6b1b414633b092ef088e5c4cb52883f81402e884477b1a0f0fbdb353c4d213b99abbfb74ce1a5c7c2d1af11bfccacb7f179679c2593d9dc5dc2c6801057bc8afc43cb6619a28d3d5c0fed68c465b1c8ce03bd1bd34877612460dd0f8e546a83601eb97e03d628ea2e7b51353bca6a132d50b0bd64ca29473efc856efa817ece06aee5d2385bedd4a997077c52dfdde0cc561a0d339c16936f2ed151eb99d63b39877c3f61fcdcfb6508524a3043923c1cb69f13be8c0a40e8bf976472fbc77a00a5615d4f112721f59d7b5b6fb17a019ec701932fd6c287087cde8ac6b98b1b24152acdbf16ba3a62c9953a50a1d54a0cb5b7541ad3f88ff1ab4cbb5d22d86d7b94305b7d840a73c314b5be411839b493b2516a753341e2b089e0be97469310c22c6f6956f84511837163f3844d65e3680153f482acb73bd8a719f4d063b153d8b657eda0b9ed71695e4bd887781a74f0ef0111b5803866f8bcccfcce5a032a875ac3eba44730d1b3e3e5a93f1faa99eff99d5712e978cf5e246730d6f90f455d97168c237805313e2eb1598b75ea7dd48de6fd1407a9e53c8b4428a582bfb27158bade16870c7bc053bb1e611b0c51a8dbeadd9056cbf2309f25a17ea7d022a9833189bcd6560da197a0917fcbdb3e5b6c4928f587ed7b6c8b7a97e750b90bb914d4064ef8ce0efe23accc7da3c9217e413fa312340e406d9eab51bd884891c9bdbadf8050024fb1e465c222cd3b6dd1b99e46244cd4fa233995ab855370918eb038ea483cb45dfeb029f1874addfef99a649c417196cc86ad2d312749082b912e29bd4ca95618770bf39d1ce4248c0a740919a40104302f197bb536e2dfeab685123be2f735c753e90c4602f85182c8dd1c03363cd8fa3a872ec652709f62b71a649a7903f0a5823c8378e4f632ab4f0f618d66c059cfc6834644e561e52992151f7dabc8abd929e79e7c9619ec715730823bf92baa0797997ca5d5835dc4d2ad020fa8750e50ae1c7c91b6b3c384eca9b3534adfad225f15272bd7ae83f22263648fcc9a9f23f1916d0bc8e4fcb7a403d6c041f20d892f56f32e0a82acb4536bdc0af2180026950f713537d9af32c74390138d772d39c0d5d8ce30779d915380234b902f25c5a207055c6239415e77e377f299c1b4313e91ffe9c0d439f4dbaffa57ed48c104c5ee87e7349de67e7cc9b7cc4120f50e39fe330f5e16d4cad8ed846202780d2fc23282a7d437872b730a1901e2f52863a7eb036029785506af6b5fdfdd511cd3e7057b84e4008176f023d8fbd6ff00eff3aa0ad461aab51f54f0b6d419943be45eeffa147e4bb105c31b3e82f67f47070221227052b3f61a1edf5c5d3020db0fec6b4132fe243abe84f675663b7850e0f80cbbcb4263a0ea58c717e34022e2bd315a0bf154117e06354c9688fbfb37015e3f15f7fd7a6376c76e8c32fd630a21157bf4bdaee0bcc8707c42306b39732c43b9fc308212053fa139cdeeaed651f6233f1510605bc1a69a15a59d39308a79b32045864d263504c4b7617491a9c2f982075c277f7f63a020b1f9ee0304a177cfbfc3fe9239376b8cd395423b251d3f83bf58b2ff1e31e898bff16d6c6a78a8067353006edfc5be02fc106b71addba559a1c6ab2c8ff6e1e069374a493645cb6bcc277ea0d5ef8890bdc4229e8dc002bf606b9f60b0a2e35f44d8f7ede182a7052bf161b9e9b3155e1eb35c08cdfe9337a6adb7280e703fdc6623d2327c162fd3145deb8ebfe6ff1c925e8af7aa2b27bfaa268d1dff22805401f183c2f548df282f79482ee9cb40e7c49dddfe00cb120259b138252310ac324c88d5950d61ddb13ca8da2c59fa380c6e7362695d2f9a76c5ad651c356e1035fd47ea1c36dcaf37da4199f3ac6b4be2b259c0fc5eee634be124a50b48e0be2ca0cdb8b81ac7c75f20a7d61363e7abc7cbca6ef1fa6c70698ded8d1983aba5c33c1c6e676e139a6f4c177a7eb83f7bcd599cdf73940070f87a7753daccf362c03ebde2e6ee88ce9206f9494bc19340f28d9dd841fa437d3a0b0102bbcd2149e3d6b8ddfd9a9aa51a20532e2948d7bb038b2c970b7d87f899a02913ad4303c99704e6df0e11b88534240d159601abf9ac9e9a66904b01688ec7afce22b635865512a798c97ca46f9cdf097f308d8b4b7fe1216b675b44a4f5551ec8b4457a863179e68680364fc1296417b54423acae920c7539a640f4767451d50db6ce38e52142a71651de9bb22774391f18dd8afe7c492ee965a8578fb3e86cd48540793e1c63676fc1e444c8b0cef7f667eecf75851404f3a330abedfb98f34a29f08eac406827962b5c72088c9c61306e4b73fd2574a273710f1f601a76d93900fb973b8aa90b305c106da1b5f7fb9d1a9b9ba6d5290d1a691e2b63e5dc2310a1f63617e9cb72176a20cc1df75cb581dc981606b352faf06f4d0a00a7ed6aac1c39cab296ac49d27d94625353582e919151c53d3e763a24dd5591b6da0670fbaf4e23ef6934c0b78c05ee70e46a19bcaa89e4621a743b16d2f270c14a36674f9e3c74927bd86e386af1f67da6f26f8e7bf9d50e6460309dd2c7f1f7190a6b23beb52fac3b0d879e7e8184ccce76ba01f7f2934e19d2ae3928d87887cf8468b2d754162a2c1be06acdbf8a5fe08a3de1d51c1fa9fed59544ae9abaec539d1ee1df37cd19a039ccb5309be56b0621334cd2c303d6285aea1b9575979d420aad71310ee6098a7be6c4a62a60f2a48d8457043cbc4d111b00ff07903488ca3b7e61fadc7f9cc8c853bc278847dc96eb88c90aafc9b45382b240d2b1b800bfa0a1a6b526d684be2f4092d98ccfa018bf2e0e0e3e8f4a43635f35bd2b8e94859922d8aec13047ad39b0d5fe3e3bf2359b91eb8b67375643793955b3f1709f1e09ddce786a1c63f9ae582b31800172f8a979f8a49cd33c3d8f2aba51187724585c041749f64f95b2859feed94a1a03d41710b3fcc9107a6168514061a5524b00031ac822be86107100b2716fec540c0043979ec3f4fbf18534644a85534a462de5efee18697372c96defde495cf89cb6b3030e580551c2b7f6f68f307e394c9fce61eb6f1fed951de0d255b1d8a8c67196c3095b14400bfbcf111ad0c789c8c63b8374fa08c959378742e5c540df364a661219ef209d0737cca89cf47e6fb78634c911df3885af351ba125071c04903485ff0d7caec0d2e291454f054eebf31eb31acdf7ce12c33e17eb401b781813c08abd07a695b5c40c88456632de786de981fce2dfb3f5c30c8da491665bd7bcc161c9abaa8e09b7de0ee0e1795ba1788f570303ff4051bc368d7115c02a69cf0b25212c52754918fdc284012942bf80d011334e7085e747b11f4efe55d3549a47e40b4a8ac5cb6bfcac67d0e7a1e484bc1bbf4fdcf2778f45af80e801ae31811f1a6e182e25e5afb46f7b9ac7dddd9b04a526b4e80cf657f5cb2736c50a54a3e908f1cf3851648dcdd3f32e9df4a469252008b637ed230a572107bd2a6fd788223db76e4246a6da2b5247fefdc08d4fdbe5c6624e3ef7458f715056da197e6fcfbfb66ede7a999932a53e2f153f08b141075c74143597f2aeae342e83fbb1be1a12b5d4a6fcd95705e50619445021e42aa79e733503efc72a40b34a3f25a14a07fb8c20e72c74c552ce9a990219cef707b8f8824a4eaaa647386915b0deef7d7792770062e2a46ef76288789a527a87f5032faa1962b91d28ac14d65830917abe1c79fe2c1e706568eebd6e6467750f570db6fda0b1d16e6358fdb779635c4f687de84206b0012210cf470bf9b0e7fa6c37572202ad3cedb5567c96c61edea0ec7a3d9de7f71bd4e2c1d100579f506074d19b59c4035aed1494ffb9a1ee6b4defd6651fdfc5a365be1e76fad7936e185e4db310f4e8f712fb4ace518ece54e11f956c61dd07a8bfc1c7c22aaa8b24bef73b9231d759670a73c15e4914dafa04228d1fe9ea05dcd032b6cf599c1655fd05d0758b950a8bdf1603901dcbd8191d0f53951f32eb8d2b5b0b7a18d2e203755db6342237e68002dfedb7df34a25116b9d8f6c183f5835a0c87c87f1d952995c7367011d3cd3bddb0a6e30f7edeba15e85fb6271fe2e2fd5b0a86357237546ceb3e15cbbebafafb494f3453c5f0ab0d296bf99c72f166548ebe49afab2676b5b5440aacd2e2a6b6b8704e04f392d23313f6661d0bf7ef482c3480039880d41f205ef7edcede023ff6320f6c5f1a73f7f742efa91a007e6b1a87a568f2d2c4a36ab7488ca2f897cb419e496b6f8fa49af7d310369fae65e94636f3348d4bcc4cf977fd687f8c57b938e5f4d1c3b49f090e43bd5a0522a1f90338e1b14482957cdb786badac0e05dc6029a02add25ac7616054a6284445d3cef190bcfaba2fbdda608e1734906648efc0ff2bab7c60c69a9986705cf43f11ad6cc94f7591f3caf7708a54a60d35cd45e0ad60493e331a78bdf3b50f856a01f948af6b8cb86fbce746837d26c14515135349e7fe85ea0b6d190ed8351d36b9ee76d1cfa94c287f33d66cb1f6674d370b7000411004ef391f77a40b68659da3056fcc14204913000accb13cbda13b541003f5ea4b75a98b643c3d6754090d53b24b15e1b2d4f98352d81a8a1d049118a838500afcea73002ae82f88dfc73b56d27e9ab27612a1a85cc522342a4b0a5a5c205d39fc483942104e8760411825f502694262977534fb5b3245ab6feb5a91cec54b4b0415bffc40623d44f4c754da7b844660bb6473abfc458def548802a56e212bf6e48b0dcc55e083baf32efe3143ff74b32cf6d76c903b2bd6fadc7d7b1c83a57f4b680001fec1b485e7eef33a45490b26a53ccd33c61765e0c1335fcad2b0d82eb5865bac59895510fc909c4b7f370a21083e3808ed1271cdf390989997cc062bb856046fd53a7bea599ae94961066a26d4fb73a4a08d5fb2f78bbcb85ab6603942313bd21c543ca83fa721eb4d1ec7bcff04c97685357316fbb682b9366d268e63c59d894793003f400d7995acf6f25a7c7f84b86de7812403d49feee350fdfdc3204d2072bb254bce1d99b16437a2350b2ccc4ba8a43f072acc81ba5aa800c7ef88ab9e63e973e5fd1bca0ab1772ff3a2f93e3d31d0e5f3fb2a7ce4725cbe6f2232ac3aecb7feeb795bf287df732da8b356f684bd3bd82a20355ac9507847c6a47bd69dd7ff991ecc4f82f6a3eff22279cf08a6d7404ad96223e360d4920066b0520d4ad0ee090ba829fa1e96f56f7082e1ae649040ef55f97ea70e3eae5a7bf1ea73f762a714eef3b06664c399c2768d2880f99a67411d86c58297fa5a3c77169bd671f0d7189b919891d3d32db1d9ab08673933078514fca1698366db693a12d2fe7074c5685a42470b35626e2016470e92a6ae37f2b02b4695e9120eaa21392337e84a386387b1e7c42d78c4c4985aa7eedaeddbb93b98c683acf8d4755e8e79ebc31b8096daf201e5119deb945dabd4c3bf9c2bf5f2438b5366140baafe6ee806cd65ae436c20482c4193d0dbf1cff131ab4893924fbd8a2272385802aa1e21ec3dbf6cd6f858d77d0c2e7845e50d4f75c311e8a091eaf90639a89386831ba5c7ebaed1f48d94ac07a10290f6391282faf26e51363e58703f472c0de6a9a13fed00a450ab1915f821f31c7463062c04210da5b55dddd23a9679434a01fdfcce41255b88949dcf9314e991c0d371cb15b0b5df68635ee370f486ac9b0e51ade8d2bf46344412601fe325269d85b4f6b6e1e1814b4a69607195e57f2c99cf6c18ac16bca4220648260c15ae73011e1fe9a329f3e87a5e4b31936cc8e86ede6a6a96e6f46f33e043d3ad0ec526e8844bfe708a75478ee89f78e5fad70c62be7b069db50db56b4573dcc5f8984c157ffb2d3088619a97d49709d9ea9796a74e729752f30f153ade13ee89c2287fcecc6e34a1422bd09df72c2de554870cddbd9cae8dee264e98969f026d2b82232a57f8c1784c451f374f56f5ce2910a4b141f6c337a26a07a80beb792db84d946bc9efc9728cf1bd34dc620140fa0a4ebe001546538913e27381560e6fe11460e3a618ac7aaf239be1da17cbdad840a2b8a1f47babae185ca5cc357d9582c220413322c2b9c880e2f5fe56902881152d2d4ab8c5421f36cead7240da46608cec6532d1e57ab4c5f44ab4835367799840a229cc6241fe0a78d0e4eb789b76bb17cbcbaf923e18b41b104c77e38444576ed3f1005df4a81febbe2d09a3cd5d6a0bca3907397627c8260f8084c6ecdd913208e09de4204b1e4220cf1375b9ef392c479d2e081c17538474ffa8834316e47fb8f4cdf279548b5e972d6afcc1a16c1990c3a80c89905802d13ee87970789724734734618ea0a5ac26d9db89a078ccae56f9096106a1988abe84988e600e470044aa3b47fbadc64829a7b7e3f4cbf93df93475748cc15d484fb8105b54d5d3fe7ff54cd4db3c1f238a9582ca8da4e6de8ae1bee2495977bbbbc99e41e7a9cffd5c2f212d0a7955205e46699f0d710a14853880c3e8b70b6696f5e4b00e110f6981c8901be2394bc624e60125d36746ab7f8c5dd253369ebb345a514ddfb72508275da2bf041f30bdce79086621a293ecc3b4dcf797e9638f892accc646ab883fff3d6b0e693ddb8229af5e932703093fbf6f47e3f04ec9bc8f218f68409eb20dd4399f350da17279301c5fbf61706ef6ac87993016eb5e0099785d595480e6e841ec5f29e0373c077ae0c8780d7b7e695f10a408d983fee713830e4e222ea5e386527b5375c53cc0994d194231e2880637a993216161c1916fedc674294ddeaa4ebdf0becb2e8424573d3d4979bd45fad7b7a2493fb997a2a2194d3ac2ceb5e422019a4e4a6fecdb3a8871b35ed335791618106a150073c57b174f98cd37b8ba70c6b0e7511a2d37b2f1c13e6b602cd59fdd1cea7e0e29e4b0595ec49f83a1c39304b19da1482777a94f8d0cfdd9b9a586585c88881138423f669914b01bdc98eda1b08239abebfcad72993645061de92ec8e30dc80bf177a8ae850d35b705f99fcb838941898b9d95499c99281a32f5a118e94422ea4f9fab997703f535bca86c204369f222f8a40cc959523aeda747b51aedce4d137f47ac8e2128c46bb976cc90e642ced8a5fb81a3e4dffdbe351e68b805557c30f656e0b95737f4ba1f8e67b52704727652c51337b0e66e8f6289f28ba68ac72ba6c4593058b6566f0736f11150178e64b014a8cf9a86424844930d7e1f689b454fe2ca1505f69d19b77bc8d565245e775da77198cf8213daaafd8a34f8c86085f26b2c81d08531d674dfc5f41aeac899b421cf63176d2a34e6690602074f3708a8dc3787a97c150634dae9c31941a6661ddcc5d186dc31eaf81ffdb9c527ef2706f140499f6109f34f976e6f2c9ef736e795dbaa5794cf532a3e2f39570f86cf25a2d25ea43b0345dc75b0a8ee46af1c4382621348c1c0fb9e8d5a292e21fc0b891c34255970207089a6e85d1d7915af9aa7a09567017a1431438fe56a85ab7ae67822c07ea2690e29a5f386eae7f26d9e22fae9c210503e69ca7cb307af823aabb27f06975acb310bb55b620f0f9c388335a27f7561f1771a55f26a73c1eb870e7fa7b2fc553bde107bcfc8e3e845c1d8eb9ef0f74ad96256019397b6c6a7ffc3bd3971c5ca9e924917c405d4b982a22287451a0be9ef76e0573078c48f00bdf3ad5dcba08f3d45529721dd0efc960916a57301dbe48436ccbb97940e8bfcf0d7e1fbd18c7572aaeafe3d8555df708ca24ef74b35821424c9efb8fcb25fef30d35cfc8ce1af57defa6e97af88a279f631f668d2859a8f4c3c4a3c41c81b4149ac321cb84f80d12bd5692ac8e29322d75ed3499937e85036410e6a1ee41be84a227728c2951e2f2a9b289f3084d4de48c231a5f9a7d53adbd5e4d7d90f50cf747a02df6e1624c1663d31432f5ae223e51eda6e3a879541f238c85557ba84767a657260700988316b5039e61806535ce36dc3601b8b982f2fcc4d3c9b2e093a0a899efe856715857ebbcf2a02feb2494032361994194fb9299d05d5b18c069cbe8dee90924d3abd5d5872f81ef5f25853cc6a965b648d451026b5807484aa7444d01e771018abb2cedb08e7cd4fac352d08c05715913b10ccb6b0da07a2afa209c5b436090c6aec4b0a8e33d5d17cc5a3f199b89ca36a3fcd5013acf9d13dc5c8bcbf61d20d754e8e62adac21a4322cd08f84c82c32621ed03f6f5278bc9f3f9d6b39c31c2fc2c4c0337c37a044eb8351ac3b2ec634735caca995cf1cbe09db8d830676fd2738044252a304cf4a3392e6f83fee7b947de63fb9e840ef35feced029b526e7672b290cf1e8d0b4d627e3121a5c153b1ecdb6cce48af106c79218e258b5f8a8145593f1f790868eb56bf645c24db78302cb2088fd8b9b21d300f3d238e21b98484f188285d50b368cdc5a02406ee96ba80cc93cad199cb114c713a946e0624fe29f06199b78881028f609f695ee601715607af3a6cc7a745db1b83459d4ea40bbb97a60d60e94e82cbb94f9ece479a52ce0b05d91eb893af76a4e2a94d3cc308aaac6939832c45f5efa6b5e9d2df0868f30a484f8b6e62e2220b0261a8937dd7ed394399c8dca512ecc68cc767238ac110170833ac251a9a3b5f27199602ce9e1c18511da6366832e728b19db34c22876549e1a89fed76336844a68bae78f5a6b57be55cc25371ec043990fa578311c468d646401a17b336e212d4ba73d8d4d29cdfecfb5ae759a3c1e0c87b79a16e80cba907a2742aeb65426685c35745b7678649207cca8a71d5bccc96fa1763b897554dd86625671d968623bb25129895eed883593eeeabe933aade2a7677325d0ee1af63c2e4d96accf33f260a757cceab1f11ea5b4c93b6ed3db3d087dbb46cce276499166482252c2b73dc2f9474aa1e38cf26b406c77e52bfa8eca4019230515634f9611199bf08618fdcd81c4e0f871cc316f34aada80db19a6115e341694825e85b9ff83814de02929c69030ecc15470518760805b40ac234798b58987c576b759c71f371eba28d296e0aad29926bf61354841aade1fa90ec92d907b5ba4e5b05d8dbce719ce90979d2e7639d8f8a1397271c63dc90e4c961abf590ed47fbc3114fba9472c670b0ca3b3329a940be8873fbf208bb27b2b762c3cd2bba7ae80f49541a4c89f2aa23e028726e3ee567381294d8eaa293317cd466e5992e40095590c87d7bd91ac675414dd5844c9d4130c0fbfa048dba5a49227b4564afe01448c47e6c75c03dda28d0c4c71b06172d1d4b64987eb8fd1f50f14aad6b0b35de537374fdcde1c670414a144a7d34b3133eb80c2b49a8723ab750e570414b36435a6422cc8cbccd033e0da72dfad45dba787e65519c360faae63a13f2bcf3039ca40cbcbaf0f0e45809b6da83de4b7bb36577552202bd65621425f46381d969b0432b7a1240e5fbc352aa0db5c812b81f9bf77a2aa48eee98f7805d57ec6c1c2a3ae778504bd216d1e47d8d3604fb6909bfc8e561c621bb95f99a55b64498e04845d644d43f154f564b6a49d7b51c38272e492bc61198c1fdb0b558843051c6d1fd61f6f2ec9933936631eef8a89c2dd06a960c8e4d5b71b600f03bcf34cb66bb511afde9aa9d561a6ef36f97e3c09469851cfed6bb69440b1cf4197f9f3764b8eca399a151958b3780e28beb73bfe873ed2f6fb9f41331262ba9d8cfded33bfd565864b418dd8591759d604bc89be969cb719615b455a74db9cfadaf87e1f680fe76cb812edbbdf8ddbef112cc0538e772057cca44828ef47986efc823bedc3f99f3c8c7adf342a33a829d5a7ed68dc71389066628fddd3a8e1374dc8795e999a9aa7bae5763e7102bcaf1b6d87251cb8efbf51a1aadf0f3585ac7a9af53c094dfb321f420293c7463746feb485cda78fde9338107c62a33af4c63ba0d9904b13ccaac2114ec3bde438f5133ef690bedf485c322cef1cec9e77bddc507afd60704fc53a542e9af87c5ee0591c8175d9718c0a095470810064c3e5992a6d954e4810ab68c6412d93d252ac29a4ee6d3c6a553ef2a3d12b91202e02768c50290520cb94a8d0ed90a0c91ca8603101ddf12ce92959c4edecf7e209f511b0b3fc237afdc3fb18de9448cadeb091473f315e56aada99baf72355d53ebd950c58e5a8258517c7045a406b542151def6c402c503608a34f36306281a4c515d70d0c360e730d4b05b0d74cc054eaa9423f1c5f72b195344d89213e9e112dde82043cba2068c3cb0e1a2c7a4d1596bbc1ffba908f11b3d105fd871891fe4fcab4c779d89403bb2063c49ea5b4dbae5a18b5f78daae13827f59c95bd712351b374a70703bb9763249cbeb0d0a4e8e11ee9a7fa84f9056240faa0d2ceb4db8b16bfb960f2605a6adb864df62c003a86403cd031f41c4effd8ae2bb6195139fe4036de354a461e748c4834e60b3fd428c3564a96f6d58fcfe129bd0f5ce38f494c17889d8ad9f9dfa3f574db21afbd187c6cc68aea79886072ffe8053bb60c58694270ed9b38ff3942c107deec9b151dd27a3d6f97a13d3d287b53946b063660ac8f49c067ca1047b9f417a26059b7703b30eb217f5061e517555050654957db1f8a0ecb8ddedcca5b572c4503cae838e93f9edf751f815b20dc839515393a8cd2dffadb925dc216c63ae5906451633e8969e3ef0ea74417c320cb24a2d7d52f9a4d8586e7299504208a52065db92d87e3a82bde4259b28e8165b472c100ef91a75574506f07c6c6fdf75f5d08319521f29438824e27df9401f88f6fa329f32c54169d2dde166be66763ab8d6214e9bb613abbd76b1dc703fe3e73072354ab9a6c2b19e3c785f9d348f51bc443bcbd47d434e9829df78d722f6039d92c857469fba1a57a1aeb987dc972fa1a47eb5474e625481884f95e7c1837228c169f0b9fe39d3846432342656f29a3db17455428a72043fed9006b1eee5caca56d2ed0b63d396e71959433194e59e3a5aa0f445a8d4dd7125cff4e65902830cd1c9127c58f73fb83fd34c15b8851c31af58258d4e260a065395d8b25ba65eed87311dc4d772a7826ff218e151c374fc859583dd1323a462179d2e4fab157e8d8b856b1a624d164a81798929f90380ba66342395afc70c08065ad20eda897bbb8f059dd1b5aafb4f8e53c538c7af1b40a0951925aac2c24e838c992ed9fe2dc29c696f110f85b4ac710a1134d58e3836c9ad8df7615c24c9c2f0af149210fa7836bca49a8af4bfc30dd65fbc3830cb1379205c22fd781ae41c1b82b1d0b61d79e3349f0a566a62d17021dd26f3afad62a23685cec89821946c375268abc49933fd8b5470e342afcaf92639104d8269e5a89962eaafd0482851575252e998cdb749b63ef53fd31a822a9df5bdfb74874f72350fb580753a3b613521a8803d6c6a801d9e5ecd673878abbba5b471dd623c1bf8d40f8bbcdd2f71ef57ad5611b8bb9561c18d8ad43e38ffc724d22ea74a9b208fc2c0af8eaa8448bd226d37f04e897ef72f1ce2bb39d680587dd32f453fe10fffe09ec1d0e5424af73020a94210fd4a1d2b24da46fc3962176b87db91d2b21032292daf403d7a84c05a84f84f839220faf1bd2ae8300417e6b1f433bb07daa087c8b80c6c23293eba9dab3369e5793396861bdf869178969b8b5623f28b87e635e734c40695fa46b43c63c67c425a3bf7cc91c78798ed29d629cd3fe136b5da4648d5dc618012f63920fc80bc2d228e64b1163eff26d2e74824290621a313fe47aeca6157ae16d03cf9deb6c5e37f23c4884c11894869f67c529d86117fa3161544d41462df3962d959419fbd0dd4b315d4f66d5d8b06841534115831ab770b6acc1ec216c57311edbd89cf7c1d5fb960ca146f76d5f76c70bd2a98e48b2ad030f8e128f9a357a66588ba831d25e2926cadbce4ff0ef17889ed4a8a28627a796d5ec19fb4d1ecd104d6901ad21e10cf68f981af3f23d881e274a941b846748b559510f70b387be3cc6be929c63b355126a28f78d84f252040f828465eb3ee6dcbcd7fab6f519d7f9160376bbfd894257002775e6d23873300d2d3b27308b95c2e767fccad9fca44d37071b9f63f1855a5cec3cf23853edc31d56956490bcfdcd8c2e24ad13267ba2dfa6acc05c3c94cb023f3ed1e16be126801c5453d68bbb3e373235d276515299b89464fc3e020299311806a713966de16b1b3f4c1b4b2e71bb12487b08b2fe8c113ebc57062c0280664a80d484d14cffaad4ccdf2081f9404085ce6f27013dfe24b8200fcd706ae17bcf64283e0f63f31d136335b16497e7d1ea19ff25cd5339cc97400baaf53c8e58e892d4e9b0f70dfaf9b4ce286bb5fffac18e92baf4eeffd24d18dd0b7cf840abe43fa06eb53e199cf3a11c17160060c4638a26777b99da7ca7afcfc8a4403b63017350e2c738fcbcf810d65ec9a25f36e22c9307fff2e44b5f0545ea053ecd5552c5fbc5914b75aadf48ad3bb25621e5a206f795ca14386851bc37bf7f059c031654738b628dde2c56b12a91839bb53c5138415a4b8398865468fbec1815a67193909fd238792c1b623d2920c604c48538255d1e98b3861843fbfe401a26a67e631c5ebe1ea55a98f1d8ede81308a674295dcbbad4c0e3e100467837e1f9fd2c273dbd1c56fce0103370fc87b2d77f50ff099b9205431ccdb802cc786fb5867fc43643789aa1e375f2293226409ea690f08b97dd81894e85f899d549f6fe7e45015fa1a4e6dc26927fc6727c2c4cb2ae3d11cf65490e020dd882d4c27f2dfdbec4ec9043d02e470305488374f413ca960e035026f6bc7cad50d0a8f26e86eac90624de603ce646ae06afd19f16108a0dd53e9b40e645faa6d61230693242439ddc1fa19778e573ea63373cb48c364e1e3dc4eaee268c7026ba62a796821a2c86f99a31d4a1206a4bf5773296c04b33bca4ab2aa459a3284360b4bd54b25cc285fa844142495782e2182a2bdd4be6a21fe85387d84fb0b58041c65e387710f22df826ab47e87a444e9f6260f2f68269ed010d07c1e2206c5861abc4c1c8c7e1b8bea07bd2d60833ad8a34f4c9dfc79c687395854b36ed493c76b9349e4197406308c464e68220bbd5b656d9b9e06c27b3614de790b272387946490f42b66dfcc544831cf0ba1430687cde9630a5466bb047e24ef36bb70a188d94b6f2018309dc04178343a4e1fc08e3cd0c2f7c4bbaae8ca9fc852d9e3f7ba4936e50f40047ab3e8858e4261ac3aa9583e2d84570bd9dd5310c2115530e8706bb2f039ffc7bd2abf8e21b05596d7b38c92d15b44bd696019392a849299a42cff605be49b93a304eede6c0f094e158da6525c7c89767321a16832c391982b7778385814cf9ec34fd44011a5cb0cdf52f89dad5c1bc9d6d47090ccea1a97f0f0bdc53404ffb499e2b70432232ba27a8345f1a6602c7de32e9309992b583149f5b52abb8e6734aff94e40b4702bc910404d3edc53298b56b16a1ebd54b8976167fe182c42edd01c4d2ee8ba1f567d13dd1e962cdd44014f51b88dbca1043adfee3a3d1eeb692e5549e8f5d2f82f0a1516e730f6d7dffd6cc158e83e76a1697fc661196e6af1fc659fd2870be955c2103f5a48e5ad886bdd4ebf0f3cf81d6c2d04cea8badeb2f52433a684b3a96881ef982f8991db254fabd13e15a5ec79b71cc2875339ad70f6c44a75a6a47b61ea845b9dcda6237cf7d538f5bcbe9b54ccdd4f008066490a6895b827a8bc926ee1a7074acd5b729a19fd1343fd8f6c14685f82f359b91ef02283bced5493c94dbd32c443211bdc1353a3cc92ac82787772fdf6568e3d8b5bceabb3762679bbfa0eebcf4409b67abee3615ad48ebf25e7a3d69d6c81841d92659f7228292d2a69fbe3ffa77a669d1c88bc5e4335d4abf34cba015e90af39e548c9b0249be53b1ee13d3db33cb3cdc68a88144fe6a1ff0b6970a2eaaf0d8080ef1ee8b5a0985f43e94e1432c4f07be3ef73ea9b3dbb397716b1d837ddf111b4d5bb7e83d1a9153224506cdaae65d2f7e117796a91adea515ae40f838b5d4a1d90770eaa7c3515ee96f7324adca0a036c6e61e7efbc6d8d3614ace3c0d626a5876a4bad17b52295b4b210ee1b109002ab5f7c39b0d75d0d6d6fa91f5b4af72a8911ced5770adfa6e6121cc9bacb9e8afa2c1b5fff8b5aaaf5766933cd9cfddfd7866d761d22ce5c3d9367028d5685ba7bc40026057d4e0d8653df8995ce27adf3683b6a6aa3215fcad9a931fd7f62180eced101ebe629377daf62fbf9723f4897e6e6a026ffb35e187d6326d6e8cb11e8775e19798012f15be59f65b26e618bcfa39dbb2b1810437242565983b155ed5e65f9f78aaccb5c0a854efeea3c68f4045cda3b539f341036b8479aa17952c2bedde12e127e755c870bcd595dd6191ffc963f03a9e7f4d1a44570f9e9875dee675e509ed27140c8ead46c25884ee24c3832685879d977a454f7ef98c165669538792a3e1d1c2eed1863885c6004561d679310613771f189e485a1898ff33c22c9ea25580cc8323db7445023e98f99c06727dff078a7038dfb2eea14f6865e80d6031b9f295ca3338e73f00b52f98307ac7de319fbe3401b1963c497eef9f1e45525b639a0b02681c496afd664990b844f402f7ef39dbe4a3598e42244edab04e78acdb2a79aae5cb98032600dda1f0a41dc12b625e59ad538f665cd5ba975821544afaeccb8294e760ab5b1f2874379c7cc51962dd627688a24d2492e4e101e36f447e76877fe817e36ce609f1bbfcd1f68f9e575aaae6e57d6452b7adb2440ae051bb3a8568ec4d3f390004f12bee91896bf3be145eae3bbdc92190256485a6f420201cf79d0c68143ce5188fe0a7c0dae1ee7e7ed6cbb07d2f80599da792666ccb8595453feca5509ac793a7cd11023b826f55235f6d726671dd70f3e85c79e9c92afd34994688bc64b03de2f7fca44d1196f13b9751be35892c5926a482c179b2e0283e96890d75e53a34374f647e3aabe2d7b558d80128f4a13b6187394a263c2d471497d8ffde2c42a97112a620021d20d8f898320c87f7dfcac7d4a4d22cdf2138b3fdf10fbffa3265675cad2737b229b7690dec8df43004e3fd7cb3ee9ec761c71496fb80b9a73bb987affc8c6c9998ab3983266e2484531c42a9b54ee20decd4177413bca713baae77350cc4d4da4f77ac10e7b6bbe37aa8b88cdaa1823d4341e658182aa600a772ab06184fc3b9922260ec0767c668f45353fef9152c2790a159d034df2129c229a1447f2cb8a33968205e65ff9bba6d2cc482136b1b21ae5efc75f2611eb194816d8265d9c828d1a8918c72a6565bd743efcd343cc54931020ae43c59da415ca19ae6a21df4870c9bb25d416eceb9ed9513326c961d99502bdda20f8c7f6950b0b600a0faec0c448e1c00d0ece03ff7a686bd39c776671ff76ca62d0f198fa97d564db2ee3e2f1d177c7021be2e9fef897bd850dfb7053232a1a49c0d4a042f21184e19e5fa69d8e1dd46443d4c6e67270779a57dc73e4d6a04c95bc1881d3bd83f85d176fa03680ba6d8de5c1223b359638a6a1cb222ab887bf4ab57b1ced82e569e874a10095e2d3a8c432a2bbd14b893f9ba6cb02ad09a4d43e999fac834aadb2719b6863b556e6dc4eaa41c4c29309cb5572b201492ada9d6010a837183d8cafee5f05c392544a03aa86a1b601b596f0317c3352abb6f3d06d9a36026f01ee92e80eff28532be1a3369508efce0de40832608525c8f18c4d37b75223bfe67f6958941ad5713548c39fc7b7ad7508fc6ddb5a6c89021634fb88c236eb09b7fa88d4689ae1c0b6e59ffab7957f2f3b335444ea3dfd99b0e93f30a4a65b9bac03af57a26d2cebe0fbfe465a11be87dbbc5070387b10191297d9797bc9fec52a7b08ecb09987710104765b549281424147eb4912d4500b28cd61e87621f7a266de611e59a4448cff6b2e7002f5998dffea4fd5cdf5efad7f3eaf0b41470c3879eda5318cf7bc6bd59e916e5a4bd1a9ca7b11c73d2c86b101f91dd80a04a98f391571611195f7346f27f10456137f3264c9339658e3c623e9ad4327190f2d441466115a458c5a5a91ba5bce7164a7e1af88124b8e6a57dacb25148efe619733ccea16086919ff69a4f2fa7ad2a68a7609d8af845327ba1049d4dae754eccf337073f39c3bfff26bf94dfc83d02e437e61217f2bc1a825672cbfc37352be9aff28906b884ebf0231c8318a481d1e3e14c3adb0dfc1817e7c0571dbf0bb6a6d982570176d9fbd32ac40bc20b2df4ebb4dc76c8d107db5cef34637192b267fca3db6cae87dbe4bdeb43dab95b1c1d7a67dd028372903b46b1ecd13ff16d53a6e9d845f7867a4905d88aa5b9defe7e7f8f77d8f7faee73e9809dab3681e4e3568b42e91fd21d9d2d8612b9f8b3d0488536579baab8b9e6053e802a97dd5a70d7021bc7c8cb644a7c9787f6055c4f964ccd6d5c3f22afabdc2c26c02f8d77e573a6a94625a3b38ab80943f7d92157ad6b71fa0e0bf43e96056f73552ea86e32bdf2e1618b74a9c9f549bc692d1a8dd4f3990f53a9c86379f144fcd3ab5dc80f4f2853df9966a627b5455ec0ae140f13ea1fe39ac105ed03a6e90a2fdf42621d7d951264cf964e9b4f1e1f3aaa83dadfb6d6aa9a79de7d1d987d39a89df36bfa50fbff96bbc2f4a37aa13521e62e9d7a4a8a89700a4d6e4b8cc4d8322c45401a6ce10bf88062bb019c34de910550fa171b238bf579caee2dccf7a0173f3f0c457eeb7de34ab8628455f4fad99ff234abf26f4356412db19b7e234a62032979bfadeec10f99cac474c70d5b7898b2f87eaad8c745fd8558d62679a9da2a9f5895b0798c7b03a11c3e2730b570547b73f116b7f69caf36d03f41fc76b17aeda9056afa2425766be573eaa2d8b7a19bbc834ddf138eea7ebef0d78d824df182d7b78e9262582804a3d8bac26ffc5f976ed60ff00704c92cd44361644bab8b995721cc010915082eb82feedf4fa3294bc318596295dbb6e6e2cf93b20e2a89627d9222a26a712e87aee7f2495a93a0b2b7edbee0d5c299598526d6b27209199da50e8a45d1aa3ddd7511dbeae7d39674a730e157badc619ba59e0e201c4d1e80a09c4c778d798cb6d07ba0a3cb84880a8e311bd515289c233462282b40b3ebdf9e52c49a01b70654f804f57b71be29edae3dde9ec9eaedf499eb7857f4d1c29aebd926565de65b67f274ede36feb0f9d0919b66dd6eae0f795e11960940b53387d925fee3f26dc0056c31b2fa3ebeed0340dfc43738be73350ef8d99e8a3fc02e241db1b42c75e5bc29ebac2f8f4082bb42eb538b763fb1d6623dd0d835c7524999b61c4624c82b98a929b2a15b0bec428868860a215928941ac9e8b755f3d5db3b7b4d6ccc7cf78f900b7eb4e87a83c18cee041a660656f64d54e463a1b12981289e8ad430f99e60930d60e00e8c5fbfb2bacd5844dba0ec88ea0c7fff9ebcb722542bcbdafcfcdac72ea036314308cf987f13b062c2168dc260eca3504927a69bfed18d7ed3509b44c58300fd261c046fd620ff1513db787fd4db07cff82691af55cb6aef13e758d3da00ee5d08e3e061ac30fbffdc37b1c99e473a25529adc5530419f0b913b2da34facb959d074c09ca92c64ab9dc09066cc434e680fabecb6b034a74bec5cd432e0809dcb0a90ee3008d5a8390ace9277aaa5bd3db090a2b7001a6a2dd5032a52e5af16c626dbbefe38b720e2d1f12136074ed84c0e6039d9ca12f569b52f3be5cec89a715cff2b5f54b180842a63013922e98cd172b04226409564cf0f0122c0aa85c9611add4b6577f214561141cc2a6b1696b7d057e736b394f58f5c6e40e0294a341aede169951fedb0759bfc67a517612de6e21c1ea23f5783709f7fb1e762133ffa86daad681f2248c6f5109ce62248f4317feacdf880f2f660c1bb58c5a08b9bff68d41cad303bfcfb6ad9dc76806e61c07ba5638c71d1415e5680bc29ed9ba583811ee9b172c141451add2bb84075809b1398e24e00aca285b50397fb506b37821cd0b078254021145f7b3b195f88fae0959e91a33b1e74677a2736ba715e8a285c3fa520bfb1ea80b189ef771e20e643fe9fc24c662bd066e2d2a7207d54a8830025f7e4044457b7afa51412bcee461252f396c5c71e1ab7b90def7c843b996bf2771b29d15ffb2ffde599c2cfa47fdc28ebf8aaf39ce6d4f9825dedd09c8765f2d69f1731a11b3d04c2018cefead5d2c8136c6a3a54e78e65e156ebebf6720be2bea39ee4beb553e231418a0f958169c069332664046377a0030756a30f033d08e33bea997dc3445f127e610aba1dfee74898ce355bd56432e94130f2ba2c2b8e1f50deacde1b1c77bbd8eeff4fd714d159068da66d4ef1ea087eff70aa5008850442c76df7a3f4182d6c71d5cb48265439c422c97565afafdccb2045c7a01631ef14b04a00c878d779db8bf4d0f4b76248754af8f7ca569e7443de9b7f9058703715657d01b0d1e79b1273dbcab3107678966829cd4e77db29257ed3f39938eab6a68c3b04e0eaab15e3106c401b1b3e595e63809f96f38f3ae221d8f85cf8095244be60943bd02074dc0af615e82a09588460ccc1e5391243244f4b6c29203d3c97bac599997022d7f478f40b35d0246981f60db65886a1483370db1f61b4ff9d56386775094a82065469a6498ab1c1d4d2c9e00b3badc535a496a9347f64fa4ba1550dd80175361697cb1a5c3bdacdb9c837587eefad995b9bb95e4c7f3970d0826331e5ab26bea060f0c58c04cde602b7d90ca1d62cc9aa32c94898542594f5596742b3f9c6e0f90ae531120be04a2c6269012a4edc250d95d4e8596b65948abb741613ee2cfb07aef434c656f0f255844232d9419dcb389fe8b9528554b05edbc0bb935ba4f30587859ff84f984448833c5b7266c5118db93b3f22b17c7e4b6afa0d14f55eecd0673954a159d1b6a1f2296224c792dadc2e19e9581a52dc6a82886dd96b8828e103326eeb64f1640c2a3b6e8bd23fee6171fbc0128194eb38d9af5da41b80835998af39a261130774b5b8460986d2cf361759979a9f550e97700fe7a0d0380fd1867882f5890d88c07562a45273a39020d93eaa6df391fa748a56dfaf823bea5a5b6ca6c324d44a415869b4153597232eaeed8dfe5f7c9a9fdc64ff526cd9b7ad45c79605d718f846a2555212520ca2d2f3bc79840d9e189146bfe0bd771010c38327f623c7106a7c85ab9cee5e4b98e1787605daa08c34382580fcaf2e84ba702793b57ad4ef9bef4bc57128b01b39d8d34ddb9bb0b10df4610fdcf66c6792945d923a67bab192992babf6577b767d6bdecdf46df3096a342dcd6f8b101fd11e4a85a08a9d08b9c6d02e629ddebf70c696bcaea2ff5460e96cb3603c54f18f7342c546d1e6602ed4e69692569ef031be0436d38dee2b312f6feed2cdc161ab09c1acff4d8d787dd38f43e2174afcda52636100a19af704067a51d90072030684674e14383084b615230d1536eae80640ea62786553a674fa5127fe9aa15f392ae0da5db5a9be0a13aa7258df06a2fa20e74a01b54bd062e859e734417f58ab9448acfbb0ed6ad7c7634414af001b013fc6a6fcdf04e3f4b81f73cf56f4bef909a2c8880ab8bf0394daba6d7ecb2a56a79fa1249a0d9a0b182629a87b172fa7605f4872834b2eea20bbfee8c1e6e6adf22dce4386c892fe6c167684f99fbd4e93222b4647702111238edb8fb02a218e5289a2ed0598da996f9ff2299a914984c4ba322c4d0f9b1a6da22334ceae9cdea14e341a23e16812054dc255d63c17ca6ebce850714a246d324caa82cb7cfbdf86a199668a92865fc0652d5301cb076c71ffacaaace07d9dd7210202089f48795af4ca6e8f0570d89d3fccaafe2ceec4768f696a788999ab560293d87fe699c28824bb8804cc1b3961c454524735c12506ed6a938fc3b0d8b8dbc04090cfc5f7932fe4e354ff40e30e1a1f91ed1c0cd0772e3be2a131432a7b46c0c2bb9350635d43e41248c8a4f5a8dc3c0ed870633e60bf8c24fa42290eda1abef51bd4e754f177db1b445314a22a4c66f23366399382858824782fe8c900d89d1b90b8c8ae425e5973fb2e12ce870e0c8bd62e1e02a87167b784004f0aeb9e41a42b556644736c7cc4ad293c665a8aaa1c688fcae8cd4334ca89fc9b1f0889fffe0ff9eadc67b1fa13033214aa0e9393e29a03f8fc21b1f0dc57c463fc4f0a5ff6abc1f7771fa3413763fc7e594e7578901716b4429bfee130c1b7e0cfc0bd1b3b6bcb4b8e104c1fa3d4f7bf44d9172917da0035dc195f0a1da030b9e69a2aefc3965554f8a145611790c0eac6c000125b4312d9c31953234f366c98306115e7808cd05a08a829924bf7494c832b92a23d2c69215a7c3c097795b99ddcb6416bf37e51f0e702a1850430591756256dff0718c65236c128ea6440d346ecc769587684a9900e74ee5f366bab984bc488443a437ca5ad305ce6aeecf7b1f26c054c023b21f4486dcb5859b167031e18584c8649cf08fc7dec59036ccb3231099c794e60f9315a7949b5dddc699613ea5b736d70db999a67019259afec173cf7766442d6fae9d48045de15638a9988c2c0abc80a5f0bc75d79d64cca2739eb0b4071a408af75bde57b65c9ef5d9220c56f4813aafd7349a26995b377301318f82c4a1af43c89754ae1cebe659e16747a673f6d6ba5ffbc24ef9dbbd8c2df5355619ea8912980f82c60ccf4b12e98f66e4bd175147103ba5cf1b718185dc92b5fc0e22d7228b2fb7bc2315e64e0f59b2a9382f39e2ff633f0b7b77ce39bc60b5db6203c20bc48bd49fe9ed6de03c01f3efc5cb03ca5a44c498d698b175a707601e9b8a55a22df0801080076f801c4b6d2b5439b13fea51cda518a8638d42b9a645198c826c82c3d6cd75887967c7fb9611a0595a6d10d5dbf61cef6a0d7d7db6bafef72ebb137b8261bd64fa1bd11c61cb1edba11566242e619a4d2e68e6fceae01a92eb4645bd14d60baf30bf08226eae0fbbc34e2046c4acebaffe41b5e9bf7b76068f378840465669a1d3dc466b47ac51227ee68702900fe5aaceec8de0ef75fb58e1281411d21f802501624ba229dcef9f01405c72e0ca456355416a7e10bb6cb6899a01a5bdd1e842756e51b5c2ed9cf8721f02b4ddee46f19616a766e78121e05333de218dcc8866b6aca43e56a5011c48edd0faa3f42541cd4b57f77b349e7d22c294ab35289be495aae32056fed1df0133459124dadbd42bde81f166356bda19480489ebaed5f2d3f3adc7b9ba583cda8e41f3e67375c01a2a7f0ee25737d71a8345df7d981891acbf6a4c5e58ad5a419bf268dc6dac1f41bd80f4642a692f0bb3a97285d74f47bda94a0b3de3b59105bbf603073bd0febb8dfd7f1c65f1f90c8763ff848572865aa675e11aee1d1fa8f68d91bbea7837a670c275bb70b839b5806ed23a27178ed255646b69e95545cc7fdd9088e4264a5c690b039772c20f641886c116c103f6699afffbffafb070a1355bee27d958f9d427e04d3d6acef4f715a70d02744894800b7a226790f5badd1c655b2267803b2757b0e4517ae6427162ae29798932b064d088f8b4143eb7366acbd9d31681293bd5121caafff426697205c3d73970943170067727136e6fa4e2edbc472eef7556c8274f40c0afbb6af5633b08a65acbe34523ea9ad99d053d8d10aa501b6b3adebe70a637dd8006da00c6202f7534297a603bd58014ce2181ebc23a9e049bcbcf776add4347c0b177985b416ec14ccd22683bd7a3585662887b29df8586e0d99270c8c1b89930011287e537e46295bb7b4a514c98a9a89f78ad38c6fb0e93a16780dca5395dcff54df6a350204e352600e53c17a0fd61703c29bdfcc521f5f75ba7d4416504810f67bbe7ef5bb36bafeae9e74ff5407d3dbb8fbcd91a58200e5562206a299d1ec4d4c6faa2169261152ab6059d8e6b04f04708f0b1e6398757af6082954f0f62ceb2a1d27b857774cb83dea6e720da87cd8ecf9fd0eb50b9042936ba386fee2078dfae4668fe5c69279537dd12c2b8bc413ec4bee6f00d157bd55426b1d6ad2411cf127fe33f48903d1fe9003cd5e6a0d23bf4fc535a21a7394c64d27d1ce67876728d8e6f1bae12e20c1b404c6f0ba8244551203df0bdc6596a8319afeae88698599ef5f6c2ddbedd6cd87cd3e25da7053046e166cfb5ea46ade58e4d646b574e97d1de3ba940e9706d28d47f02f6a4457635113f8d1de1b3a9a18184d365767352589eae783091f52e9c22b81ed434c1b0f255ea61ad7a03924182a42d0935a88e3bb2df939828cb7b96f28f3ae8ac0dd272ddb193f45cd74d323f7490a18efb4ed3b979a6f1498fa2dd75d188453ef745fb26696d4b3098d350f3d46f7dec0fafcebd400e34ec8fb45b03b5d7dfcd96c36f742f8cf0a6c0355573fe6164ce0deb8b6e36c41ccdbbb6e542645cf269b872dad2b61ab0053943e652e6a94e17635609e3fbf79520614a45d9563afe9a6429e61cd4c61f9fc08cbcd080c5dd96fd7dbe346577781a95f8bfd146dd8b490a9f1bd3193f57fa371e22a7ab0c9f3733d2f9c678641a2db62f0b9ec9429d076ef3295d5650fc1f0ca8ca7cce4803417a59a41edf58b767f9ac505f4d5fa90c07f88e4a8be010d4dcb80abe18d64c619fd8ff0083be4660d119f63b6f5ddc6e618d597c90b2865105711e66ffdc12a6cef7d95aad41f5c1ba380146d56a7eeb534ae48eb0ab7ef4ff90161565ad0523c96c2ad340b177cd97092a37a33c038005fbba61fb2c9e7aae326186bf5f591e61fca04e470e080d779fb73aeaf6d0eb66c3080f162df7436ed0d4fcefae97a57369cc4cac738d1c46d1cd0f814a529b4a77d92bcd3f49e351c1cd14e9e7a0288da567ca7de47ed401f8c9d00b31a373a1d63134428763627c6d995484bfeab3384f97e7690ff75b7e39ddf9ad49c1943838af6c83a32f06860154715104af4b8fdb918d034eba26f10454b2b049d7e28be1ad5b5d324757aaff978397385cbf98fae2c956ba6fd94cc23a2d9737b1d429359b1923e6767945db000ce9aae3c6e88b6fde75cf2e3393b1c5b0b8517dbb52bbf9b80eee045ed25068191d36a9f91f981881ae8a79d6f6b2542e3d5f7baa2351976157240f136328ff08af0deda3caf361250c1e9499a756f3b536b08c98b244ff9a5aea38df669c96c082ab0826ae57dfc54559c11d748004b3838f02964cbabfa2493910177183ec2deb15f7144513c9592cef9433cde07eef068126ed6020bf954b1d5159bae7e5bd6e8ed4c215ac7a568e0358ce40b2a5109b5b3252d5ef8f9e65705bc7d16bdd16e9558d57c82856880862f3717934fa05ba076d03c745b803d9248c982045721be13587e0d2a4d66b5ce47c477b4715c9ca2055fc7dbc593b7f086c96011c23822e081f3cdb8bfcee802226d0b7a29ef1ce5f7832d180f444568e5752ec7557675ee8303ca999a1fc0c8ce0288d9f761391bdf44861410d8b87421b8a7c609206d74cc2a2c7e51f8708c6b2d4da08f715e8738309d798627aa94dcfd63e6cf58d3bbeb054e0126149df0f9c8f2bf3eebb7237c28f558aec43c14643f85487a5428d95c070e1ff2b81382b13083dce199652915ed66df87929cdb32e2523d4bd02acd9eda9b95c4d3ad2eeb3446303d05e6e4292d194c0d41aea018ec0fbdcdf4d57fa14efabada5f4c1d8047c113388fd4c6f3f0de33e6bb9790a0f1db1fd76aeb98d0003b1dcf000a06c7ea3845453a1ce6aa762c5c79052ac349b333ac76de3f65065b55ceb498b1e351848abac474fdea6f2d8c818c5cb2a3c0b7a879c1d93641fde1c58102be0720c50a7da1233574f35f6390bca56be2790d409db967e3040ccb8599e348acff2b9ab0396952bdb3b1918cea6d93c87ea7648551fa2d5add96d4a7bcf6e033</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-爬取今日头条街拍</title>
    <url>/2022/04/14/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E7%88%AC%E5%8F%96%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1%E8%A1%97%E6%8B%8D/</url>
    <content><![CDATA[<h5 id="6-4-爬取今日头条街拍美图"><a href="#6-4-爬取今日头条街拍美图" class="headerlink" title="6.4 爬取今日头条街拍美图"></a>6.4 爬取今日头条街拍美图</h5><h6 id="抓取分析"><a href="#抓取分析" class="headerlink" title="抓取分析"></a>抓取分析</h6><p>打开今日头条首页 <a href="http://www.toutiao.com/">http://www.toutiao.com/</a>  搜索街拍</p>
<p>打开开发者工具，查看所有的网络请求，发现页面返回数据不是由 Ajax 加载的，是 HTML 类型，请求链接 </p>
<p><code>https://so.toutiao.com/search?dvpf=pc&amp;source=input&amp;keyword=街拍&amp;page_num=0&amp;pd=synthesis</code></p>
<p><img src="/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E7%88%AC%E5%8F%96%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1%E8%A1%97%E6%8B%8D/WeChat49f883417f3f8bd97ec5880e80066787.png" alt="WeChat49f883417f3f8bd97ec5880e80066787"></p>
<p>现在页面上显示有街拍-视频，街拍-图片，街拍讨论，其余显示的可以按分组显示，每组有标题和一些图片</p>
<p>现在需要抓取的就是分组标题和分组下的图片</p>
<p>先获取每页列表数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">page_num</span>):</span></span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  获取每页列表数据</span></span><br><span class="line"><span class="string">  :return: 列表html数据</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line">  params = &#123;</span><br><span class="line">      <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;dvpf&#x27;</span>: <span class="string">&#x27;pc&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;keyword&#x27;</span>: <span class="string">&#x27;街拍&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;page_num&#x27;</span>: page_num,</span><br><span class="line">      <span class="string">&#x27;pd&#x27;</span>: <span class="string">&#x27;synthesis&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  url = <span class="string">&#x27;https://so.toutiao.com/search?&#x27;</span> + urlencode(params)</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      r = requests.get(url, headers=headers)</span><br><span class="line">      <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">          <span class="keyword">return</span> r.text</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          print(<span class="string">&#x27;request get_page error&#x27;</span>)</span><br><span class="line">  <span class="keyword">except</span> requests.ConnectionError:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>接着从返回的 html 提取列表文章链接，通过正则提取</p>
<p>网站点击查看每条文章的链接是这种的</p>
<p> <a href="https://www.toutiao.com/article/7031340137846030856/?channel=&amp;source=search_tab">https://www.toutiao.com/article/7031340137846030856/?channel=&amp;source=search_tab</a></p>
<p>查看列表返回的 html 并没有找到完整的文章链接，需要自己拼接</p>
<p>正则提取列表 group_id，拼成完整文章链接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">html</span>):</span></span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  通过正则提取一页列表数据</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line">  pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;script type=application/json.*?(&#123;&quot;data&quot;:.*?&#125;&#125;&#125;)&lt;/script&gt;&#x27;</span>, re.S)</span><br><span class="line"></span><br><span class="line">  results = re.findall(pattern, html)</span><br><span class="line">  <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">      listItem = &#123;&#125;</span><br><span class="line">      <span class="built_in">dict</span> = json.loads(result)</span><br><span class="line">      group_id = <span class="built_in">dict</span>.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;group_id&#x27;</span>)</span><br><span class="line">      title = <span class="built_in">dict</span>.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> group_id != <span class="literal">None</span> <span class="keyword">and</span> title != <span class="literal">None</span>:</span><br><span class="line">          listItem[<span class="string">&#x27;title&#x27;</span>] = title</span><br><span class="line">          listItem[<span class="string">&#x27;group_id&#x27;</span>] = group_id</span><br><span class="line">          <span class="keyword">yield</span> listItem <span class="comment">#返回生成器</span></span><br></pre></td></tr></table></figure>

<p>进入文章获取响应页面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_article</span>(<span class="params">group_id</span>):</span></span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  获取文章html</span></span><br><span class="line"><span class="string">  :return: 文章html</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line">  params = &#123;</span><br><span class="line">      <span class="string">&#x27;channel&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;search_tab&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  url = <span class="string">&#x27;https://www.toutiao.com/article/&#x27;</span> + group_id</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      r = requests.get(url=url, params=params, headers=headers)</span><br><span class="line">      <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">          <span class="keyword">return</span> r.text</span><br><span class="line">  <span class="keyword">except</span> requests.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">      print(<span class="string">&#x27;Error:&#x27;</span>, e.args)</span><br></pre></td></tr></table></figure>

<p>解析文章页面，提取需要保存的图片链接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_article</span>(<span class="params">html</span>):</span></span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  提取图片数据</span></span><br><span class="line"><span class="string">  :return: 返回图片列表</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line">  pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;div class=&quot;pgc-img&quot;&gt;.*?src=&quot;(.*?)&quot;.*?alt=&quot;(.*?)&quot;&#x27;</span>, re.S)</span><br><span class="line">  results = re.findall(pattern, html)</span><br><span class="line">  images = []</span><br><span class="line">  <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">      image = &#123;&#125;</span><br><span class="line">      image[<span class="string">&#x27;url&#x27;</span>] = result[<span class="number">0</span>]</span><br><span class="line">      image[<span class="string">&#x27;title&#x27;</span>] = result[<span class="number">1</span>]</span><br><span class="line">      images.append(image)</span><br><span class="line">  <span class="keyword">return</span> images</span><br></pre></td></tr></table></figure>

<p>保存图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_image</span>(<span class="params">image</span>):</span></span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  保存图片</span></span><br><span class="line"><span class="string">  :param image: 图片对象&#123;title:xx,url:xx&#125;</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line">  image_path = <span class="string">&#x27;img&#x27;</span> + os.path.sep + image.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(image_path):</span><br><span class="line">      os.makedirs(image_path) <span class="comment"># 生成目录文件夹</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      resp = requests.get(image.get(<span class="string">&#x27;url&#x27;</span>))</span><br><span class="line">      <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">          file_path = image_path + os.path.sep + <span class="string">&#x27;&#123;file_name&#125;.&#123;file_suffix&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">              file_name=md5(resp.content).hexdigest(), <span class="comment">#使用图片md5值作为图片名</span></span><br><span class="line">              file_suffix=<span class="string">&#x27;jpg&#x27;</span></span><br><span class="line">          )</span><br><span class="line">          <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_path):</span><br><span class="line">              <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                  f.write(resp.content)</span><br><span class="line">              print(<span class="string">&#x27;Downloaded image path is %s&#x27;</span> % file_path)</span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">              print(<span class="string">&#x27;Already Downloaded&#x27;</span>, file_path)</span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">      print(e, <span class="string">&#x27;none123&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>根据 image 的 title 来创建文件夹，然后请求图片链接，获取图片的二进制数据，以二进制形式写入文件，图片的名称可以使用其内容的MD5值，这样可以去除重复</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;msToken=fftEubI251GAmJDZSNTUKj927FcCDPj7RE_XHLi_NMtm-cHnBx-iBxBVo4mygLcZI-dEjePff5pZeXl4c7mLta0KX2SDDPiTEslhfNOw0iNz; ttwid=1|xqpvNtm5D6xFmuFjl3WTtk_jkA4ybMYfqHLzIzKmi2Y|1649864470|16944aed776db4b21fa0d03d6e09c237023b5fc301a3df68c81d5ef03b17c355;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  list_html = get_page(<span class="number">0</span>)  <span class="comment"># 获取列表html</span></span><br><span class="line">  list_items = parse_page(list_html)  <span class="comment"># 获取文章列表</span></span><br><span class="line">  <span class="keyword">for</span> list_item <span class="keyword">in</span> list_items:</span><br><span class="line">      print(list_item)</span><br><span class="line">      article_html = get_article(list_item.get(<span class="string">&#x27;group_id&#x27;</span>))  <span class="comment"># 文章html</span></span><br><span class="line">      images = parse_article(article_html)  <span class="comment"># 提取图片数据</span></span><br><span class="line">      <span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">          save_image(image)</span><br></pre></td></tr></table></figure>



<p>书上还有多线程下载，作者最新代码给去掉了：不用Pool多进程是因为目前还没有办法实现跨进程共享Cookies</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#利用多线程的线程池，调用其 map() 方法实现多线程下载</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> Pool</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">offset</span>):</span></span><br><span class="line">  print(<span class="string">&quot;xx&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  pool = Pool()</span><br><span class="line">  GROUP_START = <span class="number">1</span></span><br><span class="line">  GROUP_END = <span class="number">20</span></span><br><span class="line">  groups = ([x * <span class="number">20</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(GROUP_START, GROUP_END + <span class="number">1</span>)])</span><br><span class="line">  pool.<span class="built_in">map</span>(main,groups)</span><br><span class="line">  pool.close()</span><br><span class="line">  pool.join()</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-验证码识别</title>
    <url>/2022/04/14/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<h4 id="8-验证码识别"><a href="#8-验证码识别" class="headerlink" title="8. 验证码识别"></a>8. 验证码识别</h4><p>识别验证码需要 tesserocr 库</p>
<h5 id="8-1-图形验证码识别"><a href="#8-1-图形验证码识别" class="headerlink" title="8.1 图形验证码识别"></a>8.1 图形验证码识别</h5><p>中国知网的注册页面有图形验证码 <a href="http://my.cnki.net/elibregister/commonRegister.aspx">http://my.cnki.net/elibregister/commonRegister.aspx</a></p>
<p>新标签打开图形验证码 <a href="http://my.cnki.net/elibregister/CheckCode.aspx">http://my.cnki.net/elibregister/CheckCode.aspx</a> 保存到本地命名为 code.jpg</p>
<h6 id="识别测试"><a href="#识别测试" class="headerlink" title="识别测试"></a>识别测试</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tesserocr</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  image = Image.<span class="built_in">open</span>(<span class="string">&#x27;code.jpg&#x27;</span>)</span><br><span class="line">  result = tesserocr.image_to_text(image)</span><br><span class="line">  print(result)</span><br></pre></td></tr></table></figure>

<p>新建 Image 对象，调用 tesserocr 的 image_to_text 方法，传入 Image 对象即可完成识别</p>
<p>还有个简单的方法，直接将图片文件转为字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(tesserocr.file_to_text(<span class="string">&#x27;code.jpg&#x27;</span>))</span><br></pre></td></tr></table></figure>

<img src="Python3网络爬虫开发实战-验证码识别/WeChat05c8c73a3a3040aeed742174d56d4712.png" alt="WeChat05c8c73a3a3040aeed742174d56d4712" style="zoom:60%;" />

<h6 id="验证码处理"><a href="#验证码处理" class="headerlink" title="验证码处理"></a>验证码处理</h6><p>有些验证码上有多余线条干扰图片的识别，这种情况需要做一些额外的处理，如转灰度、二值化等操作</p>
<p>利用 Image 对象的 convert() 方法传入参数 L，即可将图片转化为灰度图像</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&#x27;code.jpg&#x27;</span>)</span><br><span class="line">image = image.convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">image.show()</span><br></pre></td></tr></table></figure>

<img src="Python3网络爬虫开发实战-验证码识别/WeChat502e6f6ba61943c5b6c39e8bc4d5c4f6.png" alt="WeChat502e6f6ba61943c5b6c39e8bc4d5c4f6" style="zoom:50%;" />

<p>传入 1 即可将图片进行二值化处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">image = image.convert(<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure>

<img src="Python3网络爬虫开发实战-验证码识别/WeChata596e46fadb12785691911910ffddb8e.png" alt="WeChata596e46fadb12785691911910ffddb8e" style="zoom:50%;" />

<p>还可以指定二值化的阈值，默认阈值127</p>
<p>不能直接转化原图，要将原图先转化为灰度图像，然后再指定二值化阈值，下面指定100，背景被去掉了部分会变得黑白分明</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&#x27;code.jpg&#x27;</span>)</span><br><span class="line">image = image.convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">table = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">100</span>:</span><br><span class="line">        table.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        table.append(<span class="number">1</span>)</span><br><span class="line">image = image.point(table, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">image.show()</span><br></pre></td></tr></table></figure>

<img src="Python3网络爬虫开发实战-验证码识别/WeChat506046716da1f482080b704db38e3f6f.png" alt="WeChat506046716da1f482080b704db38e3f6f" style="zoom:60%;" />

<p>针对一些有干扰的图片，可以做一些灰度和二值化处理，可以提高图片识别的正确率</p>
<h5 id="8-2-滑动验证码识别"><a href="#8-2-滑动验证码识别" class="headerlink" title="8.2 滑动验证码识别"></a>8.2 滑动验证码识别</h5><p>拖动拼合滑块的验证码</p>
<p>可以和原图对比检测的方式来识别缺口位置</p>
<p>同时获取两张图片，设定一个对比阈值，然后遍历两张图片，找出相同位置像素 RGB 差距超过此阈值的像素点，此像素点的位置就是缺口的位置</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
