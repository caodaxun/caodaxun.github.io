<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+GitHub 搭建博客</title>
    <url>/2020/11/17/Hexo-GitHub-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装node.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>
<p>查看版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<p>npm是node.js的包管理工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>Hexo是一个快速、简洁高效博客框架</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>安装完成后桌面建一个blog文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;Desktop &amp;&amp; mkdir blog &amp;&amp; cd blog</span><br></pre></td></tr></table></figure>
<p>初始化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>安装依赖包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>新建的框架目录如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|--_config.yml      &#x2F;&#x2F;网站的配置信息</span><br><span class="line">|--package.json     &#x2F;&#x2F;项目包信息</span><br><span class="line">|--scaffolds        &#x2F;&#x2F;模板文件，Hexo根据scaffolds中的模板来新建文件</span><br><span class="line">|--source           &#x2F;&#x2F;存放用户资源的地方</span><br><span class="line">|  |--_drafts       &#x2F;&#x2F;存放草稿</span><br><span class="line">|  |--_posts        &#x2F;&#x2F;存放文章</span><br><span class="line">|--themes           &#x2F;&#x2F;主题文件夹</span><br></pre></td></tr></table></figure>
<h4 id="部署到GitHub-Pages"><a href="#部署到GitHub-Pages" class="headerlink" title="部署到GitHub Pages"></a>部署到GitHub Pages</h4><p>安装 hexo-deployer-git工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>修改_config.yml中的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;caodaxun&#x2F;caodaxun.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>
<p>查看 <code>https://caodaxun.github.io</code> 是否部署成功</p>
<h4 id="安装-NexT-主题"><a href="#安装-NexT-主题" class="headerlink" title="安装 NexT 主题"></a>安装 NexT 主题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>
<p>主题更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm update hexo-theme-next</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd themes&#x2F;next &amp;&amp; git pull</span><br></pre></td></tr></table></figure>

<h4 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h4><h5 id="配置添加文章自动打开编辑器"><a href="#配置添加文章自动打开编辑器" class="headerlink" title="配置添加文章自动打开编辑器"></a>配置添加文章自动打开编辑器</h5><p>blog 目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir scripts &amp;&amp; touch open.js</span><br></pre></td></tr></table></figure>

<p>添加代码保存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var exec &#x3D; require(&#39;child_process&#39;).exec;</span><br><span class="line">hexo.on(&#39;new&#39;, function(data)&#123;</span><br><span class="line">    exec(&#39;open -a &quot;&#x2F;Applications&#x2F;Typora.app&quot; &#39; + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>新建文章  <code>hexo new &quot;Test&quot;</code>  会自动打开 Typora 编辑器</p>
<p>写完后生成静态网页部署到 <code>github</code> 上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g -d				#直接生成页面发布</span><br></pre></td></tr></table></figure>

<h5 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h5><p>调试的时候可以边修改，边刷新查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean			#清除缓存</span><br><span class="line">hexo g				#生成静态页面</span><br><span class="line">hexo s --debug  #调试模式 http:&#x2F;&#x2F;localhost:4000&#x2F;进行访问</span><br></pre></td></tr></table></figure>

<p>调试模式有时会出现端口占用情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lsof -i :4000</span><br><span class="line">sudo kill -9 进程PID</span><br></pre></td></tr></table></figure>

<h5 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h5><p>安装插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-marked</span><br></pre></td></tr></table></figure>

<p>修改  <code>config.yml</code>  配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure>

<p>之后就可以使用 <code>![图片](image.jpg)</code> 访问图片了</p>
<h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h4><h5 id="添加菜单"><a href="#添加菜单" class="headerlink" title="添加菜单"></a>添加菜单</h5><p><code>hexo new page</code>添加页面，添加后文件在 <code>source/</code> 目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new about &quot;about&quot;</span><br></pre></td></tr></table></figure>

<p>配置标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2020-11-18 12:42:18</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>配置分类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2020-11-18 12:31:50</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>给文章配置分类和标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 测试下</span><br><span class="line">date: 2020-11-17 15:02:26</span><br><span class="line">tags: </span><br><span class="line">    - 标签1</span><br><span class="line">categories: </span><br><span class="line">    - 分类1</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>修改主题配置<code>themes/next/_ocnfig.yml</code>，|| 后面的是图片名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">    home: &#x2F; || fa fa-home</span><br><span class="line">    archives: &#x2F;archives || fa fa-archive</span><br><span class="line">    categories: &#x2F;categories || fa fa-th</span><br><span class="line">    tags: &#x2F;tags || fa fa-tags</span><br><span class="line">    about: &#x2F;about || fa fa-user</span><br></pre></td></tr></table></figure>

<h5 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p><code>config.yml</code> 新增</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<p>修改主题配置文件 <code>themes/next/_config.yml</code> 修改 <code>local_search</code>的 <code>enable</code> 为<code>true</code></p>
<h5 id="添加背景动画"><a href="#添加背景动画" class="headerlink" title="添加背景动画"></a>添加背景动画</h5><p>进入 <code>Hexo</code> ，带 <code>scaffolds  source  themes  _config.yml  package.json</code>目录</p>
<p>新建 <code>footer.swig</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script color&#x3D;&quot;0,0,255&quot; opacity&#x3D;&quot;0.5&quot; zIndex&#x3D;&quot;-1&quot; count&#x3D;&quot;99&quot; src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;canvas-nest.js@1&#x2F;dist&#x2F;canvas-nest.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><code>themes/next/_config.yml</code> 修改 <code>custom_file_path</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">footer: source&#x2F;_data&#x2F;footer.swig</span><br></pre></td></tr></table></figure>

<p>查看图：</p>
<p><img src="/2020/11/17/Hexo-GitHub-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/%E8%83%8C%E6%99%AF.png" alt="背景"></p>
<h4 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-blog-encrypt --save</span><br></pre></td></tr></table></figure>

<p>或者直接在 <code>package.json</code> 中直接配置依赖，再 <code>npm install</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;hexo-blog-encrypt&quot;: &quot;3.0.13&quot;,</span><br></pre></td></tr></table></figure>

<p><code>config.yml</code>中添加 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Security</span><br><span class="line">encrypt:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure>

<p>将<code>password</code>添加到文章信息头</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">password: xxxxxx</span><br><span class="line">abstract: 输入密码</span><br><span class="line">message: 输入密码</span><br></pre></td></tr></table></figure>

<h4 id="备份博客源文件"><a href="#备份博客源文件" class="headerlink" title="备份博客源文件"></a>备份博客源文件</h4><p>直接放码云了，码云上新建仓库 Hexo</p>
<p>本地新建同名文件 Hexo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd Hexo </span><br><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>本地和远程绑定 &amp;&amp; 拉取远程代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin https:&#x2F;&#x2F;gitee.com&#x2F;xxxx&#x2F;hexo.git</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>

<p>新建或修改 <code>.gitignore</code> 文件，加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*.log</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br></pre></td></tr></table></figure>

<p>把 Blog 里面的代码拖到 Hexo 文件，提交到码云</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;提交备份&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>远程代码有更新时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>

<p>还是直接用 SourceTree 工具吧，Git命令一段时间不用就会忘</p>
<p><a href="https://hexo.io/zh-cn/docs/">Hexo</a></p>
<p><a href="https://github.com/theme-next/hexo-theme-next">theme-next</a></p>
]]></content>
  </entry>
  <entry>
    <title>OC对象底层原理</title>
    <url>/2020/11/19/OC%E5%AF%B9%E8%B1%A1%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p><code>NSObject</code> 对象的底层就是一个包含了一个指针的结构体，那么它的大小是不是就是8字节（64位下指针类型占8个字节）？</p>
</blockquote>
<h4 id="class-getInstanceSize"><a href="#class-getInstanceSize" class="headerlink" title="class_getInstanceSize"></a>class_getInstanceSize</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &lt;objc&#x2F;runtime.h&gt;</span><br></pre></td></tr></table></figure>

<p><code>class_getInstanceSize ()</code>可以计算一个类的实例对象实际所需要的空间大小，也就是计算类所对应的结构体的大小</p>
<p>系统在为类的结构体分配内存时内存对齐，以一个指针的长度作为对齐系数，64位系统指针长度为8个字节，类所对应的结构体，头部肯定是一个 <code>isa</code> 指针</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">size_t size &#x3D; class_getInstanceSize([NSObject class]);</span><br><span class="line">NSLog(@&quot;NSObject对象大小：%zd&quot;, size); &#x2F;&#x2F;8</span><br></pre></td></tr></table></figure>

<h4 id="malloc-size"><a href="#malloc-size" class="headerlink" title="malloc_size()"></a>malloc_size()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &lt;malloc&#x2F;malloc.h&gt;</span><br></pre></td></tr></table></figure>

<p><code>malloc_size()</code>，函数的参数是一个指针，可以计算指针所指向内存空间的大小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NSObject *obj &#x3D; [[NSObject alloc] init];</span><br><span class="line">size_t size2 &#x3D; malloc_size((__bridge const void *)(obj));</span><br><span class="line">NSLog(@&quot;对象obj所指向的的内存空间大小：%zd&quot;,size2); &#x2F;&#x2F;16</span><br></pre></td></tr></table></figure>

<p>系统为实例对象分配的内存空间，最小为16个字节</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">instanceSize</span><span class="params">(<span class="keyword">size_t</span> extraBytes)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实例对象内部成员变量所占空间大小 extraBytes通常为0</span></span><br><span class="line">    <span class="keyword">size_t</span> size = alignedInstanceSize() + extraBytes;</span><br><span class="line">    <span class="comment">// CF requires all objects be at least 16 bytes.</span></span><br><span class="line">    <span class="keyword">if</span> (size &lt; <span class="number">16</span>) size = <span class="number">16</span>; <span class="comment">//系统为该实例对象分配的内存空间大小</span></span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p><code>class_getInstanceSize</code> 获取一个objc类的实例的实际大小，这个大小可以理解为创建这个实例对象至少需要多少空间</p>
<p><code>malloc_size</code> 得到一个指针所指向的内存空间的大小，利用这个可以得到对象所占用的内存大小</p>
<p><code>sizeof()</code> 获取一个类型或者变量所占用的存储空间，这是一个运算符<br><code>[NSObject alloc]</code> 之后，系统为其分配了16个字节的内存，最终 <code>obj</code> 对象实际使用了其中8个字节内存（也就是其内部的那个 <code>isa</code> 指针所用的8个字节，64位系统下）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface Student : NSObject</span><br><span class="line">&#123;</span><br><span class="line">   @public</span><br><span class="line">    int _age;   &#x2F;&#x2F;4个字节</span><br><span class="line">    int _no;    &#x2F;&#x2F;4个字节</span><br><span class="line">    int _grade; &#x2F;&#x2F;4个字节</span><br><span class="line">&#125; </span><br><span class="line">Student *std &#x3D; [[Student alloc] init];</span><br><span class="line">size_t size &#x3D; class_getInstanceSize([Student class]); &#x2F;&#x2F;24</span><br><span class="line">size_t size &#x3D; malloc_size((__bridge const void *)(std)); &#x2F;&#x2F;32</span><br></pre></td></tr></table></figure>

<p><code>Student</code> 结构体所有成员变量所需要的总空间为20个字节，根据内存对齐的原则，最后结构体所需要的空间应该是8的倍数，也就是24个字节；实际系统分配内存大小是16的倍数32个字节</p>
<h4 id="LLDB查看内存"><a href="#LLDB查看内存" class="headerlink" title="LLDB查看内存"></a>LLDB查看内存</h4><p><img src="/2020/11/19/OC%E5%AF%B9%E8%B1%A1%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/alloc.png" alt="alloc"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x283d32220-0x283d32220-0x283d32220</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(lldb) po p</span><br><span class="line">&lt;LGPerson: <span class="number">0x283d32220</span>&gt;</span><br><span class="line">(lldb) x p</span><br><span class="line"><span class="number">0x283d32220</span>: <span class="number">69</span> <span class="number">17</span> <span class="number">77</span> <span class="number">02</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">03</span> <span class="number">0</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">64</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  i.w.........d...</span><br><span class="line"><span class="number">0x283d32230</span>: <span class="number">80</span> <span class="number">00</span> <span class="number">77</span> <span class="number">02</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  ..w.............</span><br><span class="line">(lldb) po <span class="number">0x12</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line">(lldb) po <span class="number">0x64</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line">(lldb) po <span class="number">0x0102770080</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>前8位<code>69 17 77 02 01 00 00 03</code> 是<code>isa</code>的内存8个字节</p>
<p><code>0a 00 00 00</code> 是 <code>age</code> 占4个字节</p>
<p><code>64 00 00 00</code> 是 <code>height</code> 占4个字节</p>
<p><code>80 00 77 02 01 00 00 00 00</code> 是 <code>name</code> 占8个字节</p>
<p><a href="https://blog.csdn.net/u013480070/article/details/88365141">OC对象的本质（上）：OC对象的底层实现原理</a><br><a href="https://opensource.apple.com/tarballs/objc4/">objc4-781</a><br><a href="https://juejin.im/post/5d9c829df265da5ba46f49c9#heading-8">objc4-756.2源码编译</a><br><a href="https://www.jianshu.com/p/d4f4769eaa1a">macOS 10.15最新objc源码编译调试</a></p>
]]></content>
  </entry>
  <entry>
    <title>Runtime底层原理</title>
    <url>/2020/12/01/Runtime%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h4 id="通过SEL找到IMP"><a href="#通过SEL找到IMP" class="headerlink" title="通过SEL找到IMP"></a>通过SEL找到IMP</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL class_respondsToSelector(Class cls, SEL sel)</span><br><span class="line">&#123;</span><br><span class="line">    return class_respondsToSelector_inst(cls, sel, nil);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><a href="https://opensource.apple.com/tarballs/objc4/">苹果源码下载地址</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/11/14/hello-world/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="48e31149c438b31829246723271e19d6d0977e5f2df026e3e65f815a03a2237e">ccbf2489ed1a233f216cac1e5dda3d49363c641c556918697fb036546f666b01c7abc45d1943ee9d3408364bd5f46f8570100184557ff9fee405fe56e18b4fd58e086651cbf73064170efc9aedd861898b24a00cfcc3fee3b474b0b571c30f593250c8f7c8c24e627500f5e8c161baa4c36a516fbada282e10e2387441140a89de99961057f1486af8d17c1f891e290c2c1c5834a44d398955fca41b52fb113d52fce8c82f3f05d861bc4bac05e6bedc4f572f4aef60c81250f6758ca5c6611de62bf8a78acd96a3d3f49673040ff9a410ba932192472a21992fc57c329690bc2c930b6950232c8079bcc8ddac7252699cfb36533216ae373b44d02cb7dbb4a1bbdf2a5e938afd1e3e78bf0916f51f3b449809c5267d2fe5850bd5d31e97afbf96342e61c7f87ee5a43ab33c86fe76453bc1072ce91df88fe7bca55722dc893aaf79418c66ff77d76ac7d6699810b133b7758a0be14aef449fd343ef1376fec2a73cd20c02d407df46c6ab7fd86511af99f4916779688c557125b40cbc82d9a249aa9b9e285ae0fb9e258cabb6cce3597958eeb95ab18ec0b3c07943c054b7b28bc0f4f77ba12cb76eee3df04b6b4ff322bd34c093a1c4ab7d9db74fc47592f389f280fefcce7fd4e0fce2945368e91bbeb02eb882822c402116acb46283ed0d86be720cb21722ff1f1cb64b8756d3214951ec4c7e97d97d203d97dbef79d7fda19260dd8e107b7339d846d15442a16ed2459d3ee85104594bf30ef9aec082bc407db0dabf770cb13f65cbdba76e70922c7bef6362c59fc80949ce7d9362744c5ef31b35189aef8be5acdca2c5630d0b36c5804884fc0f5827390f969081366873895550e5ef0e82b9eb65951d778000a330e3194c8f9f8760736124680b64ae82376e8245dc6a52c348f70707047ec801acee613dc826321cf7be399c6c2efe2f3fd80523450630915846b4b1f409c6629c786e98d35f0fc7e1a816a62ee722c313c88d72c14770f86767afd07db1628b298924f7d1e6fb6a03372460f87fce293ab1b6e0c50abce375e6d257dc17edc2a955339e6d4fda9309e309b1f2b9e9d35744b8003e3945d5d1467a4b6bf791e7218e4bba0ce339c6ebfc4016ae63e6674c7be5dc978290a08f4f716affb3615ca0e7120135937acc9a0b5e398ce3bbf3db2b275da049032ea9e66e3b782e646fdbdb15914c5832bd0a25a6d0158a32e028fc89aa33fb2fc29d6f8cfb3a98eff80dbcdac046c93720fe854e9273d01aa0c4ae930aa312a87b272dc0351862bdbfc193657968cea438ace70d5ebb7ab440132f23c9807c6578b6139577b6089bf5b4a7c8cdc25fdbee69dfa8ecaeae3a7a28773f198292b0ea59234da65d8a450898ca3d913d2963c1cf324a597995654a144129bb631716b4b6d5b6d8af08ccf3ee99a36d6a0d00d2dfe87511b5e02ba24d990270cf8819a771ed282e1e762932d29fed355bb5900992107c58998647ce327deca6f8edc198581d008eef7bcc94e4422e5162140b60d115ce3c7ee1da3a8a2769d893f4f863c11bbb4c569591d9f1e86ac8ca7fba4a32182c227ad1f6861891b0d89fa4fb3630e25b844fe195228b85308437f5837a88715f2cb9061d4b8000559c6cd3e78f26b8a165765edc61e9eced4d00290061df3e6cdf03e381feafa39a22b783b5f1a5014eed3d2eb4f70fc18be3336ee03f928d26ea73ad8db238230805141c010104611b1bd269170cae8b6d493bbb2288ca13eeabd3100001e5d6e58c66704754be022a30f20ad2a09153260f2508c8f045e52b3a8520d86cf8d0eaf119c65c86c19e05117bd7c8c2b01a8fe78afb98efb0fd2f5ac5f0eeff18deb100a7645ab8f847d1d96de3bcea8223f0d3881da12b14ea767d6b15ad3d1f33eb8bf7c3dffb0f430b05470c25ea80b0933240dfe7bbfbd3767ceacec4430b8b51d7fe5c5afb271f4dd9c68c35dab8d49b6961c6255924f086a97d759c62a41111625b6c2ae4331fea540e7c5c95ba470756f6989f333a022cdcd55dbd1f05fc27cff68bc5aed07e3a2f37fd360a452ddf3555b1d2c86a8f8c6d06ed0c880b442a8aade2daf8b853f1a7447abfad5194047ac1436768deaf8b5f1265cf0bf5827fe5fdc314b6768bfcc490c7847a1de34fd40603b110af9c537d5de2d9bdfd12ed8f874e96a3d23749f72a795ffcfdcb3bf0469b756e4a1f3743014ccff1530ea0e7904e54ac5774b30fdaa4d582307ab5db6baf258a4ef88d5cf8e294a1e261967f3a27604463e1f3612a35ebd64104d0fa22f156db0b1995d7333fe3190f9c0ffb110aabec61f094c42124de30bfa166d8be884a7171ec575847b6666abe260e2bab7686ac226fc4ac854d179ddf1f48170785db3ef2fa21a17e8a9db4eaa21888fac829f404a16b097bd856e6bf1873bd7c73b75dfc413449f4c0f5639eaa8fe917ab368adf6c856f915c73065650719b2ec5fb9554b37b99057f6a9526f2b59978c1b56d3973053c71d19305c6ca2d8d730502ffc827d96b0f1c223816bdbb0018a2f4f9e5dba04a37f46f19f8a5dec321967b545d7399d0b6918c7d0fa1bf31b0e39b99c32e5533bd1e2499dae2ae1b2d959c3938fdcc3e39b4546fcc002366877219e177edfd62f7e36e35294885c03bf00b1cb0747c738c590a06c722854d814ab789a4a43662901dac610b95d092f2ce434158fb263384edbf59a3e9d2cec30ee92ab9492bab918b91af9f17ca807f71d4c5be3bcf364108e4d627cfa7ebc57651920ecc15922ef17ac102540b079fe215fd5163653f5b7b6ea6ed73f60bf967106bbc92b3c45e62e5ad90ede233f1f7587e39f508b7fb753c2f4bf27848107f2d0ca317e340e0f6c607fb8dbb9ce76aa8a4238fed6070fe07fc019d3eaa2c467e5d9c283e4ab975bf55cc61447621e30fa9b1476c028e5e68c25abdeadd97e791862cb281862cdd08488563233f8d9f0cbb47288714475f334669a8f84793164754abb59541e7d3b2595354c9f7283c4e56169190a61faeb83f93c149e8c83fd3c58cbfdaab6e304139ff97c5604fa4d714abf41c48d02b4600a4975bd758f60d689f319fdb9b5bb067800250c9b0185cc260993e3e711981</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Encrypt</category>
      </categories>
      <tags>
        <tag>Encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>objc-781编译</title>
    <url>/2020/12/04/objc-781%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">macOS 10.15.7</span><br><span class="line"></span><br><span class="line">Xcode 11.3.1</span><br><span class="line"></span><br><span class="line">objc4-781</span><br></pre></td></tr></table></figure>



<h4 id="Runtime源码下载"><a href="#Runtime源码下载" class="headerlink" title="Runtime源码下载"></a>Runtime源码下载</h4><p><a href="https://opensource.apple.com/">Apple Open Source</a> 选择最新 <code>macOS</code> 系统 <code>10.15.6</code> ，搜索 <code>objc</code> 看到最新 <code>objc4</code>文件为 <code>objc4-787.1</code>，右边可以直接下载压缩包</p>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/AppleOpenSource.jpg" alt="AppleOpenSource"></p>
<p>可以下载历史版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;opensource.apple.com&#x2F;tarballs&#x2F;objc4&#x2F;</span><br></pre></td></tr></table></figure>



<h4 id="下载依赖文件"><a href="#下载依赖文件" class="headerlink" title="下载依赖文件"></a>下载依赖文件</h4><p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/%E4%BE%9D%E8%B5%96%E6%96%87%E4%BB%B6.png" alt="依赖文件"></p>
<h4 id="Runtime源码编译"><a href="#Runtime源码编译" class="headerlink" title="Runtime源码编译"></a>Runtime源码编译</h4><p>【1】<code>unable to find sdk macosx.internal</code></p>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/macosx.jpg" alt="macosx"></p>
<p>修改 <code>Base SDK</code> 选择 <code>macOS</code></p>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/baseSDK.png" alt="baseSDK"></p>
<p>【2】<code>file not foud</code></p>
<p>【2.1】<code>sys/reason.h file not found objc-os.h</code></p>
<p>根目录创建 <code>Common</code> 文件夹，创建 <code>sys</code> 文件 ，加入文件 <code>xnu-6153141.1/bsd/sys/reason.h</code></p>
<p>设置文件检索路径，<code>Header Search Path</code> 添加 <code>$(SRCROOT)/Common</code></p>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/searchPath.png" alt="searchPath"></p>
<p>【2.2】其它 <code>file not found</code></p>
<ul>
<li>mach-o/dyld_priv.h file not found`</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dyld-750.6&#x2F;include&#x2F;mach-o&#x2F;dyld_priv.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>os/lock_private.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libplatform-220.100.1&#x2F;private&#x2F;os&#x2F;lock_private.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>os/base_private.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libplatform-220.100.1&#x2F;private&#x2F;os&#x2F;base_private.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>pthread/tsd_private.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libpthread-416.100.3&#x2F;private&#x2F;tsd_private.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>System/machine/cpu_capabilities.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xnu-6153.141.1&#x2F;osfmk&#x2F;machine&#x2F;cpu_capabilities.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>os/tsd.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xnu-6153.141.1&#x2F;libsyscall&#x2F;os&#x2F;tsd.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>pthread/spinlock_private.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libpthread-416.100.3&#x2F;private&#x2F;spinlock_private.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>System/pthread_machdep.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Libc-583&#x2F;pthreads&#x2F;pthread_machdep.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>CrashReporterClient.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Libc-997.90.3&#x2F;include&#x2F;CrashReporterClient.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>objc-shared-cache.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dyld-750.6&#x2F;include&#x2F;objc-shared-cache.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>_simple.h file not found</code> </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libplatform-220.100.1&#x2F;private&#x2F;_simple.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>kern/restartable.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xnu-6153.141.1&#x2F;osfmk&#x2F;kern&#x2F;restartable.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Block_private.h file not found</code> </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libclosure-74&#x2F;Block_private.h</span><br></pre></td></tr></table></figure>



<p>【3】<code>pthread_machdep.h</code> 3处报错</p>
<p>将 193 行</p>
<p> <code>typedef int pthread_lock_t;</code></p>
<p>到 244 行</p>
<p><code>#define _pthread_setspecific_direct(key, val) pthread_setspecific(key, val)</code> 注释</p>
<p>替换为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#if TARGET_IPHONE_SIMULATOR || defined(__ppc__) || defined(__ppc64__) || \</span><br><span class="line">    (defined(__arm__) &amp;&amp; !defined(_ARM_ARCH_7) &amp;&amp; defined(_ARM_ARCH_6) &amp;&amp; defined(__thumb__))</span><br><span class="line">#define _pthread_getspecific_direct(key) pthread_getspecific((key))</span><br><span class="line">#define _pthread_setspecific_direct(key, val) pthread_setspecific((key), (val))</span><br><span class="line">#else</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>





<p>【4】<code>dyld_priv.h</code> 报错 <code>Expected&#39;,&#39;</code></p>
<p> 删掉 <code>, bridgeos(3.0)</code></p>
<p>【5】<code>lock_private.h</code> 报错 <code>Expected&#39;,&#39;</code></p>
<p>删掉 <code>, bridgeos(4.0)</code></p>
<p>【6】<code>Use of undeclared identifier &#39;DYLD_MACOSX_VERSION_10_11&#39;</code></p>
<p><code>dyld_priv.h</code> 顶部加入宏</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define DYLD_MACOSX_VERSION_10_11 0x000A0B00</span><br><span class="line">#define DYLD_MACOSX_VERSION_10_12 0x000A0C00</span><br><span class="line">#define DYLD_MACOSX_VERSION_10_13 0x000A0D00</span><br><span class="line">#define DYLD_MACOSX_VERSION_10_14 0x000A0E00</span><br></pre></td></tr></table></figure>



<p>【7】<code>Use of undeclared identifier &#39;CRGetCrashLogMessage&#39;</code></p>
<p><code>target -&gt; Build Setting -&gt; Preprocessor Macros</code></p>
<p> 添加 <code>LIBC_NO_LIBCRASHREPORTERCLIENT</code></p>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/macros.png" alt="macros"></p>
<p>【8】<code>Mismatch in debug-ness macros</code></p>
<p>注释 <code>#error mismatch in debug-ness macros</code></p>
<p>【9】</p>
<p><code>can&#39;t open order file: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.0.sdk/AppleInternal/OrderFiles/libobjc.order</code></p>
<p><code>target -&gt; Build Settings</code> 搜索 <code>Order File</code> 添加 <code>$(SRCROOT)/libobjc.order</code></p>
<p>【10】<code>library not found for -lCrashReporterClient</code></p>
<p><code>target -&gt; Build Settings -&gt; Other Linker Flags</code> 删掉  <code>CrashReporterClient</code></p>
<p>【11】<code>SDK &quot;macosx.internal&quot; cannot be located</code></p>
<p><code>target -&gt; objc -&gt; Build Phase -&gt; Run Script(markgc)</code> 将脚本的 <code>macosx.internal</code> 修改为 <code>macosx</code></p>
<p>Build Success</p>
<h4 id="编译调试"><a href="#编译调试" class="headerlink" title="编译调试"></a>编译调试</h4><p>新建 <code>Target</code> 来进行调试</p>
<ul>
<li><code>File -&gt; New -&gt; Target</code> <code>Test</code></li>
</ul>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/target.png" alt="target"></p>
<ul>
<li>绑定二进制依赖关系</li>
</ul>
<p><code>TARGETS -&gt; Test -&gt; Build Phases</code></p>
<p> <img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/depend.png" alt="target"></p>
<p>还需要设置 <code>target -&gt; objc -&gt; Build Settings -&gt; Enable Hardened Runtime -&gt; NO</code></p>
<p>注意 <code>Compile Sources</code> 中 <code>main.m</code> 位置在前面</p>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/compile.png" alt="compile"></p>
<p><a href="https://opensource.apple.com/release/mac-os-x-1062.html">Libc-583</a></p>
<p><a href="https://opensource.apple.com/release/os-x-1095.html"> Libc-997.90.3</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">dyld-750.6</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">libauto-187</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">libclosure-74</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">libdispatch-1173.100.2</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">xnu-6153.141.1</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">libpthread-416.100.3</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">libplatform-220.100.1</a></p>
<p><a href="https://opensource.apple.com/release/os-x-1095.html">launchd-842.92.1</a></p>
<p><a href="https://www.jianshu.com/p/28150fa0c085">objc4-750编译</a></p>
<p><a href="https://gitee.com/other_other/objc-781.git">objc4-781可编译代码</a></p>
]]></content>
  </entry>
  <entry>
    <title>_objc_init</title>
    <url>/2020/12/25/objc-init/</url>
    <content><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>什么时候调用 <code>load</code></p>
<p>子类和父类及分类 <code>load</code> 方法调用顺序</p>
<p>子类和父类及分类 <code>initialize</code> 方法调用顺序</p>
<p><code>load</code> 方法调用是在应用程序 <code>main</code> 函数之前，应用启动时 <code>dyld</code> 处理完 <code>image</code> 镜像文件，通过回调传给 <code>runtime</code> ，交由 <code>runtime</code> 在 <code>load_images</code> 方法中调用</p>
<p>从系统库 <code>libSystem</code> 的 <code>runtime</code> 的入口函数 <code>_objc_init</code> 开始</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _objc_init(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> initialized = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (initialized) <span class="keyword">return</span>;</span><br><span class="line">    initialized = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// fixme defer initialization until an objc-using image is found?</span></span><br><span class="line">    <span class="comment">//读取影响运行时的环境变量</span></span><br><span class="line">    environ_init();</span><br><span class="line">    tls_init();</span><br><span class="line">    <span class="comment">//运行C C++静态构造函数</span></span><br><span class="line">    static_init();</span><br><span class="line">    runtime_init();</span><br><span class="line">    <span class="comment">//初始化libobjc的异常处理系统</span></span><br><span class="line">    exception_init();</span><br><span class="line">    cache_init();</span><br><span class="line">    _imp_implementationWithBlock_init();</span><br><span class="line">		<span class="comment">//注册回调函数</span></span><br><span class="line">    _dyld_objc_notify_register(&amp;map_images, load_images, unmap_image);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __OBJC2__</span></span><br><span class="line">    didCallDyldNotifyRegister = <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="map-images"><a href="#map-images" class="headerlink" title="map_images"></a>map_images</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">map_images(<span class="keyword">unsigned</span> count, <span class="keyword">const</span> <span class="keyword">char</span> * <span class="keyword">const</span> paths[],</span><br><span class="line">           <span class="keyword">const</span> struct mach_header * <span class="keyword">const</span> mhdrs[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">mutex_locker_t</span> <span class="title">lock</span><span class="params">(runtimeLock)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> map_images_nolock(count, paths, mhdrs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>map_images_nolock</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> </span><br><span class="line">map_images_nolock(<span class="keyword">unsigned</span> mhCount, <span class="keyword">const</span> <span class="keyword">char</span> * <span class="keyword">const</span> mhPaths[],</span><br><span class="line">                  <span class="keyword">const</span> struct mach_header * <span class="keyword">const</span> mhdrs[])</span><br><span class="line">&#123;</span><br><span class="line">		... <span class="comment">//省略代码</span></span><br><span class="line">		<span class="keyword">if</span> (hCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      	<span class="comment">//读取镜像文件</span></span><br><span class="line">        _read_images(hList, hCount, totalClasses, unoptimizedTotalClasses);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="read-images"><a href="#read-images" class="headerlink" title="_read_images"></a>_read_images</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _read_images(header_info **hList, <span class="keyword">uint32_t</span> hCount, <span class="keyword">int</span> totalClasses, <span class="keyword">int</span> unoptimizedTotalClasses)</span><br><span class="line">&#123;</span><br><span class="line">		...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>_read_images</code> 内部做了几件事情</p>
<p>【1】重新初始化 <code>TaggedPointer</code> 环境，创建 <code>gdb_objc_realized_classes</code> 表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (!doneOnce) &#123;</span><br><span class="line">    doneOnce &#x3D; YES;</span><br><span class="line">    launchTime &#x3D; YES;</span><br><span class="line">    if (DisableTaggedPointers) &#123;</span><br><span class="line">        disableTaggedPointers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    initializeTaggedPointerObfuscator();</span><br><span class="line"></span><br><span class="line">    if (PrintConnecting) &#123;</span><br><span class="line">        _objc_inform(&quot;CLASS: found %d classes during launch&quot;, totalClasses);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; namedClasses</span><br><span class="line">    &#x2F;&#x2F; Preoptimized classes don&#39;t go in this table.</span><br><span class="line">    &#x2F;&#x2F; 4&#x2F;3 is NXMapTable&#39;s load factor</span><br><span class="line">    int namedClassesSize &#x3D; </span><br><span class="line">        (isPreoptimized() ? unoptimizedTotalClasses : totalClasses) * 4 &#x2F; 3;</span><br><span class="line">    gdb_objc_realized_classes &#x3D;</span><br><span class="line">        NXCreateMapTable(NXStrValueMapPrototype, namedClassesSize);</span><br><span class="line"></span><br><span class="line">    ts.log(&quot;IMAGE TIMES: first time tasks&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h4 id="loadImages"><a href="#loadImages" class="headerlink" title="loadImages"></a>loadImages</h4><p>【1】进入 <code>load_images</code> 方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">load_images(<span class="keyword">const</span> <span class="keyword">char</span> *path __unused, <span class="keyword">const</span> struct mach_header *mh)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!didInitialAttachCategories &amp;&amp; didCallDyldNotifyRegister) &#123;</span><br><span class="line">        didInitialAttachCategories = <span class="literal">true</span>;</span><br><span class="line">        loadAllCategories();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return without taking locks if there are no +load methods here.</span></span><br><span class="line">    <span class="keyword">if</span> (!hasLoadMethods((<span class="keyword">const</span> headerType *)mh)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">recursive_mutex_locker_t</span> <span class="title">lock</span><span class="params">(loadMethodLock)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Discover load methods</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">mutex_locker_t</span> <span class="title">lock2</span><span class="params">(runtimeLock)</span></span>;</span><br><span class="line">        prepare_load_methods((<span class="keyword">const</span> headerType *)mh);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Call +load methods (without runtimeLock - re-entrant)</span></span><br><span class="line">    call_load_methods();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>prepare</code> 加载完所有 <code>load</code>   -&gt;  <code>call_load_methods()</code> 调用 <code>load</code> 方法</p>
<h5 id="prepare-load-methods"><a href="#prepare-load-methods" class="headerlink" title="prepare_load_methods"></a><code>prepare_load_methods</code></h5><p>【2】<code>prepare_load_methods</code> 实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare_load_methods</span><span class="params">(<span class="keyword">const</span> headerType *mhdr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> count, i;</span><br><span class="line"></span><br><span class="line">    runtimeLock.assertLocked();</span><br><span class="line">		<span class="comment">//拿到当前类的列表</span></span><br><span class="line">    <span class="keyword">classref_t</span> <span class="keyword">const</span> *classlist = </span><br><span class="line">        _getObjc2NonlazyClassList(mhdr, &amp;count);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        schedule_class_load(remapClass(classlist[i]));</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">//拿到分类列表</span></span><br><span class="line">    <span class="keyword">category_t</span> * <span class="keyword">const</span> *categorylist = _getObjc2NonlazyCategoryList(mhdr, &amp;count);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">category_t</span> *cat = categorylist[i];</span><br><span class="line">        Class cls = remapClass(cat-&gt;cls);</span><br><span class="line">        <span class="keyword">if</span> (!cls) <span class="keyword">continue</span>;  <span class="comment">// category for ignored weak-linked class</span></span><br><span class="line">        <span class="keyword">if</span> (cls-&gt;isSwiftStable()) &#123;</span><br><span class="line">            _objc_fatal(<span class="string">&quot;Swift class extensions and categories on Swift &quot;</span></span><br><span class="line">                        <span class="string">&quot;classes are not allowed to have +load methods&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        realizeClassWithoutSwift(cls, nil);</span><br><span class="line">        ASSERT(cls-&gt;ISA()-&gt;isRealized());</span><br><span class="line">        add_category_to_loadable_list(cat);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【2.1】进入 <code>schedule_class_load</code> 方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">schedule_class_load</span><span class="params">(Class cls)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cls) <span class="keyword">return</span>;</span><br><span class="line">    ASSERT(cls-&gt;isRealized());  <span class="comment">// _read_images should realize</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cls-&gt;data()-&gt;flags &amp; RW_LOADED) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ensure superclass-first ordering 递归加载 类 父类</span></span><br><span class="line">    schedule_class_load(cls-&gt;superclass);</span><br><span class="line"></span><br><span class="line">    add_class_to_loadable_list(cls);</span><br><span class="line">    cls-&gt;setInfo(RW_LOADED); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>递归加载类、父类，加载完毕后添加到 <code>loadable_list</code> 表，</p>
<p>继续查看 <code>add_class_to_loadable_list</code> 方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_class_to_loadable_list</span><span class="params">(Class cls)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IMP method;</span><br><span class="line"></span><br><span class="line">    loadMethodLock.assertLocked();</span><br><span class="line"></span><br><span class="line">    method = cls-&gt;getLoadMethod();</span><br><span class="line">    <span class="keyword">if</span> (!method) <span class="keyword">return</span>;  <span class="comment">// Don&#x27;t bother if cls has no +load method</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (PrintLoading) &#123;</span><br><span class="line">        _objc_inform(<span class="string">&quot;LOAD: class &#x27;%s&#x27; scheduled for +load&quot;</span>, </span><br><span class="line">                     cls-&gt;nameForLogging());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (loadable_classes_used == loadable_classes_allocated) &#123;</span><br><span class="line">        loadable_classes_allocated = loadable_classes_allocated*<span class="number">2</span> + <span class="number">16</span>;</span><br><span class="line">        loadable_classes = (struct loadable_class *)</span><br><span class="line">            <span class="built_in">realloc</span>(loadable_classes,</span><br><span class="line">                              loadable_classes_allocated *</span><br><span class="line">                              <span class="keyword">sizeof</span>(struct loadable_class));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    loadable_classes[loadable_classes_used].cls = cls;</span><br><span class="line">    loadable_classes[loadable_classes_used].method = method;</span><br><span class="line">    loadable_classes_used++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">loadable_class</span> &#123;</span></span><br><span class="line">    Class cls;  <span class="comment">// may be nil</span></span><br><span class="line">    IMP method;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>loadable_list</code> 表中存储的结构体 <code>loadable_class</code> ，包含当前类 <code>cls</code> ，和该类的 <code>load</code> 方法 <code>IMP</code></p>
<p><code>method = cls-&gt;getLoadMethod();</code> 就是获取到该类的 <code>load</code> 方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">IMP </span><br><span class="line">objc_class::getLoadMethod()</span><br><span class="line">&#123;</span><br><span class="line">    runtimeLock.assertLocked();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">method_list_t</span> *mlist;</span><br><span class="line"></span><br><span class="line">    ASSERT(isRealized());</span><br><span class="line">    ASSERT(ISA()-&gt;isRealized());</span><br><span class="line">    ASSERT(!isMetaClass());</span><br><span class="line">    ASSERT(ISA()-&gt;isMetaClass());</span><br><span class="line"></span><br><span class="line">    mlist = ISA()-&gt;data()-&gt;ro()-&gt;baseMethods();</span><br><span class="line">    <span class="keyword">if</span> (mlist) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; meth : *mlist) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *name = sel_cname(meth.name);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(name, <span class="string">&quot;load&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> meth.imp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以 <code>schedule_class_load</code> 就是先获取父类，再递归调用 <code>schedule_class_load</code> 方法，把父类的父类 -&gt; 父类 -&gt; 子类，这些类和的 <code>load</code> 方法加入到 <code>loadable_classes</code> 表中</p>
<p>所以类的 <code>+(load)</code> 方法执行顺序：是从父类到子类</p>
<p>回到【2】在执行 <code>schedule_class_load</code> 添加完类后，继续处理分类，分类调用 <code>_category_getLoadMethod</code> 方法获取到分类中重写的 <code>load</code> 方法，调用 <code>add_category_to_loadable_list</code> 方法，把分类和分类的 <code>load</code> 方法添加到 <code>loadable_categories</code> 表中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">loadable_category</span> &#123;</span></span><br><span class="line">    Category cat;  <span class="comment">// may be nil</span></span><br><span class="line">    IMP method;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>总结 <code>prepare_load_methods</code>：</p>
<p>1、处理类：递归先父类再子类，获取类和类的<code>load</code> 方法，合成结构体 <code>loadable_class</code> ，添加到 <code>loadable_classes</code> 表中</p>
<p>2、处理分类：获取分类<code>load</code> 方法，合成结构体 <code>loadable_category</code> ，添加到 <code>loadable_categories</code> 表中</p>
<h5 id="call-load-methods"><a href="#call-load-methods" class="headerlink" title="call_load_methods"></a>call_load_methods</h5><p>【3】进入 <code>call_load_methods</code> 方法，<code>load</code> 方法的调用部分</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_load_methods</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> loading = NO;</span><br><span class="line">    <span class="keyword">bool</span> more_categories;</span><br><span class="line"></span><br><span class="line">    loadMethodLock.assertLocked();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Re-entrant calls do nothing; the outermost call will finish the job.</span></span><br><span class="line">    <span class="keyword">if</span> (loading) <span class="keyword">return</span>;</span><br><span class="line">    loading = YES;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> *pool = objc_autoreleasePoolPush();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 1. Repeatedly call class +loads until there aren&#x27;t any more</span></span><br><span class="line">        <span class="keyword">while</span> (loadable_classes_used &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            call_class_loads();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. Call category +loads ONCE</span></span><br><span class="line">        more_categories = call_category_loads();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. Run more +loads if there are classes OR more untried categories</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (loadable_classes_used &gt; <span class="number">0</span>  ||  more_categories);</span><br><span class="line"></span><br><span class="line">    objc_autoreleasePoolPop(pool);</span><br><span class="line"></span><br><span class="line">    loading = NO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到有个 <code>do-while</code> 循环，<code>do-while</code> 循环里面会产生很多临时变量和函数，放到自动释放池里面，节省内存</p>
<p><code>do-while</code> 循环体部分可以看到 <code>load</code> 方法的调用是先调用主类，再调用分类的；下面<code>call_class_loads</code> 方法内</p>
<p>部从 <code>loadable_classes</code> 获取到类调用 <code>load</code> 方法也是先父类再子类</p>
<p>【3.1】查看 <code>call_class_loads</code> 方法实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">call_class_loads</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Detach current loadable list.</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">loadable_class</span> *<span class="title">classes</span> =</span> loadable_classes;</span><br><span class="line">    <span class="keyword">int</span> used = loadable_classes_used;</span><br><span class="line">    loadable_classes = nil;</span><br><span class="line">    loadable_classes_allocated = <span class="number">0</span>;</span><br><span class="line">    loadable_classes_used = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Call all +loads for the detached list.</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; used; i++) &#123;</span><br><span class="line">        Class cls = classes[i].cls;</span><br><span class="line">        <span class="keyword">load_method_t</span> load_method = (<span class="keyword">load_method_t</span>)classes[i].method;</span><br><span class="line">        <span class="keyword">if</span> (!cls) <span class="keyword">continue</span>; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (PrintLoading) &#123;</span><br><span class="line">            _objc_inform(<span class="string">&quot;LOAD: +[%s load]\n&quot;</span>, cls-&gt;nameForLogging());</span><br><span class="line">        &#125;</span><br><span class="line">        (*load_method)(cls, @selector(load));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Destroy the detached list.</span></span><br><span class="line">    <span class="keyword">if</span> (classes) <span class="built_in">free</span>(classes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从之前存储好的标 <code>loadable_classes</code> 中取出 <code>Class</code> 和 对应的 <code>load</code> 方法，直接调用</p>
<p>【3.2】<code>call_category_loads</code></p>
<p>从 <code>loadable_categories</code> 表中取出<code>loadable_category</code> ，通过 <code>_category_getClass</code> 获取分类对应的类，直接调用 <code>load</code> 方法</p>
<p><a href="https://www.jianshu.com/p/ea680941e084">深入APP启动之dyld、map_images、load_images</a></p>
]]></content>
  </entry>
  <entry>
    <title>对象和方法底层原理</title>
    <url>/2020/12/01/%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h4 id="isa指针"><a href="#isa指针" class="headerlink" title="isa指针"></a>isa指针</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LGPerson *p  &#x3D; [LGPerson alloc];</span><br><span class="line">p.name &#x3D; @&quot;aa&quot;;</span><br><span class="line"></span><br><span class="line">Class cls1 &#x3D; [LGPerson class];</span><br><span class="line">Class cls2 &#x3D; p.class;</span><br><span class="line">Class cls3 &#x3D; object_getClass(p);</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;%p %p %p&quot;, cls1, cls2, cls3); &#x2F;&#x2F;打印结果相同 只有一个类对象</span><br><span class="line"></span><br><span class="line">Class cls4 &#x3D; objcet_getClass(cls3);</span><br></pre></td></tr></table></figure>

<p>实例对象   – <code>p</code><br>类对象       – <code>cls1</code><br>元类对象   – <code>cls4</code></p>
<p>实例对象所属的类  -&gt; 类对象（<code>class</code>）<br>类对象所属的类      -&gt; 元类    （<code>meta-class</code>）<br>元类所属                  -&gt; 根元类（基类的<code>meta-class</code>）<br>根元类所属              -&gt; 自己</p>
<ul>
<li><p>根元类的父类是<code>NSObject</code> ，<code>NSObject</code> 的父类是 <code>nil</code></p>
</li>
<li><p><code>Class</code> 的 <code>superclass</code> 指向父类的 <code>class</code>，如果没有父类，<code>superclasss</code> 指针为 <code>nil</code></p>
</li>
<li><p><code>meta-class</code> 的 <code>superclass</code> 指向父类的 <code>meta-class</code>，基类的 <code>meta-class</code> 的 <code>superclass</code> 指向基类的 <code>class</code></p>
</li>
</ul>
<h4 id="实例对象调用对象方法"><a href="#实例对象调用对象方法" class="headerlink" title="实例对象调用对象方法"></a>实例对象调用对象方法</h4><p><img src="/2020/12/01/%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1%E8%B0%83%E7%94%A8%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95.png" alt="实例对象调用对象方法"></p>
<p>对于 <code>student</code> 来说，并不知道 <code>abc</code> 方法在哪里，唯一知道的就是可以去它的 <code>class对象</code> 里找</p>
<p>先通过 <code>isa</code> 指针进入 <code>Student</code> 类的 <code>class对象</code>，如果在其中找到了 <code>abc</code> 就直接进行调动，调用过程结束</p>
<p>没有找到的话，就通过<code> class对象</code>的 <code>superclass</code> 指针进入 <code>Student</code> 类的父类，也就是 <code>Person</code>类的 <code>class对象</code>，重复上一步的查找逻辑</p>
<p>一层层往上找，最终到基类，也就是 <code>NSObject</code> 类的 <code>class对象</code>，还没找到的话，由于它的 <code>superclass</code> 为 nil，最终就会报错 <code>[ERROR: unrecognized selector sent to instance]</code>，调用结束</p>
<h4 id="类对象调用类方法"><a href="#类对象调用类方法" class="headerlink" title="类对象调用类方法"></a>类对象调用类方法</h4><p><img src="/2020/12/01/%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/%E7%B1%BB%E5%AF%B9%E8%B1%A1%E8%B0%83%E7%94%A8%E7%B1%BB%E6%96%B9%E6%B3%95.png" alt="类对象调用类方法"></p>
<p>对于<code> Student</code>类来说，并不知道 <code>abc</code> 方法在哪里，我们知道类方法放在 <code>meta-class</code>对象里面</p>
<p>首先通过 <code>Student</code> 的 <code>class对象</code> 的 <code>isa</code> 指针找到其 <code>meta-class</code>对象，然后在方法列表里找是否有<code>abc</code>，如果有的话就调用，调用结束</p>
<p>如果没有的话，就通过 <code>meta-class</code> 对象的 <code>superclass</code> 指针找到 <code>Student</code> 的父类 <code>Person</code> 的<code>meta-class</code>对象，然后查找<code>abc</code>方法，如果有的话就调用，调用结束</p>
<p>没有的话，通过<code>meta-class</code>对象的<code>superclass</code>指针一层层往上查找</p>
<p>如果到了基类<code>（NSObject）</code>的<code>meta-class</code>还没找到<code>abc</code>，接下来 <code>superclass</code> 指针会找到 <code>NSObject</code> 的<code>class对象</code>，此时会继续在 <code>NSObject</code> 的 <code>class对象</code> 里面，寻找 <code>abc</code>，如果找到就会调用</p>
<p>如果没有找到，由于此时 <code>superclass</code> 是 <code>nil</code> ，最终系统会报错</p>
<h4 id="验证isa指针指向"><a href="#验证isa指针指向" class="headerlink" title="验证isa指针指向"></a>验证isa指针指向</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LGPerson *person &#x3D; [[LGPerson alloc] init];</span><br><span class="line">Class personClass &#x3D; [LGPerson class];</span><br><span class="line">Class personMetaClass &#x3D; object_getClass(personClass);</span><br><span class="line">NSLog(@&quot;%p %p %p&quot;, person, personClass, personMetaClass);</span><br></pre></td></tr></table></figure>

<p>打断点，LLDB调试打印 <code>person</code> 对象的 <code>isa</code> 指针</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(lldb) p&#x2F;x person-&gt;isa</span><br><span class="line">(Class) $1 &#x3D; 0x000001a1044bd715 LGPerson</span><br><span class="line">(lldb) p&#x2F;x personClass</span><br><span class="line">(Class) $2 &#x3D; 0x00000001044bd710 LGPerson</span><br></pre></td></tr></table></figure>

<p>通过 <code>p/x</code> 命令打印指针，<code>/</code>后面是打印参数，<code>x</code> 表示用 16 进制输出</p>
<p>可以看到输出结果并不相等</p>
<p>实例对象 <code>person 的 isa = 0x000001a1044bd715</code></p>
<p>类对象 <code>personClass = 0x00000001044bd710</code></p>
<p>从 64bit 开始，<code>isa</code> 需要进行一次位运算，才能计算出 <code>class对象</code> 的地址，系统提供了 <code>ISA_MASK</code>，在 <a href="https://opensource.apple.com/tarballs/objc4/">objc4</a> 的源码中可以找到</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">objc_object::ISA() </span><br><span class="line">&#123;</span><br><span class="line">    assert(!isTaggedPointer()); </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SUPPORT_INDEXED_ISA</span></span><br><span class="line">    <span class="keyword">if</span> (isa.nonpointer) &#123;</span><br><span class="line">        <span class="keyword">uintptr_t</span> slot = isa.indexcls;</span><br><span class="line">        <span class="keyword">return</span> classForIndex((<span class="keyword">unsigned</span>)slot);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (Class)isa.bits;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> (Class)(isa.bits &amp; ISA_MASK);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">if</span> __arm64__</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> ISA_MASK        0x0000000ffffffff8ULL</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">elif</span> __x86_64__</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> ISA_MASK        0x00007ffffffffff8ULL</span></span><br></pre></td></tr></table></figure>

<p>验证结果，通过和 <code>ISA_MASK</code>进行一次 <code>&amp;</code> 运算，得到了类对象 <code>personClass</code> 的地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(lldb) p&#x2F;x 0x000001a1044bd715 &amp; 0x0000000ffffffff8ULL</span><br><span class="line">(unsigned long long) $4 &#x3D; 0x00000001044bd710</span><br></pre></td></tr></table></figure>

<h4 id="objc-class"><a href="#objc-class" class="headerlink" title="objc_class"></a>objc_class</h4><p>查看源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> :</span> objc_object &#123;</span><br><span class="line">    <span class="comment">// Class ISA;			//isa占8字节</span></span><br><span class="line">    Class superclass; <span class="comment">//8字节</span></span><br><span class="line">    <span class="keyword">cache_t</span> cache;    <span class="comment">//16字节         // formerly cache pointer and vtable</span></span><br><span class="line">    <span class="keyword">class_data_bits_t</span> bits;    <span class="comment">// class_rw_t * plus custom rr/alloc flags</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">class_rw_t</span> *<span class="title">data</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> bits.data();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到 <code>class_rw_t</code> 看字面意思是可读可写的表，进入查看</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">class_rw_t</span> &#123;</span></span><br><span class="line">    <span class="comment">// Be warned that Symbolication knows the layout of this structure.</span></span><br><span class="line">    <span class="keyword">uint32_t</span> flags;</span><br><span class="line">    <span class="keyword">uint32_t</span> version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">class_ro_t</span> *ro;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">method_array_t</span> methods;				<span class="comment">//方法列表</span></span><br><span class="line">    <span class="keyword">property_array_t</span> properties;  <span class="comment">//属性列表</span></span><br><span class="line">    <span class="keyword">protocol_array_t</span> protocols;   <span class="comment">//协议列表</span></span><br></pre></td></tr></table></figure>

<p>方法、属性、协议信息都放在这里，还有一个 <code>class_ro_t</code> 只读表，进入查看哪些是只读的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">class_ro_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> flags;</span><br><span class="line">    <span class="keyword">uint32_t</span> instanceStart;</span><br><span class="line">    <span class="keyword">uint32_t</span> instanceSize;	<span class="comment">//实例对象size</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __LP64__</span></span><br><span class="line">    <span class="keyword">uint32_t</span> reserved;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint8_t</span> * ivarLayout;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * name;			<span class="comment">//类名</span></span><br><span class="line">    <span class="keyword">method_list_t</span> * baseMethodList;</span><br><span class="line">    <span class="keyword">protocol_list_t</span> * baseProtocols; <span class="comment">//成员变量描述信息，如名称，类型等</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">ivar_list_t</span> * ivars;</span><br></pre></td></tr></table></figure>

<h4 id="通过MachO文件查找类和方法列表"><a href="#通过MachO文件查找类和方法列表" class="headerlink" title="通过MachO文件查找类和方法列表"></a>通过MachO文件查找类和方法列表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   Person *p &#x3D; [[Person alloc] init];</span><br><span class="line">   p.name &#x3D; @&quot;pname&quot;;</span><br><span class="line">   p.age  &#x3D; 20;</span><br><span class="line">   NSLog(@&quot;%p&quot;, [p class]); &#x2F;&#x2F;0x100cc9718</span><br><span class="line">-&gt; NSLog(@&quot;end&quot;);</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<p><code>image list</code> 查看偏移量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(lldb) image list</span><br><span class="line">[  0] E4FC76C2-878C-31CA-AB74-26EF8D1204D5 0x0000000100cc0000 &#x2F;</span><br><span class="line">xxx&#x2F;Build&#x2F;Products&#x2F;Debug-iphoneos&#x2F;Test.app&#x2F;Test </span><br></pre></td></tr></table></figure>

<p>计算内存地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(lldb) p&#x2F;x 0x100cc9718-0x0000000100cc0000</span><br><span class="line">(long) $0 &#x3D; 0x0000000000009718</span><br></pre></td></tr></table></figure>

<p>将<code>Products/Debug-iphoneos/Test.app/Test</code> 目录下的可执行文件拖入到 <code>MachOView</code></p>
<p><img src="/2020/12/01/%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/MachOView.jpg" alt="MachOView"></p>
<p><a href="https://blog.csdn.net/u013480070/article/details/100154183">对象的本质（下）详解isa&amp;superclass指针</a></p>
]]></content>
  </entry>
  <entry>
    <title>测试下</title>
    <url>/2020/11/17/%E6%B5%8B%E8%AF%95%E4%B8%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>分类1</category>
      </categories>
      <tags>
        <tag>标签1</tag>
      </tags>
  </entry>
  <entry>
    <title>逆</title>
    <url>/2021/03/31/%E9%80%86/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="72532eea066a4da146eb47dadaf84eae9b7a8370881c3e752edf5432c1f21e4f">6a0984f7a8e89a416916236f779221ce3fd2c4dcefac971b9ac8b0dfe88c8e46334c272f445ecc37ad2ff29ebc86c61b795b2bdd3ba96e9dc0312d782588f3cb55a66a01be0215453842d96a281db9303caec9bb73de782bc345e2ee9c2109549031e91b8f54c589e56cd95adc18592a272832103cd750c72d5021192aadfa386c3b355150f4376389da11d8e6d3b79ced6064535d03fcf12e8ad72c4f67d5196a2943dcd69dc9298ed2857ce03fc372809a9251c876b0605369c29361d02c80082e6af9060a3ffd5060671e8c286a72e29105bbd27fa3f7b643f885e6358b85ff761f1ad49fab37b1ac11b5c2879ec671eb393c01cc40b340f9b79fc36fbde6a6410ef6c65aa67281b7d616fc5b3f61a46de02ff4c1593f6a6e0fdd335e1fbecc015c033058d04b0f3796d88a5b639a8e502e8e36230ca5c175c600a08c9c0d2544b0a55b0dea027beb482f30bdb73be6d93f6f5941cf27106f9fc6b9ab45ae4bfab5cc357a1e09dd39af815aab12482e54376b299f8314af335ee9b4d19eec71138ac45872addfb03fde20d695503a1e6d89628fe5556b283bab9d641155c408aa20e621089921bc38a2226e5441d38eb1919e96ea5ccc7aa3ad50072925f12f1dc0c96f62927c180c49ff6629d59450382c0f7d5e51d84b376c68d7dc5d04323da77a82ba1c2f7d50e0b7f152589b9c4c83252fa4c75ef735d4070c51ba0e54ef82fe489ad56b19dc589056ad5348a4a3ac10df2c1fc258ec69bcc7540833af19ebeb43910353062e1a7f9afc05f682f6ee81dc998ed50bb091b3601db2e03db2d9afae8dc1e81592accf3ec79df755ed9261abcc7219cef7d94201dc8ca57f64781627c4b2eae6c57a4597ff77a3c7ef700615a774a5f42db7e39d39007c53c58b66d76619b0b979ddf6504860c6947e50f63be2a4c9f03efb22ff02259d9a7b664d33bf3aada6808a148bda07bc170ca2ca19bc069b49691ebb20db4f23cd61022657739942380ccf836e709424cc037cb464fab6ee3bdd4a5c325ed262ba1f61c704768fe90ef06daa72e4dd6dd00826a76be1a1c902cbbdb1fde547ac2df339616028bd8f213baa018b39f618cdec6274f0f0a72ab9e48a28c86496c60a522b6430e78f6837d54ab3b6abf57e6f825a2d2e96376e63f056881fee71a01cb345dcf559d6db14adc6da9d27b8f300972ea9333f7a33acd9f709b5229defb2fa2143718fa1119777a150ff8e18bbfdec179d55d7cca38daeb9bf7aefff3f1e5da36cd74725b78e80d16de9bfaf93d8a1f12dd51a7ae6b78ba34697edfb0d917beccfccb00f2d34d9df69c080b4e1</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>逆</category>
      </categories>
      <tags>
        <tag>逆</tag>
      </tags>
  </entry>
  <entry>
    <title>Python</title>
    <url>/2021/03/02/Python/</url>
    <content><![CDATA[<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p><code>r&#39;&#39; </code> 表示 <code>&#39;&#39;</code>  内部的字符串不转义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(r&#39;\\\t\\&#39;)</span><br><span class="line">\\\t\\</span><br></pre></td></tr></table></figure>

<p>多行输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&#39;&#39;&#39;line1</span><br><span class="line">line2</span><br><span class="line">line3&#39;&#39;&#39;)</span><br></pre></td></tr></table></figure>

<p>输入 让用户输入并存放到一个变量里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; name &#x3D; input()</span><br><span class="line">John</span><br><span class="line">&gt;&gt;&gt; print(name)</span><br><span class="line">John</span><br><span class="line">字符串提示输入 </span><br><span class="line">&gt;&gt;&gt; name &#x3D; input(&#39;please enter your name: &#39;)</span><br><span class="line">please enter your name: J</span><br></pre></td></tr></table></figure>

<h5 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h5><p>% 运算符就是用来格式化字符串的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#39;Hello, %s&#39; % &#39;world&#39;)</span><br><span class="line">Hello, world</span><br></pre></td></tr></table></figure>

<p>占位符：%d 整数  %f 浮点数 %s 字符串 %x 十六进制数</p>
<p>如果字符串里面有 % ，需要转义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;growth rate: %d %%&#39; % 7</span><br></pre></td></tr></table></figure>

<h5 id="list-列表"><a href="#list-列表" class="headerlink" title="list 列表"></a>list 列表</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classmate &#x3D; [&#39;Michael&#39;, &#39;Bob&#39;]</span><br><span class="line">print(classmate, len(classmate), classmate[0])</span><br></pre></td></tr></table></figure>

<p>取最后一个元素 <code>classmate[-1]</code> 倒数第 2 个 <code>classmate[-2]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;追加元素</span><br><span class="line">classmate.append(&#39;Adam&#39;)</span><br><span class="line">&#x2F;&#x2F;插入元素到指定位置</span><br><span class="line">classmate.insert(1, &#39;Jack&#39;)</span><br><span class="line">&#x2F;&#x2F;删除最后元素</span><br><span class="line">classmate.pop()</span><br><span class="line">&#x2F;&#x2F;删除指定位置元素</span><br><span class="line">classmate.pop(1)</span><br><span class="line">&#x2F;&#x2F;替换元素</span><br><span class="line">classmate[1] &#x3D; &#39;Sarah&#39;</span><br></pre></td></tr></table></figure>

<p>list 里面元素类型可以不同，list 元素也可以是 list，取的时候  <code>s[2][1]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">L &#x3D; [&#39;Apple&#39;, 123, True]</span><br><span class="line">s &#x3D; [&#39;python&#39;, &#39;java&#39;, [&#39;asp&#39;, &#39;php&#39;], &#39;scheme&#39;]</span><br></pre></td></tr></table></figure>

<h5 id="tuple-元组"><a href="#tuple-元组" class="headerlink" title="tuple 元组"></a>tuple 元组</h5><p>初始化后不能修改，tuple 有元素是 list， list 可以变</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classmates &#x3D; (&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;)</span><br></pre></td></tr></table></figure>

<h5 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">age &#x3D; 3</span><br><span class="line">if age &gt;&#x3D; 18:</span><br><span class="line">    print(&#39;adult&#39;)</span><br><span class="line">elif age &gt;&#x3D; 6:</span><br><span class="line">    print(&#39;teenager&#39;)</span><br><span class="line">else:</span><br><span class="line">    print(&#39;kid&#39;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if x:</span><br><span class="line">    print(&#39;True&#39;)</span><br></pre></td></tr></table></figure>

<h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">names &#x3D; [&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;]</span><br><span class="line">for name in names:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure>

<p>range() 函数，可以生成一个整数序列，通过 list() 函数可以转换成 list</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list(range(5))</span><br><span class="line">[0, 1, 2, 3, 4]</span><br></pre></td></tr></table></figure>

<h5 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h5><p>get() 方法，如果 key 不存在，可以返回 None，或者自己指定的 value</p>
<p>pop(key) 删除一个 key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d &#x3D; &#123;&#39;Michael&#39;: 95, &#39;Bob&#39;: 75, &#39;Tracy&#39;: 85&#125;</span><br><span class="line">d.get(&#39;Thomas&#39;)</span><br><span class="line">d.get(&#39;Thomas&#39;, -1)</span><br><span class="line">d.pop(&#39;Bob&#39;)</span><br></pre></td></tr></table></figure>

<h5 id="set-集合"><a href="#set-集合" class="headerlink" title="set 集合"></a>set 集合</h5><p>没有重复的 key，重复元素会自动过滤</p>
<p>add(key) 添加元素</p>
<p>remove(key) 删除元素</p>
<p>两个 set 可以做数学意义上的交集、并集</p>
<p>创建一个 set 需要提供一个 list 作为集合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; set([1, 2, 3])</span><br><span class="line">s &#x3D; set([1, 1, 2, 2, 3, 3])</span><br><span class="line">s.add(4)</span><br><span class="line">s1 &#x3D; set([4, 5, 6])</span><br><span class="line">s &amp; s1</span><br></pre></td></tr></table></figure>

<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def my_abs(x):</span><br><span class="line">    if x &gt;&#x3D; 0:</span><br><span class="line">        return x</span><br><span class="line">    else:</span><br><span class="line">        return -x</span><br></pre></td></tr></table></figure>

<p>定义空函数什么也不做，pass 用来做占位符，还没写好的函数可以先放一个 pass</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def nop():</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>

<p>参数类型检查 isinstance 内置函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def my_abs(x):</span><br><span class="line">    if not isinstance(x, (int, float)):</span><br><span class="line">        raise TypeError(&#39;bad operand type&#39;)</span><br><span class="line">    if x &gt;&#x3D; 0:</span><br><span class="line">        return x</span><br><span class="line">    else:</span><br><span class="line">        return -x</span><br></pre></td></tr></table></figure>

<h5 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import math</span><br><span class="line">def move(x, y, step, angle&#x3D;0):</span><br><span class="line">    nx &#x3D; x + step * math.cos(angle)</span><br><span class="line">    ny &#x3D; y - step * math.sin(angle)</span><br><span class="line">    return nx, ny</span><br></pre></td></tr></table></figure>

<p>同时获得返回值，返回一个tuple</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x, y &#x3D; move(100, 100, 60, math.pi &#x2F; 6)</span><br></pre></td></tr></table></figure>

<h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><p>调用 power(5)，power(5, 3)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def power(x, n&#x3D;2):</span><br><span class="line">    s &#x3D; 1</span><br><span class="line">    while n &gt; 0:</span><br><span class="line">        n &#x3D; n - 1</span><br><span class="line">        s &#x3D; s * x</span><br><span class="line">    return s</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def enroll(name, gender, age&#x3D;6, city&#x3D;&#39;Beijing&#39;):</span><br><span class="line">    print(&#39;name:&#39;, name)</span><br><span class="line">    print(&#39;gender:&#39;, gender)</span><br><span class="line">    print(&#39;age:&#39;, age)</span><br><span class="line">    print(&#39;city:&#39;, city)</span><br><span class="line"></span><br><span class="line">enroll(&#39;Bob&#39;, &#39;M&#39;, 7) city参数依然是默认</span><br><span class="line">enroll(&#39;Adam&#39;, &#39;M&#39;, city&#x3D;&#39;Tianjin’) age默认 city用传的值</span><br></pre></td></tr></table></figure>

<h5 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def calc(numbers):</span><br><span class="line">    sum &#x3D; 0</span><br><span class="line">    for n in numbers:</span><br><span class="line">        sum &#x3D; sum + n * n</span><br><span class="line">    return sum</span><br></pre></td></tr></table></figure>

<p>调用的时候传入 list 或 tuple</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">calc([1, 2, 3])</span><br><span class="line">calc((1, 3, 5, 7))</span><br></pre></td></tr></table></figure>

<p>改成可变参数，参数前面加一个 * ，函数内部 nubmers 接收的是一个 tuple</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def calc(*numbers):</span><br><span class="line">    sum &#x3D; 0</span><br><span class="line">    for n in numbers:</span><br><span class="line">        sum &#x3D; sum + n * n</span><br><span class="line">    return sum</span><br></pre></td></tr></table></figure>

<p>调用可以传任意参数，或者 0 个参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">calc(1, 2)</span><br><span class="line">calc()</span><br></pre></td></tr></table></figure>

<h5 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h5><p>除了必选参数 name 和 age 外，还接受关键字参数 kw</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def person(name, age, **kw):</span><br><span class="line">    print(&#39;name:&#39;, name, &#39;age:&#39;, age, &#39;other:&#39;, kw)</span><br></pre></td></tr></table></figure>

<p>可以传入任意个数关键字参数，关键字参数在函数内部自动组装为一个 dict</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">person(&#39;Bob&#39;, 35, city&#x3D;&#39;Beijing&#39;)</span><br><span class="line">person(&#39;Adam&#39;, 45, gender&#x3D;&#39;M&#39;, job&#x3D;&#39;Engineer&#39;)</span><br><span class="line"></span><br><span class="line">extra &#x3D; &#123;&#39;city&#39;: &#39;Beijing&#39;, &#39;job&#39;: &#39;Engineer&#39;&#125;</span><br><span class="line">person(&#39;Jack&#39;, 24, city&#x3D;extra[&#39;city&#39;], job&#x3D;extra[&#39;job&#39;])</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;把 extra dict 所有 key-value 用关键字参数传入，kw 将获得一个 dict</span><br><span class="line">person(&#39;Jack&#39;, 24, **extra)</span><br><span class="line">&#x2F;&#x2F;name: Jack age: 24 other: &#123;&#39;city&#39;: &#39;Beijing&#39;, &#39;job&#39;: &#39;Engineer&#39;&#125;</span><br></pre></td></tr></table></figure>

<p>检查参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def person(name, age, **kw):</span><br><span class="line">    if &#39;city&#39; in kw:</span><br><span class="line">        # 有city参数</span><br><span class="line">               pass</span><br><span class="line">    if &#39;job&#39; in kw:</span><br><span class="line">        # 有job参数</span><br><span class="line">               pass</span><br><span class="line">    print(&#39;name:&#39;, name, &#39;age:&#39;, age, &#39;other:&#39;, kw)</span><br></pre></td></tr></table></figure>

<h5 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h5><p>限制关键字参数名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def person(name, age, *, city, job):</span><br><span class="line">    print(name, age, city, job)</span><br><span class="line">    </span><br><span class="line">&gt;&gt;&gt; person(&#39;Jack&#39;, 24, city&#x3D;&#39;Beijing&#39;, job&#x3D;&#39;Engineer&#39;)</span><br></pre></td></tr></table></figure>

<p>如果已经有一个可变参数，后面命名关键字参数就不需要特殊分隔符 * 了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def person(name, age, *args, city, job):</span><br><span class="line">    print(name, age, args, city, job)</span><br></pre></td></tr></table></figure>

<p>调用需要加参数名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">person(&#39;Jack&#39;, 24, job&#x3D;&#39;Engineer&#39;)</span><br></pre></td></tr></table></figure>

<h5 id="参数组合"><a href="#参数组合" class="headerlink" title="参数组合"></a>参数组合</h5><p>必选参数、默认参数、可变参数、命名关键字参数、关键字参数，5种参数可以组合使用</p>
<p>顺序必须是：必选参数、默认参数、可变参数、命名关键字参数、关键字参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def f1(a, b, c&#x3D;0, *args, **kw):</span><br><span class="line">    print(&#39;a &#x3D;&#39;, a, &#39;b &#x3D;&#39;, b, &#39;c &#x3D;&#39;, c, &#39;args &#x3D;&#39;, args, &#39;kw &#x3D;&#39;, kw)</span><br><span class="line"></span><br><span class="line">def f2(a, b, c&#x3D;0, *, d, **kw):</span><br><span class="line">    print(&#39;a &#x3D;&#39;, a, &#39;b &#x3D;&#39;, b, &#39;c &#x3D;&#39;, c, &#39;d &#x3D;&#39;, d, &#39;kw &#x3D;&#39;, kw)</span><br></pre></td></tr></table></figure>

<p>不要用太多组合，否则理解性很差</p>
<h4 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h4><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>L[0:3] 从索引 0 开始取，直到索引 3 为止，不包括 3，如果第一个索引是0，可以省略 L[:3]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">L &#x3D; [&#39;Michael&#39;, &#39;Sarah&#39;, &#39;Tracy&#39;, &#39;Bob&#39;, &#39;Jack&#39;]</span><br><span class="line">print(L[0:3])</span><br></pre></td></tr></table></figure>

<p>支持倒数切片 L[-1] 取倒数第一个元素</p>
<p>0-99的数列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">L &#x3D; list(range(100))</span><br><span class="line">取前10个数   L[:10]</span><br><span class="line">取后10个数   L[-10:]</span><br><span class="line">取前11-20个数 L[10：20]</span><br><span class="line">前10个数每两个取一个  L[:10:2]</span><br><span class="line">所有数每5个取一个  L[::5]</span><br><span class="line">原样复制一个 list  L[:]</span><br></pre></td></tr></table></figure>

<p>tuple 和 str 也可以用切片操作</p>
<h5 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;</span><br><span class="line">for key in d:</span><br><span class="line">	print(key)</span><br><span class="line">	</span><br><span class="line">for value in d.values()</span><br><span class="line">for k, v in d.items()</span><br></pre></td></tr></table></figure>

<p>使用<code>for</code>循环时，只要作用于一个可迭代对象，<code>for</code>循环就可以正常运行</p>
<p>通过 collections 模块的 Iterable 类型判断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections import Iterable</span><br><span class="line">isinstance(&#39;abc&#39;, Iterable)</span><br><span class="line">isinstance([1, 2, 3], Iterable)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i, value in enumerate([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]):</span><br><span class="line">	print(i, value)</span><br></pre></td></tr></table></figure>

<h5 id="列表生成"><a href="#列表生成" class="headerlink" title="列表生成"></a>列表生成</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L &#x3D; [&#39;Hello&#39;, &#39;World&#39;, &#39;IBM&#39;, &#39;Apple&#39;]</span><br><span class="line">&gt;&gt;&gt; [s.lower() for s in L]</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;, &#39;ibm&#39;, &#39;apple&#39;]</span><br></pre></td></tr></table></figure>

<p>要生成 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list(range(1, 11))</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br></pre></td></tr></table></figure>

<p>生成 [1x1, 2x2, 3x3, …, 10x10]</p>
<p>生成列表时 把要生成的元素x*x放到前面 后面for循环就可以把list创建出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [x * x for x in range(1, 11)]</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure>

<p>循环后面还可以加上 if 判断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[x * x for x in range(1, 11) if x % 2 &#x3D;&#x3D; 0]</span><br></pre></td></tr></table></figure>

<p>还可以使用两层循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [m + n for m in &#39;ABC&#39; for n in &#39;XYZ&#39;]</span><br><span class="line">[&#39;AX&#39;, &#39;AY&#39;, &#39;AZ&#39;, &#39;BX&#39;, &#39;BY&#39;, &#39;BZ&#39;, &#39;CX&#39;, &#39;CY&#39;, &#39;CZ&#39;]</span><br></pre></td></tr></table></figure>

<h5 id="生成器-generator"><a href="#生成器-generator" class="headerlink" title="生成器 generator"></a>生成器 generator</h5><p>把列表生成式的 [] 改成 ()，就创建了一个 generator</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g &#x3D; (x * x for x in range(10))</span><br><span class="line">    print(g) &#x2F;&#x2F;&lt;generator object &lt;genexpr&gt; at 0x7f9c13a0bba0&gt;</span><br><span class="line">    for n in g:</span><br><span class="line">        print(n)</span><br></pre></td></tr></table></figure>

<p>generator 在每次调用 next() 的时候执行，遇到 yield 语句返回，再次执行的时候从上次返回的 yield 语句处继续执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def odd():</span><br><span class="line">    print(&#39;step 1&#39;)</span><br><span class="line">    yield 1</span><br><span class="line">    print(&#39;step 2&#39;)</span><br><span class="line">    yield(3)</span><br><span class="line">    print(&#39;step 3&#39;)</span><br><span class="line">    yield(5)</span><br></pre></td></tr></table></figure>

<p>调用时首先生成一个 generator 对象 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">o &#x3D; odd()</span><br><span class="line">next(o)</span><br><span class="line">next(o)</span><br></pre></td></tr></table></figure>

<h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><p>可直接作用于 for 循环的对象称为可迭代对象： <code>Iterable</code></p>
<p>使用 isinstance()，判断一个对象是否是 Iterable</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections.abc import Iterable</span><br><span class="line">isinstance([], Iterable)</span><br><span class="line">isinstance(&#39;abc&#39;, Iterable)</span><br></pre></td></tr></table></figure>

<p>生成器不但可以作用于 for 循环，还可以被 next 函数不断调用返回下一个值，知道最后抛出 StopIteration 错误表示无法继续返回下一个值</p>
<p>可以被 next() 函数调用并返回下一个值的对象称为迭代器：<code> Iterator</code></p>
<p>把 list、dict、str 等 Iterable 变成 Iterator 可以使用 iter() 函数</p>
<h5 id="函数式变成"><a href="#函数式变成" class="headerlink" title="函数式变成"></a>函数式变成</h5><ul>
<li>高阶函数</li>
<li>返回函数</li>
<li>匿名函数</li>
<li>装饰器</li>
</ul>
<p>函数对象有一个  <code>__name__</code> 属性，可以拿到函数的名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def now():</span><br><span class="line">...     print(&#39;2015-3-25&#39;)</span><br><span class="line">&gt;&gt;&gt; now.__name__</span><br></pre></td></tr></table></figure>

<p>代码运行期间动态增加功能的方式，称为装饰器 Decorator</p>
<ul>
<li>偏函数</li>
</ul>
<h5 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h5><p>用包来组织模块，每个包目录下都有一个 <code>__init__.py</code>，文件，必须存在，否则 python 就把这个目录当成一个普通目录，而不是一个包，可以是空文件</p>
<ul>
<li>使用模块</li>
</ul>
<p>以内建的 sys 模块为例， 编写一个 hello 模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-  </span><br><span class="line"></span><br><span class="line">&#39; a test module &#39; # 任何模块代码的第一个字符串都被视为模块的文档注释</span><br><span class="line"></span><br><span class="line">__author__ &#x3D; &#39;Michael Liao&#39;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">    args &#x3D; sys.argv</span><br><span class="line">    if len(args)&#x3D;&#x3D;1:</span><br><span class="line">        print(&#39;Hello, world!&#39;)</span><br><span class="line">    elif len(args)&#x3D;&#x3D;2:</span><br><span class="line">        print(&#39;Hello, %s!&#39; % args[1])</span><br><span class="line">    else:</span><br><span class="line">        print(&#39;Too many arguments!&#39;)</span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&#39;__main__&#39;:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure>

<p>第 1 行 第 2 行是标准注释</p>
<ul>
<li>模块搜索路径</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import sys</span><br><span class="line">&gt;&gt;&gt; sys.path</span><br></pre></td></tr></table></figure>

<h5 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h5><ul>
<li>创建 Logger 记录器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger &#x3D; logging.getLogger()</span><br></pre></td></tr></table></figure>

<p>设置日志级别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger.setLevel(logging.INFO)</span><br></pre></td></tr></table></figure>

<ul>
<li>Handler 处理器</li>
</ul>
<p>常用三种 StreamHandler、FileHandler、NullHandler</p>
<p>创建 StreamHandler 之后，可以设置日志级别，设置格式化器 Formatter，增加或删除过滤器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console_handler &#x3D; logging.StreamHandler()</span><br><span class="line"># 指定日志级别 低于WARN级别日志将被忽略</span><br><span class="line">console_handler.setLevel(logging.WARN)</span><br><span class="line"># 设置一个格式化器 formatter</span><br><span class="line">console_handler.setFormatter(formatter_name)</span><br><span class="line"># 增加过滤器</span><br><span class="line">console_handler.addFilter(filter_name)</span><br><span class="line"># 删除过滤器</span><br><span class="line">console_handler.removeFilter(filter_name)</span><br></pre></td></tr></table></figure>

<p>jd_logger.py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import logging</span><br><span class="line">import logging.handlers</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">日志模块</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">LOG_FILENAME &#x3D; &#39;..&#x2F;jd_seckill.log&#39;</span><br><span class="line">logger &#x3D; logging.getLogger()</span><br><span class="line"></span><br><span class="line">def set_logger():</span><br><span class="line">    logger.setLevel(logging.INFO)</span><br><span class="line">    formatter &#x3D; logging.Formatter(&#39;%(asctime)s - %(process)d-%(threadName)s - &#39;</span><br><span class="line">                                  &#39;%(pathname)s[line:%(lineno)d] - %(levelname)s: %(message)s&#39;)</span><br><span class="line">    console_handler &#x3D; logging.StreamHandler()</span><br><span class="line">    console_handler.setFormatter(formatter)</span><br><span class="line">    logger.addHandler(console_handler)</span><br><span class="line">    file_handler &#x3D; logging.handlers.RotatingFileHandler(</span><br><span class="line">        LOG_FILENAME, maxBytes&#x3D;10485760, backupCount&#x3D;5, encoding&#x3D;&quot;utf-8&quot;)</span><br><span class="line">    file_handler.setFormatter(formatter)</span><br><span class="line">    logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set_logger()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%(levelno)s 打印日志级别的数值 </span><br><span class="line">%(levelname)s 打印日志级别名称</span><br><span class="line">%(pathname)s 打印当前执行程序的路径 </span><br><span class="line">%(filename)s 打印当前执行程序名称</span><br><span class="line">%(funcName)s 打印日志的当前函数 </span><br><span class="line">%(lineno)d 打印日志的当前行号 </span><br><span class="line">%(asctime)s 打印日志的时间 </span><br><span class="line">%(thread)d 打印线程id </span><br><span class="line">%(threadName)s 打印线程名称</span><br><span class="line">%(process)d 打印进程ID</span><br><span class="line">%(message)s 打印日志信息</span><br></pre></td></tr></table></figure>







<h4 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h4><h5 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h5><p>(object) 表示从哪个类继承下来的</p>
<p>第一个参数固定self 表示创建实例本身</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Student(object) </span><br><span class="line">	def __init__(self, name, score):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.score &#x3D; score</span><br><span class="line">  def print_score(self):</span><br><span class="line">        print(&#39;%s: %s&#39; % (self.name, self.score))</span><br></pre></td></tr></table></figure>

<p>有了init方法 创建实例的时候就不能传空参数了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bart &#x3D; Student(&#39;Bart&#39;, 59)</span><br></pre></td></tr></table></figure>

<h5 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h5><p>如果要让内部属性不被外部访问，名称前加两个下划线 <code>__</code>，就变成私有变量，这样外部就不能访问了，如果要外部访问可以增加 get 方法</p>
<p>添加 get set 方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def get_name(self):</span><br><span class="line">    return self.__name</span><br><span class="line">def get_score(self):</span><br><span class="line">    return self.__score</span><br><span class="line">def set_score(self, score):</span><br><span class="line">    self.__score &#x3D; score</span><br></pre></td></tr></table></figure>

<ul>
<li>对象信息</li>
</ul>
<p>type()  判断对象类型、isinstance()</p>
<p>获取对象所有属性和方法 dir()， 返回包含字符串的 list</p>
<ul>
<li>实例属性和类属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    name &#x3D; &#39;Student&#39; # 类属性</span><br></pre></td></tr></table></figure>

<h4 id="面向对象高级编程"><a href="#面向对象高级编程" class="headerlink" title="面向对象高级编程"></a>面向对象高级编程</h4><h4 id="错误、调试和测试"><a href="#错误、调试和测试" class="headerlink" title="错误、调试和测试"></a>错误、调试和测试</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(&#39;try...&#39;)</span><br><span class="line">    r &#x3D; 10 &#x2F; int(&#39;a&#39;)</span><br><span class="line">    print(&#39;result:&#39;, r)</span><br><span class="line">except ValueError as e:</span><br><span class="line">    print(&#39;ValueError:&#39;, e)</span><br><span class="line">except ZeroDivisionError as e:</span><br><span class="line">    print(&#39;ZeroDivisionError:&#39;, e)</span><br><span class="line">finally:</span><br><span class="line">    print(&#39;finally...&#39;)</span><br><span class="line">print(&#39;END&#39;)</span><br></pre></td></tr></table></figure>

<p>Python 所有的错误都是从 BaseException 类派生的</p>
<p>常见的错误类型和继承关系 <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy">https://docs.python.org/3/library/exceptions.html#exception-hierarchy</a></p>
<ul>
<li>记录错误</li>
</ul>
<p>内置的 logging 模块可以非常容易的记录错误，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># err_logging.py</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">def foo(s):</span><br><span class="line">    return 10 &#x2F; int(s)</span><br><span class="line">def bar(s):</span><br><span class="line">    return foo(s) * 2</span><br><span class="line">def main():</span><br><span class="line">    try:</span><br><span class="line">        bar(&#39;0&#39;)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        logging.exception(e)</span><br><span class="line">main()</span><br><span class="line">print(&#39;END&#39;)</span><br></pre></td></tr></table></figure>

<p>通过配置 loging 还可以把错误记录到日志文件里</p>
<p>抛出错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># err_raise.py</span><br><span class="line">class FooError(ValueError):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def foo(s):</span><br><span class="line">    n &#x3D; int(s)</span><br><span class="line">    if n&#x3D;&#x3D;0:</span><br><span class="line">        raise FooError(&#39;invalid value: %s&#39; % s)</span><br><span class="line">    return 10 &#x2F; n</span><br><span class="line"></span><br><span class="line">foo(&#39;0&#39;)</span><br></pre></td></tr></table></figure>











<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p><a href="https://tool.oschina.net/regex">正则表达式测试工具</a></p>
<table>
<thead>
<tr>
<th align="left">\w</th>
<th align="left">匹配字母、数字、下划线,等价于[a-zA-Z0-9_]</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\W</td>
<td align="left">匹配不是字母、数字、下划线的其他字符</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">匹配任意空白字符,等价于(\t\n\r\f)</td>
</tr>
<tr>
<td align="left">\S</td>
<td align="left">匹配任意非空字符</td>
</tr>
<tr>
<td align="left">\d</td>
<td align="left">匹配数字,等价于[0-9]</td>
</tr>
<tr>
<td align="left">\D</td>
<td align="left">匹配不是数字的字符</td>
</tr>
<tr>
<td align="left">\A</td>
<td align="left">匹配字符串开头</td>
</tr>
<tr>
<td align="left">\Z</td>
<td align="left">匹配字符串结尾的,如果存在换行,只匹配到换行前的结束字符串</td>
</tr>
<tr>
<td align="left">\z</td>
<td align="left">匹配字符串结尾的,如果存在换行,匹配到换行符\n</td>
</tr>
<tr>
<td align="left">\G</td>
<td align="left">最好完成匹配的位置</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">匹配一个换行符</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">匹配一个制表符(tab)</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">匹配一行字符串的开头</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">匹配一行字符串的结尾</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">匹配任意字符,除了换行符.当re.DOTALL标记被指定时,这可以匹配包括换行符在内的任字符</td>
</tr>
<tr>
<td align="left">[…]</td>
<td align="left">用来表示一组字符,比如[abc]表示匹配a或b或c,[a-z],[0-9]</td>
</tr>
<tr>
<td align="left">[^…]</td>
<td align="left">匹配不在[]里面的字符,比如[^abc]匹配除a,b,c以外的字符</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">匹配0个或多个字符</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">匹配1个或多个字符</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">匹配0个或1个前面的正则表达式片段,(.*?)表示尽可能少地匹配字符</td>
</tr>
<tr>
<td align="left">{n}</td>
<td align="left">精确匹配前面n个前面的表达式,如\d{5}表示匹配5个数字</td>
</tr>
<tr>
<td align="left">{n,m}</td>
<td align="left">匹配前面的表达式n到m次,贪婪模式</td>
</tr>
<tr>
<td align="left">a|b</td>
<td align="left">匹配a或者b</td>
</tr>
<tr>
<td align="left">(…)</td>
<td align="left">匹配括号里的表达式,也可以表示一个组</td>
</tr>
</tbody></table>
<h5 id="匹配目标"><a href="#匹配目标" class="headerlink" title="匹配目标"></a>匹配目标</h5><p>使用 （） 括号将想提取的字符串括起来，调用 group() 方法提取结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">content &#x3D; &#39;Hello 1234567 World This is a Regex Demo&#39;</span><br><span class="line">result &#x3D; re.match(&#39;^Hello\s(\d+)\sWorld&#39;, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(1))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 19), match&#x3D;&#39;Hello 1234567 World&#39;&gt;</span><br><span class="line">1234567</span><br><span class="line">(0, 19)</span><br></pre></td></tr></table></figure>

<p>想将字符串中的 1234567 提取出来，可以将数字部分的正则表达式用 （）括起来，然后调用 group(1) 获取匹配结果，如果后面还有（）内容，依次用 group(2) 获取</p>
<p>span 输出匹配范围</p>
<h5 id="通用匹配"><a href="#通用匹配" class="headerlink" title="通用匹配"></a>通用匹配</h5><p>.* 匹配任意字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result &#x3D; re.match(&#39;^Hello.*Demo$&#39;, content)</span><br><span class="line">print(result.group())</span><br></pre></td></tr></table></figure>

<p>中间部分省略，最后加一个结尾字符串</p>
<p>group() 输出匹配的全部字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello 123 4567 World This is a Regex Demo</span><br></pre></td></tr></table></figure>

<h5 id="贪婪与非贪婪"><a href="#贪婪与非贪婪" class="headerlink" title="贪婪与非贪婪"></a>贪婪与非贪婪</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">content &#x3D; &#39;Hello 1234567 World This is a Regex Demo&#39;</span><br><span class="line">result &#x3D; re.match(&#39;^He.*(\d+).*Demo$&#39;, content)</span><br><span class="line">print(result.group(1))</span><br></pre></td></tr></table></figure>

<p>依然想匹配中间数字，数字两边比较乱，省略都写成 <code> .*</code>，结果打印只有 7</p>
<p>贪婪匹配 .* 会匹配尽可能多的字符，123456 也被前面匹配了，最后得到内容只有 7</p>
<p>非贪婪匹配，尽可能匹配少的字符，<code>.*?</code> 来代替 <code>.*</code> ，最后得到结果 1234567</p>
<h5 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">content &#x3D; &#39;&#39;&#39;Hello 1234567 World This </span><br><span class="line">is a Regex Demo&#39;&#39;&#39;</span><br><span class="line">result &#x3D; re.match(&#39;^He.*?(\d+).*?Demo$&#39;, content)</span><br><span class="line">print(result.group(1))</span><br></pre></td></tr></table></figure>

<p>修改在字符串中加了换行符，没有匹配到结果，又调用了 group 会报错</p>
<p>因为匹配的是除换行符之外的任意字符，遇到换行符时，.* 就不能匹配了，导致匹配失败，只需要加一个修饰符 re.S 修正</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result &#x3D; re.match(&#39;^He.*?(\d+).*?Demo$&#39;, content, re.S)</span><br></pre></td></tr></table></figure>

<p>re.S 使匹配包括换行在内的所有字符</p>
<p>re.I 使匹配对大小写不敏感</p>
<h5 id="修饰符-1"><a href="#修饰符-1" class="headerlink" title="修饰符"></a>修饰符</h5><p>正则匹配遇到特殊字符时，使用转义 \</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">content &#x3D; &#39;(百度)www.baidu.com&#39;</span><br><span class="line">result &#x3D; re.match(&#39;\(百度\)www\.baidu\.com&#39;, content)</span><br></pre></td></tr></table></figure>

<h5 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h5><p>match() 是从字符串开头开始匹配的，开头不匹配就会失效</p>
<p>Search() 匹配时会扫描整个字符串，返回一个成功匹配结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html &#x3D; &#39;&#39;&#39;</span><br><span class="line">&lt;div id&#x3D;&quot;songs-list&quot;&gt;</span><br><span class="line">&lt;h2 class&#x3D;&quot;title&quot;&gt;经典老歌&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;introduction&quot;&gt;经典老歌列表</span><br><span class="line">&lt;ul id&#x3D;&quot;list&quot; class&#x3D;&quot;list-group&quot;&gt;</span><br><span class="line">	&lt;li data-view&#x3D;&quot;2&quot;&gt;一路上有你&lt;&#x2F;li&gt;</span><br><span class="line">	&lt;li data-view&#x3D;&quot;7”&gt;</span><br><span class="line">		&lt;a href&#x3D;&quot;&#x2F;2.mp3&quot; singer&#x3D;&quot;任贤齐&quot;&gt;沧海一卢笑&lt;&#x2F;a&gt; </span><br><span class="line">	&lt;&#x2F;li&gt;</span><br><span class="line">	&lt;li data-view&#x3D;&quot;4&quot; class&#x3D;&quot;active&quot;&gt;</span><br><span class="line">		&lt;a href&#x3D;&quot;&#x2F;3.mp3&quot; singer&#x3D;&quot;齐秦&quot;&gt;往事随风&lt;&#x2F;a&gt;</span><br><span class="line">	&lt;&#x2F;li&gt;</span><br><span class="line">	&lt;li data-view&#x3D;&quot;6&quot;&gt;&lt;a href&#x3D;&quot;&#x2F;4.mp3&quot; singer&#x3D;&quot;beyond&quot;&gt;尤辉岁月&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; </span><br><span class="line">	&lt;li data-view&#x3D;&quot;5&quot;&gt;&lt;a href&#x3D;&quot;&#x2F;S.mp3&quot; singer&#x3D;&quot;陈慧琳&quot;&gt;记事本&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; </span><br><span class="line">	&lt;li data-view&#x3D;&quot;5&quot;&gt;</span><br><span class="line">		&lt;a href&#x3D;&quot;&#x2F;6.mp3&quot; singer&#x3D;&quot;邓丽君&quot;&gt;但愿人长久&lt;&#x2F;a&gt;</span><br><span class="line">	&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;&#39;&#39;&#39;</span><br></pre></td></tr></table></figure>

<p>尝试获取 class 为 active 的 li 节点内部超链接包含的歌手名和歌名</p>
<p>此时需要提取第三个 li 节点下 a 节点的 singer 属性和文本</p>
<p>正则表达式可以以 li 开头，寻找下一个标识符 active，中间部分用 .<em>? 来匹配，接下来取 singer 属性值</em></p>
<p> <code>singer=&quot;(.*?)&quot;</code>  需要提取部分用小括号括起来，用 group 提取，两侧的便捷是双引号</p>
<p>接下来匹配 a 节点文本，左边界是  <code>&gt;</code>  右边界是 <code>&lt;/a&gt;</code> 目标内容用 <code>.*?</code> 匹配</p>
<p><code>&lt;li.*?active.*?singer=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result &#x3D; re.search(&#39;&lt;li.*?active.*?singer&#x3D;&quot;(.*?)&quot;&gt;(.*?)&lt;&#x2F;a&gt;&#39;, html, re.S)</span><br><span class="line">if result:</span><br><span class="line">	print(result.group(1), result.group(2))</span><br></pre></td></tr></table></figure>

<h5 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h5><p>search 返回匹配正则表达式第一个内容，想要匹配所有内容使用 findall() ，会搜索整个字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">results &#x3D; re.findall(&#39;&lt;li.*?href&#x3D;&quot;(.*?)&quot;.*?singer&#x3D;&quot;(.*?)&quot;&gt;(.*?)&lt;&#x2F;a&gt;&#39;, html, re.S)</span><br><span class="line">print(type(results))</span><br><span class="line">for result in results:</span><br><span class="line">print(result[0], result[1], result[2])</span><br></pre></td></tr></table></figure>

<p>返回的每个元素都是元组类型，用对应索引依次取出</p>
<h5 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h5><p>修改文本，把一串字符串中的数字去掉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">content &#x3D; &#39;54aKS4yrsoiRS4ix5L2g&#39;</span><br><span class="line">content &#x3D; re.sub(&#39;\d+&#39;,&#39;&#39;, content)</span><br></pre></td></tr></table></figure>

<p>上面 html 中需要获取歌名，直接正则表达式提取比较麻烦</p>
<p>借助 sub 方法将 a 节点去掉只留下文本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html &#x3D; re.sub(&#39;&lt;a.*?&gt;|&lt;&#x2F;a&gt;&#39;, &#39;&#39;, html)</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;songs-list&quot;&gt;</span><br><span class="line">&lt;h2 class&#x3D;&quot;title&quot;&gt;经典老歌&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;introduction&quot;&gt;经典老歌列表</span><br><span class="line">&lt;ul id&#x3D;&quot;list&quot; class&#x3D;&quot;list-group&quot;&gt;</span><br><span class="line">	&lt;li data-view&#x3D;&quot;2&quot;&gt;一路上有你&lt;&#x2F;li&gt;</span><br><span class="line">	&lt;li data-view&#x3D;&quot;7”&gt;</span><br><span class="line">		沧海一卢笑 </span><br><span class="line">	&lt;&#x2F;li&gt;</span><br><span class="line">	&lt;li data-view&#x3D;&quot;4&quot; class&#x3D;&quot;active&quot;&gt;</span><br><span class="line">		往事随风</span><br><span class="line">	&lt;&#x2F;li&gt;</span><br><span class="line">	&lt;li data-view&#x3D;&quot;6&quot;&gt;尤辉岁月&lt;&#x2F;li&gt; </span><br><span class="line">	&lt;li data-view&#x3D;&quot;5&quot;&gt;记事本&lt;&#x2F;li&gt; </span><br><span class="line">	&lt;li data-view&#x3D;&quot;5&quot;&gt;</span><br><span class="line">		但愿人长久</span><br><span class="line">	&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>再利用 findall 提取</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">results &#x3D; re.findall(&#39;&lt;li.*?&gt;(.*?)&lt;&#x2F;li&gt;&#39;, html, re.S)</span><br><span class="line">for result in results:</span><br><span class="line">	print(result.strip())</span><br></pre></td></tr></table></figure>

<p>strip 移除字符串首尾指定字符 strip() 去除首尾空格，strip(‘0’) 去除首尾字符 0</p>
<h5 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h5><p>将正则字符串编译成正则表达式对象，以便在后面的匹配中复用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">content1 &#x3D; &#39;2016-12-15 12:00&#39;</span><br><span class="line">content2 &#x3D; &#39;2016-12-17 12:55&#39;</span><br><span class="line">content3 &#x3D; &#39;2016-12-22 13:21&#39;</span><br><span class="line">pattern &#x3D; re.compile(&#39;\d&#123;2&#125;:\d&#123;2&#125;&#39;)</span><br><span class="line">result1 &#x3D; re.sub(pattern, &#39;&#39;, content1)</span><br><span class="line">result2 &#x3D; re.sub(pattern, &#39;&#39;, content2)</span><br><span class="line">result3 &#x3D; re.sub(pattern, &#39;&#39;, content3)</span><br><span class="line">print(result1, result2, result3)</span><br></pre></td></tr></table></figure>

<p>通过 compile 编译成正则表达式对象，后面就不用重复写正则表达式</p>
<hr>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4>]]></content>
  </entry>
  <entry>
    <title>dyld加载流程</title>
    <url>/2020/12/07/dyld%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h4><ul>
<li>库：编译好的二进制文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">源文件 -&gt; 预编译 -&gt; 编译 -&gt; 汇编 -&gt; 链接 -&gt; 可执行文件</span><br></pre></td></tr></table></figure>

<p><code>源文件</code>：.h、 .m、 .cpp 等文件</p>
<p><code>预编译</code>：替换宏、删除注释，产生 <code>.i</code> 文件</p>
<p><code>编译</code>：编译高级语言代码成汇编底层代码，生成汇编代码文件 <code>.s</code></p>
<p><code>汇编</code>：将汇编代码转变成机器可执行的指令 <code>.o</code></p>
<p><code>链接</code>：将引用的静态库与汇编生成的目标文件 <code>.o</code> 一起打包生成可执行文件</p>
<h4 id="动态库、静态库"><a href="#动态库、静态库" class="headerlink" title="动态库、静态库"></a>动态库、静态库</h4><ul>
<li>静态库 .a、 .lib</li>
</ul>
<p>在链接阶段，将汇编生成的目标文件.o与引用的库，一起链接打包到可执行文件</p>
<p>缺点：静态库会有两份，导致目标程序体积增大（编译时会直接拷贝一份，复制到目标程序里）</p>
<p>优点：编译完后，库文件就没有用了，目标程序没有外部依赖，可以直接运行</p>
<ul>
<li>动态库 .so</li>
</ul>
<p>编译时并不会链接到目标程序，只会存储指向动态库的引用，程序运行时才被载入</p>
<p>优点：多次使用共享内存，减少打包APP的体积</p>
<h4 id="dyld"><a href="#dyld" class="headerlink" title="dyld"></a>dyld</h4><p><code>dyld</code> ：动态库链接器，负责加载程序和程序依赖的动态库，内核读取 <code>Mach-O</code> 文件后，将读取内容交给 <code>dyld</code> 加载，<code>dyld</code> 加载完毕后才会执行 <code>main</code> 函数</p>
<p><code>dyld</code> 在系统中以一个用户态的可执行文件形式存在，一般应用程序会在 <code>Mach-O</code> 文件部分指定一个 <code>LC_LOAD_DYLINKER</code> 的加载命令，此加载命令指定了 <code>dyld</code> 的路径，通常默认值是 <code>/usr/lib/dyld</code></p>
<p>新建项目，在 <code>main</code> 函数中打断点，通过 <code>bt</code> 查看调用栈，看到 <code>App</code> 启动后会执行 <code>libdyld.dylib</code> 的 <code>start</code> 操作，这边调用栈的信息比较少</p>
<p><img src="/2020/12/07/dyld%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/%E5%90%AF%E5%8A%A8main%E6%96%AD%E7%82%B9.jpg" alt="启动main断点"></p>
<p>继续在  <code>ViewController</code> 中重写 <code>load</code> 方法 ，<code>load</code> 方法打断点，通过 <code>bt</code> 查看调用栈，发现一个 <code>_dyld_start</code> 的调用</p>
<p><img src="/2020/12/07/dyld%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/%E5%90%AF%E5%8A%A8load%E6%96%AD%E7%82%B9.jpg" alt="启动load断点"></p>
<p><code>dyld</code> 源码中搜索 <code>_dyld_start</code> ，可以在 <code>dyldStartup.s</code> 文件中找到 <code>_dyld_start</code> 的汇编实现，文件中按照 <code>i386</code>、<code>x86_64</code>、<code>arm64</code>、<code>arm</code> 不同架构做了逻辑处理</p>
<p>查看 <code>arm64</code> 架构下汇编源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __arm64__</span></span><br><span class="line">	.text</span><br><span class="line">	.align <span class="number">2</span></span><br><span class="line">	.globl __dyld_start</span><br><span class="line">__dyld_start:</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">// call dyldbootstrap::start(app_mh, argc, argv, dyld_mh, &amp;startGlue)</span></span><br><span class="line">	bl	__ZN13dyldbootstrap5startEPKN5dyld311MachOLoadedEiPPKcS3_Pm</span><br><span class="line">	...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __arm64__</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>找到关键部分代码，看到 <code>bl</code> 跳转指令，看注释信息，这边会调用 <code>dyldbootstrap::start</code> </p>
<h4 id="dyldbootstrap-start"><a href="#dyldbootstrap-start" class="headerlink" title="dyldbootstrap::start"></a>dyldbootstrap::start</h4><p>【1】<code>dyldbootstrap::start</code></p>
<p>源码中搜索 <code>dyldbootstrap</code> 命名空间的 <code>start</code> 方法，这是 <code>dyld</code> 的启动函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uintptr_t</span> <span class="title">start</span><span class="params">(<span class="keyword">const</span> dyld3::MachOLoaded* appsMachHeader, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[],</span></span></span><br><span class="line"><span class="function"><span class="params">				<span class="keyword">const</span> dyld3::MachOLoaded* dyldsMachHeader, <span class="keyword">uintptr_t</span>* startGlue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Emit kdebug tracepoint to indicate dyld bootstrap has started &lt;rdar://46878536&gt;</span></span><br><span class="line">    dyld3::kdebug_trace_dyld_marker(DBG_DYLD_TIMING_BOOTSTRAP_START, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// if kernel had to slide dyld, we need to fix up load sensitive locations</span></span><br><span class="line">	<span class="comment">// we have to do this before using any global variables</span></span><br><span class="line">    rebaseDyld(dyldsMachHeader);</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="comment">// set up random value for stack canary</span></span><br><span class="line">	__guard_setup(apple);</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line">	<span class="comment">// now that we are done bootstrapping dyld, call dyld&#x27;s main</span></span><br><span class="line">	<span class="keyword">uintptr_t</span> appsSlide = appsMachHeader-&gt;getSlide();</span><br><span class="line">	<span class="keyword">return</span> dyld::_main((macho_header*)appsMachHeader, appsSlide, argc, argv, envp, apple, startGlue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>dyldbootstrap::start</code> 主要操作：</p>
<ol>
<li><p>调用 <code>rebaseDyld()</code> dyld 重定位</p>
</li>
<li><p><code>__guard_setup</code> 栈溢出保护</p>
</li>
<li><p><code>dyld::_main</code> 进入 <code>dyld</code> 的 <code>_main</code> 函数</p>
</li>
</ol>
<h4 id="dyld-main"><a href="#dyld-main" class="headerlink" title="dyld::_main"></a>dyld::_main</h4><p>【2】<code>dyld::_main</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Entry point for dyld.  The kernel loads dyld and jumps to __dyld_start which</span></span><br><span class="line"><span class="comment">// sets up some registers and call this function.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Returns address of main() in target program which __dyld_start jumps to</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">uintptr_t</span></span><br><span class="line">_main(<span class="keyword">const</span> macho_header* mainExecutableMH, <span class="keyword">uintptr_t</span> mainExecutableSlide, </span><br><span class="line">		<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[], <span class="keyword">const</span> <span class="keyword">char</span>* envp[], <span class="keyword">const</span> <span class="keyword">char</span>* apple[], </span><br><span class="line">		<span class="keyword">uintptr_t</span>* startGlue)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">//【1】初始化程序运行环境</span></span><br><span class="line">    <span class="comment">// Grab the cdHash of the main executable from the environment</span></span><br><span class="line">	<span class="keyword">uint8_t</span> mainExecutableCDHashBuffer[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">uint8_t</span>* mainExecutableCDHash = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">if</span> ( hexToBytes(_simple_getenv(apple, <span class="string">&quot;executable_cdhash&quot;</span>), <span class="number">40</span>, mainExecutableCDHashBuffer) )</span><br><span class="line">		mainExecutableCDHash = mainExecutableCDHashBuffer;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="keyword">uintptr_t</span> result = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//获取主程序的macho_header结构以及主程序的slide偏移值</span></span><br><span class="line">  <span class="comment">//保存执行文件头部，后续可以根据头部访问其他信息</span></span><br><span class="line">	sMainExecutableMachHeader = mainExecutableMH;</span><br><span class="line">	sMainExecutableSlide = mainExecutableSlide;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	CRSetCrashLogMessage(<span class="string">&quot;dyld: launch started&quot;</span>);</span><br><span class="line">	<span class="comment">//设置上下文信息</span></span><br><span class="line">	setContext(mainExecutableMH, argc, argv, envp, apple);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Pickup the pointer to the exec path.</span></span><br><span class="line">	<span class="comment">//获取可执行文件路径</span></span><br><span class="line">	sExecPath = _simple_getenv(apple, <span class="string">&quot;executable_path&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// &lt;rdar://problem/13868260&gt; Remove interim apple[0] transition code from dyld</span></span><br><span class="line">	<span class="keyword">if</span> (!sExecPath) sExecPath = apple[<span class="number">0</span>];</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取进程名称</span></span><br><span class="line">	<span class="comment">// Remember short name of process for later logging</span></span><br><span class="line">	sExecShortName = ::<span class="built_in">strrchr</span>(sExecPath, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span> ( sExecShortName != <span class="literal">NULL</span> )</span><br><span class="line">		++sExecShortName;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		sExecShortName = sExecPath;</span><br><span class="line">	</span><br><span class="line">	  <span class="comment">//配置进程受限模式</span></span><br><span class="line">    configureProcessRestrictions(mainExecutableMH, envp);</span><br><span class="line">	...</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//检查环境变量配置</span></span><br><span class="line">		checkEnvironmentVariables(envp);</span><br><span class="line">    <span class="comment">//如果 DYLD_FALLBACK 为nil，将其设置为默认值</span></span><br><span class="line">		defaultUninitializedFallbackPaths(envp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//如果设置了 DYLD_PRINT_OPTS 环境变量，则打印参数</span></span><br><span class="line">	<span class="keyword">if</span> ( sEnv.DYLD_PRINT_OPTS )</span><br><span class="line">		printOptions(argv);</span><br><span class="line">  <span class="comment">//如果设置了 DYLD_PRINT_ENV 环境变量，则打印环境变量</span></span><br><span class="line">	<span class="keyword">if</span> ( sEnv.DYLD_PRINT_ENV ) </span><br><span class="line">		printEnvironmentVariables(envp);</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="comment">//读取Mach-O文件的header，获取当前程序架构信息</span></span><br><span class="line">	getHostInfo(mainExecutableMH, mainExecutableSlide);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// load shared cache</span></span><br><span class="line">	<span class="comment">//【2】加载共享缓存 shared cache</span></span><br><span class="line">  <span class="comment">//检查共享缓存是否开启 iOS中必须开启</span></span><br><span class="line">	checkSharedRegionDisable((dyld3::MachOLoaded*)mainExecutableMH, mainExecutableSlide);</span><br><span class="line">	<span class="keyword">if</span> ( gLinkContext.sharedRegionMode != ImageLoader::kDontUseSharedRegion ) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> TARGET_OS_SIMULATOR</span></span><br><span class="line">		<span class="keyword">if</span> ( sSharedCacheOverrideDir)</span><br><span class="line">      <span class="comment">//将共享缓存映射到共享区域</span></span><br><span class="line">			mapSharedCache();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">		mapSharedCache();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// add dyld itself to UUID list</span></span><br><span class="line">		addDyldImageToUUIDList();</span><br><span class="line">		...</span><br><span class="line">		CRSetCrashLogMessage(sLoadingCrashMessage);</span><br><span class="line">		<span class="comment">// instantiate ImageLoader for main executable</span></span><br><span class="line">		<span class="comment">//【3】实例化主程序，并赋值给ImageLoader::LinkContext</span></span><br><span class="line">    <span class="comment">//加载可执行文件并生成一个ImageLoader实例对象</span></span><br><span class="line">		sMainExecutable = instantiateFromLoadedImage(mainExecutableMH, mainExecutableSlide, sExecPath);</span><br><span class="line">		gLinkContext.mainExecutable = sMainExecutable;</span><br><span class="line">		gLinkContext.mainExecutableCodeSigned = hasCodeSignatureLoadCommand(mainExecutableMH);</span><br><span class="line">		...</span><br><span class="line"></span><br><span class="line">		<span class="comment">// load any inserted libraries</span></span><br><span class="line">		<span class="comment">//【4】加载插入的动态库（加载所有 DYLD_INSERT_LIBRARIES 指定的库）</span></span><br><span class="line">		<span class="keyword">if</span>	( sEnv.DYLD_INSERT_LIBRARIES != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">      <span class="comment">//遍历 DYLD_INSERT_LIBRARIES 环境变量</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span>* lib = sEnv.DYLD_INSERT_LIBRARIES; *lib != <span class="literal">NULL</span>; ++lib) </span><br><span class="line">				loadInsertedDylib(*lib);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// record count of inserted libraries so that a flat search will look at </span></span><br><span class="line">		<span class="comment">// inserted libraries, then main, then others.</span></span><br><span class="line">		sInsertedDylibCount = sAllImages.size()<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// link main executable</span></span><br><span class="line">		<span class="comment">//【5】链接主程序</span></span><br><span class="line">		gLinkContext.linkingMainExecutable = <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SUPPORT_ACCELERATE_TABLES</span></span><br><span class="line">		<span class="keyword">if</span> ( mainExcutableAlreadyRebased ) &#123;</span><br><span class="line">			<span class="comment">// previous link() on main executable has already adjusted its internal pointers for ASLR</span></span><br><span class="line">			<span class="comment">// work around that by rebasing by inverse amount</span></span><br><span class="line">			sMainExecutable-&gt;rebase(gLinkContext, -mainExecutableSlide);</span><br><span class="line">		&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">		link(sMainExecutable, sEnv.DYLD_BIND_AT_LAUNCH, <span class="literal">true</span>, ImageLoader::RPathChain(<span class="literal">NULL</span>, <span class="literal">NULL</span>), <span class="number">-1</span>);</span><br><span class="line">		sMainExecutable-&gt;setNeverUnloadRecursive();</span><br><span class="line">		<span class="keyword">if</span> ( sMainExecutable-&gt;forceFlat() ) &#123;</span><br><span class="line">			gLinkContext.bindFlat = <span class="literal">true</span>;</span><br><span class="line">			gLinkContext.prebindUsage = ImageLoader::kUseNoPrebinding;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//【6】链接插入的动态库</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// link any inserted libraries</span></span><br><span class="line">		<span class="comment">// do this after linking main executable so that any dylibs pulled in by inserted </span></span><br><span class="line">		<span class="comment">// dylibs (e.g. libSystem) will not be in front of dylibs the program uses</span></span><br><span class="line">		<span class="keyword">if</span> ( sInsertedDylibCount &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>; i &lt; sInsertedDylibCount; ++i) &#123;</span><br><span class="line">				ImageLoader* image = sAllImages[i+<span class="number">1</span>];</span><br><span class="line">				link(image, sEnv.DYLD_BIND_AT_LAUNCH, <span class="literal">true</span>, ImageLoader::RPathChain(<span class="literal">NULL</span>, <span class="literal">NULL</span>), <span class="number">-1</span>);</span><br><span class="line">				image-&gt;setNeverUnloadRecursive();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> ( gLinkContext.allowInterposing ) &#123;</span><br><span class="line">				<span class="comment">// only INSERTED libraries can interpose</span></span><br><span class="line">				<span class="comment">// register interposing info after all inserted libraries are bound so chaining works</span></span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>; i &lt; sInsertedDylibCount; ++i) &#123;</span><br><span class="line">					ImageLoader* image = sAllImages[i+<span class="number">1</span>];</span><br><span class="line">					image-&gt;registerInterposing(gLinkContext);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		...</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//【7】链接所有插入的image后，执行弱符号绑定</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// &lt;rdar://problem/12186933&gt; do weak binding only after all inserted images linked</span></span><br><span class="line">		sMainExecutable-&gt;weakBind(gLinkContext);</span><br><span class="line">		gLinkContext.linkingMainExecutable = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		sMainExecutable-&gt;recursiveMakeDataReadOnly(gLinkContext);</span><br><span class="line"></span><br><span class="line">		CRSetCrashLogMessage(<span class="string">&quot;dyld: launch, running initializers&quot;</span>);</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">if</span> SUPPORT_OLD_CRT_INITIALIZATION</span></span><br><span class="line">		<span class="comment">// Old way is to run initializers via a callback from crt1.o</span></span><br><span class="line">		<span class="keyword">if</span> ( ! gRunInitializersOldWay ) </span><br><span class="line">			initializeMainExecutable(); </span><br><span class="line">	<span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">		<span class="comment">//【8】执行所有初始化方法</span></span><br><span class="line">		<span class="comment">// run all initializers</span></span><br><span class="line">		initializeMainExecutable(); </span><br><span class="line">	<span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">		...</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//【9】查找主程序的入口并返回</span></span><br><span class="line">			<span class="comment">// find entry point for main executable</span></span><br><span class="line">			result = (<span class="keyword">uintptr_t</span>)sMainExecutable-&gt;getEntryFromLC_MAIN();</span><br><span class="line">			<span class="keyword">if</span> ( result != <span class="number">0</span> ) &#123;</span><br><span class="line">				<span class="comment">// main executable uses LC_MAIN, we need to use helper in libdyld to call into main()</span></span><br><span class="line">				<span class="keyword">if</span> ( (gLibSystemHelpers != <span class="literal">NULL</span>) &amp;&amp; (gLibSystemHelpers-&gt;version &gt;= <span class="number">9</span>) )</span><br><span class="line">					*startGlue = (<span class="keyword">uintptr_t</span>)gLibSystemHelpers-&gt;startGlueToCallExit;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					halt(<span class="string">&quot;libdyld.dylib support not present for LC_MAIN&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// main executable uses LC_UNIXTHREAD, dyld needs to let &quot;start&quot; in program set up for main()</span></span><br><span class="line">				result = (<span class="keyword">uintptr_t</span>)sMainExecutable-&gt;getEntryFromLC_UNIXTHREAD();</span><br><span class="line">				*startGlue = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="dyld-加载流程"><a href="#dyld-加载流程" class="headerlink" title="dyld 加载流程"></a><code>dyld</code> 加载流程</h4><p><code>dyld</code> 的加载流程主要包括以下 9 个步骤：</p>
<ol>
<li>主程序运行环境初始化，获取当前运行架构</li>
<li>加载共享缓存，检查共享缓存是否映射到共享区域</li>
<li>加载可执行文件，生成一个 <code>ImageLoader</code> 实例对象</li>
<li>加载插入的动态库</li>
<li>链接主程序</li>
<li>链接动态库</li>
<li>弱符号绑定</li>
<li>执行初始化方法</li>
<li>寻找程序入口 <code>LC_MAIN</code></li>
</ol>
<ul>
<li>分析第 8 步</li>
</ul>
<h4 id="initializeMainExecutable-执行初始化方法"><a href="#initializeMainExecutable-执行初始化方法" class="headerlink" title="initializeMainExecutable 执行初始化方法"></a>initializeMainExecutable 执行初始化方法</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initializeMainExecutable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">//循环遍历，对插入的 dylib 调用 runInitializers 方法进行初始化</span></span><br><span class="line">	<span class="comment">// run initialzers for any inserted dylibs</span></span><br><span class="line">	ImageLoader::InitializerTimingList initializerTimes[allImagesCount()];</span><br><span class="line">	initializerTimes[<span class="number">0</span>].count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">size_t</span> rootCount = sImageRoots.size();</span><br><span class="line">	<span class="keyword">if</span> ( rootCount &gt; <span class="number">1</span> ) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">1</span>; i &lt; rootCount; ++i) &#123;</span><br><span class="line">			sImageRoots[i]-&gt;runInitializers(gLinkContext, initializerTimes[<span class="number">0</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//主程序调用 runInitializers 方法初始化</span></span><br><span class="line">	<span class="comment">// run initializers for main executable and everything it brings up </span></span><br><span class="line">	sMainExecutable-&gt;runInitializers(gLinkContext, initializerTimes[<span class="number">0</span>]);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>runInitializers</code>  内部调用了 <code>processInitializers</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ImageLoader::runInitializers</span><span class="params">(<span class="keyword">const</span> LinkContext&amp; context, InitializerTimingList&amp; timingInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">	processInitializers(context, thisThread, timingInfo, up);</span><br><span class="line">	context.notifyBatch(dyld_image_state_initialized, <span class="literal">false</span>);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>processInitializers</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ImageLoader::processInitializers</span><span class="params">(<span class="keyword">const</span> LinkContext&amp; context, <span class="keyword">mach_port_t</span> thisThread, InitializerTimingList&amp; timingInfo, ImageLoader::UninitedUpwards&amp; images)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">// Calling recursive init on all images in images list, building a new list of</span></span><br><span class="line">	<span class="comment">// uninitialized upward dependencies.</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">uintptr_t</span> i=<span class="number">0</span>; i &lt; images.count; ++i) &#123;</span><br><span class="line">		images.imagesAndPaths[i].first-&gt;recursiveInitialization(context, thisThread, images.imagesAndPaths[i].second, timingInfo, ups);</span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对镜像列表调用 <code>recursiveInitialization</code> 递归初始化</p>
<p><code>recursiveInitialization</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ImageLoader::recursiveInitialization</span><span class="params">(<span class="keyword">const</span> LinkContext&amp; context, <span class="keyword">mach_port_t</span> this_thread, <span class="keyword">const</span> <span class="keyword">char</span>* pathToInitialize, InitializerTimingList&amp; timingInfo, UninitedUpwards&amp; uninitUps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">recursive_lock <span class="title">lock_info</span><span class="params">(this_thread)</span></span>;</span><br><span class="line">	recursiveSpinLock(lock_info); <span class="comment">//递归枷锁</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ( fState &lt; dyld_image_state_dependents_initialized<span class="number">-1</span> ) &#123;</span><br><span class="line">		<span class="keyword">uint8_t</span> oldState = fState;</span><br><span class="line">		<span class="comment">// break cycles</span></span><br><span class="line">		fState = dyld_image_state_dependents_initialized<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// initialize lower level libraries first</span></span><br><span class="line">			...</span><br><span class="line"></span><br><span class="line">			<span class="comment">// let objc know we are about to initialize this image 让objc知道将要初始化镜像</span></span><br><span class="line">			<span class="keyword">uint64_t</span> t1 = mach_absolute_time();</span><br><span class="line">			fState = dyld_image_state_dependents_initialized;</span><br><span class="line">			oldState = fState;</span><br><span class="line">			context.notifySingle(dyld_image_state_dependents_initialized, <span class="keyword">this</span>, &amp;timingInfo);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// initialize this image 初始化镜像</span></span><br><span class="line">			<span class="keyword">bool</span> hasInitializers = <span class="keyword">this</span>-&gt;doInitialization(context);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// let anyone know we finished initializing this image 镜像初始化完成</span></span><br><span class="line">			fState = dyld_image_state_initialized;</span><br><span class="line">			oldState = fState;</span><br><span class="line">			context.notifySingle(dyld_image_state_initialized, <span class="keyword">this</span>, <span class="literal">NULL</span>);</span><br><span class="line">			...</span><br><span class="line">		&#125;</span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line">	recursiveSpinUnLock();<span class="comment">//递归解锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>initializeMainExecutable</code> -&gt; <code>runInitializers</code> -&gt; <code>processInitializers</code> -&gt; <code>recursiveInitialization</code> -&gt; <code>notifySingle</code></p>
<h5 id="doInitialization"><a href="#doInitialization" class="headerlink" title="doInitialization"></a>doInitialization</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ImageLoaderMachO::doInitialization</span><span class="params">(<span class="keyword">const</span> LinkContext&amp; context)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CRSetCrashLogMessage2(<span class="keyword">this</span>-&gt;getPath());</span><br><span class="line"></span><br><span class="line">	<span class="comment">// mach-o has -init and static initializers</span></span><br><span class="line">	doImageInit(context);</span><br><span class="line">	doModInitFunctions(context);<span class="comment">//加载c++构造函数</span></span><br><span class="line">	</span><br><span class="line">	CRSetCrashLogMessage2(<span class="literal">NULL</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> (fHasDashInit || fHasInitializers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c++构造方法，在 <code>mach-O</code>的 <code>data段</code> 中对应 <code>__mod_init_func</code></p>
<h5 id="notifySingle"><a href="#notifySingle" class="headerlink" title="notifySingle"></a>notifySingle</h5><p>继续在 <code>dyld2.cpp</code> 中找到 <code>notifySingle</code> 实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">notifySingle</span><span class="params">(dyld_image_states state, <span class="keyword">const</span> ImageLoader* image, ImageLoader::InitializerTimingList* timingInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">if</span> ( (state == dyld_image_state_dependents_initialized) &amp;&amp; (sNotifyObjCInit != <span class="literal">NULL</span>) &amp;&amp; image-&gt;notifyObjC() ) &#123;</span><br><span class="line">		<span class="keyword">uint64_t</span> t0 = mach_absolute_time();</span><br><span class="line">		<span class="function">dyld3::ScopedTimer <span class="title">timer</span><span class="params">(DBG_DYLD_TIMING_OBJC_INIT, (<span class="keyword">uint64_t</span>)image-&gt;machHeader(), <span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">		(*sNotifyObjCInit)(image-&gt;getRealPath(), image-&gt;machHeader());</span><br><span class="line">		<span class="keyword">uint64_t</span> t1 = mach_absolute_time();</span><br><span class="line">		<span class="keyword">uint64_t</span> t2 = mach_absolute_time();</span><br><span class="line">		<span class="keyword">uint64_t</span> timeInObjC = t1-t0;</span><br><span class="line">		<span class="keyword">uint64_t</span> emptyTime = (t2-t1)*<span class="number">100</span>;</span><br><span class="line">		<span class="keyword">if</span> ( (timeInObjC &gt; emptyTime) &amp;&amp; (timingInfo != <span class="literal">NULL</span>) ) &#123;</span><br><span class="line">			timingInfo-&gt;addTime(image-&gt;getShortName(), timeInObjC);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关键函数指针 <code>sNotifyObjCInit</code> ，当前文件搜索 <code>sNotifyObjCInit</code> 找到赋值的地方</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerObjCNotifiers</span><span class="params">(_dyld_objc_notify_mapped mapped, _dyld_objc_notify_init init, _dyld_objc_notify_unmapped unmapped)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// record functions to call</span></span><br><span class="line">	sNotifyObjCMapped	= mapped;</span><br><span class="line">	sNotifyObjCInit		= init;</span><br><span class="line">	sNotifyObjCUnmapped = unmapped;</span><br></pre></td></tr></table></figure>

<p>再全局搜索 <code>registerObjCNotifiers</code> 查找到调用的地方</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _dyld_objc_notify_register(_dyld_objc_notify_mapped    mapped,</span><br><span class="line">                                _dyld_objc_notify_init      init,</span><br><span class="line">                                _dyld_objc_notify_unmapped  unmapped)</span><br><span class="line">&#123;</span><br><span class="line">	dyld::registerObjCNotifiers(mapped, init, unmapped);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>什么时候调用了 <code>_dyld_objc_notify_register</code> ?</p>
<p>通过添加 <code>_dyld_objc_notify_register</code> 符号断点，运行后发现调用者是 <code>_objc_init</code>， <code>_objc_init</code> 函数是 <code>Runtime</code> 的入口函数</p>
<p><img src="/2020/12/07/dyld%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/notifi_register.jpg" alt="notifi_register"></p>
<h4 id="objc-init"><a href="#objc-init" class="headerlink" title="_objc_init"></a>_objc_init</h4><p><code>_objc_init</code> 需要在 <code>libobjc</code> 源码中查看</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Called by libSystem BEFORE library initialization time</span></span><br><span class="line"><span class="keyword">void</span> _objc_init(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> initialized = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (initialized) <span class="keyword">return</span>;</span><br><span class="line">    initialized = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// fixme defer initialization until an objc-using image is found?</span></span><br><span class="line">    environ_init();</span><br><span class="line">    tls_init();</span><br><span class="line">    static_init();</span><br><span class="line">    runtime_init();</span><br><span class="line">    exception_init();</span><br><span class="line">    cache_init();</span><br><span class="line">    _imp_implementationWithBlock_init();</span><br><span class="line">    <span class="comment">//注册回调函数</span></span><br><span class="line">    _dyld_objc_notify_register(&amp;map_images, load_images, unmap_image);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __OBJC2__</span></span><br><span class="line">    didCallDyldNotifyRegister = <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看函数注释意思，<code>_objc_init</code> 的调用时机是在其他动态库初始化之前，由 <code>libSystem</code> 系统库调用</p>
<p>所以 <code>dyld</code> 加载的第 8 步，在初始化所有动态库和主程序之前，就注册了 <code>load_images</code> 的回调，Runtime调用 <code>load_images</code> 加载完所有 <code>load</code> 方法之后，就回调到 <code>dyld::_main</code> 的 <code>initializeMainExecutable()</code> </p>
<p><img src="/2020/12/07/dyld%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/dyld.png" alt="dyld"></p>
<h4 id="共享缓存"><a href="#共享缓存" class="headerlink" title="共享缓存"></a>共享缓存</h4><p><code>dyld</code> 加载时，为了优化程序启动，启用了共享缓存技术。共享缓存会在进程启动时被 <code>dyld</code> 映射到内存中，之后，当任何 <code>Mach-O</code> 镜像加载时，<code>dyld</code> 首先会检查该 <code>Mach-O</code> 镜像与所需的动态库是否在共享缓存中，如果存在，则直接将它在共享内存中的内存地址映射到进程的内存地址空间。在程序依赖的系统动态库很多的情况下，这种做法对程序启动性能是有明显提升的。</p>
<p><a href="https://opensource.apple.com/tarballs/dyld/">dyld750.6下载</a></p>
<p><a href="https://www.jianshu.com/p/e383013ca846">dyld 流程分析</a></p>
<p><a href="https://www.jianshu.com/p/db765ff4e36a">dyld加载流程</a></p>
]]></content>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战</title>
    <url>/2021/02/26/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h4 id="Python-IDE"><a href="#Python-IDE" class="headerlink" title="Python IDE"></a>Python IDE</h4><h5 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h5><p>配置</p>
<p>终端 which python3 查看 python3 路径</p>
<p>Preference-Project:pythonProject-PythonInterpreter</p>
<p>Show All 添加 上面 python 路径</p>
<h4 id="Python-版本"><a href="#Python-版本" class="headerlink" title="Python 版本"></a>Python 版本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python 3.7.9</span><br></pre></td></tr></table></figure>

<h4 id="请求库安装"><a href="#请求库安装" class="headerlink" title="请求库安装"></a>请求库安装</h4><h5 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h5><p>阻塞式 HTTP 请求，发出请求后，会一直等待服务器响应</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install requests</span><br></pre></td></tr></table></figure>

<p>验证安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; import requests</span><br></pre></td></tr></table></figure>

<h5 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h5><p>自动化测试工具，可以驱动浏览器执行特定的动作，如点击、下拉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install selenium</span><br></pre></td></tr></table></figure>

<h5 id="ChromeDriver"><a href="#ChromeDriver" class="headerlink" title="ChromeDriver"></a>ChromeDriver</h5><p>Selenium 是一个自动化测试工具，需要配合浏览器使用</p>
<p>安装 ChromeDriver 才能驱动 Chrome 浏览器完成相应操作</p>
<p>查看 Chrome 版本号：帮助-关于 Google Chrome 版本 88.0.4324.192（正式版本） (x86_64)</p>
<p>ChromeDriver <a href="http://npm.taobao.org/mirrors/chromedriver/">下载地址</a> 选择 88.0.4324.96/chromedriver_mac64.zip  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mv chromedriver &#x2F;usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure>

<p>验证安装： 终端输入 chromedriver 开启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; from selenium import webdriver</span><br><span class="line">&gt;&gt;&gt; browser &#x3D; webdriver.Chrome()</span><br></pre></td></tr></table></figure>

<p>运行后，弹出一个空白 Chrome 浏览器，证明配置没问题</p>
<h5 id="GeckoDriver"><a href="#GeckoDriver" class="headerlink" title="GeckoDriver"></a>GeckoDriver</h5><p> <a href="https://github.com/mozilla/geckodriver/releases">下载地址</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mv geckodriver &#x2F;usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure>

<p>验证安装： 终端输入 geckodriver 开启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; from selenium import webdriver</span><br><span class="line">&gt;&gt;&gt; browser &#x3D; webdriver.Firefox()</span><br></pre></td></tr></table></figure>

<h5 id="PhantomJS"><a href="#PhantomJS" class="headerlink" title="PhantomJS"></a><del>PhantomJS</del></h5><p><del>无界面的、可脚本编程的 WebKit 浏览器引擎</del></p>
<p><del>Selenium 支持 PhantomJS，这样运行的时候就不会再弹出一个浏览器了</del></p>
<p><a href="https://phantomjs.org/download.html">下载地址</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mv phantomjs &#x2F;usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure>

<p><del>验证安装： 终端输入 phantomjs</del></p>
<p><del>Selenium中使用，只需要将 Chrome 切换为 PhantomJS</del></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver </span><br><span class="line">browser &#x3D; webdriver.PhantomJS() </span><br><span class="line">browser.get(&#39;https:&#x2F;&#x2F;www.baidu.com’) </span><br><span class="line">print(browser.current_url)</span><br></pre></td></tr></table></figure>

<p>报错了：<code>Selenium support for PhantomJS has been deprecated</code></p>
<p>使用无界面版本 <code>use headless versions of Chrome or Firefox instead</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"># 创建chrome参数对象</span><br><span class="line">opt &#x3D; webdriver.ChromeOptions()</span><br><span class="line"># 把chrome设置成无界面模式，不论windows还是linux都可以，自动适配对应参数</span><br><span class="line">opt.set_headless()</span><br><span class="line"># 创建chrome无界面对象</span><br><span class="line">driver &#x3D; webdriver.Chrome(options&#x3D;opt)</span><br><span class="line"># 访问百度</span><br><span class="line">driver.get(&#39;https:&#x2F;&#x2F;baidu.com&#x2F;&#39;)</span><br><span class="line">#打印内容</span><br><span class="line">print(driver.page_source)</span><br></pre></td></tr></table></figure>

<h5 id="aiohttp"><a href="#aiohttp" class="headerlink" title="aiohttp"></a>aiohttp</h5><p>异步 Web 服务的库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install aiohttp</span><br></pre></td></tr></table></figure>

<p>字符编码检测库 cchardet , 加速 DNS 的解析库  aiodns</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install cchardet aiodns</span><br></pre></td></tr></table></figure>

<h4 id="解析库安装"><a href="#解析库安装" class="headerlink" title="解析库安装"></a>解析库安装</h4><h5 id="lxml"><a href="#lxml" class="headerlink" title="lxml"></a>lxml</h5><p>Python 的一个解析库，支持 HTML 和 XML 的解析，支持 XPath 解析方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install lxml</span><br></pre></td></tr></table></figure>

<h5 id="Beautiful-Soup"><a href="#Beautiful-Soup" class="headerlink" title="Beautiful Soup"></a>Beautiful Soup</h5><p>Python 的一个 HTML 或 XML 的解析库</p>
<p>Beautiful Soup 的 HTML 和 XML 解析器是依赖于 lxml 库的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install beautifulsoup4</span><br></pre></td></tr></table></figure>

<p>验证安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; from bs4 import BeautifulSoup</span><br><span class="line">&gt;&gt;&gt; soup &#x3D; BeautifulSoup(&#39;&lt;p&gt;Hello&lt;&#x2F;p&gt;&#39;, &#39;lxml&#39;)</span><br><span class="line">&gt;&gt;&gt; print(soup.p.string)</span><br></pre></td></tr></table></figure>

<h5 id="pyquery"><a href="#pyquery" class="headerlink" title="pyquery"></a>pyquery</h5><p>网页解析工具，提供和 jQuery类型语法来解析 HTML 文档，支持 CSS 选择器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install pyquery</span><br></pre></td></tr></table></figure>

<h5 id="tesserocr"><a href="#tesserocr" class="headerlink" title="tesserocr"></a>tesserocr</h5><p>OCR 识别</p>
<p>使用 Homebrew 安装 ImageMagick 和 tesseract 库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install imagemagick</span><br><span class="line">brew install tesseract-lang</span><br><span class="line">pip3 install tesserocr pillow</span><br></pre></td></tr></table></figure>

<p><a href="http://my.cnki.net/elibregister/CheckCode.aspx">验证码测试连接</a></p>
<p>使用命令行测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tesseract image.png result -1 eng &amp;&amp; cat result.txt</span><br></pre></td></tr></table></figure>

<p>Python 代码测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; import tesserocr</span><br><span class="line">&gt;&gt;&gt; from PIL import Image</span><br><span class="line">&gt;&gt;&gt; image &#x3D; Image.open(&#39;&#x2F;Users&#x2F;midland_whk&#x2F;Downloads&#x2F;CheckCode.aspx.jpeg&#39;)</span><br><span class="line">&gt;&gt;&gt; print(tesserocr.image_to_text(image))</span><br><span class="line">或者</span><br><span class="line">&gt;&gt;&gt; print(tesserocr.file_to_text(&#39;image.png&#39;))</span><br></pre></td></tr></table></figure>

<h4 id="数据库安装"><a href="#数据库安装" class="headerlink" title="数据库安装"></a>数据库安装</h4><h5 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h5><p>轻量级关系型数据库</p>
<p><a href="https://downloads.mysql.com/archives/community/">下载地址</a></p>
<p>MySQL安装后 <code>open ~/.bash_profile</code><br>添加 <code>PATH=$PATH:/usr/local/mysql/bin</code><br>生效 <code>source ~/.bash_profile</code><br>终端登录mysql <code>mysql -uroot -p</code></p>
<p>或者 Homebrew 方式安装 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure>

<p>启动、停止、重启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mysql.server start </span><br><span class="line">sudo mysql.server stop </span><br><span class="line">sudo mysql.server restart</span><br></pre></td></tr></table></figure>

<h5 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h5><p>C++编写的非关系型数据库，内容存储形式类似 JSON 对象，字段值可以包含其它文档、数组及文档数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install mongodb</span><br></pre></td></tr></table></figure>

<p>启动、停止和重启 MongoDB</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew services start mongodb </span><br><span class="line">sudo mongod</span><br><span class="line">brew services stop mongodb </span><br><span class="line">brew services restart mongodb</span><br></pre></td></tr></table></figure>

<h5 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h5><p>基于内存的高效的非关系型数据库</p>
<h4 id="Python-存储库"><a href="#Python-存储库" class="headerlink" title="Python 存储库"></a>Python 存储库</h4><p>MySQL 需要安装 PyMySQL</p>
<p>MongoDB 需要安装 PyMongo</p>
<h5 id="PyMySQL"><a href="#PyMySQL" class="headerlink" title="PyMySQL"></a>PyMySQL</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import pymysql</span><br><span class="line">&gt;&gt;&gt; pymysql.VERSION</span><br><span class="line">(1, 0, 2, None)</span><br></pre></td></tr></table></figure>

<h5 id="PyMongo"><a href="#PyMongo" class="headerlink" title="PyMongo"></a>PyMongo</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install pymongo</span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import pymongo </span><br><span class="line">&gt;&gt;&gt; pymongo.version</span><br></pre></td></tr></table></figure>

<h5 id="redis-py"><a href="#redis-py" class="headerlink" title="redis-py"></a>redis-py</h5><p>Redis 使用 redis-py 库来与其交互</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install redis</span><br></pre></td></tr></table></figure>

<h5 id="RedisDump"><a href="#RedisDump" class="headerlink" title="RedisDump"></a>RedisDump</h5><p>RedisDump 一个用于 Redis 数据导入/导出的工具，基于 Ruby 实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem install redis-dump</span><br></pre></td></tr></table></figure>

<p>验证：安装成功后执行下面命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis dump </span><br><span class="line">redis-load</span><br></pre></td></tr></table></figure>

<h5 id="Web-库安装"><a href="#Web-库安装" class="headerlink" title="Web 库安装"></a>Web 库安装</h5><h5 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h5><p>轻量级的 Web 服务程序，主要用来做一些 API 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install flask</span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">@app.route(&quot;&#x2F;&quot;)</span><br><span class="line">def hello():</span><br><span class="line">    return &quot;hello world&quot;</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p>运行后，系统会在 5000 端口开启 Web 服务</p>
<h5 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h5><p>支持异步的 Web 框架，通过使用非阻塞 I/O 流，可以支撑成千上万的开放连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install tornado</span><br></pre></td></tr></table></figure>

<p>验证 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tornado.ioloop</span><br><span class="line">import tornado.web</span><br><span class="line"></span><br><span class="line">class MainHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        self.write(&quot;hello world&quot;)</span><br><span class="line">def make_app():</span><br><span class="line">    return  tornado.web.Application([</span><br><span class="line">        (r&quot;&#x2F;&quot;, MainHandler)</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app &#x3D; make_app()</span><br><span class="line">    app.listen(8888)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>

<p>运行后，系统在 8888 端口运行了 Web 服务， 访问 <a href="http://127.0.0.8888/">http://127.0.0.8888/</a> 网页呈现 helloworld</p>
<h4 id="APP-爬取相关库安装"><a href="#APP-爬取相关库安装" class="headerlink" title="APP 爬取相关库安装"></a>APP 爬取相关库安装</h4><h5 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h5><h5 id="mitmproxy"><a href="#mitmproxy" class="headerlink" title="mitmproxy"></a>mitmproxy</h5><p>支持 HTTP 和 HTTPS 的抓包程序，通过控制台的形式操作</p>
<p>有两个关联组件</p>
<p>mitmdump：是 mitmproxy 命令行接口，利用它对接 Python 脚本</p>
<p>mitmweb：一个 Web 程序，通过它以清楚观察到 mitmproxy 捕获请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install mitmproxy</span><br></pre></td></tr></table></figure>

<p>证书配置</p>
<p>mitmproxy 安装后会提供一套 CA 证书，运行 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump</span><br></pre></td></tr></table></figure>

<p>在用户目录 .mitmproxy 目录里面找到 CA 证书</p>
<p>配置：</p>
<p>双击 mitmproxy-ca-cert.pem 弹出钥匙串管理，找到 mitmproxy 证书，打开设置，选始终信任</p>
<p>将 mitmproxy-ca-cert.pem 隔空投送到手机设备，安装</p>
<ul>
<li>设置代理</li>
</ul>
<p>启动 mitmproxy，之后会在 8080 端口上运行一个代理服务，右下角显示当前正在监听的端口，或者启动 mitmdump，也会监听 8080 端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmproxy</span><br></pre></td></tr></table></figure>

<p>手机设置代理 端口号设置 8080</p>
<p>设置好之后，手机浏览请求，mitmproxy 页面便会呈现手机上的请求</p>
<p>敲击回车可以查看详情，可以查看 Request、Response、Detail 点击 Tab 切换</p>
<ul>
<li>提供了命令行编辑功能：</li>
</ul>
<p>点击 e 进入编辑功能，跳转需要编辑哪部分内容，回车确定</p>
<p>退出返回 q 或者 :q  : wq!</p>
<p>敲击 a 保存修改，敲击 r 重新发起修改后的请求</p>
<ul>
<li>mitmdump</li>
</ul>
<p>可以命令行启动，并把截获的数据保存到文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump -w outfile</span><br></pre></td></tr></table></figure>

<p>还可以指定一个脚本来处理截获的数据，使用 -s 参数，脚本需要放在当前命令执行的目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump -s script.py</span><br></pre></td></tr></table></figure>

<p>脚本写入如下代码：定义了一个 request() 方法，参数为 flow，其实是一个 HTTPFlow 对象，通过 request 属性即可获取当前请求对象，然后打印输出请求头</p>
<p>手机端访问 <a href="http://httpbin.org/get">http://httpbin.org/get</a> 测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def request(flow):</span><br><span class="line">	flow.request.headers[&#39;User-Agent&#39;] &#x3D; &#39;MitmProxy&#39;</span><br><span class="line">	print(flow.request.headers)</span><br></pre></td></tr></table></figure>

<ul>
<li>日志输出</li>
</ul>
<p>可以设定不同级别以不同颜色输出结果 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">from mitmproxy import ctx</span><br><span class="line">def request(flow):</span><br><span class="line">	flow.request.headers[&#39;User-Agent&#39;] &#x3D; &#39;MitmProxy&#39;</span><br><span class="line">	ctx.log.info(str(flow.request.headers))</span><br><span class="line">	ctx.log.warn(str(flow.request.headers))</span><br><span class="line">	ctx.log.error(str(flow.request.headers))</span><br><span class="line">	print(flow.request.headers)</span><br></pre></td></tr></table></figure>

<p>这里调用了 ctx 模块，它有一个 log 功能</p>
<ul>
<li>请求</li>
</ul>
<p>还可输出其它内容 headers、cookies 等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">from mitmproxy import ctx</span><br><span class="line">def request(flow):</span><br><span class="line">	request &#x3D; flow.request</span><br><span class="line">	info &#x3D; ctx.log.info</span><br><span class="line">	print(info(str(request.headers)))</span><br><span class="line">	print(info(str(request.cookies)))</span><br><span class="line">	print(info(str(request.host)))</span><br><span class="line">	print(info(str(request.method)))</span><br><span class="line">	print(info(str(request.port)))</span><br><span class="line">	print(info(str(request.scheme)))</span><br></pre></td></tr></table></figure>

<p>可以对属性修改 ，修改脚本如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def request(flow):</span><br><span class="line">	url &#x3D; &#39;https:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;</span><br><span class="line">	flow.request.url &#x3D; url</span><br></pre></td></tr></table></figure>

<p>访问 <a href="https://baidu.com/">https://baidu.com</a> 直接跳转到这里了 <a href="https://httpbin.org/get">https://httpbin.org/get</a></p>
<p>Request 还有很多属性 参考 <a href="http://docs.mitmproxy.org/en/latest/scripting/api.html">http://docs.mitmproxy.org/en/latest/scripting/api.html</a></p>
<ul>
<li>响应</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from mitmproxy import ctx</span><br><span class="line"></span><br><span class="line">def request(flow):</span><br><span class="line">	response &#x3D; flow.response</span><br><span class="line">	info &#x3D; ctx.log.info</span><br><span class="line">	info(str(response.status_code))</span><br><span class="line">	info(str(response.headers))</span><br><span class="line">	info(str(response.cookies))</span><br><span class="line">	info(str(response.text))</span><br></pre></td></tr></table></figure>

<p>再访问 httpbin （报错了。。） </p>
<ul>
<li>mitmdump 爬 ‘得到’ APP 电子书信息</li>
</ul>
<h5 id="Appium-安装"><a href="#Appium-安装" class="headerlink" title="Appium 安装"></a>Appium 安装</h5><p>移动端的自动化测试工具</p>
<p><a href="http://appium.io/">下载链接</a> 直接安装</p>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g appium</span><br></pre></td></tr></table></figure>

<p>利用 WebDriver 来实现 APP 的自动化测试</p>
<p>Appium 相当于一个服务器，可以向 Appium 发送一些操作指令，Appium 就会跟进不同指令对设备进行驱动</p>
<p>点击 Start Server 按钮即可启动 Appium 的服务，相当于开启了一个 Appium 服务器。</p>
<p>可以通过 Appium 内置驱动或 Python 代码向 Appium 的服务器发送一系列操作指令</p>
<p>默认 Appium 运行后正在监听 4723 端口</p>
<h5 id="WebDriverAgent"><a href="#WebDriverAgent" class="headerlink" title="WebDriverAgent"></a>WebDriverAgent</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;appium&#x2F;WebDriverAgent</span><br><span class="line">brew install Carthage</span><br><span class="line">.&#x2F;scripts&#x2F;bootstrap.sh</span><br></pre></td></tr></table></figure>

<h5 id="libimobiledevice"><a href="#libimobiledevice" class="headerlink" title="libimobiledevice"></a>libimobiledevice</h5><p>使用原生协议与评估 iOS 设备进行通信的库，通过这个库 MacOS 能够获取到 iOS 设备信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install --HEAD libimobiledevice</span><br></pre></td></tr></table></figure>









<h4 id="爬虫框架"><a href="#爬虫框架" class="headerlink" title="爬虫框架"></a>爬虫框架</h4><h5 id="pyspider"><a href="#pyspider" class="headerlink" title="pyspider"></a>pyspider</h5><p>依赖 PhantomJS，所以还需要安装 PhantomJS</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install pyspider</span><br></pre></td></tr></table></figure>

<p>验证：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyspider all</span><br></pre></td></tr></table></figure>

<p>这时 pyspider 的 Web 服务器会在本地 5000 端口运行，直接打开浏览器 <a href="http://localhost:5000/">http://localhost:5000/</a> 即可进入 pyspider 的 WebUI 管理页面</p>
<p>报错 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.8&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;pyspider&#x2F;run.py&quot;, line 231</span><br><span class="line">    async&#x3D;True, get_object&#x3D;False, no_input&#x3D;False):</span><br></pre></td></tr></table></figure>

<p>修改文件 <code>/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pyspider/run.py</code> </p>
<p><code>pyspider/fetcher/tornado_fetcher.py</code></p>
<p><code>pyspider/webui/app.py</code></p>
<p>async 改成 async_mode</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 uninstall wsgidav</span><br><span class="line">pip3 install wsgidav&#x3D;&#x3D;2.4.1</span><br></pre></td></tr></table></figure>

<p>报错： <code>ImportError: cannot import name DispatcherMiddleware</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 uninstall werkzeug</span><br><span class="line">pip3 install werkzeug&#x3D;&#x3D;0.16.0</span><br></pre></td></tr></table></figure>

<h5 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install scrapy</span><br></pre></td></tr></table></figure>

<p>验证： 命令行输入 scrapy</p>
<h5 id="Scrapy-Splash"><a href="#Scrapy-Splash" class="headerlink" title="Scrapy-Splash"></a>Scrapy-Splash</h5><p>Scrapy-Splash 是一个 Scrapy 中支持 JavaScript 渲染的工具</p>
<p>安装分两部分：</p>
<ul>
<li>Splash 服务安装</li>
</ul>
<p>通过 Docker安装，安装后会启动一个 Splash 服务，可以通过它的接口来实现 JavaScript 页面的加载</p>
<p>安装 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -p 8050:8050 scrapinghub&#x2F;splash</span><br></pre></td></tr></table></figure>

<p>Scrapy-Splash 会使用 Splash 的 HTTP API 进行页面渲染，安装 Splash 来提供渲染服务</p>
<p>安装完成后 Splash 已经在 8050 上运行了， 打开 <a href="http://localhost:8050/">http://localhost:8050</a> 即可看到 Splash 的主页</p>
<ul>
<li>Scrapy-Splash 的 Python 库安装</li>
</ul>
<p>安装之后即可在 Scrapy 中使用 Splash 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install scrapy-splash</span><br></pre></td></tr></table></figure>

<h5 id="Scrapy-Redis"><a href="#Scrapy-Redis" class="headerlink" title="Scrapy-Redis"></a>Scrapy-Redis</h5><p>Scrapy 的分布式扩展模块，有了它，可以方便实现 Scrapy 分布式爬虫的搭建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install scrapy-redis</span><br></pre></td></tr></table></figure>



<h4 id="部署相关库安装"><a href="#部署相关库安装" class="headerlink" title="部署相关库安装"></a>部署相关库安装</h4><h5 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install --cask --appdir&#x3D;&#x2F;Applications docker</span><br></pre></td></tr></table></figure>

<p>测试运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<p>运行测试命令时，会发现它首先会下载一个 Hello World 的镜像，然后将其运行</p>
<p>下载镜像有时候会非常慢，因为默认是从国外 Docker Hub 下载的，为了提高下载速度，可以使用国内镜像来加速</p>
<p>推荐的加速器 <a href="https://daocloud.io/mirror">Docker</a> 和 <a href="https://cr.console.aliyun.com/#/accelerator">阿里云</a> </p>
<h5 id="Scrapyd"><a href="#Scrapyd" class="headerlink" title="Scrapyd"></a>Scrapyd</h5><p>用于部署和运行 Scrapy 项目的工具，有了它，可以将写好的 Scrapy 项目上传到云主机并通过 API 来控制它</p>
<h5 id="Scrapyd-Client"><a href="#Scrapyd-Client" class="headerlink" title="Scrapyd-Client"></a>Scrapyd-Client</h5><h5 id="Scrapyd-API-安装"><a href="#Scrapyd-API-安装" class="headerlink" title="Scrapyd API 安装"></a>Scrapyd API 安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install python-scrapyd-api</span><br></pre></td></tr></table></figure>

<h5 id="Scrapyrt"><a href="#Scrapyrt" class="headerlink" title="Scrapyrt"></a>Scrapyrt</h5><h5 id="Gerapy"><a href="#Gerapy" class="headerlink" title="Gerapy"></a>Gerapy</h5><p>Scrapy 分布式管理模块</p>
<h4 id="3-基本库使用"><a href="#3-基本库使用" class="headerlink" title="3. 基本库使用"></a>3. 基本库使用</h4><h5 id="3-1-urllib"><a href="#3-1-urllib" class="headerlink" title="3.1 urllib"></a>3.1 urllib</h5><p>Python内置请求库，包含4个模块</p>
<ul>
<li>request</li>
</ul>
<p>基本 HTTP 请求模块，用来模拟发送请求</p>
<ul>
<li>error</li>
</ul>
<p>异常处理，如果出现请求错误，可以捕获这些异常</p>
<ul>
<li>parse</li>
</ul>
<p>工具模块，提供了许多 URL 处理方法 如拆分、解析、合并</p>
<ul>
<li>robotparser</li>
</ul>
<p>识别网站 robots.txt 文件，然后判断哪些网站可以爬，实际用的少</p>
<h6 id="3-1-1-发送请求"><a href="#3-1-1-发送请求" class="headerlink" title="3.1.1 发送请求"></a>3.1.1 发送请求</h6><ol>
<li>urlopen() </li>
</ol>
<p>可以完成简单请求和网页抓取</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">import ssl</span><br><span class="line">ssl._create_default_https_context &#x3D; ssl._create_unverified_context</span><br><span class="line">response &#x3D; urllib.request.urlopen(&#39;https:&#x2F;&#x2F;www.python.org&#39;)</span><br><span class="line">print(type(response))</span><br><span class="line">print(response.read().decode(&#39;utf-8&#39;))</span><br><span class="line">print(response.status)</span><br><span class="line">print(response.getheaders())</span><br><span class="line">print(response.getheader(&#39;Server&#39;))</span><br></pre></td></tr></table></figure>

<p>urlopen 的参数 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">urlopen(url, data&#x3D;None, timeout&#x3D;socket._GLOBAL_DEFAULT_TIMEOUT,*, cafile&#x3D;None, capath&#x3D;None, cadefault&#x3D;False, context&#x3D;None)</span><br></pre></td></tr></table></figure>

<p>data参数： 可选，如果是字节流编码格式内容，即 bytes 类型，需要通过 bytes() 方法转换，如果传递了参数则是 POST 方式请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.parse</span><br><span class="line">import urllib.request</span><br><span class="line">data &#x3D; bytes(urllib.parse.urlencode(&#123;&#39;world&#39;: &#39;hello&#39;&#125;), encoding&#x3D;&#39;utf8&#39;)</span><br><span class="line">response &#x3D; urllib.request.urlopen(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;post&#39;, data&#x3D;data)</span><br><span class="line">print(response.read)</span><br></pre></td></tr></table></figure>

<p>byte() 方法第一个参数需要 str 类型，需要用 urllib.parse 模块里的 urlencode() 方法将参数字典转化为字符串</p>
<p>站点 <code>http://httpbin.org/post</code>  可以提供 HTTP 请求测试</p>
<p>timeout参数： 超时时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">import urllib.error</span><br><span class="line">import urllib.request</span><br><span class="line">try:</span><br><span class="line">    response &#x3D; urllib.request.urlopen(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;, timeout&#x3D;0.1)</span><br><span class="line">except urllib.error.URLError as e:</span><br><span class="line">    if isinstance(e.reason, socket.timeout):</span><br><span class="line">        print(&#39;TIME OUT&#39;)</span><br></pre></td></tr></table></figure>

<p>context 参数：必须是 ssl.SSLContext 类型，用来指定 SSL 设置</p>
<p>cafile 和 capath ：分别指定 CA 证书 和 它的路径</p>
<ol start="2">
<li>Request</li>
</ol>
<p>如果需要 Headers 等信息，可以利用 Resquest 类来构建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">import ssl</span><br><span class="line">ssl._create_default_https_context &#x3D; ssl._create_unverified_context</span><br><span class="line">request &#x3D; urllib.request.Request(&#39;https:&#x2F;&#x2F;python.org&#39;)</span><br><span class="line">response &#x3D; urllib.request.urlopen(request)</span><br><span class="line">print(response.read().decode(&#39;utf-8&#39;))</span><br></pre></td></tr></table></figure>

<p>Request 参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url, data&#x3D;None, headers&#x3D;&#123;&#125;,origin_req_host&#x3D;None, unverifiable&#x3D;False,method&#x3D;None</span><br></pre></td></tr></table></figure>

<p>headers： 是一个字典，可以通过修改 User-Agent 来伪装浏览器，默认是 Python-urllib</p>
<p>origin_req_host：请求方 host 名称或 IP 地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from urllib import request, parse</span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;httpbin.org&#x2F;post&#39;</span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;4.0 (compatible; MSIE 5.5; Windows NT)&#39;,</span><br><span class="line">    &#39;Host&#39;: &#39;httpbin.org&#39;</span><br><span class="line">&#125;</span><br><span class="line">dict &#x3D; &#123;</span><br><span class="line">    &#39;name&#39;: &#39;Germey&#39;</span><br><span class="line">&#125;</span><br><span class="line">data &#x3D; bytes(parse.urlencode(dict), encoding&#x3D;&#39;utf8&#39;)</span><br><span class="line">req &#x3D; request.Request(url&#x3D;url, data&#x3D;data, headers&#x3D;headers, method&#x3D;&#39;POST&#39;)</span><br><span class="line">response &#x3D; request.urlopen(req)</span><br><span class="line">print(response.read().decode(&#39;utf-8&#39;))</span><br></pre></td></tr></table></figure>

<p>headers 也可以用 add_header() 方法添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">req &#x3D; request.Request(url&#x3D;url, data&#x3D;data, method&#x3D;&#39;POST&#39;)</span><br><span class="line">req.add_header(&#39;User-Agent&#39;, &#39;Mozilla&#x2F;4.0 (compatible; MSIE 5.5; Windows NT)&#39;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>高级用法</li>
</ol>
<p>request 模块里的 BaseHandler 类</p>
<p>HTTPDefaultErrorHandler：处理 HTTP 响应错误，错误会抛出 HTTPError 类型异常</p>
<p>HTTPRedirectHandler：用于处理重定向</p>
<p>HTTPCookieProcessor：用于处理 Cookies</p>
<p>ProxyHandler：用于设置代理</p>
<p>HTTPPasswordMgr：用于管理密码</p>
<p>HTTPBasicAuthHandler：用于管理认证</p>
<p>OpenerDirector：可以称为 Opener，可以利用 Handler 来构建 Opener</p>
<p>用法：登录验证、代理、Cookie</p>
<h6 id="3-1-2-处理异常"><a href="#3-1-2-处理异常" class="headerlink" title="3.1.2 处理异常"></a>3.1.2 处理异常</h6><ol>
<li>URLError</li>
<li>HTTPError</li>
</ol>
<h6 id="3-1-3-解析链接"><a href="#3-1-3-解析链接" class="headerlink" title="3.1.3 解析链接"></a>3.1.3 解析链接</h6><ol>
<li>urlparse()</li>
</ol>
<p>实现 URL 的识别和分段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from urllib.parse import urlparse</span><br><span class="line">result &#x3D; urlparse(&#39;http:www.baidu.com&#x2F;index.html;user?id&#x3D;s#comment&#39;)</span><br><span class="line">print(type(result), result)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;class &#39;urllib.parse.ParseResult&#39;&gt; ParseResult(scheme&#x3D;&#39;http&#39;, netloc&#x3D;&#39;&#39;, path&#x3D;&#39;www.baidu.com&#x2F;index.html&#39;, params&#x3D;&#39;user&#39;, query&#x3D;&#39;id&#x3D;s&#39;, fragment&#x3D;&#39;comment&#39;)</span><br></pre></td></tr></table></figure>

<p>输出结果是 ParseResult 类型，包含 6 个部分，可以用索引顺序来获取</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(result.scheme, result[0], result.netloc, result[1], sep&#x3D;&#39;\n&#39;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>urlunparse()</li>
</ol>
<ol start="3">
<li>urlsplit()</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from urllib.parse import urlsplit</span><br><span class="line">result &#x3D; urlsplit(&#39;http:www.baidu.com&#x2F;index.html;user?id&#x3D;s#comment&#39;)</span><br><span class="line">print(type(result), result)</span><br></pre></td></tr></table></figure>

<p>和 urlparse 使用类似，不过不再单独解析 params 部分，只返回 5个 结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;class &#39;urllib.parse.SplitResult&#39;&gt; SplitResult(scheme&#x3D;&#39;http&#39;, netloc&#x3D;&#39;&#39;, path&#x3D;&#39;www.baidu.com&#x2F;index.html;user&#39;, query&#x3D;&#39;id&#x3D;s&#39;, fragment&#x3D;&#39;comment&#39;)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>urlunsplit()</li>
<li>urljoin()</li>
</ol>
<p>实现连接拼合与生成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from urllib.parse import urljoin</span><br><span class="line">print(urljoin(&#39;http:&#x2F;&#x2F;www.baidu.com&#39;, &#39;?category&#x3D;2&#39;))</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>urlencode()</li>
</ol>
<p>将字典序列化为 GET 请求参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from urllib.parse import urlencode</span><br><span class="line">params &#x3D; &#123;</span><br><span class="line">    &#39;name&#39;: &#39;germey&#39;,</span><br><span class="line">    &#39;age&#39;: 22</span><br><span class="line">&#125;</span><br><span class="line">base_url &#x3D; &#39;http:&#x2F;&#x2F;www.baidu.com?&#39;</span><br><span class="line">url &#x3D; base_url + urlencode(params)</span><br><span class="line">print(url)</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>parse_qs()</li>
</ol>
<p>将请求参数反序列化成字典类型</p>
<ol start="7">
<li>parse_sql()</li>
</ol>
<p>将参数转化成元组组成的列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from urllib.parse import parse_qsl</span><br><span class="line">query &#x3D; &#39;name&#x3D;germey&amp;age&#x3D;2&#39;</span><br><span class="line">print(parse_qsl(query))</span><br><span class="line"></span><br><span class="line">[(&#39;name&#39;, &#39;germey&#39;), (&#39;age&#39;, &#39;2&#39;)]</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>quote()</li>
</ol>
<p>将内容转化为 URL 编码格式，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from urllib.parse import quote</span><br><span class="line">keyword &#x3D; &#39;测试&#39;</span><br><span class="line">url &#x3D; &#39;https:&#x2F;&#x2F;baidu.com&#x2F;s?wd&#x3D;&#39; + quote(keyword)</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>unquote()</li>
</ol>
<p>可以进行 URL 解码</p>
<h6 id="3-1-4-分析-Robots-协议"><a href="#3-1-4-分析-Robots-协议" class="headerlink" title="3.1.4 分析 Robots 协议"></a>3.1.4 分析 Robots 协议</h6><p>urllib 的 robotparser 模块，可以实现网站 Robots 协议的分析</p>
<ol>
<li>Robots 协议</li>
</ol>
<p>爬虫协议，全名叫网络爬虫排除标准，告诉爬虫和搜索引擎哪些页面可以抓取不抓取，通常是一个 robots.txt 协议</p>
<ol start="2">
<li>robotparser</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from urllib.robotparser import RobotFileParser</span><br><span class="line">from urllib.request import urlopen</span><br><span class="line">import ssl</span><br><span class="line"></span><br><span class="line">ssl._create_default_https_context &#x3D; ssl._create_unverified_context</span><br><span class="line">rp &#x3D; RobotFileParser()</span><br><span class="line">rp.set_url(&#39;https:&#x2F;&#x2F;www.jianshu.com&#x2F;robots.txt&#39;)</span><br><span class="line">rp.read()</span><br><span class="line">print(rp.can_fetch(&#39;*&#39;, &#39;https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;823596514412&#39;))</span><br></pre></td></tr></table></figure>

<h5 id="3-2-使用-Request"><a href="#3-2-使用-Request" class="headerlink" title="3.2 使用 Request"></a>3.2 使用 Request</h5><h6 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h6><p>GET 请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;www.baidu.com&#x2F;&#39;)</span><br><span class="line">print(type(r))</span><br><span class="line">print(r.status_code)</span><br><span class="line">print(r.text)</span><br><span class="line">print(r.cookies)</span><br></pre></td></tr></table></figure>

<p>带参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import  requests</span><br><span class="line">params &#x3D; &#123;</span><br><span class="line">    &#39;name&#39;: &#39;germey&#39;,</span><br><span class="line">    &#39;age&#39;: 22</span><br><span class="line">&#125;</span><br><span class="line">r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;, params&#x3D;params)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

<p>网页的返回类型实际上是 str 类型，JSON格式的，想得到字典格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(r.json())</span><br></pre></td></tr></table></figure>



<h6 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h6><h5 id="3-3-正则表达式"><a href="#3-3-正则表达式" class="headerlink" title="3.3 正则表达式"></a>3.3 正则表达式</h5><h5 id="3-4-抓取猫眼电影排行"><a href="#3-4-抓取猫眼电影排行" class="headerlink" title="3.4 抓取猫眼电影排行"></a>3.4 抓取猫眼电影排行</h5><p>书本配套代码 <a href="https://github.com/Python3WebSpider/MaoYan">https://github.com/Python3WebSpider/MaoYan</a></p>
<p>排行链接  <a href="https://maoyan.com/board/4">https://maoyan.com/board/4</a></p>
<p>第二页链接  <a href="https://maoyan.com/board/4?offset=10">https://maoyan.com/board/4?offset=10</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">from requests.exceptions import RequestException</span><br><span class="line"></span><br><span class="line">def get_one_page(url):</span><br><span class="line">	try:</span><br><span class="line">		headers &#x3D; &#123;</span><br><span class="line">			&#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Macintosh; U; Intel Mac OS X 10_6_10; en-us) AppleWebKit&#x2F;534.50 (KHTML, like Gecko) Version&#x2F;5.1 Safari&#x2F;534.50&#39;</span><br><span class="line">		&#125;</span><br><span class="line">		response &#x3D; requests.get(url, headers&#x3D;headers)</span><br><span class="line">		if response.status_code &#x3D;&#x3D; 200:</span><br><span class="line">			return response.text</span><br><span class="line">		return None</span><br><span class="line">	except RequestException:</span><br><span class="line">		return None</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">	url &#x3D; &#39;https:&#x2F;&#x2F;maoyan.com&#x2F;board&#x2F;4&#39;</span><br><span class="line">	html &#x3D; get_one_page(url)</span><br><span class="line">	print(html)</span><br></pre></td></tr></table></figure>

<p>可以通过浏览器查看源码，选择网络查看原始请求部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dd&gt;</span><br><span class="line">	&lt;i class&#x3D;&quot;board-index board-index-1&quot;&gt;1&lt;&#x2F;i&gt;</span><br><span class="line">	&lt;a href&#x3D;&quot;&#x2F;films&#x2F;1200486&quot; title&#x3D;&quot;我不是药神&quot; class&#x3D;&quot;image-link&quot; data-act&#x3D;&quot;boarditem-click&quot; data-val&#x3D;&quot;&#123;movieId:1200486&#125;&quot;&gt;</span><br><span class="line">      &lt;img src&#x3D;&quot;&#x2F;&#x2F;s3plus.meituan.net&#x2F;v1&#x2F;mss_e2821d7f0cfe4ac1bf9202ecf9590e67&#x2F;cdn-prod&#x2F;file:5788b470&#x2F;image&#x2F;loading_2.e3d934bf.png&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;poster-default&quot; &#x2F;&gt;</span><br><span class="line">      &lt;img data-src&#x3D;&quot;https:&#x2F;&#x2F;p0.meituan.net&#x2F;movie&#x2F;414176cfa3fea8bed9b579e9f42766b9686649.jpg@160w_220h_1e_1c&quot; alt&#x3D;&quot;我不是药神&quot; class&#x3D;&quot;board-img&quot; &#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;a&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;board-item-main&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;board-item-content&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;movie-item-info&quot;&gt;</span><br><span class="line">        &lt;p class&#x3D;&quot;name&quot;&gt;&lt;a href&#x3D;&quot;&#x2F;films&#x2F;1200486&quot; title&#x3D;&quot;我不是药神&quot; data-act&#x3D;&quot;boarditem-click&quot; data-val&#x3D;&quot;&#123;movieId:1200486&#125;&quot;&gt;我不是药神&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p class&#x3D;&quot;star&quot;&gt;主演：徐峥,周一围,王传君&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p class&#x3D;&quot;releasetime&quot;&gt;上映时间：2018-07-05&lt;&#x2F;p&gt;</span><br><span class="line">		  &lt;&#x2F;div&gt;</span><br><span class="line">  		&lt;div class&#x3D;&quot;movie-item-number score-num&quot;&gt;</span><br><span class="line">				&lt;p class&#x3D;&quot;score&quot;&gt;&lt;i class&#x3D;&quot;integer&quot;&gt;9.&lt;&#x2F;i&gt;&lt;i class&#x3D;&quot;fraction&quot;&gt;6&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;        </span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">     &lt;&#x2F;div&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;dd&gt;</span><br></pre></td></tr></table></figure>

<p>一部电影信息对应源码是一个 dd 节点</p>
<p>先获取排行信息，在 class 为 board-index 的 i 节点内，提取 i 节点内的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;&#x2F;i&gt;</span><br></pre></td></tr></table></figure>

<p>图片信息：dd 后面有个 a 节点，内部有两个 img 节点，第二个 img 节点的 data-src 属性是图片的链接，提取第二个 img 节点 data-sr 属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;&#x2F;i&gt;.*?data-src&#x3D;&quot;(.*?)&quot;</span><br></pre></td></tr></table></figure>

<p>电影名称：后面 p 节点内， class 为 name</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;&#x2F;i&gt;.*?data-src&#x3D;&quot;(.*?)&quot;.*?name.*?&gt;(.*?)&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>findall 提取</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pattern &#x3D; re.compile(&#39;&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;&#x2F;i&gt;.*?data-src&#x3D;&quot;(.*?)&quot;.*?name.*?&gt;(.*?)&lt;&#x2F;a&gt;&#39;, re.S)</span><br><span class="line">items &#x3D; re.findall(pattern, html)</span><br><span class="line">print(items)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[(&#39;1&#39;, &#39;https:&#x2F;&#x2F;p0.meituan.net&#x2F;movie&#x2F;414176cfa3fea8bed9b579e9f42766b9686649.jpg@160w_220h_1e_1c&#39;, &#39;&lt;a href&#x3D;&quot;&#x2F;films&#x2F;1200486&quot; title&#x3D;&quot;我不是药神&quot; data-act&#x3D;&quot;boarditem-click&quot; data-val&#x3D;&quot;&#123;movieId:1200486&#125;&quot;&gt;我不是药神&#39;), (&#39;2&#39;, &#39;https:&#x2F;&#x2F;p0.meituan.net&#x2F;movie&#x2F;8112a8345d7f1d807d026282f2371008602126.jpg@160w_220h_1e_1c&#39;, &#39;&lt;a href&#x3D;&quot;&#x2F;films&#x2F;1297&quot; title&#x3D;&quot;肖申克的救赎&quot; data-act&#x3D;&quot;boarditem-click&quot; data-val&#x3D;&quot;&#123;movieId:1297&#125;&quot;&gt;肖申克的救赎&#39;), (&#39;3&#39;, &#39;https:&#x2F;&#x2F;p1.meituan.net&#x2F;movie&#x2F;c9b280de01549fcb71913edec05880585769972.jpg@160w_220h_1e_1c&#39;, &#39;&lt;a href&#x3D;&quot;&#x2F;films&#x2F;1206605&quot; title&#x3D;&quot;绿皮书&quot; data-act&#x3D;&quot;boarditem-click&quot; data-val&#x3D;&quot;&#123;movieId:1206605&#125;&quot;&gt;绿皮书&#39;), (&#39;4&#39;, &#39;https:&#x2F;&#x2F;p0.meituan.net&#x2F;movie&#x2F;609e45bd40346eb8b927381be8fb27a61760914.jpg@160w_220h_1e_1c&#39;, &#39;&lt;a href&#x3D;&quot;&#x2F;films&#x2F;1292&quot; title&#x3D;&quot;海上钢琴师&quot; data-act&#x3D;&quot;boarditem-click&quot; data-val&#x3D;&quot;&#123;movieId:1292&#125;&quot;&gt;海上钢琴师&#39;), (&#39;5&#39;, &#39;https:&#x2F;&#x2F;p1.meituan.net&#x2F;movie&#x2F;ac8f0004928fbce5a038a007b7c73cec746794.jpg@160w_220h_1e_1c&#39;, &#39;&lt;a href&#x3D;&quot;&#x2F;films&#x2F;1216365&quot; title&#x3D;&quot;小偷家族&quot; data-act&#x3D;&quot;boarditem-click&quot; data-val&#x3D;&quot;&#123;movieId:1216365&#125;&quot;&gt;小偷家族&#39;), (&#39;6&#39;, &#39;https:&#x2F;&#x2F;p0.meituan.net&#x2F;movie&#x2F;61fea77024f83b3700603f6af93bf690585789.jpg@160w_220h_1e_1c&#39;, &#39;&lt;a href&#x3D;&quot;&#x2F;films&#x2F;1203&quot; title&#x3D;&quot;霸王别姬&quot; data-act&#x3D;&quot;boarditem-click&quot; data-val&#x3D;&quot;&#123;movieId:1203&#125;&quot;&gt;霸王别姬&#39;), (&#39;7&#39;, &#39;https:&#x2F;&#x2F;p0.meituan.net&#x2F;movie&#x2F;005955214d5b3e50c910d7a511b0cb571445301.jpg@160w_220h_1e_1c&#39;, &#39;&lt;a href&#x3D;&quot;&#x2F;films&#x2F;1211270&quot; title&#x3D;&quot;哪吒之魔童降世&quot; data-act&#x3D;&quot;boarditem-click&quot; data-val&#x3D;&quot;&#123;movieId:1211270&#125;&quot;&gt;哪吒之魔童降世&#39;), (&#39;8&#39;, &#39;https:&#x2F;&#x2F;p1.meituan.net&#x2F;movie&#x2F;580d81a2c78bf204f45323ddb4244b6c6821175.jpg@160w_220h_1e_1c&#39;, &#39;&lt;a href&#x3D;&quot;&#x2F;films&#x2F;1303&quot; title&#x3D;&quot;美丽人生&quot; data-act&#x3D;&quot;boarditem-click&quot; data-val&#x3D;&quot;&#123;movieId:1303&#125;&quot;&gt;美丽人生&#39;), (&#39;9&#39;, &#39;https:&#x2F;&#x2F;p1.meituan.net&#x2F;movie&#x2F;6bea9af4524dfbd0b668eaa7e187c3df767253.jpg@160w_220h_1e_1c&#39;, &#39;&lt;a href&#x3D;&quot;&#x2F;films&#x2F;4055&quot; title&#x3D;&quot;这个杀手不太冷&quot; data-act&#x3D;&quot;boarditem-click&quot; data-val&#x3D;&quot;&#123;movieId:4055&#125;&quot;&gt;这个杀手不太冷&#39;), (&#39;10&#39;, &#39;https:&#x2F;&#x2F;p0.meituan.net&#x2F;moviemachine&#x2F;c2496a7290a72eac6081321898c347693550574.jpg@160w_220h_1e_1c&#39;, &#39;&lt;a href&#x3D;&quot;&#x2F;films&#x2F;416&quot; title&#x3D;&quot;盗梦空间&quot; data-act&#x3D;&quot;boarditem-click&quot; data-val&#x3D;&quot;&#123;movieId:416&#125;&quot;&gt;盗梦空间&#39;)]</span><br></pre></td></tr></table></figure>

<p>写入文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def write_to_file(content):</span><br><span class="line">	with open(&#39;result.txt&#39;, &#39;a&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">		print(type(json.dumps(content)))</span><br><span class="line">		f.write(json.dumps(content, ensure_ascii&#x3D;False)+&#39;\n&#39;)</span><br></pre></td></tr></table></figure>

<p>分页爬取：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line">def main(offset):</span><br><span class="line">	url &#x3D; &#39;https:&#x2F;&#x2F;maoyan.com&#x2F;board&#x2F;4?offset&#x3D;&#39; + str(offset) </span><br><span class="line">	html &#x3D; get_one_page(url)</span><br><span class="line">	pattern &#x3D; re.compile(&#39;&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;&#x2F;i&gt;.*?data-src&#x3D;&quot;(.*?)&quot;.*?name.*?&gt;(.*?)&lt;&#x2F;a&gt;&#39;, re.S)</span><br><span class="line">	items &#x3D; re.findall(pattern, html)</span><br><span class="line">	print(items)</span><br><span class="line">	write_to_file(items)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">	for i in range(10):</span><br><span class="line">		main(offset&#x3D;i*10)</span><br><span class="line">		time.sleep(1)</span><br></pre></td></tr></table></figure>

<h4 id="4-解析库使用"><a href="#4-解析库使用" class="headerlink" title="4. 解析库使用"></a>4. 解析库使用</h4><h5 id="4-1-XPath"><a href="#4-1-XPath" class="headerlink" title="4.1 XPath"></a>4.1 XPath</h5><p>常用规则</p>
<table>
<thead>
<tr>
<th>nodename</th>
<th align="left">选取此节点的所有子节点</th>
</tr>
</thead>
<tbody><tr>
<td>/</td>
<td align="left">从当前节点选取直接子节点</td>
</tr>
<tr>
<td>//</td>
<td align="left">从当前节点选取子孙节点</td>
</tr>
<tr>
<td>.</td>
<td align="left">选取当前节点</td>
</tr>
<tr>
<td>..</td>
<td align="left">选取当前节点的父节点</td>
</tr>
<tr>
<td>@</td>
<td align="left">选取属性</td>
</tr>
</tbody></table>
<p>所有名称为 title，同时属性 lang 的值为 eng 的节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;title[@lang&#x3D;&#39;eng&#39;]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from lxml import etree</span><br><span class="line">text &#x3D; &#39;&#39;&#39;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">	&lt;ul&gt;</span><br><span class="line">		&lt;li class&#x3D;&quot;item-0&quot;&gt;&lt;a href&#x3D;&quot;link1.html&quot;&gt;first item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">		&lt;li class&#x3D;&quot;item-1&quot;&gt;&lt;a href&#x3D;&quot;link2.html&quot;&gt;second item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">		&lt;li class&#x3D;&quot;item-inactive&quot;&gt;&lt;a href&#x3D;&quot;link3.html&quot;&gt;third item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">		&lt;li class&#x3D;&quot;item-1&quot;&gt;&lt;a href&#x3D;&quot;link4.html&quot;&gt;fourth item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">		&lt;li class&#x3D;&quot;item-0&quot;&gt;&lt;a href&#x3D;&quot;link5.html&quot;&gt;fifth item&lt;&#x2F;a&gt;</span><br><span class="line">	&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">html &#x3D; etree.HTML(text)</span><br><span class="line">result &#x3D; etree.tostring(html)</span><br><span class="line">print(result.decode(&#39;utf-8&#39;))</span><br></pre></td></tr></table></figure>

<p>导入 lxml 库的 etree 模块，声明一段 HTML 文本，调用 HTML 类进行初始化，这样就成功构造了一个 XPath 解析对象</p>
<p>HTML 文件最后一个 li 节点是没有闭合的，但 etree 模块可以自动修正 HTML 文本</p>
<p>toString 输出修正后的 HTML 代码，结果是 bytes 类型，利用 decode 转成 str 类型</p>
<p>也可读取文本进行解析</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html &#x3D; etree.parse(&#39;.&#x2F;test.html&#39;, etree.HTMLParser())</span><br></pre></td></tr></table></figure>

<ul>
<li>所有结点</li>
</ul>
<p>// 开头的 XPath 规则来选取所有符合要求的节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;*&#39;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p>返回形式是一个列表，每个元素是 Element 类型，其后跟了节点的名称，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&lt;Element html at 0x7f8f63e97280&gt;, &lt;Element body at 0x7f8f63f225c0&gt;, &lt;Element div at 0x7f8f63f22b40&gt;, &lt;Element ul at 0x7f8f63f22b80&gt;, &lt;Element li at 0x7f8f63f22bc0&gt;, &lt;Element a at 0x7f8f63f22c40&gt;, &lt;Element li at 0x7f8f63f22c80&gt;, &lt;Element a at 0x7f8f63f22cc0&gt;, &lt;Element li at 0x7f8f63f22d00&gt;, &lt;Element a at 0x7f8f63f22c00&gt;, &lt;Element li at 0x7f8f63f22d40&gt;, &lt;Element a at 0x7f8f63f22d80&gt;, &lt;Element li at 0x7f8f63f22dc0&gt;, &lt;Element a at 0x7f8f63f22e00&gt;]</span><br></pre></td></tr></table></figure>

<p>也可指定节点名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;li&#39;)</span><br></pre></td></tr></table></figure>

<ul>
<li>子节点</li>
</ul>
<p>/ 或 // 查找元素的子节点或子孙节点，选择 li 节点的所有直接 a 子节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;li&#x2F;a&#39;) </span><br></pre></td></tr></table></figure>

<p>ul 节点下的所有子孙 a 节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;ul&#x2F;&#x2F;a&#39;)</span><br></pre></td></tr></table></figure>

<ul>
<li>父节点</li>
</ul>
<p>href 属性为 link4.html 的 a 节点，然后再获取其父结点，然后再获取其 class 属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;a[@href&#x3D;&quot;link4.html&quot;]&#x2F;..&#x2F;@class&#39;)</span><br></pre></td></tr></table></figure>

<p>也可以通过 parent:: 获取父节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;a[@href&#x3D;link4.html&#x2F;parent::*&#x2F;@class]&#39;)</span><br></pre></td></tr></table></figure>

<ul>
<li>属性匹配</li>
</ul>
<p>@ 符号进行属性过滤，如果选取 class 为 item-1 的 li 节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;li[@class&#x3D;&#39;item-1&#39;]&#39;)</span><br></pre></td></tr></table></figure>

<ul>
<li>文本获取</li>
</ul>
<p>text() 方法获取节点中的文本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;li[@class&#x3D;&#39;item-0&#39;]&#x2F;a&#x2F;text()&#39;)</span><br><span class="line">结果：[&#39;first item&#39;, &#39;fifth item&#39;]</span><br><span class="line">或者</span><br><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;li[@class&#x3D;&#39;item-0&#39;]&#x2F;&#x2F;text()&#39;)</span><br><span class="line">结果：[&#39;first item&#39;, &#39;fifth item&#39;, &#39;\n  &#39;]</span><br></pre></td></tr></table></figure>

<ul>
<li>属性获取</li>
</ul>
<p>获取 li 节点下所有 a 节点的 href 属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;li&#x2F;a&#x2F;@href&#39;)</span><br><span class="line">结果</span><br><span class="line">[&#39;link1.html&#39;, &#39;link2.html&#39;, &#39;link3.html&#39;, &#39;link4.html&#39;, &#39;link5.html&#39;]</span><br></pre></td></tr></table></figure>

<ul>
<li>属性多值匹配</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">text &#x3D; &#39;&#39;&#39;</span><br><span class="line">&lt;li class&#x3D;&quot;li li-first&quot;&gt;&lt;a href&#x3D;&quot;link.html&quot;&gt;first item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">html &#x3D; etree.HTML(text)</span><br><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;li[contains(@class, &quot;li&quot;)]&#x2F;a&#x2F;text()&#39;)</span><br></pre></td></tr></table></figure>

<p>html 中 li 节点的 class 属性有两个值 li 和 li-list，就需要用到 cantains() 函数了</p>
<ul>
<li>多属性匹配</li>
</ul>
<p>多个属性确定一个节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">text &#x3D; &#39;&#39;&#39;</span><br><span class="line">&lt;li class&#x3D;&quot;li li-first&quot; name&#x3D;&quot;item&quot;&gt;&lt;a href&#x3D;&quot;link.html&quot;&gt;first item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">html &#x3D; etree.HTML(text)</span><br><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;li[contains(@class, &quot;li&quot;) and @name&#x3D;&quot;item&quot;]&#x2F;a&#x2F;text()&#39;)</span><br></pre></td></tr></table></figure>

<ul>
<li>运算符：</li>
</ul>
<table>
<thead>
<tr>
<th>or、and</th>
<th>或、与</th>
</tr>
</thead>
<tbody><tr>
<td>+、-、*、div、mod</td>
<td>加、减、乘、除、除法余数</td>
</tr>
<tr>
<td>&gt;、=、&lt;、!=、&gt;=、&lt;=</td>
<td>大于、等于、小于、不等于、大于等于、小于等于</td>
</tr>
</tbody></table>
<ul>
<li>按序选择</li>
</ul>
<p>有时候匹配了多个节点，只想要其中某个节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;li[1]&#x2F;a&#x2F;text()&#39;)</span><br><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;li[last()]&#x2F;a&#x2F;text()&#39;)</span><br><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;li[position()&lt;3]&#x2F;a&#x2F;text()&#39;)</span><br><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;li[last()-2]&#x2F;a&#x2F;text()&#39;)</span><br></pre></td></tr></table></figure>

<p>Xpath 中提供了 100 多个函数，具体参考 <a href="http://www.w3school.com.en/xpath/xpath_functions.asp">http://www.w3school.com.en/xpath/xpath_functions.asp</a></p>
<ul>
<li>节点轴选择</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;获取所有祖先节点</span><br><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;li[1]&#x2F;ancestor::*&#39;)</span><br><span class="line">&#x2F;&#x2F;获取所有 div 的祖先节点</span><br><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;li[1]&#x2F;ancestor::div&#39;)</span><br><span class="line">&#x2F;&#x2F;获取 li 节点所有属性值</span><br><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;li[1]&#x2F;attribute::*&#39;)</span><br><span class="line">&#x2F;&#x2F;获取直接字节点，取 href 属性为 link.html 的 a 节点</span><br><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;li[1]&#x2F;child::a[@href&#x3D;&quot;link1.html&quot;]&#39;)</span><br><span class="line">&#x2F;&#x2F;获取子孙节点，取包含 span 节点</span><br><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;li[1]&#x2F;descendant::span&#39;)</span><br><span class="line">&#x2F;&#x2F;获取当前节点之后所有节点，只获取第二个后续节点</span><br><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;li[1]&#x2F;following::*[2]&#39;)</span><br><span class="line">&#x2F;&#x2F;获取当前节点之后的所有同级节点</span><br><span class="line">result &#x3D; html.xpath(&#39;&#x2F;&#x2F;li[1]&#x2F;following-sibling::*&#39;)</span><br></pre></td></tr></table></figure>

<p>XPath 轴 <a href="http://www.w3school.com.cn/xpath/xpath_axes.asp">http://www.w3school.com.cn/xpath/xpath_axes.asp</a></p>
<h5 id="4-2-Beautiful-Soup"><a href="#4-2-Beautiful-Soup" class="headerlink" title="4.2 Beautiful Soup"></a>4.2 Beautiful Soup</h5><p>HTML 或 XML 的解析库</p>
<p>自动将输入文档转换为 Unicode 编码，输出文档转换为 UTF-8 编码，不需要考虑编码方式</p>
<p>Beautiful Soup 在解析时依赖解析器，lxml 解析器有解析 HTML 和 XML 的功能，且速度快，容错能力强</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup &#x3D; BeautifulSoup(&#39;&lt;p&gt;Hello&lt;&#x2F;p&gt;&#39;, &#39;lxml&#39;)</span><br><span class="line">print(soup.p.string)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html &#x3D; &#39;&#39;&#39;</span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#39;s story&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;title&quot; name&#x3D;&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&#39;s story&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;story&quot; Once upon a time there were three little sisters; and their names were</span><br><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;elsie&quot; class&#x3D;&quot;sister&quot; id&#x3D;&quot;linkl&quot;&gt;&lt;! - Elsie ...&gt;&lt;&#x2F;a&gt;,</span><br><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;lacie&quot; class&#x3D;&quot;sister&quot; id&#x3D;&quot;link2&quot;&gt;Lacie&lt;&#x2F;a&gt; and</span><br><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;tillie&quot; class&#x3D;&quot;sister&quot; id&#x3D;&quot;link3&quot;&gt;Tillie&lt;&#x2F;a&gt;;</span><br><span class="line">and they lived at the bottom of a well.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;story&quot;&gt;...&lt;&#x2F;p&gt;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">soup &#x3D; BeautifulSoup(html, &#39;lxml&#39;)</span><br><span class="line">print(soup.prettify())</span><br><span class="line">print(soup.title.string)</span><br></pre></td></tr></table></figure>

<p>调用 pretttify() 方法，把要解析的字符串以标准的缩进格式输出，Beautiful Soup 可以自动更正格式</p>
<ul>
<li>节点选择器</li>
</ul>
<p>直接调用节点名称就可以选择节点元素，再调用 string 属性就可以得到节点内的文本了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(soup.title)</span><br><span class="line">print(type(soup.title))</span><br><span class="line">print(soup.title.string)</span><br><span class="line">print(soup.head)</span><br><span class="line">print(soup.p)</span><br><span class="line">结果</span><br><span class="line">&lt;title&gt;The Dormouse&#39;s story&lt;&#x2F;title&gt;</span><br><span class="line">&lt;class &#39;bs4.element.Tag&#39;&gt;</span><br><span class="line">The Dormouse&#39;s story</span><br><span class="line">&lt;head&gt;&lt;title&gt;The Dormouse&#39;s story&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;title&quot; name&#x3D;&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&#39;s story&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<p>只打印了第一个 p 节点的内容，多个节点时，这种选择方式只会选择到第一个匹配的节点</p>
<ul>
<li>提取信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;获取名称</span><br><span class="line">print(soup.title.name)  		</span><br><span class="line">title</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;获取属性</span><br><span class="line">print(soup.p.attrs)					</span><br><span class="line">&#123;&#39;class&#39;: [&#39;title&#39;], &#39;name&#39;: &#39;dromouse&#39;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;获取 name 属性</span><br><span class="line">print(soup.p.attrs[&#39;name&#39;])	</span><br><span class="line">dromouse</span><br></pre></td></tr></table></figure>

<p>比较简单方式，注意返回有的是字符串，有的是字符串组成的列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(soup.p[&#39;name&#39;])</span><br><span class="line">print(soup.p[&#39;class&#39;])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;获取内容(是第一个 p 节点)</span><br><span class="line">print(soup.p.string)</span><br></pre></td></tr></table></figure>

<ul>
<li>嵌套选择</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(soup.head.title.string)</span><br></pre></td></tr></table></figure>

<ul>
<li>关联选择</li>
</ul>
<p>有时候不能一步就选到想要的节点元素，需要先选中某个节点元素，然后以它为基准再选择它的父节点、子节点、兄弟节点</p>
<ol>
<li>直接子节点</li>
</ol>
<p>添加一个 p 节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p class&#x3D;&quot;story&quot;&gt;</span><br><span class="line">Once upon a time there were three little sisters; and their names were</span><br><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;elsie&quot; class&#x3D;&quot;sister&quot; id&#x3D;&quot;linkl&quot;&gt; </span><br><span class="line">&lt;span&gt; Elsie&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>结果，返回 p 节点的直接子节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(soup.p.contents)</span><br><span class="line">[&#39;\n\tOnce upon a time there were three little sisters; and their names were\n\t&#39;, &lt;a class&#x3D;&quot;sister&quot; href&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;elsie&quot; id&#x3D;&quot;linkl&quot;&gt;</span><br><span class="line">&lt;span&gt; Elsie&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;a&gt;, &#39;\n&#39;]</span><br></pre></td></tr></table></figure>

<p>同样可以直接调用 children 属性等到相应的结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(soup.p.children)</span><br><span class="line">for i, child in enumerate(soup.p.children):</span><br><span class="line">  print(i, child)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>父节点和 子孙节点</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(soup.a.parent)</span><br></pre></td></tr></table></figure>

<p>想要获取所有的祖先节点，调用 parents 属性</p>
<ol start="3">
<li>兄弟节点</li>
</ol>
<p>next_sibling 节点下一个兄弟元素</p>
<p>previous_sibling 节点上一个兄弟元素</p>
<p>next_siblings 所有前面的兄弟元素</p>
<p>previous_siblings 所有后面的兄弟元素</p>
<ol start="4">
<li>提取信息</li>
</ol>
<p>返回的是单个节点，直接调用 string、attrs 等属性获取文本和属性</p>
<p>多个节点的生成器，则可转为列表后取出元素，然后调用 string、attrs</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(soup.a.next_sibling)</span><br><span class="line">print(list(soup.a.parents))</span><br><span class="line">print(list(soup.a.parents)[0])</span><br><span class="line">pirnt(list(soup.a.parents)[0].attrs[&#39;class&#39;])</span><br></pre></td></tr></table></figure>

<ul>
<li>方法选择器</li>
</ul>
<ol>
<li>find_all()  查找所有符合条件的元素，传入属性或文本，就可以得到符合条件的元素</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find_all(name, attrs, recursive, text, **kwargs)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html &#x3D; &#39;&#39;&#39;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel-heading&quot;&gt;</span><br><span class="line">    &lt;h4&gt;Hello&lt;&#x2F;h4&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel-body&quot;&gt;</span><br><span class="line">    &lt;ul class&#x3D;&quot;list&quot; id&#x3D;&quot;list-1&quot;&gt;</span><br><span class="line">      &lt;li class&#x3D;&quot;element&quot;&gt;Foo&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li class&#x3D;&quot;element&quot;&gt;Bar&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li class&#x3D;&quot;element&quot;&gt;Jay&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;ul class&#x3D;&quot;list list-small&quot; id&#x3D;&quot;list-2&quot;&gt;</span><br><span class="line">      &lt;li class&#x3D;&quot;element&quot;&gt;Foo&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li class&#x3D;&quot;element&quot;&gt;Bar&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">soup &#x3D; BeautifulSoup(html,&#39;lxml&#39;)</span><br><span class="line">print(soup.find_all(name&#x3D;&#39;ul&#39;))</span><br></pre></td></tr></table></figure>

<p>  查询所有 ul 节点，返回结果是列表类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for ul in soup.find_all(name&#x3D;&#39;ul&#39;):</span><br><span class="line">	print(ul, find_all(name&#x3D;&#39;li&#39;))</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>attrs 传入属性查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(soup.find_all(attrs&#x3D;&#123;&#39;id&#39;: &#39;list-1&#39;&#125;))</span><br><span class="line">print(soup.find_all(attrs&#x3D;&#123;&#39;name&#39;: &#39;elements&#39;&#125;))</span><br><span class="line"></span><br><span class="line">print(soup.find_all(id&#x3D;&#39;list-1&#39;))</span><br><span class="line">print(soup.find_all(class_&#x3D;&#39;element&#39;)) </span><br><span class="line">class 是 Python 关键字，需要加下划线</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>text 匹配节点的文本，可以传字符串或正则表达式对象</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(soup.find_all(text&#x3D;re.compile(&#39;link&#39;)))</span><br></pre></td></tr></table></figure>

<ul>
<li><p>find() 返回的是单个元素，也就是第一个匹配的元素</p>
</li>
<li><p>CSS 选择器</p>
</li>
</ul>
<h5 id="4-3-pyquery"><a href="#4-3-pyquery" class="headerlink" title="4.3 pyquery"></a>4.3 pyquery</h5><h4 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h4><h5 id="5-1-文件存储"><a href="#5-1-文件存储" class="headerlink" title="5.1 文件存储"></a>5.1 文件存储</h5><h5 id="5-2-关系型数据库存储"><a href="#5-2-关系型数据库存储" class="headerlink" title="5.2 关系型数据库存储"></a>5.2 关系型数据库存储</h5><h6 id="5-2-1-MySQL"><a href="#5-2-1-MySQL" class="headerlink" title="5.2.1. MySQL"></a>5.2.1. MySQL</h6><h5 id="5-3-非关系型数据库存储"><a href="#5-3-非关系型数据库存储" class="headerlink" title="5.3 非关系型数据库存储"></a>5.3 非关系型数据库存储</h5><h6 id="5-3-1-MongoDB"><a href="#5-3-1-MongoDB" class="headerlink" title="5.3.1. MongoDB"></a>5.3.1. MongoDB</h6><h6 id="5-3-2-Redis"><a href="#5-3-2-Redis" class="headerlink" title="5.3.2. Redis"></a>5.3.2. Redis</h6><h4 id="6-Ajax-数据爬取"><a href="#6-Ajax-数据爬取" class="headerlink" title="6. Ajax 数据爬取"></a>6. Ajax 数据爬取</h4><h4 id="7-动态渲染页面爬取"><a href="#7-动态渲染页面爬取" class="headerlink" title="7. 动态渲染页面爬取"></a>7. 动态渲染页面爬取</h4><h4 id="8-验证码识别"><a href="#8-验证码识别" class="headerlink" title="8. 验证码识别"></a>8. 验证码识别</h4><h4 id="9-代理的使用"><a href="#9-代理的使用" class="headerlink" title="9. 代理的使用"></a>9. 代理的使用</h4><h4 id="10-模拟登录"><a href="#10-模拟登录" class="headerlink" title="10. 模拟登录"></a>10. 模拟登录</h4><h4 id="11-App-的爬取"><a href="#11-App-的爬取" class="headerlink" title="11. App 的爬取"></a>11. App 的爬取</h4><h4 id="12-pyspider-框架使用"><a href="#12-pyspider-框架使用" class="headerlink" title="12. pyspider 框架使用"></a>12. pyspider 框架使用</h4><h4 id="13-Scrapy-框架使用"><a href="#13-Scrapy-框架使用" class="headerlink" title="13. Scrapy 框架使用"></a>13. Scrapy 框架使用</h4><h4 id="14-分布式爬虫"><a href="#14-分布式爬虫" class="headerlink" title="14. 分布式爬虫"></a>14. 分布式爬虫</h4><h4 id="15-分布式爬虫部署"><a href="#15-分布式爬虫部署" class="headerlink" title="15. 分布式爬虫部署"></a>15. 分布式爬虫部署</h4>]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Block</title>
    <url>/2021/05/19/Block/</url>
    <content><![CDATA[<h5 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h5><ul>
<li>将<code>函数</code>及其<code>执行上下文（函数执行环境）</code>封装起来的<code>对象</code></li>
<li>Block内部有<code>isa</code> 指针，所以说其本质也是OC对象</li>
<li>Block的调用即是<code>函数的调用</code></li>
</ul>
<p>新建方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span>(^blk)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;MCBlock&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    blk();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>clang</code> 编译器编译 <code>clang -rewrite-objc main.m</code>  将代码转换成 <code>C++</code> 源码</p>
<h5 id="main-block-impl-0"><a href="#main-block-impl-0" class="headerlink" title="__main_block_impl_0"></a>__main_block_impl_0</h5><p>编译后的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, struct __main_block_desc_0 *desc, <span class="keyword">int</span> flags=<span class="number">0</span>) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;MCBlock&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(struct __main_block_impl_0)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span>(*blk)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA));</span><br><span class="line">    ((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先看 <code>Block</code> 语法部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^&#123;</span><br><span class="line">    printf(&quot;MCBlock&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>转换后的源码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;MCBlock&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 <code>Block</code> 使用的匿名函数实际上被作为简单的 C 语言函数来处理，<code>__main_block_func_0</code>  <code>main</code> 是 <code>Block</code> 语法所属的函数名，<code>0</code> 是 <code>Block</code> 语法在该函数出现的顺序值</p>
<p><code>__cself</code> 相当于指向自身实例的变量 <code>self</code> ，是指向 <code>Block</code> 值的变量</p>
<p>参数声明部分，结构体 <code>__main_block_impl_0</code> 声明如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, struct __main_block_desc_0 *desc, <span class="keyword">int</span> flags=<span class="number">0</span>) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>转换后的源码中，一并写入了其构造函数，除去构造函数，该结构体有两个成员变量</p>
<p>第一个成员变量 <code>struct __block_impl impl</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> &#123;</span></span><br><span class="line">  <span class="keyword">void</span> *isa;</span><br><span class="line">  <span class="keyword">int</span> Flags; 		 <span class="comment">//标记位</span></span><br><span class="line">  <span class="keyword">int</span> Reserved;	 <span class="comment">//预留位</span></span><br><span class="line">  <span class="keyword">void</span> *FuncPtr; <span class="comment">//函数指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>第二个成员变量 <code>struct __main_block_desc_0* Desc</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> reserved;		<span class="comment">//预留位</span></span><br><span class="line">  <span class="keyword">size_t</span> Block_size;	<span class="comment">//结构体大小</span></span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(struct __main_block_impl_0)&#125;;</span><br></pre></td></tr></table></figure>

<p>再看下 <code>__main_block_impl_0</code> 构造函数部分</p>
<p>先看下函数的调用 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span>(*blk)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA));</span><br></pre></td></tr></table></figure>

<p>转换比较多，去掉转换部分</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> *<span class="title">blk</span> =</span> </span><br><span class="line">  __main_block_impl_0(__main_block_func_0, &amp;__main_block_desc_0_DATA)</span><br></pre></td></tr></table></figure>

<p>第一个参数是 C 语言函数指针，第二个参数 block 描述</p>
<p>结构体根据构造函数，会像下面进行初始化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">Flags = <span class="number">0</span>;</span><br><span class="line">Reserved = <span class="number">0</span>;</span><br><span class="line">FuncPtr = __main_block_func_0;</span><br><span class="line">Desc = &amp;__main_block_desc_0_DATA;</span><br></pre></td></tr></table></figure>

<p>将函数指针 <code>__main_block_func_0</code> 赋值给成员变量 <code>FuncPtr</code></p>
<p>使用 <code>Block</code> 的部分</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">blk();</span><br></pre></td></tr></table></figure>

<p>转换成源代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">((void (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);</span><br><span class="line">    return 0;</span><br></pre></td></tr></table></figure>

<p>去掉转换的部分</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(*blk-&gt;impl.FuncPtr)(blk);</span><br></pre></td></tr></table></figure>

<p>通过函数指针找到函数执行体，这就是简单的使用函数指针调用函数</p>
<h5 id="捕获变量"><a href="#捕获变量" class="headerlink" title="捕获变量"></a>捕获变量</h5><ul>
<li>Block捕获值，内部结构体会新增同名成员变量，保存传进来的值</li>
<li>对基本数据类型的局部变量捕获其值</li>
<li>对于对象类型的局部变量联通所有权修饰符一起截获</li>
<li>以指针形式截获静态局部变量</li>
<li>不截获全局变量、静态全局变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;全局变量</span><br><span class="line">int global_var &#x3D; 4;</span><br><span class="line">&#x2F;&#x2F;静态全局变量</span><br><span class="line">static int static_global_var &#x3D; 5;</span><br><span class="line">- (void)method</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;基本数据类型局部变量</span><br><span class="line">    int var &#x3D; 1;</span><br><span class="line">    &#x2F;&#x2F;对象类型局部变量</span><br><span class="line">    __unsafe_unretained id unsafe_obj &#x3D; nil;</span><br><span class="line">    __strong id strong_obj &#x3D; nil;</span><br><span class="line">    &#x2F;&#x2F;静态局部变量</span><br><span class="line">    static int static_var &#x3D; 3;</span><br><span class="line">    void(^Block)(void) &#x3D; ^(void) &#123;</span><br><span class="line">        NSLog(@&quot;局部变量&lt;基本数据类型&gt; var %d&quot;, var);</span><br><span class="line">        NSLog(@&quot;局部变量&lt;__unsafe_unretained 对象类型&gt; var %@&quot;, unsafe_obj);</span><br><span class="line">        NSLog(@&quot;局部变量&lt;__strong 对象类型&gt; var %@&quot;, strong_obj);</span><br><span class="line">        NSLog(@&quot;静态变量 %d&quot;, static_var);</span><br><span class="line">        NSLog(@&quot;全局变量 %d&quot;, global_var);</span><br><span class="line">        NSLog(@&quot;静态全局变量 %d&quot;, static_global_var);</span><br><span class="line">    &#125;;</span><br><span class="line">    Block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>clang</code> 编译源码 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> global_var = <span class="number">4</span>;</span><br><span class="line"><span class="comment">//对全局变量、静态全局变量不截获</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> static_global_var = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">MCBlock__method_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">MCBlock__method_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  <span class="keyword">int</span> var; <span class="comment">//捕获局部变量</span></span><br><span class="line">  __unsafe_unretained id unsafe_obj;<span class="comment">//连同所有权修饰符一起截获</span></span><br><span class="line">  __strong id strong_obj;</span><br><span class="line">  <span class="keyword">int</span> *static_var; <span class="comment">//以指针针形式截获静态局部变量</span></span><br><span class="line">  __MCBlock__method_block_impl_0(<span class="keyword">void</span> *fp, struct __MCBlock__method_block_desc_0 *desc, <span class="keyword">int</span> _var, __unsafe_unretained id _unsafe_obj, __strong id _strong_obj, <span class="keyword">int</span> *_static_var, <span class="keyword">int</span> flags=<span class="number">0</span>) : var(_var), unsafe_obj(_unsafe_obj), strong_obj(_strong_obj), static_var(_static_var) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dmy = <span class="number">256</span>;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt = <span class="string">&quot;val = %d&quot;</span>;</span><br><span class="line">    <span class="keyword">void</span> (^blk)(<span class="keyword">void</span>) = ^&#123; <span class="built_in">printf</span>(fmt, val); &#125;;</span><br><span class="line">    val = <span class="number">2</span>;</span><br><span class="line">    fmt = <span class="string">&quot;value changed. val = %d&quot;</span>;</span><br><span class="line">    blk();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果 <code>val = 10</code></p>
<p><code>clang</code> 编译源码 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *fmt;</span><br><span class="line">  <span class="keyword">int</span> val;</span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, struct __main_block_desc_0 *desc, <span class="keyword">const</span> <span class="keyword">char</span> *_fmt, <span class="keyword">int</span> _val, <span class="keyword">int</span> flags=<span class="number">0</span>) : fmt(_fmt), val(_val) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *fmt = __cself-&gt;fmt; <span class="comment">// bound by copy</span></span><br><span class="line">  <span class="keyword">int</span> val = __cself-&gt;val; <span class="comment">// bound by copy</span></span><br><span class="line"> <span class="built_in">printf</span>(fmt, val); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(struct __main_block_impl_0)&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dmy = <span class="number">256</span>;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt = <span class="string">&quot;val = %d&quot;</span>;</span><br><span class="line">    <span class="keyword">void</span> (*blk)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, fmt, val));</span><br><span class="line">    val = <span class="number">2</span>;</span><br><span class="line">    fmt = <span class="string">&quot;value changed. val = %d&quot;</span>;</span><br><span class="line">    ((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">IMAGE_INFO</span> &#123;</span> <span class="keyword">unsigned</span> version; <span class="keyword">unsigned</span> flag; &#125; _OBJC_IMAGE_INFO = &#123; <span class="number">0</span>, <span class="number">2</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到 <code>Block</code> 语法表达式中使用的局部变量追加到了 <code>__main_block_impl_0</code> 中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *fmt;</span><br><span class="line">  <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>Block</code> 的匿名函数实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">^&#123; <span class="built_in">printf</span>(fmt, val); &#125;;</span><br></pre></td></tr></table></figure>

<p>转换成以下函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *fmt = __cself-&gt;fmt; <span class="comment">// bound by copy</span></span><br><span class="line">  <span class="keyword">int</span> val = __cself-&gt;val; <span class="comment">// bound by copy</span></span><br><span class="line"> <span class="built_in">printf</span>(fmt, val); &#125;</span><br></pre></td></tr></table></figure>

<p>执行 <code>Block</code> 时，<code>Block</code> 语法表达式中使用的局部变量被保存到 <code>Block</code> 的结构体实例（ 即<code>Block</code> 自身）中</p>
<h5 id="block"><a href="#block" class="headerlink" title="__block"></a>__block</h5><p><code>__block</code> 说明符类似于 <code>auto</code> <code>static</code> 用于指定将变量值设置到哪个存储域中</p>
<p>例如，<code>auto</code> 表示作为自动变量存储在栈中，<code>static</code> 表示作为静态变量存储在数据区中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __block <span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">void</span> (^blk)(<span class="keyword">void</span>) = ^&#123;val = <span class="number">1</span>;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>clang</code> 编译后</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">Block_byref_val_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">void</span> *__isa;</span><br><span class="line">__Block_byref_val_0 *__forwarding;</span><br><span class="line"> <span class="keyword">int</span> __flags;</span><br><span class="line"> <span class="keyword">int</span> __size;</span><br><span class="line"> <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  __Block_byref_val_0 *val; <span class="comment">// by ref</span></span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, struct __main_block_desc_0 *desc, __Block_byref_val_0 *_val, <span class="keyword">int</span> flags=<span class="number">0</span>) : val(_val-&gt;__forwarding) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">  __Block_byref_val_0 *val = __cself-&gt;val; <span class="comment">// bound by ref</span></span><br><span class="line">(val-&gt;__forwarding-&gt;val) = <span class="number">1</span>;&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;_Block_object_assign((<span class="keyword">void</span>*)&amp;dst-&gt;val, (<span class="keyword">void</span>*)src-&gt;val, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_dispose_0(struct __main_block_impl_0*src) &#123;_Block_object_dispose((<span class="keyword">void</span>*)src-&gt;val, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">  <span class="keyword">void</span> (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);</span><br><span class="line">  <span class="keyword">void</span> (*dispose)(struct __main_block_impl_0*);</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __attribute__((__blocks__(byref))) __Block_byref_val_0 val = &#123;(<span class="keyword">void</span>*)<span class="number">0</span>,(__Block_byref_val_0 *)&amp;val, <span class="number">0</span>, <span class="keyword">sizeof</span>(__Block_byref_val_0), <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">void</span> (*blk)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_val_0 *)&amp;val, <span class="number">570425344</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看声明部分 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">__attribute__((__blocks__(byref))) __Block_byref_val_0 val = &#123;(<span class="keyword">void</span>*)<span class="number">0</span>,(__Block_byref_val_0 *)&amp;val, <span class="number">0</span>, <span class="keyword">sizeof</span>(__Block_byref_val_0), <span class="number">10</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>简化后</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">__Block_byref_val_0 val = &#123;<span class="number">0</span>,&amp;val, <span class="number">0</span>, <span class="keyword">sizeof</span>(__Block_byref_val_0), <span class="number">10</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>局部变量加上 <code>__block</code> 修饰后，变成了结构体实例 <code>__Block_byref_val_0</code> ，保存原始变量的指针和值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">Block_byref_val_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">void</span> *__isa;</span><br><span class="line">__Block_byref_val_0 *__forwarding;</span><br><span class="line"> <span class="keyword">int</span> __flags;</span><br><span class="line"> <span class="keyword">int</span> __size;</span><br><span class="line"> <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> (*blk)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_val_0 *)&amp;val, <span class="number">570425344</span>));</span><br></pre></td></tr></table></figure>

<p><code>__main_block_impl_0</code> 中，将变量 <code>val</code> 生成的结构体对象的指针地址，传给 <code>Block</code> ，然后 <code>Block</code> 内部就可以对外界的变量进行操作了</p>
<p>查看给 <code>__block</code> 变量赋值部分 <code>^&#123;val = 1;&#125;;</code></p>
<p>转换后的源码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">  __Block_byref_val_0 *val = __cself-&gt;val; <span class="comment">// bound by ref</span></span><br><span class="line">(val-&gt;__forwarding-&gt;val) = <span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure>

<p><code>__Block_byref_val_0</code> 结构体实例的成员变量 <code>__forwarding</code> 持有指向该实例自身的指针。</p>
<p>通过成员变量 <code>__forwarding</code> 访问成员变量 <code>val</code></p>
<p><img src="/2021/05/19/Block/forwarding.png" alt="forwarding"></p>
<ul>
<li>一般情况下，对被截获的变量进行赋值操作需要添加 <code>__block</code> 修饰符</li>
<li>基本数据类型和对象类型的局部变量进行赋值时需要加 <code>__block</code> 修饰符</li>
<li>静态局部变量、静态全局变量、全局变量，进行赋值时不需要加 <code>__block</code> 修饰符</li>
</ul>
<h5 id="Block类型"><a href="#Block类型" class="headerlink" title="Block类型"></a>Block类型</h5><ul>
<li>_NSConcreteGlobalBlock（NSGlobalBlock）全局 <code>Block</code> ，存储在程序的数据区（.data区）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void(^blk)(void) &#x3D; ^&#123;</span><br><span class="line">    printf(&quot;MCBlock\n&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">NSLog(@&quot;%@&quot;, blk);</span><br></pre></td></tr></table></figure>

<p>此时的 <code>Block</code> 无参也无返回值，属于全局 <code>Block</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;__NSGlobalBlock__: 0x100004030&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>_NSConcreteStackBlock（NSStackBlock）栈 <code>Block</code> ，存放在栈上</p>
</li>
<li><p>_NSConcreteMallocBlock（NSMallocBlock）堆 <code>Block </code>，存储在堆上</p>
</li>
</ul>
<p>不使用外部变量的 Block 是全局 Block</p>
<p>使用外部变量并且未进行 copy 操作的 Block 是栈 Block</p>
<p>对栈 Block 进行 copy 操作，就是堆 Block，对全局 Block 进行 copy，仍是全局 Block</p>
<p>对 Block 的 copy 操作</p>
<p><img src="/2021/05/19/Block/copy.png" alt="copy"></p>
<p>对栈上Block进行copy操作，copy结果-&gt;在堆上产生一个Block</p>
<p><img src="/2021/05/19/Block/block2.png" alt="block2"></p>
<p><code>Block</code>  在栈上时 <code>__Block_byref_val_0</code> 结构体内 <code>__forwarding</code> 指针指向结构体自己</p>
<p><code>Block</code> 被复制到堆中时，<code>__Block_byref_val_0</code> 结构体也被复制到堆中一份</p>
<p>栈上 <code>__Block_byref_val_0</code> 结构体中的  <code>__forwarding</code>  指针指向堆中 <code>__Block_byref_val_0</code> 结构体</p>
<p>堆上  <code>__Block_byref_val_0</code> 结构体中的  <code>__forwarding</code>  指针指向结构体自己</p>
<ul>
<li><code>__forwarding</code> 指针存在的意义：</li>
</ul>
<p>不论在任何内存位置，都可以顺利访问同一个 <code>__block</code> 变量</p>
<p>无论 <code>__block</code> 变量配置在栈上还是堆上时，都能正确的访问 <code>__block</code> 变量</p>
]]></content>
  </entry>
  <entry>
    <title>KVO KVC</title>
    <url>/2021/07/06/KVO-KVC/</url>
    <content><![CDATA[<h4 id="KVC"><a href="#KVC" class="headerlink" title="KVC"></a>KVC</h4><p><code>KVC</code> 键值编码，一种间接访问对象属性的机制，通过字符串访问对象属性</p>
<h5 id="setValue-forKey"><a href="#setValue-forKey" class="headerlink" title="setValue:forKey"></a>setValue:forKey</h5><p>查找对应 key 的 setter 方法，顺序为：<code>set&lt;Key&gt; -&gt; _set&lt;Key&gt; -&gt; setIs&lt;Key&gt;</code></p>
<p>查找到则直接设置属性的 value</p>
<p>如果没有，检查 <code>accessInstanceVariableDirectly</code> 是否允许访问成员变量</p>
<p>如果 YES，则查找实例变量，顺序为：<code>_&lt;Key&gt; -&gt; _is&lt;Key&gt; -&gt; &lt;Key&gt; -&gt; &lt;isKey&gt;</code></p>
<p>找到实例变量则赋值，否则执行 <code>setValueforUndefineKey:</code> 方法，抛出 <code>NSUndefinedKeyException</code></p>
<h5 id="valueforKey"><a href="#valueforKey" class="headerlink" title="valueforKey:"></a>valueforKey:</h5><p>查找对应 key 的 getter 方法，顺序为：<code>get&lt;Key&gt; -&gt; &lt;key&gt; -&gt; is&lt;Key&gt; -&gt; _&lt;Key&gt;</code></p>
<p>查找到直接返回结果</p>
<p>如果没有，检查 <code>accessInstanceVariableDirectly</code> 是否允许访问成员变量</p>
<p>如果 YES，则查找实例变量，顺序为：<code>_&lt;Key&gt; -&gt; _is&lt;Key&gt; -&gt; &lt;Key&gt; -&gt; &lt;isKey&gt;</code></p>
<p>查找到直接返回结果，否则执行 <code>valueForUndefinedKey:</code> 方法，抛出 <code>NSUndefinedKeyException</code></p>
<h4 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h4><p><code>KeyValueObserving</code> 键值观察者，可以监听对象属性的改变</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.person &#x3D; [[LGPerson alloc] init];</span><br><span class="line">self.person.age &#x3D; 1;</span><br><span class="line">NSKeyValueObservingOptions options &#x3D; NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld;</span><br><span class="line">[self.person addObserver:self forKeyPath:@&quot;age&quot; options:options context:@&quot;1&quot;];</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</span><br><span class="line">    self.person.age &#x3D; 20;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context &#123;</span><br><span class="line">    NSLog(@&quot;%@ %@ %@ %@&quot;, keyPath, object, change, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加观察者后，KVO 会在运行时动态创建一个子类 <code>NSKVONotifing_XXX</code>，将对象的 isa 指向新创建的类</p>
<p>修改对象属性时，会先调用子类 <code>NSKVONotifing_XXX</code> 的 setter 方法</p>
<p>子类 setter 内部会调用：</p>
<ol>
<li><code>willChangeValueForKey:</code></li>
<li>父类原来的 setter</li>
<li><code>didChangeValueForKey:</code></li>
<li>内部会触发监听器的监听方法 <code>(observeValueForKeyPath:ofObject:change:context:)</code></li>
</ol>
<h4 id="Swift-KVO"><a href="#Swift-KVO" class="headerlink" title="Swift KVO"></a>Swift KVO</h4><p>kVO 是一个纯 OC 特性，swift class 需要在声明时加 <code>@objcMembers</code> 关键字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@objcMembers class OCClass: NSObject &#123;</span><br><span class="line">    dynamic var name: String</span><br><span class="line">    init(name: String) &#123;</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>观察的闭包需要强引用，否则函数离开这个观察闭包后会被回收</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var occlass: OCClass?</span><br><span class="line">var observation: NSKeyValueObservation?</span><br><span class="line">  </span><br><span class="line">occlass &#x3D; OCClass(name: &quot;aa&quot;)</span><br><span class="line">observation &#x3D; occlass!.observe(\.name) &#123; obj, changed in</span><br><span class="line">    let new &#x3D; obj.name</span><br><span class="line">    print(&quot;new:\(new)&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">override func touchesBegan(_ touches: Set&lt;UITouch&gt;, with event: UIEvent?) &#123;</span><br><span class="line">    occlass?.name &#x3D; &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><h5 id="1、直接修改成员变量会触发-KVO-吗"><a href="#1、直接修改成员变量会触发-KVO-吗" class="headerlink" title="1、直接修改成员变量会触发 KVO 吗"></a>1、直接修改成员变量会触发 KVO 吗</h5><p>不会，没有调用重写后的 set 方法</p>
<h5 id="2、手动触发-KVO"><a href="#2、手动触发-KVO" class="headerlink" title="2、手动触发 KVO"></a>2、手动触发 KVO</h5><p>手动调用 <code>willChangeValueForKey:</code> ，<code>didChangeValueForKey:</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[self.person willChangeValueForKey:@&quot;age&quot;];</span><br><span class="line">self.person-&gt;_age &#x3D; 2;</span><br><span class="line">[self.person didChangeValueForKey:@&quot;age&quot;];</span><br></pre></td></tr></table></figure>

<h5 id="3、如何对可变数组进行-KVO"><a href="#3、如何对可变数组进行-KVO" class="headerlink" title="3、如何对可变数组进行 KVO"></a>3、如何对可变数组进行 KVO</h5><p>可变数组添加元素 <code>addObject:</code> 是不会调用 <code>setter</code> 方法的，不会触发 KVO 通知回调</p>
<p>需要使用 <code>mutableArrayValueForKey</code> 获取要操作的可变数组，添加元素</p>
<p>  <code>[[self mutableArrayValueForKey:@“arr”] addObject:item]</code> </p>
]]></content>
  </entry>
  <entry>
    <title>RunLoop</title>
    <url>/2021/05/27/RunLoop/</url>
    <content><![CDATA[<p>[TOC]</p>
<h4 id="RunLoop"><a href="#RunLoop" class="headerlink" title="RunLoop"></a>RunLoop</h4><p><code>RunLoop</code> 通过内部维护的事件循环（Event Loop）来对事件/消息进行管理的一个对象<br>没有消息需要处理时，休眠以避免资源占用，由用户态切换到内核态<br>有消息需要处理时，立刻被唤醒，由内核态切换到用户态·</p>
<p><code>RunLoop</code> 是一个对象，循环中处理程序运行过程中出现的各种事件（如触摸事件、UI刷新事件、定时器事件、Selector事件）和消息，从而保持程序持续运行，没有事件处理的时候会进入睡眠，节省 CPU 资源，提高程序性能</p>
<p><code>RunLoop</code> 是一个接收处理异步消息事件的循环，一个循环中，等待事件发生，然后将事件送到能处理它的地方</p>
<ul>
<li><p>NSRunLoop<br><code>CFRunLoopRef</code> 的封装，提供了面向对象的 API，这些 API 不是线程安全的</p>
</li>
<li><p>CFRunLoopRef<br><code>CoreFoundation</code> 框架内的，提供了纯 C 函数的 API，这些 API 都是线程安全的</p>
</li>
</ul>
<h4 id="RunLoop-作用"><a href="#RunLoop-作用" class="headerlink" title="RunLoop 作用"></a>RunLoop 作用</h4><ul>
<li>保持程序持续运行</li>
<li>处理 APP 中的各种事件（触摸、定时器、performSelector）</li>
<li>节省 CPU 资源，该做事做事，该休息休息</li>
</ul>
<h4 id="RunLoop-源码"><a href="#RunLoop-源码" class="headerlink" title="RunLoop 源码"></a>RunLoop 源码</h4><p><code>CFRunLoop</code> 源码 <a href="http://opensource.apple.com/tarballs/CF/">下载地址</a></p>
<p>苹果提供了两个获取 <code>RunLoop</code> 的函数 <code>CFRunLoopGetMain()</code>   <code>CFRunLoopGetCurrent()</code></p>
<p>进入 <code>CFRunLoopGetMain()</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">CFRunLoopRef <span class="title">CFRunLoopGetMain</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    CHECK_FOR_FORK();</span><br><span class="line">    <span class="keyword">static</span> CFRunLoopRef __main = <span class="literal">NULL</span>; <span class="comment">// no retain needed</span></span><br><span class="line">    <span class="comment">//pthread_main_thread_np 主线程</span></span><br><span class="line">    <span class="keyword">if</span> (!__main) __main = _CFRunLoopGet0(pthread_main_thread_np()); <span class="comment">// no CAS needed</span></span><br><span class="line">    <span class="keyword">return</span> __main;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入 <code>_CFRunLoopGet0</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局的 Dictionary ke 是 pthread_t，value 是 CFRunLoopRef</span></span><br><span class="line"><span class="keyword">static</span> CFMutableDictionaryRef __CFRunLoops = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//访问 loopsDic 时的锁</span></span><br><span class="line"><span class="keyword">static</span> CFLock_t loopsLock = CFLockInit;</span><br><span class="line"></span><br><span class="line"><span class="comment">// should only be called by Foundation</span></span><br><span class="line"><span class="comment">// t==0 is a synonym for &quot;main thread&quot; that always works</span></span><br><span class="line"><span class="comment">//获取一个 pthread 对应的 RunLoop</span></span><br><span class="line">CF_EXPORT CFRunLoopRef _CFRunLoopGet0(<span class="keyword">pthread_t</span> t) &#123;</span><br><span class="line">  	<span class="comment">//如果 t 不存在，默认为主线程</span></span><br><span class="line">    <span class="keyword">if</span> (pthread_equal(t, kNilPthreadT)) &#123;</span><br><span class="line">			  t = pthread_main_thread_np();</span><br><span class="line">    &#125;</span><br><span class="line">    __CFLock(&amp;loopsLock);</span><br><span class="line">    <span class="keyword">if</span> (!__CFRunLoops) &#123;</span><br><span class="line">        __CFUnlock(&amp;loopsLock);</span><br><span class="line">      </span><br><span class="line">			 CFMutableDictionaryRef dict = CFDictionaryCreateMutable(kCFAllocatorSystemDefault, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;kCFTypeDictionaryValueCallBacks);</span><br><span class="line">      <span class="comment">//通过主线程 创建主运行循环</span></span><br><span class="line">			 CFRunLoopRef mainLoop = __CFRunLoopCreate(pthread_main_thread_np());</span><br><span class="line">			 CFDictionarySetValue(dict, pthreadPointer(pthread_main_thread_np()), mainLoop);</span><br><span class="line">      </span><br><span class="line">			 <span class="keyword">if</span> (!OSAtomicCompareAndSwapPtrBarrier(<span class="literal">NULL</span>, dict, (<span class="keyword">void</span> * <span class="keyword">volatile</span> *)&amp;__CFRunLoops)) &#123;</span><br><span class="line">	    		CFRelease(dict);</span><br><span class="line">			 &#125;</span><br><span class="line">			 CFRelease(mainLoop);</span><br><span class="line">       __CFLock(&amp;loopsLock);</span><br><span class="line">    &#125;</span><br><span class="line">    CFRunLoopRef loop = (CFRunLoopRef)CFDictionaryGetValue(__CFRunLoops, pthreadPointer(t));</span><br><span class="line">    __CFUnlock(&amp;loopsLock);</span><br><span class="line">    <span class="keyword">if</span> (!loop) &#123;</span><br><span class="line">				CFRunLoopRef newLoop = __CFRunLoopCreate(t);</span><br><span class="line">      	__CFLock(&amp;loopsLock);</span><br><span class="line">				loop = (CFRunLoopRef)CFDictionaryGetValue(__CFRunLoops, pthreadPointer(t));</span><br><span class="line">				<span class="keyword">if</span> (!loop) &#123;</span><br><span class="line">	   		 		CFDictionarySetValue(__CFRunLoops, pthreadPointer(t), newLoop);</span><br><span class="line">	    			loop = newLoop;</span><br><span class="line">				&#125;</span><br><span class="line">      </span><br><span class="line">       	<span class="comment">// don&#x27;t release run loops inside the loopsLock, because CFRunLoopDeallocate may end up taking it</span></span><br><span class="line">       	__CFUnlock(&amp;loopsLock);</span><br><span class="line">			 	CFRelease(newLoop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pthread_equal(t, pthread_self())) &#123;</span><br><span class="line">        _CFSetTSD(__CFTSDKeyRunLoop, (<span class="keyword">void</span> *)loop, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == _CFGetTSD(__CFTSDKeyRunLoopCntr)) &#123;</span><br><span class="line">            _CFSetTSD(__CFTSDKeyRunLoopCntr, (<span class="keyword">void</span> *)(PTHREAD_DESTRUCTOR_ITERATIONS<span class="number">-1</span>), (<span class="keyword">void</span> (*)(<span class="keyword">void</span> *))__CFFinalizeRunLoop);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> loop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="RunLoop-与线程"><a href="#RunLoop-与线程" class="headerlink" title="RunLoop 与线程"></a>RunLoop 与线程</h4><p><code>RunLoop</code> 与线程是一一对应的，其关系保存在一个全局的 <code>Dictionary</code> 里</p>
<p><code>key</code> 是 <code>pthread_t</code> ，<code>value</code> 是 <code>CFRunLoopRef</code></p>
<p>线程刚创建时并没有 <code>RunLoop</code>，如果你不主动获取，那它一直都不会有</p>
<p><code>RunLoop</code> 的创建发生在第一次获取时，<code>RunLoop</code> 的销毁发生在线程结束时</p>
<h4 id="RunLoop-结构"><a href="#RunLoop-结构" class="headerlink" title="RunLoop 结构"></a>RunLoop 结构</h4><h5 id="CFRunLoopRef"><a href="#CFRunLoopRef" class="headerlink" title="CFRunLoopRef"></a>CFRunLoopRef</h5><p><code>RunLoop</code> 底层就是一个 <code>CFRunLoopRef</code> 结构体</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CFRunLoop.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoop</span> * <span class="title">CFRunLoopRef</span>;</span></span><br><span class="line"><span class="comment">// CFRunLoop.c</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoop</span> &#123;</span></span><br><span class="line">    <span class="keyword">pthread_t</span> _pthread;  <span class="comment">// 与线程一一对应</span></span><br><span class="line">    CFMutableSetRef _commonModes;</span><br><span class="line">    CFMutableSetRef _commonModeItems;</span><br><span class="line">    CFRunLoopModeRef _currentMode;</span><br><span class="line">    CFMutableSetRef _modes;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>_pthread：<code>RunLoop</code> 与线程是一一对应关系</li>
<li>_commonModes：存储 <code>NSString</code> 对象的集合（Mode名称）</li>
<li>_commonModeItems：存储被标记为通用模式的 <code>Source0/Source1/Timer/Observer</code></li>
<li>_currentMode：<code>RunLoop</code> 当前的运行模式</li>
<li>_modes：存储 <code>RunLoop</code> 所有的 <code>Mode</code> 模式 </li>
</ul>
<h5 id="CFRunLoopModeRef"><a href="#CFRunLoopModeRef" class="headerlink" title="CFRunLoopModeRef"></a>CFRunLoopModeRef</h5><img src="RunLoop_0.png" alt="RunLoop_0" style="zoom:50%;" />

<p>一个 <code>RunLoop</code> 包含若干个 <code>Mode</code>，每个 <code>Mode</code> 又包含若干个 <code>Source/Timer/Observer</code></p>
<p>启动时只能选择其中一个 <code>Mode</code>，作为 <code>currentMode</code></p>
<p>如果要切换 <code>Mode</code>，只能退出 <code>Loop</code> ，再重新指定一个 <code>Mode</code> 进入，这样做主要为了分隔开不同组的 <code>Source/Timer/Observer</code> ，让其互不影响</p>
<p>数据结构：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CFRunLoop.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopMode</span> *<span class="title">CFRunLoopModeRef</span>;</span></span><br><span class="line"><span class="comment">// CFRunLoop.c</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopMode</span> &#123;</span></span><br><span class="line">    CFStringRef _name;             <span class="comment">// mode 类型，如：NSDefaultRunLoopMode</span></span><br><span class="line">    CFMutableSetRef _sources0;     <span class="comment">// CFRunLoopSourceRef</span></span><br><span class="line">    CFMutableSetRef _sources1;     <span class="comment">// CFRunLoopSourceRef</span></span><br><span class="line">    CFMutableArrayRef _observers;  <span class="comment">// CFRunLoopObserverRef</span></span><br><span class="line">    CFMutableArrayRef _timers;     <span class="comment">// CFRunLoopTimerRef</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>一个 <code>Mode</code> 可以将自己标记为 <code>Common</code> 属性 （通过将其 <code>ModeName</code> 添加到 <code>RunLoop</code> 的 <code>commonModes</code> 中），每当 <code>RunLoop</code> 的内容发生变化时，<code>RunLoop</code> 都会自动将 <code>_commonModeItems</code> 里的 <code>Source/Timer/Observer</code> 同步到具有 <code>Common</code> 标记的所有 <code>Mode</code> 里</p>
<p>举例：</p>
<p>当你创建一个 <code>Timer</code> 并加到 <code>Default Mode</code> 时，<code>Timer</code> 会得到回调，但滑动 <code>ScrollView</code>  时，<code>RunLoop</code> 会将 <code>Mode</code> 切换为 <code>TrackingRunLoopMode</code> ，这时 <code>Timer</code> 就不会被回调</p>
<p>一种办法是将这个 <code>Timer</code> 分别加入到这两个 <code>Mode</code> ，还有一种方式就是将 <code>Timer</code> 加入到顶层 <code>RunLoop</code> 的 <code>commonModeItems</code> 中，<code>commonModeItems</code> 被 <code>RunLoop</code> 自动更新到所有具有 <code>Common</code> 属性的 <code>Mode</code> </p>
<ul>
<li>RunLoop 常见模式<ul>
<li>NSDefaultRunLoopModel 默认 Mode，通常主线程在这个模式下运行</li>
<li>UITrackingRunLoopMode 追踪 Mode，保证 ScrollView 滑动顺畅，不受其它 Mode 影响</li>
<li>UIInitializationRunLoopMode 程序启动后过度 Mode，启动完成后就不使用</li>
<li>NSRunLoopCommonModes 不是实际存在的一种模式，只是一个标记，同步 <code>Source/Timer/Observer</code>到多个 Mode 中的技术方案</li>
</ul>
</li>
</ul>
<h5 id="CFRunLoopSourceRef"><a href="#CFRunLoopSourceRef" class="headerlink" title="CFRunLoopSourceRef"></a>CFRunLoopSourceRef</h5><p>事件产生的地方，有两个版本 <code>Source0</code> 和 <code>Source1</code></p>
<p><code>__CFRunLoopSource</code> 中的共用体 <code>union</code> 中的 <code>version0</code> 和 <code>version1</code> 就分别对应 <code>Source0</code> 和 <code>Source1</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CFRunLoop.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopSource</span> * <span class="title">CFRunLoopSourceRef</span>;</span></span><br><span class="line"><span class="comment">// CFRunLoop.m</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopSource</span> &#123;</span></span><br><span class="line">    CFRuntimeBase _base;</span><br><span class="line">    <span class="keyword">uint32_t</span> _bits;</span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> _lock;</span><br><span class="line">    CFIndex _order;                         <span class="comment">/* immutable */</span></span><br><span class="line">    CFMutableBagRef _runLoops;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">	    CFRunLoopSourceContext version0;	<span class="comment">/* immutable, except invalidation */</span></span><br><span class="line">        CFRunLoopSourceContext1 version1;	<span class="comment">/* immutable, except invalidation */</span></span><br><span class="line">    &#125; _context;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Source0</code></li>
</ul>
<p>只包含了一个回调（函数指针），不能主动触发事件，使用时需要先调用 <code>CFRunLoopSourceSignal(source)</code> 将 <code>Source</code> 标记为待处理，然后手动调用 <code>CFRunLoopWakeUp(runloop) </code> 唤醒 <code>RunLoop</code> ，让其处理事件<br>表示非系统事件，即用户自定义的事件</p>
<ul>
<li><code>Source1</code></li>
</ul>
<p>包含了一个 <code>mach_port</code> 和一个回调（函数指针），被用于通过内核和其它线程相互发送消息，这种 <code>Source</code> 能主动唤醒 <code>RunLoop</code> 线程<br>表示系统事件，主要负责底层通讯，具备唤醒能力</p>
<h5 id="CFRunLoopTimerRef"><a href="#CFRunLoopTimerRef" class="headerlink" title="CFRunLoopTimerRef"></a>CFRunLoopTimerRef</h5><p><code>CFRunLoopTimerRef</code> 和 <code>NSTimer</code> 是对象桥接（toll-free-bridge）的，可以相互转换</p>
<p><code>performSelector:withObject:afterDelay:</code> 方法会创建 <code>timer</code> 并添加到 <code>RunLoop</code> 中</p>
<h5 id="CFRunLoopObserverRef"><a href="#CFRunLoopObserverRef" class="headerlink" title="CFRunLoopObserverRef"></a>CFRunLoopObserverRef</h5><p>观察者，用来监听 <code>RunLoop</code> 的 6 种活动状态</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Run Loop Observer Activities */</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">CF_OPTIONS</span><span class="params">(CFOptionFlags, CFRunLoopActivity)</span> </span>&#123;</span><br><span class="line">    kCFRunLoopEntry = (<span class="number">1U</span>L &lt;&lt; <span class="number">0</span>),          <span class="comment">// 即将进入 RunLoop</span></span><br><span class="line">    kCFRunLoopBeforeTimers = (<span class="number">1U</span>L &lt;&lt; <span class="number">1</span>),   <span class="comment">// 即将处理 Timers</span></span><br><span class="line">    kCFRunLoopBeforeSources = (<span class="number">1U</span>L &lt;&lt; <span class="number">2</span>),  <span class="comment">// 即将处理 Sources</span></span><br><span class="line">    kCFRunLoopBeforeWaiting = (<span class="number">1U</span>L &lt;&lt; <span class="number">5</span>),  <span class="comment">// 即将进入休眠</span></span><br><span class="line">    kCFRunLoopAfterWaiting = (<span class="number">1U</span>L &lt;&lt; <span class="number">6</span>),   <span class="comment">// 刚从休眠中唤醒</span></span><br><span class="line">    kCFRunLoopExit = (<span class="number">1U</span>L &lt;&lt; <span class="number">7</span>),           <span class="comment">// 即将退出 RunLoop</span></span><br><span class="line">    kCFRunLoopAllActivities = <span class="number">0x0FFFFFFF</span>U  <span class="comment">// 表示以上所有状态</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="RunLoop-启动"><a href="#RunLoop-启动" class="headerlink" title="RunLoop 启动"></a>RunLoop 启动</h4><p><code>iOS</code> 程序能保持持续运行的原因是在 <code>main()</code> 函数中调用了 <code>UIApplicationMain</code> 函数，这个函数内部会启动主线程的 <code>RunLoop</code></p>
<img src="bt.png" alt="bt" style="zoom:80%;" />

<p>看到，在 <code>UIApplicationMain</code> 函数中调用了 Core Foundation 框架下的 <code>CFRunLoopRunSpecific</code> 函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">SInt32 <span class="title">CFRunLoopRunSpecific</span><span class="params">(CFRunLoopRef rl, CFStringRef modeName, CFTimeInterval seconds, Boolean returnAfterSourceHandled)</span> </span>&#123;     <span class="comment">/* DOES CALLOUT */</span></span><br><span class="line">    CHECK_FOR_FORK();</span><br><span class="line">    <span class="keyword">if</span> (__CFRunLoopIsDeallocating(rl)) <span class="keyword">return</span> kCFRunLoopRunFinished;</span><br><span class="line">    __CFRunLoopLock(rl);</span><br><span class="line">    <span class="comment">//根据 modeName 找到当前运行的 mode</span></span><br><span class="line">    CFRunLoopModeRef currentMode = __CFRunLoopFindMode(rl, modeName, <span class="literal">false</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">volatile</span> _per_run_data *previousPerRun = __CFRunLoopPushPerRunData(rl);</span><br><span class="line">    CFRunLoopModeRef previousMode = rl-&gt;_currentMode;</span><br><span class="line">    rl-&gt;_currentMode = currentMode;</span><br><span class="line">    <span class="keyword">int32_t</span> result = kCFRunLoopRunFinished;</span><br><span class="line">  <span class="comment">//通知 Observer 即将进入 RunLoop</span></span><br><span class="line">	<span class="keyword">if</span> (currentMode-&gt;_observerMask &amp; kCFRunLoopEntry ) __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopEntry);</span><br><span class="line">  <span class="comment">//__CFRunLoopRun RunLoop 具体要做的事</span></span><br><span class="line">	result = __CFRunLoopRun(rl, currentMode, seconds, returnAfterSourceHandled, previousMode);</span><br><span class="line">	<span class="comment">//通知 Observer 即将退出 RunLoop</span></span><br><span class="line">  <span class="keyword">if</span> (currentMode-&gt;_observerMask &amp; kCFRunLoopExit ) __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="CFRunLoopRun"><a href="#CFRunLoopRun" class="headerlink" title="__CFRunLoopRun"></a>__CFRunLoopRun</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int32_t</span> __CFRunLoopRun(CFRunLoopRef rl, CFRunLoopModeRef rlm, CFTimeInterval seconds, Boolean stopAfterHandle, CFRunLoopModeRef previousMode) &#123;</span><br><span class="line">    <span class="keyword">int32_t</span> retVal = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 通知Observers：即将处理Timers</span></span><br><span class="line">        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeTimers);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通知Observers：即将处理Sources</span></span><br><span class="line">        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeSources);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通知Observers：即将处理Blocks</span></span><br><span class="line">        __CFRunLoopDoBlocks(rl, rlm);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理Sources0</span></span><br><span class="line">        <span class="keyword">if</span> (__CFRunLoopDoSources0(rl, rlm, stopAfterHandle)) &#123;</span><br><span class="line">            <span class="comment">// 处理Blocks</span></span><br><span class="line">            __CFRunLoopDoBlocks(rl, rlm);</span><br><span class="line">        &#125;</span><br><span class="line">        Boolean poll = sourceHandledThisLoop || (<span class="number">0U</span>LL == timeout_context-&gt;termTSR);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断有无Sources1</span></span><br><span class="line">        <span class="keyword">if</span> (__CFRunLoopServiceMachPort(dispatchPort, &amp;msg, <span class="keyword">sizeof</span>(msg_buffer), &amp;livePort, <span class="number">0</span>, &amp;voucherState, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">            <span class="comment">// 如果有Sources1 就跳转到handle_msg</span></span><br><span class="line">            <span class="keyword">goto</span> handle_msg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通知Observers：即将休眠</span></span><br><span class="line">        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeWaiting);</span><br><span class="line">        __CFRunLoopSetSleeping(rl);</span><br><span class="line">           </span><br><span class="line">        <span class="comment">// 等待别的消息来唤醒当前线程</span></span><br><span class="line">        __CFRunLoopServiceMachPort(waitSet, &amp;msg, <span class="keyword">sizeof</span>(msg_buffer), &amp;livePort, poll ? <span class="number">0</span> : TIMEOUT_INFINITY, &amp;voucherState, &amp;voucherCopy);</span><br><span class="line">        </span><br><span class="line">        __CFRunLoopUnsetSleeping(rl);</span><br><span class="line">        <span class="comment">// 通知Observers：结束睡眠</span></span><br><span class="line">        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopAfterWaiting);</span><br><span class="line"></span><br><span class="line">        handle_msg:</span><br><span class="line">        <span class="keyword">if</span> (被Timer唤醒) &#123;</span><br><span class="line">            <span class="comment">// 处理Timers</span></span><br><span class="line">            __CFRunLoopDoTimers(rl, rlm, mach_absolute_time()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (被GCD唤醒) &#123;</span><br><span class="line">            <span class="comment">// 处理GCD</span></span><br><span class="line">            __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 被Sources1唤醒</span></span><br><span class="line">            <span class="comment">// 处理Sources1</span></span><br><span class="line">            __CFRunLoopDoSource1(rl, rlm, rls) || sourceHandledThisLoop;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理Blocks</span></span><br><span class="line">        __CFRunLoopDoBlocks(rl, rlm);</span><br><span class="line">        <span class="keyword">if</span> (sourceHandledThisLoop &amp;&amp; stopAfterHandle) &#123;</span><br><span class="line">            <span class="comment">//事件已处理完</span></span><br><span class="line">            retVal = kCFRunLoopRunHandledSource;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeout_context-&gt;termTSR &lt; mach_absolute_time()) &#123;</span><br><span class="line">            <span class="comment">//超时</span></span><br><span class="line">            retVal = kCFRunLoopRunTimedOut;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__CFRunLoopIsStopped(rl)) &#123;</span><br><span class="line">            __CFRunLoopUnsetStopped(rl);</span><br><span class="line">            <span class="comment">//外部调用者强制停止</span></span><br><span class="line">            retVal = kCFRunLoopRunStopped;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rlm-&gt;_stopped) &#123;</span><br><span class="line">            rlm-&gt;_stopped = <span class="literal">false</span>;</span><br><span class="line">            retVal = kCFRunLoopRunStopped;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__CFRunLoopModeIsEmpty(rl, rlm, previousMode)) &#123;</span><br><span class="line">            <span class="comment">//mode为空，RunLoop结束</span></span><br><span class="line">            retVal = kCFRunLoopRunFinished;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span> == retVal);</span><br><span class="line">    <span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="RunLoop-事件循环机制"><a href="#RunLoop-事件循环机制" class="headerlink" title="RunLoop 事件循环机制"></a>RunLoop 事件循环机制</h5><p><code>RunLoop</code> 启动后首先会发送一个通知，通知观察者 RunLoop 即将启动</p>
<p>之后会通知将要处理 <code>Timer/Source0</code> 事件</p>
<p>处理 <code>Source0</code> 事件</p>
<p>如果有 <code>Source1</code> 需要处理，处理唤醒时收到的消息，之后跳回第2步</p>
<p>如果没有 <code>Source1</code> 要处理，此时线程将要休眠，同时发送通知给 Observer，发生从用户态到内核态的切换</p>
<p>线程进入休眠，等待唤醒</p>
<p>线程刚被唤醒，通知观察者</p>
<p>处理唤醒时收到的消息，之后回到第2步</p>
<p><img src="/2021/05/27/RunLoop/RunLoop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt="RunLoop事件循环"></p>
<h4 id="自动释放池-AutoReleasePool"><a href="#自动释放池-AutoReleasePool" class="headerlink" title="自动释放池 AutoReleasePool"></a>自动释放池 AutoReleasePool</h4><p>OC 的一种内存自动回收机制，将自动释放池 utoreleasepool 中变量的 release 时机延迟</p>
<p>将对象加入到自动释放池中，这个对象不会立即释放，而是等到 runloop 休眠或者超出 autoreleasepool 作用域之后才释放</p>
<h5 id="自动释放池原理"><a href="#自动释放池原理" class="headerlink" title="自动释放池原理"></a>自动释放池原理</h5><p>每个自动释放池都是由若干个 <code>AutoreleasePoolPage</code> 组成的双向链表结构</p>
<p>自动释放池本质是一个 <code>AutoreleasePoolPage 结构体对象</code> ，是一个栈结构存储的页</p>
<p>每一个 <code>AutoreleasePoolPage</code> 都是以双向链表形式连接</p>
<p>以栈为结点，通过双向链表的形式组合而成的数据结构</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">AutoreleasePage &#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> POOL_BOUNDARY nil <span class="comment">//边界对象（哨兵对象）</span></span></span><br><span class="line">	id *next;</span><br><span class="line">	AutoreleasePage *<span class="keyword">const</span> parent;</span><br><span class="line">	AutoreleasePage child;</span><br><span class="line">	<span class="keyword">pthread_t</span> <span class="keyword">const</span> thread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="autoreleasePool-在何时释放"><a href="#autoreleasePool-在何时释放" class="headerlink" title="autoreleasePool 在何时释放"></a>autoreleasePool 在何时释放</h5><p>APP 启动后，苹果在主线程 RunLoop 里注册了两个 Observer</p>
<p>第一个 Observer 监听事件是 Entry（即将进入Loop）创建自动释放池</p>
<p>第二个 Observer 监听两个事件，BeforeWaiting（准备进入休眠）释放旧的池并创建新池；Exit（即将退出 Loop）释放自动释放池</p>
<h4 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h4><h5 id="休眠状态的-RunLoop，通过哪种方式唤醒？"><a href="#休眠状态的-RunLoop，通过哪种方式唤醒？" class="headerlink" title="休眠状态的 RunLoop，通过哪种方式唤醒？"></a>休眠状态的 RunLoop，通过哪种方式唤醒？</h5><p>Source1、Timer、外部手动唤醒</p>
<h5 id="PerformSelector"><a href="#PerformSelector" class="headerlink" title="PerformSelector"></a>PerformSelector</h5><p>NSObject 的 <code>performSelector:afterDelay:</code>  、<code>performSelectorSelector:onThread:</code></p>
<p>实际内部会创建一个 Timer 并添加到当前线程的 RunLoop 中，如果当前线程没有 RunLoop，则方法会失效</p>
<h5 id="GCD-在-RunLoop-中的使用"><a href="#GCD-在-RunLoop-中的使用" class="headerlink" title="GCD 在 RunLoop 中的使用"></a>GCD 在 RunLoop 中的使用</h5><p>GCD 由子线程回到主线程，只有这种情况下才会触发 RunLoop，会触发 RunLoop 的 source1</p>
<p><a href="https://blog.ibireme.com/2015/05/18/runloop/">深入理解 RunLoop</a></p>
<p><a href="https://blog.csdn.net/weixin_42350379/article/details/104543184">深入浅出 RunLoop</a></p>
]]></content>
  </entry>
  <entry>
    <title>事件传递和响应</title>
    <url>/2021/07/20/%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E5%92%8C%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<h4 id="1、事件的传递"><a href="#1、事件的传递" class="headerlink" title="1、事件的传递"></a>1、事件的传递</h4><h5 id="1-1-事件传递流程"><a href="#1-1-事件传递流程" class="headerlink" title="1.1 事件传递流程"></a>1.1 事件传递流程</h5><p>事件发生后，系统会将事件加入到一个由 UIApplication 管理的事件队列中<br>UIApplication 会从事件队列中取出最前面的事件，分发下去，首先传给 UIWindow<br>UIWindow 会在视图层次结构中找到一个最合适的视图来处理事件</p>
<p>触摸事件的传递是从父控件传递到子控件<br>UIApplication -&gt; Window -&gt; 寻找最合适的视图来处理事件</p>
<h5 id="1-2-寻找最合适的视图"><a href="#1-2-寻找最合适的视图" class="headerlink" title="1.2 寻找最合适的视图"></a>1.2 寻找最合适的视图</h5><p>内部通过调用 <code>hitTest:withEvent</code> 方法找最终响应视图</p>
<p><code>hitTest:withEvent</code> 底层实现：</p>
<ol>
<li>判断当前控件能不能接收事件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(self.userInteractionEnabled &#x3D;&#x3D; NO || self.hidden &#x3D;&#x3D; YES || self.alpha &lt;&#x3D; 0.01)</span><br><span class="line">return  nil;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>判断触摸点在不在当前的控件上</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(![self pointInside:point withEvent:event]) return nil;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>从后往前遍历自己的子控件（最后添加的子视图先遍历）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int count &#x3D; (int)self.subviews.count;</span><br><span class="line">for (int i &#x3D; count - 1; i &gt;&#x3D; 0;i-- ) &#123;</span><br><span class="line">	UIView *childV &#x3D; self.subviews[i];</span><br><span class="line">	&#x2F;&#x2F;把当前坐标系上的点转换成子控件坐标系上的点.</span><br><span class="line">	CGPoint childP &#x3D; [self convertPoint:point toView:childV];</span><br><span class="line">	&#x2F;&#x2F;判断自己的子控件是不是最适合的View 对子view进行 hitTest</span><br><span class="line">	UIView *fitView &#x3D; [childV hitTest:childP withEvent:event];</span><br><span class="line">	&#x2F;&#x2F;如果子控件是最适合的View,直接返回</span><br><span class="line">  if (fitView) &#123;</span><br><span class="line">    return fitView;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>如果没有找到最合适的view，自己就是最合适的view</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return self</span><br></pre></td></tr></table></figure>

<h5 id="1-3-应用"><a href="#1-3-应用" class="headerlink" title="1.3 应用"></a>1.3 应用</h5><ol>
<li>扩大button的响应区域</li>
<li>子view超出了父view的bounds响应事件</li>
<li>使部分区域失去响应</li>
<li>让非scrollView区域响应scrollView拖拽事件</li>
</ol>
<p>button被view遮住了，要让button接收事件</p>
<p><img src="/2021/07/20/%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E5%92%8C%E5%93%8D%E5%BA%94/button.png" alt="button"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123;</span><br><span class="line">    &#x2F;&#x2F;return [super hitTest:point withEvent:event];</span><br><span class="line">    &#x2F;&#x2F;拿到后面的按钮</span><br><span class="line">    &#x2F;&#x2F;当点在按钮上的时候,才返回按钮,如果不在按钮上.保持系统默认做法</span><br><span class="line">    &#x2F;&#x2F;判断点在不在按钮身上</span><br><span class="line">    &#x2F;&#x2F;把当前的点转换到按钮身上的坐标系的点</span><br><span class="line">    CGPoint btnP &#x3D; [self convertPoint:point toView:self.btn];</span><br><span class="line">    if ([self.btn pointInside:btnP withEvent:event]) &#123;</span><br><span class="line">        return self.btn;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return [super hitTest:point withEvent:event];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2、事件响应"><a href="#2、事件响应" class="headerlink" title="2、事件响应"></a>2、事件响应</h4><p>传递链是用来获取第一响应者，接下来开始响应事件</p>
<p>响应链条：firstView -&gt; super view -&gt; … -&gt; viewcontroller -&gt;window -&gt; application -&gt; appdelegate</p>
<p>找打最合适的视图后，事件会从视图开始，沿着响应链 nextResponder 传递，直到找到处理事件的视图，没有处理的事件会被丢弃</p>
<p>如果有父视图，则 nextResponder指向父视图</p>
<p>响应链传递</p>
<p><img src="/2021/07/20/%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E5%92%8C%E5%93%8D%E5%BA%94/%E5%93%8D%E5%BA%94%E9%93%BE%E4%BC%A0%E9%80%92.png" alt="响应链传递"></p>
<h5 id="2-1-系统响应"><a href="#2-1-系统响应" class="headerlink" title="2.1 系统响应"></a>2.1 系统响应</h5><p>屏幕点击后，将事件交由 IOKit 处理</p>
<p>IOKit 将事件封装成一个 IOHIDEvent 对象，通过 mach port 传递给 SpringBoard 进程</p>
<p>SpringBoard 接收到触摸事件，触发主线程 RunLoop 的 source1回调</p>
<p>如果此时在桌面，则交给桌面系统消耗该事件</p>
<p>如果此时在 APP，通过 IPC（进程通信）传给 APP 进程</p>
<h5 id="2-2-APP响应"><a href="#2-2-APP响应" class="headerlink" title="2.2 APP响应"></a>2.2 APP响应</h5><p>APP 进程的 mach port 接收到 SpringBoard 触摸事件，主线程 RunLoop 被唤醒，触发 source1 回调</p>
<p>source1 内部触发了 source0 回调，将接收的 IOHIDEvent 对象封装成 UIEvent 对象</p>
<p>source0 将事件添加到 UIApplication 对象的事件队列中，开始寻找最佳响应者</p>
<h5 id="2-3-应用"><a href="#2-3-应用" class="headerlink" title="2.3 应用"></a>2.3 应用</h5><ul>
<li>利用响应链获取 view 的控制器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension UIView &#123;</span><br><span class="line">    var viewController: UIViewController? &#123;</span><br><span class="line">        var next &#x3D; next</span><br><span class="line">        var current: UIViewController?</span><br><span class="line">        while next !&#x3D; nil &#123;</span><br><span class="line">            if next is UIViewController &#123;</span><br><span class="line">                return next as? UIViewController</span><br><span class="line">            &#125;</span><br><span class="line">            next &#x3D; next?.next</span><br><span class="line">        &#125;</span><br><span class="line">        return current</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3、面试题"><a href="#3、面试题" class="headerlink" title="3、面试题"></a>3、面试题</h4><ul>
<li>APP 中间有个 button，在你手触摸屏幕点击后，到这个 button 收到点击事件，中间发生了什么？</li>
</ul>
<ol>
<li>设备将 touch 到的 UITouch 和 UIEvent 对象打包，放到当前活动的 Application 的事件队列中</li>
<li>UIApplication 会从事件队列中取出触摸事件并传递给 UIWindow</li>
<li>UIWindow 使用 hitTest:withEvent 方法查找操作所在视图</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>内存管理</title>
    <url>/2021/07/23/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h4 id="内存分布"><a href="#内存分布" class="headerlink" title="内存分布"></a>内存分布</h4><p>iOS 中的内存区域从低地址到高地址：.text 段（代码区）、.data 段（已初始化全局变量、静态变量）、.bss 段（未初始化全局变量、静态变量）、堆区、栈区</p>
<img src="内存分布.png" alt="内存分布" style="zoom:40%;" />

<p>堆区：</p>
<p>低地址向高地址拓展数据结构，不连续的内存区域，先进先出，由程序员动态分配和释放，通过 alloc 分配的对象</p>
<p>缺点：手动管理，速度慢，容易产生内存碎片</p>
<p>栈区：</p>
<p>高地址向低地址拓展的数据结构，连续内存区域，后进先出，一般运行时分配，编译器自动分配并释放</p>
<p>由编译器自动分配并释放，不会产生内存碎片，速度快，缺点：内存大小限制不灵活</p>
<h4 id="TaggedPointer"><a href="#TaggedPointer" class="headerlink" title="TaggedPointer"></a>TaggedPointer</h4><p>普通对象的查找过程：从栈中找到指针，然后去堆中寻找指针对应的内存空间，进而读取值</p>
<p>64 bit 开始，引入了 TaggedPointer 技术，用于优化 NSNumber、NSDate、NSString 等小对象存储</p>
<p>TaggedPointer 通过在其最后一个 bit 位设置一个特殊标记，用于将数据直接保存到指针本身</p>
<p>TaggedPointer 指针的值不再是堆区地址，而是真正的值。所以实际上它不再是一个对象了，内存并不存储在堆中</p>
<p>将对象的指针拆分成两部分，一部分直接保存数据，另一部分作为特殊标记，表示这是一个特殊指针，不指向任何一个地址</p>
<ul>
<li>引入 TaggedPointer 对象之后，64 位 CPU 下 NSNumber 的内存变成这样</li>
</ul>
<img src="nsnumber.png" alt="nsnumber" style="zoom:60%;" />



<ul>
<li>执行以下代码，有什么区别</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dispatch_queue_t queue &#x3D; dispatch_get_global_queue(0, 0);</span><br><span class="line">for (int i &#x3D; 0; i &lt; 1000; i++) &#123;</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        self.name &#x3D; [NSString stringWithFormat:@&quot;abcdefghij&quot;];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dispatch_queue_t queue &#x3D; dispatch_get_global_queue(0, 0);</span><br><span class="line">for (int i &#x3D; 0; i &lt; 1000; i++) &#123;</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        self.name &#x3D; [NSString stringWithFormat:@&quot;abc&quot;];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个会 Crash，第二个正常运行</p>
<p>第一个多线程同时访问 name 的 setter 方法，有可能多条线程同时执行 [_name release]，连续 release 两次造成对象的过度释放，导致 Crash</p>
<p>第二个 name 指针为 TaggedPointer 类型，不存在 release 操作</p>
<p>两个 name 的底层类型不一致，第一个 name 类型是 NSCFString 类型，存储在堆上，第二个 name 类型是NSTaggedPointerString 存储在常量区</p>
<p>NSString 对于那些所需内存小于 60 位的字符串，它可以创建一个 TaggedPointer，其余则被放置在真正的 NSString 对象里，这使得常用短字符串的性能得到提升</p>
<h4 id="NONPOINTER-ISA"><a href="#NONPOINTER-ISA" class="headerlink" title="NONPOINTER_ISA"></a>NONPOINTER_ISA</h4><p>和 TaggedPointer 设计思想类似，ISA 其实并不单单是一个指针，其中一些位仍旧编码指向对象的类，一部分额外空间存储其它内容</p>
<p>ISA 指针第 1 位表示使用优化的 ISA 指针</p>
<p>64 位架构下，ISA 指针本身占 64 位，64 位存储一个内存地址显然浪费，为了提高内存利用率，剩余比特位中存储了内存管理相关的内容</p>
<ul>
<li>nonpointer：表示是否对isa开启指针优化 。0代表是纯isa指针，1代表除了地址外，还包含了类的一些信息、对象的引用计数等</li>
<li>has_assoc：关联对象标志位</li>
<li>该对象是否有C++或Objc的析构器，如果有析构函数，则需要做一些析构的逻辑处理，如果没有，则可以更快的释放对象</li>
<li>shiftcls：存在类指针的值，开启指针优化的情况下，arm64位中有33位来存储类的指针</li>
<li>magic：判断当前对象是真的对象还是一段没有初始化的空间</li>
<li>weakly_referenced：是否被指向或者曾经指向一个ARC的弱变量，没有弱引用的对象释放的更快</li>
<li>deallocating：是否正在释放</li>
<li>has_sidetable_rc：当对象引用计数大于10时，则需要进位</li>
<li>extra_rc：表示该对象的引用计数值，实际上是引用计数减一。例如：如果引用计数为10，那么extra_rc为9。如果引用计数大于10，则需要使用has_sidetable_rc</li>
</ul>
<h4 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h4><p>当引用计数存储到一定值，并不会存储到 Nonpointer_isa 位域的 extra_rx 中，而是会存储到 SideTable 散列表中</p>
<p>在 runtime 内存空间中，SideTable 是一个 hash 数组，里面存储了 SideTable</p>
<p>SideTable 的 hash 键就是一个对象 obj 的 address，因此可以说，一个 obj，对应了一个 SideTable，但一个 SideTable 会对应多个 obj，因为SideTable 的数量有限，所有会有很多 obj 公用一个 SideTable</p>
<p>SideTable结构中包含了自旋锁、引用计数表、弱引用表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct SideTable &#123;</span><br><span class="line">    spinlock_t slock;       &#x2F;&#x2F; 自旋锁</span><br><span class="line">    RefcountMap refcnts;    &#x2F;&#x2F;引用计数的Map表 key-value</span><br><span class="line">    weak_table_t weak_table;&#x2F;&#x2F;弱引用表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>为什么不直接用一张SideTable，而是用SideTables去管理多个 SideTable</li>
</ul>
<p>SideTable 里有一个自旋锁，如果把所有的类都放在同一个 SideTable，有任何一个类有改动都会对整个 table 做操作，并且在操作一个类的同时，操作别的类会被锁住等待，这样会导致操作效率和查询效率都很低。而有多个SideTable 的话，操作的都是单个 Table，并不会影响其他的 table，这就是分离锁</p>
<h5 id="retain"><a href="#retain" class="headerlink" title="retain"></a>retain</h5><p>retain 底层先判断是否是 Nonpointer_isa，如果不是，则直接操作散列表进行 +1 操作<br>如果是 Nonpointer_isa，extra_rc 引用计数+1，extra_rc只有8位，如果出现上溢出，需要借助散列表存储，一半存储在散列表中，另一半还是存储在 extra_rc 中</p>
<h5 id="release"><a href="#release" class="headerlink" title="release"></a>release</h5><p>release 底层先判断是否是 Nonpointer_isa，如果不是，则直接操作散列表进行 -1 操作<br>如果是 Nonpointer_isa，extra_rc 引用计数-1，如果引用计数出现下溢出，看散列表中是否存储引用计数，从散列表中取一半进行 -1 操作，然后存储到 extra_rc 中，如果还是下溢出，就调用 dealloc</p>
<p><a href="https://www.infoq.cn/article/deep-understanding-of-tagged-pointer/">深入理解 TaggedPointer</a></p>
]]></content>
  </entry>
</search>
