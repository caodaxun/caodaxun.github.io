<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Block</title>
    <url>/2021/05/19/Block/</url>
    <content><![CDATA[<h5 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h5><ul>
<li>将<code>函数</code>及其<code>执行上下文（函数执行环境）</code>封装起来的<code>对象</code></li>
<li>Block内部有<code>isa</code> 指针，所以说其本质也是OC对象</li>
<li>Block的调用即是<code>函数的调用</code></li>
</ul>
<p>新建方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span>(^blk)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;MCBlock&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    blk();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>clang</code> 编译器编译 <code>clang -rewrite-objc main.m</code>  将代码转换成 <code>C++</code> 源码</p>
<h5 id="main-block-impl-0"><a href="#main-block-impl-0" class="headerlink" title="__main_block_impl_0"></a>__main_block_impl_0</h5><p>编译后的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, struct __main_block_desc_0 *desc, <span class="keyword">int</span> flags=<span class="number">0</span>) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;MCBlock&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(struct __main_block_impl_0)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span>(*blk)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA));</span><br><span class="line">    ((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先看 <code>Block</code> 语法部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^&#123;</span><br><span class="line">    printf(&quot;MCBlock&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>转换后的源码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;MCBlock&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 <code>Block</code> 使用的匿名函数实际上被作为简单的 C 语言函数来处理，<code>__main_block_func_0</code>  <code>main</code> 是 <code>Block</code> 语法所属的函数名，<code>0</code> 是 <code>Block</code> 语法在该函数出现的顺序值</p>
<p><code>__cself</code> 相当于指向自身实例的变量 <code>self</code> ，是指向 <code>Block</code> 值的变量</p>
<p>参数声明部分，结构体 <code>__main_block_impl_0</code> 声明如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, struct __main_block_desc_0 *desc, <span class="keyword">int</span> flags=<span class="number">0</span>) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>转换后的源码中，一并写入了其构造函数，除去构造函数，该结构体有两个成员变量</p>
<p>第一个成员变量 <code>struct __block_impl impl</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> &#123;</span></span><br><span class="line">  <span class="keyword">void</span> *isa;</span><br><span class="line">  <span class="keyword">int</span> Flags; 		 <span class="comment">//标记位</span></span><br><span class="line">  <span class="keyword">int</span> Reserved;	 <span class="comment">//预留位</span></span><br><span class="line">  <span class="keyword">void</span> *FuncPtr; <span class="comment">//函数指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>第二个成员变量 <code>struct __main_block_desc_0* Desc</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> reserved;		<span class="comment">//预留位</span></span><br><span class="line">  <span class="keyword">size_t</span> Block_size;	<span class="comment">//结构体大小</span></span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(struct __main_block_impl_0)&#125;;</span><br></pre></td></tr></table></figure>

<p>再看下 <code>__main_block_impl_0</code> 构造函数部分</p>
<p>先看下函数的调用 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span>(*blk)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA));</span><br></pre></td></tr></table></figure>

<p>转换比较多，去掉转换部分</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> *<span class="title">blk</span> =</span> </span><br><span class="line">  __main_block_impl_0(__main_block_func_0, &amp;__main_block_desc_0_DATA)</span><br></pre></td></tr></table></figure>

<p>第一个参数是 C 语言函数指针，第二个参数 block 描述</p>
<p>结构体根据构造函数，会像下面进行初始化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">Flags = <span class="number">0</span>;</span><br><span class="line">Reserved = <span class="number">0</span>;</span><br><span class="line">FuncPtr = __main_block_func_0;</span><br><span class="line">Desc = &amp;__main_block_desc_0_DATA;</span><br></pre></td></tr></table></figure>

<p>将函数指针 <code>__main_block_func_0</code> 赋值给成员变量 <code>FuncPtr</code></p>
<p>使用 <code>Block</code> 的部分</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">blk();</span><br></pre></td></tr></table></figure>

<p>转换成源代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">((void (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);</span><br><span class="line">    return 0;</span><br></pre></td></tr></table></figure>

<p>去掉转换的部分</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(*blk-&gt;impl.FuncPtr)(blk);</span><br></pre></td></tr></table></figure>

<p>通过函数指针找到函数执行体，这就是简单的使用函数指针调用函数</p>
<h5 id="捕获变量"><a href="#捕获变量" class="headerlink" title="捕获变量"></a>捕获变量</h5><ul>
<li>Block捕获值，内部结构体会新增同名成员变量，保存传进来的值</li>
<li>对基本数据类型的局部变量捕获其值</li>
<li>对于对象类型的局部变量连同所有权修饰符一起截获</li>
<li>以指针形式截获静态局部变量</li>
<li>不截获全局变量、静态全局变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;全局变量</span><br><span class="line">int global_var &#x3D; 4;</span><br><span class="line">&#x2F;&#x2F;静态全局变量</span><br><span class="line">static int static_global_var &#x3D; 5;</span><br><span class="line">- (void)method</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;基本数据类型局部变量</span><br><span class="line">    int var &#x3D; 1;</span><br><span class="line">    &#x2F;&#x2F;对象类型局部变量</span><br><span class="line">    __unsafe_unretained id unsafe_obj &#x3D; nil;</span><br><span class="line">    __strong id strong_obj &#x3D; nil;</span><br><span class="line">    &#x2F;&#x2F;静态局部变量</span><br><span class="line">    static int static_var &#x3D; 3;</span><br><span class="line">    void(^Block)(void) &#x3D; ^(void) &#123;</span><br><span class="line">        NSLog(@&quot;局部变量&lt;基本数据类型&gt; var %d&quot;, var);</span><br><span class="line">        NSLog(@&quot;局部变量&lt;__unsafe_unretained 对象类型&gt; var %@&quot;, unsafe_obj);</span><br><span class="line">        NSLog(@&quot;局部变量&lt;__strong 对象类型&gt; var %@&quot;, strong_obj);</span><br><span class="line">        NSLog(@&quot;静态变量 %d&quot;, static_var);</span><br><span class="line">        NSLog(@&quot;全局变量 %d&quot;, global_var);</span><br><span class="line">        NSLog(@&quot;静态全局变量 %d&quot;, static_global_var);</span><br><span class="line">    &#125;;</span><br><span class="line">    Block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>clang</code> 编译源码 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> global_var = <span class="number">4</span>;</span><br><span class="line"><span class="comment">//对全局变量、静态全局变量不截获</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> static_global_var = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">MCBlock__method_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">MCBlock__method_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  <span class="keyword">int</span> var; <span class="comment">//捕获局部变量</span></span><br><span class="line">  __unsafe_unretained id unsafe_obj;<span class="comment">//连同所有权修饰符一起截获</span></span><br><span class="line">  __strong id strong_obj;</span><br><span class="line">  <span class="keyword">int</span> *static_var; <span class="comment">//以指针针形式截获静态局部变量</span></span><br><span class="line">  __MCBlock__method_block_impl_0(<span class="keyword">void</span> *fp, struct __MCBlock__method_block_desc_0 *desc, <span class="keyword">int</span> _var, __unsafe_unretained id _unsafe_obj, __strong id _strong_obj, <span class="keyword">int</span> *_static_var, <span class="keyword">int</span> flags=<span class="number">0</span>) : var(_var), unsafe_obj(_unsafe_obj), strong_obj(_strong_obj), static_var(_static_var) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dmy = <span class="number">256</span>;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt = <span class="string">&quot;val = %d&quot;</span>;</span><br><span class="line">    <span class="keyword">void</span> (^blk)(<span class="keyword">void</span>) = ^&#123; <span class="built_in">printf</span>(fmt, val); &#125;;</span><br><span class="line">    val = <span class="number">2</span>;</span><br><span class="line">    fmt = <span class="string">&quot;value changed. val = %d&quot;</span>;</span><br><span class="line">    blk();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果 <code>val = 10</code></p>
<p><code>clang</code> 编译源码 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *fmt;</span><br><span class="line">  <span class="keyword">int</span> val;</span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, struct __main_block_desc_0 *desc, <span class="keyword">const</span> <span class="keyword">char</span> *_fmt, <span class="keyword">int</span> _val, <span class="keyword">int</span> flags=<span class="number">0</span>) : fmt(_fmt), val(_val) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *fmt = __cself-&gt;fmt; <span class="comment">// bound by copy</span></span><br><span class="line">  <span class="keyword">int</span> val = __cself-&gt;val; <span class="comment">// bound by copy</span></span><br><span class="line"> <span class="built_in">printf</span>(fmt, val); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(struct __main_block_impl_0)&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dmy = <span class="number">256</span>;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt = <span class="string">&quot;val = %d&quot;</span>;</span><br><span class="line">    <span class="keyword">void</span> (*blk)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, fmt, val));</span><br><span class="line">    val = <span class="number">2</span>;</span><br><span class="line">    fmt = <span class="string">&quot;value changed. val = %d&quot;</span>;</span><br><span class="line">    ((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">IMAGE_INFO</span> &#123;</span> <span class="keyword">unsigned</span> version; <span class="keyword">unsigned</span> flag; &#125; _OBJC_IMAGE_INFO = &#123; <span class="number">0</span>, <span class="number">2</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到 <code>Block</code> 语法表达式中使用的局部变量追加到了 <code>__main_block_impl_0</code> 中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *fmt;</span><br><span class="line">  <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>Block</code> 的匿名函数实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">^&#123; <span class="built_in">printf</span>(fmt, val); &#125;;</span><br></pre></td></tr></table></figure>

<p>转换成以下函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *fmt = __cself-&gt;fmt; <span class="comment">// bound by copy</span></span><br><span class="line">  <span class="keyword">int</span> val = __cself-&gt;val; <span class="comment">// bound by copy</span></span><br><span class="line"> <span class="built_in">printf</span>(fmt, val); &#125;</span><br></pre></td></tr></table></figure>

<p>执行 <code>Block</code> 时，<code>Block</code> 语法表达式中使用的局部变量被保存到 <code>Block</code> 的结构体实例（ 即<code>Block</code> 自身）中</p>
<h5 id="block"><a href="#block" class="headerlink" title="__block"></a>__block</h5><p><code>__block</code> 说明符类似于 <code>auto</code> <code>static</code> 用于指定将变量值设置到哪个存储域中</p>
<p>例如，<code>auto</code> 表示作为自动变量存储在栈中，<code>static</code> 表示作为静态变量存储在数据区中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __block <span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">void</span> (^blk)(<span class="keyword">void</span>) = ^&#123;val = <span class="number">1</span>;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>clang</code> 编译后</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">Block_byref_val_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">void</span> *__isa;</span><br><span class="line">__Block_byref_val_0 *__forwarding;</span><br><span class="line"> <span class="keyword">int</span> __flags;</span><br><span class="line"> <span class="keyword">int</span> __size;</span><br><span class="line"> <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  __Block_byref_val_0 *val; <span class="comment">// by ref</span></span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, struct __main_block_desc_0 *desc, __Block_byref_val_0 *_val, <span class="keyword">int</span> flags=<span class="number">0</span>) : val(_val-&gt;__forwarding) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">  __Block_byref_val_0 *val = __cself-&gt;val; <span class="comment">// bound by ref</span></span><br><span class="line">(val-&gt;__forwarding-&gt;val) = <span class="number">1</span>;&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;_Block_object_assign((<span class="keyword">void</span>*)&amp;dst-&gt;val, (<span class="keyword">void</span>*)src-&gt;val, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_dispose_0(struct __main_block_impl_0*src) &#123;_Block_object_dispose((<span class="keyword">void</span>*)src-&gt;val, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">  <span class="keyword">void</span> (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);</span><br><span class="line">  <span class="keyword">void</span> (*dispose)(struct __main_block_impl_0*);</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __attribute__((__blocks__(byref))) __Block_byref_val_0 val = &#123;(<span class="keyword">void</span>*)<span class="number">0</span>,(__Block_byref_val_0 *)&amp;val, <span class="number">0</span>, <span class="keyword">sizeof</span>(__Block_byref_val_0), <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">void</span> (*blk)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_val_0 *)&amp;val, <span class="number">570425344</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看声明部分 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">__attribute__((__blocks__(byref))) __Block_byref_val_0 val = &#123;(<span class="keyword">void</span>*)<span class="number">0</span>,(__Block_byref_val_0 *)&amp;val, <span class="number">0</span>, <span class="keyword">sizeof</span>(__Block_byref_val_0), <span class="number">10</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>简化后</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">__Block_byref_val_0 val = &#123;<span class="number">0</span>,&amp;val, <span class="number">0</span>, <span class="keyword">sizeof</span>(__Block_byref_val_0), <span class="number">10</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>局部变量加上 <code>__block</code> 修饰后，变成了结构体实例 <code>__Block_byref_val_0</code> ，保存原始变量的指针和值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">Block_byref_val_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">void</span> *__isa;</span><br><span class="line">__Block_byref_val_0 *__forwarding;</span><br><span class="line"> <span class="keyword">int</span> __flags;</span><br><span class="line"> <span class="keyword">int</span> __size;</span><br><span class="line"> <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> (*blk)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_val_0 *)&amp;val, <span class="number">570425344</span>));</span><br></pre></td></tr></table></figure>

<p><code>__main_block_impl_0</code> 中，将变量 <code>val</code> 生成的结构体对象的指针地址，传给 <code>Block</code> ，然后 <code>Block</code> 内部就可以对外界的变量进行操作了</p>
<p>查看给 <code>__block</code> 变量赋值部分 <code>^&#123;val = 1;&#125;;</code></p>
<p>转换后的源码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">  __Block_byref_val_0 *val = __cself-&gt;val; <span class="comment">// bound by ref</span></span><br><span class="line">(val-&gt;__forwarding-&gt;val) = <span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure>

<p><code>__Block_byref_val_0</code> 结构体实例的成员变量 <code>__forwarding</code> 持有指向该实例自身的指针。</p>
<p>通过成员变量 <code>__forwarding</code> 访问成员变量 <code>val</code></p>
<p><img src="/2021/05/19/Block/forwarding.png" alt="forwarding"></p>
<ul>
<li>一般情况下，对被截获的变量进行赋值操作需要添加 <code>__block</code> 修饰符</li>
<li>基本数据类型和对象类型的局部变量进行赋值时需要加 <code>__block</code> 修饰符</li>
<li>静态局部变量、静态全局变量、全局变量，进行赋值时不需要加 <code>__block</code> 修饰符</li>
</ul>
<h5 id="Block类型"><a href="#Block类型" class="headerlink" title="Block类型"></a>Block类型</h5><ul>
<li>_NSConcreteGlobalBlock（NSGlobalBlock）全局 <code>Block</code> ，存储在程序的数据区（.data区）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void(^blk)(void) &#x3D; ^&#123;</span><br><span class="line">    printf(&quot;MCBlock\n&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">NSLog(@&quot;%@&quot;, blk);</span><br></pre></td></tr></table></figure>

<p>此时的 <code>Block</code> 无参也无返回值，属于全局 <code>Block</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;__NSGlobalBlock__: 0x100004030&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>_NSConcreteStackBlock（NSStackBlock）栈 <code>Block</code> ，存放在栈上</p>
</li>
<li><p>_NSConcreteMallocBlock（NSMallocBlock）堆 <code>Block </code>，存储在堆上</p>
</li>
</ul>
<p>不使用外部变量的 Block 是全局 Block</p>
<p>使用外部变量并且未进行 copy 操作的 Block 是栈 Block</p>
<p>对栈 Block 进行 copy 操作，就是堆 Block，对全局 Block 进行 copy，仍是全局 Block</p>
<p>对 Block 的 copy 操作</p>
<p><img src="/2021/05/19/Block/copy.png" alt="copy"></p>
<p>对栈上Block进行copy操作，copy结果-&gt;在堆上产生一个Block</p>
<p><img src="/2021/05/19/Block/block2.png" alt="block2"></p>
<p><code>Block</code>  在栈上时 <code>__Block_byref_val_0</code> 结构体内 <code>__forwarding</code> 指针指向结构体自己</p>
<p><code>Block</code> 被复制到堆中时，<code>__Block_byref_val_0</code> 结构体也被复制到堆中一份</p>
<p>栈上 <code>__Block_byref_val_0</code> 结构体中的  <code>__forwarding</code>  指针指向堆中 <code>__Block_byref_val_0</code> 结构体</p>
<p>堆上  <code>__Block_byref_val_0</code> 结构体中的  <code>__forwarding</code>  指针指向结构体自己</p>
<ul>
<li><code>__forwarding</code> 指针存在的意义：</li>
</ul>
<p>不论在任何内存位置，都可以顺利访问同一个 <code>__block</code> 变量</p>
<p>无论 <code>__block</code> 变量配置在栈上还是堆上时，都能正确的访问 <code>__block</code> 变量</p>
]]></content>
  </entry>
  <entry>
    <title>Flutter.cn</title>
    <url>/2022/02/16/FlutterCn%EF%BC%88%E4%B8%80%EF%BC%89Flutter%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h4 id="横向或纵向布局多个-widgets"><a href="#横向或纵向布局多个-widgets" class="headerlink" title="横向或纵向布局多个 widgets"></a>横向或纵向布局多个 widgets</h4><p>可以指定 Row 或 Column 如何在水平或者垂直方向上对齐其子项</p>
<p>可以指定子 widgets 如何占用 Row 或 Column 的可用空间</p>
<h5 id="对齐widgets"><a href="#对齐widgets" class="headerlink" title="对齐widgets"></a>对齐widgets</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/rendering.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">//设置为true，可以看到可视布局</span></span><br><span class="line">  debugPaintSizeEnabled = <span class="keyword">true</span>;</span><br><span class="line">  runApp(<span class="keyword">const</span> LayoutDemo());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LayoutDemo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> LayoutDemo(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter layout demo&#x27;</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">&#x27;Flutter layout demo&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: buildRow(),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置主轴对齐方式为spaceEvenly，会将剩余空间在每个图像之间、之前和之后均匀划分</span></span><br><span class="line">  Widget buildRow() =&gt;</span><br><span class="line">      Row(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">        children: [</span><br><span class="line">          Image.asset(<span class="string">&#x27;img/pic1.jpg&#x27;</span>),</span><br><span class="line">          Image.asset(<span class="string">&#x27;img/pic2.jpg&#x27;</span>),</span><br><span class="line">          Image.asset(<span class="string">&#x27;img/pic3.jpg&#x27;</span>),</span><br><span class="line">        ],</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  Widget buildColumn() =&gt;</span><br><span class="line">      Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">        children: [</span><br><span class="line">          Image.asset(<span class="string">&#x27;img/pic1.jpg&#x27;</span>),</span><br><span class="line">          Image.asset(<span class="string">&#x27;img/pic2.jpg&#x27;</span>),</span><br><span class="line">          Image.asset(<span class="string">&#x27;img/pic3.jpg&#x27;</span>),</span><br><span class="line">        ],</span><br><span class="line">      );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="调整widgets大小"><a href="#调整widgets大小" class="headerlink" title="调整widgets大小"></a>调整widgets大小</h5><p>当某个布局太大而超出屏幕时，受影响的边缘会出现黄色和黑色条纹图案</p>
<p>通过使用 Expanded widget 可以调整 widgets 的大小以适合行或列</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Row(</span><br><span class="line">  crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">  children: [</span><br><span class="line">    Expanded(</span><br><span class="line">      child: Image.asset(<span class="string">&#x27;images/pic1.jpg&#x27;</span>),</span><br><span class="line">    ),</span><br><span class="line">    Expanded(</span><br><span class="line">      child: Image.asset(<span class="string">&#x27;images/pic2.jpg&#x27;</span>),</span><br><span class="line">    ),</span><br><span class="line">    Expanded(</span><br><span class="line">      child: Image.asset(<span class="string">&#x27;images/pic3.jpg&#x27;</span>),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>想要一个 widget 占用空间是兄弟项的两倍，可以使用 Expanded widget 的 flex 属性</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Row(</span><br><span class="line">  crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">  children: [</span><br><span class="line">    Expanded(</span><br><span class="line">      child: Image.asset(<span class="string">&#x27;images/pic1.jpg&#x27;</span>),</span><br><span class="line">    ),</span><br><span class="line">    Expanded(</span><br><span class="line">      flex: <span class="number">2</span>,</span><br><span class="line">      child: Image.asset(<span class="string">&#x27;images/pic2.jpg&#x27;</span>),</span><br><span class="line">    ),</span><br><span class="line">    Expanded(</span><br><span class="line">      child: Image.asset(<span class="string">&#x27;images/pic3.jpg&#x27;</span>),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="/FlutterCn%EF%BC%88%E4%B8%80%EF%BC%89Flutter%E5%B8%83%E5%B1%80/WeChat648aa69a2338cc1da9a5cdded93f8f16.png" alt="WeChat648aa69a2338cc1da9a5cdded93f8f16"></p>
<h5 id="组合widgets"><a href="#组合widgets" class="headerlink" title="组合widgets"></a>组合widgets</h5><p>默认情况下，行或列沿其主轴会占用尽可能多的空间，如果要将子项紧密组合在一起，将 mainAxisSize 设置为 MainAxisSize.min </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Row(</span><br><span class="line">  mainAxisSize: MainAxisSize.min,</span><br><span class="line">  children: [</span><br><span class="line">    Icon(Icons.star, color: Colors.green[<span class="number">500</span>]),</span><br><span class="line">    Icon(Icons.star, color: Colors.green[<span class="number">500</span>]),</span><br><span class="line">    Icon(Icons.star, color: Colors.green[<span class="number">500</span>]),</span><br><span class="line">    <span class="keyword">const</span> Icon(Icons.star, color: Colors.black),</span><br><span class="line">    <span class="keyword">const</span> Icon(Icons.star, color: Colors.black),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="/FlutterCn%EF%BC%88%E4%B8%80%EF%BC%89Flutter%E5%B8%83%E5%B1%80/WeChat9db897d81b3faa8300e97c87f80796cb.png" alt="WeChat9db897d81b3faa8300e97c87f80796cb"></p>
<h5 id="嵌套行和列"><a href="#嵌套行和列" class="headerlink" title="嵌套行和列"></a>嵌套行和列</h5><blockquote>
<p>为了最大限度地减少高度嵌套的布局代码可能导致的视觉错乱，可以在变量和函数中实现UI的各个部分</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stars = Row(</span><br><span class="line">  mainAxisSize: MainAxisSize.min,</span><br><span class="line">  children: [</span><br><span class="line">    Icon(Icons.star, color: Colors.green[<span class="number">500</span>]),</span><br><span class="line">    Icon(Icons.star, color: Colors.green[<span class="number">500</span>]),</span><br><span class="line">    Icon(Icons.star, color: Colors.green[<span class="number">500</span>]),</span><br><span class="line">    <span class="keyword">const</span> Icon(Icons.star, color: Colors.black),</span><br><span class="line">    <span class="keyword">const</span> Icon(Icons.star, color: Colors.black),</span><br><span class="line">  ],</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> ratings = Container(</span><br><span class="line">  padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">20</span>),</span><br><span class="line">  child: Row(</span><br><span class="line">    mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">    children: [</span><br><span class="line">      stars,</span><br><span class="line">      <span class="keyword">const</span> Text(</span><br><span class="line">        <span class="string">&#x27;170 Reviews&#x27;</span>,</span><br><span class="line">        style: TextStyle(</span><br><span class="line">          color: Colors.black,</span><br><span class="line">          fontWeight: FontWeight.w800,</span><br><span class="line">          fontFamily: <span class="string">&#x27;Roboto&#x27;</span>,</span><br><span class="line">          letterSpacing: <span class="number">0.5</span>,</span><br><span class="line">          fontSize: <span class="number">20</span>,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="通用布局-widgets"><a href="#通用布局-widgets" class="headerlink" title="通用布局 widgets"></a>通用布局 widgets</h4><p>下面 widget 会分为两类：widgets 库中的标准 widgets 和 Material 库中的 widgets，任何app都可以使用 widget库，但是 Material 库中的组件只能在 Material app 中使用</p>
<h5 id="标准-widgets"><a href="#标准-widgets" class="headerlink" title="标准 widgets"></a>标准 widgets</h5><p>Container：向 widget 增加 padding、margins、borders、background color 或者其他的“装饰”</p>
<p>GridView：将 widget 展示为一个可滚动的网格</p>
<p>ListView：将 widget 展示为一个可滚动的列表</p>
<p>Stack：将 widget 覆盖在另一个的上面</p>
<h5 id="Material-widgets"><a href="#Material-widgets" class="headerlink" title="Material widgets"></a>Material widgets</h5><p>Card：将相关信息整理到一个有圆角和阴影的盒子中</p>
<p>ListTitle：将最多三行的文本、可选的导语以及后面的图标组织在一行中</p>
<h5 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h5><p>许多布局都可以随意的用 Container，它可以将使用了 padding 或者增加了 borders/margins 的 widget 分开。你可以通过将整个布局放到一个 Container 中，并且改变它的背景色或者图片，来改变设备的背景</p>
<p>增加 padding、margins、borders<br>改变背景色或者图片<br>只包含一个子 widget，但是这个子 widget 可以是行、列或者是 widget 树的根 widget</p>
<p><img src="/FlutterCn%EF%BC%88%E4%B8%80%EF%BC%89Flutter%E5%B8%83%E5%B1%80/WeChatdc556c1945581f068555467d6a960f5b.png" alt="WeChatdc556c1945581f068555467d6a960f5b"></p>
<h5 id="GridView"><a href="#GridView" class="headerlink" title="GridView"></a>GridView</h5><p>GridView 将 widget 作为二维列表展示，提供了两个预制的列表，或者可以自定义网格，GridView 检测到内容太长而无法适应渲染盒时，就会自动支持滚动</p>
<p>GridView.count 允许你制定列的数量 GridView.extent 允许你制定单元格最大宽度</p>
<p>demo：gird_and_list、Flutter Gallery 中的  <a href="https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/lib/demo/material/grid_list_demo.dart">grid_list_demo.dart</a></p>
<h4 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h4><p><a href="https://dart.cn/guides">Dart中文文档</a></p>
<p><a href="https://flutter.cn/docs/development/ui/widgets/layout">布局 Layout widgets</a></p>
<p><a href="https://flutter.cn/docs/development/ui/widgets/material">Material组件 Material Components widgets</a></p>
<p><a href="https://flutter.cn/docs/development/ui/advanced/gestures">Flutter中的手势</a></p>
<p><a href="https://flutter.cn/docs/development/tools/devtools/inspector#debugging-layout-issues-visually">使用Flutter inspector工具</a></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter (一) 环境配置</title>
    <url>/2021/10/12/Flutter%EF%BC%88%E4%B8%80%EF%BC%89%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="安装-Android-Studio"><a href="#安装-Android-Studio" class="headerlink" title="安装 Android Studio"></a>安装 Android Studio</h4><p><a href="%5Bhttps://developer.android.google.cn/studio%5D(https://links.jianshu.com/go?to=https://developer.android.google.cn/studio)">下载地址</a></p>
<p><a href="%5Bhttps://www.cnblogs.com/mengtaoadmin/p/11184052.html%5D(https://links.jianshu.com/go?to=https://www.cnblogs.com/mengtaoadmin/p/11184052.html)">Mac 上安装 Android Studio</a></p>
<h4 id="下载-Flutter-SDK"><a href="#下载-Flutter-SDK" class="headerlink" title="下载 Flutter SDK"></a>下载 Flutter SDK</h4><ul>
<li><p>方式1：<a href="https://flutter.dev/docs/get-started/install/macos">官网下载</a></p>
</li>
<li><p>方式2：</p>
</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git clone -b beta <span class="symbol">https:</span>/<span class="regexp">/github.com/flutter</span><span class="regexp">/flutter.git</span></span><br></pre></td></tr></table></figure>

<p>放在 opt 目录下 <code>/opt/flutter</code></p>
<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p><code>./zshrc</code> 中配置环境变量，配置完成后执行 <code>source ~/.zshrc</code></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Flutter 镜像配置</span></span><br><span class="line">export PUB_HOSTED_URL=<span class="symbol">https:</span>/<span class="regexp">/pub.flutter-io.cn</span></span><br><span class="line"><span class="regexp">export FLUTTER_STORAGE_BASE_URL=https:/</span><span class="regexp">/storage.flutter-io.cn</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#Flutter 配置</span></span><br><span class="line"><span class="regexp">export FLUTTER=/opt</span><span class="regexp">/flutter/bin</span></span><br><span class="line">export PATH=$FLUTTER<span class="symbol">:</span>$PATH</span><br></pre></td></tr></table></figure>

<p>Flutter 有一个 doctor 检测指令，查看配置是否完成</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure>

<p>报错</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[!] Android toolchain - develop <span class="keyword">for</span> Android devices (Android SDK version <span class="number">31.0</span>.<span class="number">0</span>)</span><br><span class="line">    ✗ cmdline-tools component is missing</span><br><span class="line">      Run <span class="string">`path/to/sdkmanager --install &quot;cmdline-tools;latest&quot;`</span></span><br><span class="line">      See <span class="symbol">https:</span>/<span class="regexp">/developer.android.com/studio</span><span class="regexp">/command-line for more details.</span></span><br><span class="line"><span class="regexp">    ✗ Android license status unknown.</span></span><br><span class="line"><span class="regexp">      Run `flutter doctor --android-licenses` to accept the SDK licenses.</span></span><br><span class="line"><span class="regexp">      See https:/</span><span class="regexp">/flutter.dev/docs</span><span class="regexp">/get-started/install</span><span class="regexp">/macos#android-setup for more details.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>解决 cmdline-tools component is missing 问题</li>
</ul>
<p>打开 Android Studio，Preferences-Appearance &amp; Beahvior-System Settings-Android SDK-SDK Tools</p>
<p>勾选 Android SDK Command-line Tools (latest)  OK</p>
<ul>
<li>解决 Android license status unknown 问题</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">flutter doctor --android-licenses</span><br><span class="line"><span class="comment">#然后一直选择y</span></span><br></pre></td></tr></table></figure>

<ul>
<li>安装 Flutter 插件</li>
</ul>
<p>Preferences-Plugins 找到 Flutter 插件安装</p>
<p><a href="https://flutterchina.club/setup-macos/">Flutter中文网搭建Flutter开发环境</a><br><a href="https://www.jianshu.com/p/7662c2b1501f">Flutter专题目录汇总</a><br><a href="https://flutter.dev/docs">Flutter 官方文档: </a><br><a href="https://github.com/flutter/flutter">Flutter github 地址: </a><br><a href="https://flutterchina.club/">Flutter 中文网: </a><br><a href="https://juejin.im/tag/Flutter">Flutter 掘金标签: </a><br><a href="https://zhuanlan.zhihu.com/p/37232700">Flutter 仿写项目</a></p>
<p><a href="https://github.com/alibaba/flutter-go">阿里巴巴 flutter-go</a>：包含 flutter 常用140+组件的demo演示与中文文档<br><a href="https://gitee.com/qingdongmeng/flutter-do">老孟flutter</a><br><a href="https://docs.flutter.dev/development/tools/sdk/releases?tab=macos">Flutter SDK releases</a></p>
<p><a href="https://github.com/flutter/samples">Flutter samples</a></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>FXForms</title>
    <url>/2021/12/06/FXForms/</url>
    <content><![CDATA[<h4 id="FXForms"><a href="#FXForms" class="headerlink" title="FXForms"></a>FXForms</h4><p>FXForms 框架提供了一个 FXFormViewController 视图控制器类，可以直接写继承于这个类的 ViewController 来便捷创建表单界面</p>
<p>FxForms 是通过节点配置的方式来进行表单创建的，表单中的每一个 Cell 都是一个节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface RootFormViewController : FXFormViewController</span><br><span class="line">@end</span><br><span class="line">@implementation RootFormViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">  	&#x2F;&#x2F;节点信息设置</span><br><span class="line">    self.formController.form &#x3D; [MyForm new];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<h5 id="配置节点"><a href="#配置节点" class="headerlink" title="配置节点"></a>配置节点</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface MyForm : NSObject&lt;FXForm&gt;</span><br><span class="line">@property (nonatomic, copy) NSString *email;</span><br><span class="line">@property (nonatomic, copy) NSString *password;</span><br><span class="line">@property (nonatomic, assign) BOOL remember;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p>上面的 MyForm 类定义了一些属性，如果不进行节点信息配置，FXForms 会自动根据节点属性来推断节点类型，NSString 类型的属性会被自动推断成带文本框的 Cell，BOOL 类型的属性会被自动推断成带 UISwitch 控件的 Cell</p>
<p><img src="/FXForms/WeChat8a22183ff8df3019ca8b1cca696d5910.png" alt="WeChat8a22183ff8df3019ca8b1cca696d5910"></p>
<h5 id="配置节点属性"><a href="#配置节点属性" class="headerlink" title="配置节点属性"></a>配置节点属性</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@implementation MyForm</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方法名必须是 属性名+Field 返回为NSDictionary字典 字典中为节点的配置信息</span><br><span class="line">- (NSDictionary *)emailField &#123;</span><br><span class="line">    &#x2F;&#x2F;配置节点的类型 点击后 将弹出时间选择控件</span><br><span class="line">    return @&#123;FXFormFieldType: FXFormFieldTypeDate&#125;;</span><br><span class="line">&#125;</span><br><span class="line">- (NSDictionary *)passwordField &#123;</span><br><span class="line">    &#x2F;&#x2F;设置节点名称</span><br><span class="line">    return @&#123;FXFormFieldTitle: @&quot;名称&quot;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">- (NSDictionary *)rememberField &#123;</span><br><span class="line">    &#x2F;&#x2F;设置节点头视图名称</span><br><span class="line">    return @&#123;FXFormFieldHeader: @&quot;配置&quot;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<h5 id="返回字典中可以配置的属性"><a href="#返回字典中可以配置的属性" class="headerlink" title="返回字典中可以配置的属性"></a>返回字典中可以配置的属性</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;配置此节点的标识符</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldKey;</span><br><span class="line">&#x2F;&#x2F;配置此节点的类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldType; </span><br><span class="line">&#x2F;&#x2F;指定当前节点属性对应的类 (一般不需设置)</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldClass;</span><br><span class="line">&#x2F;&#x2F;设置当前节点对应的cell类</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldCell;</span><br><span class="line">&#x2F;&#x2F;设置当前节点显示的名称(不设置默认为驼峰的属性名 eg:Email)</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTitle;</span><br><span class="line">&#x2F;&#x2F;设置当前节点的placeHolder</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldPlaceholder;</span><br><span class="line">&#x2F;&#x2F;设置节点上默认显示的文字</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldDefaultValue; </span><br><span class="line">&#x2F;&#x2F;设置选项数组 这个属性的设置 必须配合特定配型的cell使用</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldOptions;</span><br><span class="line">&#x2F;&#x2F;如果某个节点是一个数组 则FXFormFieldTemplate可以用来设置数组中节点的属性</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTemplate;</span><br><span class="line">&#x2F;&#x2F;进行类型转换</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldValueTransformer;</span><br><span class="line">&#x2F;&#x2F;设置节点的触发方法</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldAction;</span><br><span class="line">&#x2F;&#x2F;连接StoryboardSegue</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldSegue;</span><br><span class="line">&#x2F;&#x2F;设置节点头部内容</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldHeader;</span><br><span class="line">&#x2F;&#x2F;设置节点尾部内容</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldFooter;</span><br><span class="line">&#x2F;&#x2F;设置是否是内嵌节点 对于父节点或者数组类界定 这个如果设置为@YES 则会在当前界面中展示表单 如果设置为@NO，则会在新的视图控制器中展示</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldInline;</span><br><span class="line">&#x2F;&#x2F;对于数组类型的节点，设置是否支持排序 设置为@YES则为支持排序</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldSortable;</span><br><span class="line">&#x2F;&#x2F;设置选中cell后跳转的ViewController</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldViewController;</span><br></pre></td></tr></table></figure>

<h5 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;默认的节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeDefault;</span><br><span class="line">&#x2F;&#x2F;文本标签节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeLabel;</span><br><span class="line">&#x2F;&#x2F;输入框节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeText;</span><br><span class="line">&#x2F;&#x2F;长文本输入节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeLongText; </span><br><span class="line">&#x2F;&#x2F;URL节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeURL;</span><br><span class="line">&#x2F;&#x2F;Email节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeEmail; </span><br><span class="line">&#x2F;&#x2F;号码节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypePhone; </span><br><span class="line">&#x2F;&#x2F;密码框节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypePassword;</span><br><span class="line">&#x2F;&#x2F;数字节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeNumber;</span><br><span class="line">&#x2F;&#x2F;只允许输入整数的节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeInteger;</span><br><span class="line">&#x2F;&#x2F;无符号整数节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeUnsigned; </span><br><span class="line">&#x2F;&#x2F;浮点节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeFloat;</span><br><span class="line">&#x2F;&#x2F;BOOL节点类型 默认带UISwitch控件</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeBoolean;</span><br><span class="line">&#x2F;&#x2F;选项节点类型 默认带对号符号</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeOption;</span><br><span class="line">&#x2F;&#x2F;日期节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeDate;</span><br><span class="line">&#x2F;&#x2F;时间节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeTime;</span><br><span class="line">&#x2F;&#x2F;日期时间节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeDateTime;</span><br><span class="line">&#x2F;&#x2F;图片节点类型</span><br><span class="line">UIKIT_EXTERN NSString *const FXFormFieldTypeImage;</span><br></pre></td></tr></table></figure>

<h5 id="FXForms中也提供了许多封装好的cell"><a href="#FXForms中也提供了许多封装好的cell" class="headerlink" title="FXForms中也提供了许多封装好的cell"></a>FXForms中也提供了许多封装好的cell</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;默认的cell</span><br><span class="line">@interface FXFormDefaultCell : FXFormBaseCell</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带文本输入框的cell</span><br><span class="line">@interface FXFormTextFieldCell : FXFormBaseCell</span><br><span class="line">@property (nonatomic, readonly) UITextField *textField;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带文本输入视图的cell</span><br><span class="line">@interface FXFormTextViewCell : FXFormBaseCell</span><br><span class="line">@property (nonatomic, readonly) UITextView *textView;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带UISwitch控件的cell</span><br><span class="line">@interface FXFormSwitchCell : FXFormBaseCell</span><br><span class="line">@property (nonatomic, readonly) UISwitch *switchControl;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带UIStepper控件的cell</span><br><span class="line">@interface FXFormStepperCell : FXFormBaseCell</span><br><span class="line">@property (nonatomic, readonly) UIStepper *stepper;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带UISlider控件的cell</span><br><span class="line">@interface FXFormSliderCell : FXFormBaseCell</span><br><span class="line">@property (nonatomic, readonly) UISlider *slider;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带日期选择控件的cell</span><br><span class="line">@interface FXFormDatePickerCell : FXFormBaseCell</span><br><span class="line">@property (nonatomic, readonly) UIDatePicker *datePicker;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带图片选择控件的cell</span><br><span class="line">@interface FXFormImagePickerCell : FXFormBaseCell</span><br><span class="line">@property (nonatomic, readonly) UIImageView *imagePickerView;</span><br><span class="line">@property (nonatomic, readonly) UIImagePickerController *imagePickerController;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带自定义PickerView的cell</span><br><span class="line">@interface FXFormOptionPickerCell : FXFormBaseCell</span><br><span class="line">@property (nonatomic, readonly) UIPickerView *pickerView;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带UISegmentedControl控件的cell</span><br><span class="line">@interface FXFormOptionSegmentsCell : FXFormBaseCell</span><br><span class="line">@property (nonatomic, readonly) UISegmentedControl *segmentedControl;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<h5 id="通过协议方式进行节点配置"><a href="#通过协议方式进行节点配置" class="headerlink" title="通过协议方式进行节点配置"></a>通过协议方式进行节点配置</h5><p>也可以不创建属性，使用 FXForms 协议的方法，完成节点的创建和配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@implementation MyForm</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建与配置节点</span><br><span class="line">- (NSArray *)fields</span><br><span class="line">&#123;</span><br><span class="line">    return @[</span><br><span class="line">             &#x2F;&#x2F;这里面配置字典的方法和属性字典的配置方法一一致</span><br><span class="line">             @&#123;FXFormFieldKey: @&quot;email&quot;, FXFormFieldTitle: @&quot;email&quot;&#125;,</span><br><span class="line">             @&#123;FXFormFieldKey: @&quot;phone&quot;, FXFormFieldTitle: @&quot;phone&quot;&#125;,</span><br><span class="line">             @&#123;FXFormFieldKey: @&quot;address&quot;, FXFormFieldTitle: @&quot;address&quot;&#125;,</span><br><span class="line">             @&#123;FXFormFieldKey: @&quot;name&quot;, FXFormFieldTitle: @&quot;name&quot;&#125;</span><br><span class="line">             ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p>fields 方法中可以直接进行节点的创建和配置</p>
<p>FXForms 协议中还提供了两个方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;这个方法用于配置额外的节点，如果需要某些节点不对应任何属性，可以在这个方法中配置</span><br><span class="line">- (NSArray *)extraFields;</span><br><span class="line">&#x2F;&#x2F;这个方法需要返回一个字符串数组，如果需要某些属性不对应节点，即有属性的存在，但是不生成cell，可以将属性名传入返回</span><br><span class="line">- (NSArray *)excludedFields;</span><br></pre></td></tr></table></figure>

<p>节点还可以进行复合，将一个节点的配置作为属性，设置给另一个节点配置类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;子节点信息配置类</span><br><span class="line">@interface SubForm : NSObject&lt;FXForm&gt;</span><br><span class="line">@property(nonatomic,assign)NSInteger age;</span><br><span class="line">@property(nonatomic,assign)NSDate * date;</span><br><span class="line">@end</span><br><span class="line">@implementation SubForm</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;父节点信息配置类</span><br><span class="line">@interface MyForm : NSObject&lt;FXForm&gt;</span><br><span class="line">@property(nonatomic,strong)NSString * email;</span><br><span class="line">@property(nonatomic,strong)NSString * passwd;</span><br><span class="line">@property(nonatomic,assign)BOOL rememberMe;</span><br><span class="line">&#x2F;&#x2F;其中有属性为子节点</span><br><span class="line">@property(nonatomic,strong)SubForm * subForm;</span><br><span class="line">@end</span><br><span class="line">@implementation MyForm</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<h5 id="自定义视图"><a href="#自定义视图" class="headerlink" title="自定义视图"></a>自定义视图</h5><p>创建的视图控制器不是继承于 FXFormViewController，也可以使用 FXForms 来快捷创建表单视图，需要遵守 FXFormControllerDelegate 协议</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface ViewController : UIViewController&lt;FXFormControllerDelegate&gt;</span><br><span class="line">&#x2F;&#x2F;系统的tableView</span><br><span class="line">@property(nonatomic,strong)UITableView * tableView;</span><br><span class="line">&#x2F;&#x2F;FX表单控制器</span><br><span class="line">@property(nonatomic,strong)FXFormController * formController;</span><br><span class="line">@end</span><br><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    self.tableView &#x3D; [[UITableView alloc]initWithFrame:self.view.frame style:UITableViewStyleGrouped];</span><br><span class="line">    self.formController &#x3D; [[FXFormController alloc] init];</span><br><span class="line">    self.formController.tableView &#x3D; self.tableView;</span><br><span class="line">    self.formController.delegate &#x3D; self;</span><br><span class="line">    self.formController.form &#x3D; [[MyForm alloc] init];</span><br><span class="line">    [self.view addSubview:self.tableView];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<h5 id="Cell-属性设置"><a href="#Cell-属性设置" class="headerlink" title="Cell 属性设置"></a>Cell 属性设置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-(NSDictionary *)passwdField&#123;</span><br><span class="line">    return @&#123;@&quot;textLabel.textColor&quot;:[UIColor redColor]&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="ViewController-页面跳转"><a href="#ViewController-页面跳转" class="headerlink" title="ViewController 页面跳转"></a>ViewController 页面跳转</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface RegistrationForm : NSObject &lt;FXForm&gt;</span><br><span class="line">@property (nonatomic, readonly) TermsViewController *termsAndConditions;</span><br><span class="line">@property (nonatomic, readonly) PrivacyPolicyViewController *privacyPolicy;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@implementation RegistrationForm</span><br><span class="line">- (NSArray *)fields</span><br><span class="line">&#123;</span><br><span class="line">    return @[</span><br><span class="line">    	@&#123;FXFormFieldKey: @&quot;termsAndConditions&quot;, FXFormFieldHeader: @&quot;Legal&quot;&#125;,</span><br><span class="line">    	@&quot;privacyPolicy&quot;,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p><img src="/FXForms/WeChat49fb789e1986ffb8541ec06c2e2c0ae4.png" alt="WeChat49fb789e1986ffb8541ec06c2e2c0ae4"></p>
<p>点击跳转到 TermsViewController 控制器</p>
<h5 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@implementation RegistrationForm</span><br><span class="line">- (NSArray *)fields</span><br><span class="line">&#123;</span><br><span class="line">    return @[</span><br><span class="line">    	@&#123;FXFormFieldTitle: @&quot;Submit&quot;, FXFormFieldHeader: @&quot;&quot;, FXFormFieldAction: @&quot;submitRegistrationForm:&quot;&#125;</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface RootFormViewController : FXFormViewController</span><br><span class="line">@end</span><br><span class="line">  </span><br><span class="line">@implementation RootFormViewController</span><br><span class="line">- (void)submitRegistrationForm:(UITableViewCell&lt;FXFormFieldCell&gt; *)cell</span><br><span class="line">&#123;</span><br><span class="line">  	&#x2F;&#x2F;获取表单数据</span><br><span class="line">  	RegistrationForm *form &#x3D; cell.field.form;</span><br><span class="line">&#125;</span><br><span class="line">@end </span><br><span class="line"></span><br></pre></td></tr></table></figure>











<p><a href="%5Bhttps://github.com/nicklockwood/FXForms%5D(https://www.oschina.net/action/GoToLink?url=https://github.com/nicklockwood/FXForms)">FxForms</a></p>
<p><a href="https://my.oschina.net/u/2340880/blog/705221">iOS中表单视图 FXForms</a></p>
]]></content>
  </entry>
  <entry>
    <title>Flutter（二）Hello Flutter</title>
    <url>/2021/10/12/Flutter%EF%BC%88%E4%BA%8C%EF%BC%89Hello-Flutter/</url>
    <content><![CDATA[<h4 id="创建-Flutter-工程"><a href="#创建-Flutter-工程" class="headerlink" title="创建 Flutter 工程"></a>创建 Flutter 工程</h4><p>Android Studio - New Flutter Project </p>
<p>Project Type：</p>
<ul>
<li><p>Application：创建一个 Flutter 应用工程</p>
</li>
<li><p>Plugin：为了给 Android 和 iOS 提供插件应用（暴露的接口）的时候使用</p>
</li>
<li><p>Package：创建一个 Dart 组件发布到 pub 来提供便捷开发，类似一些第三方库</p>
</li>
<li><p>Module：一般用来做混合开发，嵌入到 Android 和 iOS 工程中</p>
</li>
</ul>
<p>终端命令行方式创建：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">flutter create flutter_demo</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter run</span><br></pre></td></tr></table></figure>



<ul>
<li>添加安卓模拟器</li>
</ul>
<p>AVD Manager 添加模拟器</p>
<p>选择安卓模拟器运行卡在 <code>Running Gradle task &#39;assembleDebug&#39;...</code></p>
<p>原因是 Gradle 的 Maven 仓库在国外</p>
<p>修改项目下的 build .gradle 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">google()</span><br><span class="line">mavenCentral()</span><br></pre></td></tr></table></figure>

<p>修改为阿里云镜像</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/google&#x27;</span> &#125;</span><br><span class="line">maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/jcenter&#x27;</span> &#125;</span><br><span class="line">maven &#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/groups/public&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ext.kotlin_version = <span class="string">&#x27;1.3.50&#x27;</span></span><br><span class="line">    repositories &#123;</span><br><span class="line">        /<span class="regexp">/google()</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/mavenCentral()</span></span><br><span class="line"><span class="regexp">	 maven &#123; url &#x27;https:/</span><span class="regexp">/maven.aliyun.com/repository</span><span class="regexp">/google&#x27; &#125;</span></span><br><span class="line"><span class="regexp">	 maven &#123; url &#x27;https:/</span><span class="regexp">/maven.aliyun.com/repository</span><span class="regexp">/jcenter&#x27; &#125;</span></span><br><span class="line"><span class="regexp">	 maven &#123; url &#x27;http:/</span><span class="regexp">/maven.aliyun.com/nexus</span><span class="regexp">/content/groups</span><span class="regexp">/public&#x27; &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    dependencies &#123;</span></span><br><span class="line"><span class="regexp">        classpath &#x27;com.android.tools.build:gradle:4.1.0&#x27;</span></span><br><span class="line"><span class="regexp">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">allprojects &#123;</span></span><br><span class="line"><span class="regexp">    repositories &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/google()</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/mavenCentral()</span></span><br><span class="line"><span class="regexp">	 maven &#123; url &#x27;https:/</span><span class="regexp">/maven.aliyun.com/repository</span><span class="regexp">/google&#x27; &#125;</span></span><br><span class="line"><span class="regexp">	 maven &#123; url &#x27;https:/</span><span class="regexp">/maven.aliyun.com/repository</span><span class="regexp">/jcenter&#x27; &#125;</span></span><br><span class="line"><span class="regexp">	 maven &#123; url &#x27;http:/</span><span class="regexp">/maven.aliyun.com/nexus</span><span class="regexp">/content/groups</span><span class="regexp">/public&#x27; &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p>修改 Flutter 安装目录中的 flutter.gradle 文件</p>
<p><code>/opt/flutter/packages/flutter_tools/gradle/flutter.gradle</code></p>
<h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p><code>Command + o</code> : 全局搜索</p>
<p><code>command + option + l</code> : 格式化代码</p>
<p><code>command + l</code> : 注释代码</p>
<p><code>command + -</code> : 折叠和展开代码</p>
<p><code>command + [</code> : 代码返回</p>
<p><code>command + ]</code> : 代码前进</p>
<p><code>cmd + C / cmd + delete</code> : 删除行</p>
<p><code>ctr + alt + I</code>: 自动缩进对齐</p>
<p><code>opt + sft + up/down</code> : 上下移动代码</p>
<p><code>ctrl + tab</code>: 切换文件</p>
<p><code>shift + command + enter</code> : 行尾自动添加分号，if后面自动加“(){ }”</p>
<p><code>cmd + N</code> : 快速生成getter／setter方法，构造方法，toString()方法等</p>
<p><code>cmd + J</code> : 快速生成模版代码块，如if,while,return</p>
<p><code>opt + cmd + T</code> : Surround with快速调出if,for,try…catch,while等环绕代码</p>
<p><code>opt + ctr + o</code>: 删除未使用的import</p>
<p><code>option + enter</code>: 自动导入用到的包</p>
<p><code>stless</code>: 创建新的 <code>StatelessWidget</code></p>
<p><code>stful</code>: 创建新的 <code>StatefulWidget</code></p>
<h4 id="Flutter-工程"><a href="#Flutter-工程" class="headerlink" title="Flutter 工程"></a>Flutter 工程</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/导入系统包，作用类似 #import &lt;UIKit/</span>UIKit.h&gt;</span><br><span class="line">import <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Welcome to Flutter&#x27;</span>,</span><br><span class="line">      home: <span class="keyword">new</span> Scaffold(</span><br><span class="line">        appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">          title: <span class="keyword">new</span> Text(<span class="string">&#x27;Welcome to Flutter&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: <span class="keyword">new</span> Center(</span><br><span class="line">          child: <span class="keyword">new</span> Text(<span class="string">&#x27;Hello World&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>创建一个 Material APP ，Material 是一种标准的移动端和 web 端的视觉设计语言</p>
</li>
<li><p>man 函数使用了 =&gt; 符号，这是 Dart 中单行函数或方法的简写</p>
</li>
<li><p>该程序继承了 StatelessWidget，将会使本身也成为一个 widget</p>
</li>
<li><p>Scaffold 是 Material APP，中提供的一个 widget，它提供了默认的导航栏、标题和包含主屏幕 widget 树的 body 属性</p>
</li>
<li><p>widget 的主要工作是提供一个 build() 方法来描述如果根据其它较低级别的 widget 来显示自己</p>
</li>
</ul>
<h5 id="文本组件-Text-Widget"><a href="#文本组件-Text-Widget" class="headerlink" title="文本组件 Text Widget"></a>文本组件 Text Widget</h5><p>main.dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;Model/base_widget.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;Model/hello_flutter_demo.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;Model/listView_demo.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(App());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,<span class="comment">//右上角 debug 角标显示</span></span><br><span class="line">      home: Home(),</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primaryColor: Colors.blue, <span class="comment">//主题颜色</span></span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(<span class="comment">//类似 nav</span></span><br><span class="line">      backgroundColor: Colors.grey[<span class="number">100</span>], <span class="comment">//页面背景颜色</span></span><br><span class="line">      appBar: AppBar(<span class="comment">// 导航栏</span></span><br><span class="line">        title: Text(<span class="string">&quot;Demo&quot;</span>),</span><br><span class="line">        foregroundColor: Colors.black,  <span class="comment">//appBar上标题文字背景</span></span><br><span class="line">        backgroundColor: Colors.yellow, <span class="comment">//AppBar背景</span></span><br><span class="line">      ),</span><br><span class="line">      body: MyWidget(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hello_flutter_demo.dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> _textStyle = TextStyle(color: Colors.red, fontSize: <span class="number">40</span>, fontWeight: FontWeight.bold);</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Text(</span><br><span class="line">          <span class="string">&quot;Hello Flutter&quot;</span>,</span><br><span class="line">          textDirection: TextDirection.ltr,</span><br><span class="line">          style: _textStyle),</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>base_widget.dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/cupertino.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/painting.dart&#x27;</span>;</span><br><span class="line"><span class="comment">//文本显示</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextDemo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> TextStyle _textStyle = TextStyle(</span><br><span class="line">    fontSize: <span class="number">16.0</span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> _title = <span class="string">&quot;标题&quot;</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> _name  = <span class="string">&quot;名字&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Text(</span><br><span class="line">      <span class="string">&quot;《<span class="subst">$&#123; _title &#125;</span>》-- <span class="subst">$_name</span> 123445&quot;</span>,</span><br><span class="line">      textAlign: TextAlign.center,</span><br><span class="line">      style: _textStyle,</span><br><span class="line">      maxLines: <span class="number">4</span>,</span><br><span class="line">      overflow: TextOverflow.ellipsis,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//富文本显示</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RichTextDemo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> RichText(</span><br><span class="line">      text: TextSpan(</span><br><span class="line">        text: <span class="string">&quot;富文本文字测试&quot;</span>,</span><br><span class="line">        style: TextStyle(fontSize: <span class="number">30</span>, color: Colors.black),</span><br><span class="line">        children: &lt;TextSpan&gt; [</span><br><span class="line">          TextSpan(</span><br><span class="line">            text: <span class="string">&quot;文本1&quot;</span>,</span><br><span class="line">            style: TextStyle(fontSize: <span class="number">10</span>, color: Colors.red),</span><br><span class="line">          ),</span><br><span class="line">          TextSpan(</span><br><span class="line">            text: <span class="string">&quot;文本2&quot;</span>,</span><br><span class="line">            style: TextStyle(fontSize: <span class="number">15</span>, color: Colors.green),</span><br><span class="line">          ),</span><br><span class="line">          TextSpan(</span><br><span class="line">            text: <span class="string">&quot;文本3&quot;</span>,</span><br><span class="line">            style: TextStyle(fontSize: <span class="number">20</span>, color: Colors.blue),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseWidgetDmoe</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: Colors.yellow,</span><br><span class="line">      child: Row(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Container(</span><br><span class="line">            width: <span class="number">100</span>,</span><br><span class="line">            height: <span class="number">100</span>,</span><br><span class="line">            <span class="comment">//padding: EdgeInsets.only(left: 30, right: 30, top: 10, bottom: 10),</span></span><br><span class="line">            padding: EdgeInsets.all(<span class="number">30</span>),</span><br><span class="line">            color: Colors.red,</span><br><span class="line">            child: Icon(</span><br><span class="line">              Icons.add,</span><br><span class="line">              size: <span class="number">45</span>,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/10/12/Flutter%EF%BC%88%E4%BA%8C%EF%BC%89Hello-Flutter/richText.jpg" alt="richText"></p>
<p>Text 的构造方法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Text(<span class="keyword">this</span>.data, &#123;  <span class="comment">//Text显示的内容</span></span><br><span class="line">Key key,</span><br><span class="line"><span class="keyword">this</span>.style, <span class="comment">//Text显示的样式</span></span><br><span class="line"><span class="keyword">this</span>.textAlign,<span class="comment">//文本应该如何水平对齐,TextAlign.start,end 或者center</span></span><br><span class="line"><span class="keyword">this</span>.textDirection, <span class="comment">//文本方向,TextDirection.ltr\TextDirection.rtl</span></span><br><span class="line"><span class="keyword">this</span>.locale,</span><br><span class="line"><span class="keyword">this</span>.softWrap,  <span class="comment">//是否自动换行，若为false，文字将不考虑容器大小，单行显示，超出屏幕部分将默认截断处理</span></span><br><span class="line"><span class="keyword">this</span>.overflow, <span class="comment">//当文字超出屏幕的时候，如何处理,TextOverflow.clip(裁剪)\TextOverflow.fade(渐隐)\TextOverflow.ellipsis(省略号)</span></span><br><span class="line"><span class="keyword">this</span>.textScaleFactor, <span class="comment">//字体显示倍率，上面的例子使用的字体大小是20.0，将字体设置成10.0，然后倍率为2</span></span><br><span class="line"><span class="keyword">this</span>.maxLines, <span class="comment">//最大行数设置</span></span><br><span class="line"><span class="keyword">this</span>.semanticsLabel,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>TextStyle 属性</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TextStyle(&#123;</span><br><span class="line">  <span class="keyword">this</span>.inherit: <span class="keyword">true</span>,  <span class="comment">// 为false的时候不显示</span></span><br><span class="line">  <span class="keyword">this</span>.color,          <span class="comment">// 颜色 </span></span><br><span class="line">  <span class="keyword">this</span>.fontSize,       <span class="comment">// 字号</span></span><br><span class="line">  <span class="keyword">this</span>.fontWeight,     <span class="comment">// 字重，加粗也用这个字段  FontWeight.w700</span></span><br><span class="line">  <span class="keyword">this</span>.fontStyle,      <span class="comment">// FontStyle.normal  FontStyle.italic斜体</span></span><br><span class="line">  <span class="keyword">this</span>.letterSpacing,  <span class="comment">// 字符间距  就是单个字母或者汉字之间的间隔，可以是负数</span></span><br><span class="line">  <span class="keyword">this</span>.wordSpacing,    <span class="comment">// 字间距 句字之间的间距</span></span><br><span class="line">  <span class="keyword">this</span>.textBaseline,   <span class="comment">// 基线，两个值，字面意思是一个用来排字母的，一人用来排表意字的（类似中文）</span></span><br><span class="line">  <span class="keyword">this</span>.height,         <span class="comment">// 当用来Text控件上时，行高（会乘以fontSize,所以不以设置过大）</span></span><br><span class="line">  <span class="keyword">this</span>.decoration,     <span class="comment">// 添加上划线，下划线，删除线 </span></span><br><span class="line">  <span class="keyword">this</span>.decorationColor,<span class="comment">// 划线的颜色</span></span><br><span class="line">  <span class="keyword">this</span>.decorationStyle,<span class="comment">// 这个style可能控制画实线，虚线，两条线，点, 波浪线等</span></span><br><span class="line">  <span class="keyword">this</span>.debugLabel,</span><br><span class="line">  <span class="built_in">String</span> fontFamily,   <span class="comment">// 字体</span></span><br><span class="line">  <span class="built_in">String</span> package,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="列表-ListView"><a href="#列表-ListView" class="headerlink" title="列表 ListView"></a>列表 ListView</h5><p>Car.dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Car(&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.name,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.imageUrl,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> imageUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模型数组</span></span><br><span class="line"><span class="keyword">final</span> <span class="built_in">List</span>&lt;Car&gt; datas = [</span><br><span class="line">  Car(</span><br><span class="line">    name: <span class="string">&#x27;保时捷918 Spyder&#x27;</span>,</span><br><span class="line">    imageUrl:</span><br><span class="line">    <span class="string">&#x27;https://upload-images.jianshu.io/upload_images/2990730-7d8be6ebc4c7c95b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#x27;</span>,</span><br><span class="line">  ),</span><br><span class="line">  Car(</span><br><span class="line">    name: <span class="string">&#x27;兰博基尼Aventador&#x27;</span>,</span><br><span class="line">    imageUrl:</span><br><span class="line">    <span class="string">&#x27;https://upload-images.jianshu.io/upload_images/2990730-e3bfd824f30afaac?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>listView_demo.dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;Car.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListViewDemo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Widget _cellForRow(BuildContext contex, <span class="built_in">int</span> index) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: Colors.white,</span><br><span class="line">      margin: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">      child: Column(</span><br><span class="line">        children: [</span><br><span class="line">          Image.network(</span><br><span class="line">              datas[index].imageUrl</span><br><span class="line">          ),</span><br><span class="line">          SizedBox(</span><br><span class="line">            height: <span class="number">10</span>,</span><br><span class="line">          ),</span><br><span class="line">          Text(</span><br><span class="line">              datas[index].name,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                fontWeight: FontWeight.w400,</span><br><span class="line">                fontSize: <span class="number">18</span>,</span><br><span class="line">                fontStyle: FontStyle.values[<span class="number">1</span>],</span><br><span class="line">              ),</span><br><span class="line">          ),</span><br><span class="line">          Container(height: <span class="number">20</span>,)</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.builder(</span><br><span class="line">      itemCount: datas.length,</span><br><span class="line">      itemBuilder: _cellForRow,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/10/12/Flutter%EF%BC%88%E4%BA%8C%EF%BC%89Hello-Flutter/listView.jpg" alt="listView"></p>
<h5 id="使用-packages"><a href="#使用-packages" class="headerlink" title="使用 packages"></a>使用 packages</h5><p>pubspec 文件管理 Flutter 应用程序的 assets（资源，如图片、package等）在 pubspec.yaml 中，将 english_word 添加到依赖项列表</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">dependencies:</span></span><br><span class="line">  <span class="symbol">flutter:</span></span><br><span class="line">    <span class="symbol">sdk:</span> flutter</span><br><span class="line"></span><br><span class="line">  <span class="symbol">cupertino_icons:</span> ^<span class="number">0</span>.<span class="number">1.0</span></span><br><span class="line">  <span class="symbol">english_words:</span> ^<span class="number">4.0</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>Android Studio 编辑器视图中查看 pubspec.yaml 时，点击右上角 Pub get，将会将依赖包安装到项目，可以在控制台看到 flutter package get </p>
<p>或者在 Terminal 中输入 flutter package get  安装依赖包</p>
<p>安装成功后在 lib/main.dart 中，引入 english_words</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:english_words/english_words.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h4 id="报错问题"><a href="#报错问题" class="headerlink" title="报错问题"></a>报错问题</h4><h5 id="1-flutter-pub-get-安装包卡住"><a href="#1-flutter-pub-get-安装包卡住" class="headerlink" title="1. flutter pub get 安装包卡住"></a>1. flutter pub get 安装包卡住</h5><p>网上好多说需要配置国内镜像就可以了，在 <code>~/.bash_profile</code> 添加 </p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 官方提供的国内镜像</span></span><br><span class="line">export PUB_HOSTED_URL=<span class="symbol">https:</span>/<span class="regexp">/pub.flutter-io.cn</span></span><br><span class="line"><span class="regexp">export FLUTTER_STORAGE_BASE_URL=https:/</span><span class="regexp">/storage.flutter-io.cn</span></span><br></pre></td></tr></table></figure>

<p><code>source ~/.bash_profile</code></p>
<p>可配置了还是会卡住，直接下载 package 配置本地路径了</p>
<p><code>https://pub.flutter-io.cn</code> 搜索包 <code>english_word</code> 下载最新版本</p>
<p> 放到项目目录 <code>plugin/english_words</code></p>
<p>pubspec.yaml 中配置包路径</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">dependencies:</span></span><br><span class="line">  <span class="symbol">flutter:</span></span><br><span class="line">    <span class="symbol">sdk:</span> flutter</span><br><span class="line"></span><br><span class="line">  <span class="symbol">cupertino_icons:</span> ^<span class="number">0</span>.<span class="number">1.0</span></span><br><span class="line">  <span class="symbol">english_words:</span> </span><br><span class="line">  	<span class="symbol">path:</span>  plugin/english_words/</span><br></pre></td></tr></table></figure>











<p><a href="https://gitee.com/other_other/flutter.git">hello_flutter</a></p>
<p><a href="https://www.jianshu.com/p/41f1d9d6079c">配置Flutter环境ForMac</a></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+GitHub 搭建博客</title>
    <url>/2020/11/17/Hexo-GitHub-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装node.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>
<p>查看版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<p>npm是node.js的包管理工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>Hexo是一个快速、简洁高效博客框架</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>安装完成后桌面建一个blog文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;Desktop &amp;&amp; mkdir blog &amp;&amp; cd blog</span><br></pre></td></tr></table></figure>
<p>初始化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>安装依赖包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>新建的框架目录如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|--_config.yml      &#x2F;&#x2F;网站的配置信息</span><br><span class="line">|--package.json     &#x2F;&#x2F;项目包信息</span><br><span class="line">|--scaffolds        &#x2F;&#x2F;模板文件，Hexo根据scaffolds中的模板来新建文件</span><br><span class="line">|--source           &#x2F;&#x2F;存放用户资源的地方</span><br><span class="line">|  |--_drafts       &#x2F;&#x2F;存放草稿</span><br><span class="line">|  |--_posts        &#x2F;&#x2F;存放文章</span><br><span class="line">|--themes           &#x2F;&#x2F;主题文件夹</span><br></pre></td></tr></table></figure>
<h4 id="部署到GitHub-Pages"><a href="#部署到GitHub-Pages" class="headerlink" title="部署到GitHub Pages"></a>部署到GitHub Pages</h4><p>安装 hexo-deployer-git工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>修改_config.yml中的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;caodaxun&#x2F;caodaxun.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>
<p>查看 <code>https://caodaxun.github.io</code> 是否部署成功</p>
<h4 id="安装-NexT-主题"><a href="#安装-NexT-主题" class="headerlink" title="安装 NexT 主题"></a>安装 NexT 主题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>
<p>主题更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm update hexo-theme-next</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd themes&#x2F;next &amp;&amp; git pull</span><br></pre></td></tr></table></figure>

<h4 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h4><h5 id="配置添加文章自动打开编辑器"><a href="#配置添加文章自动打开编辑器" class="headerlink" title="配置添加文章自动打开编辑器"></a>配置添加文章自动打开编辑器</h5><p>blog 目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir scripts &amp;&amp; touch open.js</span><br></pre></td></tr></table></figure>

<p>添加代码保存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var exec &#x3D; require(&#39;child_process&#39;).exec;</span><br><span class="line">hexo.on(&#39;new&#39;, function(data)&#123;</span><br><span class="line">    exec(&#39;open -a &quot;&#x2F;Applications&#x2F;Typora.app&quot; &#39; + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>新建文章  <code>hexo new &quot;Test&quot;</code>  会自动打开 Typora 编辑器</p>
<p>写完后生成静态网页部署到 <code>github</code> 上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g -d				#直接生成页面发布</span><br></pre></td></tr></table></figure>

<h5 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h5><p>调试的时候可以边修改，边刷新查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean			#清除缓存</span><br><span class="line">hexo g				#生成静态页面</span><br><span class="line">hexo s --debug  #调试模式 http:&#x2F;&#x2F;localhost:4000&#x2F;进行访问</span><br></pre></td></tr></table></figure>

<p>调试模式有时会出现端口占用情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lsof -i :4000</span><br><span class="line">sudo kill -9 进程PID</span><br></pre></td></tr></table></figure>

<h5 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h5><p>安装插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-marked</span><br></pre></td></tr></table></figure>

<p>修改  <code>config.yml</code>  配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure>

<p>之后就可以使用 <code>![图片](image.jpg)</code> 访问图片了</p>
<h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h4><h5 id="添加菜单"><a href="#添加菜单" class="headerlink" title="添加菜单"></a>添加菜单</h5><p><code>hexo new page</code>添加页面，添加后文件在 <code>source/</code> 目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new about &quot;about&quot;</span><br></pre></td></tr></table></figure>

<p>配置标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2020-11-18 12:42:18</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>配置分类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2020-11-18 12:31:50</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>给文章配置分类和标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 测试下</span><br><span class="line">date: 2020-11-17 15:02:26</span><br><span class="line">tags: </span><br><span class="line">    - 标签1</span><br><span class="line">categories: </span><br><span class="line">    - 分类1</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>修改主题配置<code>themes/next/_ocnfig.yml</code>，|| 后面的是图片名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">    home: &#x2F; || fa fa-home</span><br><span class="line">    archives: &#x2F;archives || fa fa-archive</span><br><span class="line">    categories: &#x2F;categories || fa fa-th</span><br><span class="line">    tags: &#x2F;tags || fa fa-tags</span><br><span class="line">    about: &#x2F;about || fa fa-user</span><br></pre></td></tr></table></figure>

<h5 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p><code>config.yml</code> 新增</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<p>修改主题配置文件 <code>themes/next/_config.yml</code> 修改 <code>local_search</code>的 <code>enable</code> 为<code>true</code></p>
<h5 id="添加背景动画"><a href="#添加背景动画" class="headerlink" title="添加背景动画"></a>添加背景动画</h5><p>进入 <code>Hexo</code> ，带 <code>scaffolds  source  themes  _config.yml  package.json</code>目录</p>
<p>新建 <code>footer.swig</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script color&#x3D;&quot;0,0,255&quot; opacity&#x3D;&quot;0.5&quot; zIndex&#x3D;&quot;-1&quot; count&#x3D;&quot;99&quot; src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;canvas-nest.js@1&#x2F;dist&#x2F;canvas-nest.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><code>themes/next/_config.yml</code> 修改 <code>custom_file_path</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">footer: source&#x2F;_data&#x2F;footer.swig</span><br></pre></td></tr></table></figure>

<p>查看图：</p>
<p><img src="/2020/11/17/Hexo-GitHub-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/%E8%83%8C%E6%99%AF.png" alt="背景"></p>
<h4 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-blog-encrypt --save</span><br></pre></td></tr></table></figure>

<p>或者直接在 <code>package.json</code> 中直接配置依赖，再 <code>npm install</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;hexo-blog-encrypt&quot;: &quot;3.0.13&quot;,</span><br></pre></td></tr></table></figure>

<p><code>config.yml</code>中添加 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Security</span><br><span class="line">encrypt:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure>

<p>将<code>password</code>添加到文章信息头</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">password: xxxxxx</span><br><span class="line">abstract: 输入密码</span><br><span class="line">message: 输入密码</span><br></pre></td></tr></table></figure>

<h4 id="备份博客源文件"><a href="#备份博客源文件" class="headerlink" title="备份博客源文件"></a>备份博客源文件</h4><p>直接放码云了，码云上新建仓库 Hexo</p>
<p>本地新建同名文件 Hexo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd Hexo </span><br><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>本地和远程绑定 &amp;&amp; 拉取远程代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin https:&#x2F;&#x2F;gitee.com&#x2F;xxxx&#x2F;hexo.git</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>

<p>新建或修改 <code>.gitignore</code> 文件，加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*.log</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br></pre></td></tr></table></figure>

<p>把 Blog 里面的代码拖到 Hexo 文件，提交到码云</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;提交备份&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>远程代码有更新时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>

<p>还是直接用 SourceTree 工具吧，Git命令一段时间不用就会忘</p>
<h4 id="报错问题"><a href="#报错问题" class="headerlink" title="报错问题"></a>报错问题</h4><ul>
<li>SSL_ERROR_SYSCALL in connection to github.com:443</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;caodaxun&#x2F;caodaxun.github.io&#x2F;&#39;: LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (&#x2F;Users&#x2F;xx&#x2F;Desktop&#x2F;Hexo&#x2F;node_modules&#x2F;hexo-deployer-git&#x2F;node_modules&#x2F;hexo-util&#x2F;lib&#x2F;spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:310:20)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal&#x2F;child_process.js:275:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#39;s wrong. Maybe you can find the solution here: %s https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;troubleshooting.html</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<p>把 hexo 项目根目录下的 _config.yml 文件中把仓库地址 https 改为 ssh 地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519-sk -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>

<p>直接回车，会在 <code>~/.ssh</code> 目录生成 <code>id_ed25519</code> 和 <code>id_ed25519.pub</code> 文件</p>
<p>拷贝文件内容 <code>pbcopy &lt; ~/.ssh/id_ed25519.pub</code> 或直接打开拷贝，到 git 上添加 sshkey</p>
<p><a href="https://hexo.io/zh-cn/docs/">Hexo</a></p>
<p><a href="https://github.com/theme-next/hexo-theme-next">theme-next</a></p>
]]></content>
  </entry>
  <entry>
    <title>KVO KVC</title>
    <url>/2021/07/06/KVO-KVC/</url>
    <content><![CDATA[<h4 id="KVC"><a href="#KVC" class="headerlink" title="KVC"></a>KVC</h4><p><code>KVC</code> 键值编码，一种间接访问对象属性的机制，通过字符串访问对象属性</p>
<h5 id="setValue-forKey"><a href="#setValue-forKey" class="headerlink" title="setValue:forKey"></a>setValue:forKey</h5><p>查找对应 key 的 setter 方法，顺序为：<code>set&lt;Key&gt; -&gt; _set&lt;Key&gt; -&gt; setIs&lt;Key&gt;</code></p>
<p>查找到则直接设置属性的 value</p>
<p>如果没有，检查 <code>accessInstanceVariableDirectly</code> 是否允许访问成员变量</p>
<p>如果 YES，则查找实例变量，顺序为：<code>_&lt;Key&gt; -&gt; _is&lt;Key&gt; -&gt; &lt;Key&gt; -&gt; &lt;isKey&gt;</code></p>
<p>找到实例变量则赋值，否则执行 <code>setValueforUndefineKey:</code> 方法，抛出 <code>NSUndefinedKeyException</code></p>
<h5 id="valueforKey"><a href="#valueforKey" class="headerlink" title="valueforKey:"></a>valueforKey:</h5><p>查找对应 key 的 getter 方法，顺序为：<code>get&lt;Key&gt; -&gt; &lt;key&gt; -&gt; is&lt;Key&gt; -&gt; _&lt;Key&gt;</code></p>
<p>查找到直接返回结果</p>
<p>如果没有，检查 <code>accessInstanceVariableDirectly</code> 是否允许访问成员变量</p>
<p>如果 YES，则查找实例变量，顺序为：<code>_&lt;Key&gt; -&gt; _is&lt;Key&gt; -&gt; &lt;Key&gt; -&gt; &lt;isKey&gt;</code></p>
<p>查找到直接返回结果，否则执行 <code>valueForUndefinedKey:</code> 方法，抛出 <code>NSUndefinedKeyException</code></p>
<h4 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h4><p><code>KeyValueObserving</code> 键值观察者，可以监听对象属性的改变</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.person &#x3D; [[LGPerson alloc] init];</span><br><span class="line">self.person.age &#x3D; 1;</span><br><span class="line">NSKeyValueObservingOptions options &#x3D; NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld;</span><br><span class="line">[self.person addObserver:self forKeyPath:@&quot;age&quot; options:options context:@&quot;1&quot;];</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</span><br><span class="line">    self.person.age &#x3D; 20;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context &#123;</span><br><span class="line">    NSLog(@&quot;%@ %@ %@ %@&quot;, keyPath, object, change, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加观察者后，KVO 会在运行时动态创建一个子类 <code>NSKVONotifing_XXX</code>，将对象的 isa 指向新创建的类</p>
<p>修改对象属性时，会先调用子类 <code>NSKVONotifing_XXX</code> 的 setter 方法</p>
<p>子类 setter 内部会调用：</p>
<ol>
<li><code>willChangeValueForKey:</code></li>
<li>父类原来的 setter</li>
<li><code>didChangeValueForKey:</code></li>
<li>内部会触发监听器的监听方法 <code>(observeValueForKeyPath:ofObject:change:context:)</code></li>
</ol>
<h4 id="Swift-KVO"><a href="#Swift-KVO" class="headerlink" title="Swift KVO"></a>Swift KVO</h4><p>kVO 是一个纯 OC 特性，swift class 需要在声明时加 <code>@objcMembers</code> 关键字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@objcMembers class OCClass: NSObject &#123;</span><br><span class="line">    dynamic var name: String</span><br><span class="line">    init(name: String) &#123;</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>观察的闭包需要强引用，否则函数离开这个观察闭包后会被回收</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var occlass: OCClass?</span><br><span class="line">var observation: NSKeyValueObservation?</span><br><span class="line">  </span><br><span class="line">occlass &#x3D; OCClass(name: &quot;aa&quot;)</span><br><span class="line">observation &#x3D; occlass!.observe(\.name) &#123; obj, changed in</span><br><span class="line">    let new &#x3D; obj.name</span><br><span class="line">    print(&quot;new:\(new)&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">override func touchesBegan(_ touches: Set&lt;UITouch&gt;, with event: UIEvent?) &#123;</span><br><span class="line">    occlass?.name &#x3D; &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><h5 id="1、直接修改成员变量会触发-KVO-吗"><a href="#1、直接修改成员变量会触发-KVO-吗" class="headerlink" title="1、直接修改成员变量会触发 KVO 吗"></a>1、直接修改成员变量会触发 KVO 吗</h5><p>不会，没有调用重写后的 set 方法</p>
<h5 id="2、手动触发-KVO"><a href="#2、手动触发-KVO" class="headerlink" title="2、手动触发 KVO"></a>2、手动触发 KVO</h5><p>手动调用 <code>willChangeValueForKey:</code> ，<code>didChangeValueForKey:</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[self.person willChangeValueForKey:@&quot;age&quot;];</span><br><span class="line">self.person-&gt;_age &#x3D; 2;</span><br><span class="line">[self.person didChangeValueForKey:@&quot;age&quot;];</span><br></pre></td></tr></table></figure>

<h5 id="3、如何对可变数组进行-KVO"><a href="#3、如何对可变数组进行-KVO" class="headerlink" title="3、如何对可变数组进行 KVO"></a>3、如何对可变数组进行 KVO</h5><p>可变数组添加元素 <code>addObject:</code> 是不会调用 <code>setter</code> 方法的，不会触发 KVO 通知回调</p>
<p>需要使用 <code>mutableArrayValueForKey</code> 获取要操作的可变数组，添加元素</p>
<p>  <code>[[self mutableArrayValueForKey:@“arr”] addObject:item]</code> </p>
]]></content>
  </entry>
  <entry>
    <title>OC对象底层原理</title>
    <url>/2020/11/19/OC%E5%AF%B9%E8%B1%A1%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p><code>NSObject</code> 对象的底层就是一个包含了一个指针的结构体，那么它的大小是不是就是8字节（64位下指针类型占8个字节）？</p>
</blockquote>
<h4 id="class-getInstanceSize"><a href="#class-getInstanceSize" class="headerlink" title="class_getInstanceSize"></a>class_getInstanceSize</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &lt;objc&#x2F;runtime.h&gt;</span><br></pre></td></tr></table></figure>

<p><code>class_getInstanceSize ()</code>可以计算一个类的实例对象实际所需要的空间大小，也就是计算类所对应的结构体的大小</p>
<p>系统在为类的结构体分配内存时内存对齐，以一个指针的长度作为对齐系数，64位系统指针长度为8个字节，类所对应的结构体，头部肯定是一个 <code>isa</code> 指针</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">size_t size &#x3D; class_getInstanceSize([NSObject class]);</span><br><span class="line">NSLog(@&quot;NSObject对象大小：%zd&quot;, size); &#x2F;&#x2F;8</span><br></pre></td></tr></table></figure>

<h4 id="malloc-size"><a href="#malloc-size" class="headerlink" title="malloc_size()"></a>malloc_size()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &lt;malloc&#x2F;malloc.h&gt;</span><br></pre></td></tr></table></figure>

<p><code>malloc_size()</code>，函数的参数是一个指针，可以计算指针所指向内存空间的大小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NSObject *obj &#x3D; [[NSObject alloc] init];</span><br><span class="line">size_t size2 &#x3D; malloc_size((__bridge const void *)(obj));</span><br><span class="line">NSLog(@&quot;对象obj所指向的的内存空间大小：%zd&quot;,size2); &#x2F;&#x2F;16</span><br></pre></td></tr></table></figure>

<p>系统为实例对象分配的内存空间，最小为16个字节</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">instanceSize</span><span class="params">(<span class="keyword">size_t</span> extraBytes)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实例对象内部成员变量所占空间大小 extraBytes通常为0</span></span><br><span class="line">    <span class="keyword">size_t</span> size = alignedInstanceSize() + extraBytes;</span><br><span class="line">    <span class="comment">// CF requires all objects be at least 16 bytes.</span></span><br><span class="line">    <span class="keyword">if</span> (size &lt; <span class="number">16</span>) size = <span class="number">16</span>; <span class="comment">//系统为该实例对象分配的内存空间大小</span></span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p><code>class_getInstanceSize</code> 获取类的实例对象内存大小，本质就是获取实例对象中成员变量的内存大小</p>
<p><code>malloc_size</code> 得到一个指针所指向的内存空间的大小，系统实际分配内存，利用这个可以得到对象所占用的内存大小</p>
<p><code>sizeof()</code> 获取数据类型或变量占用空间大小，这是一个运算符</p>
<p><code>[NSObject alloc]</code> 之后，系统为其分配了16个字节的内存，最终 <code>obj</code> 对象实际使用了其中8个字节内存（也就是其内部的那个 <code>isa</code> 指针所用的8个字节，64位系统下）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface Student : NSObject</span><br><span class="line">&#123;</span><br><span class="line">   @public</span><br><span class="line">    int _age;   &#x2F;&#x2F;4个字节</span><br><span class="line">    int _no;    &#x2F;&#x2F;4个字节</span><br><span class="line">    int _grade; &#x2F;&#x2F;4个字节</span><br><span class="line">&#125; </span><br><span class="line">Student *std &#x3D; [[Student alloc] init];</span><br><span class="line">size_t size &#x3D; class_getInstanceSize([Student class]); &#x2F;&#x2F;24</span><br><span class="line">size_t size &#x3D; malloc_size((__bridge const void *)(std)); &#x2F;&#x2F;32</span><br></pre></td></tr></table></figure>

<p><code>Student</code> 结构体所有成员变量所需要的总空间为20个字节，根据内存对齐的原则，最后结构体所需要的空间应该是8的倍数，也就是24个字节；实际系统分配内存大小是16的倍数32个字节</p>
<h4 id="LLDB查看内存"><a href="#LLDB查看内存" class="headerlink" title="LLDB查看内存"></a>LLDB查看内存</h4><p><img src="/2020/11/19/OC%E5%AF%B9%E8%B1%A1%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/alloc.png" alt="alloc"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x281442fa0-0x281442fa0-0x281442fa0</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(lldb) po p</span><br><span class="line">&lt;LGPerson: <span class="number">0x281442fa0</span>&gt;</span><br><span class="line">(lldb) x p</span><br><span class="line"><span class="number">0x281442fa0</span>: <span class="number">2</span>d <span class="number">17</span> d7 <span class="number">02</span> a1 <span class="number">41</span> <span class="number">00</span> <span class="number">00</span> <span class="number">28</span> c0 d6 <span class="number">02</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  -....A..(.......</span><br><span class="line"><span class="number">0x281442fb0</span>: <span class="number">0</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">64</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  ........d.......</span><br><span class="line">(lldb) po <span class="number">0x0a</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">(lldb) po <span class="number">0x64</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line">(lldb) po <span class="number">0x0102d6c028</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>前8位<code>2d 17 d7 02 a1 41 00 00</code> 是<code>isa</code>的内存8个字节</p>
<p><code>0a 00 00 00</code> 是 <code>age</code> 占4个字节</p>
<p><code>64 00 00 00</code> 是 <code>height</code> 占4个字节</p>
<p><code>28 c0 d6 02 01 00 00 00</code> 是 <code>name</code> 占8个字节</p>
<h4 id="alloc-init"><a href="#alloc-init" class="headerlink" title="alloc init"></a>alloc init</h4><img src="allocinit.png" alt="allocinit" style="zoom:80%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ (id)alloc &#123;</span><br><span class="line">    return _objc_rootAlloc(self);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_objc_rootAlloc(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    return callAlloc(cls, false&#x2F;*checkNil*&#x2F;, true&#x2F;*allocWithZone*&#x2F;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static ALWAYS_INLINE id</span><br><span class="line">callAlloc(Class cls, bool checkNil, bool allocWithZone&#x3D;false)</span><br><span class="line">&#123;</span><br><span class="line">#if __OBJC2__</span><br><span class="line">    if (slowpath(checkNil &amp;&amp; !cls)) return nil;</span><br><span class="line">    if (fastpath(!cls-&gt;ISA()-&gt;hasCustomAWZ())) &#123;</span><br><span class="line">        return _objc_rootAllocWithZone(cls, nil);</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; No shortcuts available.</span><br><span class="line">    if (allocWithZone) &#123;</span><br><span class="line">        return ((id(*)(id, SEL, struct _NSZone *))objc_msgSend)(cls, @selector(allocWithZone:), nil);</span><br><span class="line">    &#125;</span><br><span class="line">    return ((id(*)(id, SEL))objc_msgSend)(cls, @selector(alloc));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id</span><br><span class="line">_objc_rootAllocWithZone(Class cls, malloc_zone_t *zone __unused)&#x2F;&#x2F; alloc 源码 第四步</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; allocWithZone under __OBJC2__ ignores the zone parameter</span><br><span class="line">    &#x2F;&#x2F;zone 参数不再使用 类创建实例内存空间</span><br><span class="line">    return _class_createInstanceFromZone(cls, 0, nil,</span><br><span class="line">                                         OBJECT_CONSTRUCT_CALL_BADALLOC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>alloc 的核心操作：</p>
<p><code>cls-&gt;instanceSize</code>：计算需要开辟内存空间大小</p>
<p><code>calloc</code>：申请内存，返回指针地址</p>
<p><code>objc-&gt;initInstanceIsa</code>：将类与 isa 关联</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static ALWAYS_INLINE id</span><br><span class="line">_class_createInstanceFromZone(Class cls, size_t extraBytes, void *zone,</span><br><span class="line">                              int construct_flags &#x3D; OBJECT_CONSTRUCT_NONE,</span><br><span class="line">                              bool cxxConstruct &#x3D; true,</span><br><span class="line">                              size_t *outAllocatedSize &#x3D; nil)&#x2F;&#x2F; alloc 源码 第五步</span><br><span class="line">&#123;</span><br><span class="line">    ASSERT(cls-&gt;isRealized()); &#x2F;&#x2F;检查是否已经实现</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Read class&#39;s info bits all at once for performance</span><br><span class="line">    &#x2F;&#x2F;一次性读取类的位信息以提高性能</span><br><span class="line">    bool hasCxxCtor &#x3D; cxxConstruct &amp;&amp; cls-&gt;hasCxxCtor();</span><br><span class="line">    bool hasCxxDtor &#x3D; cls-&gt;hasCxxDtor();</span><br><span class="line">    bool fast &#x3D; cls-&gt;canAllocNonpointer();</span><br><span class="line">    size_t size;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;计算需要开辟的内存大小，传入的extraBytes 为 0</span><br><span class="line">    size &#x3D; cls-&gt;instanceSize(extraBytes);</span><br><span class="line">    if (outAllocatedSize) *outAllocatedSize &#x3D; size;</span><br><span class="line"></span><br><span class="line">    id obj;</span><br><span class="line">    if (zone) &#123;</span><br><span class="line">        obj &#x3D; (id)malloc_zone_calloc((malloc_zone_t *)zone, 1, size);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;申请内存</span><br><span class="line">        obj &#x3D; (id)calloc(1, size);</span><br><span class="line">    &#125;</span><br><span class="line">    if (slowpath(!obj)) &#123;</span><br><span class="line">        if (construct_flags &amp; OBJECT_CONSTRUCT_CALL_BADALLOC) &#123;</span><br><span class="line">            return _objc_callBadAllocHandler(cls);</span><br><span class="line">        &#125;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!zone &amp;&amp; fast) &#123;</span><br><span class="line">        &#x2F;&#x2F;将 cls类 与 obj指针（即isa） 关联</span><br><span class="line">        obj-&gt;initInstanceIsa(cls, hasCxxDtor);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; Use raw pointer isa on the assumption that they might be</span><br><span class="line">        &#x2F;&#x2F; doing something weird with the zone or RR.</span><br><span class="line">        obj-&gt;initIsa(cls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (fastpath(!hasCxxCtor)) &#123;</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    construct_flags |&#x3D; OBJECT_CONSTRUCT_FREE_ONFAILURE;</span><br><span class="line">    return object_cxxConstructFromClass(obj, cls, construct_flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><a href="https://blog.csdn.net/u013480070/article/details/88365141">OC对象的本质（上）：OC对象的底层实现原理</a><br><a href="https://opensource.apple.com/tarballs/objc4/">objc4-781</a><br><a href="https://juejin.im/post/5d9c829df265da5ba46f49c9#heading-8">objc4-756.2源码编译</a><br><a href="https://www.jianshu.com/p/d4f4769eaa1a">macOS 10.15最新objc源码编译调试</a></p>
]]></content>
  </entry>
  <entry>
    <title>Python</title>
    <url>/2021/03/02/Python/</url>
    <content><![CDATA[<p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400">廖雪峰 Python 教程</a> </p>
<p><a href="https://edu.csdn.net/notebook/python/week09/">https://edu.csdn.net/notebook/python/week09/</a></p>
<h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><ul>
<li>整数</li>
</ul>
<p>Python 允许在数字中间以 _ 分隔 10_000_000_000 和 10000000000 是一样的，十六进制也可以写成 0xa1b2_c3d4</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">input</span>(<span class="string">&#x27;birth: &#x27;</span>)</span><br><span class="line">birth = <span class="built_in">int</span>(s)</span><br></pre></td></tr></table></figure>

<ul>
<li>字符串</li>
</ul>
<p>单引号或者双引号括起来的任意文本</p>
<p><code>r&#39;&#39; </code> 表示 <code>&#39;&#39;</code>  内部的字符串不转义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">r&#x27;\\\t\\&#x27;</span>)</span><br><span class="line"><span class="comment">#\\\t\\</span></span><br></pre></td></tr></table></figure>

<ul>
<li>多行输出</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;&#x27;&#x27;line1</span></span><br><span class="line"><span class="string">line2</span></span><br><span class="line"><span class="string">line3&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>输入 </li>
</ul>
<p>Python 提供了一个 input()，可以让用户输入字符串，并存放到一个变量里</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="built_in">input</span>()</span><br><span class="line">print(name)</span><br><span class="line"><span class="comment">#字符串提示输入 </span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;please enter your name: &#x27;</span>)</span><br><span class="line"><span class="comment">#please enter your name: J</span></span><br></pre></td></tr></table></figure>

<ul>
<li>布尔值</li>
</ul>
<p>True、False，布尔值可以用 and、or、not 运算</p>
<ul>
<li>空值 </li>
</ul>
<p>None</p>
<ul>
<li>运算符</li>
</ul>
<p>除法 / 结果浮点数；地板除 // 结果取整数部分；求余 % 取余数部分</p>
<h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>% 运算符就是用来格式化字符串的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;Hello, %s&#x27;</span> % <span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"><span class="comment">#Hello, world</span></span><br></pre></td></tr></table></figure>

<p>占位符：%d 整数  %f 浮点数 %s 字符串 %x 十六进制数</p>
<p>如果字符串里面有 % ，需要转义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;growth rate: %d %%&#39; % 7</span><br></pre></td></tr></table></figure>

<p>字符串长度 len()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(<span class="string">&#x27;ABC&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="list-列表"><a href="#list-列表" class="headerlink" title="list 列表"></a>list 列表</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">classmate = [<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>]</span><br><span class="line">print(classmate, <span class="built_in">len</span>(classmate), classmate[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<p>索引访问元素，取最后一个元素 <code>classmate[-1]</code> 倒数第 2 个 <code>classmate[-2]</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#追加元素</span></span><br><span class="line">classmate.append(<span class="string">&#x27;Adam&#x27;</span>)</span><br><span class="line"><span class="comment">#插入元素到指定位置</span></span><br><span class="line">classmate.insert(<span class="number">1</span>, <span class="string">&#x27;Jack&#x27;</span>)</span><br><span class="line"><span class="comment">#删除最后元素</span></span><br><span class="line">classmate.pop()</span><br><span class="line"><span class="comment">#删除指定位置元素</span></span><br><span class="line">classmate.pop(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#替换元素</span></span><br><span class="line">classmate[<span class="number">1</span>] = <span class="string">&#x27;Sarah&#x27;</span></span><br></pre></td></tr></table></figure>

<p>list 里面元素类型可以不同，list 元素也可以是 list，取的时候  <code>s[2][1]</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = [<span class="string">&#x27;Apple&#x27;</span>, <span class="number">123</span>, <span class="literal">True</span>]</span><br><span class="line">s = [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, [<span class="string">&#x27;asp&#x27;</span>, <span class="string">&#x27;php&#x27;</span>], <span class="string">&#x27;scheme&#x27;</span>]</span><br><span class="line">a = []</span><br></pre></td></tr></table></figure>

<h5 id="tuple-元组"><a href="#tuple-元组" class="headerlink" title="tuple 元组"></a>tuple 元组</h5><p>初始化后不能修改，如果 tuple 有元素是 list， list 可以变</p>
<p>获取元素的方法和 list 一样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">classmates = (<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>)</span><br><span class="line">t = () <span class="comment">#空tuple</span></span><br><span class="line">t = (<span class="number">1</span>,) <span class="comment">#只有 1 个元素的 tuple，加一个逗号消除歧义</span></span><br><span class="line">a = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>])</span><br><span class="line">a[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">&#x27;X&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">&#x27;adult&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">6</span>:</span><br><span class="line">    print(<span class="string">&#x27;teenager&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;kid&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    print(<span class="string">&#x27;True&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure>

<p>range() 函数，可以生成一个整数序列，通过 list() 函数可以转换成 list</p>
<p>range(5) 生成的序列是从0开始小于5的整数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>

<h5 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h5><p>get() 方法，如果 key 不存在，可以返回 None，或者自己指定的 value</p>
<p>pop(key) 删除一个 key，对应 value也会从 dict 删除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br><span class="line">d.get(<span class="string">&#x27;Thomas&#x27;</span>)</span><br><span class="line">d.get(<span class="string">&#x27;Thomas&#x27;</span>, <span class="number">-1</span>) </span><br><span class="line">d.pop(<span class="string">&#x27;Bob&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="set-集合"><a href="#set-集合" class="headerlink" title="set 集合"></a>set 集合</h5><p>没有重复的 key，重复元素会自动过滤</p>
<p>add(key) 添加元素，可以重复添加，但不会有效果</p>
<p>remove(key) 删除元素</p>
<p>两个 set 可以做数学意义上的交集&amp;、并集 ！</p>
<p>创建一个 set 需要提供一个 list 作为集合</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">#&#123;1, 2, 3&#125;</span></span><br><span class="line">s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]) <span class="comment">#&#123;1, 2, 3&#125;</span></span><br><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line">s1 = <span class="built_in">set</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">s &amp; s1 <span class="comment">#&#123;2, 3&#125;</span></span><br><span class="line">s | s1 <span class="comment">#&#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br></pre></td></tr></table></figure>

<p>定义空函数什么也不做，pass 用来做占位符，还没写好的函数可以先放一个 pass</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>参数类型检查 isinstance 内置函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(x, (<span class="built_in">int</span>, <span class="built_in">float</span>)): <span class="comment">#判断整数或浮点数</span></span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&#x27;bad operand type&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br></pre></td></tr></table></figure>

<h5 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">x, y, step, angle=<span class="number">0</span></span>):</span></span><br><span class="line">    nx = x + step * math.cos(angle)</span><br><span class="line">    ny = y - step * math.sin(angle)</span><br><span class="line">    <span class="keyword">return</span> nx, ny</span><br></pre></td></tr></table></figure>

<p>同时获得返回值，返回一个tuple</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x, y = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br></pre></td></tr></table></figure>

<h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><p>调用 power(5)，power(5, 3)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span>(<span class="params">x, n=<span class="number">2</span></span>):</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enroll</span>(<span class="params">name, gender, age=<span class="number">6</span>, city=<span class="string">&#x27;Beijing&#x27;</span></span>):</span></span><br><span class="line">    print(<span class="string">&#x27;name:&#x27;</span>, name)</span><br><span class="line">    print(<span class="string">&#x27;gender:&#x27;</span>, gender)</span><br><span class="line">    print(<span class="string">&#x27;age:&#x27;</span>, age)</span><br><span class="line">    print(<span class="string">&#x27;city:&#x27;</span>, city)</span><br><span class="line"></span><br><span class="line">enroll(<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">7</span>) city参数依然是默认</span><br><span class="line">enroll(<span class="string">&#x27;Adam&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, city=<span class="string">&#x27;Tianjin’) age默认 city用传的值</span></span><br></pre></td></tr></table></figure>

<h5 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">numbers</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure>

<p>调用的时候传入 list 或 tuple</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">calc([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">calc((<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>))</span><br></pre></td></tr></table></figure>

<p>改成可变参数，参数前面加一个 * ，函数内部 nubmers 接收的是一个 tuple</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">*numbers</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure>

<p>调用可以传任意参数，或者 0 个参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">calc(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">calc()</span><br></pre></td></tr></table></figure>

<p>如果有一个list ，调用可变参数，list 前面加一个 * 把 list 的元素变成可变参数传进去</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">calc(*nums)</span><br></pre></td></tr></table></figure>

<h5 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h5><p>除了必选参数 name 和 age 外，还接受关键字参数 kw</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, **kw</span>):</span></span><br><span class="line">  	print(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age, <span class="string">&#x27;other:&#x27;</span>, kw)</span><br></pre></td></tr></table></figure>

<p>可以传入任意个数关键字参数，关键字参数在函数内部自动组装为一个 dict</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">person(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">35</span>, city=<span class="string">&#x27;Beijing&#x27;</span>)</span><br><span class="line">person(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">45</span>, gender=<span class="string">&#x27;M&#x27;</span>, job=<span class="string">&#x27;Engineer&#x27;</span>)</span><br><span class="line"></span><br><span class="line">extra = &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line">person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, city=extra[<span class="string">&#x27;city&#x27;</span>], job=extra[<span class="string">&#x27;job&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#上面调用可以简化成</span></span><br><span class="line"><span class="comment">#**extra表示把 extra dict 所有 key-value 用关键字参数传入到函数的**Kw参数，kw 将获得一个 dict</span></span><br><span class="line">person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, **extra)</span><br><span class="line"><span class="comment">#name: Jack age: 24 other: &#123;&#x27;city&#x27;: &#x27;Beijing&#x27;, &#x27;job&#x27;: &#x27;Engineer&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p>检查参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, **kw</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;city&#x27;</span> <span class="keyword">in</span> kw:</span><br><span class="line">        <span class="comment"># 有city参数</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;job&#x27;</span> <span class="keyword">in</span> kw:</span><br><span class="line">        <span class="comment"># 有job参数</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    print(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age, <span class="string">&#x27;other:&#x27;</span>, kw)</span><br></pre></td></tr></table></figure>

<h5 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h5><p>限制关键字参数名字</p>
<p>命名关键字参数，需要一个特殊分隔符 <code>*</code> ， <code>*</code> 后面的参数被视为命名关键字参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, *, city, job</span>):</span></span><br><span class="line">    print(name, age, city, job)</span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, city=<span class="string">&#x27;Beijing&#x27;</span>, job=<span class="string">&#x27;Engineer&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如果已经有一个可变参数，后面命名关键字参数就不需要特殊分隔符 * 了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, *args, city, job</span>):</span></span><br><span class="line">    print(name, age, args, city, job)</span><br></pre></td></tr></table></figure>

<p>调用需要加参数名字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, job=<span class="string">&#x27;Engineer&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="参数组合"><a href="#参数组合" class="headerlink" title="参数组合"></a>参数组合</h5><p>必选参数、默认参数、可变参数、命名关键字参数、关键字参数，5种参数可以组合使用</p>
<p>顺序必须是：必选参数、默认参数、可变参数、命名关键字参数、关键字参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">a, b, c=<span class="number">0</span>, *args, **kw</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;b =&#x27;</span>, b, <span class="string">&#x27;c =&#x27;</span>, c, <span class="string">&#x27;args =&#x27;</span>, args, <span class="string">&#x27;kw =&#x27;</span>, kw)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">a, b, c=<span class="number">0</span>, *, d, **kw</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;b =&#x27;</span>, b, <span class="string">&#x27;c =&#x27;</span>, c, <span class="string">&#x27;d =&#x27;</span>, d, <span class="string">&#x27;kw =&#x27;</span>, kw)</span><br></pre></td></tr></table></figure>

<p>不要用太多组合，否则理解性很差</p>
<h4 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h4><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>L[0:3] 从索引 0 开始取，直到索引 3 为止，不包括 3，如果第一个索引是0，可以省略 L[:3]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = [<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Sarah&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>]</span><br><span class="line">print(L[<span class="number">0</span>:<span class="number">3</span>]) <span class="comment">#[&#x27;Michael&#x27;, &#x27;Sarah&#x27;, &#x27;Tracy&#x27;]</span></span><br><span class="line">print(L[:<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<p>支持倒数切片 L[-1] 取倒数第一个元素</p>
<p>0-99的数列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">100</span>))</span><br><span class="line">L[:<span class="number">10</span>]    <span class="comment">#取前10个数 0-9</span></span><br><span class="line">L[<span class="number">-10</span>:]   <span class="comment">#取后10个数</span></span><br><span class="line">L[<span class="number">10</span>：<span class="number">20</span>] <span class="comment">#取前11-20个数</span></span><br><span class="line">L[:<span class="number">10</span>:<span class="number">2</span>]  <span class="comment">#前10个数每两个取一个</span></span><br><span class="line">L[::<span class="number">5</span>]		<span class="comment">#所有数每5个取一个</span></span><br><span class="line">L[:]			<span class="comment">#原样复制一个 list</span></span><br></pre></td></tr></table></figure>

<p>tuple 和 str 也可以用切片操作</p>
<h5 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h5><p>给定一个 list 或 tuple，我们可以通过 for 循环来遍历这个 list 或 tuple，这种遍历称为迭代</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line">	print(key)</span><br><span class="line">	</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> d.values()</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items()</span><br></pre></td></tr></table></figure>

<p>使用<code>for</code>循环时，只要作用于一个可迭代对象，<code>for</code>循环就可以正常运行</p>
<p>通过 collections 模块的 Iterable 类型判断对象是否可迭代</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="built_in">isinstance</span>(<span class="string">&#x27;abc&#x27;</span>, Iterable) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">isinstance</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], Iterable) <span class="comment">#True</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> <span class="built_in">enumerate</span>([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]):</span><br><span class="line">	print(i, value)</span><br></pre></td></tr></table></figure>

<h5 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>, <span class="string">&#x27;IBM&#x27;</span>, <span class="string">&#x27;Apple&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> L]</span><br><span class="line">[<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;ibm&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>要生成 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure>

<p>生成 [1x1, 2x2, 3x3, …, 10x10]</p>
<p>生成列表时 把要生成的元素x*x放到前面 后面for循环就可以把list创建出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure>

<p>循环后面还可以加上 if 判断</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>还可以使用两层循环</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;XYZ&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;AX&#x27;</span>, <span class="string">&#x27;AY&#x27;</span>, <span class="string">&#x27;AZ&#x27;</span>, <span class="string">&#x27;BX&#x27;</span>, <span class="string">&#x27;BY&#x27;</span>, <span class="string">&#x27;BZ&#x27;</span>, <span class="string">&#x27;CX&#x27;</span>, <span class="string">&#x27;CY&#x27;</span>, <span class="string">&#x27;CZ&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h5 id="生成器-generator"><a href="#生成器-generator" class="headerlink" title="生成器 generator"></a>生成器 generator</h5><p>列表的元素可以按照某种算法推算出来，一边循环一边计算的机制，称为生成器：generator</p>
<ul>
<li>把列表生成式的 [] 改成 ()，就创建了一个 generator</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">print(g) //&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x7f9c13a0bba0</span>&gt;</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> g:</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure>

<p>创建了一个 generator 后，基本上不会调用 next()，而是通过 for 循环来迭代它</p>
<ul>
<li>定义 generator 的另一种方法</li>
</ul>
<p>如果一个函数定义中包含 yield 关键字，这个函数就不再是一个普通函数，而是一个 generator</p>
<p>generator 在每次调用 next() 的时候执行，遇到 yield 语句返回，再次执行的时候从上次返回的 yield 语句处继续执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;step 1&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    print(<span class="string">&#x27;step 2&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span>(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&#x27;step 3&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>调用时首先生成一个 generator 对象 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">o = odd()</span><br><span class="line"><span class="built_in">next</span>(o) <span class="comment">#1</span></span><br><span class="line"><span class="built_in">next</span>(o) <span class="comment">#3</span></span><br></pre></td></tr></table></figure>

<h5 id="迭代器-Iterator"><a href="#迭代器-Iterator" class="headerlink" title="迭代器 Iterator"></a>迭代器 Iterator</h5><p>可直接作用于 for 循环的对象称为可迭代对象： <code>Iterable</code></p>
<p>使用 isinstance()，判断一个对象是否是 Iterable</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="built_in">isinstance</span>([], Iterable)</span><br><span class="line"><span class="built_in">isinstance</span>(<span class="string">&#x27;abc&#x27;</span>, Iterable)</span><br></pre></td></tr></table></figure>

<p>生成器不但可以作用于 for 循环，还可以被 next() 函数不断调用返回下一个值，知道最后抛出 StopIteration 错误表示无法继续返回下一个值</p>
<p>可以被 next() 函数调用并返回下一个值的对象称为迭代器：<code> Iterator</code></p>
<p>把 list、dict、str 等 Iterable 变成 Iterator 可以使用 iter() 函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(<span class="built_in">iter</span>(<span class="string">&#x27;abc&#x27;</span>), Iterator)</span><br></pre></td></tr></table></figure>



<h5 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h5><ul>
<li>高阶函数</li>
</ul>
<p>map()</p>
<p><code>map()</code>  函数接收两个参数，一个是函数，一个是 Iterable。map 将传入的函数依次作用到序列的每个元素，并把结果作为新的 Iterator 返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">	<span class="keyword">return</span> x*x</span><br><span class="line">r = <span class="built_in">map</span>(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(<span class="built_in">list</span>(r))</span><br><span class="line"><span class="comment">#[1, 4, 9, 16]</span></span><br></pre></td></tr></table></figure>

<p>结果 r 是一个 Iterator，Iterator 是惰性序列，通过 list 函数把它整个序列都计算出来并返回list</p>
<p>把list所有数字转换为字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</span><br><span class="line"><span class="comment">#[&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>reduce()</p>
<p>把一个函数作用在一个序列上，这个函数必须接收两个参数，reduce 把结果继续和序列的下一个元素做累积计算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">	<span class="keyword">return</span> x + y</span><br><span class="line">reduce(add, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]) <span class="comment">#25</span></span><br></pre></td></tr></table></figure>

<p>str 转 int</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">DIGITS = &#123;<span class="string">&#x27;0&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;1&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;5&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;6&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;7&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;8&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;9&#x27;</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2int</span>(<span class="params">s</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">x, y</span>):</span></span><br><span class="line">      <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">char2num</span>(<span class="params">s</span>):</span></span><br><span class="line">      <span class="keyword">return</span> DIGITS[s]</span><br><span class="line">  <span class="keyword">return</span> reduce(fn, <span class="built_in">map</span>(char2num, s))</span><br></pre></td></tr></table></figure>

<p>用 lambda 函数进一步简化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">DIGITS = &#123;<span class="string">&#x27;0&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;1&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;5&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;6&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;7&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;8&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;9&#x27;</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">char2num</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> DIGITS[s]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2int</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x * <span class="number">10</span> + y, <span class="built_in">map</span>(char2num, s))</span><br></pre></td></tr></table></figure>

<p>filter()</p>
<p>接收一个函数和一个序列，把传入的函数依次作用于每个元素，然后根据返回值是 True 还是 False 决定保留还是丢弃该元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span>(<span class="params">n</span>):</span></span><br><span class="line">  <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_empty</span>(<span class="params">s</span>):</span></span><br><span class="line">  <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">filter</span>(is_odd, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]))</span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">filter</span>(not_empty, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="literal">None</span>])) <span class="comment">#A</span></span><br></pre></td></tr></table></figure>

<p>sorted()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sorted</span>([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>])</span><br><span class="line"><span class="comment">#[-21, -12, 5, 9, 36]</span></span><br></pre></td></tr></table></figure>

<p>可以接收一个 key 函数来实现自定义排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sorted</span>([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>], key=<span class="built_in">abs</span>)</span><br><span class="line"><span class="comment">#[5, 9, -12, -21, 36]</span></span><br><span class="line"><span class="built_in">sorted</span>([<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;Zoo&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>], key=<span class="built_in">str</span>.lower)</span><br><span class="line"><span class="comment">#[&#x27;about&#x27;, &#x27;bob&#x27;, &#x27;Credit&#x27;, &#x27;Zoo&#x27;]</span></span><br><span class="line"><span class="comment">#反向排序</span></span><br><span class="line"><span class="built_in">sorted</span>([<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;Zoo&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>], key=<span class="built_in">str</span>.lower, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#[&#x27;Zoo&#x27;, &#x27;Credit&#x27;, &#x27;bob&#x27;, &#x27;about&#x27;]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回函数</li>
</ul>
<p>函数作为返回值</p>
<p>不需要立刻求和，而是在后面的代码中，根据需要再计算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span>(<span class="params">*args</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sum</span>():</span></span><br><span class="line">      ax = <span class="number">0</span></span><br><span class="line">      <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">          ax = ax + n</span><br><span class="line">      <span class="keyword">return</span> ax</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">f = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h6></li>
</ul>
<p>在传入函数时，有时候，不需要显式的定义函数，直接传入匿名函数更方便</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]))</span><br></pre></td></tr></table></figure>

<p>匿名函数实际上就是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">	<span class="keyword">return</span> x * x</span><br></pre></td></tr></table></figure>

<p>关键字 lambda 表示匿名函数，冒号前面的 x 表示函数参数</p>
<p>匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x: x*x</span><br><span class="line">f(<span class="number">5</span>) <span class="comment">#25</span></span><br></pre></td></tr></table></figure>

<p>同样可以把匿名函数作为返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">x, y</span>):</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">lambda</span>: x*x+y*y</span><br></pre></td></tr></table></figure>

<h6 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h6><p>函数对象有一个  <code>__name__</code>  属性，可以拿到函数的名字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span></span><br><span class="line">	print(<span class="string">&#x27;2015-3-25&#x27;</span>)</span><br><span class="line">now.__name__  <span class="comment">#&#x27;now&#x27;</span></span><br></pre></td></tr></table></figure>

<p>假设要增强 now 的功能，比如调用前后自动打印日志，但又不希望修改 now 函数的定义</p>
<p>代码运行期间动态增加功能的方式，称为装饰器 Decorator</p>
<p>定义一个打印日志的 decorator</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">  @functools.wraps(func)</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">		print(<span class="string">&#x27;call %s():&#x27;</span> % func.__name__)</span><br><span class="line">		<span class="keyword">return</span> func(*args, **kw) <span class="comment">#先打印日志 再调用原始函数</span></span><br><span class="line">	<span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p>借助 Python 的 @ 语法，把 decorator 置于函数的定义处</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span>:</span><br><span class="line">	print(<span class="string">&#x27;2015-3-25&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>调用 now 函数，不仅会运行 now() 函数本身，还会在运行 now 函数前打印一行日志</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">now()</span><br><span class="line"><span class="comment">#call now():</span></span><br><span class="line"><span class="comment">#2015-3-25</span></span><br></pre></td></tr></table></figure>

<p>把 @log 放到 now() 函数的定义处，相当于执行了语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">now = log(now)</span><br></pre></td></tr></table></figure>

<p>log() 是一个 decorator，返回一个函数</p>
<ul>
<li>偏函数</li>
</ul>
<p>Python 的 functools 模块提供了很多有用的功能，其中一个就是偏函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line">int2 = functools.partial(<span class="built_in">int</span>, base=<span class="number">2</span>)</span><br><span class="line"><span class="comment">#固定 int 函数的关键字参数 base=2</span></span><br><span class="line">int2(<span class="string">&#x27;1000000&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>把一个函数的某些参数给固定住，也就是设置默认值，返回一个新的函数</p>
<p>相当于</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2</span>(<span class="params">x, base=<span class="number">2</span></span>)</span></span><br><span class="line"><span class="function">	<span class="title">return</span> <span class="title">int</span>(<span class="params">x, base</span>)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">max2 = functools.partial(<span class="built_in">max</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">#实际上把10作为 *args的一部分自动加到左边</span></span><br><span class="line">max2(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line"><span class="comment">#相当于</span></span><br><span class="line">args = (<span class="number">10</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line"><span class="built_in">max</span>(*args) <span class="comment">#*args 加*号 args作为可变参数传入</span></span><br></pre></td></tr></table></figure>

<p>当函数的参数个数太多，需要简化时，使用 functools.partial 可以创建一个新的函数</p>
<h5 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h5><p>一个 .py 文件就称之为一个模块</p>
<p>按目录来组织模块的方法，称为包 Package</p>
<p>一个 abc.py 的文件就叫 abc 模块，如果这模块名字和其他模块冲突了，可以通过包来组织模块，避免冲突</p>
<p>用包来组织模块，每个包目录下都有一个 <code>__init__.py</code>，文件，必须存在，否则 python 就把这个目录当成一个普通目录，而不是一个包，可以是空文件</p>
<ul>
<li>使用模块</li>
</ul>
<p>以内建的 sys 模块为例， 编写一个 hello 模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-  </span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; a test module &#x27;</span> <span class="comment"># 任何模块代码的第一个字符串都被视为模块的文档注释</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">&#x27;Michael Liao&#x27;</span>  <span class="comment">#把作者写进去</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    args = sys.argv</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(args)==<span class="number">1</span>:</span><br><span class="line">        print(<span class="string">&#x27;Hello, world!&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(args)==<span class="number">2</span>:</span><br><span class="line">        print(<span class="string">&#x27;Hello, %s!&#x27;</span> % args[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;Too many arguments!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure>

<p>第 1 行 第 2 行是标准注释</p>
<p>第一行注释可以让这个 hello.py 文件直接在 Unix/Linux/Mac 上运行</p>
<p>第二行注释表示.py 文件本身使用标准 utf-8 编码</p>
<p>sys 模块有一个 argv 变量，用 list 存储了命令行的所有参数。argv 至少有一个参数，因为第一个参数永远是该 .py 文件的名称</p>
<p>例如 python3 hello.py 获得 sys.argv 就是 <code> [&#39;hello.py&#39;]</code></p>
<p>运行 python3 hello.py Michael 获得 sys.argv 就是 <code> [&#39;hello.py&#39;, &#39;Michael&#39;]</code></p>
<ul>
<li>作用域</li>
</ul>
<p><code>__xxx__</code> 这样的变量是特殊变量，可以被直接引用，但是有特殊用途</p>
<p><code>_xx</code>  <code>__xx</code> 这样的函数或者变量就是非公开的，不应该被直接引用</p>
<h6 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h6><p>第三方库都会在Python官方的 <a href="http://pypi.python.org/">http://pypi.python.org</a> 网站注册</p>
<p>安装第三方库用 pip 一个个安装费时费力，还需要考虑兼容性，推荐直接使用 Anaconda，内置了许多常用的第三方库，装上 Anaconda 就相当于把数十个第三方模块自动安装好了</p>
<p>Anaconda 安装的第三方模块会安装在 Anaconda 自己的路径下，不影响系统已安装的Python目录</p>
<ul>
<li>模块搜索路径</li>
</ul>
<p>加载一个模块时，Python 会在指定的路径下搜索对应的 .py 文件，如果找不到就会报错</p>
<p>Python解释器会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径存放在<code>sys</code>模块的<code>path</code>变量中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path</span><br><span class="line"><span class="comment">#[&#x27;&#x27;, &#x27;/Library/Frameworks/Python.framework/Versions/3.6/lib/python36.zip&#x27;, &#x27;/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6&#x27;, ..., &#x27;/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages&#x27;]</span></span><br></pre></td></tr></table></figure>

<h5 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h5><ul>
<li>简单使用 </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(kevek=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s-%(levelname)s: %(message)s&#x27;</span>)</span><br><span class="line">...</span><br><span class="line">logging.info(<span class="string">&#x27;scraping %s&#x27;</span>, URL)</span><br><span class="line">logging.info(<span class="string">&#x27;total time %s seconds&#x27;</span>, end_time - start_time)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">filename 保存日志文件</span></span><br><span class="line"><span class="string">filemode &#x27;w&#x27;打开新文件覆盖 默认&#x27;a&#x27;追加输入</span></span><br><span class="line"><span class="string">level 默认INFO</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">logging.basicConfig(filename=<span class="string">&#x27;xxx.log&#x27;</span>, filemode=<span class="string">&#x27;w&#x27;</span>, level=logging.INFO)</span><br><span class="line">logging.warning(<span class="string">&#x27;warning&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;error&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>创建 Logger 记录器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger &#x3D; logging.getLogger()</span><br></pre></td></tr></table></figure>

<p>设置日志级别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger.setLevel(logging.INFO)</span><br></pre></td></tr></table></figure>

<ul>
<li>Handler 处理器</li>
</ul>
<p>常用三种 StreamHandler、FileHandler、NullHandler</p>
<p>创建 StreamHandler 之后，可以设置日志级别，设置格式化器 Formatter，增加或删除过滤器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">console_handler = logging.StreamHandler()</span><br><span class="line"><span class="comment"># 指定日志级别 低于WARN级别日志将被忽略</span></span><br><span class="line">console_handler.setLevel(logging.WARN)</span><br><span class="line"><span class="comment"># 设置一个格式化器 formatter</span></span><br><span class="line">console_handler.setFormatter(formatter_name)</span><br><span class="line"><span class="comment"># 增加过滤器</span></span><br><span class="line">console_handler.addFilter(filter_name)</span><br><span class="line"><span class="comment"># 删除过滤器</span></span><br><span class="line">console_handler.removeFilter(filter_name)</span><br></pre></td></tr></table></figure>



<p>jd_logger.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">日志模块</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">LOG_FILENAME = <span class="string">&#x27;../jd_seckill.log&#x27;</span></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_logger</span>():</span></span><br><span class="line">    logger.setLevel(logging.INFO)</span><br><span class="line">    formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(process)d-%(threadName)s - &#x27;</span></span><br><span class="line">                                  <span class="string">&#x27;%(pathname)s[line:%(lineno)d] - %(levelname)s: %(message)s&#x27;</span>)</span><br><span class="line">    console_handler = logging.StreamHandler()</span><br><span class="line">    console_handler.setFormatter(formatter)</span><br><span class="line">    logger.addHandler(console_handler)</span><br><span class="line">    </span><br><span class="line">    file_handler = logging.handlers.RotatingFileHandler(</span><br><span class="line">        LOG_FILENAME, maxBytes=<span class="number">10485760</span>, backupCount=<span class="number">5</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    file_handler.setFormatter(formatter)</span><br><span class="line">    logger.addHandler(file_handler)</span><br><span class="line">set_logger()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LOG_FILENAME = <span class="string">&#x27;../jd_seckill.log&#x27;</span></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(funcName)s - line:[%(lineno)d] - %(levelname)s:%(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line">consoleHandler = logging.StreamHandler()</span><br><span class="line">consoleHandler.setFormatter(formatter)</span><br><span class="line">consoleHandler.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">fileHandler = logging.FileHandler(LOG_FILENAME, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">fileHandler.setFormatter(formatter)</span><br><span class="line">fileHandler.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">logger.addHandler(consoleHandler)</span><br><span class="line">logger.addHandler(fileHandler)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%(levelno)s 打印日志级别的数值 </span><br><span class="line">%(levelname)s 打印日志级别名称</span><br><span class="line">%(pathname)s 打印当前执行程序的路径 </span><br><span class="line">%(filename)s 打印当前执行程序名称</span><br><span class="line">%(funcName)s 打印日志的当前函数 </span><br><span class="line">%(lineno)d 打印日志的当前行号 </span><br><span class="line">%(asctime)s 打印日志的时间 </span><br><span class="line">%(thread)d 打印线程<span class="built_in">id</span> </span><br><span class="line">%(threadName)s 打印线程名称</span><br><span class="line">%(process)d 打印进程ID</span><br><span class="line">%(message)s 打印日志信息</span><br></pre></td></tr></table></figure>



<h5 id="configparser"><a href="#configparser" class="headerlink" title="configparser"></a>configparser</h5><h5 id="time"><a href="#time" class="headerlink" title="time"></a>time</h5><ul>
<li>时间戳 </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">ticks = time.time()</span><br><span class="line">print(ticks) <span class="comment">#1650849507.429631</span></span><br></pre></td></tr></table></figure>

<p>很多Python函数用一个元组装起来的9组数字处理时间 struct_time </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tm_year   <span class="comment">#4位数年 2022</span></span><br><span class="line">tm_mon    <span class="comment">#月 1到12</span></span><br><span class="line">tm_mday		<span class="comment">#日 1到31</span></span><br><span class="line">tm_hour   <span class="comment">#小时 0到23</span></span><br><span class="line">tm_min		<span class="comment">#分钟 0到59</span></span><br><span class="line">tm_sec		<span class="comment">#秒数 0到61 (60或61 是闰秒)</span></span><br><span class="line">tm_wday		<span class="comment">#一周的第几天 0到6（0是周一）</span></span><br><span class="line">tm_yday		<span class="comment">#一年的第几天 1到366</span></span><br><span class="line">tm_isdst  <span class="comment">#是否为夏令时 1夏令时 0不是 -1未知 默认-1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>localtime </li>
</ul>
<p>接收时间戳，返回当地时间下的事件元组，时间戳获取时间元组 struct_time</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">localtime = time.localtime(time.time())</span><br><span class="line">print(localtime)</span><br><span class="line">print(time.localtime()) <span class="comment">#结果一样</span></span><br><span class="line"><span class="comment">#time.struct_time(tm_year=2022, tm_mon=4, tm_mday=25, tm_hour=9, tm_min=27, tm_sec=34, tm_wday=0, tm_yday=115, tm_isdst=0)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>asctime </li>
</ul>
<p>接受时间元组，返回格式化 <code>Mon Apr 25 09:29:59 2022</code> 形式的24个字符字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">localtime = time.asctime(time.localtime())</span><br><span class="line">print(localtime) </span><br><span class="line"><span class="comment">#Mon Apr 25 09:29:59 2022</span></span><br></pre></td></tr></table></figure>

<ul>
<li>strftime 格式化日期</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime()))</span><br><span class="line"><span class="comment">#2022-04-25 09:34:11</span></span><br><span class="line">print(time.strftime(<span class="string">&#x27;%a %b %d %H:%M:%S %Y&#x27;</span>, time.localtime()))</span><br><span class="line"><span class="comment">#Mon Apr 25 09:35:53 2022</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#格式化时间转为 struct_time</span></span><br><span class="line">timeStr = time.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>, time.localtime()) <span class="comment">#2022-05-23</span></span><br><span class="line">struct_time = time.strptime(timeStr, <span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="comment">#time.struct_time(tm_year=2022, tm_mon=5, tm_mday=23, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=143, tm_isdst=-1)</span></span><br><span class="line">print(time.mktime(struct_time)*<span class="number">1000</span>) <span class="comment">#1653235200000</span></span><br></pre></td></tr></table></figure>

<p>输出日历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(calendar.month(<span class="number">2022</span>, <span class="number">4</span>))</span><br><span class="line">     April <span class="number">2022</span></span><br><span class="line">Mo Tu We Th Fr Sa Su</span><br><span class="line">             <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line"> <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span></span><br><span class="line"><span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span></span><br><span class="line"><span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span></span><br></pre></td></tr></table></figure>

<ul>
<li>sleep 推迟调用线程的运行</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>





















<h4 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h4><h5 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h5><p>(object) 表示从哪个类继承下来的</p>
<p>第一个参数固定self 表示创建实例本身</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span> </span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, score</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">print_score</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s: %s&#x27;</span> % (self.name, self.score))</span><br></pre></td></tr></table></figure>

<p>有了init方法 创建实例的时候就不能传空参数了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bart = Student(<span class="string">&#x27;Bart&#x27;</span>, <span class="number">59</span>)</span><br></pre></td></tr></table></figure>

<h5 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h5><p>如果要让内部属性不被外部访问，名称前加两个下划线 <code>__</code>，就变成私有变量，这样外部就不能访问了，如果要外部访问可以增加 get 方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, score</span>):</span></span><br><span class="line">      self.__name = name</span><br><span class="line">      self.__score = score</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">print_score</span>(<span class="params">self</span>):</span></span><br><span class="line">      print(<span class="string">&#x27;%s: %s&#x27;</span> % (self.__name, self.__score))</span><br></pre></td></tr></table></figure>

<p>添加 get set 方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.__name</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_score</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.__score</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_score</span>(<span class="params">self, score</span>):</span></span><br><span class="line">    self.__score = score</span><br></pre></td></tr></table></figure>

<ul>
<li>对象信息</li>
</ul>
<p>type()  判断对象类型、isinstance() 判断class 类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="number">123</span>) <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>判断对象是否函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>():</span></span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"><span class="built_in">type</span>(fn)==types.FunctionType <span class="comment">#True</span></span><br></pre></td></tr></table></figure>

<p>获取对象所有属性和方法 dir()， 返回包含字符串的 list</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span>(<span class="string">&#x27;ABC&#x27;</span>)</span><br><span class="line"><span class="comment">#[&#x27;__add__&#x27;, &#x27;__class__&#x27;,..., &#x27;__subclasshook__&#x27;, &#x27;capitalize&#x27;, &#x27;casefold&#x27;,..., &#x27;zfill&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>配合<code>getattr()</code>、<code>setattr()</code>以及<code>hasattr()</code>，我们可以直接操作一个对象的状态</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">obj = MyObject()</span><br><span class="line"><span class="built_in">hasattr</span>(obj, <span class="string">&#x27;x&#x27;</span>) <span class="comment"># 有属性&#x27;x&#x27;吗？</span></span><br><span class="line"><span class="built_in">setattr</span>(obj, <span class="string">&#x27;y&#x27;</span>, <span class="number">19</span>) <span class="comment"># 设置一个属性&#x27;y&#x27;</span></span><br><span class="line"><span class="built_in">getattr</span>(obj, <span class="string">&#x27;y&#x27;</span>) <span class="comment"># 获取属性&#x27;y&#x27;</span></span><br><span class="line">obj.y <span class="comment"># 获取属性&#x27;y&#x27;</span></span><br><span class="line"><span class="built_in">getattr</span>(obj, <span class="string">&#x27;z&#x27;</span>, <span class="number">404</span>) <span class="comment"># 获取属性&#x27;z&#x27;，如果不存在，返回默认值404</span></span><br></pre></td></tr></table></figure>





<ul>
<li>实例属性和类属性</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    name = <span class="string">&#x27;Student&#x27;</span> <span class="comment"># 类属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">      self.name = name <span class="comment">#实例属性</span></span><br></pre></td></tr></table></figure>

<h4 id="面向对象高级编程"><a href="#面向对象高级编程" class="headerlink" title="面向对象高级编程"></a>面向对象高级编程</h4><h5 id="slots"><a href="#slots" class="headerlink" title="slots"></a><strong>slots</strong></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = Student()</span><br><span class="line">s.name = <span class="string">&#x27;Michael&#x27;</span> <span class="comment">#动态给实例绑定属性</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_age</span>(<span class="params">self, age</span>):</span></span><br><span class="line">  self.age = age</span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</span><br><span class="line">s.set_age = MethodType(set_age, s) <span class="comment">#给实例绑定一个方法</span></span><br><span class="line">s.set_age(<span class="number">25</span>) <span class="comment">#调用实例方法</span></span><br></pre></td></tr></table></figure>

<p>但是给一个实例绑定的方法，对另一个实例不起作用</p>
<p>Python允许在定义class的时候，定义一个特殊的<code>__slots__</code>变量，来限制该class实例能添加的属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>) <span class="comment"># 用tuple定义允许绑定的属性名称</span></span><br></pre></td></tr></table></figure>

<p>使用<code>__slots__</code>要注意，<code>__slots__</code>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的</p>
<h5 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h5><h5 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h5><h5 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h5><h5 id="使用枚举"><a href="#使用枚举" class="headerlink" title="使用枚举"></a>使用枚举</h5><p>使用元类</p>
<h4 id="错误、调试和测试"><a href="#错误、调试和测试" class="headerlink" title="错误、调试和测试"></a>错误、调试和测试</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">&#x27;try...&#x27;</span>)</span><br><span class="line">    r = <span class="number">10</span> / <span class="built_in">int</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;result:&#x27;</span>, r)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;ValueError:&#x27;</span>, e)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;ZeroDivisionError:&#x27;</span>, e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">&#x27;finally...&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;END&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>Python 所有的错误都是从 BaseException 类派生的</p>
<p>常见的错误类型和继承关系 <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy">https://docs.python.org/3/library/exceptions.html#exception-hierarchy</a></p>
<ul>
<li>记录错误</li>
</ul>
<p>内置的 logging 模块可以非常容易的记录错误，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># err_logging.py</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">def foo(s):</span><br><span class="line">    return 10 &#x2F; int(s)</span><br><span class="line">def bar(s):</span><br><span class="line">    return foo(s) * 2</span><br><span class="line">def main():</span><br><span class="line">    try:</span><br><span class="line">        bar(&#39;0&#39;)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        logging.exception(e)</span><br><span class="line">main()</span><br><span class="line">print(&#39;END&#39;)</span><br></pre></td></tr></table></figure>

<p>通过配置 loging 还可以把错误记录到日志文件里</p>
<p>抛出错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># err_raise.py</span><br><span class="line">class FooError(ValueError):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def foo(s):</span><br><span class="line">    n &#x3D; int(s)</span><br><span class="line">    if n&#x3D;&#x3D;0:</span><br><span class="line">        raise FooError(&#39;invalid value: %s&#39; % s)</span><br><span class="line">    return 10 &#x2F; n</span><br><span class="line"></span><br><span class="line">foo(&#39;0&#39;)</span><br></pre></td></tr></table></figure>











<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4>]]></content>
  </entry>
  <entry>
    <title>Runtime底层原理</title>
    <url>/2020/12/01/Runtime%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h4 id="通过SEL找到IMP"><a href="#通过SEL找到IMP" class="headerlink" title="通过SEL找到IMP"></a>通过SEL找到IMP</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL class_respondsToSelector(Class cls, SEL sel)</span><br><span class="line">&#123;</span><br><span class="line">    return class_respondsToSelector_inst(cls, sel, nil);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><a href="https://opensource.apple.com/tarballs/objc4/">苹果源码下载地址</a></p>
]]></content>
  </entry>
  <entry>
    <title>RxSwift（一）</title>
    <url>/2021/09/03/RxSwift%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h4 id="1-Observable"><a href="#1-Observable" class="headerlink" title="1 Observable"></a>1 Observable</h4><p><code>Observable&lt;T&gt;</code> 可观察序列 可以异步地产生一系列的Event(事件)</p>
<p>这些Event还可以携带数据</p>
<p>还需要有一个 Observer(订阅者)来订阅它，这样这个订阅者才能接收 <code>Observable&lt;T&gt;</code> 发出的Event</p>
<h5 id="1-1-创建Observable序列"><a href="#1-1-创建Observable序列" class="headerlink" title="1.1 创建Observable序列"></a>1.1 创建Observable序列</h5><ol>
<li>just() 方法</li>
</ol>
<p>传入一个默认值初始化，下面指定了这个Observable所发出的事件携带的数据类型必须是Int类型的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable&lt;Int&gt;.just(5)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>of() 方法</li>
</ol>
<p>接收可变数量的参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>from() 方法</li>
</ol>
<p>接收数组参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable.from([&quot;A&quot;, &quot;B&quot;])</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>empty()方法</li>
</ol>
<p>创建一个空内容的Observable序列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable&lt;Int&gt;.empty()</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>never()方法</li>
</ol>
<p>创建永远不会发出Event的Observable</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable&lt;Int&gt;.never()</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>error()方法</li>
</ol>
<p>不做任何操作，只发送error的Observable</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum MyError: Error &#123;</span><br><span class="line">   case A</span><br><span class="line">   case B</span><br><span class="line">&#125;</span><br><span class="line">let observable &#x3D; Observable&lt;Int&gt;.error(MyError.A)</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>range()方法</li>
</ol>
<p>指定起始值和结束值，创建范围内所有值作为初始值的 Observable 序列，下面两种方法创建的 Observable 序列都是一样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;使用range()</span><br><span class="line">let observable &#x3D; Observable.range(start: 1, count: 5)</span><br><span class="line">&#x2F;&#x2F;使用of()</span><br><span class="line">let observable &#x3D; Observable.of(1, 2, 3 ,4 ,5)</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>repeatElement()方法</li>
</ol>
<p>创建可以无限发送给定元素的Event的Observable序列，永不终止</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable.repeatElement(1)</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>generate()方法</li>
</ol>
<p>只有当提供的所有判断条件为true的时候才会给出动作的Observable序列，下面两种方法创建的 Observable 序列都是一样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable.generate(</span><br><span class="line">    initialState: 0,</span><br><span class="line">    condition: &#123; $0 &lt;&#x3D; 10 &#125;,</span><br><span class="line">    iterate: &#123; $0 + 2&#125;</span><br><span class="line">)</span><br><span class="line">let observable &#x3D; Observable.of(0 , 2 ,4 ,6 ,8 ,10)</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>creat()方法</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable&lt;String&gt;.create &#123; observer in</span><br><span class="line">    observer.onNext(&quot;hangge.com&quot;)</span><br><span class="line">    observer.onCompleted()</span><br><span class="line">    return Disposables.create()</span><br><span class="line">&#125;</span><br><span class="line">observable.subscribe(&#123;</span><br><span class="line">    print($0)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="11">
<li>defferred()方法</li>
</ol>
<p>相当于创建一个Observable工厂，传入一个block来延迟执行Observable序列创建行为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var isOdd &#x3D; true</span><br><span class="line">&#x2F;&#x2F;使用 deferred 方法延迟 Observable 序列的初始化</span><br><span class="line">let factory: Observable&lt;Int&gt; &#x3D; Observable.deferred &#123;</span><br><span class="line">    isOdd &#x3D; !isOdd</span><br><span class="line">    &#x2F;&#x2F;根据isOdd参数，决定创建并返回的是奇数Observable、还是偶数Observable</span><br><span class="line">    if isOdd &#123;</span><br><span class="line">        return Observable.of(1, 3, 5, 7)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return Observable.of(2, 4, 6, 8)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;第1次订阅测试</span><br><span class="line">factory.subscribe(&#123; event in</span><br><span class="line">    print(&quot;\(isOdd)&quot;, event)</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;第2次订阅测试</span><br><span class="line">factory.subscribe(&#123; event in</span><br><span class="line">    print(&quot;\(isOdd)&quot;, event)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="12">
<li>interval()方法</li>
</ol>
<p>每隔一段特定时间，发出索引数的元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable&lt;Int&gt;.interval(RxTimeInterval.seconds(1), scheduler: MainScheduler.instance)</span><br><span class="line">  </span><br><span class="line">observable.subscribe &#123; event in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="13">
<li>timer()</li>
</ol>
<p>两种用法，一种是创建的 Observable 序列经过设定时间后，产生唯一元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable&lt;Int&gt;.timer(RxTimeInterval.seconds(5), scheduler: MainScheduler.instance)</span><br><span class="line">observable.subscribe &#123; event in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">next(0)</span><br><span class="line">completed</span><br></pre></td></tr></table></figure>

<p>另一种是创建的 Observable 序列在经过设定时间后，每隔一段时间产生一个元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;5秒后，每隔1秒发出一个元素</span><br><span class="line">let observable &#x3D; Observable&lt;Int&gt;.timer(RxTimeInterval.seconds(5), period: RxTimeInterval.seconds(1), scheduler: MainScheduler.instance)</span><br><span class="line">observable.subscribe &#123; event in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-订阅-Observable"><a href="#1-2-订阅-Observable" class="headerlink" title="1.2 订阅 Observable"></a>1.2 订阅 Observable</h5><p>有了Observable，还要使用subscribe()来订阅它，接收它发出的Event</p>
<ul>
<li>第一种</li>
</ul>
<p>使用 subscribe() 订阅 Observable 对象，数据发送完毕后自动发一个 .completed 时间出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">observable.subscribe &#123; event in</span><br><span class="line">  	&#x2F;&#x2F;想要获取event数据，可以通过event.element</span><br><span class="line">  	print(event)</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">next(A)</span><br><span class="line">next(B)</span><br><span class="line">next(C)</span><br><span class="line">completed</span><br></pre></td></tr></table></figure>

<ul>
<li>第二种</li>
</ul>
<p>对event进行分类，通过不同block处理不同event，会把event的数据直接解包出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">observable.subscribe &#123; element in</span><br><span class="line">    print(element)</span><br><span class="line">&#125; onError: &#123; error in</span><br><span class="line">    print(error)</span><br><span class="line">&#125; onCompleted: &#123;</span><br><span class="line">    print(&quot;completed&quot;)</span><br><span class="line">&#125; onDisposed: &#123;</span><br><span class="line">    print(&quot;disposed&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-3-监听事件生命周期"><a href="#1-3-监听事件生命周期" class="headerlink" title="1.3 监听事件生命周期"></a>1.3 监听事件生命周期</h5><p>doOn方法监听事件生命周期，会在事件发送前被调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">observable.do(onNext: &#123; (element) in</span><br><span class="line">    print(element)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="1-4-Observable-销毁"><a href="#1-4-Observable-销毁" class="headerlink" title="1.4 Observable 销毁"></a>1.4 Observable 销毁</h5><ol>
<li>通过dispose()取消订阅</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subscription &#x3D; observable.subscribe &#123; (event) in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;</span><br><span class="line">subscription.dispose()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>DisposeBag</li>
</ol>
<p>DisposeBag会在自己快要dealloc的时候，对里面所有订阅行为都调用dispose()方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">let disposeBag &#x3D; DisposeBag()</span><br><span class="line">observable.subscribe &#123; (event) in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h4 id="2-观察者"><a href="#2-观察者" class="headerlink" title="2 观察者"></a>2 观察者</h4><p>观察者（Observer）作用就是监听事件，对事件作出响应，或者说任何响应事件的行为都是观察者</p>
<h5 id="2-1-subscribe、bind方法中创建观察者"><a href="#2-1-subscribe、bind方法中创建观察者" class="headerlink" title="2.1 subscribe、bind方法中创建观察者"></a>2.1 subscribe、bind方法中创建观察者</h5><p>最直接的方法就是在subscribe方法后描述事件发生时，需要如何作出响应</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">observable.subscribe(onNext: &#123; element in</span><br><span class="line">    print(element)</span><br><span class="line">&#125;, onError: &#123; error in</span><br><span class="line">    print(error)</span><br><span class="line">&#125;, onCompleted: &#123;</span><br><span class="line">    print(&quot;completed&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>bind</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observable &#x3D; Observable&lt;Int&gt;.interval(RxTimeInterval.seconds(1),</span><br><span class="line">                                          scheduler: MainScheduler.instance)</span><br><span class="line">observable</span><br><span class="line">    .map &#123; &quot;当前索引数:\($0)&quot; &#125;</span><br><span class="line">    .bind &#123; [weak self] (text) in</span><br><span class="line">        self?.label.text &#x3D; text</span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="2-2-使用-AnyObserver-创建观察者"><a href="#2-2-使用-AnyObserver-创建观察者" class="headerlink" title="2.2 使用 AnyObserver 创建观察者"></a>2.2 使用 AnyObserver 创建观察者</h5><p>配合 subscribe 使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observer: AnyObserver&lt;String&gt; &#x3D; AnyObserver &#123; event in</span><br><span class="line">    switch event &#123;</span><br><span class="line">    case .next(let data):</span><br><span class="line">        print(data)</span><br><span class="line">    case .error(let error):</span><br><span class="line">        print(error)</span><br><span class="line">    case .completed:</span><br><span class="line">        print(&quot;complete&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let observable &#x3D; Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">observable.subscribe(observer)</span><br></pre></td></tr></table></figure>

<p>配合 bindTo 使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observer: AnyObserver&lt;String&gt; &#x3D; AnyObserver &#123;[weak self] event in</span><br><span class="line">    switch event &#123;</span><br><span class="line">    case .next(let text):</span><br><span class="line">        self?.label.text &#x3D; text</span><br><span class="line">    default:</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let observable &#x3D; Observable&lt;Int&gt;.interval(RxTimeInterval.seconds(1),</span><br><span class="line">                                          scheduler: MainScheduler.instance)</span><br><span class="line">observable</span><br><span class="line">    .map &#123; &quot;当前索引数:\($0)&quot; &#125;</span><br><span class="line">    .bind(to: observer)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="2-3-使用-Binder-创建观察者"><a href="#2-3-使用-Binder-创建观察者" class="headerlink" title="2.3 使用 Binder 创建观察者"></a>2.3 使用 Binder 创建观察者</h5><p>Binder不会处理错误事件<br>确保绑定都是在给定的Schedule上执行，默认MainSchedule</p>
<p>上面示例中，label 文字显示就是一个典型的观察者，它在响应事件时，只会处理 next 事件，且更新 UI 的操作需要在主线程上执行，更好的方案是使用 Binder</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let observer: Binder&lt;String&gt; &#x3D; Binder(label) &#123; view, text in</span><br><span class="line">	  view.text &#x3D; text</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">observable</span><br><span class="line">    .map &#123; &quot;当前索引数：\($0 )&quot;&#125;</span><br><span class="line">    .bind(to: observer)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<ul>
<li>Binder 在 RxCocoa 中的应用</li>
</ul>
<p>RxCocoa 对许多 UI 控件进行扩展，利用 Binder 将控件属性变成观察者</p>
<h5 id="2-4-自定义可绑定属性"><a href="#2-4-自定义可绑定属性" class="headerlink" title="2.4 自定义可绑定属性"></a>2.4 自定义可绑定属性</h5><p>方法一： 通过对 UI 类进行扩展</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension UILabel &#123;</span><br><span class="line">    public var fontSize: Binder&lt;CGFloat&gt; &#123;</span><br><span class="line">        return Binder(self) &#123; label, fontSize in</span><br><span class="line">            label.font &#x3D; UIFont.systemFont(ofSize: fontSize)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：通过对 Reactive 类进行扩展</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension Reactive where Base: UILabel &#123;</span><br><span class="line">    public var fontSize: Binder&lt;CGFloat&gt; &#123;</span><br><span class="line">        return Binder(self.base) &#123; label, fontSize in</span><br><span class="line">            label.font &#x3D; UIFont.systemFont(ofSize: fontSize)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-Subject"><a href="#3-Subject" class="headerlink" title="3 Subject"></a>3 Subject</h4><p>创建Observable的时候要预先把将要发出的数据都准备好，等到有人订阅时再将数据通过Event发送出去<br>但有时希望Observable动态的获得或者产生新数据，再通过Event发送出去-这些使用Subject来实现</p>
<p>Subject既是订阅者，也是Observable<br>订阅者：因为它能动态接收新值<br>又是一个Observable：因为当Subjects有了新值后，就会通过Event将新值发送给所有订阅者</p>
<h5 id="3-1-PublishSubject"><a href="#3-1-PublishSubject" class="headerlink" title="3.1 PublishSubject"></a>3.1 PublishSubject</h5><p>不需要初始值就能创建<br>PublishSubject的订阅者，可以收到订阅后Subject发出的新的Event，不会收到订阅前发出的Event</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;没有任何订阅者 这条不会输出</span><br><span class="line">subject.onNext(&quot;11&quot;)</span><br><span class="line"></span><br><span class="line">subject.subscribe(onNext: &#123; string in</span><br><span class="line">    print(&quot;第一次订阅：&quot;, string)</span><br><span class="line">&#125;, onCompleted: &#123;</span><br><span class="line">    print(&quot;第一次订阅：completed&quot;)</span><br><span class="line">&#125;).disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;有订阅会输出</span><br><span class="line">subject.onNext(&quot;22&quot;)</span><br><span class="line"></span><br><span class="line">subject.subscribe(onNext: &#123; string in</span><br><span class="line">    print(&quot;第二次订阅：&quot;, string)</span><br><span class="line">&#125;, onCompleted: &#123;</span><br><span class="line">    print(&quot;第二次订阅：completed&quot;)</span><br><span class="line">&#125;).disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;有订阅会输出</span><br><span class="line">subject.onNext(&quot;33&quot;)</span><br><span class="line">subject.onCompleted()</span><br><span class="line">subject.onNext(&quot;44&quot;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;完成后所有订阅(包括结束后订阅) 都能收到 complete 事件</span><br><span class="line">subject.subscribe(onNext: &#123; string in</span><br><span class="line">    print(&quot;第三次订阅：&quot;, string)</span><br><span class="line">&#125;, onCompleted: &#123;</span><br><span class="line">    print(&quot;第三次订阅：completed&quot;)</span><br><span class="line">&#125;).disposed(by: disposeBag)</span><br><span class="line">  </span><br><span class="line">结果</span><br><span class="line">第一次订阅： 22</span><br><span class="line">第一次订阅： 33</span><br><span class="line">第二次订阅： 33</span><br><span class="line">第一次订阅：completed</span><br><span class="line">第二次订阅：completed</span><br><span class="line">第三次订阅：completed</span><br></pre></td></tr></table></figure>

<h5 id="3-2-BehaviorSubject"><a href="#3-2-BehaviorSubject" class="headerlink" title="3.2 BehaviorSubject"></a>3.2 BehaviorSubject</h5><p>BehaviorSubject需要通过初始值创建<br>订阅者订阅它的时候，立即收到BehaviorSubject发出的Event，之后正常一样收到之后发出的新的Event</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject &#x3D; BehaviorSubject(value: &quot;111&quot;)</span><br><span class="line"></span><br><span class="line">subject.subscribe(onNext: &#123; string in</span><br><span class="line">    print(&quot;第1次订阅：&quot;, string)</span><br><span class="line">&#125;).disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject.onNext(&quot;222&quot;)</span><br><span class="line">&#x2F;&#x2F;发送error</span><br><span class="line">subject.onError(NSError(domain: &quot;local&quot;, code: 0, userInfo: nil))</span><br><span class="line"></span><br><span class="line">subject.subscribe(onNext: &#123; string in</span><br><span class="line">    print(&quot;第2次订阅：&quot;, string)</span><br><span class="line">&#125;).disposed(by: disposeBag)</span><br><span class="line">  </span><br><span class="line">输出</span><br><span class="line">第1次订阅： 111</span><br><span class="line">第1次订阅： 222</span><br><span class="line">Unhandled error happened: Error Domain&#x3D;local Code&#x3D;0 &quot;(null)&quot;</span><br><span class="line">Unhandled error happened: Error Domain&#x3D;local Code&#x3D;0 &quot;(null)&quot;</span><br></pre></td></tr></table></figure>

<h5 id="3-3-ReplaySubject"><a href="#3-3-ReplaySubject" class="headerlink" title="3.3 ReplaySubject"></a>3.3 ReplaySubject</h5><p>创建时需要设置一个bufferSize，表示对发送过的Event的缓存个数</p>
<p>如bufferSize设置为2，发出3个.next的Event，那么后面两个会缓存起来，如果一个Subject订阅了这个 ReplaySubject，那立即会收到缓存的两个.next的Event</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject &#x3D; ReplaySubject&lt;String&gt;.create(bufferSize: 2)</span><br><span class="line">        </span><br><span class="line">subject.onNext(&quot;111&quot;)</span><br><span class="line">subject.onNext(&quot;222&quot;)</span><br><span class="line">subject.onNext(&quot;333&quot;)</span><br><span class="line"></span><br><span class="line">subject.subscribe &#123; event in</span><br><span class="line">    print(&quot;第1次订阅：&quot;, event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject.onNext(&quot;444&quot;)</span><br><span class="line"></span><br><span class="line">subject.subscribe &#123; event in</span><br><span class="line">    print(&quot;第2次订阅：&quot;, event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject.onCompleted()</span><br><span class="line"></span><br><span class="line">subject.subscribe &#123; event in</span><br><span class="line">    print(&quot;第3次订阅：&quot;, event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line">  </span><br><span class="line">结果：</span><br><span class="line">第1次订阅： next(222)</span><br><span class="line">第1次订阅： next(333)</span><br><span class="line">第1次订阅： next(444)</span><br><span class="line">第2次订阅： next(333)</span><br><span class="line">第2次订阅： next(444)</span><br><span class="line">第1次订阅： completed</span><br><span class="line">第2次订阅： completed</span><br><span class="line">第3次订阅： next(333)</span><br><span class="line">第3次订阅： next(444)</span><br><span class="line">第3次订阅： completed</span><br></pre></td></tr></table></figure>

<h5 id="3-4-BehaviorRelay"><a href="#3-4-BehaviorRelay" class="headerlink" title="3.4 BehaviorRelay"></a>3.4 BehaviorRelay</h5><p>BehaviorRelay 有一个 value 属性，我们通过这个属性可以获取最新值。而通过它的 accept() 方法可以对值进行修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject &#x3D; BehaviorRelay&lt;String&gt;(value: &quot;111&quot;)</span><br><span class="line">&#x2F;&#x2F;修改value值</span><br><span class="line">subject.accept(&quot;222&quot;)</span><br><span class="line">subject.subscribe &#123;</span><br><span class="line">    print(&quot;第1次订阅：&quot;, $0)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line">subject.accept(&quot;333&quot;)</span><br><span class="line">subject.subscribe &#123;</span><br><span class="line">    print(&quot;第2次订阅：&quot;, $0)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line">subject.accept(&quot;444&quot;)</span><br><span class="line">  </span><br><span class="line">结果：</span><br><span class="line">第1次订阅： next(222)</span><br><span class="line">第1次订阅： next(333)</span><br><span class="line">第2次订阅： next(333)</span><br><span class="line">第1次订阅： next(444)</span><br><span class="line">第2次订阅： next(444)</span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
  </entry>
  <entry>
    <title>RxSwift（四）</title>
    <url>/2021/09/09/RxSwift%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h4 id="1-URLSession"><a href="#1-URLSession" class="headerlink" title="1 URLSession"></a>1 URLSession</h4><h5 id="1-1-rx-response-请求数据"><a href="#1-1-rx-response-请求数据" class="headerlink" title="1.1 rx.response 请求数据"></a>1.1 rx.response 请求数据</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let urlString &#x3D; &quot;https:&#x2F;&#x2F;www.douban.com&#x2F;j&#x2F;app&#x2F;radio&#x2F;channels&quot;</span><br><span class="line">let url &#x3D; URL(string: urlString)!</span><br><span class="line">let request &#x3D; URLRequest(url: url)</span><br><span class="line">URLSession.shared.rx.response(request: request)</span><br><span class="line">    .subscribe(onNext: &#123; (response, data) in</span><br><span class="line">        if 200 ..&lt; 300 ~&#x3D; response.statusCode &#123;</span><br><span class="line">            let str &#x3D; String(data: data, encoding: String.Encoding.utf8)</span><br><span class="line">            print(&quot;返回数据：\(str ?? &quot;&quot;)&quot;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            print(&quot;请求失败&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="1-2-rx-data"><a href="#1-2-rx-data" class="headerlink" title="1.2 rx.data"></a>1.2 rx.data</h5><p>如果不需要获取底层 response，只需知道是否请求成功，以及返回结果，建议使用 rx.data</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">URLSession.shared.rx.data(request: request)</span><br><span class="line">    .subscribe(onNext: &#123; data in</span><br><span class="line">        print(&quot;请求成功&quot;)</span><br><span class="line">    &#125;, onError: &#123; error in</span><br><span class="line">        print(&quot;请求失败：&quot;, error)</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<p>将结果转换为JSON</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">URLSession.shared.rx.data(request: request)</span><br><span class="line">    .map &#123;</span><br><span class="line">        try JSONSerialization.jsonObject(with: $0, options: .allowFragments) as! [String: Any]</span><br><span class="line">    &#125;</span><br><span class="line">    .subscribe(onNext: &#123; data in</span><br><span class="line">        print(&quot;请求成功&quot;)</span><br><span class="line">    &#125;, onError: &#123; error in</span><br><span class="line">        print(&quot;请求失败：&quot;, error)</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="1-3-手动发起-取消请求"><a href="#1-3-手动发起-取消请求" class="headerlink" title="1.3 手动发起/取消请求"></a>1.3 手动发起/取消请求</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">startButton.rx.tap</span><br><span class="line">    .flatMap &#123;</span><br><span class="line">        URLSession.shared.rx.data(request: request)</span><br><span class="line">            .takeUntil(self.cancelButton.rx.tap)</span><br><span class="line">    &#125;</span><br><span class="line">    .subscribe(onNext: &#123; data in</span><br><span class="line">    &#125;, onError: &#123;error in</span><br><span class="line">        print(&quot;请求失败：&quot;, error)</span><br><span class="line">    &#125;).disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="1-4-转JSON"><a href="#1-4-转JSON" class="headerlink" title="1.4 转JSON"></a>1.4 转JSON</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">URLSession.shared.rx.data(request: request)</span><br><span class="line">    .map &#123;</span><br><span class="line">        try JSONSerialization.jsonObject(with: $0, options: .allowFragments) as! [String: Any]</span><br><span class="line">    &#125;</span><br><span class="line">    .subscribe(onNext: &#123; data in</span><br><span class="line">        print(&quot;请求成功&quot;)</span><br><span class="line">    &#125;, onError: &#123; error in</span><br><span class="line">        print(&quot;请求失败：&quot;, error)</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<p>直接使用 rx.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">URLSession.shared.rx.json(request: request)</span><br><span class="line">    .subscribe(onNext: &#123; data in</span><br><span class="line">        let json &#x3D; data as! [String: Any]</span><br><span class="line">        print(&quot;请求成功&quot;)</span><br><span class="line">    &#125;, onError: &#123; error in</span><br><span class="line">        print(&quot;请求失败：&quot;, error)</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

































<p><a href="https://www.hangge.com/blog/cache/detail_2010.html">URLSession使用</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/11/14/hello-world/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="48e31149c438b31829246723271e19d6d0977e5f2df026e3e65f815a03a2237e">ccbf2489ed1a233f216cac1e5dda3d49363c641c556918697fb036546f666b01c7abc45d1943ee9d3408364bd5f46f8570100184557ff9fee405fe56e18b4fd58e086651cbf73064170efc9aedd861898b24a00cfcc3fee3b474b0b571c30f593250c8f7c8c24e627500f5e8c161baa4c36a516fbada282e10e2387441140a89de99961057f1486af8d17c1f891e290c2c1c5834a44d398955fca41b52fb113d52fce8c82f3f05d861bc4bac05e6bedc4f572f4aef60c81250f6758ca5c6611de62bf8a78acd96a3d3f49673040ff9a410ba932192472a21992fc57c329690bc2c930b6950232c8079bcc8ddac7252699cfb36533216ae373b44d02cb7dbb4a1bbdf2a5e938afd1e3e78bf0916f51f3b449809c5267d2fe5850bd5d31e97afbf96342e61c7f87ee5a43ab33c86fe76453bc1072ce91df88fe7bca55722dc893aaf79418c66ff77d76ac7d6699810b133b7758a0be14aef449fd343ef1376fec2a73cd20c02d407df46c6ab7fd86511af99f4916779688c557125b40cbc82d9a249aa9b9e285ae0fb9e258cabb6cce3597958eeb95ab18ec0b3c07943c054b7b28bc0f4f77ba12cb76eee3df04b6b4ff322bd34c093a1c4ab7d9db74fc47592f389f280fefcce7fd4e0fce2945368e91bbeb02eb882822c402116acb46283ed0d86be720cb21722ff1f1cb64b8756d3214951ec4c7e97d97d203d97dbef79d7fda19260dd8e107b7339d846d15442a16ed2459d3ee85104594bf30ef9aec082bc407db0dabf770cb13f65cbdba76e70922c7bef6362c59fc80949ce7d9362744c5ef31b35189aef8be5acdca2c5630d0b36c5804884fc0f5827390f969081366873895550e5ef0e82b9eb65951d778000a330e3194c8f9f8760736124680b64ae82376e8245dc6a52c348f70707047ec801acee613dc826321cf7be399c6c2efe2f3fd80523450630915846b4b1f409c6629c786e98d35f0fc7e1a816a62ee722c313c88d72c14770f86767afd07db1628b298924f7d1e6fb6a03372460f87fce293ab1b6e0c50abce375e6d257dc17edc2a955339e6d4fda9309e309b1f2b9e9d35744b8003e3945d5d1467a4b6bf791e7218e4bba0ce339c6ebfc4016ae63e6674c7be5dc978290a08f4f716affb3615ca0e7120135937acc9a0b5e398ce3bbf3db2b275da049032ea9e66e3b782e646fdbdb15914c5832bd0a25a6d0158a32e028fc89aa33fb2fc29d6f8cfb3a98eff80dbcdac046c93720fe854e9273d01aa0c4ae930aa312a87b272dc0351862bdbfc193657968cea438ace70d5ebb7ab440132f23c9807c6578b6139577b6089bf5b4a7c8cdc25fdbee69dfa8ecaeae3a7a28773f198292b0ea59234da65d8a450898ca3d913d2963c1cf324a597995654a144129bb631716b4b6d5b6d8af08ccf3ee99a36d6a0d00d2dfe87511b5e02ba24d990270cf8819a771ed282e1e762932d29fed355bb5900992107c58998647ce327deca6f8edc198581d008eef7bcc94e4422e5162140b60d115ce3c7ee1da3a8a2769d893f4f863c11bbb4c569591d9f1e86ac8ca7fba4a32182c227ad1f6861891b0d89fa4fb3630e25b844fe195228b85308437f5837a88715f2cb9061d4b8000559c6cd3e78f26b8a165765edc61e9eced4d00290061df3e6cdf03e381feafa39a22b783b5f1a5014eed3d2eb4f70fc18be3336ee03f928d26ea73ad8db238230805141c010104611b1bd269170cae8b6d493bbb2288ca13eeabd3100001e5d6e58c66704754be022a30f20ad2a09153260f2508c8f045e52b3a8520d86cf8d0eaf119c65c86c19e05117bd7c8c2b01a8fe78afb98efb0fd2f5ac5f0eeff18deb100a7645ab8f847d1d96de3bcea8223f0d3881da12b14ea767d6b15ad3d1f33eb8bf7c3dffb0f430b05470c25ea80b0933240dfe7bbfbd3767ceacec4430b8b51d7fe5c5afb271f4dd9c68c35dab8d49b6961c6255924f086a97d759c62a41111625b6c2ae4331fea540e7c5c95ba470756f6989f333a022cdcd55dbd1f05fc27cff68bc5aed07e3a2f37fd360a452ddf3555b1d2c86a8f8c6d06ed0c880b442a8aade2daf8b853f1a7447abfad5194047ac1436768deaf8b5f1265cf0bf5827fe5fdc314b6768bfcc490c7847a1de34fd40603b110af9c537d5de2d9bdfd12ed8f874e96a3d23749f72a795ffcfdcb3bf0469b756e4a1f3743014ccff1530ea0e7904e54ac5774b30fdaa4d582307ab5db6baf258a4ef88d5cf8e294a1e261967f3a27604463e1f3612a35ebd64104d0fa22f156db0b1995d7333fe3190f9c0ffb110aabec61f094c42124de30bfa166d8be884a7171ec575847b6666abe260e2bab7686ac226fc4ac854d179ddf1f48170785db3ef2fa21a17e8a9db4eaa21888fac829f404a16b097bd856e6bf1873bd7c73b75dfc413449f4c0f5639eaa8fe917ab368adf6c856f915c73065650719b2ec5fb9554b37b99057f6a9526f2b59978c1b56d3973053c71d19305c6ca2d8d730502ffc827d96b0f1c223816bdbb0018a2f4f9e5dba04a37f46f19f8a5dec321967b545d7399d0b6918c7d0fa1bf31b0e39b99c32e5533bd1e2499dae2ae1b2d959c3938fdcc3e39b4546fcc002366877219e177edfd62f7e36e35294885c03bf00b1cb0747c738c590a06c722854d814ab789a4a43662901dac610b95d092f2ce434158fb263384edbf59a3e9d2cec30ee92ab9492bab918b91af9f17ca807f71d4c5be3bcf364108e4d627cfa7ebc57651920ecc15922ef17ac102540b079fe215fd5163653f5b7b6ea6ed73f60bf967106bbc92b3c45e62e5ad90ede233f1f7587e39f508b7fb753c2f4bf27848107f2d0ca317e340e0f6c607fb8dbb9ce76aa8a4238fed6070fe07fc019d3eaa2c467e5d9c283e4ab975bf55cc61447621e30fa9b1476c028e5e68c25abdeadd97e791862cb281862cdd08488563233f8d9f0cbb47288714475f334669a8f84793164754abb59541e7d3b2595354c9f7283c4e56169190a61faeb83f93c149e8c83fd3c58cbfdaab6e304139ff97c5604fa4d714abf41c48d02b4600a4975bd758f60d689f319fdb9b5bb067800250c9b0185cc260993e3e711981</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Encrypt</category>
      </categories>
      <tags>
        <tag>Encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>objc-781编译</title>
    <url>/2020/12/04/objc-781%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">macOS 10.15.7</span><br><span class="line"></span><br><span class="line">Xcode 11.3.1</span><br><span class="line"></span><br><span class="line">objc4-781</span><br></pre></td></tr></table></figure>



<h4 id="Runtime源码下载"><a href="#Runtime源码下载" class="headerlink" title="Runtime源码下载"></a>Runtime源码下载</h4><p><a href="https://opensource.apple.com/">Apple Open Source</a> 选择最新 <code>macOS</code> 系统 <code>10.15.6</code> ，搜索 <code>objc</code> 看到最新 <code>objc4</code>文件为 <code>objc4-787.1</code>，右边可以直接下载压缩包</p>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/AppleOpenSource.jpg" alt="AppleOpenSource"></p>
<p>可以下载历史版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;opensource.apple.com&#x2F;tarballs&#x2F;objc4&#x2F;</span><br></pre></td></tr></table></figure>



<h4 id="下载依赖文件"><a href="#下载依赖文件" class="headerlink" title="下载依赖文件"></a>下载依赖文件</h4><p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/%E4%BE%9D%E8%B5%96%E6%96%87%E4%BB%B6.png" alt="依赖文件"></p>
<h4 id="Runtime源码编译"><a href="#Runtime源码编译" class="headerlink" title="Runtime源码编译"></a>Runtime源码编译</h4><p>【1】<code>unable to find sdk macosx.internal</code></p>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/macosx.jpg" alt="macosx"></p>
<p>修改 <code>Base SDK</code> 选择 <code>macOS</code></p>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/baseSDK.png" alt="baseSDK"></p>
<p>【2】<code>file not foud</code></p>
<p>【2.1】<code>sys/reason.h file not found objc-os.h</code></p>
<p>根目录创建 <code>Common</code> 文件夹，创建 <code>sys</code> 文件 ，加入文件 <code>xnu-6153141.1/bsd/sys/reason.h</code></p>
<p>设置文件检索路径，<code>Header Search Path</code> 添加 <code>$(SRCROOT)/Common</code></p>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/searchPath.png" alt="searchPath"></p>
<p>【2.2】其它 <code>file not found</code></p>
<ul>
<li>mach-o/dyld_priv.h file not found`</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dyld-750.6&#x2F;include&#x2F;mach-o&#x2F;dyld_priv.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>os/lock_private.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libplatform-220.100.1&#x2F;private&#x2F;os&#x2F;lock_private.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>os/base_private.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libplatform-220.100.1&#x2F;private&#x2F;os&#x2F;base_private.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>pthread/tsd_private.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libpthread-416.100.3&#x2F;private&#x2F;tsd_private.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>System/machine/cpu_capabilities.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xnu-6153.141.1&#x2F;osfmk&#x2F;machine&#x2F;cpu_capabilities.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>os/tsd.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xnu-6153.141.1&#x2F;libsyscall&#x2F;os&#x2F;tsd.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>pthread/spinlock_private.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libpthread-416.100.3&#x2F;private&#x2F;spinlock_private.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>System/pthread_machdep.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Libc-583&#x2F;pthreads&#x2F;pthread_machdep.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>CrashReporterClient.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Libc-997.90.3&#x2F;include&#x2F;CrashReporterClient.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>objc-shared-cache.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dyld-750.6&#x2F;include&#x2F;objc-shared-cache.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>_simple.h file not found</code> </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libplatform-220.100.1&#x2F;private&#x2F;_simple.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>kern/restartable.h file not found</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xnu-6153.141.1&#x2F;osfmk&#x2F;kern&#x2F;restartable.h</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Block_private.h file not found</code> </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libclosure-74&#x2F;Block_private.h</span><br></pre></td></tr></table></figure>



<p>【3】<code>pthread_machdep.h</code> 3处报错</p>
<p>将 193 行</p>
<p> <code>typedef int pthread_lock_t;</code></p>
<p>到 244 行</p>
<p><code>#define _pthread_setspecific_direct(key, val) pthread_setspecific(key, val)</code> 注释</p>
<p>替换为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#if TARGET_IPHONE_SIMULATOR || defined(__ppc__) || defined(__ppc64__) || \</span><br><span class="line">    (defined(__arm__) &amp;&amp; !defined(_ARM_ARCH_7) &amp;&amp; defined(_ARM_ARCH_6) &amp;&amp; defined(__thumb__))</span><br><span class="line">#define _pthread_getspecific_direct(key) pthread_getspecific((key))</span><br><span class="line">#define _pthread_setspecific_direct(key, val) pthread_setspecific((key), (val))</span><br><span class="line">#else</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>





<p>【4】<code>dyld_priv.h</code> 报错 <code>Expected&#39;,&#39;</code></p>
<p> 删掉 <code>, bridgeos(3.0)</code></p>
<p>【5】<code>lock_private.h</code> 报错 <code>Expected&#39;,&#39;</code></p>
<p>删掉 <code>, bridgeos(4.0)</code></p>
<p>【6】<code>Use of undeclared identifier &#39;DYLD_MACOSX_VERSION_10_11&#39;</code></p>
<p><code>dyld_priv.h</code> 顶部加入宏</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define DYLD_MACOSX_VERSION_10_11 0x000A0B00</span><br><span class="line">#define DYLD_MACOSX_VERSION_10_12 0x000A0C00</span><br><span class="line">#define DYLD_MACOSX_VERSION_10_13 0x000A0D00</span><br><span class="line">#define DYLD_MACOSX_VERSION_10_14 0x000A0E00</span><br></pre></td></tr></table></figure>



<p>【7】<code>Use of undeclared identifier &#39;CRGetCrashLogMessage&#39;</code></p>
<p><code>target -&gt; Build Setting -&gt; Preprocessor Macros</code></p>
<p> 添加 <code>LIBC_NO_LIBCRASHREPORTERCLIENT</code></p>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/macros.png" alt="macros"></p>
<p>【8】<code>Mismatch in debug-ness macros</code></p>
<p>注释 <code>#error mismatch in debug-ness macros</code></p>
<p>【9】</p>
<p><code>can&#39;t open order file: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.0.sdk/AppleInternal/OrderFiles/libobjc.order</code></p>
<p><code>target -&gt; Build Settings</code> 搜索 <code>Order File</code> 添加 <code>$(SRCROOT)/libobjc.order</code></p>
<p>【10】<code>library not found for -lCrashReporterClient</code></p>
<p><code>target -&gt; Build Settings -&gt; Other Linker Flags</code> 删掉  <code>CrashReporterClient</code></p>
<p>【11】<code>SDK &quot;macosx.internal&quot; cannot be located</code></p>
<p><code>target -&gt; objc -&gt; Build Phase -&gt; Run Script(markgc)</code> 将脚本的 <code>macosx.internal</code> 修改为 <code>macosx</code></p>
<p>Build Success</p>
<h4 id="编译调试"><a href="#编译调试" class="headerlink" title="编译调试"></a>编译调试</h4><p>新建 <code>Target</code> 来进行调试</p>
<ul>
<li><code>File -&gt; New -&gt; Target</code> <code>Test</code></li>
</ul>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/target.png" alt="target"></p>
<ul>
<li>绑定二进制依赖关系</li>
</ul>
<p><code>TARGETS -&gt; Test -&gt; Build Phases</code></p>
<p> <img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/depend.png" alt="target"></p>
<p>还需要设置 <code>target -&gt; objc -&gt; Build Settings -&gt; Enable Hardened Runtime -&gt; NO</code></p>
<p>注意 <code>Compile Sources</code> 中 <code>main.m</code> 位置在前面</p>
<p><img src="/2020/12/04/objc-781%E7%BC%96%E8%AF%91/compile.png" alt="compile"></p>
<p><a href="https://opensource.apple.com/release/mac-os-x-1062.html">Libc-583</a></p>
<p><a href="https://opensource.apple.com/release/os-x-1095.html"> Libc-997.90.3</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">dyld-750.6</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">libauto-187</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">libclosure-74</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">libdispatch-1173.100.2</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">xnu-6153.141.1</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">libpthread-416.100.3</a></p>
<p><a href="https://opensource.apple.com/release/macos-10156.html">libplatform-220.100.1</a></p>
<p><a href="https://opensource.apple.com/release/os-x-1095.html">launchd-842.92.1</a></p>
<p><a href="https://www.jianshu.com/p/28150fa0c085">objc4-750编译</a></p>
<p><a href="https://gitee.com/other_other/objc-781.git">objc4-781可编译代码</a></p>
<p><a href="https://github.com/chenjialin1016/objc4-debugTest">xcode12 objc4-781可编译代码</a></p>
]]></content>
  </entry>
  <entry>
    <title>_objc_init</title>
    <url>/2020/12/25/objc-init/</url>
    <content><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>什么时候调用 <code>load</code></p>
<p>子类和父类及分类 <code>load</code> 方法调用顺序</p>
<p>子类和父类及分类 <code>initialize</code> 方法调用顺序</p>
<p><code>load</code> 方法调用是在应用程序 <code>main</code> 函数之前，应用启动时 <code>dyld</code> 处理完 <code>image</code> 镜像文件，通过回调传给 <code>runtime</code> ，交由 <code>runtime</code> 在 <code>load_images</code> 方法中调用</p>
<p>从系统库 <code>libSystem</code> 的 <code>runtime</code> 的入口函数 <code>_objc_init</code> 开始</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _objc_init(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> initialized = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (initialized) <span class="keyword">return</span>;</span><br><span class="line">    initialized = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// fixme defer initialization until an objc-using image is found?</span></span><br><span class="line">    <span class="comment">//读取影响运行时的环境变量</span></span><br><span class="line">    environ_init();</span><br><span class="line">    tls_init();</span><br><span class="line">    <span class="comment">//运行C C++静态构造函数</span></span><br><span class="line">    static_init();</span><br><span class="line">    runtime_init();</span><br><span class="line">    <span class="comment">//初始化libobjc的异常处理系统</span></span><br><span class="line">    exception_init();</span><br><span class="line">    cache_init();</span><br><span class="line">    _imp_implementationWithBlock_init();</span><br><span class="line">		<span class="comment">//注册回调函数</span></span><br><span class="line">    _dyld_objc_notify_register(&amp;map_images, load_images, unmap_image);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __OBJC2__</span></span><br><span class="line">    didCallDyldNotifyRegister = <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="map-images"><a href="#map-images" class="headerlink" title="map_images"></a>map_images</h4><p>主要将 Mach-O 中的类信息加载到内存</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">map_images(<span class="keyword">unsigned</span> count, <span class="keyword">const</span> <span class="keyword">char</span> * <span class="keyword">const</span> paths[],</span><br><span class="line">           <span class="keyword">const</span> struct mach_header * <span class="keyword">const</span> mhdrs[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">mutex_locker_t</span> <span class="title">lock</span><span class="params">(runtimeLock)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> map_images_nolock(count, paths, mhdrs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>map_images_nolock</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> </span><br><span class="line">map_images_nolock(<span class="keyword">unsigned</span> mhCount, <span class="keyword">const</span> <span class="keyword">char</span> * <span class="keyword">const</span> mhPaths[],</span><br><span class="line">                  <span class="keyword">const</span> struct mach_header * <span class="keyword">const</span> mhdrs[])</span><br><span class="line">&#123;</span><br><span class="line">		... <span class="comment">//省略代码</span></span><br><span class="line">		<span class="keyword">if</span> (hCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      	<span class="comment">//读取镜像文件</span></span><br><span class="line">        _read_images(hList, hCount, totalClasses, unoptimizedTotalClasses);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="read-images"><a href="#read-images" class="headerlink" title="_read_images"></a>_read_images</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _read_images(header_info **hList, <span class="keyword">uint32_t</span> hCount, <span class="keyword">int</span> totalClasses, <span class="keyword">int</span> unoptimizedTotalClasses)</span><br><span class="line">&#123;</span><br><span class="line">		...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>_read_images</code> 内部做了几件事情</p>
<p>【1】重新初始化 <code>TaggedPointer</code> 环境，创建 <code>gdb_objc_realized_classes</code> 表</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!doneOnce) &#123;</span><br><span class="line">    doneOnce = YES;</span><br><span class="line">    launchTime = YES;</span><br><span class="line">    <span class="keyword">if</span> (DisableTaggedPointers) &#123;</span><br><span class="line">        disableTaggedPointers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    initializeTaggedPointerObfuscator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PrintConnecting) &#123;</span><br><span class="line">        _objc_inform(<span class="string">&quot;CLASS: found %d classes during launch&quot;</span>, totalClasses);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// namedClasses</span></span><br><span class="line">    <span class="comment">// Preoptimized classes don&#x27;t go in this table.</span></span><br><span class="line">    <span class="comment">// 4/3 is NXMapTable&#x27;s load factor</span></span><br><span class="line">    <span class="keyword">int</span> namedClassesSize = </span><br><span class="line">        (isPreoptimized() ? unoptimizedTotalClasses : totalClasses) * <span class="number">4</span> / <span class="number">3</span>;</span><br><span class="line">    gdb_objc_realized_classes =</span><br><span class="line">        NXCreateMapTable(NXStrValueMapPrototype, namedClassesSize);</span><br><span class="line"></span><br><span class="line">    ts.<span class="built_in">log</span>(<span class="string">&quot;IMAGE TIMES: first time tasks&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>。。。</p>
<h4 id="loadImages"><a href="#loadImages" class="headerlink" title="loadImages"></a>loadImages</h4><p>【1】进入 <code>load_images</code> 方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">load_images(<span class="keyword">const</span> <span class="keyword">char</span> *path __unused, <span class="keyword">const</span> struct mach_header *mh)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!didInitialAttachCategories &amp;&amp; didCallDyldNotifyRegister) &#123;</span><br><span class="line">        didInitialAttachCategories = <span class="literal">true</span>;</span><br><span class="line">        loadAllCategories();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return without taking locks if there are no +load methods here.</span></span><br><span class="line">    <span class="keyword">if</span> (!hasLoadMethods((<span class="keyword">const</span> headerType *)mh)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">recursive_mutex_locker_t</span> <span class="title">lock</span><span class="params">(loadMethodLock)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Discover load methods</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">mutex_locker_t</span> <span class="title">lock2</span><span class="params">(runtimeLock)</span></span>;</span><br><span class="line">        prepare_load_methods((<span class="keyword">const</span> headerType *)mh);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Call +load methods (without runtimeLock - re-entrant)</span></span><br><span class="line">    call_load_methods();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>prepare</code> 加载完所有 <code>load</code>   -&gt;  <code>call_load_methods()</code> 调用 <code>load</code> 方法</p>
<h5 id="prepare-load-methods"><a href="#prepare-load-methods" class="headerlink" title="prepare_load_methods"></a><code>prepare_load_methods</code></h5><p>【2】<code>prepare_load_methods</code> 实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare_load_methods</span><span class="params">(<span class="keyword">const</span> headerType *mhdr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> count, i;</span><br><span class="line"></span><br><span class="line">    runtimeLock.assertLocked();</span><br><span class="line">		<span class="comment">//拿到当前类的列表</span></span><br><span class="line">    <span class="keyword">classref_t</span> <span class="keyword">const</span> *classlist = </span><br><span class="line">        _getObjc2NonlazyClassList(mhdr, &amp;count);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        schedule_class_load(remapClass(classlist[i]));</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">//拿到分类列表</span></span><br><span class="line">    <span class="keyword">category_t</span> * <span class="keyword">const</span> *categorylist = _getObjc2NonlazyCategoryList(mhdr, &amp;count);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">category_t</span> *cat = categorylist[i];</span><br><span class="line">        Class cls = remapClass(cat-&gt;cls);</span><br><span class="line">        <span class="keyword">if</span> (!cls) <span class="keyword">continue</span>;  <span class="comment">// category for ignored weak-linked class</span></span><br><span class="line">        <span class="keyword">if</span> (cls-&gt;isSwiftStable()) &#123;</span><br><span class="line">            _objc_fatal(<span class="string">&quot;Swift class extensions and categories on Swift &quot;</span></span><br><span class="line">                        <span class="string">&quot;classes are not allowed to have +load methods&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        realizeClassWithoutSwift(cls, nil);</span><br><span class="line">        ASSERT(cls-&gt;ISA()-&gt;isRealized());</span><br><span class="line">        add_category_to_loadable_list(cat);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【2.1】进入 <code>schedule_class_load</code> 方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">schedule_class_load</span><span class="params">(Class cls)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cls) <span class="keyword">return</span>;</span><br><span class="line">    ASSERT(cls-&gt;isRealized());  <span class="comment">// _read_images should realize</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cls-&gt;data()-&gt;flags &amp; RW_LOADED) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ensure superclass-first ordering 递归加载 类 父类</span></span><br><span class="line">    schedule_class_load(cls-&gt;superclass);</span><br><span class="line"></span><br><span class="line">    add_class_to_loadable_list(cls);</span><br><span class="line">    cls-&gt;setInfo(RW_LOADED); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>递归加载类、父类，加载完毕后添加到 <code>loadable_list</code> 表，</p>
<p>继续查看 <code>add_class_to_loadable_list</code> 方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_class_to_loadable_list</span><span class="params">(Class cls)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IMP method;</span><br><span class="line"></span><br><span class="line">    loadMethodLock.assertLocked();</span><br><span class="line"></span><br><span class="line">    method = cls-&gt;getLoadMethod();</span><br><span class="line">    <span class="keyword">if</span> (!method) <span class="keyword">return</span>;  <span class="comment">// Don&#x27;t bother if cls has no +load method</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (PrintLoading) &#123;</span><br><span class="line">        _objc_inform(<span class="string">&quot;LOAD: class &#x27;%s&#x27; scheduled for +load&quot;</span>, </span><br><span class="line">                     cls-&gt;nameForLogging());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (loadable_classes_used == loadable_classes_allocated) &#123;</span><br><span class="line">        loadable_classes_allocated = loadable_classes_allocated*<span class="number">2</span> + <span class="number">16</span>;</span><br><span class="line">        loadable_classes = (struct loadable_class *)</span><br><span class="line">            <span class="built_in">realloc</span>(loadable_classes,</span><br><span class="line">                              loadable_classes_allocated *</span><br><span class="line">                              <span class="keyword">sizeof</span>(struct loadable_class));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    loadable_classes[loadable_classes_used].cls = cls;</span><br><span class="line">    loadable_classes[loadable_classes_used].method = method;</span><br><span class="line">    loadable_classes_used++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">loadable_class</span> &#123;</span></span><br><span class="line">    Class cls;  <span class="comment">// may be nil</span></span><br><span class="line">    IMP method;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>loadable_list</code> 表中存储的结构体 <code>loadable_class</code> ，包含当前类 <code>cls</code> ，和该类的 <code>load</code> 方法 <code>IMP</code></p>
<p><code>method = cls-&gt;getLoadMethod();</code> 就是获取到该类的 <code>load</code> 方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">IMP </span><br><span class="line">objc_class::getLoadMethod()</span><br><span class="line">&#123;</span><br><span class="line">    runtimeLock.assertLocked();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">method_list_t</span> *mlist;</span><br><span class="line"></span><br><span class="line">    ASSERT(isRealized());</span><br><span class="line">    ASSERT(ISA()-&gt;isRealized());</span><br><span class="line">    ASSERT(!isMetaClass());</span><br><span class="line">    ASSERT(ISA()-&gt;isMetaClass());</span><br><span class="line"></span><br><span class="line">    mlist = ISA()-&gt;data()-&gt;ro()-&gt;baseMethods();</span><br><span class="line">    <span class="keyword">if</span> (mlist) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; meth : *mlist) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *name = sel_cname(meth.name);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(name, <span class="string">&quot;load&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> meth.imp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以 <code>schedule_class_load</code> 就是先获取父类，再递归调用 <code>schedule_class_load</code> 方法，把父类的父类 -&gt; 父类 -&gt; 子类，这些类和的 <code>load</code> 方法加入到 <code>loadable_classes</code> 表中</p>
<p>所以类的 <code>+(load)</code> 方法执行顺序：是从父类到子类</p>
<p>回到【2】在执行 <code>schedule_class_load</code> 添加完类后，继续处理分类，分类调用 <code>_category_getLoadMethod</code> 方法获取到分类中重写的 <code>load</code> 方法，调用 <code>add_category_to_loadable_list</code> 方法，把分类和分类的 <code>load</code> 方法添加到 <code>loadable_categories</code> 表中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">loadable_category</span> &#123;</span></span><br><span class="line">    Category cat;  <span class="comment">// may be nil</span></span><br><span class="line">    IMP method;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>总结 <code>prepare_load_methods</code>：</p>
<p>1、处理类：递归先父类再子类，获取类和类的<code>load</code> 方法，合成结构体 <code>loadable_class</code> ，添加到 <code>loadable_classes</code> 表中</p>
<p>2、处理分类：获取分类<code>load</code> 方法，合成结构体 <code>loadable_category</code> ，添加到 <code>loadable_categories</code> 表中</p>
<h5 id="call-load-methods"><a href="#call-load-methods" class="headerlink" title="call_load_methods"></a>call_load_methods</h5><p>【3】进入 <code>call_load_methods</code> 方法，<code>load</code> 方法的调用部分</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_load_methods</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> loading = NO;</span><br><span class="line">    <span class="keyword">bool</span> more_categories;</span><br><span class="line"></span><br><span class="line">    loadMethodLock.assertLocked();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Re-entrant calls do nothing; the outermost call will finish the job.</span></span><br><span class="line">    <span class="keyword">if</span> (loading) <span class="keyword">return</span>;</span><br><span class="line">    loading = YES;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> *pool = objc_autoreleasePoolPush();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 1. Repeatedly call class +loads until there aren&#x27;t any more</span></span><br><span class="line">        <span class="keyword">while</span> (loadable_classes_used &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            call_class_loads();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. Call category +loads ONCE</span></span><br><span class="line">        more_categories = call_category_loads();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. Run more +loads if there are classes OR more untried categories</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (loadable_classes_used &gt; <span class="number">0</span>  ||  more_categories);</span><br><span class="line"></span><br><span class="line">    objc_autoreleasePoolPop(pool);</span><br><span class="line"></span><br><span class="line">    loading = NO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到有个 <code>do-while</code> 循环，<code>do-while</code> 循环里面会产生很多临时变量和函数，放到自动释放池里面，节省内存</p>
<p><code>do-while</code> 循环体部分可以看到 <code>load</code> 方法的调用是先调用主类，再调用分类的；下面<code>call_class_loads</code> 方法内</p>
<p>部从 <code>loadable_classes</code> 获取到类调用 <code>load</code> 方法也是先父类再子类</p>
<p>【3.1】查看 <code>call_class_loads</code> 方法实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">call_class_loads</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Detach current loadable list.</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">loadable_class</span> *<span class="title">classes</span> =</span> loadable_classes;</span><br><span class="line">    <span class="keyword">int</span> used = loadable_classes_used;</span><br><span class="line">    loadable_classes = nil;</span><br><span class="line">    loadable_classes_allocated = <span class="number">0</span>;</span><br><span class="line">    loadable_classes_used = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Call all +loads for the detached list.</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; used; i++) &#123;</span><br><span class="line">        Class cls = classes[i].cls;</span><br><span class="line">        <span class="keyword">load_method_t</span> load_method = (<span class="keyword">load_method_t</span>)classes[i].method;</span><br><span class="line">        <span class="keyword">if</span> (!cls) <span class="keyword">continue</span>; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (PrintLoading) &#123;</span><br><span class="line">            _objc_inform(<span class="string">&quot;LOAD: +[%s load]\n&quot;</span>, cls-&gt;nameForLogging());</span><br><span class="line">        &#125;</span><br><span class="line">        (*load_method)(cls, @selector(load));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Destroy the detached list.</span></span><br><span class="line">    <span class="keyword">if</span> (classes) <span class="built_in">free</span>(classes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从之前存储好的标 <code>loadable_classes</code> 中取出 <code>Class</code> 和 对应的 <code>load</code> 方法，直接调用</p>
<p>【3.2】<code>call_category_loads</code></p>
<p>从 <code>loadable_categories</code> 表中取出<code>loadable_category</code> ，通过 <code>_category_getClass</code> 获取分类对应的类，直接调用 <code>load</code> 方法</p>
<p><a href="https://www.jianshu.com/p/ea680941e084">深入APP启动之dyld、map_images、load_images</a></p>
]]></content>
  </entry>
  <entry>
    <title>《Flutter实战第二版》九：动画</title>
    <url>/2022/01/18/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%B9%9D%EF%BC%9A%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>《Flutter实战第二版》八：事件处理与通知</title>
    <url>/2022/01/18/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%AB%EF%BC%9A%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E4%B8%8E%E9%80%9A%E7%9F%A5/</url>
    <content><![CDATA[<h3 id="8-事件处理与通知"><a href="#8-事件处理与通知" class="headerlink" title="8 事件处理与通知"></a>8 事件处理与通知</h3><h4 id="8-1-原始指针事件处理"><a href="#8-1-原始指针事件处理" class="headerlink" title="8.1 原始指针事件处理"></a>8.1 原始指针事件处理</h4><p>Flutter 中可以使用 Listener 来监听原始触摸事件</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Listener(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  <span class="keyword">this</span>.onPointerDown, <span class="comment">//手指按下回调</span></span><br><span class="line">  <span class="keyword">this</span>.onPointerMove, <span class="comment">//手指移动回调</span></span><br><span class="line">  <span class="keyword">this</span>.onPointerUp,<span class="comment">//手指抬起回调</span></span><br><span class="line">  <span class="keyword">this</span>.onPointerCancel,<span class="comment">//触摸事件取消回调</span></span><br><span class="line">  <span class="keyword">this</span>.behavior = HitTestBehavior.deferToChild, <span class="comment">//先忽略此参数，后面小节会专门介绍</span></span><br><span class="line">  Widget child</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<p>手指在容器上移动时查看手指相对于容器的位置</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_DemoState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Demo</span>&gt; </span>&#123;</span><br><span class="line">  PointerEvent? _event;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;标题&#x27;</span>)),</span><br><span class="line">      body: Listener(</span><br><span class="line">        child: Container(</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">          width: <span class="number">300.0</span>,</span><br><span class="line">          height: <span class="number">150.0</span>,</span><br><span class="line">          child: Text(<span class="string">&#x27;<span class="subst">$&#123;_event?.localPosition ?? <span class="string">&#x27;&#x27;</span>&#125;</span>&#x27;</span>,style: TextStyle(color: Colors.white)),</span><br><span class="line">        ),</span><br><span class="line">        onPointerDown: (PointerDownEvent event) =&gt; setState(() =&gt; _event = event),</span><br><span class="line">        onPointerMove: (PointerMoveEvent event) =&gt; setState(() =&gt; _event = event),</span><br><span class="line">        onPointerUp: (PointerUpEvent event) =&gt; setState(() =&gt; _event = event),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》八：事件处理与通知/WeChat2b7b8f8ebecd7a3a530fce169a8d1389.png" alt="WeChat2b7b8f8ebecd7a3a530fce169a8d1389" style="zoom:80%;" />

<p>PointerEvent 类中包括当前指针的一些信息<br>position：指针相对于全局坐标的偏移<br>localPosition：指针相对于本身布局坐标系的偏移<br>delta：两次指针移动事件（PointerMoveEvent）的距离<br>pressure：按压力度，如果手机不支持压力传感器，则始终为1<br>orientation：指针移动方向，是一个角度值</p>
<ul>
<li>忽略指针事件</li>
</ul>
<p>如果不想让某个子树响应 PointerEvent 的话，可以使用 IgnorePointer 和 AbsorbPointer，两个组件都能阻止子树接收指针事件；不同在于 AbsorbPointer 会参与命中测试（Hit Test）IgnorePointer 不会，意味着 AbsorbPointer 本身是可以接收指针事件的（但其子树不行）</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Listener(</span><br><span class="line">  child: AbsorbPointer(</span><br><span class="line">    child: Listener(</span><br><span class="line">      child: Container(</span><br><span class="line">        color: Colors.red,</span><br><span class="line">        width: <span class="number">200.0</span>,</span><br><span class="line">        height: <span class="number">100.0</span>,</span><br><span class="line">      ),</span><br><span class="line">      onPointerDown: (event)=&gt;<span class="built_in">print</span>(<span class="string">&quot;in&quot;</span>),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">  onPointerDown: (event)=&gt;<span class="built_in">print</span>(<span class="string">&quot;up&quot;</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>点击 Container 会输出 up，换成 IgnorePointer 两个都不会输出</p>
<h4 id="8-2-手势识别"><a href="#8-2-手势识别" class="headerlink" title="8.2 手势识别"></a>8.2 手势识别</h4><h5 id="8-2-1-GestureDetector"><a href="#8-2-1-GestureDetector" class="headerlink" title="8.2.1 GestureDetector"></a>8.2.1 GestureDetector</h5><p>手势识别的功能性组件，内部封装了 Listener</p>
<ul>
<li>点击、双击、长按</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_DemoState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Demo</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> _operation = <span class="string">&quot;No Gesture detected!&quot;</span>; <span class="comment">//保存事件名</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;标题&#x27;</span>)),</span><br><span class="line">      body: GestureDetector(</span><br><span class="line">        child: Container(</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">          width: <span class="number">200.0</span>,</span><br><span class="line">          height: <span class="number">100.0</span>,</span><br><span class="line">          child: Text( _operation, style: TextStyle(color: Colors.white)),</span><br><span class="line">        ),</span><br><span class="line">        onTap: () =&gt; updateText(<span class="string">&quot;Tap&quot;</span>), <span class="comment">//点击</span></span><br><span class="line">        onDoubleTap: () =&gt; updateText(<span class="string">&quot;DoubleTap&quot;</span>), <span class="comment">//双击</span></span><br><span class="line">        onLongPress: () =&gt; updateText(<span class="string">&quot;LongPress&quot;</span>), <span class="comment">//长按</span></span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> updateText(<span class="built_in">String</span> text) &#123;</span><br><span class="line">    <span class="comment">//更新显示的事件名</span></span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _operation = text;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>拖动、滑动</li>
</ul>
<p>GestureDetector 会将要监听的组件的原点（左上角）作为本次手势的原点</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_DemoState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Demo</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">double</span> _top = <span class="number">0.0</span>; <span class="comment">//距顶部的偏移</span></span><br><span class="line">  <span class="built_in">double</span> _left = <span class="number">0.0</span>;<span class="comment">//距左边的偏移</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;标题&#x27;</span>)),</span><br><span class="line">      body: Stack(</span><br><span class="line">        children: [</span><br><span class="line">          Positioned(</span><br><span class="line">            top: _top,</span><br><span class="line">            left: _left,</span><br><span class="line">            child: GestureDetector(</span><br><span class="line">              child: CircleAvatar(child: Text(<span class="string">&#x27;A&#x27;</span>)),</span><br><span class="line">              <span class="comment">//手指按下时会触发此回调</span></span><br><span class="line">              onPanDown: (DragDownDetails e) &#123;</span><br><span class="line">                <span class="comment">//打印手指按下的位置(相对于屏幕)</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;用户手指按下：<span class="subst">$&#123;e.globalPosition&#125;</span>&quot;</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="comment">//手指滑动时会触发此回调</span></span><br><span class="line">              onPanUpdate: (DragUpdateDetails e) &#123;</span><br><span class="line">                <span class="comment">//用户手指滑动时，更新偏移，重新构建</span></span><br><span class="line">                setState(() &#123;</span><br><span class="line">                  _left += e.delta.dx;</span><br><span class="line">                  _top += e.delta.dy;</span><br><span class="line">                &#125;);</span><br><span class="line">              &#125;,</span><br><span class="line">              onPanEnd: (DragEndDetails e)&#123;</span><br><span class="line">                <span class="comment">//打印滑动结束时在x、y轴上的速度</span></span><br><span class="line">                <span class="built_in">print</span>(e.velocity);</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》八：事件处理与通知/WeChat086c3a31a2342c497e33c9b744b41fc2.png" alt="WeChat086c3a31a2342c497e33c9b744b41fc2" style="zoom:80%;" />

<p>DragDownDetails.globalPosition：用户按下时，按下位置相对于屏幕（非父组件）原点（左上角）的偏移</p>
<p>DragUpdateDetails.delta：屏幕上滑动时，会对次触发 Update 事件，delta 指一次 Update 事件的滑动的偏移量</p>
<p>DragEndDetails.velocity：用户抬起手指时的滑动速度</p>
<ul>
<li>单一方向拖动</li>
</ul>
<p>GestureDetector 可以只识别特定方向的手势事件</p>
<p>改成只能沿垂直方向拖动</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">child: GestureDetector(</span><br><span class="line">    child: CircleAvatar(child: Text(<span class="string">&quot;A&quot;</span>)),</span><br><span class="line">    <span class="comment">//垂直方向拖动事件</span></span><br><span class="line">    onVerticalDragUpdate: (DragUpdateDetails details) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _top += details.delta.dy;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>缩放</li>
</ul>
<p>GestureDetector 可以监听缩放事件</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_Scale</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _Scale(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ScaleState createState() =&gt; _ScaleState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ScaleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">_Scale</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">double</span> _width = <span class="number">200.0</span>; <span class="comment">//通过修改图片宽度来达到缩放效果</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: GestureDetector(</span><br><span class="line">        <span class="comment">//指定宽度，高度自适应</span></span><br><span class="line">        child: Image.asset(<span class="string">&quot;./images/sea.png&quot;</span>, width: _width),</span><br><span class="line">        onScaleUpdate: (ScaleUpdateDetails details) &#123;</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            <span class="comment">//缩放倍数在0.8到10倍之间</span></span><br><span class="line">            _width=<span class="number">200</span>*details.scale.clamp(<span class="number">.8</span>, <span class="number">10.0</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="8-2-2-GestureRecognizer"><a href="#8-2-2-GestureRecognizer" class="headerlink" title="8.2.2 GestureRecognizer"></a>8.2.2 GestureRecognizer</h5><p>GestureDetector 内部是使用一个或多个 Gesturerecognizer 来识别各种手势的</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="comment">//用到GestureRecognizer的话一定要调用其dispose方法释放资源</span></span><br><span class="line">    _tapGestureRecognizer.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">Widget _recognizeChild() &#123;</span><br><span class="line"><span class="keyword">return</span> Positioned(</span><br><span class="line">  top: <span class="number">20</span>,</span><br><span class="line">  child: Text.rich(</span><br><span class="line">    TextSpan(</span><br><span class="line">      children: [</span><br><span class="line">        TextSpan(text: <span class="string">&#x27;你好世界&#x27;</span>),</span><br><span class="line">        TextSpan(</span><br><span class="line">          text: <span class="string">&#x27;你好世界&#x27;</span>,</span><br><span class="line">          style: TextStyle(</span><br><span class="line">            fontSize: <span class="number">30.0</span>,</span><br><span class="line">            color: _toggle ? Colors.blue : Colors.red,</span><br><span class="line">          ),</span><br><span class="line">          recognizer: _tapGestureRecognizer</span><br><span class="line">            ..onTap = () &#123;</span><br><span class="line">              setState(() &#123;</span><br><span class="line">                _toggle = !_toggle;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">        ),</span><br><span class="line">        TextSpan(text: <span class="string">&#x27;你好世界&#x27;</span>),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用GestureRecognizer后一定要调用其dispose()方法来释放资源</p>
<h4 id="8-3-Flutter-事件机制"><a href="#8-3-Flutter-事件机制" class="headerlink" title="8.3 Flutter 事件机制"></a>8.3 Flutter 事件机制</h4><h4 id="8-4-手势原理与手势冲突"><a href="#8-4-手势原理与手势冲突" class="headerlink" title="8.4 手势原理与手势冲突"></a>8.4 手势原理与手势冲突</h4><h4 id="8-5-事件总线"><a href="#8-5-事件总线" class="headerlink" title="8.5 事件总线"></a>8.5 事件总线</h4><h4 id="8-6-通知-Notification"><a href="#8-6-通知-Notification" class="headerlink" title="8.6 通知 Notification"></a>8.6 通知 Notification</h4>]]></content>
  </entry>
  <entry>
    <title>《Flutter实战第二版》十三：国际化</title>
    <url>/2022/03/02/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%8D%81%E4%B8%89%EF%BC%9A%E5%9B%BD%E9%99%85%E5%8C%96/</url>
    <content><![CDATA[<h5 id="13-1-2-支持国际化"><a href="#13-1-2-支持国际化" class="headerlink" title="13.1.2 支持国际化"></a>13.1.2 支持国际化</h5><p>pubspec.yaml 添加 flutter_localizations 的依赖包</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  flutter:</span><br><span class="line">    sdk: flutter</span><br><span class="line">  flutter_localizations:</span><br><span class="line">    sdk: flutter</span><br></pre></td></tr></table></figure>

<p>指定 MaterialApp 的 localizationsDelegates 和 supportedLocales</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_localizations/flutter_localizations.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      localizationsDelegates: [</span><br><span class="line">        GlobalMaterialLocalizations.delegate,</span><br><span class="line">        GlobalWidgetsLocalizations.delegate,</span><br><span class="line">      ],</span><br><span class="line">      supportedLocales: [</span><br><span class="line">        Locale(<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;US&#x27;</span>),<span class="comment">// 美国英语 Locale 包括语言和国家两个标志</span></span><br><span class="line">        Locale(<span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;CN&#x27;</span>),<span class="comment">// 中文简体</span></span><br><span class="line">        <span class="comment">//其它Locales</span></span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与 MaterialApp 类为入口的应用不同，对基于 WidgetsApp 类为入口的应用进行国际化时不需要 GlobalMaterialLocalizations.delegate</p>
<p>GlobalMaterialLocalizations.delegate 为 Material 组件库提供的本地化的字符串和其它值，可以使 Material 组件支持多语言<br>GlobalWidgetsLocalizations.delegate 定义组件默认的文本方向，从左到右或从右到左<br>supportedLocales 应用支持的语言列表</p>
<h5 id="13-1-3-获取当前区域-Locale"><a href="#13-1-3-获取当前区域-Locale" class="headerlink" title="13.1.3 获取当前区域 Locale"></a>13.1.3 获取当前区域 Locale</h5><p>Locale 类是用来标识用户的语言环境的，包括语言和国家两个标志</p>
<p>获取当前区域 Locale</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Locale myLocale = Localizations.localeOf(context);</span><br></pre></td></tr></table></figure>

<h5 id="13-1-4-监听系统语言切换"><a href="#13-1-4-监听系统语言切换" class="headerlink" title="13.1.4 监听系统语言切换"></a>13.1.4 监听系统语言切换</h5><p>当更改系统语言设置时，APP 中的 Localizations 组件会重新构建，Localizations.localeOf(context) 获取的 Locale 就会更新，最终界面会重新 build</p>
<p>可以通过 localeResolutionCallback 或 localeListResolutionCallback 回调来监听 Locale 改变事件</p>
<h4 id="13-3-使用-Intl-包"><a href="#13-3-使用-Intl-包" class="headerlink" title="13.3 使用 Intl 包"></a>13.3 使用 Intl 包</h4><h5 id="13-3-1-添加依赖"><a href="#13-3-1-添加依赖" class="headerlink" title="13.3.1 添加依赖"></a>13.3.1 添加依赖</h5><p>使用 Intl 包可以非常轻松的实现国际化</p>
<p>添加两个依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  intl: ^0.17.0 </span><br><span class="line">dev_dependencies:</span><br><span class="line">  intl_generator:  0.2.1 </span><br></pre></td></tr></table></figure>

<p>intl_generator 组要包含了一些工具，开发阶段主要作用是从代码中提取要国际化的字符串到单独的 arb 文件，和根据 arb 文件生成对应语言的 dart 代码。而 intl 包主要是引用和加载 intl——generator 生成后的 dart 代码</p>
<h5 id="13-3-2-创建必要目录"><a href="#13-3-2-创建必要目录" class="headerlink" title="13.3.2 创建必要目录"></a>13.3.2 创建必要目录</h5><p>根目录创建 l10n-arb 目录，保存接下来通过 intl_generator 命令生成的 arb 文件</p>
<p>lib 目录下创建 l10n 目录，保存从 arb 文件生成的 dart 代码文件</p>
<h5 id="13-3-3-实现-Localizations-和-Delegate-类"><a href="#13-3-3-实现-Localizations-和-Delegate-类" class="headerlink" title="13.3.3 实现 Localizations 和 Delegate 类"></a>13.3.3 实现 Localizations 和 Delegate 类</h5>]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>《Flutter实战第二版》十五：一个完整的Flutter应用</title>
    <url>/2022/01/28/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%8D%81%E4%BA%94%EF%BC%9A%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84Flutter%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h3 id="15-一个完整的-Flutter-应用"><a href="#15-一个完整的-Flutter-应用" class="headerlink" title="15 一个完整的 Flutter 应用"></a>15 一个完整的 Flutter 应用</h3><h4 id="15-1-Github-客户端示例"><a href="#15-1-Github-客户端示例" class="headerlink" title="15.1 Github 客户端示例"></a>15.1 Github 客户端示例</h4><p>需要实现功能：</p>
<p>Github 账号登录、退出登录<br>登录后查看自己项目主页<br>支持换肤<br>支持多语言<br>登录状态持久化</p>
<h4 id="15-2-APP-代码结构"><a href="#15-2-APP-代码结构" class="headerlink" title="15.2 APP 代码结构"></a>15.2 APP 代码结构</h4><img src="《Flutter实战第二版》十五：一个完整的Flutter应用/WeChat3794f9d995c042b43f483a645aedb4d0.png" alt="WeChat3794f9d995c042b43f483a645aedb4d0" style="zoom:76%;" />

<p>l10n-arg 文件夹用于保存各国语言对应的 arb 文件</p>
<img src="《Flutter实战第二版》十五：一个完整的Flutter应用/WeChat34b91b756765ef038ab6c2be2dba0c3a.png" alt="WeChat34b91b756765ef038ab6c2be2dba0c3a"  />

<table>
<thead>
<tr>
<th>文件夹</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>common</td>
<td>一些工具类，如通用方法类、网络接口类、保存全局变量的静态类等</td>
</tr>
<tr>
<td>l10n</td>
<td>国际化相关的类都在此目录下</td>
</tr>
<tr>
<td>models</td>
<td>Json文件对应的Dart Model类会在此目录下</td>
</tr>
<tr>
<td>states</td>
<td>保存APP中需要跨组件共享的状态类</td>
</tr>
<tr>
<td>routes</td>
<td>存放所有路由页面类</td>
</tr>
<tr>
<td>widgets</td>
<td>APP内封装的一些Widget组件都在该目录下</td>
</tr>
</tbody></table>
<h4 id="15-3-Model-类定义"><a href="#15-3-Model-类定义" class="headerlink" title="15.3 Model 类定义"></a>15.3 Model 类定义</h4><ul>
<li>Github 账号信息</li>
</ul>
<p>Github API 接口返回 json 结构如下</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;login&quot;</span>: <span class="string">&quot;octocat&quot;</span>, <span class="comment">//用户登录名</span></span><br><span class="line">  <span class="string">&quot;avatar_url&quot;</span>: <span class="string">&quot;https://github.com/images/error/octocat_happy.gif&quot;</span>, <span class="comment">//用户头像地址</span></span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;User&quot;</span>, <span class="comment">//用户类型，可能是组织</span></span><br><span class="line">  <span class="string">&quot;name?&quot;</span>: <span class="string">&quot;monalisa octocat&quot;</span>, <span class="comment">//用户名字</span></span><br><span class="line">  <span class="string">&quot;company?&quot;</span>: <span class="string">&quot;GitHub&quot;</span>, <span class="comment">//公司</span></span><br><span class="line">  <span class="string">&quot;blog?&quot;</span>: <span class="string">&quot;https://github.com/blog&quot;</span>, <span class="comment">//博客地址</span></span><br><span class="line">  <span class="string">&quot;location?&quot;</span>: <span class="string">&quot;San Francisco&quot;</span>, <span class="comment">// 用户所处地理位置</span></span><br><span class="line">  <span class="string">&quot;email?&quot;</span>: <span class="string">&quot;octocat@github.com&quot;</span>, <span class="comment">// 邮箱</span></span><br><span class="line">  <span class="string">&quot;hireable?&quot;</span>: <span class="keyword">false</span>,</span><br><span class="line">  <span class="string">&quot;bio?&quot;</span>: <span class="string">&quot;There once was...&quot;</span>, <span class="comment">// 用户简介</span></span><br><span class="line">  <span class="string">&quot;public_repos&quot;</span>: <span class="number">2</span>, <span class="comment">// 公开项目数</span></span><br><span class="line">  <span class="string">&quot;followers&quot;</span>: <span class="number">20</span>, <span class="comment">//关注该用户的人数</span></span><br><span class="line">  <span class="string">&quot;following&quot;</span>: <span class="number">0</span>, <span class="comment">// 该用户关注的人数</span></span><br><span class="line">  <span class="string">&quot;created_at&quot;</span>: <span class="string">&quot;2008-01-14T04:33:35Z&quot;</span>, <span class="comment">// 账号创建时间</span></span><br><span class="line">  <span class="string">&quot;updated_at&quot;</span>: <span class="string">&quot;2008-01-14T04:33:35Z&quot;</span>, <span class="comment">// 账号信息更新时间</span></span><br><span class="line">  <span class="string">&quot;total_private_repos&quot;</span>: <span class="number">100</span>, <span class="comment">//该用户总的私有项目数(包括参与的其它组织的私有项目)</span></span><br><span class="line">  <span class="string">&quot;owned_private_repos&quot;</span>: <span class="number">100</span> <span class="comment">//该用户自己的私有项目数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>jsons 目录下创建一个 user.json 文件保存</p>
<ul>
<li>API 缓存策略信息</li>
</ul>
<p>创建 cacheConfig.json 文件缓存策略</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;enable&quot;</span>:<span class="keyword">true</span>, <span class="comment">// 是否启用缓存</span></span><br><span class="line">  <span class="string">&quot;maxAge&quot;</span>:<span class="number">1000</span>, <span class="comment">// 缓存的最长时间，单位（秒）</span></span><br><span class="line">  <span class="string">&quot;maxCount&quot;</span>:<span class="number">100</span> <span class="comment">// 最大缓存数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>用户信息</li>
</ul>
<p>profile.json </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;user?&quot;</span>:<span class="string">&quot;<span class="subst">$user</span>&quot;</span>, <span class="comment">//Github账号信息，结构见&quot;user.json&quot;</span></span><br><span class="line">  <span class="string">&quot;token?&quot;</span>:<span class="string">&quot;&quot;</span>, <span class="comment">// 登录用户的token(oauth)或密码</span></span><br><span class="line">  <span class="string">&quot;theme&quot;</span>:<span class="number">0</span>, <span class="comment">//主题索引</span></span><br><span class="line">  <span class="string">&quot;cache?&quot;</span>:<span class="string">&quot;<span class="subst">$cacheConfig</span>&quot;</span>, <span class="comment">// 缓存策略信息，结构见&quot;cacheConfig.json&quot;</span></span><br><span class="line">  <span class="string">&quot;lastLogin?&quot;</span>:<span class="string">&quot;&quot;</span>, <span class="comment">//最近一次的注销登录的用户名</span></span><br><span class="line">  <span class="string">&quot;locale?&quot;</span>:<span class="string">&quot;&quot;</span> <span class="comment">// APP语言信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>项目信息</li>
</ul>
<p>repo.json 文件保存项目信息</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="number">1296269</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Hello-World&quot;</span>, <span class="comment">//项目名称</span></span><br><span class="line">  <span class="string">&quot;full_name&quot;</span>: <span class="string">&quot;octocat/Hello-World&quot;</span>, <span class="comment">//项目完整名称</span></span><br><span class="line">  <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;<span class="subst">$user</span>&quot;</span>, <span class="comment">// 项目拥有者，结构见&quot;user.json&quot;</span></span><br><span class="line">  <span class="string">&quot;parent?&quot;</span>:<span class="string">&quot;<span class="subst">$repo</span>&quot;</span>, <span class="comment">// 如果是fork的项目，则此字段表示fork的父项目信息</span></span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="keyword">false</span>, <span class="comment">// 是否私有项目</span></span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;This your first repo!&quot;</span>, <span class="comment">//项目描述</span></span><br><span class="line">  <span class="string">&quot;fork&quot;</span>: <span class="keyword">false</span>, <span class="comment">// 该项目是否为fork的项目</span></span><br><span class="line">  <span class="string">&quot;language?&quot;</span>: <span class="string">&quot;JavaScript&quot;</span>,<span class="comment">//该项目的主要编程语言</span></span><br><span class="line">  <span class="string">&quot;forks_count&quot;</span>: <span class="number">9</span>, <span class="comment">// fork了该项目的数量</span></span><br><span class="line">  <span class="string">&quot;stargazers_count&quot;</span>: <span class="number">80</span>, <span class="comment">//该项目的star数量</span></span><br><span class="line">  <span class="string">&quot;size&quot;</span>: <span class="number">108</span>, <span class="comment">// 项目占用的存储大小</span></span><br><span class="line">  <span class="string">&quot;default_branch&quot;</span>: <span class="string">&quot;master&quot;</span>, <span class="comment">//项目的默认分支</span></span><br><span class="line">  <span class="string">&quot;open_issues_count&quot;</span>: <span class="number">2</span>, <span class="comment">//该项目当前打开的issue数量</span></span><br><span class="line">  <span class="string">&quot;pushed_at&quot;</span>: <span class="string">&quot;2011-01-26T19:06:43Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span>: <span class="string">&quot;2011-01-26T19:01:12Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;updated_at&quot;</span>: <span class="string">&quot;2011-01-26T19:14:43Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;subscribers_count?&quot;</span>: <span class="number">42</span>, <span class="comment">//订阅（关注）该项目的人数</span></span><br><span class="line">  <span class="string">&quot;license?&quot;</span>: &#123; <span class="comment">// 该项目的开源许可证</span></span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;mit&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;MIT License&quot;</span>,</span><br><span class="line">    <span class="string">&quot;spdx_id&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">    <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://api.github.com/licenses/mit&quot;</span>,</span><br><span class="line">    <span class="string">&quot;node_id&quot;</span>: <span class="string">&quot;MDc6TGljZW5zZW1pdA==&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>生成 Dart Model 类</li>
</ul>
<p>添加包 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">json_model: ^<span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">json_serializable: ^<span class="number">6.1</span><span class="number">.4</span></span><br></pre></td></tr></table></figure>

<p>根目录运行 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter packages pub run json_model</span><br></pre></td></tr></table></figure>

<p>执行后在 lib/models 文件夹下会生成相应的 Dart Model 类</p>
<img src="《Flutter实战第二版》十五：一个完整的Flutter应用/WeChatd1808cadb57d89cee1dc0a463410b7be.png" alt="WeChatd1808cadb57d89cee1dc0a463410b7be" style="zoom:80%;" />

<ul>
<li>数据持久化</li>
</ul>
<p>使用 shared_preferences 包来对登录用户的 profile 信息进行持久化，shared_preferences 是一个 Flutter 插件，通过 Android 和 iOS 平台提供的机制来实现数据持久化</p>
<h4 id="15-4-全局变量及共享状态"><a href="#15-4-全局变量及共享状态" class="headerlink" title="15.4 全局变量及共享状态"></a>15.4 全局变量及共享状态</h4><p>全局变量：单纯指会贯穿整个APP生命周期的变量，单纯保存一些信息或者封装一些全局工具和方法的对象</p>
<p>共享状态：指那些需要跨组件或跨路由共享的信息</p>
<p>区别在于共享状态发生改变时需要通知所有使用该状态的组件，全局变量不需要</p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>事件传递和响应</title>
    <url>/2021/07/20/%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E5%92%8C%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<h4 id="1、事件的传递"><a href="#1、事件的传递" class="headerlink" title="1、事件的传递"></a>1、事件的传递</h4><h5 id="1-1-事件传递流程"><a href="#1-1-事件传递流程" class="headerlink" title="1.1 事件传递流程"></a>1.1 事件传递流程</h5><p>事件发生后，系统会将事件加入到一个由 UIApplication 管理的事件队列中<br>UIApplication 会从事件队列中取出最前面的事件，分发下去，首先传给 UIWindow<br>UIWindow 会在视图层次结构中找到一个最合适的视图来处理事件</p>
<p>触摸事件的传递是从父控件传递到子控件<br>UIApplication -&gt; Window -&gt; 寻找最合适的视图来处理事件</p>
<h5 id="1-2-寻找最合适的视图"><a href="#1-2-寻找最合适的视图" class="headerlink" title="1.2 寻找最合适的视图"></a>1.2 寻找最合适的视图</h5><p>内部通过调用 <code>hitTest:withEvent</code> 方法找最终响应视图</p>
<p><code>hitTest:withEvent</code> 底层实现：</p>
<ol>
<li>判断当前控件能不能接收事件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(self.userInteractionEnabled &#x3D;&#x3D; NO || self.hidden &#x3D;&#x3D; YES || self.alpha &lt;&#x3D; 0.01)</span><br><span class="line">return  nil;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>判断触摸点在不在当前的控件上</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(![self pointInside:point withEvent:event]) return nil;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>从后往前遍历自己的子控件（最后添加的子视图先遍历）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int count &#x3D; (int)self.subviews.count;</span><br><span class="line">for (int i &#x3D; count - 1; i &gt;&#x3D; 0;i-- ) &#123;</span><br><span class="line">	UIView *childV &#x3D; self.subviews[i];</span><br><span class="line">	&#x2F;&#x2F;把当前坐标系上的点转换成子控件坐标系上的点.</span><br><span class="line">	CGPoint childP &#x3D; [self convertPoint:point toView:childV];</span><br><span class="line">	&#x2F;&#x2F;判断自己的子控件是不是最适合的View 对子view进行 hitTest</span><br><span class="line">	UIView *fitView &#x3D; [childV hitTest:childP withEvent:event];</span><br><span class="line">	&#x2F;&#x2F;如果子控件是最适合的View,直接返回</span><br><span class="line">  if (fitView) &#123;</span><br><span class="line">    return fitView;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>如果没有找到最合适的view，自己就是最合适的view</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return self</span><br></pre></td></tr></table></figure>

<h5 id="1-3-应用"><a href="#1-3-应用" class="headerlink" title="1.3 应用"></a>1.3 应用</h5><ol>
<li>扩大button的响应区域</li>
<li>子view超出了父view的bounds响应事件</li>
<li>使部分区域失去响应</li>
<li>让非scrollView区域响应scrollView拖拽事件</li>
</ol>
<p>button被view遮住了，要让button接收事件</p>
<p><img src="/2021/07/20/%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E5%92%8C%E5%93%8D%E5%BA%94/button.png" alt="button"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123;</span><br><span class="line">    &#x2F;&#x2F;return [super hitTest:point withEvent:event];</span><br><span class="line">    &#x2F;&#x2F;拿到后面的按钮</span><br><span class="line">    &#x2F;&#x2F;当点在按钮上的时候,才返回按钮,如果不在按钮上.保持系统默认做法</span><br><span class="line">    &#x2F;&#x2F;判断点在不在按钮身上</span><br><span class="line">    &#x2F;&#x2F;把当前的点转换到按钮身上的坐标系的点</span><br><span class="line">    CGPoint btnP &#x3D; [self convertPoint:point toView:self.btn];</span><br><span class="line">    if ([self.btn pointInside:btnP withEvent:event]) &#123;</span><br><span class="line">        return self.btn;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return [super hitTest:point withEvent:event];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2、事件响应"><a href="#2、事件响应" class="headerlink" title="2、事件响应"></a>2、事件响应</h4><p>传递链是用来获取第一响应者，接下来开始响应事件</p>
<p>响应链条：firstView -&gt; super view -&gt; … -&gt; viewcontroller -&gt;window -&gt; application -&gt; appdelegate</p>
<p>找到最合适的视图后，事件会从视图开始，沿着响应链 nextResponder 传递，直到找到处理事件的视图，没有处理的事件会被丢弃</p>
<p>如果有父视图，则 nextResponder指向父视图</p>
<p>响应链传递</p>
<p><img src="/2021/07/20/%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E5%92%8C%E5%93%8D%E5%BA%94/%E5%93%8D%E5%BA%94%E9%93%BE%E4%BC%A0%E9%80%92.png" alt="响应链传递"></p>
<h5 id="2-1-系统响应"><a href="#2-1-系统响应" class="headerlink" title="2.1 系统响应"></a>2.1 系统响应</h5><p>屏幕点击后，将事件交由 IOKit 处理</p>
<p>IOKit 将事件封装成一个 IOHIDEvent 对象，通过 mach port 传递给 SpringBoard 进程</p>
<p>SpringBoard 接收到触摸事件，触发主线程 RunLoop 的 source1回调</p>
<p>如果此时在桌面，则交给桌面系统消耗该事件</p>
<p>如果此时在 APP，通过 IPC（进程通信）传给 APP 进程</p>
<h5 id="2-2-APP响应"><a href="#2-2-APP响应" class="headerlink" title="2.2 APP响应"></a>2.2 APP响应</h5><p>APP 进程的 mach port 接收到 SpringBoard 触摸事件，主线程 RunLoop 被唤醒，触发 source1 回调</p>
<p>source1 内部触发了 source0 回调，将接收的 IOHIDEvent 对象封装成 UIEvent 对象</p>
<p>source0 将事件添加到 UIApplication 对象的事件队列中，开始寻找最佳响应者</p>
<h5 id="2-3-应用"><a href="#2-3-应用" class="headerlink" title="2.3 应用"></a>2.3 应用</h5><ul>
<li>利用响应链获取 view 的控制器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension UIView &#123;</span><br><span class="line">    var viewController: UIViewController? &#123;</span><br><span class="line">        var next &#x3D; next</span><br><span class="line">        var current: UIViewController?</span><br><span class="line">        while next !&#x3D; nil &#123;</span><br><span class="line">            if next is UIViewController &#123;</span><br><span class="line">                return next as? UIViewController</span><br><span class="line">            &#125;</span><br><span class="line">            next &#x3D; next?.next</span><br><span class="line">        &#125;</span><br><span class="line">        return current</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3、面试题"><a href="#3、面试题" class="headerlink" title="3、面试题"></a>3、面试题</h4><ul>
<li>APP 中间有个 button，在你手触摸屏幕点击后，到这个 button 收到点击事件，中间发生了什么？</li>
</ul>
<ol>
<li>设备将 touch 到的 UITouch 和 UIEvent 对象打包，放到当前活动的 Application 的事件队列中</li>
<li>UIApplication 会从事件队列中取出触摸事件并传递给 UIWindow</li>
<li>UIWindow 使用 hitTest:withEvent 方法查找操作所在视图</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>二进制重排</title>
    <url>/2021/07/30/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/</url>
    <content><![CDATA[<p><a href="https://mp.weixin.qq.com/s/Drmmx5JtjG3UtTFksL6Q8Q">抖音二进制重排</a></p>
]]></content>
  </entry>
  <entry>
    <title>内存管理</title>
    <url>/2021/07/23/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h4 id="内存分布"><a href="#内存分布" class="headerlink" title="内存分布"></a>内存分布</h4><p>iOS 中的内存区域从低地址到高地址：.text 段（代码区）、.data 段（已初始化全局变量、静态变量）、.bss 段（未初始化全局变量、静态变量）、堆区、栈区</p>
<img src="内存分布.png" alt="内存分布" style="zoom:40%;" />

<p>堆区：</p>
<p>低地址向高地址拓展数据结构，不连续的内存区域，先进先出，由程序员动态分配和释放，通过 alloc 分配的对象</p>
<p>缺点：手动管理，速度慢，容易产生内存碎片</p>
<p>栈区：</p>
<p>高地址向低地址拓展的数据结构，连续内存区域，后进先出，一般运行时分配，编译器自动分配并释放</p>
<p>由编译器自动分配并释放，不会产生内存碎片，速度快，缺点：内存大小限制不灵活</p>
<h4 id="TaggedPointer"><a href="#TaggedPointer" class="headerlink" title="TaggedPointer"></a>TaggedPointer</h4><p>普通对象的查找过程：从栈中找到指针，然后去堆中寻找指针对应的内存空间，进而读取值</p>
<p>64 bit 开始，引入了 TaggedPointer 技术，用于优化 NSNumber、NSDate、NSString 等小对象存储</p>
<p>TaggedPointer 通过在其最后一个 bit 位设置一个特殊标记，用于将数据直接保存到指针本身</p>
<p>TaggedPointer 指针的值不再是堆区地址，而是真正的值。所以实际上它不再是一个对象了，内存并不存储在堆中</p>
<p>将对象的指针拆分成两部分，一部分直接保存数据，另一部分作为特殊标记，表示这是一个特殊指针，不指向任何一个地址</p>
<ul>
<li>引入 TaggedPointer 对象之后，64 位 CPU 下 NSNumber 的内存变成这样</li>
</ul>
<img src="nsnumber.png" alt="nsnumber" style="zoom:60%;" />



<ul>
<li>执行以下代码，有什么区别</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dispatch_queue_t queue &#x3D; dispatch_get_global_queue(0, 0);</span><br><span class="line">for (int i &#x3D; 0; i &lt; 1000; i++) &#123;</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        self.name &#x3D; [NSString stringWithFormat:@&quot;abcdefghij&quot;];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dispatch_queue_t queue &#x3D; dispatch_get_global_queue(0, 0);</span><br><span class="line">for (int i &#x3D; 0; i &lt; 1000; i++) &#123;</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        self.name &#x3D; [NSString stringWithFormat:@&quot;abc&quot;];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个会 Crash，第二个正常运行</p>
<p>第一个多线程同时访问 name 的 setter 方法，有可能多条线程同时执行 [_name release]，连续 release 两次造成对象的过度释放，导致 Crash</p>
<p>第二个 name 指针为 TaggedPointer 类型，不存在 release 操作</p>
<p>两个 name 的底层类型不一致，第一个 name 类型是 NSCFString 类型，存储在堆上，第二个 name 类型是NSTaggedPointerString 存储在常量区</p>
<p>NSString 对于那些所需内存小于 60 位的字符串，它可以创建一个 TaggedPointer，其余则被放置在真正的 NSString 对象里，这使得常用短字符串的性能得到提升</p>
<h4 id="NONPOINTER-ISA"><a href="#NONPOINTER-ISA" class="headerlink" title="NONPOINTER_ISA"></a>NONPOINTER_ISA</h4><p>和 TaggedPointer 设计思想类似，ISA 其实并不单单是一个指针，其中一些位仍旧编码指向对象的类，一部分额外空间存储其它内容</p>
<p>ISA 指针第 1 位表示使用优化的 ISA 指针</p>
<p>64 位架构下，ISA 指针本身占 64 位，64 位存储一个内存地址显然浪费，为了提高内存利用率，剩余比特位中存储了内存管理相关的内容</p>
<ul>
<li>nonpointer：表示是否对isa开启指针优化 。0代表是纯isa指针，1代表除了地址外，还包含了类的一些信息、对象的引用计数等</li>
<li>has_assoc：关联对象标志位</li>
<li>该对象是否有C++或Objc的析构器，如果有析构函数，则需要做一些析构的逻辑处理，如果没有，则可以更快的释放对象</li>
<li>shiftcls：存在类指针的值，开启指针优化的情况下，arm64位中有33位来存储类的指针</li>
<li>magic：判断当前对象是真的对象还是一段没有初始化的空间</li>
<li>weakly_referenced：是否被指向或者曾经指向一个ARC的弱变量，没有弱引用的对象释放的更快</li>
<li>deallocating：是否正在释放</li>
<li>has_sidetable_rc：当对象引用计数大于10时，则需要进位</li>
<li>extra_rc：表示该对象的引用计数值，实际上是引用计数减一。例如：如果引用计数为10，那么extra_rc为9。如果引用计数大于10，则需要使用has_sidetable_rc</li>
</ul>
<h4 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h4><p>当引用计数存储到一定值，并不会存储到 Nonpointer_isa 位域的 extra_rc 中，而是会存储到 SideTable 散列表中</p>
<p>在 runtime 内存空间中，SideTable 是一个 hash 数组，里面存储了 SideTable</p>
<p>SideTable 的 hash 键就是一个对象 obj 的 address，因此可以说，一个 obj，对应了一个 SideTable，但一个 SideTable 会对应多个 obj，因为SideTable 的数量有限，所有会有很多 obj 公用一个 SideTable</p>
<p>SideTable结构中包含了自旋锁、引用计数表、弱引用表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct SideTable &#123;</span><br><span class="line">    spinlock_t slock;       &#x2F;&#x2F; 自旋锁</span><br><span class="line">    RefcountMap refcnts;    &#x2F;&#x2F;引用计数的Map表 key-value</span><br><span class="line">    weak_table_t weak_table;&#x2F;&#x2F;弱引用表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>为什么不直接用一张SideTable，而是用SideTables去管理多个 SideTable</li>
</ul>
<p>SideTable 里有一个自旋锁，如果把所有的类都放在同一个 SideTable，有任何一个类有改动都会对整个 table 做操作，并且在操作一个类的同时，操作别的类会被锁住等待，这样会导致操作效率和查询效率都很低。而有多个SideTable 的话，操作的都是单个 Table，并不会影响其他的 table，这就是分离锁</p>
<h5 id="retain"><a href="#retain" class="headerlink" title="retain"></a>retain</h5><p>retain 底层先判断是否是 Nonpointer_isa，如果不是，则直接操作散列表进行 +1 操作<br>如果是 Nonpointer_isa，extra_rc 引用计数+1，extra_rc只有8位，如果出现上溢出，需要借助散列表存储，一半存储在散列表中，另一半还是存储在 extra_rc 中</p>
<h5 id="release"><a href="#release" class="headerlink" title="release"></a>release</h5><p>release 底层先判断是否是 Nonpointer_isa，如果不是，则直接操作散列表进行 -1 操作<br>如果是 Nonpointer_isa，extra_rc 引用计数-1，如果引用计数出现下溢出，看散列表中是否存储引用计数，从散列表中取一半进行 -1 操作，然后存储到 extra_rc 中，如果还是下溢出，就调用 dealloc</p>
<p><a href="https://www.infoq.cn/article/deep-understanding-of-tagged-pointer/">深入理解 TaggedPointer</a></p>
]]></content>
  </entry>
  <entry>
    <title>对象和方法底层原理</title>
    <url>/2020/12/01/%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h4 id="isa指针"><a href="#isa指针" class="headerlink" title="isa指针"></a>isa指针</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LGPerson *p  &#x3D; [LGPerson alloc];</span><br><span class="line">p.name &#x3D; @&quot;aa&quot;;</span><br><span class="line"></span><br><span class="line">Class cls1 &#x3D; [LGPerson class];</span><br><span class="line">Class cls2 &#x3D; p.class;</span><br><span class="line">Class cls3 &#x3D; object_getClass(p);</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;%p %p %p&quot;, cls1, cls2, cls3); &#x2F;&#x2F;打印结果相同 只有一个类对象</span><br><span class="line"></span><br><span class="line">Class cls4 &#x3D; objcet_getClass(cls3);</span><br></pre></td></tr></table></figure>

<p>实例对象   – <code>p</code><br>类对象       – <code>cls1</code><br>元类对象   – <code>cls4</code></p>
<p>实例对象所属的类  -&gt; 类对象（<code>class</code>）<br>类对象所属的类      -&gt; 元类    （<code>meta-class</code>）<br>元类所属                  -&gt; 根元类（基类的<code>meta-class</code>）<br>根元类所属              -&gt; 自己</p>
<ul>
<li><p>根元类的父类是<code>NSObject</code> ，<code>NSObject</code> 的父类是 <code>nil</code></p>
</li>
<li><p><code>Class</code> 的 <code>superclass</code> 指向父类的 <code>class</code>，如果没有父类，<code>superclasss</code> 指针为 <code>nil</code></p>
</li>
<li><p><code>meta-class</code> 的 <code>superclass</code> 指向父类的 <code>meta-class</code>，基类的 <code>meta-class</code> 的 <code>superclass</code> 指向基类的 <code>class</code></p>
</li>
</ul>
<h4 id="实例对象调用对象方法"><a href="#实例对象调用对象方法" class="headerlink" title="实例对象调用对象方法"></a>实例对象调用对象方法</h4><p><img src="/2020/12/01/%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1%E8%B0%83%E7%94%A8%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95.png" alt="实例对象调用对象方法"></p>
<p>对于 <code>student</code> 来说，并不知道 <code>abc</code> 方法在哪里，唯一知道的就是可以去它的 <code>class对象</code> 里找</p>
<p>先通过 <code>isa</code> 指针进入 <code>Student</code> 类的 <code>class对象</code>，如果在其中找到了 <code>abc</code> 就直接进行调动，调用过程结束</p>
<p>没有找到的话，就通过<code> class对象</code>的 <code>superclass</code> 指针进入 <code>Student</code> 类的父类，也就是 <code>Person</code>类的 <code>class对象</code>，重复上一步的查找逻辑</p>
<p>一层层往上找，最终到基类，也就是 <code>NSObject</code> 类的 <code>class对象</code>，还没找到的话，由于它的 <code>superclass</code> 为 nil，最终就会报错 <code>[ERROR: unrecognized selector sent to instance]</code>，调用结束</p>
<h4 id="类对象调用类方法"><a href="#类对象调用类方法" class="headerlink" title="类对象调用类方法"></a>类对象调用类方法</h4><p><img src="/2020/12/01/%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/%E7%B1%BB%E5%AF%B9%E8%B1%A1%E8%B0%83%E7%94%A8%E7%B1%BB%E6%96%B9%E6%B3%95.png" alt="类对象调用类方法"></p>
<p>对于<code> Student</code>类来说，并不知道 <code>abc</code> 方法在哪里，我们知道类方法放在 <code>meta-class</code>对象里面</p>
<p>首先通过 <code>Student</code> 的 <code>class对象</code> 的 <code>isa</code> 指针找到其 <code>meta-class</code>对象，然后在方法列表里找是否有<code>abc</code>，如果有的话就调用，调用结束</p>
<p>如果没有的话，就通过 <code>meta-class</code> 对象的 <code>superclass</code> 指针找到 <code>Student</code> 的父类 <code>Person</code> 的<code>meta-class</code>对象，然后查找<code>abc</code>方法，如果有的话就调用，调用结束</p>
<p>没有的话，通过<code>meta-class</code>对象的<code>superclass</code>指针一层层往上查找</p>
<p>如果到了基类<code>（NSObject）</code>的<code>meta-class</code>还没找到<code>abc</code>，接下来 <code>superclass</code> 指针会找到 <code>NSObject</code> 的<code>class对象</code>，此时会继续在 <code>NSObject</code> 的 <code>class对象</code> 里面，寻找 <code>abc</code>，如果找到就会调用</p>
<p>如果没有找到，由于此时 <code>superclass</code> 是 <code>nil</code> ，最终系统会报错</p>
<h4 id="验证isa指针指向"><a href="#验证isa指针指向" class="headerlink" title="验证isa指针指向"></a>验证isa指针指向</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LGPerson *person &#x3D; [[LGPerson alloc] init];</span><br><span class="line">Class personClass &#x3D; [LGPerson class];</span><br><span class="line">Class personMetaClass &#x3D; object_getClass(personClass);</span><br><span class="line">NSLog(@&quot;%p %p %p&quot;, person, personClass, personMetaClass);</span><br></pre></td></tr></table></figure>

<p>打断点，LLDB调试打印 <code>person</code> 对象的 <code>isa</code> 指针</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(lldb) p&#x2F;x person-&gt;isa</span><br><span class="line">(Class) $1 &#x3D; 0x000001a1044bd715 LGPerson</span><br><span class="line">(lldb) p&#x2F;x personClass</span><br><span class="line">(Class) $2 &#x3D; 0x00000001044bd710 LGPerson</span><br></pre></td></tr></table></figure>

<p>通过 <code>p/x</code> 命令打印指针，<code>/</code>后面是打印参数，<code>x</code> 表示用 16 进制输出</p>
<p>可以看到输出结果并不相等</p>
<p>实例对象 <code>person 的 isa = 0x000001a1044bd715</code></p>
<p>类对象 <code>personClass = 0x00000001044bd710</code></p>
<p>从 64bit 开始，<code>isa</code> 需要进行一次位运算，才能计算出 <code>class对象</code> 的地址，系统提供了 <code>ISA_MASK</code>，在 <a href="https://opensource.apple.com/tarballs/objc4/">objc4</a> 的源码中可以找到</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">objc_object::ISA() </span><br><span class="line">&#123;</span><br><span class="line">    assert(!isTaggedPointer()); </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SUPPORT_INDEXED_ISA</span></span><br><span class="line">    <span class="keyword">if</span> (isa.nonpointer) &#123;</span><br><span class="line">        <span class="keyword">uintptr_t</span> slot = isa.indexcls;</span><br><span class="line">        <span class="keyword">return</span> classForIndex((<span class="keyword">unsigned</span>)slot);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (Class)isa.bits;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> (Class)(isa.bits &amp; ISA_MASK);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">if</span> __arm64__</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> ISA_MASK        0x0000000ffffffff8ULL</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">elif</span> __x86_64__</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> ISA_MASK        0x00007ffffffffff8ULL</span></span><br></pre></td></tr></table></figure>

<p>验证结果，通过和 <code>ISA_MASK</code>进行一次 <code>&amp;</code> 运算，得到了类对象 <code>personClass</code> 的地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(lldb) p&#x2F;x 0x000001a1044bd715 &amp; 0x0000000ffffffff8ULL</span><br><span class="line">(unsigned long long) $4 &#x3D; 0x00000001044bd710</span><br></pre></td></tr></table></figure>

<h4 id="objc-class"><a href="#objc-class" class="headerlink" title="objc_class"></a>objc_class</h4><p>查看源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> :</span> objc_object &#123;</span><br><span class="line">    <span class="comment">// Class ISA;			//isa占8字节</span></span><br><span class="line">    Class superclass; <span class="comment">//8字节</span></span><br><span class="line">    <span class="keyword">cache_t</span> cache;    <span class="comment">//16字节         // formerly cache pointer and vtable</span></span><br><span class="line">    <span class="keyword">class_data_bits_t</span> bits;    <span class="comment">// class_rw_t * plus custom rr/alloc flags</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">class_rw_t</span> *<span class="title">data</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> bits.data();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到 <code>class_rw_t</code> 看字面意思是可读可写的表，进入查看</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">class_rw_t</span> &#123;</span></span><br><span class="line">    <span class="comment">// Be warned that Symbolication knows the layout of this structure.</span></span><br><span class="line">    <span class="keyword">uint32_t</span> flags;</span><br><span class="line">    <span class="keyword">uint32_t</span> version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">class_ro_t</span> *ro;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">method_array_t</span> methods;				<span class="comment">//方法列表</span></span><br><span class="line">    <span class="keyword">property_array_t</span> properties;  <span class="comment">//属性列表</span></span><br><span class="line">    <span class="keyword">protocol_array_t</span> protocols;   <span class="comment">//协议列表</span></span><br></pre></td></tr></table></figure>

<p>方法、属性、协议信息都放在这里，还有一个 <code>class_ro_t</code> 只读表，进入查看哪些是只读的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">class_ro_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> flags;</span><br><span class="line">    <span class="keyword">uint32_t</span> instanceStart;</span><br><span class="line">    <span class="keyword">uint32_t</span> instanceSize;	<span class="comment">//实例对象size</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __LP64__</span></span><br><span class="line">    <span class="keyword">uint32_t</span> reserved;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint8_t</span> * ivarLayout;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * name;			<span class="comment">//类名</span></span><br><span class="line">    <span class="keyword">method_list_t</span> * baseMethodList;</span><br><span class="line">    <span class="keyword">protocol_list_t</span> * baseProtocols; <span class="comment">//成员变量描述信息，如名称，类型等</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">ivar_list_t</span> * ivars;</span><br></pre></td></tr></table></figure>

<h4 id="通过MachO文件查找类和方法列表"><a href="#通过MachO文件查找类和方法列表" class="headerlink" title="通过MachO文件查找类和方法列表"></a>通过MachO文件查找类和方法列表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   Person *p &#x3D; [[Person alloc] init];</span><br><span class="line">   p.name &#x3D; @&quot;pname&quot;;</span><br><span class="line">   p.age  &#x3D; 20;</span><br><span class="line">   NSLog(@&quot;%p&quot;, [p class]); &#x2F;&#x2F;0x100cc9718</span><br><span class="line">-&gt; NSLog(@&quot;end&quot;);</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<p><code>image list</code> 查看偏移量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(lldb) image list</span><br><span class="line">[  0] E4FC76C2-878C-31CA-AB74-26EF8D1204D5 0x0000000100cc0000 &#x2F;</span><br><span class="line">xxx&#x2F;Build&#x2F;Products&#x2F;Debug-iphoneos&#x2F;Test.app&#x2F;Test </span><br></pre></td></tr></table></figure>

<p>计算内存地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(lldb) p&#x2F;x 0x100cc9718-0x0000000100cc0000</span><br><span class="line">(long) $0 &#x3D; 0x0000000000009718</span><br></pre></td></tr></table></figure>

<p>将<code>Products/Debug-iphoneos/Test.app/Test</code> 目录下的可执行文件拖入到 <code>MachOView</code></p>
<p><img src="/2020/12/01/%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/MachOView.jpg" alt="MachOView"></p>
<h4 id="isKindOfClass-isMemberOfClass"><a href="#isKindOfClass-isMemberOfClass" class="headerlink" title="isKindOfClass isMemberOfClass"></a>isKindOfClass isMemberOfClass</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL re1 &#x3D; [(id)[NSObject class] isKindOfClass:[NSObject class]];</span><br><span class="line">BOOL re2 &#x3D; [(id)[LGPerson class] isKindOfClass:[LGPerson class]];</span><br><span class="line">BOOL re3 &#x3D; [(id)[NSObject class] isMemberOfClass:[NSObject class]];</span><br><span class="line">BOOL re4 &#x3D; [(id)[LGPerson class] isMemberOfClass:[LGPerson class]];</span><br><span class="line">NSLog(@&quot; re1 :%hhd\n re2 :%hhd\n re3 :%hhd\n re4 :%hhd\n&quot;,re1,re2,re3,re4);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;ret3 传入类NSObject self指向NSObject self-&gt;ISA()指向根元类 根元类和NSObject不相等</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;iskindOfClass &amp; isMemberOfClass 实例方法调用</span><br><span class="line">BOOL re5 &#x3D; [(id)[NSObject alloc] isKindOfClass:[NSObject class]];</span><br><span class="line">BOOL re6 &#x3D; [(id)[LGPerson alloc] isKindOfClass:[LGPerson class]];</span><br><span class="line">BOOL re7 &#x3D; [(id)[NSObject alloc] isMemberOfClass:[NSObject class]];</span><br><span class="line">BOOL re8 &#x3D; [(id)[LGPerson alloc] isMemberOfClass:[LGPerson class]];</span><br><span class="line">NSLog(@&quot; re5 :%hhd\n re6 :%hhd\n re7 :%hhd\n re8 :%hhd\n&quot;,re5,re6,re7,re8);</span><br><span class="line"></span><br><span class="line">ret1: 1</span><br><span class="line">ret2: 0</span><br><span class="line">ret3: 0</span><br><span class="line">ret4: 0</span><br><span class="line"></span><br><span class="line">ret5: 1</span><br><span class="line">ret6: 1</span><br><span class="line">ret7: 1</span><br><span class="line">ret8: 1</span><br></pre></td></tr></table></figure>

<ul>
<li>isKindOfClass</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;类方法 </span><br><span class="line">&#x2F;&#x2F;第一次比较，获取类的元类与传入类比较，之后获取上次结果的父类与传入类比较</span><br><span class="line">+ (BOOL)isKindOfClass:(Class)cls &#123;</span><br><span class="line">     &#x2F;&#x2F;类的元类 vs 传入类</span><br><span class="line">     &#x2F;&#x2F;根元类 vs 传入类</span><br><span class="line">     &#x2F;&#x2F;根类 vs 传入类</span><br><span class="line">     &#x2F;&#x2F;nil vs 传入类</span><br><span class="line">     for (Class tcls &#x3D; self-&gt;ISA(); tcls; tcls &#x3D; tcls-&gt;getSuperclass()) &#123;</span><br><span class="line">         if (tcls &#x3D;&#x3D; cls) return YES;</span><br><span class="line">     &#125;</span><br><span class="line">     return NO;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;实例方法 </span><br><span class="line">&#x2F;&#x2F;第一次比较，获取对象的类与传入类比较，之后获取上次结果的父类与传入类比较</span><br><span class="line"> - (BOOL)isKindOfClass:(Class)cls &#123;</span><br><span class="line">     &#x2F;&#x2F;对象的类 vs 传入类</span><br><span class="line">     &#x2F;&#x2F;父类 vs 传入类</span><br><span class="line">     &#x2F;&#x2F;根类 vs 传入类</span><br><span class="line">     &#x2F;&#x2F;nil vs 传入类</span><br><span class="line">     for (Class tcls &#x3D; [self class]; tcls; tcls &#x3D; tcls-&gt;getSuperclass()) &#123;</span><br><span class="line">         if (tcls &#x3D;&#x3D; cls) return YES;</span><br><span class="line">     &#125;</span><br><span class="line">     return NO;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>类方法：元类 -&gt; 根元类 -&gt; 根类 -&gt; nil 与 传入类比较<br>对象方法：对象的类 -&gt; 父类 -&gt; 根类 -&gt; nil 与 传入类比较</p>
<ul>
<li>isMemberOfClass</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;类方法 </span><br><span class="line">&#x2F;&#x2F;获取类的元类 与传入类比较</span><br><span class="line">+ (BOOL)isMemberOfClass:(Class)cls &#123;</span><br><span class="line">     return self-&gt;ISA() &#x3D;&#x3D; cls;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;实例方法 </span><br><span class="line">&#x2F;&#x2F;获取对象的类 与传入类比较</span><br><span class="line"> - (BOOL)isMemberOfClass:(Class)cls &#123;</span><br><span class="line">     return [self class] &#x3D;&#x3D; cls;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>类方法：    类的元类 与 传入类 比较<br>对象方法：对象的父类 与 传入类 比较</p>
<p><a href="https://blog.csdn.net/u013480070/article/details/100154183">对象的本质（下）详解isa&amp;superclass指针</a></p>
]]></content>
  </entry>
  <entry>
    <title>测试下</title>
    <url>/2020/11/17/%E6%B5%8B%E8%AF%95%E4%B8%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>分类1</category>
      </categories>
      <tags>
        <tag>标签1</tag>
      </tags>
  </entry>
  <entry>
    <title>逆</title>
    <url>/2021/03/31/%E9%80%86/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="72532eea066a4da146eb47dadaf84eae9b7a8370881c3e752edf5432c1f21e4f">6a0984f7a8e89a416916236f779221ce3fd2c4dcefac971b9ac8b0dfe88c8e46334c272f445ecc37ad2ff29ebc86c61b795b2bdd3ba96e9dc0312d782588f3cb55a66a01be0215453842d96a281db9303caec9bb73de782bc345e2ee9c2109549031e91b8f54c589e56cd95adc18592a272832103cd750c72d5021192aadfa386c3b355150f4376389da11d8e6d3b79ced6064535d03fcf12e8ad72c4f67d5196a2943dcd69dc9298ed2857ce03fc372809a9251c876b0605369c29361d02c80082e6af9060a3ffd5060671e8c286a72e29105bbd27fa3f7b643f885e6358b85ff761f1ad49fab37b1ac11b5c2879ec671eb393c01cc40b340f9b79fc36fbde6a6410ef6c65aa67281b7d616fc5b3f61a46de02ff4c1593f6a6e0fdd335e1fbecc015c033058d04b0f3796d88a5b639a8e502e8e36230ca5c175c600a08c9c0d2544b0a55b0dea027beb482f30bdb73be6d93f6f5941cf27106f9fc6b9ab45ae4bfab5cc357a1e09dd39af815aab12482e54376b299f8314af335ee9b4d19eec71138ac45872addfb03fde20d695503a1e6d89628fe5556b283bab9d641155c408aa20e621089921bc38a2226e5441d38eb1919e96ea5ccc7aa3ad50072925f12f1dc0c96f62927c180c49ff6629d59450382c0f7d5e51d84b376c68d7dc5d04323da77a82ba1c2f7d50e0b7f152589b9c4c83252fa4c75ef735d4070c51ba0e54ef82fe489ad56b19dc589056ad5348a4a3ac10df2c1fc258ec69bcc7540833af19ebeb43910353062e1a7f9afc05f682f6ee81dc998ed50bb091b3601db2e03db2d9afae8dc1e81592accf3ec79df755ed9261abcc7219cef7d94201dc8ca57f64781627c4b2eae6c57a4597ff77a3c7ef700615a774a5f42db7e39d39007c53c58b66d76619b0b979ddf6504860c6947e50f63be2a4c9f03efb22ff02259d9a7b664d33bf3aada6808a148bda07bc170ca2ca19bc069b49691ebb20db4f23cd61022657739942380ccf836e709424cc037cb464fab6ee3bdd4a5c325ed262ba1f61c704768fe90ef06daa72e4dd6dd00826a76be1a1c902cbbdb1fde547ac2df339616028bd8f213baa018b39f618cdec6274f0f0a72ab9e48a28c86496c60a522b6430e78f6837d54ab3b6abf57e6f825a2d2e96376e63f056881fee71a01cb345dcf559d6db14adc6da9d27b8f300972ea9333f7a33acd9f709b5229defb2fa2143718fa1119777a150ff8e18bbfdec179d55d7cca38daeb9bf7aefff3f1e5da36cd74725b78e80d16de9bfaf93d8a1f12dd51a7ae6b78ba34697edfb0d917beccfccb00f2d34d9df69c080b4e1</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>逆</category>
      </categories>
      <tags>
        <tag>逆</tag>
      </tags>
  </entry>
  <entry>
    <title>消息流程</title>
    <url>/2021/07/29/%E6%B6%88%E6%81%AF%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="方法的本质"><a href="#方法的本质" class="headerlink" title="方法的本质"></a>方法的本质</h4><p>使用 clang 编译 main.m 文件 <code>clang -rewrite-objc main.m</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LGPerson *person &#x3D; [LGPerson alloc];</span><br><span class="line">[person sayHello];</span><br></pre></td></tr></table></figure>

<p>编译后的底层实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">LGPerson *person = ((LGPerson *(*)(id, SEL))(<span class="keyword">void</span> *)objc_msgSend)((id)objc_getClass(<span class="string">&quot;LGPerson&quot;</span>), sel_registerName(<span class="string">&quot;alloc&quot;</span>));</span><br><span class="line">((<span class="keyword">void</span> (*)(id, SEL))(<span class="keyword">void</span> *)objc_msgSend)((id)person, sel_registerName(<span class="string">&quot;say&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>可以看出，方法的调用本质就是 objc_msgSend消息发送</p>
<h4 id="objc-msgSend-快速查找"><a href="#objc-msgSend-快速查找" class="headerlink" title="objc_msgSend 快速查找"></a>objc_msgSend 快速查找</h4><h4 id="objc-msgSend-慢速查找"><a href="#objc-msgSend-慢速查找" class="headerlink" title="objc_msgSend 慢速查找"></a>objc_msgSend 慢速查找</h4><h4 id="动态方法解析"><a href="#动态方法解析" class="headerlink" title="动态方法解析"></a>动态方法解析</h4><p>如果 LGPerson 类中没有实现 sayHello 方法，runtime 就会调用</p>
<p> <code>resolveInstanceMethod:(实例方法)</code> 或者  <code>resolveClassMethod:(类方法)</code> </p>
<p>我们可以在方法中新增已实现的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)sayAddHello &#123;</span><br><span class="line">    NSLog(@&quot;say add hello&quot;);</span><br><span class="line">&#125;</span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    if (sel &#x3D;&#x3D; @selector(sayHello)) &#123;</span><br><span class="line">        IMP addImp &#x3D; class_getMethodImplementation(self, @selector(sayAddHello));</span><br><span class="line">        Method addMethod &#x3D; class_getInstanceMethod(self, @selector(sayAddHello));</span><br><span class="line">        const char *type &#x3D; method_getTypeEncoding(addMethod);</span><br><span class="line">        return class_addMethod(self, sel, addImp, type);</span><br><span class="line">    &#125;</span><br><span class="line">    return [super resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void runAddMethod(id self, SEL _cmd)&#123;</span><br><span class="line">    NSLog(@&quot;add C IMP&quot;);</span><br><span class="line">&#125;</span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    if ([NSStringFromSelector(sel) isEqualToString:@&quot;sayHello&quot;]) &#123;</span><br><span class="line">        class_addMethod(self, sel, (IMP)runAddMethod, &quot;v@:*&quot;);</span><br><span class="line">        return YES;</span><br><span class="line">    &#125;</span><br><span class="line">    return [super resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="消息转发"><a href="#消息转发" class="headerlink" title="消息转发"></a>消息转发</h4><p>如果动态方法解析没有处理，进入消息转发流程</p>
<ol>
<li>进入快速转发</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface LGTeacher : NSObject</span><br><span class="line">- (void)sayHello;</span><br><span class="line">@end</span><br><span class="line">@implementation LGTeacher</span><br><span class="line">- (void)sayHello &#123;</span><br><span class="line">    NSLog(@&quot;Teacher sayhello&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p>LGTeacher 中实现了 sayHello 方法，将消息转发给 LGTeacher 处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    if (aSelector &#x3D;&#x3D; @selector(sayHello)) &#123;</span><br><span class="line">        return [LGTeacher alloc];</span><br><span class="line">    &#125;</span><br><span class="line">    return [super forwardingTargetForSelector:aSelector];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>快速转发没有处理，则进入慢速转发</li>
</ol>
<p><code>methodSignatureForSelector</code> 方法返回方法的签名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">    if (aSelector &#x3D;&#x3D; @selector(sayHello)) &#123;</span><br><span class="line">        return [NSMethodSignature signatureWithObjCTypes:&quot;v@:&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">    return [super methodSignatureForSelector:aSelector];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>forwardInvocation</code> 真正执行由 methodSignatureForSelector 返回的 NSMethodSignature</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation &#123;</span><br><span class="line">    SEL aSelector &#x3D; [anInvocation selector];</span><br><span class="line">    LGTeacher *teacher &#x3D; [LGTeacher alloc];</span><br><span class="line">    if ([teacher respondsToSelector:aSelector]) &#123;</span><br><span class="line">        [anInvocation invokeWithTarget:teacher];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        [super forwardInvocation:anInvocation];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>OC 消息机制可以分为三个阶段：</p>
<p>消息发送阶段：从类和父类的方法缓存列表、方法列表中查找方法</p>
<p>动态解析阶段：如果消息发送阶段没找到方法，进入动态方法解析，动态添加方法实现</p>
<p>消息转发阶段：如果也没有实现动态解析方法，进入消息转发阶段，将消息转发给可以处理消息的接受者</p>
<img src="消息处理.png" alt="消息处理" style="zoom:67%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void runAddMethod(id self, SEL _cmd)&#123;</span><br><span class="line">    NSLog(@&quot;add C IMP&quot;);</span><br><span class="line">&#125;</span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    if ([NSStringFromSelector(sel) isEqualToString:@&quot;sayHello&quot;]) &#123;</span><br><span class="line">    		class_addMethod(self, sel, (IMP)runAddMethod, &quot;v@:*&quot;);</span><br><span class="line">   		  return YES;</span><br><span class="line">    &#125;</span><br><span class="line">    return [super resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>objc_msgSend 发送消息流程：</p>
<p>消息发送者先进行 <code>快速查找流程</code> ，在类的缓存cache中查找方法</p>
<p>快速查找流程没找到，走慢速查找流程，实例方法在当前类及类的继承链的方法列表中查找，类方法在元类及元类继承链的方法列表中查找</p>
<p>慢速查找没找到会进行动态方法解析</p>
<p>动态方法解析没有找到会进入消息转发，快速消息转发和慢速消息转发</p>
<p>没有找到最终报异常：unrecognized selector send to instance</p>
]]></content>
  </entry>
  <entry>
    <title>逆向-安全保护</title>
    <url>/2021/11/12/%E9%80%86%E5%90%91-%E5%AE%89%E5%85%A8%E4%BF%9D%E6%8A%A4/</url>
    <content><![CDATA[<p>加固方案：</p>
<p>数据加密：静态字符串、本地存储及网络传输的加密</p>
<p>静态混淆：类名、方法名、属性的混淆</p>
<p>动态保护：反调试、注入检测、hook检测、越狱检测、签名检测等</p>
<p>代码混淆：将代码分块、扁平化、增加干扰代码，提高分析难度</p>
<h4 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h4><p>加密算法：</p>
<ul>
<li>BASE64：一种基于64个可打印字符表示二进制数据的方法，主要为了将二进制数据变成可见字符以便传输，可以解密</li>
<li>MD5：将数据运算变成另一个固定长度值，用于数据校验，不可逆</li>
<li>DES：一种对称加密算法，用于对二进制数据进行加密，明文、密文和秘钥的分组长度都是64</li>
<li>AES：密码学中的高级加密标准，本质上是一种对称分组密码体制，用来代替DES</li>
<li>RSA：一种非对称加密算法，存在一个公钥和一个私钥，分别用于加密和解密，速度比对称加密慢很多</li>
</ul>
<p>对称加密：加密解密使用同一秘钥</p>
<p>非对称加密：存在一个公钥和一个私钥</p>
<h5 id="本地存储加密"><a href="#本地存储加密" class="headerlink" title="本地存储加密"></a>本地存储加密</h5><p>本地存储方式：NSUserDefaults、文件、数据库</p>
<p>存储数据时，可以使用哈希算法、对称加密算法（DES/AES）进行加密存储，或者系统 keychain 进行存储，实现加密算法时也不能将 key 以明文形式写在代码中</p>
<h5 id="网络传输加密"><a href="#网络传输加密" class="headerlink" title="网络传输加密"></a>网络传输加密</h5><p>HTTPS + 本地证书校验方式</p>
<p>传输过程中可以使用 RSA+AES 进行加密传输</p>
<ol>
<li>客户端随机生成 AES 的key</li>
<li>使用 RSA 公钥加密算法加密随机的 key</li>
<li>使用随机的 key 对数据进行 AES 加密</li>
<li>将 RSA 加密后的 key 和 AES 加密后的数据发送给服务器</li>
<li>给发送的数据加上时间戳，以防止重放攻击</li>
</ol>
<img src="逆向-安全保护/WeChatd746b59be5c7fc2ddd3741f286c2db2f.png" alt="WeChatd746b59be5c7fc2ddd3741f286c2db2f"/>



<p>AFNetworking 证书校验</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NSString *certFilePath &#x3D; [[NSBundle mainBundle] pathForResource:@&quot;server&quot; ofType:@&quot;der&quot;];</span><br><span class="line">NSData *certData &#x3D; [NSData dataWithContentsOfFile:certFilePath];</span><br><span class="line">NSSet *certSet &#x3D; [NSSet setWithObject:certData];</span><br><span class="line">AFSecurityPolicy *policy &#x3D; [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate withPinnedCertificates:certSet];</span><br></pre></td></tr></table></figure>

<h5 id="字符串加密"><a href="#字符串加密" class="headerlink" title="字符串加密"></a>字符串加密</h5><h4 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h4><h5 id="ptrace"><a href="#ptrace" class="headerlink" title="ptrace"></a>ptrace</h5><p>ptrace 提供了一个 PT_DENY_ATTACH 参数，告诉系统阻止调试器附加</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PT_DENY_ATTACH</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PT_DENY_ATTACH 31</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法1声明 ptrace函数否则不能编译</span></span><br><span class="line"><span class="keyword">int</span> ptrace(<span class="keyword">int</span> _request, pid_t _pid, caddr_t _addr, <span class="keyword">int</span> _data);</span><br><span class="line"><span class="keyword">static</span> __attribute__((always_inline)) <span class="keyword">void</span> Anti0()&#123;</span><br><span class="line">  ptrace(PT_DENY_ATTACH, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"><span class="keyword">static</span> __attribute__((always_inline))<span class="keyword">void</span> Anti1()&#123;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">int</span>(*ptrace_ptr_t)(int_request, pid_t _pid, caddr_t _addr, <span class="keyword">int</span> _data);</span><br><span class="line">  <span class="keyword">void</span> *handle = dlopen(<span class="number">0</span>, RTLD_GLOBAL | RTLD_NOW);</span><br><span class="line">  ptrace_ptr_t ptrace_ptr = (ptrace_ptr_t)dlsym(handle, <span class="string">&quot;ptrace&quot;</span>);</span><br><span class="line">  ptrace_ptr(PT_DENY_ATTACH, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="sysctl"><a href="#sysctl" class="headerlink" title="sysctl"></a>sysctl</h5><p>当目标进程被调试的时候，会有一个标志表明自己正在被调试，可以通过 sysctl 查看当前进程的信息，从这个标志位得到当前的调试状态</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sysctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> __attribute__((always_inline))<span class="keyword">void</span> Anti2() &#123;</span><br><span class="line">  <span class="keyword">int</span> name[] = &#123; <span class="built_in">CTL_KERN</span>, KERN_PROC, KERN_PROC_PID, getpid() &#125;;</span><br><span class="line">  u_int nameLen = <span class="keyword">sizeof</span>(name)/<span class="keyword">sizeof</span>(*name);</span><br><span class="line">  <span class="keyword">struct</span> kinfo_proc oldp;</span><br><span class="line">  size_t oldlenp = <span class="keyword">sizeof</span>(oldp);</span><br><span class="line">  <span class="keyword">int</span> result = sysctl(name, nameLen, &amp;oldp, &amp;oldlenp, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span>(result==<span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="comment">//错误处理</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((oldp.ke_proc.p_flag &amp; P_TRACED) != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//添加自己的逻辑 崩溃、暗桩、退出等</span></span><br><span class="line">    exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h5><p>为了实现从用户态切换到内核态，系统提供了 syscall 函数</p>
<p>ptrace 也是通过系统调用去实现的，sys/syscall.h 中可以找到 ptrace 对应的编号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define SYS_ptrace 26</span><br></pre></td></tr></table></figure>

<p>以下代码等同于调用 ptrace</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="keyword">static</span> __attribute__((always_inline))<span class="keyword">void</span> Anti3() &#123;</span><br><span class="line">	syscall(SYS_ptrace, PT_DENY_ATTACH, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="svc"><a href="#svc" class="headerlink" title="svc"></a>svc</h5><p>若不想暴露自己的ptrace等系统方法，不想被符号断点中断，可以采用 syscall 的汇编代码来调试 ptrace，实现从用户态到内核态的切换</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> __attribute__((always_inline))<span class="keyword">void</span> Anti4() &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __arm64__</span></span><br><span class="line">  <span class="keyword">asm</span>(</span><br><span class="line">  	<span class="string">&quot;mov x0,#31\n&quot;</span></span><br><span class="line">    <span class="string">&quot;mov x1,#0\n&quot;</span></span><br><span class="line">    <span class="string">&quot;mov x2,#0\n&quot;</span></span><br><span class="line">    <span class="string">&quot;mov x3,#0\n&quot;</span></span><br><span class="line">    <span class="string">&quot;mov w16,#26\n&quot;</span> <span class="comment">//26 --&gt;ptrace</span></span><br><span class="line">    <span class="string">&quot;svc #0x80&quot;</span> <span class="comment">//0x80触发中断去找w16执行</span></span><br><span class="line">  );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>w16 的参考值可以在 sys/syscall.h 中找到，IDA会将此段代码识别为 mac_syscall</p>
<h5 id="isatty"><a href="#isatty" class="headerlink" title="isatty"></a>isatty</h5><p>检测文件描述符是否连接到一个终端设备，如果是返回1，而 LLDB 调试时需要远程连接 iOS 设备，因此可以用它来做反调试</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> __attribute__((always_inline))<span class="keyword">void</span> Anti6() &#123;</span><br><span class="line">	<span class="keyword">if</span> (isatty(STDOUT_FILENO)) &#123;</span><br><span class="line">    exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="反反调试"><a href="#反反调试" class="headerlink" title="反反调试"></a>反反调试</h4><p>ptrace、sysctl、syscall 反反调试</p>
<p>对于 SVC 汇编层的反调试绕过方法，使用 HookZzModules 来解决</p>
<p><a href="https://github.com/jmpews/HookZzModules/tree/master/AntiDebugBypass">https://github.com/jmpews/HookZzModules/tree/master/AntiDebugBypass</a></p>
<h4 id="注入对抗"><a href="#注入对抗" class="headerlink" title="注入对抗"></a>注入对抗</h4><p>注入的方式通常使用 DYLD_INSERT_LIBRARIES 环境变量将 dylib 注入</p>
<p>自己编写的 dylib 无法加载到目标应用的时候，表明应用做了反注入保护。</p>
<p>iOS10以下系统</p>
<p>在Xcode的编译设置选项  Other Linker Flags 添加 <code> -Wl,-sectcreate,__RESTRICT,__restrict,/dev/null</code>, </p>
<p>dyld 检测到 MachO中存在 <code>__RESTRICT,__restrict</code> 这样的节（Section）时，DYLD_INSERT_LIBRARIES 环境变量会被忽略，导致注入失败。</p>
<p>反反注入：</p>
<ol>
<li>把section的名字修改下（如果主程序同时具备完整性检测那就不行了）</li>
<li>使用Cydia自带的cynject工具注入，可以无惧主程序完整性检测 <code>/usr/bin/cynject&lt;pid&gt;&lt;dylib&gt;</code></li>
</ol>
<h4 id="注入检测"><a href="#注入检测" class="headerlink" title="注入检测"></a>注入检测</h4><h5 id="检测加载模块"><a href="#检测加载模块" class="headerlink" title="检测加载模块"></a>检测加载模块</h5><p>判断加载模块中是否存在一些已知的敏感路径（比如DynamicLibraries）使用 <code>_dyld_get_image_name</code> 获取模块名，然后进行匹配</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mach-o/dyld.h&gt;</span></span></span><br><span class="line">BOOK CheckInject() &#123;</span><br><span class="line">	<span class="keyword">int</span> count = _dyld_image_count();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;count; i++)&#123;</span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">char</span> *image_name = _dyld_get_image_name(i);</span><br><span class="line">		<span class="comment">//printf(&quot;image_name=%s\n&quot;, image_name);</span></span><br><span class="line">		<span class="keyword">if</span>(strstr(image_name, <span class="string">&quot;DynamicLibraries&quot;</span>) || strstr(image_name, <span class="string">&quot;CydiaSubstrate&quot;</span>)) &#123;</span><br><span class="line">			printf(<span class="string">&quot;三方库被注入 ---&gt; %s&quot;</span>, image_name);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还可以逐个检测 Mach-O 的 LoadCommand，以防被类似 yololib 的工具注入 dylib</p>
<h5 id="检测环境变量"><a href="#检测环境变量" class="headerlink" title="检测环境变量"></a>检测环境变量</h5><p>注入环境虽说不一定依赖 CydiaSubstrate，但原理都是通过 DYLD_INSERT_LIBRARIES 注入 dylib，因此可以通过检测环境变量来确定是否被注入</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">BOOL</span> CheckEnv() &#123;</span><br><span class="line">  <span class="keyword">char</span> *env = getenv(<span class="string">&quot;DYLD_INSERT_LIBRARIES&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (env != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    printf(<span class="string">&quot;env=%s&quot;</span>, env);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> **environ;</span><br><span class="line"><span class="built_in">BOOL</span> CheckEnv2()&#123;</span><br><span class="line">  <span class="keyword">char</span> **p = environ;</span><br><span class="line">  <span class="keyword">while</span>(*p) &#123;</span><br><span class="line">    <span class="keyword">if</span>(strstr(*p, <span class="string">&quot;MobileSubstrate&quot;</span>) || strstr(*p, <span class="string">&quot;DYLD_INSERT_LIBRARIES&quot;</span>)) &#123;</span><br><span class="line">      printf(<span class="string">&quot;%s (%p)\n&quot;</span>, *p, *p);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果返回NO表明没有被注入</p>
<h5 id="实时监控dylib"><a href="#实时监控dylib" class="headerlink" title="实时监控dylib"></a>实时监控dylib</h5><p>_dyld_register_func_for_add_image 注册回调后，任意时刻只要 dylib 被加载，都会进入此回调，利用这个特性可以实时监控 dylib 的加载</p>
<p>回调函数代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> pyg_image_added(<span class="keyword">const</span> <span class="keyword">struct</span> mach_header *mh, intptr_t slide) &#123;</span><br><span class="line">  Dl_info image_info;</span><br><span class="line">  <span class="keyword">int</span> result = dladdr(mh, &amp;image_info);</span><br><span class="line">  <span class="keyword">if</span> (result==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *image_name = image_info.dli_fname;</span><br><span class="line">  <span class="keyword">if</span>(strstr(image_name, <span class="string">&quot;DynamicLibraries&quot;</span>) || strstr(image_name, <span class="string">&quot;CydiaSubstrate&quot;</span>)) &#123;</span><br><span class="line">			printf(<span class="string">&quot;三方库被注入 ---&gt; %s&quot;</span>, image_name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注册回调函数写在构造函数里</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">__attribute__((constructor)) <span class="keyword">static</span> <span class="keyword">void</span> pyg_init()&#123;</span><br><span class="line">  _dyld_register_func_for_add_image(&amp;pyg_image_added)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于 OC 类，可以写在 load 方法里</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">	_dyld_register_func_for_add_image(&amp;pyg_image_added)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Hook检测"><a href="#Hook检测" class="headerlink" title="Hook检测"></a>Hook检测</h4><h5 id="Method-Swizzing-检测"><a href="#Method-Swizzing-检测" class="headerlink" title="Method Swizzing 检测"></a>Method Swizzing 检测</h5><p>Method Swizzing 原理是替换 IMP，通过 dladdr 得到 IMP 地址所在模块信息进行判断</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line">BOOK CheckMethodSwizzle(<span class="keyword">const</span> <span class="keyword">char</span> *className, <span class="keyword">char</span> *selName) &#123;</span><br><span class="line">  Dl_info info;</span><br><span class="line">  IMP imp = class_getMethodImplementation(objc_getClass(className), sel_registerName(selName));</span><br><span class="line">  <span class="keyword">if</span> (!dladdr(imp, &amp;info)) &#123;</span><br><span class="line">    printf(<span class="string">&quot;error: can&#x27;t find this symbol \n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//路径不在自身模块中（例如tweak中）则一定被hook了</span></span><br><span class="line">  <span class="keyword">if</span> (strcmp(info.dli_fname, _dyld_get_image_name(<span class="number">0</span>)) != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//还可以判断 dli_fbase dli_saddr是否位于自身内存区间</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">CheckMethodSwizzle(<span class="string">&quot;ViewController&quot;</span>, <span class="string">&quot;ViewDidLoad&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="Inline-Hook检测"><a href="#Inline-Hook检测" class="headerlink" title="Inline Hook检测"></a>Inline Hook检测</h5><p>Inline Hook原理通过修改函数的前 N字节内存，使程序跳转到自己编写的函数</p>
<h4 id="越狱检测"><a href="#越狱检测" class="headerlink" title="越狱检测"></a>越狱检测</h4><h5 id="检测越狱商店及附属文件"><a href="#检测越狱商店及附属文件" class="headerlink" title="检测越狱商店及附属文件"></a>检测越狱商店及附属文件</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *jailbrokenFiles[] = &#123;</span><br><span class="line">  <span class="string">&quot;/Applications/Cydia.app&quot;</span>,</span><br><span class="line">  <span class="string">&quot;/Applications/Sileo.app&quot;</span>,</span><br><span class="line">  <span class="string">&quot;/Library/MobileSubstrate/MobileSubstrate.dylib&quot;</span>,</span><br><span class="line">  <span class="string">&quot;/bin/bash&quot;</span>,</span><br><span class="line">  <span class="string">&quot;/usr/sbin/sshd&quot;</span>,</span><br><span class="line">  <span class="string">&quot;/etc/apt&quot;</span>,</span><br><span class="line">  <span class="comment">//TODO 还可以添加更多文件列表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">BOOL</span> isJailbroken1() &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; ARRAY_SIZE(jailbrokenFiles); i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>([[<span class="built_in">NSFileManager</span> defaultManager] fileExistsAtPath:[<span class="built_in">NSString</span> stringWithUTF8String: jailbrokenFiles[i]]])&#123;</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@&quot;设备已越狱&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="built_in">BOOL</span> isJailbroken2() &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; ARRAY_SIZE(jailbrokenFiles); i++)&#123;</span><br><span class="line">  	<span class="keyword">struct</span> stat stat_info;</span><br><span class="line">    <span class="keyword">if</span>(stat(jailbrokenFiles[i], &amp;stat_info) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@&quot;设备已越狱&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="尝试读取系统应用列表"><a href="#尝试读取系统应用列表" class="headerlink" title="尝试读取系统应用列表"></a>尝试读取系统应用列表</h5><p>如果已越狱，就可以读取到系统应用列表</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">BOOL</span> isJailbroken3() &#123;</span><br><span class="line">  <span class="keyword">if</span> ([[<span class="built_in">NSFileManager</span> defaultManager] fileExistsAtPath: <span class="string">@&quot;/Applications/&quot;</span>]) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;设备已越狱&quot;</span>);</span><br><span class="line">    <span class="built_in">NSArray</span> *applist = [[<span class="built_in">NSFileManager</span> defaultManager] contentsOfDirectoryAtPath:<span class="string">@&quot;/Applications/&quot;</span> error: <span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;AppList = %@&quot;</span>, applist);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;设备未越狱&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="检测URLScheme是否有效"><a href="#检测URLScheme是否有效" class="headerlink" title="检测URLScheme是否有效"></a>检测URLScheme是否有效</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">BOOL</span> isJailbroken4() &#123;</span><br><span class="line">	<span class="keyword">if</span>([[<span class="built_in">UIApplication</span> sharedApplication] canOpenURL:[[<span class="built_in">NSURL</span> URLWithString:<span class="string">@&quot;Cydia://&quot;</span>]]]) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;设备已越狱&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="完整性检测"><a href="#完整性检测" class="headerlink" title="完整性检测"></a>完整性检测</h4><p>检测目标是否被脱壳、是否被静态注入、内容是否被修改、是否被重签名等</p>
<p>常见方式有加载命令检测、代码段检测、签名信息检测</p>
<h5 id="加载命令检测"><a href="#加载命令检测" class="headerlink" title="加载命令检测"></a>加载命令检测</h5><p>为了使未越狱设备也能顺利使用插件，通常会在 LoadCommand（加载命令）中增加一个 LC_LOAD_DYLIB 或者 LC_LOAD_WEAK_DYLIB 的方式来指向自己的动态库，从而实现注入功能，这种方式通常也称为静态注入</p>
<p>加载命令检测即检测 Mach-O 文件的 LoadCommand 中 LC_LOAD_DYLIB 或 LC_LOAD_WEAK_DYLIB 是否存在异常</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载命令检测</span></span><br><span class="line"><span class="keyword">static</span> BOOk CheckLoadDylib() &#123;</span><br><span class="line">  mach_head_64 *header = (mach_header_64 *)&amp;_mh_execute_header;</span><br><span class="line">  <span class="keyword">if</span>(header-&gt;magic==M_MAGIC_64)&#123;</span><br><span class="line">    segment_command_64 *cur_seg_cmd;</span><br><span class="line">    uintptr_t cur = (uiniptr_t)head + <span class="keyword">sizeof</span>(mach_header_64);</span><br><span class="line">    <span class="keyword">for</span>(unit i=<span class="number">0</span>; i&lt;head-&gt;ncmds; i++,cur+=cur_seg_cmd-&gt;cmdsize)&#123;</span><br><span class="line">      cur_seg_cmd = (segment_command_64 *)cur;</span><br><span class="line">      <span class="keyword">if</span>(cur_seg_cmd-&gt;cmd == LC_LOAD_DYLIB || cur_seg_cmd-&gt;cmd == LC_LOAD_WEAK_DYLIB)&#123;</span><br><span class="line">        dylib_command *dylib = (dylib_command *)cur_seg_cmd;</span><br><span class="line">        <span class="keyword">char</span> *name = (<span class="keyword">char</span> *)((unintptr_t)dylib+dylib-&gt;dylib.name.offset);</span><br><span class="line">        printf(<span class="string">&quot;dylib_name=%s\n&quot;</span>, name);</span><br><span class="line">        <span class="comment">//这里可以加入白名单判断 如果发现了@rpath之类的路径就要怀疑是否注入了三方库</span></span><br><span class="line">        <span class="comment">//return YES;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="代码段检测"><a href="#代码段检测" class="headerlink" title="代码段检测"></a>代码段检测</h5><p>检测 <code>__TEXT,__text</code> 是否被修改（当然也可以检测其它 Section）</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *GetTextSectionHash () &#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> size;</span><br><span class="line">  uint8_t *ptr = getsectiondata(&amp;_mh_execute_header, <span class="string">&quot;__TEXT&quot;</span>, <span class="string">&quot;__text&quot;</span>, &amp;size);</span><br><span class="line">  <span class="keyword">if</span> (!ptr) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> digest[CC_MD5_DIGEST_LENGTH];</span><br><span class="line">  CC_MD5(ptr, (CC_LONG)size, digest) ;</span><br><span class="line">  <span class="built_in">NSMutableString</span> *result = [<span class="built_in">NSMutableString</span> stringWithCapacity: CC_MD5_DIGEST_LENGTH * <span class="number">2</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i  = <span class="number">0</span>: i &lt; CC_MD5_DIGEST_LENGTH; i++) </span><br><span class="line">    [result appendFormat: <span class="string">@&quot;%02x&quot;</span>, digest[i]];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>&amp;_mh_execute_header</code> 指向 MachO 在内存中的起始位置，getsectiondata返回指定 Section 的内存地址大小。实际应用中可以将正确的 Hash 值存到 服务器或者加密后放到本地，在进程启动时进行对比，不匹配则可以进行一些逻辑处理</p>
<h5 id="签名信息检测"><a href="#签名信息检测" class="headerlink" title="签名信息检测"></a>签名信息检测</h5><p>检测 LC_CODE_SIGNATURE 中的特征信息，比如 TeamID是否和用户匹配</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> CheckTeamID(<span class="keyword">const</span> <span class="keyword">char</span> *szTeamID) &#123;</span><br><span class="line">  load_command *lc;</span><br><span class="line">  mach_header_64 *header = (mach_header_64 *)&amp;_mh_execute_header;</span><br><span class="line">  <span class="keyword">if</span> (header-&gt;magic == MH_MAGIC_64) &#123;</span><br><span class="line">    uintptr_t cur = (uintptr_t)head + <span class="keyword">sizeof</span>(mach_header_64);</span><br><span class="line">    <span class="keyword">for</span>(unit i=<span class="number">0</span>; i&lt;head-&gt;ncmds; i++,cur+=lc-&gt;cmdsize)&#123;</span><br><span class="line">    	lc = (load_command*)cur;</span><br><span class="line">      <span class="keyword">if</span>(lc-&gt;cmd == LC_CODE_SIGNATURE)&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;CMD=LC_CODE_SIGNATURE&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> *codeSignature = (<span class="keyword">char</span>*)header+((<span class="keyword">struct</span> linkedit_data_command *)lc)-&gt;dataoff;</span><br><span class="line">        <span class="keyword">int</span> codeSignatureSize = ((<span class="keyword">struct</span> linkedit_data_command)lc)-&gt;datasize;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">void</span> *p = memmem(codeSignature, codeSignatureSize, szTeamId, strlen(szTeamId));</span><br><span class="line">        <span class="keyword">if</span>(!p) &#123;</span><br><span class="line">          printf(<span class="string">&quot;校验失败&quot;</span>);</span><br><span class="line">          <span class="comment">//处理校验失败逻辑</span></span><br><span class="line">          exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="代码保护"><a href="#代码保护" class="headerlink" title="代码保护"></a>代码保护</h4><p><a href="https://github.com/HikariObfuscator/Hikari">https://github.com/HikariObfuscator/Hikari</a></p>
<p>安装 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone --recursive -b release_80 https:&#x2F;&#x2F;github.com&#x2F;HikariObfuscator&#x2F;Hikari.git Hikari &amp;&amp; cd Hikari &amp;&amp; git submodule update --remote --recursive &amp;&amp; cd ..&#x2F; &amp;&amp; mkdir Build &amp;&amp; cd Build &amp;&amp; cmake -G &quot;Ninja&quot; -DLLDB_CODESIGN_IDENTITY&#x3D;&#39;&#39; -DCMAKE_BUILD_TYPE&#x3D;MinSizeRel -DLLVM_APPEND_VC_REV&#x3D;on -DLLDB_USE_SYSTEM_DEBUGSERVER&#x3D;YES -DLLVM_CREATE_XCODE_TOOLCHAIN&#x3D;on -DCMAKE_INSTALL_PREFIX&#x3D;~&#x2F;Library&#x2F;Developer&#x2F; ..&#x2F;Hikari &amp;&amp; ninja &amp;&amp;ninja install-xcode-toolchain &amp;&amp; git clone https:&#x2F;&#x2F;github.com&#x2F;HikariObfuscator&#x2F;Resources.git ~&#x2F;Hikari &amp;&amp; rsync -a --ignore-existing &#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Developer&#x2F;Toolchains&#x2F;XcodeDefault.xctoolchain&#x2F; ~&#x2F;Library&#x2F;Developer&#x2F;Toolchains&#x2F;Hikari.xctoolchain&#x2F; &amp;&amp; rm ~&#x2F;Library&#x2F;Developer&#x2F;Toolchains&#x2F;Hikari.xctoolchain&#x2F;ToolchainInfo.plist</span><br></pre></td></tr></table></figure>

<p>安装成功后 Xcode - Toolchains 菜单看到 Hikari 命令</p>
<p>提供了 8 中混淆选项</p>
<img src="逆向-安全保护/图片 5.png" alt="图片 5" style="zoom:90%;" />

<p>Xcode Build Settings 中根据需要添加上述选项</p>
<img src="逆向-安全保护/图片 2.png" alt="图片 2" style="zoom:70%;" />

<p>Hikari 还提供了一个 -enable-allobf 选项，用于启用以上所有功能</p>
]]></content>
  </entry>
  <entry>
    <title>逆向工具-Cycript</title>
    <url>/2021/10/11/%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7-Cycript/</url>
    <content><![CDATA[<p>用于注入目标进程来实现运行时调试，重启后所有修改都会失效，对原生程序或代码无副作用</p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p><a href="http://www.cycript.org/">Cycript官网</a> 下载 SDK 解压进入 cycript_0.9.594 文件夹，执行 ./cycript</p>
<p>会报下面错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dyld[1291]: Library not loaded: &#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Ruby.framework&#x2F;Versions&#x2F;2.0&#x2F;usr&#x2F;lib&#x2F;libruby.2.0.0.dylib</span><br><span class="line">  Referenced from: &#x2F;Users&#x2F;midland_whk&#x2F;Downloads&#x2F;cycript_0.9.594&#x2F;Cycript.lib&#x2F;cycript-apl</span><br><span class="line">  Reason: tried: &#39;&#x2F;Users&#x2F;midland_whk&#x2F;Downloads&#x2F;cycript_0.9.594&#x2F;.&#x2F;Cycript.lib&#x2F;libruby.2.0.0.dylib&#39; (no such file), &#39;&#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Ruby.framework&#x2F;Versions&#x2F;2.0&#x2F;usr&#x2F;lib&#x2F;libruby.2.0.0.dylib&#39; (no such file), &#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libruby.2.0.0.dylib&#39; (no such file), &#39;&#x2F;usr&#x2F;lib&#x2F;libruby.2.0.0.dylib&#39; (no such file)</span><br><span class="line">[1]    1291 abort      .&#x2F;cycript</span><br></pre></td></tr></table></figure>

<p>这是因为 ruby 版本太高，需要进入 <code>/usr/local/Cellar/ruby@2.5/2.5.8/lib</code> ，将 <code>libruby.2.5.8.dylib</code> 重命名 <code>libruby.2.0.0</code> 并拷贝到 <code>Cycript.lib</code> 目录下</p>
<h4 id="Cycript-分析应用"><a href="#Cycript-分析应用" class="headerlink" title="Cycript 分析应用"></a>Cycript 分析应用</h4><p>Cydia 中 搜索 Cycript 安装</p>
<p>通过 SSH 登录手机，输入 cycript 命令，就进入交互界面，control + D 或者 <code>?exit</code>  退出命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ssh root@<span class="number">172.16</span><span class="number">.1</span><span class="number">.96</span> //ssh -P <span class="number">2222</span> root@localhost</span><br><span class="line">cycript</span><br><span class="line"></span><br><span class="line">cy<span class="comment"># var a = 3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">cy<span class="comment"># var b = 4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">cy<span class="comment"># a + b</span></span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure>

<p>使用 -p 选项注入目标进程</p>
<p>注入 SpringBoard 弹出提示窗口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root# cycript -p SpringBoard</span><br><span class="line">cy# var alert &#x3D; [[UIAlertView alloc] initWithTitle:@&quot;hi&quot; message: @&quot;hello,world&quot;  delegate:nil cancelButtonTitle:@&quot;cancel&quot; otherButtonTitles: nil]</span><br><span class="line">#&quot;&lt;UIAlertView: 0x118c27680; frame &#x3D; (0 0; 0 0); layer &#x3D; &lt;CALayer: 0x280a06b00&gt;&gt;&quot;</span><br><span class="line">cy# [alert show]</span><br></pre></td></tr></table></figure>

<h5 id="分析应用"><a href="#分析应用" class="headerlink" title="分析应用"></a>分析应用</h5><p><code>ps -e</code>  或者 <code>ps -A</code>   <code>ps -e | grep DemoApp</code> 找到进程号 9790</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9790 ??  0:00.80 &#x2F;var&#x2F;containers&#x2F;Bundle&#x2F;Application&#x2F;4F526F02-0133-4149-9E3F-A492B2DC7D7F&#x2F;DemoApp.app&#x2F;DemoApp</span><br></pre></td></tr></table></figure>

<p>cycript -p 进程名字</p>
<p><code>cycript -p 9790</code> 或者  <code>cycript -p DemoApp</code> 启动 cycript</p>
<ul>
<li>获取沙盒目录 NSHomeDirectory()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cy# NSHomeDirectory()</span><br><span class="line">@&quot;&#x2F;var&#x2F;mobile&#x2F;Containers&#x2F;Data&#x2F;Application&#x2F;629E01BE-3EC6-461C-A479-83EEEAB0A22D&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>获取 Bundle ID</li>
</ul>
<p>[[NSBundle mainBundle] bundleIdentifier]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cy# [[NSBundle mainBundle] bundleIdentifier]</span><br><span class="line">@&quot;com.DemoApp&quot;</span><br></pre></td></tr></table></figure>

<p>可以直接在脚本中调用 OC 函数来获取和修改应用一些信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cy# UIApp</span><br><span class="line">#&quot;&lt;UIApplication: 0x109e01050&gt;&quot;</span><br><span class="line">cy# UIApp.delegate</span><br><span class="line">#&quot;&lt;AppDelegate: 0x281d3d700&gt;&quot;</span><br><span class="line">cy# UIApp.keyWindow</span><br><span class="line">#&quot;&lt;UIWindow: 0x109e14650; frame &#x3D; (0 0; 375 667); gestureRecognizers &#x3D; &lt;NSArray: 0x281324510&gt;; layer &#x3D; &lt;UIWindowLayer: 0x281d2aa60&gt;&gt;&quot;</span><br><span class="line">cy# UIApp.keyWindow.rootViewController</span><br><span class="line">#&quot;&lt;ViewController: 0x109d16900&gt;&quot;</span><br><span class="line">cy# #0x109d16900.view</span><br><span class="line">#&quot;&lt;UIView: 0x109e15b40; frame &#x3D; (0 0; 375 667); autoresize &#x3D; W+H; layer &#x3D; &lt;CALayer: 0x281d2ae80&gt;&gt;&quot;</span><br><span class="line">cy# #0x109d16900.view.backgroundColor &#x3D; [UIColor yellowColor]</span><br><span class="line">#&quot;UIExtendedSRGBColorSpace 1 1 0 1&quot;</span><br><span class="line">cy# var newVC &#x3D; new Instance(0x109d16900)</span><br><span class="line">#&quot;&lt;ViewController: 0x109d16900&gt;&quot;</span><br><span class="line">cy# var newVC &#x3D; #0x109d16900</span><br><span class="line">#&quot;&lt;ViewController: 0x109d16900&gt;&quot;</span><br><span class="line">cy# newVC</span><br><span class="line">#&quot;&lt;ViewController: 0x109d16900&gt;&quot;</span><br><span class="line">cy# #0x109d16900</span><br><span class="line">#&quot;&lt;ViewController: 0x109d16900&gt;&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>打印界面结构 UIApp.keyWindow.recursiveDescription().toString()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cy# UIApp.keyWindow.recursiveDescription().toString()</span><br><span class="line">&#96;&lt;UIWindow: 0x109e14650; frame &#x3D; (0 0; 375 667); gestureRecognizers &#x3D; &lt;NSArray: 0x281324510&gt;; layer &#x3D; &lt;UIWindowLayer: 0x281d2aa60&gt;&gt;</span><br><span class="line">   | &lt;UIView: 0x109e15b40; frame &#x3D; (0 0; 375 667); autoresize &#x3D; W+H; layer &#x3D; &lt;CALayer: 0x281d2ae80&gt;&gt;</span><br><span class="line">   |    | &lt;UIButton: 0x109d1a100; frame &#x3D; (20 100; 100 50); opaque &#x3D; NO; layer &#x3D; &lt;CALayer: 0x281d262c0&gt;&gt;</span><br><span class="line">   |    |    | &lt;UIButtonLabel: 0x109d19690; frame &#x3D; (10 14.5; 80.5 21.5); text &#x3D; &#39;DemoApp&#39;; opaque &#x3D; NO; userInteractionEnabled &#x3D; NO; layer &#x3D; &lt;_UILabelLayer: 0x283e31400&gt;&gt;&#96;</span><br></pre></td></tr></table></figure>

<p>[[[UIWindow keyWindow] rootViewController] _printHierarchy].toString()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cy# [[[UIWindow keyWindow] rootViewController] _printHierarchy].toString()</span><br><span class="line">&quot;&lt;ViewController 0x101211e50&gt;, state: appeared, view: &lt;UIView 0x109e15b40&gt;&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>choose() 方法</li>
</ul>
<p>choose(UITableView) 在内存中直接找出这个类的对象地址，打印所有 UITableView 实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cy# choose(UIViewController)</span><br><span class="line">[#&quot;&lt;ViewController: 0x101211e50&gt;&quot;]</span><br></pre></td></tr></table></figure>

<ul>
<li>找UIButton 所属 Controller</li>
</ul>
<p>UIButton 地址 0x100b15960</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cy# [#0x100b15960 nextResponder]</span><br><span class="line">#&quot;&lt;UIView: 0x100b15380; frame &#x3D; (0 0; 375 667); autoresize &#x3D; W+H; layer &#x3D; &lt;CALayer: 0x282e3a4a0&gt;&gt;&quot;</span><br><span class="line">cy# [#0x100b15380 nextResponder]</span><br><span class="line">#&quot;&lt;ViewController: 0x101211e50&gt;&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>找出 Action 响应方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cy# [#0x100b15960 allTargets]</span><br><span class="line">[NSSet setWithArray:@[#&quot;&lt;ViewController: 0x101211e50&gt;&quot;]]]</span><br><span class="line">cy# [#0x100b15960 actionsForTarget:#0x101211e50]</span><br><span class="line">cy# [#0x100b15960 actionsForTarget:#0x101211e50 forControlEvent: UIControlEventTouchUpInside]</span><br><span class="line">@[&quot;demoAction:&quot;]</span><br></pre></td></tr></table></figure>

<h5 id="加载脚本"><a href="#加载脚本" class="headerlink" title="加载脚本"></a>加载脚本</h5><p>新建 utils.cy</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function(utils) &#123;</span><br><span class="line">	APPID &#x3D; [NSBundle mainBundle].bundleIdentifier,</span><br><span class="line">	APPPATH &#x3D; [NSBundle mainBundle].bundlePath,</span><br><span class="line"></span><br><span class="line">	HKRootvc &#x3D; function()&#123;</span><br><span class="line">	 	return UIApp.keyWindow.rootViewController;</span><br><span class="line">	 &#125;;</span><br><span class="line">	 </span><br><span class="line">	 HKKeyWindow &#x3D; function()&#123;</span><br><span class="line">	 	return UIApp.keyWindow;</span><br><span class="line">	 &#125;;</span><br><span class="line"></span><br><span class="line">	 HKGetCurrentVCFromRootVc &#x3D; function(rootVC)&#123;</span><br><span class="line">	 var currentVC;</span><br><span class="line">	 if([rootVC presentedViewController])&#123;</span><br><span class="line">	 rootVC &#x3D; [rootVC presentedViewController];</span><br><span class="line">	 &#125;</span><br><span class="line">	 </span><br><span class="line">	 if([rootVC isKindOfClass:[UITabBarController class]])&#123;</span><br><span class="line">		 	currentVC &#x3D; HKGetCurrentVCFromRootVc(rootVC.selectedViewController);</span><br><span class="line">		 &#125;else if([rootVC isKindOfClass:[UINavigationController class]])&#123;</span><br><span class="line">		 	currentVC &#x3D; HKGetCurrentVCFromRootVc(rootVC.visibleViewController);</span><br><span class="line">		 &#125;else&#123;</span><br><span class="line">		 currentVC &#x3D; rootVC;</span><br><span class="line">	 &#125;</span><br><span class="line">	 </span><br><span class="line">	 	return currentVC;</span><br><span class="line">	 &#125;;</span><br><span class="line">	 </span><br><span class="line">	 </span><br><span class="line">	 HKCurrentVC &#x3D; function()&#123;</span><br><span class="line">	 	return HKGetCurrentVCFromRootVc(HKRootvc());</span><br><span class="line">	 &#125;;</span><br><span class="line"></span><br><span class="line">	 pviews &#x3D; function() &#123;</span><br><span class="line">		return UIApp.keyWindow.recursiveDescription().toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pvc &#x3D; function() &#123;</span><br><span class="line">		return [[[UlWindow keyWindow] rootViewController] _printHierarchy].toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;)(exports);</span><br></pre></td></tr></table></figure>

<p>设备上 <code>/usr/lib/cycript0.9/com/</code> 新建文件夹 monkey</p>
<p>将 utils.cy 拷贝到文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp utils.cy root@172.16.1.96:&#x2F;usr&#x2F;lib&#x2F;cycript0.9&#x2F;com&#x2F;monkey</span><br></pre></td></tr></table></figure>

<p>如果需要使用该文件，在 cycript 中需要导入，就可以使用了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@import com.monkey.utils;</span><br><span class="line">pviews()</span><br></pre></td></tr></table></figure>

<h5 id="MonkeyApp-cycript"><a href="#MonkeyApp-cycript" class="headerlink" title="MonkeyApp cycript"></a>MonkeyApp cycript</h5><p>MonkeyApp 运行后控制台会提示 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Download cycript(https:&#x2F;&#x2F;cydia.saurik.com&#x2F;api&#x2F;latest&#x2F;3) then run: .&#x2F;cycript -r 172.16.1.60:6666</span><br><span class="line">2021-10-11 15:15:55.342839+0800 TargetApp[5795:1158273] [Cycript] Finish download all script!</span><br></pre></td></tr></table></figure>

<p>终端输入 <code>./cycript -r 172.16.1.60:6666</code> 就可以进入 cycript 交互界面</p>
<p>MonkeyDev 作者加载了自己写的网络脚本，源码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function(utils) &#123;</span><br><span class="line"></span><br><span class="line">    utils.constants &#x3D; &#123;</span><br><span class="line">        APPID:  	 NSBundle.mainBundle.bundleIdentifier,</span><br><span class="line">        APPPATH:     NSBundle.mainBundle.bundlePath,</span><br><span class="line">        APPHOME:	 NSHomeDirectory(),</span><br><span class="line">        APPDOC:      NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)[0],</span><br><span class="line">        APPLIBRARY:  NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES)[0],</span><br><span class="line">        APPCACHE:    NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES)[0]</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    utils.pviews &#x3D; function()&#123;</span><br><span class="line">        return UIApp.keyWindow.recursiveDescription().toString();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    utils.pvcs &#x3D; function()&#123;</span><br><span class="line">        return UIWindow.keyWindow().rootViewController._printHierarchy().toString();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    utils.rp &#x3D; function(target)&#123;</span><br><span class="line">        var result &#x3D; &quot;&quot; + target.toString();</span><br><span class="line">        while(target.nextResponder)&#123;</span><br><span class="line">            result +&#x3D; &quot;\n&quot; + target.nextResponder.toString();</span><br><span class="line">            target &#x3D; target.nextResponder;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    utils.pactions &#x3D; function(target)&#123;</span><br><span class="line">		var result &#x3D; &#39;&#39;;</span><br><span class="line">		var objs &#x3D; target.allTargets.allObjects();</span><br><span class="line">		for(var i &#x3D; 0; i &lt; objs.length; i++)&#123;</span><br><span class="line">			var actions &#x3D; [target actionsForTarget:objs[i] forControlEvent:0];</span><br><span class="line">			result +&#x3D; objs[i] + &quot; &quot; + [actions componentsJoinedByString:@&quot;,&quot;];</span><br><span class="line">		&#125;</span><br><span class="line">		return result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    for(var k in utils.constants) &#123;</span><br><span class="line">        Cycript.all[k] &#x3D; utils.constants[k];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(var k in utils) &#123;</span><br><span class="line">        if(utils.hasOwnProperty(k)) &#123;</span><br><span class="line">            var f &#x3D; utils[k];</span><br><span class="line">            if(typeof f &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class="line">                Cycript.all[k] &#x3D; f;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(exports);</span><br></pre></td></tr></table></figure>

<p>使用的时候需要先导入 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@import md</span><br></pre></td></tr></table></figure>





















]]></content>
      <tags>
        <tag>逆向工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Autotouch</title>
    <url>/2021/09/29/Autotouch/</url>
    <content><![CDATA[<blockquote>
<p>Autotouch 版本：7.0.33 破解版</p>
<p>软件源：多米诺骨牌源 <a href="https://apt.wxhbts.com/">https://apt.wxhbts.com</a></p>
</blockquote>
<h4 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h4><h5 id="模块与包"><a href="#模块与包" class="headerlink" title="模块与包"></a>模块与包</h5><p>Lua 的模块是由变量、函数等已知元素组成的 table，创建一个模块就是创建一个 table，把需要导出的常量、函数放入其中，最后返回 table</p>
<p>创建自定义模块 module.lua</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 文件名为 module.lua</span></span><br><span class="line"><span class="comment">-- 定义一个 module 的模块</span></span><br><span class="line"><span class="built_in">module</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义一个常量</span></span><br><span class="line"><span class="built_in">module</span>.constant = <span class="string">&quot;这是一个常量&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">module.func1</span><span class="params">()</span></span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;这是公有函数&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">func2</span><span class="params">()</span></span> </span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;这是私有函数&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">module.func3</span><span class="params">()</span></span></span><br><span class="line">	func2()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">module</span></span><br></pre></td></tr></table></figure>

<p>使用模块</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 加载模块 或者 require &quot;module&quot;</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;module&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">module</span>.constant)</span><br><span class="line"><span class="built_in">module</span>.func1()</span><br><span class="line"><span class="built_in">module</span>.func3()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给模块定义一个别名</span></span><br><span class="line"><span class="keyword">local</span> m = <span class="built_in">require</span>(<span class="string">&quot;module&quot;</span>)</span><br><span class="line">m.func3()</span><br></pre></td></tr></table></figure>





<h4 id="Extension-Functions"><a href="#Extension-Functions" class="headerlink" title="Extension Functions"></a>Extension Functions</h4><h5 id="touchDown-id-x-y"><a href="#touchDown-id-x-y" class="headerlink" title="touchDown(id, x, y)"></a>touchDown(id, x, y)</h5><blockquote>
<p>Press the coordinate (x,y) on the screen.</p>
</blockquote>
<p>id:    Finger ID</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Press by one finger at coordinate (100,200).</span></span><br><span class="line">touchDown(<span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- Press by three fingers at three locations on the screen.</span></span><br><span class="line">touchDown(<span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">touchDown(<span class="number">1</span>, <span class="number">200</span>, <span class="number">300</span>);</span><br><span class="line">touchDown(<span class="number">2</span>, <span class="number">300</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Implement a tap function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tap</span><span class="params">(x, y)</span></span></span><br><span class="line">    touchDown(<span class="number">0</span>, x, y);</span><br><span class="line">    usleep(<span class="number">16000</span>);</span><br><span class="line">    touchUp(<span class="number">0</span>, x, y);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Tap at (100, 200)</span></span><br><span class="line">tap(<span class="number">100</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure>

<h5 id="touchMove-id-x-y"><a href="#touchMove-id-x-y" class="headerlink" title="touchMove(id, x, y)"></a>touchMove(id, x, y)</h5><blockquote>
<p>Move the finger to coordinate (x,y).</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Press by one finger at coordinate (100,200) and move the finger to coordinate (200,200).</span></span><br><span class="line">touchDown(<span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">usleep(<span class="number">16000</span>);</span><br><span class="line">touchMove(<span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Press by three fingers at three locations on the screen and move to new location.</span></span><br><span class="line">touchDown(<span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">touchDown(<span class="number">1</span>, <span class="number">200</span>, <span class="number">300</span>);</span><br><span class="line">touchDown(<span class="number">2</span>, <span class="number">300</span>, <span class="number">400</span>);</span><br><span class="line">usleep(<span class="number">16000</span>);</span><br><span class="line">touchMove(<span class="number">0</span>, <span class="number">150</span>, <span class="number">250</span>);</span><br><span class="line">touchMove(<span class="number">1</span>, <span class="number">250</span>, <span class="number">350</span>);</span><br><span class="line">touchMove(<span class="number">2</span>, <span class="number">350</span>, <span class="number">450</span>);</span><br></pre></td></tr></table></figure>

<h5 id="touchUp-id-x-y"><a href="#touchUp-id-x-y" class="headerlink" title="touchUp(id, x, y)"></a>touchUp(id, x, y)</h5><blockquote>
<p>Lift the finger from coordinate (x,y)</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Click the screen once by one finger at coordinate (100,200).</span></span><br><span class="line">touchDown(<span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">usleep(<span class="number">16000</span>);</span><br><span class="line">touchUp(<span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Press by three fingers at three locations on the screen, move to new location, and then lift the finger.</span></span><br><span class="line">touchDown(<span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">touchDown(<span class="number">1</span>, <span class="number">200</span>, <span class="number">300</span>);</span><br><span class="line">touchDown(<span class="number">2</span>, <span class="number">300</span>, <span class="number">400</span>);</span><br><span class="line">usleep(<span class="number">16000</span>);</span><br><span class="line">touchMove(<span class="number">0</span>, <span class="number">150</span>, <span class="number">250</span>);</span><br><span class="line">touchMove(<span class="number">1</span>, <span class="number">250</span>, <span class="number">350</span>);</span><br><span class="line">touchMove(<span class="number">2</span>, <span class="number">350</span>, <span class="number">450</span>);</span><br><span class="line">usleep(<span class="number">16000</span>);</span><br><span class="line">touchUp(<span class="number">0</span>, <span class="number">150</span>, <span class="number">250</span>);</span><br><span class="line">touchUp(<span class="number">1</span>, <span class="number">250</span>, <span class="number">350</span>);</span><br><span class="line">touchUp(<span class="number">2</span>, <span class="number">350</span>, <span class="number">450</span>);</span><br></pre></td></tr></table></figure>

<h5 id="keyDown-keyType"><a href="#keyDown-keyType" class="headerlink" title="keyDown(keyType)"></a>keyDown(keyType)</h5><blockquote>
<p>Simulate the pressing of physical key</p>
</blockquote>
<p>Home Button：KEY_TYPE.HOME_BUTTON</p>
<p>Volume – Button：KEY_TYPE.VOLUME_DOWN_BUTTON</p>
<p>Volume + Button：KEY_TYPE.VOLUME_UP_BUTTON</p>
<p>Power Button：KEY_TYPE.POWER_BUTTON</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Simulate the pressing of Home Key.</span></span><br><span class="line">keyDown(KEY_TYPE.HOME_BUTTON);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- How to simulate a key pressing?</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keyPress</span><span class="params">(keyType)</span></span></span><br><span class="line">    keyDown(keyType);</span><br><span class="line">    usleep(<span class="number">10000</span>);</span><br><span class="line">    keyUp(keyType);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">keyPress(KEY_TYPE.HOME_BUTTON);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- How to simulate a screen lock function?</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lockScreen</span><span class="params">()</span></span></span><br><span class="line">    keyDown(KEY_TYPE.POWER_BUTTON);</span><br><span class="line">    keyUp(KEY_TYPE.POWER_BUTTON);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- How to simulate a screen unlock function?</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unlockScreen</span><span class="params">()</span></span></span><br><span class="line">    keyDown(KEY_TYPE.POWER_BUTTON);</span><br><span class="line">    keyUp(KEY_TYPE.POWER_BUTTON);</span><br><span class="line"></span><br><span class="line">    usleep(<span class="number">1000000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> w, h = getScreenResolution();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">local</span> gap = <span class="number">120</span>;</span><br><span class="line">    touchDown(<span class="number">0</span>, x, <span class="number">200</span>);</span><br><span class="line">    <span class="keyword">while</span> x &lt; w <span class="keyword">do</span></span><br><span class="line">        x = x + gap;</span><br><span class="line">        usleep(<span class="number">16000</span>);</span><br><span class="line">        touchMove(<span class="number">0</span>, x, <span class="number">200</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    touchUp(<span class="number">0</span>, x, <span class="number">200</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="keyUp-keyType"><a href="#keyUp-keyType" class="headerlink" title="keyUp(keyType)"></a>keyUp(keyType)</h5><blockquote>
<p>Simulate the lifting of physical key</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Simulate the action of pressing and lifting Home Key.</span></span><br><span class="line">keyDown(KEY_TYPE.HOME_BUTTON);</span><br><span class="line">usleep(<span class="number">10000</span>);</span><br><span class="line">keyUp(KEY_TYPE.HOME_BUTTON);</span><br></pre></td></tr></table></figure>

<h5 id="getColor-x-y"><a href="#getColor-x-y" class="headerlink" title="getColor(x, y)"></a>getColor(x, y)</h5><blockquote>
<p>Get the color value of the pixel point of the specified coordinate on current screen</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> color = getColor(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Pixel color is :%d&quot;</span>, color))</span><br><span class="line"><span class="comment">-- Pop up color: 16777215</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Keep gettting color of a location until it matches a specify color</span></span><br><span class="line"><span class="keyword">local</span> color</span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">   color = getColor(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">   usleep(<span class="number">50000</span>) <span class="comment">-- Wait a while</span></span><br><span class="line"><span class="keyword">until</span>( color == <span class="number">123456</span> )</span><br><span class="line"><span class="comment">-- Continue to do what&#x27;s next</span></span><br></pre></td></tr></table></figure>

<h5 id="getColors-locations"><a href="#getColors-locations" class="headerlink" title="getColors(locations)"></a>getColors(locations)</h5><blockquote>
<p>Get the color values of the pixel points of the specified coordinates on current screen</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> result = getColors(&#123; &#123;<span class="number">100</span>, <span class="number">200</span>&#125;, &#123;<span class="number">200</span>, <span class="number">300</span>&#125;, &#123;<span class="number">300</span>, <span class="number">400</span>&#125; &#125;);</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Gotten color:%d&quot;</span>, v));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="findColor"><a href="#findColor" class="headerlink" title="findColor()"></a>findColor()</h5><p>findColor(color, count, region, debug, rightToLeft, bottomToTop)</p>
<blockquote>
<p>Search the coordinates of the pixel points matching the specified color on current screen</p>
</blockquote>
<table>
<thead>
<tr>
<th>Parameter</th>
<th align="left">Type</th>
<th>Optional</th>
<th>Default</th>
</tr>
</thead>
<tbody><tr>
<td>color</td>
<td align="left">Integer</td>
<td>NO</td>
<td></td>
</tr>
<tr>
<td>count</td>
<td align="left">Integer</td>
<td>NO</td>
<td>0</td>
</tr>
<tr>
<td>region</td>
<td align="left">table</td>
<td>NO</td>
<td>nil</td>
</tr>
<tr>
<td>debug</td>
<td align="left">boolean</td>
<td>YES</td>
<td>false</td>
</tr>
<tr>
<td>rightToLeft</td>
<td align="left">boolean</td>
<td>YES</td>
<td>false</td>
</tr>
<tr>
<td>bottonToTop</td>
<td align="left">boolean</td>
<td>YES</td>
<td>false</td>
</tr>
</tbody></table>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> result = findColor(<span class="number">0x0000ff</span>, <span class="number">2</span>, <span class="literal">nil</span>);</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found pixel: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example: Search from right to left, from bottom to top</span></span><br><span class="line"><span class="keyword">local</span> result = findColor(<span class="number">0x0000ff</span>, <span class="number">2</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found rect at: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> result = findColor(<span class="number">0x00ddff</span>, <span class="number">0</span>, &#123;<span class="number">100</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>&#125;);</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found pixel: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> region = &#123;<span class="number">100</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>&#125;;</span><br><span class="line"><span class="keyword">local</span> result = findColor(<span class="number">0x00ddff</span>, <span class="number">0</span>, region);</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found pixel: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="comment">-- Keep finding a speficied color until it&#x27;s found.</span></span><br><span class="line"><span class="keyword">local</span> locations</span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">   <span class="keyword">local</span> locations = findColor(<span class="number">0x0000ff</span>, <span class="number">2</span>, <span class="literal">nil</span>);</span><br><span class="line">   usleep(<span class="number">50000</span>) <span class="comment">-- Wait a while</span></span><br><span class="line"><span class="keyword">until</span>(locations &gt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">-- Log the locations if found</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(locations) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found pixel: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="findColors"><a href="#findColors" class="headerlink" title="findColors()"></a>findColors()</h5><p> findColors(colors, count, region, debug, rightToLeft, bottomToTop)</p>
<blockquote>
<p>colors: { {0x00ddff,0,0}, {0x00eeff,10,10}, {0x0000ff,0,20} }</p>
<p>the first is the color value. The second and the third are the corresponding locations of the colors </p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> result = findColors(&#123; &#123;<span class="number">0x00ddff</span>,<span class="number">0</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0x00eeff</span>,<span class="number">10</span>,<span class="number">10</span>&#125;, &#123;<span class="number">0x0000ff</span>,<span class="number">0</span>,<span class="number">20</span>&#125; &#125;, <span class="number">2</span>, <span class="literal">nil</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found rect at: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example: Search from right to left, from bottom to top</span></span><br><span class="line"><span class="keyword">local</span> result = findColors(&#123; &#123;<span class="number">0x00ddff</span>,<span class="number">0</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0x00eeff</span>,<span class="number">10</span>,<span class="number">10</span>&#125;, &#123;<span class="number">0x0000ff</span>,<span class="number">0</span>,<span class="number">20</span>&#125; &#125;, <span class="number">2</span>, <span class="literal">nil</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found rect at: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> colors = &#123; &#123;<span class="number">0x00ddff</span>,<span class="number">0</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0x00eeff</span>,<span class="number">10</span>,<span class="number">10</span>&#125;, &#123;<span class="number">0x0000ff</span>,<span class="number">0</span>,<span class="number">20</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">local</span> result = findColors(colors, <span class="number">0</span>, <span class="literal">nil</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found rect at: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> colors = &#123; &#123;<span class="number">0x00ddff</span>,<span class="number">0</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0x00eeff</span>,<span class="number">10</span>,<span class="number">10</span>&#125;, &#123;<span class="number">0x0000ff</span>,<span class="number">0</span>,<span class="number">20</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">local</span> region = &#123;<span class="number">100</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>&#125;;</span><br><span class="line"><span class="keyword">local</span> result = findColors(colors, <span class="number">0</span>, region);</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found rect at: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="findImage"><a href="#findImage" class="headerlink" title="findImage()"></a>findImage()</h5><p>findImage(targetImagePath, count, threshold, region, debug, method)</p>
<blockquote>
<p>Search areas matching the specified image on current screen and return the center coordinates</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th>Type</th>
<th>Specification</th>
<th>Optional</th>
<th>Default</th>
</tr>
</thead>
<tbody><tr>
<td>targetImagePath</td>
<td></td>
<td>for example: “images/gold.PNG”, If the path starts with character “/“, it will be treated as absolute path, if not, it will be treated as relative path</td>
<td>NO</td>
<td></td>
</tr>
<tr>
<td>count</td>
<td>integer</td>
<td>How many areas to find, Pass 0 or nil</td>
<td>YES</td>
<td>0</td>
</tr>
<tr>
<td>threshold</td>
<td>float</td>
<td>maximum value is 1 means totally the same, minimum value is -1 means non same, default is 0.9, usually 0.99 is good. Pass nil if you just want to use the default value</td>
<td>YES</td>
<td>0.9</td>
</tr>
<tr>
<td>region</td>
<td>table</td>
<td>Do searching in which region</td>
<td>YES</td>
<td>Whole screen</td>
</tr>
<tr>
<td>debug</td>
<td>boolean</td>
<td>If pass debug=true, it will produce a image ends with “-Debug.PNG” marked the matching areas.</td>
<td>YES</td>
<td>false</td>
</tr>
<tr>
<td>method</td>
<td>integer</td>
<td>Searching method, default is 1, pass 2 if you want to use the more intelligent method which is able to cover size scale, orientation, color changed, it will be a little slower than method 1.</td>
<td>YES</td>
<td>1</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Return</th>
<th>Type</th>
<th>Specification</th>
</tr>
</thead>
<tbody><tr>
<td>center locations</td>
<td>table</td>
<td>Center coordinates of the matching areas</td>
</tr>
</tbody></table>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> result = findImage(<span class="string">&quot;images/Gold.PNG&quot;</span>, <span class="number">5</span>, <span class="number">0.99</span>, <span class="literal">nil</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found rect at: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> result = findImage(<span class="string">&quot;images/Gold.PNG&quot;</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found rect at: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> result = findImage(<span class="string">&quot;images/Gold.PNG&quot;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found rect at: x:%f, y:%f&quot;</span>, v[<span class="number">1</span>], v[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> imagePath = <span class="string">&quot;images/spirit.PNG&quot;</span>;</span><br><span class="line"><span class="keyword">local</span> region = &#123;<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>&#125;;</span><br><span class="line"><span class="keyword">local</span> result = findImage(imagePath, <span class="number">2</span>, <span class="number">0.98</span>, region, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> x = v[<span class="number">1</span>], y = v[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">log</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Found rect at: x:%f, y:%f&quot;</span>, x, y));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- Click the found location once.</span></span><br><span class="line">    tap(x, y);</span><br><span class="line">    usleep(<span class="number">16000</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> imagePath = <span class="string">&quot;images/spirit.PNG&quot;</span>;</span><br><span class="line"><span class="keyword">local</span> region = &#123;<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>&#125;;</span><br><span class="line"><span class="comment">-- Use method 2 to find image</span></span><br><span class="line"><span class="keyword">local</span> result = findImage(imagePath, <span class="number">2</span>, <span class="number">0.98</span>, region, <span class="literal">true</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h5 id="screenshot-filePath-region"><a href="#screenshot-filePath-region" class="headerlink" title="screenshot(filePath, region)"></a>screenshot(filePath, region)</h5><blockquote>
<p>Take a screenshot for the whole screen or specified area</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Take shot of the whole screen and save into  &quot;AutoTouch&quot; album of iOS Photo Library.</span></span><br><span class="line">screenshot();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Take a screenshot of the whole screen and save to the specified path, if no PNG as path extension, .PNG will automatically added.</span></span><br><span class="line">screenshot (<span class="string">&quot;images/screenshot1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Take a screenshot of the specified area and save.</span></span><br><span class="line">screenshot (<span class="string">&quot;images/screenshot2.PNG&quot;</span>, &#123;<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Take a screenshot of the specified area and save into  &quot;AutoTouch&quot; album of iOS Photo Library.</span></span><br><span class="line">screenshot (<span class="literal">nil</span>, &#123;<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="appRun-appidentifier"><a href="#appRun-appidentifier" class="headerlink" title="appRun(appidentifier)"></a>appRun(appidentifier)</h5><blockquote>
<p>Run specified application</p>
</blockquote>
<p>或者 appActivate</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">appRun(<span class="string">&quot;com.apple.mobilesafari&quot;</span>)</span><br><span class="line">appActivate(<span class="string">&quot;com.taobao.taobao4iphone&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="appKill（appidentifier）"><a href="#appKill（appidentifier）" class="headerlink" title="appKill（appidentifier）"></a>appKill（appidentifier）</h5><blockquote>
<p>Kill specified application</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">appKill(<span class="string">&quot;com.apple.mobilesafari&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="appState-appidentifier"><a href="#appState-appidentifier" class="headerlink" title="appState(appidentifier)"></a>appState(appidentifier)</h5><blockquote>
<p>Get the running state of the specified application</p>
</blockquote>
<p>“NOT RUNNING”, “ACTIVATED”, “DEACTIVATED”</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Get the state of Safari.</span></span><br><span class="line"><span class="keyword">local</span> state = appState(<span class="string">&quot;com.apple.mobilesafari&quot;</span>);</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;State of Safari: %s&quot;</span>, state));</span><br><span class="line"><span class="comment">-- Pop up the state of Safari: &quot;ACTIVATED&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="rootDir"><a href="#rootDir" class="headerlink" title="rootDir()"></a>rootDir()</h5><blockquote>
<p>Get the default directory address of the saved script</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> dirPath = rootDir();</span><br><span class="line">alert(dirPath);</span><br><span class="line"><span class="comment">-- Popup &quot;/var/mobile/Library/AutoTouch/Scripts/&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="currentDir"><a href="#currentDir" class="headerlink" title="currentDir()"></a>currentDir()</h5><blockquote>
<p>Get directory of current executing script in runtime</p>
</blockquote>
<p>7.0.33 不支持</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> dir = currentDir();</span><br><span class="line">alert(dir);</span><br><span class="line"><span class="comment">-- &quot;/var/mobile/Library/AutoTouch/Scripts&quot;</span></span><br><span class="line"><span class="comment">-- Or maybe in tmp place for encrypted scripts: &quot;/tmp/xxxxxxxxxxxx/&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="botPath"><a href="#botPath" class="headerlink" title="botPath"></a>botPath</h5><blockquote>
<p>Get original path of the bot, relative to the runtime path of encrypted scripts</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">path</span> = botPath();</span><br><span class="line">alert(<span class="built_in">path</span>);</span><br><span class="line"><span class="comment">-- &quot;/var/mobile/Library/AutoTouch/Scripts/test.lua&quot;</span></span><br><span class="line"><span class="comment">-- &quot;/var/mobile/Library/AutoTouch/Scripts/test1.ate&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="usleep-microseconds"><a href="#usleep-microseconds" class="headerlink" title="usleep(microseconds)"></a>usleep(microseconds)</h5><blockquote>
<p>Sleep several microseconds (1/1000000 second)</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Sleep 1 second.</span></span><br><span class="line">usleep(<span class="number">1000000</span>);</span><br></pre></td></tr></table></figure>

<h5 id="log-content"><a href="#log-content" class="headerlink" title="log(content)"></a>log(content)</h5><blockquote>
<p>Record log, can be seen in the log interface</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">log</span>(<span class="string">&quot;play here...&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="alert-message"><a href="#alert-message" class="headerlink" title="alert(message)"></a>alert(message)</h5><blockquote>
<p>Pop up the dialog box to show specified content</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="toast-message-delay"><a href="#toast-message-delay" class="headerlink" title="toast(message, delay)"></a>toast(message, delay)</h5><blockquote>
<p>Show messages with Toast style and delay for some seconds</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">toast(<span class="string">&quot;Hello I&#x27;m a toast!&quot;</span>, <span class="number">5</span>); <span class="comment">-- Show message for 5 seconds.</span></span><br><span class="line">toast(<span class="string">&quot;Hello again!&quot;</span>); <span class="comment">-- Show message for 2 seconds.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello again!&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="vibrate"><a href="#vibrate" class="headerlink" title="vibrate()"></a>vibrate()</h5><blockquote>
<p>Vibrate once</p>
</blockquote>
<p>震动一次 7.0.33 没生效</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Vibrate once.</span></span><br><span class="line">vibrate();</span><br></pre></td></tr></table></figure>

<h5 id="playAudio-audioFile-times"><a href="#playAudio-audioFile-times" class="headerlink" title="playAudio(audioFile, times)"></a>playAudio(audioFile, times)</h5><blockquote>
<p>Play audio document at specified location</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Play audio infinitely.</span></span><br><span class="line">playAudio(<span class="string">&quot;/var/audio.mp3&quot;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h5 id="stopAudio"><a href="#stopAudio" class="headerlink" title="stopAudio"></a>stopAudio</h5><blockquote>
<p>Stop playing audio</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Stop playing audio.</span></span><br><span class="line">stopAudio();</span><br></pre></td></tr></table></figure>

<h5 id="getOrientation"><a href="#getOrientation" class="headerlink" title="getOrientation()"></a>getOrientation()</h5><blockquote>
<p>Get orientation of the screen</p>
</blockquote>
<table>
<thead>
<tr>
<th>Value</th>
<th>Specification</th>
</tr>
</thead>
<tbody><tr>
<td>ORIENTATION_TYPE.UNKNOWN</td>
<td>Unknown orientation. Practical value is 0.</td>
</tr>
<tr>
<td>ORIENTATION_TYPE.PORTRAIT</td>
<td>Portrait screen. Home button is at the bottom. Practical value is 1.</td>
</tr>
<tr>
<td>ORIENTATION_TYPE.PORTRAIT_UPSIDE_DOWN</td>
<td>Upside-down portrait screen. Home button on the top. Practical value is 2.</td>
</tr>
<tr>
<td>ORIENTATION_TYPE.LANDSCAPE_LEFT</td>
<td>Landscape left screen. Home Key is in the left. Practical value is 3.</td>
</tr>
<tr>
<td>ORIENTATION_TYPE.LANDSCAPE_RIGHT</td>
<td>Landscape right screen. Home key is in the right. Practical value is 4.</td>
</tr>
</tbody></table>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> o = getOrientation();</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Screen orientation is : %d&quot;</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment">-- Pop up the orientation 2 of the screen, and mark the reversed screen.</span></span><br></pre></td></tr></table></figure>

<h5 id="getScreenResolution"><a href="#getScreenResolution" class="headerlink" title="getScreenResolution"></a>getScreenResolution</h5><blockquote>
<p>Get screen resolution bese on pixels</p>
</blockquote>
<table>
<thead>
<tr>
<th>Return</th>
<th align="center">Type</th>
<th>Specification</th>
</tr>
</thead>
<tbody><tr>
<td>width</td>
<td align="center">Integer</td>
<td>Width of screen resolution.</td>
</tr>
<tr>
<td>height</td>
<td align="center">Integer</td>
<td>Height of screen resolution</td>
</tr>
</tbody></table>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> w, h = getScreenResolution();</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Resolution of iPhone 6 Plus: width:%d, height:%d&quot;</span>, w, h));</span><br><span class="line"><span class="comment">-- iPhone 6 Plus’s resolution width is 1242 and resolution height is 2208.</span></span><br></pre></td></tr></table></figure>

<h5 id="getSN"><a href="#getSN" class="headerlink" title="getSN()"></a>getSN()</h5><blockquote>
<p>Get Serial Number of the device</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> sn = getSN();</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;SN is : %s&quot;</span>, sn));</span><br><span class="line"><span class="comment">-- Popup shows the SN of the device: C15NFK32TWD2</span></span><br></pre></td></tr></table></figure>

<h5 id="getVersion"><a href="#getVersion" class="headerlink" title="getVersion()"></a>getVersion()</h5><blockquote>
<p>Get version of AutoTouch</p>
</blockquote>
<p>7.0.33 返回 nil</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> version = getVersion();</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Current version of AutoTouch is : %s&quot;</span>, version));</span><br><span class="line"><span class="comment">-- Pop up shows current version of AutoTouch: 3.5.3-4</span></span><br></pre></td></tr></table></figure>

<h5 id="frontMostAppid"><a href="#frontMostAppid" class="headerlink" title="frontMostAppid()"></a>frontMostAppid()</h5><blockquote>
<p>Get identifier of current front most App</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> appId = frontMostAppId();</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Current front most App is : %s&quot;</span>, appId))</span><br></pre></td></tr></table></figure>

<h5 id="frontMostAppOrientation"><a href="#frontMostAppOrientation" class="headerlink" title="frontMostAppOrientation()"></a>frontMostAppOrientation()</h5><blockquote>
<p>Get orientation of current front most App</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> orientation = frontMostAppOrientation();</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Orientation of current front most App is : %d&quot;</span>, orientation))</span><br></pre></td></tr></table></figure>

<h5 id="intToRgb-intColor"><a href="#intToRgb-intColor" class="headerlink" title="intToRgb(intColor)"></a>intToRgb(intColor)</h5><blockquote>
<p>Transit integer color to independent values of R,G,B.</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> r, g, b = intToRgb(<span class="number">0x2b2b2b</span>);</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;R:%d, G:%d, B:%d&quot;</span>, r, g, b))</span><br></pre></td></tr></table></figure>

<h5 id="rgbToInt-r-g-b"><a href="#rgbToInt-r-g-b" class="headerlink" title="rgbToInt(r, g, b)"></a>rgbToInt(r, g, b)</h5><blockquote>
<p>Transit values of R,G,B to integer color value</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> intColor = rgbToInt(<span class="number">200</span>, <span class="number">255</span>, <span class="number">100</span>);</span><br><span class="line">alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Int type color: %d&quot;</span>, intColor))</span><br></pre></td></tr></table></figure>

<h5 id="copyText-text"><a href="#copyText-text" class="headerlink" title="copyText(text)"></a>copyText(text)</h5><blockquote>
<p>Copy specified text to clipboard</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">copyText(<span class="string">&quot;This is a copied text!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="clipText"><a href="#clipText" class="headerlink" title="clipText()"></a>clipText()</h5><blockquote>
<p>Get the text in the clipboard</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> text = clipText();</span><br><span class="line">alert(text);</span><br><span class="line"><span class="comment">-- Popup shows the text to be copied: &quot;This is a copied text!&quot;;</span></span><br></pre></td></tr></table></figure>

<h5 id="inputText"><a href="#inputText" class="headerlink" title="inputText()"></a>inputText()</h5><blockquote>
<p>Input text to the input box selected now. You can delete a character backspace by inputText(“\b”).<strong>ATTENSION:</strong> Enable inoutText function at AutoTouch Settings &gt; Features before using it</p>
</blockquote>
<p>7.0.33 没有这个设置</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">inputText(<span class="string">&quot;Let&#x27;s input some text automatically without tapping the keyboard!&quot;</span>);</span><br><span class="line"><span class="comment">--  Delete 3 character by inputing 3 backspaces.</span></span><br><span class="line">inputText(<span class="string">&quot;\b\b\b&quot;</span>); </span><br></pre></td></tr></table></figure>

<h5 id="dialog-controls-orientations"><a href="#dialog-controls-orientations" class="headerlink" title="dialog(controls, orientations)"></a>dialog(controls, orientations)</h5><blockquote>
<p>Pop up self-defined dialog box to accept the user input. Please refer to the example for specific usage</p>
</blockquote>
<table>
<thead>
<tr>
<th>Value</th>
<th>Specification</th>
</tr>
</thead>
<tbody><tr>
<td>CONTROLLER_TYPE.LABEL</td>
<td>Text label</td>
</tr>
<tr>
<td>CONTROLLER_TYPE.INPUT</td>
<td>Input box</td>
</tr>
<tr>
<td>CONTROLLER_TYPE.PICKER</td>
<td>Picker</td>
</tr>
<tr>
<td>CONTROLLER_TYPE.SWITCH</td>
<td>Switch</td>
</tr>
<tr>
<td>CONTROLLER_TYPE.BUTTON</td>
<td>Button</td>
</tr>
<tr>
<td>CONTROLLER_TYPE.REMEMBER</td>
<td>Switch for remember user inputs</td>
</tr>
</tbody></table>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> label = &#123;<span class="built_in">type</span>=CONTROLLER_TYPE.LABEL, text=<span class="string">&quot;Would you mind to provide some personal informations?&quot;</span>&#125;</span><br><span class="line"><span class="keyword">local</span> nameInput = &#123;<span class="built_in">type</span>=CONTROLLER_TYPE.INPUT, title=<span class="string">&quot;Name:&quot;</span>, key=<span class="string">&quot;Name&quot;</span>, value=<span class="string">&quot;Bob&quot;</span>&#125;</span><br><span class="line"><span class="keyword">local</span> positionPicker = &#123;<span class="built_in">type</span>=CONTROLLER_TYPE.PICKER, title=<span class="string">&quot;Position:&quot;</span>, key=<span class="string">&quot;Position&quot;</span>, value=<span class="string">&quot;CEO&quot;</span>, options=&#123;<span class="string">&quot;CEO&quot;</span>, <span class="string">&quot;CTO&quot;</span>, <span class="string">&quot;CFO&quot;</span>, <span class="string">&quot;CXO&quot;</span>&#125; &#125;</span><br><span class="line"><span class="keyword">local</span> developerSwitch = &#123;<span class="built_in">type</span>=CONTROLLER_TYPE.SWITCH, title=<span class="string">&quot;A Developer:&quot;</span>, key=<span class="string">&quot;ADeveloper&quot;</span>, value=<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- It&#x27;s an option for users to determine weather the inputs should be remembered, if you use this control in the dialog.</span></span><br><span class="line"><span class="keyword">local</span> remember = &#123;<span class="built_in">type</span>=CONTROLLER_TYPE.REMEMBER, on=<span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[ Define buttons:</span></span><br><span class="line"><span class="comment">type = CONTROLLER_TYPE.BUTTON</span></span><br><span class="line"><span class="comment">title = Button text</span></span><br><span class="line"><span class="comment">color = Button background color, it&#x27;s optional, the default value is 0x428BCA</span></span><br><span class="line"><span class="comment">width = Button width upon percentage of the dialog width, it&#x27;s optional, the default value is 0.5, max value is 1.0.</span></span><br><span class="line"><span class="comment">flag = Integer type of button flag for identifying which button is tapped.</span></span><br><span class="line"><span class="comment">collectInputs = Boolean type specifying wheather the dialog should collect the inputs while this button is tapped. ]]</span><span class="comment">--</span></span><br><span class="line"><span class="keyword">local</span> btn1 = &#123;<span class="built_in">type</span>=CONTROLLER_TYPE.BUTTON, title=<span class="string">&quot;Button 1&quot;</span>, color=<span class="number">0x71C69E</span>, width=<span class="number">0.8</span>, flag=<span class="number">1</span>, collectInputs=<span class="literal">false</span>&#125;</span><br><span class="line"><span class="keyword">local</span> btn2 = &#123;<span class="built_in">type</span>=CONTROLLER_TYPE.BUTTON, title=<span class="string">&quot;Button 2&quot;</span>, color=<span class="number">0xFF5733</span>, flag=<span class="number">2</span>, collectInputs=<span class="literal">true</span>&#125;</span><br><span class="line"><span class="keyword">local</span> btn3 = &#123;<span class="built_in">type</span>=CONTROLLER_TYPE.BUTTON, title=<span class="string">&quot;Button 3&quot;</span>, color=<span class="number">0xFFB7D0</span>, width=<span class="number">1.0</span>, flag=<span class="number">3</span>, collectInputs=<span class="literal">false</span>&#125;</span><br><span class="line"><span class="keyword">local</span> btn4 = &#123;<span class="built_in">type</span>=CONTROLLER_TYPE.BUTTON, title=<span class="string">&quot;Button 4&quot;</span>, width=<span class="number">1.0</span>, flag=<span class="number">4</span>, collectInputs=<span class="literal">true</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> controls = &#123;label, nameInput, positionPicker, developerSwitch, btn1, btn2, remember, btn3, btn4&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Pop up the dialog. After popping, the script will suspend waiting for user input until any button is tapped, then returns the flag of tapped button.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- What orientations the dialog could be, it&#x27;s optional</span></span><br><span class="line"><span class="keyword">local</span> orientations = &#123; ORIENTATION_TYPE.PORTRAIT &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> result = dialog(controls, orientations);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">    alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;name:%s, birthday:%s, gender:%d&quot;</span>, nameInput.value, positionPicker.value, developerSwitch.value))</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    alert(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;Dialog returned: %s&quot;</span>, result))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="cleanDialogValues-script"><a href="#cleanDialogValues-script" class="headerlink" title="cleanDialogValues(script)"></a>cleanDialogValues(script)</h5><blockquote>
<p>Clear the remembered values of the dialog created by the function dialog</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- There is a dialog.lua script in the scripts list</span></span><br><span class="line">clearDialogValues(<span class="string">&quot;dialog.lua&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="openURL-urlString"><a href="#openURL-urlString" class="headerlink" title="openURL(urlString)"></a>openURL(urlString)</h5><blockquote>
<p>Open url, or open other apps’ url scheme</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">openURL(<span class="string">&quot;https://autotouch.net&quot;</span>)</span><br><span class="line">openURL(<span class="string">&quot;prefs:root=General&amp;path=About&quot;</span>)</span><br><span class="line">openURL(<span class="string">&quot;musics://&quot;</span>)</span><br><span class="line">openURL(<span class="string">&quot;itms-apps://itunes.apple.com&quot;</span>)</span><br><span class="line">openURL(<span class="string">&quot;tel://+1123456&quot;</span>)</span><br><span class="line">openURL(<span class="string">&quot;clashofclans://&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="isLicensed"><a href="#isLicensed" class="headerlink" title="isLicensed()"></a>isLicensed()</h5><blockquote>
<p>Check if the current device is running licensed AutoTouch</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> isLicensed() <span class="keyword">then</span></span><br><span class="line">    alert(<span class="string">&quot;Your device is licensed by AutoTouch!&quot;</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="setAutoLaunch-scriptPath-on"><a href="#setAutoLaunch-scriptPath-on" class="headerlink" title="setAutoLaunch(scriptPath, on)"></a>setAutoLaunch(scriptPath, on)</h5><blockquote>
<p>Switch on/off a script as auto launch</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">setAutoLaunch(<span class="string">&quot;Records/test.lua&quot;</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<h5 id="listAutoLaunch"><a href="#listAutoLaunch" class="headerlink" title="listAutoLaunch()"></a>listAutoLaunch()</h5><blockquote>
<p>List all auto launch scripts</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> scripts = listAutoLaunch()</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(scripts) <span class="keyword">do</span></span><br><span class="line">    alert(v);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="stop"><a href="#stop" class="headerlink" title="stop()"></a>stop()</h5><blockquote>
<p>SStop the current script execution.</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Exit execution</span></span><br><span class="line">stop();</span><br></pre></td></tr></table></figure>

<h5 id="ocr"><a href="#ocr" class="headerlink" title="ocr"></a>ocr</h5><p>ocr(region, languages, threshold, whitelist, blacklist, timeout, tessdataParentDir, debug)</p>
<p> 需要识别的语言，下载需要的语言到相同的目录 </p>
<p><code>/var/mobile/Library/AutoTouch/Library/tessadata</code></p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th align="center">Type</th>
<th>Specification</th>
<th align="center">Optional</th>
<th align="center">Default</th>
</tr>
</thead>
<tbody><tr>
<td>region</td>
<td align="center">table</td>
<td>What region you want to recognize text at the screen.</td>
<td align="center">YES</td>
<td align="center">Whole screen</td>
</tr>
<tr>
<td>languages</td>
<td align="center">String</td>
<td>Languages you want to recognize, by default AutoTouch has included <code>eng.traineddata</code> at <code>/var/mobile/Library/AutoTouch/Library/tessadata</code>, you may download other languages you needed to the same dir from <a href="https://github.com/tesseract-ocr/tessdata/tree/3.04.00">https://github.com/tesseract-ocr/tessdata/tree/3.04.00</a>. Somewhat you may even train your own data for <code>tesseract orc</code> and put it at <code>tessadata</code> dir.</td>
<td align="center">YES</td>
<td align="center">“eng”</td>
</tr>
<tr>
<td>threshold</td>
<td align="center">Integer</td>
<td>Threshold the image, Adjust this value to improve the accurancy. Value range is from 0 to 255.</td>
<td align="center">YES</td>
<td align="center">100</td>
</tr>
<tr>
<td>whitelist</td>
<td align="center">String</td>
<td>What characters you want to recognize in the region, such as “0123456789” will find numbers only.</td>
<td align="center">YES</td>
<td align="center">NULL</td>
</tr>
<tr>
<td>blacklist</td>
<td align="center">String</td>
<td>What characters you do not want to recognize from the region.</td>
<td align="center">YES</td>
<td align="center">NULL</td>
</tr>
<tr>
<td>timeout</td>
<td align="center">Integer</td>
<td>Timeout in seconds.</td>
<td align="center">YES</td>
<td align="center">3</td>
</tr>
<tr>
<td>tessdataParentDir</td>
<td align="center">String</td>
<td>Parent directory path of the <code>tessdata</code> directory, google to know more about <code>tessdata</code> of <code>tesseract ocr</code>. If this parameter starts with “/“, it will be treated as an absolute path, otherwise it will be treated as a relative path. The real <code>traineddata</code> files will be at <code>tessdata</code>dir inside <code>tessdataParentDir</code>. <strong>ATTENSION</strong> this parameter is the <strong>parent dir</strong> of the <code>tessdata</code> folder!!! And the folder containers traineddata files must be named <code>tessdata</code>.</td>
<td align="center">YES</td>
<td align="center"><code>/var/mobile/Library/AutoTouch/Library/</code></td>
</tr>
<tr>
<td>debug</td>
<td align="center">boolean</td>
<td>If pass debug=true, it will produce a image ends with “-Debug.PNG” marked the matching areas.</td>
<td align="center">YES</td>
<td align="center">false</td>
</tr>
</tbody></table>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> result = ocr(&#123;<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>&#125;, <span class="string">&#x27;eng&#x27;</span>, <span class="number">220</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">local</span> result = ocr(&#123;<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>&#125;, <span class="string">&#x27;eng+fra&#x27;</span>, <span class="number">220</span>, <span class="string">&#x27;0123456789 &#x27;</span>, <span class="string">&#x27;..........&#x27;</span>, <span class="number">5</span>, <span class="literal">nil</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="comment">-- Find English+France at the specified region with threshold 220, using the traindata in `tessdata` folder at the current directory.</span></span><br><span class="line"><span class="comment">-- Like this example, you can put the traindata inside your package project, so you can encrypt and pack them to a single bot.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--+TestOrcProject.at</span></span><br><span class="line"><span class="comment">--+----tesseract</span></span><br><span class="line"><span class="comment">--+--------eng.traindata</span></span><br><span class="line"><span class="comment">--+--------fra.traindata</span></span><br><span class="line"><span class="comment">--+----main.lua</span></span><br><span class="line"><span class="comment">--+----worker.lua</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- `./` means under current directory, it will find `tessdata` folder in current directory.</span></span><br><span class="line"><span class="keyword">local</span> result = ocr(&#123;<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>&#125;, <span class="string">&#x27;eng+fra&#x27;</span>, <span class="number">220</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="number">5</span>, <span class="string">&#x27;./&#x27;</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<p>识别当前界面范围， 7.0.33 识别 result = nil</p>
<p>中文识别 chi_sim 死机了。。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> result = ocr(&#123;<span class="number">80.28</span>,<span class="number">225</span>, <span class="number">176.41</span>, <span class="number">120.42</span>&#125;,<span class="string">&#x27;eng&#x27;</span>, <span class="number">220</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="number">5</span>, <span class="string">&#x27;./&#x27;</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<h5 id="recognizeText"><a href="#recognizeText" class="headerlink" title="recognizeText()"></a>recognizeText()</h5><blockquote>
<p>Recognize text on the screen</p>
</blockquote>
<p>7.0.33 版本不支持 recognizeText</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Recognize text on the screen or a specified region</span></span><br><span class="line"><span class="comment">-- recognizeText(region, customWords, minimumTextHeight, level, languages, correct, debug)</span></span><br><span class="line"><span class="comment">-- @param &#123;region&#125; - specified the region to recognize text</span></span><br><span class="line"><span class="comment">-- @param &#123;customWords&#125; - an array of strings to supplement the recognized languages at the word recognition stage.</span></span><br><span class="line"><span class="comment">-- @param &#123;minimumTextHeight&#125; - the minimum height of the text expected to be recognized, relative to the region/screen height, default is 1/32.</span></span><br><span class="line"><span class="comment">-- @param &#123;level&#125; - 0 means accurate first, 1 means speed first</span></span><br><span class="line"><span class="comment">-- @param &#123;languages&#125; - an array of languages to detect, in priority order, only `en-US` supported now. ISO language codes: http://www.lingoes.net/en/translator/langcode.htm. Use function `at.recognizeTextSupportedLanguages()` of `JavaScript` API to get the supported languages</span></span><br><span class="line"><span class="comment">-- @param &#123;correct&#125; - whether use language correction during the recognition process.</span></span><br><span class="line"><span class="comment">-- @param &#123;debug&#125; - whether you want to produce debug image</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> region = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">500</span>, <span class="number">600</span>&#125;; <span class="comment">-- nil for default means hole screen, </span></span><br><span class="line"><span class="keyword">local</span> customWords = <span class="literal">nil</span>; <span class="comment">-- nil for default, or something like [&#x27;Deploy&#x27;, &#x27;Troops&#x27;]</span></span><br><span class="line"><span class="keyword">local</span> minimumTextHeight = <span class="literal">nil</span>; <span class="comment">-- nil for default</span></span><br><span class="line"><span class="keyword">local</span> level = <span class="literal">nil</span>; <span class="comment">-- nil for default means value 0</span></span><br><span class="line"><span class="keyword">local</span> languages = <span class="literal">nil</span>; <span class="comment">-- nil for default, or something like [&#x27;en-US&#x27;, &quot;fr-FR&quot;, &#x27;zh-Hans&#x27;].</span></span><br><span class="line"><span class="keyword">local</span> correct = <span class="literal">nil</span>; <span class="comment">-- nil for default value false</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">debug</span> = <span class="literal">nil</span>; <span class="comment">-- nil for default value false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> result = recognizeText(region, customWords, minimumTextHeight, level, languages, correct, <span class="built_in">debug</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Got result of recognizeText:</span></span><br><span class="line"><span class="comment">-- &#123;</span></span><br><span class="line"><span class="comment">--     &#123;</span></span><br><span class="line"><span class="comment">--         &quot;text&quot;: &quot;Example&quot;,</span></span><br><span class="line"><span class="comment">--         &quot;rectangle&quot;: &#123;</span></span><br><span class="line"><span class="comment">--             &quot;bottomRight&quot;: &#123;</span></span><br><span class="line"><span class="comment">--                 &quot;x&quot;: 300.47,</span></span><br><span class="line"><span class="comment">--                 &quot;y&quot;: 177.78</span></span><br><span class="line"><span class="comment">--             &#125;,</span></span><br><span class="line"><span class="comment">--             &quot;topRight&quot;: &#123;</span></span><br><span class="line"><span class="comment">--                 &quot;x&quot;: 300.47,</span></span><br><span class="line"><span class="comment">--                 &quot;y&quot;: 237.52</span></span><br><span class="line"><span class="comment">--             &#125;,</span></span><br><span class="line"><span class="comment">--             &quot;topLeft&quot;: &#123;</span></span><br><span class="line"><span class="comment">--                 &quot;x&quot;: 33.51,</span></span><br><span class="line"><span class="comment">--                 &quot;y&quot;: 237.42</span></span><br><span class="line"><span class="comment">--             &#125;,</span></span><br><span class="line"><span class="comment">--             &quot;bottomLeft&quot;: &#123;</span></span><br><span class="line"><span class="comment">--                 &quot;x&quot;: 33.51,</span></span><br><span class="line"><span class="comment">--                 &quot;y&quot;: 177.68</span></span><br><span class="line"><span class="comment">--             &#125;</span></span><br><span class="line"><span class="comment">--         &#125;</span></span><br><span class="line"><span class="comment">--     &#125;</span></span><br><span class="line"><span class="comment">-- &#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="appInfo-appidentifier"><a href="#appInfo-appidentifier" class="headerlink" title="appInfo(appidentifier)"></a>appInfo(appidentifier)</h5><blockquote>
<p>Get the speficied App’s displayName,executablePath,bundleContainerPath,dataContainerPath</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> result = appInfo(<span class="string">&quot;com.apple.mobilesafari&quot;</span>)</span><br><span class="line">alert(<span class="built_in">table</span>.<span class="built_in">tostring</span>(result))</span><br></pre></td></tr></table></figure>

<h5 id="setTimer-scriptPath-fireTime-repeat-interval"><a href="#setTimer-scriptPath-fireTime-repeat-interval" class="headerlink" title="setTimer(scriptPath, fireTime, repeat, interval)"></a>setTimer(scriptPath, fireTime, repeat, interval)</h5><blockquote>
<p>Set timer for a script</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- trigger after 1000 seconds</span></span><br><span class="line"><span class="keyword">local</span> done = setTimer(<span class="string">&quot;Records/test.lua&quot;</span>, <span class="number">1000</span>, <span class="literal">false</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">-- Equals to</span></span><br><span class="line">const done = at.setTimer(<span class="string">&quot;/var/mobile/Library/AutoTouch/Scripts/Records/test.lua&quot;</span>, <span class="number">1000</span>, <span class="literal">false</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- trigger at 2019-09-17 08:12:52 and repeat every 10000 seconds</span></span><br><span class="line"><span class="keyword">local</span> done = setTimer(<span class="string">&quot;Records/test.lua&quot;</span>, <span class="string">&quot;2019-09-17 08:12:52&quot;</span>, <span class="literal">true</span>, <span class="number">10000</span>);</span><br></pre></td></tr></table></figure>

<h5 id="removeTimer-scriptPath"><a href="#removeTimer-scriptPath" class="headerlink" title="removeTimer(scriptPath)"></a>removeTimer(scriptPath)</h5><blockquote>
<p>Remove timer of a script</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> done = removeTimer(<span class="string">&quot;/Records/test.lua&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="keepAutoTouchAwake-keepAwake"><a href="#keepAutoTouchAwake-keepAwake" class="headerlink" title="keepAutoTouchAwake(keepAwake)"></a>keepAutoTouchAwake(keepAwake)</h5><blockquote>
<p>Keep AutoTouch awake aginst iOS idle sleep</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">keepAutoTouchAwake(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>



<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> socket = <span class="built_in">require</span>(<span class="string">&quot;socket&quot;</span>)</span><br><span class="line"><span class="comment">-- 获取时间戳</span></span><br><span class="line"><span class="built_in">log</span>(<span class="built_in">os</span>.<span class="built_in">time</span>())        <span class="comment">-- 1632985348</span></span><br><span class="line"><span class="built_in">log</span>(socket.gettime()) <span class="comment">-- 1632985348.2712</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span><span class="params">(n)</span></span></span><br><span class="line">   socket.<span class="built_in">select</span>(<span class="literal">nil</span>, <span class="literal">nil</span>, n)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 休眠0.1秒</span></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">usleep(<span class="number">100000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>













<p><a href="http://www.lua.org/manual/5.3/">Lua Official Reference Manual</a></p>
]]></content>
  </entry>
  <entry>
    <title>Core Audio</title>
    <url>/2021/08/06/Core-Audio/</url>
    <content><![CDATA[<h4 id="Core-Audio"><a href="#Core-Audio" class="headerlink" title="Core Audio"></a>Core Audio</h4><p>Core Audio 结构分层（<a href="https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/CoreAudioOverview/CoreAudioEssentials/CoreAudioEssentials.html#//apple_ref/doc/uid/TP40003577-CH10-SW1">官方文档</a>）</p>
<img src="API Architectural Layers.png" alt="Architectural Layers"/>

<ul>
<li>Low-Level Services：底层跟硬件打交道</li>
</ul>
<p>I/O Kit：与硬件驱动交互<br>Audio HAL：音频硬件抽象层，使API调用与实际硬件相分离<br>Core MIDI：提供与MIDI（乐器数字接口）设备（包括硬件键盘和合成器）进行通信的API<br>Host Time Services：访问硬件时钟</p>
<ul>
<li>Mid-Level Services：Core Audio 中的中间层包括用于数据格式转换、读写磁盘、解析流和使用插件的服务</li>
</ul>
<p>Audio Convert Services：负责音频数据格式的转换<br>Audio File Services：负责音频数据读写<br>Audio Unit Services 和 Audio Processing Graph Services 使应用程序可以使用数字信号处理（DSP）插件，例如均衡器和混频器<br>Core Audio Clock Services：用于音频和MIDI同步以及时间格式管理<br>Audio File Stream Services：创建可以解析流的应用程序，负责流解析，对音频进行解码</p>
<ul>
<li>High-Level Services</li>
</ul>
<p>AVAudioPlayer：高级接口，可以完成整个音频播放的过程<br>Audio Queue Services：录制、播放、暂停、循环、同步音频<br>Extended Audio File Services：Audio File Services 和 Audio Converter services的结合体<br>OpenAL：游戏音频</p>
<h4 id="Audio-Session"><a href="#Audio-Session" class="headerlink" title="Audio Session"></a>Audio Session</h4><p><a href="https://links.jianshu.com/go?to=https://developer.apple.com/library/archive/documentation/Audio/Conceptual/AudioSessionProgrammingGuide/Introduction/Introduction.html%23//apple_ref/doc/uid/TP40007875-CH1-SW1">官方文档 Audio Session Programming Guide</a></p>
<img src="Audio Session.png" alt="Audio Session" style="zoom:60%;" />

<p>可以使用 AVAudioSession 实例与应用程序的音频会话进行交互</p>
<ul>
<li>配置音频会话的类别和模式，告诉系统如何使用音频</li>
<li>激活音频会话使设置的类别和模式使设置生效</li>
<li>订阅并响应音频会话通知，例如音频中断和路由更改</li>
<li>执行高级别的音频设备配置，例如采样率，I/O缓冲持续时间和通道数</li>
</ul>
<h5 id="配置-Audio-Session"><a href="#配置-Audio-Session" class="headerlink" title="配置 Audio Session"></a>配置 Audio Session</h5><p>Audio Session 默认行为</p>
<ul>
<li>支持音频播放，但不允许录音</li>
<li>iOS中，将”铃声/静音”开关设置为静音模式会使应用播放的任何音频静音</li>
<li>iOS中，将设备锁定时，应用程序的音频将静音</li>
<li>当你的应用播放音频时，其他任何背景音频（如音乐应用正在播放的音频）都将静音</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let session &#x3D; AVAudioSession.sharedInstance()</span><br><span class="line">do &#123;</span><br><span class="line">    try session.setCategory(.playback, mode: .moviePlayback, options: [])</span><br><span class="line">&#125; catch let error as NSError &#123;</span><br><span class="line">    print(&quot;Failed to set the audio session category and mode: \(error.localizedDescription)&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Category 设置音频的基本行为，可以通过设置 Mode 进一步设置这些行为</p>
<p>例如：IP电话（VoIP）Category设置为 AVAudioSessionCategoryPlayAndRecord，Mode 设置为 AVAudioSessionModeVoiceChat 此模式可确保通过系统提供的信号处理来优化语音信号</p>
<p>某些Category通过会话上设置一个或多个Category选项来支持覆盖默认行为，如AVAudioSessionCategoryPlayback 类别的默认行为会在激活会话时中断其他系统音频，如果您希望音频与其他系统音频混合，则可以通过 AVAudioSessionCategoryOptionMixWithOthers 在会话上设置选项来覆盖此行为</p>
<img src="Category behavior.jpg" alt="Category behavior"/>

<p>大多数应用在启动时只需要设置一次Category，但可以根据需要更改Category，可以在音频会话处于激活状态进行更改，最好在更改Category或者其他会话属性前停用音频会话，停用会话的同时进行这些更改可以防止音频系统不必要的重新配置</p>
<img src="AudioSession mode.png" alt="AudioSession mode"/>

<h6 id="Multiroute-Category"><a href="#Multiroute-Category" class="headerlink" title="Multiroute Category"></a>Multiroute Category</h6><p>多路由Category使应用程序可以使用所有连接的输出端口，而不仅仅使用最后的使用端口</p>
<p>例如，你正在通过HDMI输出路径收听音频并插入耳机，则你的应用将继续通过HDMI输出路径输出音频，同时还通过耳机播放音频</p>
<p>还可以将不同的音频流发送到不同的输出路由，例如，应用可以将一个音频发送到左耳机，将另一个音频发送到右耳机，将第三个音频流发送到HDMI路由</p>
<img src="multiroute.png" alt="multiroute" style="zoom:50%;" />

<p>有效输出路径组合</p>
<ul>
<li>USB和耳机</li>
<li>HDMI和耳机</li>
<li>LineOut和耳机</li>
</ul>
<p>注：仅当未连接任何其他输出端口（USB，HDMI，LineOut）时，才可以使用内置扬声器</p>
<h6 id="选择AirPlay的Category和mode"><a href="#选择AirPlay的Category和mode" class="headerlink" title="选择AirPlay的Category和mode"></a>选择AirPlay的Category和mode</h6><p>仅特定Category和mode支持AirPlay，以下类别通知支持AirPlay的镜像和非镜像版本</p>
<ul>
<li>AVAudioSessionCategorySoloAmbient</li>
<li>AVAudioSessionCategoryAmbient</li>
<li>AVAudioSessionCategoryPlayback<br>AVAudioSessionCategoryPlayAndRecord 类别和以下mode仅支持AirPlay镜像版本</li>
<li>AVAudioSessionModeDefault</li>
<li>AVAudioSessionModeVideoChat</li>
<li>AVAudioSessionModeGameChat</li>
</ul>
<p>注：从 iOS 10 开始，您可以在使用 AVAudioSessionCategoryPlayAndRecord 类别时通过使用 AVAudioSessionCategoryOptionAllowAirPlay 选项激活会话来启用 AirPlay 输出</p>
<h6 id="背景音频"><a href="#背景音频" class="headerlink" title="背景音频"></a>背景音频</h6><p>Capabilities 打开 Background Modes 的 Audio,AirPlay,and Picture in Picture</p>
<h5 id="激活-Audio-Session"><a href="#激活-Audio-Session" class="headerlink" title="激活 Audio Session"></a>激活 Audio Session</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let session &#x3D; AVAudioSession.sharedInstance()</span><br><span class="line">do &#123;</span><br><span class="line">    &#x2F;&#x2F; 1) Configure your audio session category, options, and mode</span><br><span class="line">    &#x2F;&#x2F; 2) Activate your audio session to enable your custom configuration</span><br><span class="line">    try session.setActive(true, options: [])</span><br><span class="line">&#125; catch let error as NSError &#123;</span><br><span class="line">    print(&quot;Unable to activate audio session:  \(error.localizedDescription)&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用AVFoundation对象（AVPlayer，AVAudioRecoder）播放或录制音频时，系统会在中断结束时重新激活音频会话，但是如果注册了通知消息并显式重新激活音频会话，则可以验证重新激活成功，还可以更新应用程序的状态和用户界面</p>
<h6 id="检测是否正在播放其他音频"><a href="#检测是否正在播放其他音频" class="headerlink" title="检测是否正在播放其他音频"></a>检测是否正在播放其他音频</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func setupNotification() &#123;</span><br><span class="line">    NotificationCenter.default.addObserver(self,</span><br><span class="line">             selector: #selector(handleSecondaryAudio(notification:)),</span><br><span class="line">             name: AVAudioSession.silenceSecondaryAudioHintNotification,</span><br><span class="line">             object: AVAudioSession.sharedInstance())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@objc func handleSecondaryAudio(notification: Notification) &#123;</span><br><span class="line">    guard let userinfo &#x3D; notification.userInfo ,</span><br><span class="line">    let typeValue &#x3D; userinfo[AVAudioSessionSilenceSecondaryAudioHintTypeKey] as? UInt,</span><br><span class="line">    let type &#x3D; AVAudioSession.SilenceSecondaryAudioHintType(rawValue: typeValue) else &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    if type &#x3D;&#x3D; .begin &#123;</span><br><span class="line">        &#x2F;&#x2F;其他应用音频开始播放 - 将辅助音频静音</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;其他应用音频停止播放 - 重新启动辅助音频</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="响应中断"><a href="#响应中断" class="headerlink" title="响应中断"></a>响应中断</h6><p>你的应用程序可能会中断后暂停，当发生接听电话时，系统会发出中断结束消息，你的应用将继续运行，要恢复音频，必须重新激活音频会话</p>
<img src="Interruption.png" alt="Interruption" style="zoom:60%;" />

<ol>
<li>应用处于活跃状态，正在播放音频</li>
<li>FaceTime请求到达，系统激活FaceTime的音频会话</li>
<li>系统将停用你的音频会话，此时你的应用播放停止</li>
<li>系统发布通知，通知你的会话已被停用</li>
<li>你的应用处理通知，如更新界面保存停止播放点继续播放所需的信息</li>
<li>如果用户取消中断（忽略FaceTime请求），系统发送通知我们应用中断结束</li>
<li>你的应用处理中断结束操作，如更新界面重新激活音频会话并恢复播放</li>
<li>如果没有6的中断，而是接听了电话，你的应用将被暂停</li>
</ol>
<ul>
<li>音频中断处理<br>中断开始后：保存状态和上下文，更新用户界面<br>中断结束后：恢复状态和上下文，更新用户界面，重新激活音频会话</li>
</ul>
<ul>
<li>观察音频中断 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func registerForNotification() &#123;</span><br><span class="line">    NotificationCenter.default.addObserver(self, selector: #selector(handleInterruption(notification:)),</span><br><span class="line">                                           name: AVAudioSession.interruptionNotification,</span><br><span class="line">                                           object: AVAudioSession.sharedInstance())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@objc func handleInterruption(notification: Notification) &#123;</span><br><span class="line">    guard let userinfo &#x3D; notification.userInfo,</span><br><span class="line">          let typeValue &#x3D; userinfo[AVAudioSessionInterruptionTypeKey] as? UInt,</span><br><span class="line">          let type &#x3D; AVAudioSession.InterruptionType(rawValue: typeValue) else &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    if type &#x3D;&#x3D; .began &#123;</span><br><span class="line">        &#x2F;&#x2F;中断开始 采取适当措施（保存状态更新界面）</span><br><span class="line">    &#125; else if type &#x3D;&#x3D; .ended &#123;</span><br><span class="line">        guard let optionsValue &#x3D; userinfo[AVAudioSessionInterruptionOptionKey] as? UInt else &#123;</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        let options &#x3D; AVAudioSession.InterruptionOptions(rawValue: optionsValue)</span><br><span class="line">        if options.contains(.shouldResume) &#123;</span><br><span class="line">            &#x2F;&#x2F;中断结束 恢复播放</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="响应路由变更"><a href="#响应路由变更" class="headerlink" title="响应路由变更"></a>响应路由变更</h6><p>当用户插入或拔出耳机时，系统会自动更改音频硬件路由</p>
<img src="routechange.png" alt="routechange" style="zoom:60%;" />

<p>你的应用启动后，系统会首先确定音频路由，应用运行时，它将继续监听活动路由</p>
<p>录制期间，用户可以插入和拔出耳机，作为响应，系统发送包含更改原因和先前路由的路由更改通知，应用停止录制</p>
<ul>
<li>观察音频路由变更</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func setupNotification() &#123;</span><br><span class="line">    NotificationCenter.default.addObserver(self, </span><br><span class="line">         selector: #selector(handleRouteChange(notification:)),</span><br><span class="line">         name: AVAudioSession.routeChangeNotification,</span><br><span class="line">         object: AVAudioSession.sharedInstance())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@objc func handleRouteChange(notification: Notification) &#123;</span><br><span class="line">    guard let userinfo &#x3D; notification.userInfo,</span><br><span class="line">          let reasonValue &#x3D; userinfo[AVAudioSessionRouteChangeReasonKey] as? UInt,</span><br><span class="line">          let reason &#x3D; AVAudioSession.RouteChangeReason(rawValue: reasonValue) else &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    switch reason &#123;</span><br><span class="line">    case .newDeviceAvailable:</span><br><span class="line">        print(&quot;处理可用新设备&quot;)</span><br><span class="line">        let session &#x3D; AVAudioSession.sharedInstance()</span><br><span class="line">        for output in session.currentRoute.outputs where output.portType &#x3D;&#x3D; AVAudioSessionPortHeadphones &#123;</span><br><span class="line">            &#x2F;&#x2F;耳机连接true</span><br><span class="line">            headphonesConnected &#x3D; true</span><br><span class="line">        &#125;</span><br><span class="line">    case .oldDeviceUnavailable:</span><br><span class="line">        print(&quot;处理旧设备&quot;)</span><br><span class="line">        if let previousRoute &#x3D;</span><br><span class="line">            userInfo[AVAudioSessionRouteChangePreviousRouteKey] as? AVAudioSessionRouteDescription &#123;</span><br><span class="line">            for output in previousRoute.outputs where output.portType &#x3D;&#x3D; AVAudioSessionPortHeadphones &#123;</span><br><span class="line">                &#x2F;&#x2F;耳机连接false</span><br><span class="line">                headphonesConnected &#x3D; false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    default:</span><br><span class="line">        ()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当有新设备时，可以查询音频会话currentRoute属性，返回AVAudioSessionRouteDescription对象，其中列出了音频会话的所有输入和输出</p>
<p>如果路由更改原因是原因 AVAudioSessionRouteChangeReasonOldDeviceUnavailable ，则媒体播放应用应暂停播放，但如果原因是，则不应暂停播放 AVAudioSessionRouteChangeReasonOverride</p>
<p>配置设备硬件</p>
<table>
<thead>
<tr>
<th>设置</th>
<th align="center">首选采样率</th>
<th align="left">首选I/O缓冲区持续时间</th>
</tr>
</thead>
<tbody><tr>
<td>High value</td>
<td align="center">示例：48Hz +高音质 -大文件或缓冲区大小</td>
<td align="left">示例：500ms +较少的文件访问 -更长的延迟</td>
</tr>
<tr>
<td>Low value</td>
<td align="center">示例：8Hz +大文件或缓冲区大小 -低音频质量</td>
<td align="left">示例：5ms +低延迟 -频繁的文件访问</td>
</tr>
</tbody></table>
<p>如果音频质量在你应用中非常重要，并且文件或缓冲区的大小不是主要问题，则可以指定高采样率的首选项</p>
<p>默认音频I/O缓存持续时间（44.1kHz约0.02s）为大多数应用提供了足够的响应速度，可以对延迟有严格要求的应用（如现场乐器监控）设置较低的I/O持续时间，但对大多数应用，无需修改此设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Category and mode</span><br><span class="line">let session &#x3D; AVAudioSession.sharedInstance()</span><br><span class="line">do &#123;</span><br><span class="line">    try session.setCategory(.record, mode: .default, options: [])</span><br><span class="line">&#125; catch &#123;</span><br><span class="line">    print(&quot;Unable to set Category: \(error.localizedDescription)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Set preferred sample rate</span><br><span class="line">do &#123;</span><br><span class="line">    try session.setPreferredSampleRate(44_100)</span><br><span class="line">&#125; catch &#123;</span><br><span class="line">    print(&quot;Unable to set preferred sample rate \(error.localizedDescription)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Set preferred I&#x2F;O buffer duration</span><br><span class="line">do &#123;</span><br><span class="line">    try session.setPreferredIOBufferDuration(0.005)</span><br><span class="line">&#125; catch &#123;</span><br><span class="line">    print(&quot;Unable to set preferred I&#x2F;O bufferr duration \(error.localizedDescription)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Active the audio session</span><br><span class="line">do &#123;</span><br><span class="line">    try session.setActive(true)</span><br><span class="line">&#125; catch &#123;</span><br><span class="line">    print(&quot;Unable to active session \(error.localizedDescription)&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="选择和配置麦克风"><a href="#选择和配置麦克风" class="headerlink" title="选择和配置麦克风"></a>选择和配置麦克风</h6><ul>
<li>设置首选输入 Setting a Preferred Input<br>要发现内置或已连接的输入端口，使用音频会话的<code>availableInputs</code>属性，返回一个<code>AVAudioSessionPortDescription</code>对象数组，这些对象描述设备的可用输入端口，可用通过端口<code>protType</code>属性标识端口，要设置首选输入端口（内置麦克风，有线麦克风，USB输入等）使用音频会话的<code>setPreferredInput:error:</code>方法</li>
<li>设置首选数据源 Setting a Preferred Data Source<br>某些端口（如内置麦克风和某些USB附件）支持数据源，可用通过查询端口描述的<code>DataSource</code>属性发现可用数据源。<br>对于内置麦克风，返回的数据源描述对象代表每个单独的麦克风，不同设备的内置麦克风返回不同的值。如<code>iPhone4</code>和<code>iPhone4s</code>有两个麦克风：底部和顶部<br>可通过数据源描述的<code>location</code>属性（上部下部）和<code>orientation</code>属性（正面背面）的组合来标识各个内置麦克风，使用<code>setPreferredDataSource:error:</code>方法设置首选数据源<code>AVAudioSessionPortDescription</code></li>
<li>设置首选极性模式 Setting a Preferred Polar Pattern<br>某些iOS设备支持为某些内置麦克风配置麦克风极性模式，麦克风的极性模式定义了其对声音相对于声源方向的灵敏度<br><code>supportedPolarPatterns</code>数据源描述对象的属性返回可用模式。此属性返回数据源支持的极性图案的数组，例如心形或全向，或者<code>nil</code>在没有可用的可选图案时返回。如果数据源具有许多受支持的极性图案，则可以使用数据源描述的<code>[setPreferredPolarPattern:error:</code>方法来设置首选的极性图案</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Preferred Mic &#x3D; Front, Preferred Polar Pattern &#x3D; Cardioid</span><br><span class="line">let preferredMicOrientation &#x3D; AVAudioSession.Orientation.front</span><br><span class="line">let preferredPolarPattern   &#x3D; AVAudioSession.PolarPattern.cardioid</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Retrieve your configured and activated audio session</span><br><span class="line">let session &#x3D; AVAudioSession.sharedInstance()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Get available inputs</span><br><span class="line">guard let inputs &#x3D; session.availableInputs else &#123; return &#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; Find built-in mic</span><br><span class="line">guard let builtInMic &#x3D; inputs.first(where: &#123;</span><br><span class="line">    $0.portType &#x3D;&#x3D; AVAudioSession.Port.builtInMic</span><br><span class="line">&#125;) else &#123; return &#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; Find the data source at the specified orientation</span><br><span class="line">guard let dataSource &#x3D; builtInMic.dataSources?.first (where: &#123;</span><br><span class="line">    $0.orientation &#x3D;&#x3D; preferredMicOrientation</span><br><span class="line">&#125;) else &#123; return &#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; Set data source&#39;s polar pattern</span><br><span class="line">do &#123;</span><br><span class="line">    try dataSource.setPreferredPolarPattern(preferredPolarPattern)</span><br><span class="line">&#125; catch let error as NSError &#123;</span><br><span class="line">    print(&quot;Unable to preferred polar pattern: \(error.localizedDescription)&quot;)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; Set the data source as the input&#39;s preferred data source</span><br><span class="line">do &#123;</span><br><span class="line">    try builtInMic.setPreferredDataSource(dataSource)</span><br><span class="line">&#125; catch let error as NSError &#123;</span><br><span class="line">    print(&quot;Unable to preferred dataSource: \(error.localizedDescription)&quot;)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; Set the built-in mic as the preferred input</span><br><span class="line">&#x2F;&#x2F; This call will be a no-op if already selected</span><br><span class="line">do &#123;</span><br><span class="line">    try session.setPreferredInput(builtInMic)</span><br><span class="line">&#125; catch let error as NSError &#123;</span><br><span class="line">    print(&quot;Unable to preferred input: \(error.localizedDescription)&quot;)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; Print Active Configuration</span><br><span class="line">session.currentRoute.inputs.forEach &#123; portDesc in</span><br><span class="line">    print(&quot;Port: \(portDesc.portType)&quot;)</span><br><span class="line">    if let ds &#x3D; portDesc.selectedDataSource &#123;</span><br><span class="line">        print(&quot;Name: \(ds.dataSourceName)&quot;)</span><br><span class="line">        print(&quot;Polar Pattern: \(ds.selectedPolarPattern) ?? [None]&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="保护隐私"><a href="#保护隐私" class="headerlink" title="保护隐私"></a>保护隐私</h5><p>录制音频前询问并获得用户许可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AVAudioSession.sharedInstance().requestRecordPermission &#123; granted in</span><br><span class="line">    if granted &#123;</span><br><span class="line">        &#x2F;&#x2F; User granted access. Present recording interface.</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; Present message to user indicating that recording</span><br><span class="line">        &#x2F;&#x2F; can&#39;t be performed until they change their preference</span><br><span class="line">        &#x2F;&#x2F; under Settings -&gt; Privacy -&gt; Microphone</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问麦克风 Info.plist 添加 NSMicrophoneUsageDescription </p>
]]></content>
  </entry>
  <entry>
    <title>Dart</title>
    <url>/2022/02/09/Dart/</url>
    <content><![CDATA[<h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><ul>
<li>Hello Dart</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main标准写法</span></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dart中void类型，作为函数返回值类型可以省略</span></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Hello World!&#x27;</span>);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果函数内部只有一个表达式，可以省略大括号，使用&quot;=&gt;&quot;箭头函数; </span></span><br><span class="line"><span class="keyword">void</span> main() =&gt; <span class="built_in">print</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line"><span class="comment">//最简写形式</span></span><br><span class="line">main() =&gt; <span class="built_in">print</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="二-数据类型"><a href="#二-数据类型" class="headerlink" title="二. 数据类型"></a>二. 数据类型</h4><h5 id="1-布尔类型-bool"><a href="#1-布尔类型-bool" class="headerlink" title="1. 布尔类型 bool"></a>1. 布尔类型 bool</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span> isClosed = <span class="keyword">true</span>;</span><br><span class="line"><span class="built_in">bool</span> isOpened = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure>

<h5 id="2-数字类型-num、int、double"><a href="#2-数字类型-num、int、double" class="headerlink" title="2. 数字类型 num、int、double"></a>2. 数字类型 num、int、double</h5><p>flutter 中 num、int、double 都是类，int、double 都继承 num 抽象类</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">double</span> pi = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="built_in">int</span> width = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">int</span> height = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">print</span>(width / height);  <span class="comment">//1.3333333</span></span><br><span class="line"><span class="built_in">print</span>(width ~/ height); <span class="comment">//1 整除</span></span><br></pre></td></tr></table></figure>

<p>dart 一些数字常用函数</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3.141592653</span>.toStringAsFixed(<span class="number">3</span>)); <span class="comment">//3.142 保留有效数字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">6.6</span>.floor());<span class="comment">//6向下取整</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">-6.6</span>).ceil()); <span class="comment">//-6 向上取整</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">9.9</span>.ceil()); <span class="comment">//10 向上取整</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">666.6</span>.round()); <span class="comment">//667 四舍五入</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">-666.6</span>).abs()); <span class="comment">// 666.6 取绝对值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">666.6</span>.toInt()); <span class="comment">//666 转化成int,这中toInt、toDouble和Kotlin类似</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">999.</span>isEven); <span class="comment">//false 是否是偶数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">999.</span>isOdd); <span class="comment">//true 是否是奇数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">666.6</span>.toString()); <span class="comment">//666.6 转化成字符串</span></span><br></pre></td></tr></table></figure>

<h5 id="3-字符串-String"><a href="#3-字符串-String" class="headerlink" title="3. 字符串 String"></a>3. 字符串 String</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> name = <span class="string">&#x27;Hello Dart!&#x27;</span>;<span class="comment">//单引号</span></span><br><span class="line"><span class="built_in">String</span> title = <span class="string">&quot;&#x27;Hello Dart!&#x27;&quot;</span>;<span class="comment">//双引号</span></span><br><span class="line"><span class="built_in">String</span> description = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">      Hello Dart! Hello Dart!</span></span><br><span class="line"><span class="string">      Hello Dart!</span></span><br><span class="line"><span class="string">      Hello Dart! Hello Dart!</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>;<span class="comment">//三引号</span></span><br><span class="line"><span class="built_in">num</span> value = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">String</span> result = <span class="string">&quot;The result is <span class="subst">$value</span>&quot;</span>;<span class="comment">//单值引用</span></span><br><span class="line"><span class="built_in">num</span> width = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">num</span> height = <span class="number">300</span>;</span><br><span class="line"><span class="built_in">String</span> square = <span class="string">&quot;The square is <span class="subst">$&#123;width * height&#125;</span>&quot;</span>;<span class="comment">//表达式的值引用</span></span><br></pre></td></tr></table></figure>

<p>字符串操作方法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> url = <span class="string">&quot;https://mrale.ph/dartvm/&quot;</span>;</span><br><span class="line"><span class="built_in">print</span>(url.split(<span class="string">&quot;://&quot;</span>)[<span class="number">0</span>]); <span class="comment">//字符串分割split方法，https</span></span><br><span class="line"><span class="built_in">print</span>(url.substring(<span class="number">3</span>, <span class="number">9</span>)); <span class="comment">//字符串截取substring方法，ps://m</span></span><br><span class="line"><span class="built_in">print</span>(url.codeUnitAt(<span class="number">0</span>)); <span class="comment">//取当前索引位置字符的UTF-16码，104</span></span><br><span class="line"><span class="built_in">print</span>(url.startsWith(<span class="string">&quot;https&quot;</span>)); <span class="comment">//当前字符串是否以指定字符开头，true</span></span><br><span class="line"><span class="built_in">print</span>(url.endsWith(<span class="string">&quot;/&quot;</span>)); <span class="comment">//当前字符串是否以指定字符结尾，true</span></span><br><span class="line"><span class="built_in">print</span>(url.toUpperCase()); <span class="comment">//大写</span></span><br><span class="line"><span class="built_in">print</span>(url.toLowerCase()); <span class="comment">//小写</span></span><br><span class="line"><span class="built_in">print</span>(url.indexOf(<span class="string">&quot;ph&quot;</span>)); <span class="comment">//获取指定字符的索引位置，14</span></span><br><span class="line"><span class="built_in">print</span>(url.contains(<span class="string">&quot;http&quot;</span>)); <span class="comment">//字符串是否包含指定字符，true</span></span><br><span class="line"><span class="built_in">print</span>(url.trim()); <span class="comment">//去除字符串的首尾空格</span></span><br><span class="line"><span class="built_in">print</span>(url.length); <span class="comment">//获取字符串长度，24</span></span><br><span class="line"><span class="built_in">print</span>(url.replaceFirst(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;A&quot;</span>)); <span class="comment">//替换第一次出现t字符位置的字符</span></span><br><span class="line"><span class="built_in">print</span>(url.replaceAll(<span class="string">&quot;m&quot;</span>, <span class="string">&quot;M&quot;</span>)); <span class="comment">//全部替换</span></span><br></pre></td></tr></table></figure>

<h5 id="4-类型检查和强制类型转换-as"><a href="#4-类型检查和强制类型转换-as" class="headerlink" title="4. 类型检查和强制类型转换 as"></a>4. 类型检查和强制类型转换 as</h5><p>通过 is 关键字来对类型进行检查 as 关键字对类型进行强制转换，判断不是某个类型使用 is！</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> number = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">double</span> distance = <span class="number">200.5</span>;</span><br><span class="line"><span class="built_in">num</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">print</span>(number <span class="keyword">is</span> <span class="built_in">num</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">print</span>(distance <span class="keyword">is</span>! <span class="built_in">int</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">print</span>(age <span class="keyword">as</span> <span class="built_in">int</span>);<span class="comment">//18</span></span><br></pre></td></tr></table></figure>

<h5 id="5-Object-类型"><a href="#5-Object-类型" class="headerlink" title="5. Object 类型"></a>5. Object 类型</h5><p>dart 中所有东西都是对象，都继承于 object，可以使用 object 定义任何的变量，赋值后类型可以更改</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span> color = <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line">color = <span class="number">0xff000000</span>;<span class="comment">//运行正常，0xff000000类型是int, int也继承于Object   </span></span><br></pre></td></tr></table></figure>

<h5 id="6-dynamic-类型"><a href="#6-dynamic-类型" class="headerlink" title="6. dynamic 类型"></a>6. dynamic 类型</h5><p>一般用于无法确定具体类型，不要滥用 dynamic，一般尽量使用 object</p>
<p>object 和 dynamic 区别：object 会在编译阶段检查类型，dynamic 不会</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dynamic</span> color = <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line">color = <span class="number">0xff000000</span>;<span class="comment">//运行正常，0xff000000类型是int, int也继承于Object</span></span><br></pre></td></tr></table></figure>

<h4 id="三-变量和常量"><a href="#三-变量和常量" class="headerlink" title="三. 变量和常量"></a>三. 变量和常量</h4><h5 id="1-var-关键字"><a href="#1-var-关键字" class="headerlink" title="1. var 关键字"></a>1. var 关键字</h5><p>dart 中可以使用 var 来替代具体类型的声明，会自动推导变量的类型</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> colorValue = <span class="number">0xff000000</span>;</span><br><span class="line"><span class="keyword">var</span> colorKey = <span class="string">&#x27;black&#x27;</span>; <span class="comment">//var声明变量 自动根据赋值的类型，推导为String类型 </span></span><br><span class="line"><span class="comment">// 使用var声明集合变量 </span></span><br><span class="line"><span class="keyword">var</span> colorList = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> colorSet = &#123;<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> colorMap = &#123;<span class="string">&#x27;white&#x27;</span>: <span class="number">0xffffffff</span>, <span class="string">&#x27;black&#x27;</span>: <span class="number">0xff000000</span>&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="2-常量（final和const）"><a href="#2-常量（final和const）" class="headerlink" title="2. 常量（final和const）"></a>2. 常量（final和const）</h5><p>声明常量可以使用 final 或 const，区别：如果常量是编译期就能初始化的用 const，如果常量是运行时期初始化的就用 final</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.141592653</span>;<span class="comment">//const定义常量    </span></span><br><span class="line"><span class="keyword">final</span> nowTime = <span class="built_in">DateTime</span>.now();<span class="comment">//final定义常量</span></span><br></pre></td></tr></table></figure>

<h4 id="四-集合-List、Set、Map"><a href="#四-集合-List、Set、Map" class="headerlink" title="四. 集合 List、Set、Map"></a>四. 集合 List、Set、Map</h4><h5 id="1-集合-List"><a href="#1-集合-List" class="headerlink" title="1. 集合 List"></a>1. 集合 List</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; colorList = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];<span class="comment">//直接使用[]形式初始化       </span></span><br><span class="line"><span class="keyword">var</span> colorList = &lt;<span class="built_in">String</span>&gt; [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];   </span><br></pre></td></tr></table></figure>

<p>常用函数</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; colorList = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];       </span><br><span class="line">colorList.add(<span class="string">&#x27;white&#x27;</span>); <span class="comment">//通过add添加一个新的元素       </span></span><br><span class="line"><span class="built_in">print</span>(colorList[<span class="number">2</span>]); <span class="comment">//直接使用数组下标形式访问元素       </span></span><br><span class="line"><span class="built_in">print</span>(colorList.length);<span class="comment">//获取集合的长度    </span></span><br><span class="line">colorList.insert(<span class="number">1</span>, <span class="string">&#x27;black&#x27;</span>);<span class="comment">//在集合指定index位置插入指定的元素       </span></span><br><span class="line">colorList.removeAt(<span class="number">2</span>);<span class="comment">//移除集合指定的index=2的元素，第3个元素       </span></span><br><span class="line">colorList.clear();<span class="comment">//清除所有元素       </span></span><br><span class="line"><span class="built_in">print</span>(colorList.sublist(<span class="number">1</span>,<span class="number">3</span>));<span class="comment">//截取子集合       </span></span><br><span class="line"><span class="built_in">print</span>(colorList.getRange(<span class="number">1</span>, <span class="number">3</span>));<span class="comment">//获取集合中某个范围元素       </span></span><br><span class="line"><span class="built_in">print</span>(colorList.join(<span class="string">&#x27;&lt;---&gt;&#x27;</span>));<span class="comment">//输出: red&lt;---&gt;yellow&lt;---&gt;blue&lt;---&gt;green       </span></span><br><span class="line"><span class="built_in">print</span>(colorList.isEmpty);       </span><br><span class="line"><span class="built_in">print</span>(colorList.contains(<span class="string">&#x27;green&#x27;</span>));  </span><br></pre></td></tr></table></figure>

<p>遍历</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; colorList = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];<span class="comment">//for-i遍历       </span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; colorList.length; i++) &#123;<span class="comment">//可以使用var或int           </span></span><br><span class="line">     <span class="built_in">print</span>(colorList[i]);               </span><br><span class="line"> &#125;       </span><br><span class="line"><span class="comment">//forEach遍历       </span></span><br><span class="line"><span class="comment">//forEach的参数为Function. =&gt;使用了箭头函数</span></span><br><span class="line">colorList.forEach((color) =&gt; <span class="built_in">print</span>(color));       </span><br><span class="line"><span class="comment">//for-in遍历       </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> color <span class="keyword">in</span> colorList) &#123;</span><br><span class="line">    <span class="built_in">print</span>(color);       </span><br><span class="line">&#125;       </span><br><span class="line"><span class="comment">//while+iterator迭代器遍历，类似Java中的iteator       </span></span><br><span class="line"><span class="keyword">while</span>(colorList.iterator.moveNext()) &#123;           </span><br><span class="line">    <span class="built_in">print</span>(colorList.iterator.current);       </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<h5 id="2-集合-Set"><a href="#2-集合-Set" class="headerlink" title="2. 集合 Set"></a>2. 集合 Set</h5><p>集合中元素不能重复，添加重复元素时会返回 false，表示添加不成功</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; colorSet= &#123;<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>&#125;;<span class="comment">//直接使用&#123;&#125;形式初始化       </span></span><br><span class="line"><span class="keyword">var</span> colorList = &lt;<span class="built_in">String</span>&gt; &#123;<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>&#125;; </span><br></pre></td></tr></table></figure>

<p>集合中的交、并、补集</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colorSet1 = &#123;<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>&#125;;       </span><br><span class="line"><span class="keyword">var</span> colorSet2 = &#123;<span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;white&#x27;</span>&#125;;       </span><br><span class="line"><span class="built_in">print</span>(colorSet1.intersection(colorSet2));<span class="comment">//交集--&gt;输出: &#123;&#x27;yellow&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;&#125;       </span></span><br><span class="line"><span class="built_in">print</span>(colorSet1.union(colorSet2));<span class="comment">//并集---&gt;输出: &#123;&#x27;black&#x27;, &#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;white&#x27;&#125;       </span></span><br><span class="line"><span class="built_in">print</span>(colorSet1.difference(colorSet2));<span class="comment">//补集---&gt;输出: &#123;&#x27;red&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p>Set 的遍历方式和 List 一样</p>
<h5 id="3-集合-Map"><a href="#3-集合-Map" class="headerlink" title="3. 集合 Map"></a>3. 集合 Map</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">int</span>&gt; colorMap = &#123;<span class="string">&#x27;white&#x27;</span>: <span class="number">0xffffffff</span>, <span class="string">&#x27;black&#x27;</span>:<span class="number">0xff000000</span>&#125;;<span class="comment">//使用&#123;key:value&#125;形式初始化    </span></span><br><span class="line"><span class="keyword">var</span> colorMap = &lt;<span class="built_in">String</span>, <span class="built_in">int</span>&gt;&#123;<span class="string">&#x27;white&#x27;</span>: <span class="number">0xffffffff</span>, <span class="string">&#x27;black&#x27;</span>:<span class="number">0xff000000</span>&#125;;  </span><br></pre></td></tr></table></figure>

<p>常用函数</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">int</span>&gt; colorMap = &#123;<span class="string">&#x27;white&#x27;</span>: <span class="number">0xffffffff</span>, <span class="string">&#x27;black&#x27;</span>:<span class="number">0xff000000</span>&#125;;       </span><br><span class="line"><span class="built_in">print</span>(colorMap.containsKey(<span class="string">&#x27;green&#x27;</span>));<span class="comment">//false       </span></span><br><span class="line"><span class="built_in">print</span>(colorMap.containsValue(<span class="number">0xff000000</span>));<span class="comment">//true       </span></span><br><span class="line"><span class="built_in">print</span>(colorMap.keys.toList());<span class="comment">//[&#x27;white&#x27;,&#x27;black&#x27;]       </span></span><br><span class="line"><span class="built_in">print</span>(colorMap.values.toList());<span class="comment">//[0xffffffff, 0xff000000]       </span></span><br><span class="line">colorMap[<span class="string">&#x27;white&#x27;</span>] = <span class="number">0xfffff000</span>;<span class="comment">//修改指定key的元素       </span></span><br><span class="line">colorMap.remove(<span class="string">&#x27;black&#x27;</span>);<span class="comment">//移除指定key的元素 </span></span><br></pre></td></tr></table></figure>

<p>Map 遍历</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">int</span>&gt; colorMap = &#123;<span class="string">&#x27;white&#x27;</span>: <span class="number">0xffffffff</span>, <span class="string">&#x27;black&#x27;</span>:<span class="number">0xff000000</span>&#125;;       </span><br><span class="line"><span class="comment">//for-each key-value       </span></span><br><span class="line">colorMap.forEach((key, value) =&gt; <span class="built_in">print</span>(<span class="string">&#x27;color is <span class="subst">$key</span>, color value is <span class="subst">$value</span>&#x27;</span>));   </span><br></pre></td></tr></table></figure>

<p>Map.fromIterables 将 List 集合转换成 Map</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; colorKeys = [<span class="string">&#x27;white&#x27;</span>, <span class="string">&#x27;black&#x27;</span>];       </span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; colorValues = [<span class="number">0xffffffff</span>, <span class="number">0xff000000</span>];       </span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">int</span>&gt; colorMap = <span class="built_in">Map</span>.fromIterables(colorKeys, colorValues);   </span><br></pre></td></tr></table></figure>

<h5 id="4-集合常用操作符"><a href="#4-集合常用操作符" class="headerlink" title="4. 集合常用操作符"></a>4. 集合常用操作符</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; colorList = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"><span class="comment">//forEach箭头函数遍历</span></span><br><span class="line">colorList.forEach((color) =&gt; &#123;<span class="built_in">print</span>(color)&#125;);</span><br><span class="line">colorList.forEach((color) =&gt; <span class="built_in">print</span>(color)); <span class="comment">//箭头函数遍历，如果箭头函数内部只有一个表达式可以省略大括号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//map函数的使用</span></span><br><span class="line"><span class="built_in">print</span>(colorList.map((color) =&gt; <span class="string">&#x27;<span class="subst">$color_font</span>&#x27;</span>).join(<span class="string">&quot;,&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//every函数的使用，判断里面的元素是否都满足条件，返回值为true/false</span></span><br><span class="line"><span class="built_in">print</span>(colorList.every((color) =&gt; color == <span class="string">&#x27;red&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//sort函数的使用</span></span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; numbers = [<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">4</span>];</span><br><span class="line">numbers.sort((num1, num2) =&gt; num1 - num2); <span class="comment">//升序排序</span></span><br><span class="line">numbers.sort((num1, num2) =&gt; num2 - num1); <span class="comment">//降序排序</span></span><br><span class="line"><span class="built_in">print</span>(numbers);</span><br><span class="line"></span><br><span class="line"><span class="comment">//where函数使用，相当于Kotlin中的filter操作符，返回符合条件元素的集合</span></span><br><span class="line"><span class="built_in">print</span>(numbers.where((<span class="built_in">num</span>) =&gt; <span class="built_in">num</span> &gt; <span class="number">6</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//firstWhere函数的使用，相当于Kotlin中的find操作符，返回符合条件的第一个元素，如果没找到返回null</span></span><br><span class="line"><span class="built_in">print</span>(numbers.firstWhere((<span class="built_in">num</span>) =&gt; <span class="built_in">num</span> == <span class="number">5</span>, orElse: () =&gt; <span class="number">-1</span>)); <span class="comment">//注意: 如果没有找到，执行orElse代码块，可返回一个指定的默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//singleWhere函数的使用，返回符合条件的第一个元素，如果没找到返回null，但是前提是集合中只有一个符合条件的元素, 否则就会抛出异常</span></span><br><span class="line"><span class="built_in">print</span>(numbers.singleWhere((<span class="built_in">num</span>) =&gt; <span class="built_in">num</span> == <span class="number">4</span>, orElse: () =&gt; <span class="number">-1</span>)); <span class="comment">//注意: 如果没有找到，执行orElse代码块，可返回一个指定的默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//take(n)、skip(n)函数的使用，take(n)表示取当前集合前n个元素, skip(n)表示跳过前n个元素，然后取剩余所有的元素</span></span><br><span class="line"><span class="built_in">print</span>(numbers.take(<span class="number">5</span>).skip(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//List.from函数的使用，从给定集合中创建一个新的集合,相当于clone一个集合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">List</span>.from(numbers));</span><br><span class="line"></span><br><span class="line"><span class="comment">//expand函数的使用, 将集合一个元素扩展成多个元素或者将多个元素组成二维数组展开成平铺一个一位数组</span></span><br><span class="line"><span class="keyword">var</span> pair = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">];</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flatten list: <span class="subst">$&#123;pair.expand((pair) =&gt; pair)&#125;</span>&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inputs = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;duplicated list: <span class="subst">$&#123;inputs.expand((number) =&gt;[</span></span></span><br><span class="line"><span class="string"><span class="subst">  number,</span></span></span><br><span class="line"><span class="string"><span class="subst">  number,</span></span></span><br><span class="line"><span class="string"><span class="subst">  number</span></span></span><br><span class="line"><span class="string"><span class="subst">])&#125;</span>&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="五-流程控制"><a href="#五-流程控制" class="headerlink" title="五. 流程控制"></a>五. 流程控制</h4><h5 id="1-for-循环"><a href="#1-for-循环" class="headerlink" title="1. for 循环"></a>1. for 循环</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; colorList = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; colorList.length; i++) &#123;<span class="comment">//可以用var或int</span></span><br><span class="line">    <span class="built_in">print</span>(colorList[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-do-while-循环"><a href="#2-do-while-循环" class="headerlink" title="2. do-while 循环"></a>2. do-while 循环</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; colorList = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(colorList[index++]);</span><br><span class="line">&#125; <span class="keyword">while</span> (index &lt; colorList.length);</span><br></pre></td></tr></table></figure>

<h5 id="3-while-循环"><a href="#3-while-循环" class="headerlink" title="3. while 循环"></a>3. while 循环</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; colorList = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (index &lt; colorList.length) &#123;</span><br><span class="line">    <span class="built_in">print</span>(colorList[index++]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-break-和-continue"><a href="#4-break-和-continue" class="headerlink" title="4. break 和 continue"></a>4. break 和 continue</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; colorList = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; colorList.length; i++) &#123;<span class="comment">//可以用var或int</span></span><br><span class="line">    <span class="keyword">if</span>(colorList[i] == <span class="string">&#x27;yellow&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(colorList[i] == <span class="string">&#x27;blue&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(colorList[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-if-else"><a href="#5-if-else" class="headerlink" title="5. if-else"></a>5. if-else</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (numbers[i].isEven) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;偶数: <span class="subst">$&#123;numbers[i]&#125;</span>&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (numbers[i].isOdd) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;奇数: <span class="subst">$&#123;numbers[i]&#125;</span>&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;非法数字&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-三目运算（-）"><a href="#6-三目运算（-）" class="headerlink" title="6. 三目运算（?:）"></a>6. 三目运算（?:）</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    <span class="built_in">num</span> targetNumber = numbers[i].isEven ? numbers[i] * <span class="number">2</span> : numbers[i] + <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">print</span>(targetNumber);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-switch-case"><a href="#7-switch-case" class="headerlink" title="7. switch-case"></a>7. switch-case</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Color getColor(<span class="built_in">String</span> colorName) &#123;</span><br><span class="line">  Color currentColor = Colors.blue;</span><br><span class="line">  <span class="keyword">switch</span> (colorName) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;read&quot;</span>:</span><br><span class="line">      currentColor = Colors.red;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;blue&quot;</span>:</span><br><span class="line">      currentColor = Colors.blue;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;yellow&quot;</span>:</span><br><span class="line">      currentColor = Colors.yellow;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> currentColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="8-Assert-断言"><a href="#8-Assert-断言" class="headerlink" title="8. Assert 断言"></a>8. Assert 断言</h5><p>断言只在检查模式下运行有效，生产模式运行断言不生效</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span>(text != <span class="keyword">null</span>);<span class="comment">//text为null,就会中断后续代码执行</span></span><br><span class="line"><span class="keyword">assert</span>(urlString.startsWith(<span class="string">&#x27;https&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h4 id="六-运算符"><a href="#六-运算符" class="headerlink" title="六. 运算符"></a>六. 运算符</h4><h5 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a>1. 算术运算符</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//+ - * /</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">3</span>~/<span class="number">5</span>; <span class="comment">//0 整除</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">5</span>%<span class="number">3</span>;  <span class="comment">//2 取余</span></span><br></pre></td></tr></table></figure>

<h5 id="2-条件运算符"><a href="#2-条件运算符" class="headerlink" title="2. 条件运算符"></a>2. 条件运算符</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&gt; &lt; == != &gt;= &lt;=</span></span><br></pre></td></tr></table></figure>

<h5 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3. 逻辑运算符"></a>3. 逻辑运算符</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//|| &amp;&amp; !</span></span><br></pre></td></tr></table></figure>

<h5 id="4-位运算符"><a href="#4-位运算符" class="headerlink" title="4. 位运算符"></a>4. 位运算符</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&amp; ! ^ &lt;&lt; &gt;&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="5-三目运算符"><a href="#5-三目运算符" class="headerlink" title="5. 三目运算符"></a>5. 三目运算符</h5><h5 id="6-空安全运算符"><a href="#6-空安全运算符" class="headerlink" title="6. 空安全运算符"></a>6. 空安全运算符</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">result = expr1 ?? expr2; </span><br><span class="line">expr1 ??= expr2; <span class="comment">// expr1为null则把expr2值赋值给expr1</span></span><br><span class="line">result = expr1?.value </span><br></pre></td></tr></table></figure>

<h5 id="7-级联操作符（-）"><a href="#7-级联操作符（-）" class="headerlink" title="7. 级联操作符（..）"></a>7. 级联操作符（..）</h5><p>级联操作符 .. 可以让你对一个对象中字段进行链式调用操作</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">question</span><br><span class="line">    ..id = <span class="string">&#x27;10001&#x27;</span></span><br><span class="line">    ..stem = <span class="string">&#x27;第一题: xxxxxx&#x27;</span></span><br><span class="line">    ..choices = &lt;<span class="built_in">String</span>&gt; [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>]</span><br><span class="line">    ..hint = <span class="string">&#x27;听音频做题&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="8-运算符重载"><a href="#8-运算符重载" class="headerlink" title="8. 运算符重载"></a>8. 运算符重载</h5><p>dart 支持运算符自定义重载，使用 operator 关键字定义重载函数</p>
<h5 id="9-异常"><a href="#9-异常" class="headerlink" title="9. 异常"></a>9. 异常</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">num</span> = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  result = <span class="built_in">num</span> ~/ <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;<span class="comment">//捕获到IntegerDivisionByZeroException</span></span><br><span class="line">  <span class="built_in">print</span>(e.toString());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$result</span>&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用on关键字捕获特定的异常</span></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">int</span> <span class="built_in">num</span> = <span class="number">18</span>;</span><br><span class="line">  <span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    result = <span class="built_in">num</span> ~/ <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">on</span> IntegerDivisionByZeroException <span class="keyword">catch</span> (e) &#123;<span class="comment">//捕获特定异常</span></span><br><span class="line">    <span class="built_in">print</span>(e.toString());</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$result</span>&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="八-函数"><a href="#八-函数" class="headerlink" title="八. 函数"></a>八. 函数</h4><h5 id="1-函数基本用法"><a href="#1-函数基本用法" class="headerlink" title="1. 函数基本用法"></a>1. 函数基本用法</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;sum is <span class="subst">$&#123;sum(<span class="number">2</span>, <span class="number">5</span>)&#125;</span>&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">num</span> sum(<span class="built_in">num</span> a, <span class="built_in">num</span> b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-函数参数列表传参规则"><a href="#2-函数参数列表传参规则" class="headerlink" title="2. 函数参数列表传参规则"></a>2. 函数参数列表传参规则</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//num a, num b, num c, num d 最普通的传参: 调用时，参数个数和参数顺序必须固定</span></span><br><span class="line">add1(<span class="built_in">num</span> a, <span class="built_in">num</span> b, <span class="built_in">num</span> c, <span class="built_in">num</span> d) &#123;</span><br><span class="line">  <span class="built_in">print</span>(a + b + c + d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//[num a, num b, num c, num d]传参: 调用时，参数个数不固定，但是参数顺序需要一一对应, 不支持命名参数</span></span><br><span class="line">add2([<span class="built_in">num</span> a, <span class="built_in">num</span> b, <span class="built_in">num</span> c, <span class="built_in">num</span> d]) &#123;</span><br><span class="line">  <span class="built_in">print</span>(a + b + c + d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#123;num a, num b, num c, num d&#125;传参: 调用时，参数个数不固定，参数顺序也可以不固定，支持命名参数,也叫可选参数，是dart中的一大特性，这就是为啥Flutter代码那么多可选属性，大量使用可选参数</span></span><br><span class="line">add3(&#123;<span class="built_in">num</span> a, <span class="built_in">num</span> b, <span class="built_in">num</span> c, <span class="built_in">num</span> d&#125;) &#123;</span><br><span class="line">  <span class="built_in">print</span>(a + b + c + d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//num a, num b, &#123;num c, num d&#125;传参: 调用时，a,b参数个数固定顺序固定，c,d参数个数和顺序也可以不固定</span></span><br><span class="line">add4(<span class="built_in">num</span> a, <span class="built_in">num</span> b, &#123;<span class="built_in">num</span> c, <span class="built_in">num</span> d&#125;) &#123;</span><br><span class="line">  <span class="built_in">print</span>(a + b + c + d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  add1(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>); <span class="comment">//最普通的传参: 调用时，参数个数和参数顺序必须固定</span></span><br><span class="line">  add2(<span class="number">100</span>, <span class="number">100</span>); <span class="comment">//调用时，参数个数不固定，但是参数顺序需要一一对应, 不支持命名参数(也就意味着顺序不变)</span></span><br><span class="line">  add3(</span><br><span class="line">      b: <span class="number">200</span>,</span><br><span class="line">      a: <span class="number">200</span>,</span><br><span class="line">      c: <span class="number">100</span>,</span><br><span class="line">      d: <span class="number">100</span>); <span class="comment">//调用时，参数个数不固定，参数顺序也可以不固定，支持命名参数(也就意味着顺序可变)</span></span><br><span class="line">  add4(<span class="number">100</span>, <span class="number">100</span>, d: <span class="number">100</span>, c: <span class="number">100</span>); <span class="comment">//调用时，a,b参数个数固定顺序笃定，c,d参数个数和顺序也可以不固定</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-函数默认参数和可选参数"><a href="#3-函数默认参数和可选参数" class="headerlink" title="3. 函数默认参数和可选参数"></a>3. 函数默认参数和可选参数</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">add3(&#123;<span class="built_in">num</span> a, <span class="built_in">num</span> b, <span class="built_in">num</span> c, <span class="built_in">num</span> d = <span class="number">100</span>&#125;) &#123;<span class="comment">//d就是默认值参数，给的默认值是100</span></span><br><span class="line">   <span class="built_in">print</span>(a + b + c + d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">    add3(b: <span class="number">200</span>, a: <span class="number">100</span>, c: <span class="number">800</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-函数类型与高阶函数"><a href="#4-函数类型与高阶函数" class="headerlink" title="4. 函数类型与高阶函数"></a>4. 函数类型与高阶函数</h5><p>dart 函数也是一种类型 Function，可以作为函数参数传递，也可作为返回值</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">Function</span> square = (a) &#123;</span><br><span class="line">    <span class="keyword">return</span> a * a;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Function</span> square2 = (a) &#123;</span><br><span class="line">    <span class="keyword">return</span> a * a * a;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  add(<span class="number">3</span>, <span class="number">4</span>, square, square2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">num</span> add(<span class="built_in">num</span> a, <span class="built_in">num</span> b, [<span class="built_in">Function</span> op, <span class="built_in">Function</span> op2]) &#123;</span><br><span class="line">  <span class="comment">//函数作为参数传递</span></span><br><span class="line">  <span class="keyword">return</span> op(a) + op2(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-函数的简化及箭头函数"><a href="#5-函数的简化及箭头函数" class="headerlink" title="5. 函数的简化及箭头函数"></a>5. 函数的简化及箭头函数</h5><p>dart 中函数体内只有一个表达式，可以使用箭头函数来简化代码</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">add4(<span class="built_in">num</span> a, <span class="built_in">num</span> b, &#123;<span class="built_in">num</span> c, <span class="built_in">num</span> d&#125;) &#123;</span><br><span class="line">  <span class="built_in">print</span>(a + b + c + d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add5(<span class="built_in">num</span> a, <span class="built_in">num</span> b, &#123;<span class="built_in">num</span> c, <span class="built_in">num</span> d&#125;)  =&gt;  <span class="built_in">print</span>(a + b + c + d);</span><br></pre></td></tr></table></figure>

<h4 id="九-面向对象"><a href="#九-面向对象" class="headerlink" title="九. 面向对象"></a>九. 面向对象</h4><h5 id="1-类的基本定义和使用"><a href="#1-类的基本定义和使用" class="headerlink" title="1. 类的基本定义和使用"></a>1. 类的基本定义和使用</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="built_in">String</span> name;</span><br><span class="line">    <span class="built_in">int</span> age;</span><br><span class="line">    <span class="built_in">double</span> height;</span><br><span class="line">    Person(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age, <span class="keyword">this</span>.height);<span class="comment">//注意，这里写法可能大家没见过， 这点和Java是不一样，这里实际上是一个dart的语法糖。但是这里不如Kotlin，Kotlin是直接把this.name传值的过程都省了。</span></span><br><span class="line">    <span class="comment">//与上述的等价代码,当然这也是Java中必须要写的代码</span></span><br><span class="line">    Person(<span class="built_in">String</span> name, <span class="built_in">int</span> age, <span class="built_in">double</span> height) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">//然而Kotlin很彻底只需要声明属性就行,下面是Kotlin实现代码</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="title">val</span> <span class="title">name</span>: <span class="title">String</span>, <span class="title">val</span> <span class="title">age</span>: <span class="title">Int</span>, <span class="title">val</span> <span class="title">height</span>: <span class="title">Double</span>)     </span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;<span class="comment">//使用extends关键字表示继承</span></span><br><span class="line">    Student(<span class="built_in">String</span> name, <span class="built_in">int</span> age, <span class="built_in">double</span> height, <span class="built_in">double</span> grade): <span class="keyword">super</span>(name, age, height);<span class="comment">//在 Dart里：类名(变量，变量,...) 是构造函数的写法, :super()表示该构造调用父类，这里构造时传入三个参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

































<p><a href="https://zhuanlan.zhihu.com/p/88728224">Dart语法之基础语法</a></p>
<p><a href="https://dart.dev/guides/language/language-tour#instance-variables">Dart</a></p>
<p><a href="https://dart.cn/guides">Dart.cn</a></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>RxSwift（三）</title>
    <url>/2021/09/03/RxSwift%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h4 id="1-错误处理"><a href="#1-错误处理" class="headerlink" title="1 错误处理"></a>1 错误处理</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum MyError: Error &#123;</span><br><span class="line">    case A</span><br><span class="line">    case B</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-1-catchErrorJustReturn"><a href="#1-1-catchErrorJustReturn" class="headerlink" title="1.1 catchErrorJustReturn"></a>1.1 catchErrorJustReturn</h5><p>遇到error事件时，就返回指定的值，然后结束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let sequenceFailed &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">sequenceFailed</span><br><span class="line">    .catchErrorJustReturn(&quot;错误&quot;)</span><br><span class="line">    .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">sequenceFailed.onNext(&quot;a&quot;)</span><br><span class="line">sequenceFailed.onNext(&quot;b&quot;)</span><br><span class="line">sequenceFailed.onError(MyError.A)</span><br><span class="line">sequenceFailed.onNext(&quot;c&quot;)</span><br><span class="line">结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">错误</span><br></pre></td></tr></table></figure>

<h5 id="1-2-catchError"><a href="#1-2-catchError" class="headerlink" title="1.2 catchError"></a>1.2 catchError</h5><p>捕获error，并对其处理，同时还能返回另一个observable序列进行订阅</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let sequenceFailed &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">let recoverSequence &#x3D; Observable.of(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;)</span><br><span class="line">    sequenceFailed</span><br><span class="line">        .catchError &#123;</span><br><span class="line">            print(&quot;Error:&quot;, $0)</span><br><span class="line">            return recoverSequence</span><br><span class="line">        &#125;</span><br><span class="line">        .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">        .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">    sequenceFailed.onNext(&quot;a&quot;)</span><br><span class="line">    sequenceFailed.onNext(&quot;b&quot;)</span><br><span class="line">    sequenceFailed.onError(MyError.A)</span><br><span class="line">    sequenceFailed.onNext(&quot;c&quot;)</span><br><span class="line">结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">Error: A</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h5 id="1-3-retry"><a href="#1-3-retry" class="headerlink" title="1.3 retry"></a>1.3 retry</h5><p>遇到错误的时候，重新订阅该序列<br>retry()传入数字表示重试次数，不传默认1次</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var count &#x3D; 1</span><br><span class="line">let sequenceError &#x3D; Observable&lt;String&gt;.create &#123; (observer) -&gt; Disposable in</span><br><span class="line">    observer.onNext(&quot;a&quot;)</span><br><span class="line">    observer.onNext(&quot;b&quot;)</span><br><span class="line">    if count &#x3D;&#x3D; 1 &#123;</span><br><span class="line">        observer.onError(MyError.A)</span><br><span class="line">        print(&quot;error&quot;)</span><br><span class="line">        count +&#x3D; 1</span><br><span class="line">    &#125;</span><br><span class="line">    observer.onNext(&quot;c&quot;)</span><br><span class="line">    observer.onCompleted()</span><br><span class="line">    return Disposables.create()</span><br><span class="line">&#125;</span><br><span class="line">sequenceError</span><br><span class="line">.retry(2)</span><br><span class="line">.subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h4 id="2-调试操作"><a href="#2-调试操作" class="headerlink" title="2 调试操作"></a>2 调试操作</h4><h5 id="2-1-debug"><a href="#2-1-debug" class="headerlink" title="2.1 debug"></a>2.1 debug</h5><p>还可以传入标记参数<code>.debug(&quot;调试1&quot;)</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(2, 3)</span><br><span class="line">  .startWith(1)</span><br><span class="line">  .debug()</span><br><span class="line">  .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">  .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="2-2-RxSwift-Resources-total"><a href="#2-2-RxSwift-Resources-total" class="headerlink" title="2.2 RxSwift.Resources.total"></a>2.2 RxSwift.Resources.total</h5><p>将RxSwift.Resources.total打印出来可以查看当前RxSwift申请的所有资源数量 检查内存泄漏时有用<br>开启需要在Podfile开启配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(RxSwift.Resources.total)</span><br></pre></td></tr></table></figure>

<h4 id="3-特征序列"><a href="#3-特征序列" class="headerlink" title="3 特征序列"></a>3 特征序列</h4><h5 id="3-1-Single"><a href="#3-1-Single" class="headerlink" title="3.1 Single"></a>3.1 Single</h5><p>observable另一个版本，只能发出一个元素，要么产生一个error<br>不会共享状态变化<br>常用于执行HTTP请求，成功返回应答或错误</p>
<p>RxSwift为Single提供了一个枚举（SingleEvent）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public enum SingleEvent&lt;Element&gt; &#123;</span><br><span class="line">    case success(Element)</span><br><span class="line">    case error(Swift.Error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>样例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum DataError: Error &#123;</span><br><span class="line">    case cantParseJSON</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func getPlayList(_ channel: String) -&gt; Single&lt;[String: Any]&gt; &#123;</span><br><span class="line">    return Single&lt;[String: Any]&gt;.create &#123; (single) -&gt; Disposable in</span><br><span class="line">        let url &#x3D; &quot;https:&#x2F;&#x2F;douban.fm&#x2F;j&#x2F;mine&#x2F;playlist?&quot; + &quot;type&#x3D;n&amp;channel&#x3D;\(channel)&amp;from&#x3D;mainsite&quot;</span><br><span class="line">        let task &#x3D; URLSession.shared.dataTask(with: URL(string: url)!) &#123; (data, _, error) in</span><br><span class="line">            if let error &#x3D; error &#123;</span><br><span class="line">                single(.error(error))</span><br><span class="line">                return</span><br><span class="line">            &#125;</span><br><span class="line">            guard let data &#x3D; data,</span><br><span class="line">                  let json &#x3D; try? JSONSerialization.jsonObject(with: data, options: .mutableLeaves),</span><br><span class="line">                  let result &#x3D; json as? [String: Any] else &#123;</span><br><span class="line">                single(.error(DataError.cantParseJSON))</span><br><span class="line">                return</span><br><span class="line">            &#125;</span><br><span class="line">            single(.success(result))</span><br><span class="line">        &#125;</span><br><span class="line">        task.resume()</span><br><span class="line">        return Disposables.create &#123; task.cancel() &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 也可以用<code>subscribe(onSuccess:onError:)</code>方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getPlayList(&quot;0&quot;)</span><br><span class="line">    .subscribe &#123; (event) in</span><br><span class="line">        switch event &#123;</span><br><span class="line">        case.success(let json):</span><br><span class="line">            print(&quot;JSON结果：&quot;, json)</span><br><span class="line">        case .error(let error):</span><br><span class="line">            print(&quot;发生错误：&quot;, error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<ul>
<li>asSingle</li>
</ul>
<p>可以通过observable的asSingle()，转换为Single</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(&quot;1&quot;)</span><br><span class="line">    .asSingle()</span><br><span class="line">    .subscribe(&#123;print($0)&#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="3-2-Completable"><a href="#3-2-Completable" class="headerlink" title="3.2 Completable"></a>3.2 Completable</h5><p>要么只能产生一个completed事件，要么产生一个error事件<br>不会共享状态变化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func cacheLocally() -&gt; Completable &#123;</span><br><span class="line">    return Completable.create &#123; (completeable) -&gt; Disposable in</span><br><span class="line">        let success &#x3D; (arc4random() % 2 &#x3D;&#x3D; 0)</span><br><span class="line">        guard success else &#123;</span><br><span class="line">            completeable(.error(CacheError.failedCaching))</span><br><span class="line">            return Disposables.create &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        completeable(.completed)</span><br><span class="line">        return Disposables.create &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">enum CacheError: Error &#123;</span><br><span class="line">   case failedCaching</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 也可使用<code>subscribe(onCompleted:onError:)</code>方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cacheLocally()</span><br><span class="line">    .subscribe &#123; (completable) in</span><br><span class="line">        switch completable &#123;</span><br><span class="line">        case .completed:</span><br><span class="line">            print(&quot;保存成功&quot;)</span><br><span class="line">        case .error(let error):</span><br><span class="line">            print(&quot;保存失败：\(error.localizedDescription)&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="3-3-Maybe"><a href="#3-3-Maybe" class="headerlink" title="3.3 Maybe"></a>3.3 Maybe</h5><p>介于Single和Completable之间，要么只能发出一个元素，要么产生一个completable事件，要么产生error事件<br>不会共享状态变化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public enum MaybeEvent&lt;Element&gt; &#123;</span><br><span class="line">    case success(Element)</span><br><span class="line">    case error(Swift.Error)</span><br><span class="line">    case completed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func generateString() -&gt; Maybe&lt;String&gt; &#123;</span><br><span class="line">    return Maybe.create &#123; (maybe) -&gt; Disposable in</span><br><span class="line">        maybe(.success(&quot;hang&quot;))</span><br><span class="line">        maybe(.completed)</span><br><span class="line">        return Disposables.create &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>asMaybe</li>
</ul>
<p>可以通过observable的asMaybe()，转换为Maybe</p>
<h4 id="4-Driver"><a href="#4-Driver" class="headerlink" title="4 Driver"></a>4 Driver</h4><p>目标是提供一种简便的方式在UI层编写响应式代码<br>不会产生error事件<br>一定在主线程监听<br>共享状态变化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let results &#x3D; query.rx.text.asDriver()        &#x2F;&#x2F; 将普通序列转换为 Driver</span><br><span class="line">    .throttle(0.3, scheduler: MainScheduler.instance)</span><br><span class="line">    .flatMapLatest &#123; query in</span><br><span class="line">        fetchAutoCompleteItems(query)</span><br><span class="line">            .asDriver(onErrorJustReturn: [])  &#x2F;&#x2F; 仅仅提供发生错误时的备选返回值</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;将返回的结果绑定到显示结果数量的label上</span><br><span class="line">results</span><br><span class="line">    .map &#123; &quot;\($0.count)&quot; &#125;</span><br><span class="line">    .drive(resultCount.rx.text) &#x2F;&#x2F; 这里使用 drive 而不是 bindTo</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;将返回的结果绑定到tableView上</span><br><span class="line">results</span><br><span class="line">    .drive(resultsTableView.rx.items(cellIdentifier: &quot;Cell&quot;)) &#123; &#x2F;&#x2F;  同样使用 drive 而不是 bindTo</span><br><span class="line">        (_, result, cell) in</span><br><span class="line">        cell.textLabel?.text &#x3D; &quot;\(result)&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="4-1-asDriver"><a href="#4-1-asDriver" class="headerlink" title="4.1 asDriver"></a>4.1 asDriver</h5><p><code>query.rx.text.asDriver</code>将ControlProperty转换为Driver，将普通序列转换为Driver</p>
<h5 id="4-2-asDriver-onErrorJustReturn"><a href="#4-2-asDriver-onErrorJustReturn" class="headerlink" title="4.2 asDriver(onErrorJustReturn: )"></a>4.2 asDriver(onErrorJustReturn: )</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let disposeBag &#x3D; DisposeBag()</span><br><span class="line">let pubSubject &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line"></span><br><span class="line">pubSubject.asDriver(onErrorJustReturn: 1000)</span><br><span class="line">    .drive(onNext: &#123;</span><br><span class="line">        print($0)</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">pubSubject.onNext(10)</span><br><span class="line">pubSubject.onNext(29)</span><br><span class="line">pubSubject.onError(CustomError.test)</span><br></pre></td></tr></table></figure>

<h5 id="4-3-asDriver-onErrorDriveWith"><a href="#4-3-asDriver-onErrorDriveWith" class="headerlink" title="4.3 asDriver(onErrorDriveWith:)"></a>4.3 asDriver(onErrorDriveWith:)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let disposeBag &#x3D; DisposeBag()</span><br><span class="line">let pubSubject &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">let recoverySubject &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">pubSubject.asDriver(onErrorDriveWith:</span><br><span class="line">    recoverySubject.asDriver(onErrorJustReturn: 1000))</span><br><span class="line">        .drive(onNext: &#123;</span><br><span class="line">            print($0)</span><br><span class="line">        &#125;)</span><br><span class="line">        .disposed(by: disposeBag)</span><br><span class="line">pubSubject.onNext(19)</span><br><span class="line">pubSubject.onError(CustomError.test)</span><br><span class="line">recoverySubject.onNext(10)</span><br></pre></td></tr></table></figure>

<h4 id="5-ControlProperty"><a href="#5-ControlProperty" class="headerlink" title="5 ControlProperty"></a>5 ControlProperty</h4><p>专门用来描述UI控件的属性，拥有该类型的属性都是被观察者observable<br>特性：<br>不会产生error事件，一定在主线程订阅，主线程监听，共享状态变化</p>
<p>UITextField+Rx.swift 中 UITextField 的 rx.text 属性类型便是 ControlProperty</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension Reactive where Base: UITextField &#123;</span><br><span class="line">    public var text: ControlProperty&lt;String?&gt; &#123;</span><br><span class="line">        return value</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public var value: ControlProperty&lt;String?&gt; &#123;</span><br><span class="line">        return base.rx.controlPropertyWithDefaultEvents(</span><br><span class="line">            getter: &#123; textField in</span><br><span class="line">                textField.text</span><br><span class="line">        &#125;,</span><br><span class="line">            setter: &#123; textField, value in</span><br><span class="line">                if textField.text !&#x3D; value &#123;</span><br><span class="line">                    textField.text &#x3D; value</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-ControlEvent"><a href="#6-ControlEvent" class="headerlink" title="6 ControlEvent"></a>6 ControlEvent</h4><p>专门用来描述UI所产生事件，拥有该类型的属性都是被观察者observable<br>特性：<br>不会产生error事件，一定在主线程订阅，主线程监听，共享状态变化</p>
<p>UIButton 的 rx.tap 方法类型便是 ControlEvent<Void></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension Reactive where Base: UIButton &#123;</span><br><span class="line">    public var tap: ControlEvent&lt;Void&gt; &#123;</span><br><span class="line">        return controlEvent(.touchUpInside)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对 UIViewController 进行扩展</p>
<ul>
<li>将  viewDidLoad、viewDidAppear、viewDidLayoutSubviews 等各种 ViewController 生命周期的方法转成 ControlEvent 方便在 RxSwift 项目中使用。</li>
<li>增加 isVisible 序列属性，方便对视图的显示状态进行订阅。</li>
<li>增加 isDismissing 序列属性，方便对视图的释放进行订阅。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public extension Reactive where Base: UIViewController &#123;</span><br><span class="line">    public var viewDidLoad: ControlEvent&lt;Void&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.viewDidLoad)).map &#123; _ in &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public var viewWillAppear: ControlEvent&lt;Bool&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.viewWillAppear))</span><br><span class="line">            .map &#123; $0.first as? Bool ?? false &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">    public var viewDidAppear: ControlEvent&lt;Bool&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.viewDidAppear))</span><br><span class="line">            .map &#123; $0.first as? Bool ?? false &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public var viewWillDisappear: ControlEvent&lt;Bool&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.viewWillDisappear))</span><br><span class="line">            .map &#123; $0.first as? Bool ?? false &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">    public var viewDidDisappear: ControlEvent&lt;Bool&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.viewDidDisappear))</span><br><span class="line">            .map &#123; $0.first as? Bool ?? false &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public var viewWillLayoutSubviews: ControlEvent&lt;Void&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.viewWillLayoutSubviews))</span><br><span class="line">            .map &#123; _ in &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">    public var viewDidLayoutSubviews: ControlEvent&lt;Void&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.viewDidLayoutSubviews))</span><br><span class="line">            .map &#123; _ in &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public var willMoveToParentViewController: ControlEvent&lt;UIViewController?&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.willMove))</span><br><span class="line">            .map &#123; $0.first as? UIViewController &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">    public var didMoveToParentViewController: ControlEvent&lt;UIViewController?&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.didMove))</span><br><span class="line">            .map &#123; $0.first as? UIViewController &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public var didReceiveMemoryWarning: ControlEvent&lt;Void&gt; &#123;</span><br><span class="line">        let source &#x3D; self.methodInvoked(#selector(Base.didReceiveMemoryWarning))</span><br><span class="line">            .map &#123; _ in &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    &#x2F;&#x2F;表示视图是否显示的可观察序列，当VC显示状态改变时会触发</span><br><span class="line">    public var isVisible: Observable&lt;Bool&gt; &#123;</span><br><span class="line">        let viewDidAppearObservable &#x3D; self.base.rx.viewDidAppear.map &#123; _ in true &#125;</span><br><span class="line">        let viewWillDisappearObservable &#x3D; self.base.rx.viewWillDisappear</span><br><span class="line">            .map &#123; _ in false &#125;</span><br><span class="line">        return Observable&lt;Bool&gt;.merge(viewDidAppearObservable,</span><br><span class="line">                                      viewWillDisappearObservable)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    &#x2F;&#x2F;表示页面被释放的可观察序列，当VC被dismiss时会触发</span><br><span class="line">    public var isDismissing: ControlEvent&lt;Bool&gt; &#123;</span><br><span class="line">        let source &#x3D; self.sentMessage(#selector(Base.dismiss))</span><br><span class="line">            .map &#123; $0.first as? Bool ?? false &#125;</span><br><span class="line">        return ControlEvent(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-调度器"><a href="#7-调度器" class="headerlink" title="7 调度器"></a>7 调度器</h4><p>控制任务在哪个线程或队列运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let rxData: Observable&lt;Data&gt; &#x3D; ...</span><br><span class="line"> </span><br><span class="line">rxData</span><br><span class="line">    .subscribeOn(ConcurrentDispatchQueueScheduler(qos: .userInitiated)) &#x2F;&#x2F;后台构建序列</span><br><span class="line">    .observeOn(MainScheduler.instance)  &#x2F;&#x2F;主线程监听并处理序列结果</span><br><span class="line">    .subscribe(onNext: &#123; [weak self] data in</span><br><span class="line">        self?.data &#x3D; data</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="7-1-subscribeOn"><a href="#7-1-subscribeOn" class="headerlink" title="7.1 subscribeOn()"></a>7.1 subscribeOn()</h5><p>决定数据序列的构建在哪个schedule上运行</p>
<p>比如上面样例，由于获取数据、解析数据需要花费一段时间的时间，所以通过 <strong>subscribeOn</strong> 将其切换到后台 <strong>Scheduler</strong> 来执行。这样可以避免主线程被阻塞</p>
<h5 id="7-2-observeOn"><a href="#7-2-observeOn" class="headerlink" title="7.2 observeOn()"></a>7.2 observeOn()</h5><p>决定哪个schedule上监听这个数据序列</p>
<p>比如上面样例，我们获取并解析完毕数据后又通过 <strong>observeOn</strong> 方法切换到主线程来监听并且处理结果</p>
<h4 id="8-双向绑定"><a href="#8-双向绑定" class="headerlink" title="8 双向绑定"></a>8 双向绑定</h4><p>比如控件的某个属性值与 ViewModel 里的某个 Subject 属性进行双向绑定</p>
<p>当 ViewModel 里的值发生改变时，可以同步反映到控件上</p>
<p>如果对控件值修改，ViewModel 那边值同时也会发生改变</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;将用户名与textField做双向绑定</span><br><span class="line">userVM.username.asObservable().bind(to: textField.rx.text).disposed(by: disposeBag)</span><br><span class="line">textField.rx.text.orEmpty.bind(to: userVM.username).disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义双向绑定操作符</li>
</ul>
<p>xSwift自带的双向绑定操作符 &lt;-&gt;<br>在RxSwift项目文件夹中 RxExample中 Operators.swift</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;将用户名与textField做双向绑定</span><br><span class="line">_ &#x3D;  self.textField.rx.textInput &lt;-&gt;  self.userVM.username</span><br></pre></td></tr></table></figure>

<h4 id="9-UITableView"><a href="#9-UITableView" class="headerlink" title="9 UITableView"></a>9 UITableView</h4><h5 id="9-1-单分区的表格数据"><a href="#9-1-单分区的表格数据" class="headerlink" title="9.1 单分区的表格数据"></a>9.1 单分区的表格数据</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let items &#x3D; Observable.just([</span><br><span class="line">    &quot;First Item&quot;,</span><br><span class="line">    &quot;Second Item&quot;,</span><br><span class="line">    &quot;Third Item&quot;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>绑定数据一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">items</span><br><span class="line">    .bind(to: tableView.rx.items)</span><br><span class="line">    &#123; (tableView, row, element) in</span><br><span class="line">        let cell &#x3D; tableView.dequeueReusableCell(withIdentifier: &quot;Cell&quot;)!</span><br><span class="line">        cell.textLabel?.text &#x3D; &quot;\(element) @ row \(row)&quot;</span><br><span class="line">        return cell</span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<p>绑定数据二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">items</span><br><span class="line">    .bind(to: tableView.rx.items(cellIdentifier: &quot;Cell&quot;, cellType: UITableViewCell.self))</span><br><span class="line">    &#123; (row, element, cell) in</span><br><span class="line">        cell.textLabel?.text &#x3D; &quot;\(element) @ row \(row)&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<ul>
<li>单元格选中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tableView.rx.itemSelected.subscribe(onNext: &#123; indexPath in</span><br><span class="line">    print(&quot;选中index：\(indexPath.row)&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">.disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">tableView.rx.modelSelected(String.self).subscribe(onNext: &#123; item in</span><br><span class="line">    print(&quot;选中内容：\(item)&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<ul>
<li>同时获取索引和内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.zip(tableView.rx.itemSelected, tableView.rx.modelSelected(String.self))</span><br><span class="line">    .subscribe(onNext: &#123; indexPath, item in</span><br><span class="line">        print(&quot;\(indexPath) \(item)&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.zip(tableView.rx.itemSelected, tableView.rx.modelSelected(String.self))</span><br><span class="line">    .bind &#123; indexPath, item in</span><br><span class="line">        print(&quot;\(indexPath) \(item)&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<ul>
<li>删除单元格</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tableView.rx.itemDeleted.subscribe(onNext: &#123; indexPath in</span><br><span class="line">    print(&quot;删除index: \(indexPath.row)&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h4 id="10-RxDataSource"><a href="#10-RxDataSource" class="headerlink" title="10 RxDataSource"></a>10 RxDataSource</h4><p>以 Section 来作为数据结构的</p>
<h5 id="10-1-单分区-TableView"><a href="#10-1-单分区-TableView" class="headerlink" title="10.1 单分区 TableView"></a>10.1 单分区 TableView</h5><p>使用自带 Section</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let items &#x3D; Observable.just([</span><br><span class="line">    SectionModel(model: &quot;&quot;, items: [</span><br><span class="line">        &quot;UILabel&quot;,</span><br><span class="line">        &quot;UITextView&quot;,</span><br><span class="line">        &quot;UIButton&quot;</span><br><span class="line">    ])</span><br><span class="line">])</span><br><span class="line">&#x2F;&#x2F;创建数据源</span><br><span class="line">let dataSource &#x3D; RxTableViewSectionedReloadDataSource&lt;SectionModel&lt;String, String&gt;&gt; &#123; dataSource, tableView, indexPath, element in</span><br><span class="line">    let cell &#x3D; tableView.dequeueReusableCell(withIdentifier: &quot;Cell&quot;)!</span><br><span class="line">    cell.textLabel?.text &#x3D; &quot;index：\(indexPath.row) element: \(element)&quot;</span><br><span class="line">    return cell</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;绑定单元格数据</span><br><span class="line">items</span><br><span class="line">    .bind(to: tableView.rx.items(dataSource: dataSource))</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="10-2-多分区-TableView"><a href="#10-2-多分区-TableView" class="headerlink" title="10.2 多分区 TableView"></a>10.2 多分区 TableView</h5><p>使用自带 Section</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let items &#x3D; Observable.just([</span><br><span class="line">    SectionModel(model: &quot;基本控件&quot;, items: [</span><br><span class="line">        &quot;UILabel&quot;,</span><br><span class="line">        &quot;UIButton&quot;,</span><br><span class="line">    ]),</span><br><span class="line">    SectionModel(model: &quot;高级控件&quot;, items: [</span><br><span class="line">        &quot;UITableView&quot;,</span><br><span class="line">        &quot;UICollectionView&quot;,</span><br><span class="line">    ]),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建数据源</span><br><span class="line">let dataSource &#x3D; RxTableViewSectionedReloadDataSource&lt;SectionModel&lt;String, String&gt;&gt; &#123; dataSource, tableView, indexPath, element in</span><br><span class="line">    let cell &#x3D; tableView.dequeueReusableCell(withIdentifier: &quot;Cell&quot;)!</span><br><span class="line">    cell.textLabel?.text &#x3D; &quot;index：\(indexPath.row) element: \(element)&quot;</span><br><span class="line">    return cell</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置分区头标题</span><br><span class="line">dataSource.titleForHeaderInSection &#x3D; &#123; dataSource, index in</span><br><span class="line">    return dataSource.sectionModels[index].model</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">items</span><br><span class="line">    .bind(to: tableView.rx.items(dataSource: dataSource))</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="10-3-使用自定义-Section"><a href="#10-3-使用自定义-Section" class="headerlink" title="10.3 使用自定义 Section"></a>10.3 使用自定义 Section</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let items &#x3D; Observable.just([</span><br><span class="line">    MySection(header: &quot;基本控件&quot;, items: [</span><br><span class="line">        &quot;UILabel&quot;,</span><br><span class="line">        &quot;UIButton&quot;,</span><br><span class="line">    ]),</span><br><span class="line">    MySection(header: &quot;高级控件&quot;, items: [</span><br><span class="line">        &quot;UITableView&quot;,</span><br><span class="line">        &quot;UICollectionView&quot;,</span><br><span class="line">    ]),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建数据源</span><br><span class="line">let dataSource &#x3D; RxTableViewSectionedReloadDataSource&lt;MySection&gt; &#123; dataSource, tableView, indexPath, element in</span><br><span class="line">    let cell &#x3D; tableView.dequeueReusableCell(withIdentifier: &quot;Cell&quot;)!</span><br><span class="line">    cell.textLabel?.text &#x3D; &quot;index：\(indexPath.row) element: \(element)&quot;</span><br><span class="line">    return cell</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置分区头标题</span><br><span class="line">dataSource.titleForHeaderInSection &#x3D; &#123; dataSource, index in</span><br><span class="line">    return dataSource.sectionModels[index].header</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">items</span><br><span class="line">    .bind(to: tableView.rx.items(dataSource: dataSource))</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="10-4-数据刷新"><a href="#10-4-数据刷新" class="headerlink" title="10.4 数据刷新"></a>10.4 数据刷新</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let refreshButton: UIBarButtonItem &#x3D; UIBarButtonItem(title: &quot;Refresh&quot;, style: .plain, target: self, action: nil)</span><br><span class="line"></span><br><span class="line">let randomResult &#x3D; refreshButton.rx.tap</span><br><span class="line">    .startWith(())&#x2F;&#x2F;一开始就能自动请求一次数据</span><br><span class="line">    .flatMapLatest(getRandomResult)&#x2F;&#x2F;多次请求取最后一次</span><br><span class="line">    .share()</span><br><span class="line"></span><br><span class="line">let dataSource &#x3D; RxTableViewSectionedReloadDataSource&lt;SectionModel&lt;String, Int&gt;&gt; &#123; dataSource, tableView, indexPath, element in</span><br><span class="line">    let cell &#x3D; tableView.dequeueReusableCell(withIdentifier: &quot;Cell&quot;)!</span><br><span class="line">    cell.textLabel?.text &#x3D; &quot;\(indexPath.row): \(element)&quot;</span><br><span class="line">    return cell</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">randomResult</span><br><span class="line">    .bind(to: tableView.rx.items(dataSource: dataSource))</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">func getRandomResult() -&gt; Observable&lt;[SectionModel&lt;String, Int&gt;]&gt;&#123;</span><br><span class="line">        print(&quot;请求数据..&quot;)</span><br><span class="line">        let items &#x3D; (0..&lt;5).map &#123; _ in</span><br><span class="line">            Int(arc4random())</span><br><span class="line">        &#125;</span><br><span class="line">        let observable &#x3D; Observable.just([SectionModel(model: &quot;S&quot;, items: items)])</span><br><span class="line">        return observable.delay(RxTimeInterval.seconds(2), scheduler: MainScheduler.instance)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>也可以在源头进行限制，1秒内多次点击只取最后一次</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let randomResult &#x3D; refreshButton.rx.tap</span><br><span class="line">    .throttle(RxTimeInterval.seconds(1), scheduler: MainScheduler.instance)</span><br><span class="line">    .startWith(())&#x2F;&#x2F;一开始就能自动请求一次数据</span><br><span class="line">    .share()</span><br></pre></td></tr></table></figure>

<ul>
<li> 停止数据请求</li>
</ul>
<p>使用 takeUntil，当 takeUntil 中的 Observable 发送一个值时，便会结束对应的 Observable</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let stopButton: UIBarButtonItem &#x3D; UIBarButtonItem(title: &quot;Cancel&quot;, style: .plain, target: self, action: nil)</span><br><span class="line"></span><br><span class="line">let randomResult &#x3D; refreshButton.rx.tap</span><br><span class="line">    .startWith(())&#x2F;&#x2F;一开始就能自动请求一次数据</span><br><span class="line">    .flatMapLatest &#123;</span><br><span class="line">        self.getRandomResult().takeUntil(self.stopButton.rx.tap)</span><br><span class="line">    &#125;.share()</span><br></pre></td></tr></table></figure>

<h5 id="10-5-搜索过滤"><a href="#10-5-搜索过滤" class="headerlink" title="10.5 搜索过滤"></a>10.5 搜索过滤</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var searchBar: UISearchBar!</span><br><span class="line">tableView.tableHeaderView &#x3D; searchBar</span><br><span class="line"></span><br><span class="line">let randomResult &#x3D; refreshButton.rx.tap</span><br><span class="line">    .startWith(())&#x2F;&#x2F;一开始就能自动请求一次数据</span><br><span class="line">    .flatMapLatest &#123;</span><br><span class="line">        self.getRandomResult().takeUntil(self.stopButton.rx.tap)</span><br><span class="line">    &#125;</span><br><span class="line">    .flatMapLatest(filterResult)</span><br><span class="line">    .share()</span><br><span class="line">      </span><br><span class="line">func filterResult(data: [SectionModel&lt;String, Int&gt;]) -&gt; Observable&lt;[SectionModel&lt;String, Int&gt;]&gt; &#123;</span><br><span class="line">    self.searchBar.rx.text.orEmpty.flatMapLatest &#123; query -&gt; Observable&lt;[SectionModel&lt;String, Int&gt;]&gt; in</span><br><span class="line">        print(&quot;筛选数据(条件为：\(query)&quot;)</span><br><span class="line">        if query.isEmpty &#123;</span><br><span class="line">            return Observable.just(data)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            var newData: [SectionModel&lt;String, Int&gt;] &#x3D; []</span><br><span class="line">            for sectionModel in data &#123;</span><br><span class="line">                let items &#x3D; sectionModel.items.filter &#123; &quot;\($0)&quot;.contains(query) &#125;</span><br><span class="line">                newData.append(SectionModel(model: sectionModel.model, items: items))</span><br><span class="line">            &#125;</span><br><span class="line">            return Observable.just(newData)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="10-6-可编辑表格"><a href="#10-6-可编辑表格" class="headerlink" title="10.6 可编辑表格"></a>10.6 可编辑表格</h5><p>定义各种操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum TableEditingCommand &#123;</span><br><span class="line">    case setItems(items: [String])</span><br><span class="line">    case addItem(item: String)</span><br><span class="line">    case moveItem(from: IndexPath, to: IndexPath)</span><br><span class="line">    case deleteItem(IndexPath)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义ViewModel，保存除了表格数据外，还包含4个操作指令的具体实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct TableViewModel &#123;</span><br><span class="line">    fileprivate var items: [String]</span><br><span class="line">    </span><br><span class="line">    init(items: [String] &#x3D; []) &#123;</span><br><span class="line">        self.items &#x3D; items</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func execute(command: TableEditingCommand) -&gt; TableViewModel &#123;</span><br><span class="line">        switch command &#123;</span><br><span class="line">        case .setItems(let items):</span><br><span class="line">            print(&quot;设置表格数据&quot;)</span><br><span class="line">            return TableViewModel(items: items)</span><br><span class="line">        case .addItem(let item):</span><br><span class="line">            print(&quot;新增数据&quot;)</span><br><span class="line">            var items &#x3D; self.items</span><br><span class="line">            items.append(item)</span><br><span class="line">            return TableViewModel(items: items)</span><br><span class="line">        case .moveItem(let from, let to):</span><br><span class="line">            print(&quot;移动数据&quot;)</span><br><span class="line">            var items &#x3D; self.items</span><br><span class="line">            items.insert(items.remove(at: from.row), at: to.row)</span><br><span class="line">            return TableViewModel(items: items)</span><br><span class="line">        case .deleteItem(let indexPath):</span><br><span class="line">            print(&quot;删除数据项&quot;)</span><br><span class="line">            var items &#x3D; self.items</span><br><span class="line">            items.remove(at: indexPath.row)</span><br><span class="line">            return TableViewModel(items: items)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ViewController</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line"></span><br><span class="line">    let disposeBag &#x3D; DisposeBag()</span><br><span class="line">    </span><br><span class="line">    var tableView: UITableView!</span><br><span class="line">    </span><br><span class="line">    let refreshButton: UIBarButtonItem &#x3D; UIBarButtonItem(title: &quot;Refresh&quot;, style: .plain, target: self, action: nil)</span><br><span class="line">    let addButton    : UIBarButtonItem &#x3D; UIBarButtonItem(title: &quot;Add&quot;, style: .plain, target: self, action: nil)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        self.tableView &#x3D; UITableView(frame: view.frame, style: .plain)</span><br><span class="line">        self.tableView.register(UITableViewCell.self, forCellReuseIdentifier: &quot;Cell&quot;)</span><br><span class="line">        self.view.addSubview(tableView)</span><br><span class="line"></span><br><span class="line">        navigationItem.leftBarButtonItem  &#x3D; addButton</span><br><span class="line">        navigationItem.rightBarButtonItem &#x3D; refreshButton</span><br><span class="line">        </span><br><span class="line">        let initialVM &#x3D; TableViewModel()</span><br><span class="line">        </span><br><span class="line">        let refreshCommand &#x3D; refreshButton.rx.tap</span><br><span class="line">            .startWith(())</span><br><span class="line">            .flatMapLatest(getRandomResult)</span><br><span class="line">            .map(TableEditingCommand.setItems)</span><br><span class="line">        </span><br><span class="line">        let addCommand &#x3D; addButton.rx.tap</span><br><span class="line">            .map &#123; &quot;\(arc4random())&quot; &#125;</span><br><span class="line">            .map(TableEditingCommand.addItem)</span><br><span class="line">        </span><br><span class="line">        let moveCommand &#x3D; tableView.rx.itemMoved</span><br><span class="line">            .map (TableEditingCommand.moveItem)</span><br><span class="line">        </span><br><span class="line">        let deleteCommand &#x3D; tableView.rx.itemDeleted</span><br><span class="line">            .map(TableEditingCommand.deleteItem)</span><br><span class="line">        </span><br><span class="line">        Observable.of(refreshCommand, addCommand, moveCommand, deleteCommand)</span><br><span class="line">            .merge()</span><br><span class="line">            .scan(initialVM) &#123; (vm: TableViewModel, command: TableEditingCommand) -&gt; TableViewModel  in</span><br><span class="line">                return vm.execute(command: command)</span><br><span class="line">            &#125;</span><br><span class="line">            .startWith(initialVM)</span><br><span class="line">            .map &#123;</span><br><span class="line">                [AnimatableSectionModel(model: &quot;&quot;, items: $0.items)]</span><br><span class="line">            &#125;</span><br><span class="line">            .share()</span><br><span class="line">            .bind(to: tableView.rx.items(dataSource: ViewController.dataSource()))</span><br><span class="line">            .disposed(by: disposeBag)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func getRandomResult() -&gt; Observable&lt;[String]&gt; &#123;</span><br><span class="line">        print(&quot;生成随机数&quot;)</span><br><span class="line">        let items &#x3D; (0..&lt;5).map &#123; _ in</span><br><span class="line">            &quot;\(arc4random())&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        return Observable.just(items)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override func viewDidAppear(_ animated: Bool) &#123;</span><br><span class="line">        super.viewDidAppear(animated)</span><br><span class="line">        tableView.setEditing(true, animated: true)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">extension ViewController &#123;</span><br><span class="line"></span><br><span class="line">    static func dataSource() -&gt; RxTableViewSectionedAnimatedDataSource&lt;AnimatableSectionModel&lt;String, String&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">        let configuration: AnimationConfiguration &#x3D;</span><br><span class="line">            AnimationConfiguration(insertAnimation: .top,</span><br><span class="line">                                   reloadAnimation: .fade,</span><br><span class="line">                                   deleteAnimation: .left)</span><br><span class="line"></span><br><span class="line">        return RxTableViewSectionedAnimatedDataSource(</span><br><span class="line">            animationConfiguration: configuration) &#123; dataSource, tv, indexPath, element in</span><br><span class="line">            let cell &#x3D; tv.dequeueReusableCell(withIdentifier: &quot;Cell&quot;)!</span><br><span class="line">            cell.textLabel?.text &#x3D; &quot;条目：\(indexPath.row) \(element)&quot;</span><br><span class="line">            return cell</span><br><span class="line">        &#125; canEditRowAtIndexPath: &#123; _, _ in</span><br><span class="line">            return true</span><br><span class="line">        &#125; canMoveRowAtIndexPath: &#123; _, _ in</span><br><span class="line">            return true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="10-7-不同类型-Cell"><a href="#10-7-不同类型-Cell" class="headerlink" title="10.7 不同类型 Cell"></a>10.7 不同类型 Cell</h5>]]></content>
  </entry>
  <entry>
    <title>RxSwift（二）操作符</title>
    <url>/2021/09/03/RxSwift%EF%BC%88%E4%BA%8C%EF%BC%89%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
    <content><![CDATA[<h4 id="1-变换操作"><a href="#1-变换操作" class="headerlink" title="1 变换操作"></a>1 变换操作</h4><p>对原始的Observable序列进行一些转换</p>
<h5 id="1-1-buffer"><a href="#1-1-buffer" class="headerlink" title="1.1 buffer"></a>1.1 buffer</h5><p>缓冲组合，参数1缓冲时间，参数2缓冲个数，参数3线程<br>缓存Observable中发出的元素，元素达到某个数量或经过特定时间，就将元素集合发送出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;每缓存3个元素则组合一起发出来</span><br><span class="line">&#x2F;&#x2F;如果1秒内不够3个也会发出（有几个发几个，一个没有发[]）</span><br><span class="line">subject</span><br><span class="line">    .buffer(timeSpan: RxTimeInterval.seconds(1), count: 3, scheduler: MainScheduler.instance)</span><br><span class="line">    .subscribe(onNext: &#123; print($0)&#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject.onNext(&quot;a&quot;)</span><br><span class="line">subject.onNext(&quot;b&quot;)</span><br><span class="line">subject.onNext(&quot;c&quot;)</span><br><span class="line"></span><br><span class="line">subject.onNext(&quot;1&quot;)</span><br><span class="line">subject.onNext(&quot;2&quot;)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="line">[&quot;1&quot;, &quot;2&quot;]</span><br><span class="line">[]</span><br><span class="line">[]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h5 id="1-2-window"><a href="#1-2-window" class="headerlink" title="1.2 window"></a>1.2 window</h5><p>和 buffer 类似，Buffer是周期性的将缓存的元素集合发送出来，window周期性的将元素集合以observable形态发送出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line"></span><br><span class="line">subject</span><br><span class="line">    .window(timeSpan: RxTimeInterval.seconds(1), count: 3, scheduler: MainScheduler.instance)</span><br><span class="line">    .subscribe(onNext: &#123;</span><br><span class="line">        print($0)</span><br><span class="line">        $0.subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">          .disposed(by: self.disposeBag)</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject.onNext(&quot;a&quot;)</span><br><span class="line">subject.onNext(&quot;b&quot;)</span><br><span class="line">subject.onNext(&quot;c&quot;)</span><br><span class="line"></span><br><span class="line">subject.onNext(&quot;1&quot;)</span><br><span class="line">subject.onNext(&quot;2&quot;)</span><br><span class="line">  </span><br><span class="line">结果：</span><br><span class="line">RxSwift.AddRef&lt;Swift.String&gt;</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">RxSwift.AddRef&lt;Swift.String&gt;</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">RxSwift.AddRef&lt;Swift.String&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h5 id="1-3-map"><a href="#1-3-map" class="headerlink" title="1.3 map"></a>1.3 map</h5><p>传入一个函数闭包，把原来observable序列转变为一个新的observable序列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">    .map &#123; $0 * 10 &#125;</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="4-4-flatMap"><a href="#4-4-flatMap" class="headerlink" title="4.4 flatMap"></a>4.4 flatMap</h5><p><code>map </code>做转换的时候容易出现升维情况，转变后，从一个序列变为一个序列的序列<br><code>flatMap</code> 会对源observable的每个元素应用一个转换方法，转换成observables，然后将这些observables元素合并后发送出来，即又将其降维成一个observable序列</p>
<p>Observable 的元素本生拥有其他的 Observable 时，我们可以将所有子 Observables 的元素发送出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject1 &#x3D; BehaviorSubject(value: &quot;A&quot;)</span><br><span class="line">let subject2 &#x3D; BehaviorSubject(value: &quot;1&quot;)</span><br><span class="line"></span><br><span class="line">let replay &#x3D; BehaviorRelay(value: subject1)</span><br><span class="line">replay.asObservable()</span><br><span class="line">    .flatMap&#123; $0 &#125;</span><br><span class="line">    .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject1.onNext(&quot;B&quot;)</span><br><span class="line">replay.accept(subject2)</span><br><span class="line">subject2.onNext(&quot;2&quot;)</span><br><span class="line">subject1.onNext(&quot;C&quot;)</span><br><span class="line">      </span><br><span class="line">结果：</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">C</span><br></pre></td></tr></table></figure>

<h5 id="4-5-flatMapLatest"><a href="#4-5-flatMapLatest" class="headerlink" title="4.5 flatMapLatest"></a>4.5 flatMapLatest</h5><p>和flatMap唯一区别，只会接收最新的value事件<br>将flatMap的例子替换成flatMapLatest</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A</span><br><span class="line">B</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h5 id="1-6-flatMapFirst"><a href="#1-6-flatMapFirst" class="headerlink" title="1.6 flatMapFirst"></a>1.6 flatMapFirst</h5><p>和flatMapLatest相反，只接收最初value事件</p>
<p>可以防止重复请求<br>如：点击按钮发送请求，请求完成前，该按钮点击都不应该继续发送请求</p>
<p>将flatMap的例子替换成 flatMapFirst</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br></pre></td></tr></table></figure>

<h5 id="4-7-concatMap"><a href="#4-7-concatMap" class="headerlink" title="4.7 concatMap"></a>4.7 concatMap</h5><p>和flatMap区别：前一个Observable元素发送完毕后，后一个Observable才可以开始发出元素。<br>等待前一个Observable产生完成事件后，才对后一个Observable进行订阅</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject1 &#x3D; BehaviorSubject(value: &quot;A&quot;)</span><br><span class="line">let subject2 &#x3D; BehaviorSubject(value: &quot;1&quot;)</span><br><span class="line"></span><br><span class="line">let replay &#x3D; BehaviorRelay(value: subject1)</span><br><span class="line">replay</span><br><span class="line">    .concatMap &#123; $0 &#125;</span><br><span class="line">    .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject1.onNext(&quot;B&quot;)</span><br><span class="line">replay.accept(subject2)</span><br><span class="line">subject2.onNext(&quot;2&quot;)</span><br><span class="line">subject1.onNext(&quot;C&quot;)</span><br><span class="line">subject1.onCompleted() &#x2F;&#x2F;只有前一个序列结束，才能接收下一个序列 如果没有complete 只输出 A B C</span><br><span class="line">结果：</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h5 id="4-8-scan"><a href="#4-8-scan" class="headerlink" title="4.8 scan"></a>4.8 scan</h5><p>先给一个初始化的数，然后不断拿前一个结果和最新值进行处理操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3, 4, 6)</span><br><span class="line">    .scan(0) &#123; acum, elem in</span><br><span class="line">        acum + elem</span><br><span class="line">    &#125;</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">结果：</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">10</span><br><span class="line">16</span><br></pre></td></tr></table></figure>

<h5 id="1-9-groupBy"><a href="#1-9-groupBy" class="headerlink" title="1.9 groupBy"></a>1.9 groupBy</h5><p>将源Observable分解为多个子Observable，然后将子Observable发送出来<br>会将元素通过某个键进行分组，然后将分组后的元素序列以Observable形态发送出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable&lt;Int&gt;.of(0, 1, 2, 3, 4, 5)</span><br><span class="line">    .groupBy &#123; element -&gt; String in</span><br><span class="line">        return element % 2 &#x3D;&#x3D; 0 ? &quot;偶数&quot;:&quot;奇数&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    .subscribe &#123; event in</span><br><span class="line">        switch event &#123;</span><br><span class="line">        case .next(let group):</span><br><span class="line">            group</span><br><span class="line">                .subscribe(onNext: &#123; print(&quot;key:\(group.key) \($0)&quot;) &#125;)</span><br><span class="line">                .disposed(by: self.disposeBag)</span><br><span class="line">        default:</span><br><span class="line">            print(&quot;&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.disposed(by: disposeBag)</span><br><span class="line">结果：</span><br><span class="line">key:奇数 1</span><br><span class="line">key:偶数 2</span><br><span class="line">key:奇数 3</span><br><span class="line">key:偶数 4</span><br><span class="line">key:奇数 5</span><br></pre></td></tr></table></figure>

<h4 id="2-过滤操作符"><a href="#2-过滤操作符" class="headerlink" title="2 过滤操作符"></a>2 过滤操作符</h4><p>从源Observable中选择特定的数据发送出来</p>
<h5 id="2-1-filter"><a href="#2-1-filter" class="headerlink" title="2.1 filter"></a>2.1 filter</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 10, 12)</span><br><span class="line">    .filter &#123;$0 &gt; 10&#125;</span><br><span class="line">    .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">&#x2F;&#x2F;结果：12</span><br></pre></td></tr></table></figure>

<h5 id="2-2-distinctUntilChanged"><a href="#2-2-distinctUntilChanged" class="headerlink" title="2.2 distinctUntilChanged"></a>2.2 distinctUntilChanged</h5><p>过滤掉连续重复事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 1, 10, 1)</span><br><span class="line">    .distinctUntilChanged()</span><br><span class="line">    .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">结果</span><br><span class="line">1</span><br><span class="line">10</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h5 id="2-3-single"><a href="#2-3-single" class="headerlink" title="2.3 single"></a>2.3 single</h5><p>限制只发送一次事件，或满足条件的第一个事件<br>如果存在多个事件或没有事件会发出一个error<br>如果只有一个事件，则不会发出error事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">    .single&#123;$0 &#x3D;&#x3D; 2&#125;</span><br><span class="line">    .subscribe(onNext: &#123;print($0)&#125;) &#x2F;&#x2F;结果 2</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">   </span><br><span class="line">Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">            .single()</span><br><span class="line">            .subscribe(onNext: &#123;print($0)&#125;, onError: &#123; error in</span><br><span class="line">                print(error)</span><br><span class="line">            &#125;)</span><br><span class="line">            .disposed(by: disposeBag)</span><br><span class="line">结果：</span><br><span class="line">A</span><br><span class="line">Sequence contains more than one element.</span><br></pre></td></tr></table></figure>

<h5 id="2-4-elementAt"><a href="#2-4-elementAt" class="headerlink" title="2.4 elementAt"></a>2.4 elementAt</h5><p>只处理指定位置事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">    .elementAt(2)</span><br><span class="line">    .subscribe(onNext: &#123;print($0)&#125;) &#x2F;&#x2F;3</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="2-5-ignoreElements"><a href="#2-5-ignoreElements" class="headerlink" title="2.5 ignoreElements"></a>2.5 ignoreElements</h5><p>可以忽略所有元素，只发出error或complete事件<br>如果并不关心Observable任何元素，只想知道Observable在什么时候终止，可以用ignoreElements</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">    .ignoreElements()</span><br><span class="line">    .subscribe&#123;print($0)&#125; &#x2F;&#x2F;completed</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="2-6-take"><a href="#2-6-take" class="headerlink" title="2.6 take"></a>2.6 take</h5><p>实现仅发送Observable序列前n个事件，满足数量后自动.complete</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">   .take(2)</span><br><span class="line">   .subscribe&#123;print($0)&#125;</span><br><span class="line">   .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="2-7-takeLast"><a href="#2-7-takeLast" class="headerlink" title="2.7 takeLast"></a>2.7 takeLast</h5><p>仅发送Observable序列中的后n个元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">   .takeLast(1)</span><br><span class="line">   .subscribe&#123;print($0)&#125;</span><br><span class="line">   .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="2-8-skip"><a href="#2-8-skip" class="headerlink" title="2.8 skip"></a>2.8 skip</h5><p>跳过源Observable序列发出的前n个事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">   .skip(2)</span><br><span class="line">   .subscribe&#123;print($0)&#125;</span><br><span class="line">   .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="2-9-Sample"><a href="#2-9-Sample" class="headerlink" title="2.9 Sample"></a>2.9 Sample</h5><p>除了订阅源Observable外，还能监视另外一个Observable，即notifier<br>每当收到notifier事件，就会从源序列取一个最新事件发送</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let source &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">let notifier &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line"> </span><br><span class="line">source</span><br><span class="line">    .sample(notifier)</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"> </span><br><span class="line">source.onNext(1)</span><br><span class="line">&#x2F;&#x2F;让源序列接收接收消息</span><br><span class="line">notifier.onNext(&quot;A&quot;)</span><br><span class="line">source.onNext(2)</span><br><span class="line">&#x2F;&#x2F;让源序列接收接收消息</span><br><span class="line">notifier.onNext(&quot;B&quot;)</span><br><span class="line">notifier.onNext(&quot;C&quot;)</span><br><span class="line">source.onNext(3)</span><br><span class="line">source.onNext(4)</span><br><span class="line">&#x2F;&#x2F;让源序列接收接收消息</span><br><span class="line">notifier.onNext(&quot;D&quot;)</span><br><span class="line">source.onNext(5)</span><br><span class="line">&#x2F;&#x2F;让源序列接收接收消息</span><br><span class="line">notifier.onCompleted()</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h5 id="2-10-debounce"><a href="#2-10-debounce" class="headerlink" title="2.10 debounce"></a>2.10 debounce</h5><p>可以过滤掉高频产生的元素<br>队列中的元素如果和下一个元素的间隔小于了指定时间间隔，那这元素将被过滤掉<br>常用在输入的时候，不需要每个字母敲进去都发送一个事件，而是稍等下取最后一个事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let times &#x3D; [</span><br><span class="line">    [ &quot;value&quot;: 1, &quot;time&quot;: 100 ], &#x2F;&#x2F;0.1s</span><br><span class="line">    [ &quot;value&quot;: 2, &quot;time&quot;: 110 ],</span><br><span class="line">    [ &quot;value&quot;: 3, &quot;time&quot;: 120 ],</span><br><span class="line">    [ &quot;value&quot;: 4, &quot;time&quot;: 120 ],</span><br><span class="line">    [ &quot;value&quot;: 5, &quot;time&quot;: 140 ],</span><br><span class="line">    [ &quot;value&quot;: 6, &quot;time&quot;: 210 ]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Observable.from(times)</span><br><span class="line">    </span><br><span class="line">    .flatMap &#123; item in</span><br><span class="line">        return Observable.of(Int(item[&quot;value&quot;]!))</span><br><span class="line">            .delay(RxTimeInterval.milliseconds(Int(item[&quot;time&quot;]!)), scheduler: MainScheduler.instance)</span><br><span class="line">    &#125;</span><br><span class="line">    .debounce(RxTimeInterval.milliseconds(500), scheduler: MainScheduler.instance)</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)&#x2F;&#x2F;只发出与下一个间隔超过0.5s的元素</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h4 id="3-条件与布尔操作符"><a href="#3-条件与布尔操作符" class="headerlink" title="3 条件与布尔操作符"></a>3 条件与布尔操作符</h4><h5 id="3-1-amb"><a href="#3-1-amb" class="headerlink" title="3.1 amb"></a>3.1 amb</h5><p>传入多个Observables到amb操作符，将取第一个发出元素或产生事件的Observable，然后只发出它的元素，忽略其它Observable</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject1 &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">let subject2 &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">let subject3 &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line"></span><br><span class="line">subject1</span><br><span class="line">.amb(subject2)</span><br><span class="line">.amb(subject3)</span><br><span class="line">.subscribe&#123;print($0)&#125;</span><br><span class="line">.disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject2.onNext(1)&#x2F;&#x2F;最先发</span><br><span class="line">subject1.onNext(20)</span><br><span class="line">subject2.onNext(2)</span><br><span class="line">subject1.onNext(40)</span><br><span class="line">subject3.onNext(0)</span><br><span class="line">subject2.onNext(3)</span><br><span class="line">subject1.onNext(60)</span><br><span class="line">subject3.onNext(0)</span><br><span class="line">subject3.onNext(0)</span><br><span class="line">结果：</span><br><span class="line">next(1)</span><br><span class="line">next(2)</span><br><span class="line">next(3)</span><br></pre></td></tr></table></figure>

<h5 id="3-2-takeWhile"><a href="#3-2-takeWhile" class="headerlink" title="3.2 takeWhile"></a>3.2 takeWhile</h5><p>依次判断Observable序列每个值是否满足条件，第一个不满足值出现，便自动完成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">    .takeWhile&#123; $0 &lt; 2&#125;</span><br><span class="line">    .subscribe&#123;print($0)&#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="3-3-takeUntil"><a href="#3-3-takeUntil" class="headerlink" title="3.3 takeUntil"></a>3.3 takeUntil</h5><p>可以监听另外一个Observable，即notifier<br>notifier发出值或complete通知，源Observable便自动完成，停止发送事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let source &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">let notifier &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line"> </span><br><span class="line">source</span><br><span class="line">    .takeUntil(notifier)</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"> </span><br><span class="line">source.onNext(&quot;a&quot;)</span><br><span class="line">source.onNext(&quot;b&quot;)</span><br><span class="line">source.onNext(&quot;c&quot;)</span><br><span class="line">source.onNext(&quot;d&quot;)</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;停止接收消息</span><br><span class="line">notifier.onNext(&quot;z&quot;)</span><br><span class="line"> </span><br><span class="line">source.onNext(&quot;e&quot;)</span><br><span class="line">source.onNext(&quot;f&quot;)</span><br><span class="line">source.onNext(&quot;g&quot;)</span><br><span class="line">结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br></pre></td></tr></table></figure>

<h5 id="3-4-skipWhile"><a href="#3-4-skipWhile" class="headerlink" title="3.4 skipWhile"></a>3.4 skipWhile</h5><p>跳过前面满足条件的事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(2, 3, 4, 5, 6)</span><br><span class="line">    .skipWhile &#123; $0 &lt; 4 &#125;</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="3-5-skipUntil"><a href="#3-5-skipUntil" class="headerlink" title="3.5 skipUntil"></a>3.5 skipUntil</h5><p>类似takeUntil，还可以监听另外一个Observable<br>和takeUntil相反，默认会一直跳过，直到notifier发出值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let source &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">let notifier &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line"> </span><br><span class="line">source</span><br><span class="line">    .skipUntil(notifier)</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"> </span><br><span class="line">source.onNext(1)</span><br><span class="line">source.onNext(2)</span><br><span class="line">source.onNext(3)</span><br><span class="line">source.onNext(4)</span><br><span class="line">source.onNext(5)</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;开始接收消息</span><br><span class="line">notifier.onNext(0)</span><br><span class="line">source.onNext(6)</span><br><span class="line">source.onNext(7)</span><br><span class="line">source.onNext(8)</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;仍然接收消息</span><br><span class="line">notifier.onNext(0)</span><br><span class="line">source.onNext(9)</span><br><span class="line">结果：</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure>

<h4 id="4-结合操作符"><a href="#4-结合操作符" class="headerlink" title="4 结合操作符"></a>4 结合操作符</h4><p>将多个Observable序列进行组合，拼装成一个新的Observable</p>
<h5 id="4-1-startWith"><a href="#4-1-startWith" class="headerlink" title="4.1 startWith"></a>4.1 startWith</h5><p>在Observable序列开始前插入一些事件元素，也可以多次startWith</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(2, 3)</span><br><span class="line">    .startWith(1)</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="4-2-merge"><a href="#4-2-merge" class="headerlink" title="4.2 merge"></a>4.2 merge</h5><p>将多个Observable序列合并成一个Observable序列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject1 &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">let subject2 &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line"></span><br><span class="line">Observable.of(subject1, subject2)</span><br><span class="line">    .merge()</span><br><span class="line">    .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject1.onNext(20)</span><br><span class="line">subject1.onNext(60)</span><br><span class="line">subject2.onNext(1)</span><br><span class="line">subject1.onNext(80)</span><br><span class="line">subject2.onNext(1)</span><br><span class="line">结果：</span><br><span class="line">20</span><br><span class="line">60</span><br><span class="line">1</span><br><span class="line">80</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h5 id="4-3-zip"><a href="#4-3-zip" class="headerlink" title="4.3 zip"></a>4.3 zip</h5><p>多个Observable序列压缩成一个Observable序列<br>会等每个Observables事件一一对应凑齐后合并</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject1 &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">let subject2 &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line"></span><br><span class="line">Observable.zip(subject1, subject2) &#123;</span><br><span class="line">        &quot;\($0)\($1)&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject1.onNext(1)</span><br><span class="line">subject2.onNext(&quot;A&quot;)</span><br><span class="line">subject1.onNext(2)</span><br><span class="line">subject2.onNext(&quot;B&quot;)</span><br><span class="line">subject2.onNext(&quot;C&quot;)</span><br><span class="line">subject2.onNext(&quot;D&quot;)</span><br><span class="line">subject1.onNext(3)</span><br><span class="line">subject1.onNext(4)</span><br><span class="line">subject1.onNext(5)</span><br><span class="line">结果：</span><br><span class="line">1A</span><br><span class="line">2B</span><br><span class="line">3C</span><br><span class="line">4D</span><br></pre></td></tr></table></figure>

<p>常用在整合网络请求上，只有当两请求成功后，再两者结果整合起来继续往下处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;第一个请求</span><br><span class="line">let userRequest: Observable&lt;User&gt; &#x3D; API.getUser(&quot;me&quot;)</span><br><span class="line">&#x2F;&#x2F;第二个请求</span><br><span class="line">let friendsRequest: Observable&lt;Friends&gt; &#x3D; API.getFriends(&quot;me&quot;)</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;将两个请求合并处理</span><br><span class="line">Observable.zip(userRequest, friendsRequest) &#123;</span><br><span class="line">        user, friends in</span><br><span class="line">        &#x2F;&#x2F;将两个信号合并成一个信号，并压缩成一个元组返回（两个信号均成功）</span><br><span class="line">        return (user, friends)</span><br><span class="line">    &#125;</span><br><span class="line">    .observeOn(MainScheduler.instance) &#x2F;&#x2F;加这个是应为请求在后台线程，下面的绑定在前台线程。</span><br><span class="line">    .subscribe(onNext: &#123; (user, friends) in</span><br><span class="line">        &#x2F;&#x2F;将数据绑定到界面上</span><br><span class="line">        &#x2F;&#x2F;.......</span><br><span class="line">    &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="4-4-combineLatest"><a href="#4-4-combineLatest" class="headerlink" title="4.4 combineLatest"></a>4.4 combineLatest</h5><p>将多个Observable序列元素进行合并<br>和zip不同的是，任意一个Observable有新事件发出，会将每个Observable序列的最新事件元素进行合并</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject1 &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">let subject2 &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line"> </span><br><span class="line">Observable.combineLatest(subject1, subject2) &#123;</span><br><span class="line">    &quot;\($0)\($1)&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"> </span><br><span class="line">subject1.onNext(1)</span><br><span class="line">subject2.onNext(&quot;A&quot;)</span><br><span class="line">subject1.onNext(2)</span><br><span class="line">subject2.onNext(&quot;B&quot;)</span><br><span class="line">subject2.onNext(&quot;C&quot;)</span><br><span class="line">subject2.onNext(&quot;D&quot;)</span><br><span class="line">subject1.onNext(3)</span><br><span class="line">subject1.onNext(4)</span><br><span class="line">subject1.onNext(5)</span><br><span class="line">结果：</span><br><span class="line">1A</span><br><span class="line">2A</span><br><span class="line">2B</span><br><span class="line">2C</span><br><span class="line">3D</span><br><span class="line">4D</span><br><span class="line">5D</span><br></pre></td></tr></table></figure>

<h5 id="4-5-withLatestFrom"><a href="#4-5-withLatestFrom" class="headerlink" title="4.5 withLatestFrom"></a>4.5 withLatestFrom</h5><p>将两个Observable序列合并为一个，self队列 发射一个元素时，就从第二个序列中取最新的一个值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject1 &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">let subject2 &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line"> </span><br><span class="line">subject1.withLatestFrom(subject2)</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"> </span><br><span class="line">subject1.onNext(&quot;A&quot;)</span><br><span class="line">subject2.onNext(&quot;1&quot;)</span><br><span class="line">subject1.onNext(&quot;B&quot;)</span><br><span class="line">subject1.onNext(&quot;C&quot;)</span><br><span class="line">subject2.onNext(&quot;2&quot;)</span><br><span class="line">subject1.onNext(&quot;D&quot;)</span><br><span class="line">结果：</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h5 id="4-6-switchLatest"><a href="#4-6-switchLatest" class="headerlink" title="4.6 switchLatest"></a>4.6 switchLatest</h5><p>可以对事件流进行切换<br>如：本来监听Subject1，通过value更换事件源后变成监听Subject2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject1 &#x3D; BehaviorSubject(value: &quot;A&quot;)</span><br><span class="line">let subject2 &#x3D; BehaviorSubject(value: &quot;1&quot;)</span><br><span class="line">let replay &#x3D; BehaviorRelay(value: subject1)</span><br><span class="line">replay.asObservable()</span><br><span class="line">    .switchLatest()</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">subject1.onNext(&quot;B&quot;)</span><br><span class="line">subject1.onNext(&quot;C&quot;)</span><br><span class="line">&#x2F;&#x2F;改变事件源</span><br><span class="line">&#x2F;&#x2F;切换了源 不打印D 打印1 2</span><br><span class="line">replay.accept(subject2)</span><br><span class="line">subject1.onNext(&quot;D&quot;)</span><br><span class="line">subject2.onNext(&quot;2&quot;)</span><br><span class="line">&#x2F;&#x2F;改变事件源</span><br><span class="line">&#x2F;&#x2F;切换了源 不打印3 打印 D E</span><br><span class="line">replay.accept(subject1)</span><br><span class="line">subject2.onNext(&quot;3&quot;)</span><br><span class="line">subject1.onNext(&quot;E&quot;)</span><br><span class="line">结果：</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">D</span><br><span class="line">E</span><br></pre></td></tr></table></figure>

<h4 id="5-算术、聚合操作符"><a href="#5-算术、聚合操作符" class="headerlink" title="5 算术、聚合操作符"></a>5 算术、聚合操作符</h4><h5 id="5-1-toArray"><a href="#5-1-toArray" class="headerlink" title="5.1 toArray"></a>5.1 toArray</h5><p>将序列转成一个数组，并作为一个单一的事件发送</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">    .toArray()</span><br><span class="line">    .subscribe(onSuccess: &#123; print($0) &#125;) &#x2F;&#x2F;[1, 2, 3]</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="5-2-reduce"><a href="#5-2-reduce" class="headerlink" title="5.2 reduce"></a>5.2 reduce</h5><p>接受初始值和一个操作符<br>将给定初始值，和序列中每个值进行累计运算，等到最终结果，并将其作为单个值发送</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3, 4, 5)</span><br><span class="line">    .reduce(0, accumulator: +)</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;) &#x2F;&#x2F;15</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="5-3-concat"><a href="#5-3-concat" class="headerlink" title="5.3 concat"></a>5.3 concat</h5><p>把多个Observable序列合并（串联）为一个Observable序列<br>前一个Observable发出complete事件，才会开始发送下一个Observable序列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">subject1 &#x3D; BehaviorSubject(value: 1)</span><br><span class="line">let subject2 &#x3D; BehaviorSubject(value: 2)</span><br><span class="line">let replay &#x3D; BehaviorRelay(value: subject1)</span><br><span class="line">replay.asObservable()</span><br><span class="line">    .concat()</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">subject2.onNext(2)</span><br><span class="line">subject1.onNext(1)</span><br><span class="line">subject1.onNext(1)</span><br><span class="line">subject1.onCompleted()</span><br><span class="line">replay.accept(subject2)</span><br><span class="line">subject2.onNext(2)</span><br><span class="line">结果：</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h4 id="6-连接操作符"><a href="#6-连接操作符" class="headerlink" title="6 连接操作符"></a>6 连接操作符</h4><p>有订阅时不会立刻开始发送事件消息，只有当调用connect()之后才会开始发送消息<br>可以让所有订阅者订阅后，才开始发送事件消息，保证所有订阅者能接收到事件消息</p>
<p>对DispatchTime扩展 方便使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension DispatchTime: ExpressibleByIntegerLiteral &#123;</span><br><span class="line">    public init(integerLiteral value: Int) &#123;</span><br><span class="line">        self &#x3D; DispatchTime.now() + .seconds(value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extension DispatchTime: ExpressibleByFloatLiteral &#123;</span><br><span class="line">    public init(floatLiteral value: Double) &#123;</span><br><span class="line">        self &#x3D; DispatchTime.now() + .milliseconds(Int(value * 1000))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加延迟执行方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func delay(_ delay: Double, clousure: @escaping () -&gt; Void) &#123;</span><br><span class="line">    DispatchQueue.main.asyncAfter(deadline: DispatchTime(floatLiteral: delay)) &#123;</span><br><span class="line">        clousure()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-1-publish"><a href="#6-1-publish" class="headerlink" title="6.1 publish"></a>6.1 publish</h5><p>将正常序列转换成一个可连接序列，序列不会立刻发送事件，只有调用connect后才会开始</p>
<p>普通序列的样例<br>第一个订阅者订阅后每1秒接收一个值，第二个订阅者5秒后才收到第一个值0，所以两个订阅者接收到的值是不同步的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let interval &#x3D; Observable&lt;Int&gt;.interval(DispatchTimeInterval.seconds(1), scheduler: MainScheduler.instance)</span><br><span class="line">_ &#x3D; interval.subscribe(onNext: &#123; print(&quot;订阅1：\($0)&quot;) &#125;)</span><br><span class="line">delay(5) &#123;</span><br><span class="line">    _ &#x3D; interval.subscribe(onNext: &#123; print(&quot;订阅2：\($0)&quot;) &#125;)</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">订阅1：0</span><br><span class="line">订阅1：1</span><br><span class="line">订阅1：2</span><br><span class="line">订阅1：3</span><br><span class="line">订阅1：4</span><br><span class="line">订阅1：5</span><br><span class="line">订阅2：0 &#x2F;&#x2F;不同步</span><br><span class="line">订阅1：6</span><br><span class="line">订阅2：1</span><br></pre></td></tr></table></figure>

<p>使用publish</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let interval &#x3D; Observable&lt;Int&gt;.interval(DispatchTimeInterval.seconds(1), scheduler: MainScheduler.instance).publish()</span><br><span class="line">&#x2F;&#x2F;第一个订阅者（立刻开始订阅）</span><br><span class="line">_ &#x3D; interval.subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">&#x2F;&#x2F;相当于把事件推迟2秒</span><br><span class="line">delay(2) &#123;</span><br><span class="line">    _ &#x3D; interval.connect()</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;第2个订阅者 延迟5秒开始订阅</span><br><span class="line">delay(5) &#123;</span><br><span class="line">    _ &#x3D; interval.subscribe(onNext: &#123;print(&quot;订阅2 \($0)&quot;)&#125;)</span><br><span class="line">&#125;</span><br><span class="line">结果：&#x2F;&#x2F;输出同步</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">订阅2 2</span><br><span class="line">3</span><br><span class="line">订阅2 3</span><br><span class="line">4</span><br><span class="line">订阅2 4</span><br><span class="line">5</span><br><span class="line">订阅2 5</span><br></pre></td></tr></table></figure>

<h5 id="6-2-relay"><a href="#6-2-relay" class="headerlink" title="6.2 relay"></a>6.2 relay</h5><p>和publish一样<br>不同在于，新订阅者还能收到订阅之前的事件消息，由bufferSize决定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let interval &#x3D; Observable&lt;Int&gt;.interval(DispatchTimeInterval.seconds(1), scheduler: MainScheduler.instance).replay(3)</span><br><span class="line">_ &#x3D; interval.subscribe(onNext: &#123;print(&quot;订阅1 \($0)&quot;)&#125;)</span><br><span class="line">&#x2F;&#x2F;相当于把事件推迟2秒</span><br><span class="line">delay(2) &#123;</span><br><span class="line">    _ &#x3D; interval.connect()</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;第2个订阅者 延迟5秒开始订阅</span><br><span class="line">delay(5) &#123;</span><br><span class="line">    _ &#x3D; interval.subscribe(onNext: &#123;print(&quot;订阅2 \($0)&quot;)&#125;)</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">订阅1 0</span><br><span class="line">订阅1 1</span><br><span class="line">订阅2 0</span><br><span class="line">订阅2 1</span><br><span class="line">订阅1 2</span><br><span class="line">订阅2 2</span><br><span class="line">订阅1 3</span><br><span class="line">订阅2 3</span><br><span class="line">订阅1 4</span><br><span class="line">订阅2 4</span><br></pre></td></tr></table></figure>

<h5 id="6-3-multicast"><a href="#6-3-multicast" class="headerlink" title="6.3 multicast"></a>6.3 multicast</h5><p>同样是将序列转换成一个可连接序列<br>还可以传入一个subject，每当序列发送事件都会触发这个subject的发送</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let subject &#x3D; PublishSubject&lt;Int&gt;()</span><br><span class="line">_ &#x3D; subject.subscribe(onNext: &#123;print(&quot;subject \($0)&quot;)&#125;)</span><br><span class="line"></span><br><span class="line">let interval &#x3D; Observable&lt;Int&gt;.interval(DispatchTimeInterval.seconds(1), scheduler: MainScheduler.instance).multicast(subject)</span><br><span class="line">_ &#x3D; interval.subscribe(onNext: &#123;print(&quot;订阅1 \($0)&quot;)&#125;)</span><br><span class="line">&#x2F;&#x2F;相当于把事件推迟2秒</span><br><span class="line">delay(2) &#123;</span><br><span class="line">    _ &#x3D; interval.connect()</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;第2个订阅者 延迟5秒开始订阅</span><br><span class="line">delay(5) &#123;</span><br><span class="line">    _ &#x3D; interval.subscribe(onNext: &#123;print(&quot;订阅2 \($0)&quot;)&#125;)</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">subject 0</span><br><span class="line">订阅1 0</span><br><span class="line">subject 1</span><br><span class="line">订阅1 1</span><br><span class="line">subject 2</span><br><span class="line">订阅1 2</span><br><span class="line">订阅2 2</span><br><span class="line">subject 3</span><br><span class="line">订阅1 3</span><br><span class="line">订阅2 3</span><br><span class="line">subject 4</span><br><span class="line">订阅1 4</span><br><span class="line">订阅2 4</span><br></pre></td></tr></table></figure>

<h5 id="6-4-refCount"><a href="#6-4-refCount" class="headerlink" title="6.4 refCount"></a>6.4 refCount</h5><p>可以将可被连接的observable转换为普通observable<br>可自动连接和断开可连接的observable，第一个观察者对可连接的observable订阅时，底层的observable将被自动连接，最后一个观察者离开时，底层的observable将自动断开连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let interval &#x3D; Observable&lt;Int&gt;.interval(DispatchTimeInterval.seconds(1), scheduler: MainScheduler.instance).publish().refCount()</span><br></pre></td></tr></table></figure>

<h5 id="6-5-share-relay"><a href="#6-5-share-relay" class="headerlink" title="6.5 share(relay:)"></a>6.5 share(relay:)</h5><p>使观察者共享源observable，并且缓存最新的n个元素，将这些元素直接发送给新的观察者<br>是replay和refCount组合</p>
<h4 id="7-其它操作符"><a href="#7-其它操作符" class="headerlink" title="7 其它操作符"></a>7 其它操作符</h4><h5 id="7-1-delay"><a href="#7-1-delay" class="headerlink" title="7.1 delay"></a>7.1 delay</h5><p>将observable所有元素拖延一段时间后发送出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">    .delay(DispatchTimeInterval.seconds(3), scheduler: MainScheduler.instance)</span><br><span class="line">.subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="10-2-delaySubscription"><a href="#10-2-delaySubscription" class="headerlink" title="10.2 delaySubscription"></a>10.2 delaySubscription</h5><p>进行延时订阅，经过设定时间后，才对observable订阅</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">    .delaySubscription(DispatchTimeInterval.seconds(3), scheduler: MainScheduler.instance)</span><br><span class="line">.subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="7-3-materialize"><a href="#7-3-materialize" class="headerlink" title="7.3 materialize"></a>7.3 materialize</h5><p>可将序列产生的事件，转换成元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">  .materialize()</span><br><span class="line">  .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">  .disposed(by: disposeBag)</span><br><span class="line">结果：</span><br><span class="line">next(1)</span><br><span class="line">next(2)</span><br><span class="line">next(3)</span><br><span class="line">completed</span><br></pre></td></tr></table></figure>

<h5 id="7-4-dematerialize"><a href="#7-4-dematerialize" class="headerlink" title="7.4 dematerialize"></a>7.4 dematerialize</h5><p>和materialize相反，将materialize转换后的元素还原</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable.of(1, 2, 3)</span><br><span class="line">  .materialize()</span><br><span class="line">  .dematerialize()</span><br><span class="line">  .subscribe(onNext: &#123;print($0)&#125;)</span><br><span class="line">  .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h5 id="7-5-timeout"><a href="#7-5-timeout" class="headerlink" title="7.5 timeout"></a>7.5 timeout</h5><p>设置超时时间，源observable规定时间内没发出元素，就产生一个超时的error</p>
<h5 id="7-6-using"><a href="#7-6-using" class="headerlink" title="7.6 using"></a>7.6 using</h5><p>使用using创建observable时，同时会创建一个可被清除的资源，一旦observable终止，那这资源就被清除了</p>
<p><a href="https://www.hangge.com/blog/cache/detail_1922.html">RxSwift hangge.com</a></p>
]]></content>
  </entry>
  <entry>
    <title>dyld加载流程</title>
    <url>/2020/12/07/dyld%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h4><ul>
<li>库：编译好的二进制文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">源文件 -&gt; 预编译 -&gt; 编译 -&gt; 汇编 -&gt; 链接 -&gt; 可执行文件</span><br></pre></td></tr></table></figure>

<p><code>源文件</code>：.h、 .m、 .cpp 等文件</p>
<p><code>预编译</code>：替换宏、删除注释，产生 <code>.i</code> 文件</p>
<p><code>编译</code>：编译高级语言代码成汇编底层代码，生成汇编代码文件 <code>.s</code></p>
<p><code>汇编</code>：将汇编代码转变成机器可执行的指令 <code>.o</code></p>
<p><code>链接</code>：将引用的静态库与汇编生成的目标文件 <code>.o</code> 一起打包生成可执行文件</p>
<h4 id="动态库、静态库"><a href="#动态库、静态库" class="headerlink" title="动态库、静态库"></a>动态库、静态库</h4><ul>
<li>静态库 .a、 .lib</li>
</ul>
<p>在链接阶段，将汇编生成的目标文件.o与引用的库，一起链接打包到可执行文件</p>
<p>缺点：静态库会有两份，导致目标程序体积增大（编译时会直接拷贝一份，复制到目标程序里）</p>
<p>优点：编译完后，库文件就没有用了，目标程序没有外部依赖，可以直接运行</p>
<ul>
<li>动态库 .so</li>
</ul>
<p>编译时并不会链接到目标程序，只会存储指向动态库的引用，程序运行时才被载入</p>
<p>优点：多次使用共享内存，减少打包APP的体积</p>
<h4 id="dyld"><a href="#dyld" class="headerlink" title="dyld"></a>dyld</h4><p><code>dyld</code> ：动态库链接器，负责加载程序和程序依赖的动态库，内核读取 <code>Mach-O</code> 文件后，将读取内容交给 <code>dyld</code> 加载，<code>dyld</code> 加载完毕后才会执行 <code>main</code> 函数</p>
<p><code>dyld</code> 在系统中以一个用户态的可执行文件形式存在，一般应用程序会在 <code>Mach-O</code> 文件部分指定一个 <code>LC_LOAD_DYLINKER</code> 的加载命令，此加载命令指定了 <code>dyld</code> 的路径，通常默认值是 <code>/usr/lib/dyld</code></p>
<p>新建项目，在 <code>main</code> 函数中打断点，通过 <code>bt</code> 查看调用栈，看到 <code>App</code> 启动后会执行 <code>libdyld.dylib</code> 的 <code>start</code> 操作，这边调用栈的信息比较少</p>
<p><img src="/2020/12/07/dyld%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/%E5%90%AF%E5%8A%A8main%E6%96%AD%E7%82%B9.jpg" alt="启动main断点"></p>
<p>继续在  <code>ViewController</code> 中重写 <code>load</code> 方法 ，<code>load</code> 方法打断点，通过 <code>bt</code> 查看调用栈，发现一个 <code>_dyld_start</code> 的调用</p>
<p><img src="/2020/12/07/dyld%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/%E5%90%AF%E5%8A%A8load%E6%96%AD%E7%82%B9.jpg" alt="启动load断点"></p>
<p><code>dyld</code> 源码中搜索 <code>_dyld_start</code> ，可以在 <code>dyldStartup.s</code> 文件中找到 <code>_dyld_start</code> 的汇编实现，文件中按照 <code>i386</code>、<code>x86_64</code>、<code>arm64</code>、<code>arm</code> 不同架构做了逻辑处理</p>
<p>查看 <code>arm64</code> 架构下汇编源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __arm64__</span></span><br><span class="line">	.text</span><br><span class="line">	.align <span class="number">2</span></span><br><span class="line">	.globl __dyld_start</span><br><span class="line">__dyld_start:</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">// call dyldbootstrap::start(app_mh, argc, argv, dyld_mh, &amp;startGlue)</span></span><br><span class="line">	bl	__ZN13dyldbootstrap5startEPKN5dyld311MachOLoadedEiPPKcS3_Pm</span><br><span class="line">	...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __arm64__</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>找到关键部分代码，看到 <code>bl</code> 跳转指令，看注释信息，这边会调用 <code>dyldbootstrap::start</code> </p>
<h4 id="dyldbootstrap-start"><a href="#dyldbootstrap-start" class="headerlink" title="dyldbootstrap::start"></a>dyldbootstrap::start</h4><p>【1】<code>dyldbootstrap::start</code></p>
<p>源码中搜索 <code>dyldbootstrap</code> 命名空间的 <code>start</code> 方法，这是 <code>dyld</code> 的启动函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uintptr_t</span> <span class="title">start</span><span class="params">(<span class="keyword">const</span> dyld3::MachOLoaded* appsMachHeader, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[],</span></span></span><br><span class="line"><span class="function"><span class="params">				<span class="keyword">const</span> dyld3::MachOLoaded* dyldsMachHeader, <span class="keyword">uintptr_t</span>* startGlue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Emit kdebug tracepoint to indicate dyld bootstrap has started &lt;rdar://46878536&gt;</span></span><br><span class="line">    dyld3::kdebug_trace_dyld_marker(DBG_DYLD_TIMING_BOOTSTRAP_START, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// if kernel had to slide dyld, we need to fix up load sensitive locations</span></span><br><span class="line">	<span class="comment">// we have to do this before using any global variables</span></span><br><span class="line">    rebaseDyld(dyldsMachHeader);</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="comment">// set up random value for stack canary</span></span><br><span class="line">	__guard_setup(apple);</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line">	<span class="comment">// now that we are done bootstrapping dyld, call dyld&#x27;s main</span></span><br><span class="line">	<span class="keyword">uintptr_t</span> appsSlide = appsMachHeader-&gt;getSlide();</span><br><span class="line">	<span class="keyword">return</span> dyld::_main((macho_header*)appsMachHeader, appsSlide, argc, argv, envp, apple, startGlue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>dyldbootstrap::start</code> 主要操作：</p>
<ol>
<li><p>调用 <code>rebaseDyld()</code> dyld 重定位</p>
</li>
<li><p><code>__guard_setup</code> 栈溢出保护</p>
</li>
<li><p><code>dyld::_main</code> 进入 <code>dyld</code> 的 <code>_main</code> 函数</p>
</li>
</ol>
<h4 id="dyld-main"><a href="#dyld-main" class="headerlink" title="dyld::_main"></a>dyld::_main</h4><p>【2】<code>dyld::_main</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Entry point for dyld.  The kernel loads dyld and jumps to __dyld_start which</span></span><br><span class="line"><span class="comment">// sets up some registers and call this function.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Returns address of main() in target program which __dyld_start jumps to</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">uintptr_t</span></span><br><span class="line">_main(<span class="keyword">const</span> macho_header* mainExecutableMH, <span class="keyword">uintptr_t</span> mainExecutableSlide, </span><br><span class="line">		<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[], <span class="keyword">const</span> <span class="keyword">char</span>* envp[], <span class="keyword">const</span> <span class="keyword">char</span>* apple[], </span><br><span class="line">		<span class="keyword">uintptr_t</span>* startGlue)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">//【1】初始化程序运行环境</span></span><br><span class="line">    <span class="comment">// Grab the cdHash of the main executable from the environment</span></span><br><span class="line">	<span class="keyword">uint8_t</span> mainExecutableCDHashBuffer[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">uint8_t</span>* mainExecutableCDHash = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">if</span> ( hexToBytes(_simple_getenv(apple, <span class="string">&quot;executable_cdhash&quot;</span>), <span class="number">40</span>, mainExecutableCDHashBuffer) )</span><br><span class="line">		mainExecutableCDHash = mainExecutableCDHashBuffer;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="keyword">uintptr_t</span> result = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//获取主程序的macho_header结构以及主程序的slide偏移值</span></span><br><span class="line">  <span class="comment">//保存执行文件头部，后续可以根据头部访问其他信息</span></span><br><span class="line">	sMainExecutableMachHeader = mainExecutableMH;</span><br><span class="line">	sMainExecutableSlide = mainExecutableSlide;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	CRSetCrashLogMessage(<span class="string">&quot;dyld: launch started&quot;</span>);</span><br><span class="line">	<span class="comment">//设置上下文信息</span></span><br><span class="line">	setContext(mainExecutableMH, argc, argv, envp, apple);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Pickup the pointer to the exec path.</span></span><br><span class="line">	<span class="comment">//获取可执行文件路径</span></span><br><span class="line">	sExecPath = _simple_getenv(apple, <span class="string">&quot;executable_path&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// &lt;rdar://problem/13868260&gt; Remove interim apple[0] transition code from dyld</span></span><br><span class="line">	<span class="keyword">if</span> (!sExecPath) sExecPath = apple[<span class="number">0</span>];</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取进程名称</span></span><br><span class="line">	<span class="comment">// Remember short name of process for later logging</span></span><br><span class="line">	sExecShortName = ::<span class="built_in">strrchr</span>(sExecPath, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span> ( sExecShortName != <span class="literal">NULL</span> )</span><br><span class="line">		++sExecShortName;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		sExecShortName = sExecPath;</span><br><span class="line">	</span><br><span class="line">	  <span class="comment">//配置进程受限模式</span></span><br><span class="line">    configureProcessRestrictions(mainExecutableMH, envp);</span><br><span class="line">	...</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//检查环境变量配置</span></span><br><span class="line">		checkEnvironmentVariables(envp);</span><br><span class="line">    <span class="comment">//如果 DYLD_FALLBACK 为nil，将其设置为默认值</span></span><br><span class="line">		defaultUninitializedFallbackPaths(envp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//如果设置了 DYLD_PRINT_OPTS 环境变量，则打印参数</span></span><br><span class="line">	<span class="keyword">if</span> ( sEnv.DYLD_PRINT_OPTS )</span><br><span class="line">		printOptions(argv);</span><br><span class="line">  <span class="comment">//如果设置了 DYLD_PRINT_ENV 环境变量，则打印环境变量</span></span><br><span class="line">	<span class="keyword">if</span> ( sEnv.DYLD_PRINT_ENV ) </span><br><span class="line">		printEnvironmentVariables(envp);</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="comment">//读取Mach-O文件的header，获取当前程序架构信息</span></span><br><span class="line">	getHostInfo(mainExecutableMH, mainExecutableSlide);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// load shared cache</span></span><br><span class="line">	<span class="comment">//【2】加载共享缓存 shared cache</span></span><br><span class="line">  <span class="comment">//检查共享缓存是否开启 iOS中必须开启</span></span><br><span class="line">	checkSharedRegionDisable((dyld3::MachOLoaded*)mainExecutableMH, mainExecutableSlide);</span><br><span class="line">	<span class="keyword">if</span> ( gLinkContext.sharedRegionMode != ImageLoader::kDontUseSharedRegion ) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> TARGET_OS_SIMULATOR</span></span><br><span class="line">		<span class="keyword">if</span> ( sSharedCacheOverrideDir)</span><br><span class="line">      <span class="comment">//将共享缓存映射到共享区域</span></span><br><span class="line">			mapSharedCache();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">		mapSharedCache();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// add dyld itself to UUID list</span></span><br><span class="line">		addDyldImageToUUIDList();</span><br><span class="line">		...</span><br><span class="line">		CRSetCrashLogMessage(sLoadingCrashMessage);</span><br><span class="line">		<span class="comment">// instantiate ImageLoader for main executable</span></span><br><span class="line">		<span class="comment">//【3】实例化主程序，并赋值给ImageLoader::LinkContext</span></span><br><span class="line">    <span class="comment">//加载可执行文件并生成一个ImageLoader实例对象</span></span><br><span class="line">		sMainExecutable = instantiateFromLoadedImage(mainExecutableMH, mainExecutableSlide, sExecPath);</span><br><span class="line">		gLinkContext.mainExecutable = sMainExecutable;</span><br><span class="line">		gLinkContext.mainExecutableCodeSigned = hasCodeSignatureLoadCommand(mainExecutableMH);</span><br><span class="line">		...</span><br><span class="line"></span><br><span class="line">		<span class="comment">// load any inserted libraries</span></span><br><span class="line">		<span class="comment">//【4】加载插入的动态库（加载所有 DYLD_INSERT_LIBRARIES 指定的库）</span></span><br><span class="line">		<span class="keyword">if</span>	( sEnv.DYLD_INSERT_LIBRARIES != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">      <span class="comment">//遍历 DYLD_INSERT_LIBRARIES 环境变量</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span>* lib = sEnv.DYLD_INSERT_LIBRARIES; *lib != <span class="literal">NULL</span>; ++lib) </span><br><span class="line">				loadInsertedDylib(*lib);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// record count of inserted libraries so that a flat search will look at </span></span><br><span class="line">		<span class="comment">// inserted libraries, then main, then others.</span></span><br><span class="line">		sInsertedDylibCount = sAllImages.size()<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// link main executable</span></span><br><span class="line">		<span class="comment">//【5】链接主程序</span></span><br><span class="line">		gLinkContext.linkingMainExecutable = <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SUPPORT_ACCELERATE_TABLES</span></span><br><span class="line">		<span class="keyword">if</span> ( mainExcutableAlreadyRebased ) &#123;</span><br><span class="line">			<span class="comment">// previous link() on main executable has already adjusted its internal pointers for ASLR</span></span><br><span class="line">			<span class="comment">// work around that by rebasing by inverse amount</span></span><br><span class="line">			sMainExecutable-&gt;rebase(gLinkContext, -mainExecutableSlide);</span><br><span class="line">		&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">		link(sMainExecutable, sEnv.DYLD_BIND_AT_LAUNCH, <span class="literal">true</span>, ImageLoader::RPathChain(<span class="literal">NULL</span>, <span class="literal">NULL</span>), <span class="number">-1</span>);</span><br><span class="line">		sMainExecutable-&gt;setNeverUnloadRecursive();</span><br><span class="line">		<span class="keyword">if</span> ( sMainExecutable-&gt;forceFlat() ) &#123;</span><br><span class="line">			gLinkContext.bindFlat = <span class="literal">true</span>;</span><br><span class="line">			gLinkContext.prebindUsage = ImageLoader::kUseNoPrebinding;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//【6】链接插入的动态库</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// link any inserted libraries</span></span><br><span class="line">		<span class="comment">// do this after linking main executable so that any dylibs pulled in by inserted </span></span><br><span class="line">		<span class="comment">// dylibs (e.g. libSystem) will not be in front of dylibs the program uses</span></span><br><span class="line">		<span class="keyword">if</span> ( sInsertedDylibCount &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>; i &lt; sInsertedDylibCount; ++i) &#123;</span><br><span class="line">				ImageLoader* image = sAllImages[i+<span class="number">1</span>];</span><br><span class="line">				link(image, sEnv.DYLD_BIND_AT_LAUNCH, <span class="literal">true</span>, ImageLoader::RPathChain(<span class="literal">NULL</span>, <span class="literal">NULL</span>), <span class="number">-1</span>);</span><br><span class="line">				image-&gt;setNeverUnloadRecursive();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> ( gLinkContext.allowInterposing ) &#123;</span><br><span class="line">				<span class="comment">// only INSERTED libraries can interpose</span></span><br><span class="line">				<span class="comment">// register interposing info after all inserted libraries are bound so chaining works</span></span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>; i &lt; sInsertedDylibCount; ++i) &#123;</span><br><span class="line">					ImageLoader* image = sAllImages[i+<span class="number">1</span>];</span><br><span class="line">					image-&gt;registerInterposing(gLinkContext);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		...</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//【7】链接所有插入的image后，执行弱符号绑定</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// &lt;rdar://problem/12186933&gt; do weak binding only after all inserted images linked</span></span><br><span class="line">		sMainExecutable-&gt;weakBind(gLinkContext);</span><br><span class="line">		gLinkContext.linkingMainExecutable = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		sMainExecutable-&gt;recursiveMakeDataReadOnly(gLinkContext);</span><br><span class="line"></span><br><span class="line">		CRSetCrashLogMessage(<span class="string">&quot;dyld: launch, running initializers&quot;</span>);</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">if</span> SUPPORT_OLD_CRT_INITIALIZATION</span></span><br><span class="line">		<span class="comment">// Old way is to run initializers via a callback from crt1.o</span></span><br><span class="line">		<span class="keyword">if</span> ( ! gRunInitializersOldWay ) </span><br><span class="line">			initializeMainExecutable(); </span><br><span class="line">	<span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">		<span class="comment">//【8】执行所有初始化方法</span></span><br><span class="line">		<span class="comment">// run all initializers</span></span><br><span class="line">		initializeMainExecutable(); </span><br><span class="line">	<span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">		...</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//【9】查找主程序的入口并返回</span></span><br><span class="line">			<span class="comment">// find entry point for main executable</span></span><br><span class="line">			result = (<span class="keyword">uintptr_t</span>)sMainExecutable-&gt;getEntryFromLC_MAIN();</span><br><span class="line">			<span class="keyword">if</span> ( result != <span class="number">0</span> ) &#123;</span><br><span class="line">				<span class="comment">// main executable uses LC_MAIN, we need to use helper in libdyld to call into main()</span></span><br><span class="line">				<span class="keyword">if</span> ( (gLibSystemHelpers != <span class="literal">NULL</span>) &amp;&amp; (gLibSystemHelpers-&gt;version &gt;= <span class="number">9</span>) )</span><br><span class="line">					*startGlue = (<span class="keyword">uintptr_t</span>)gLibSystemHelpers-&gt;startGlueToCallExit;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					halt(<span class="string">&quot;libdyld.dylib support not present for LC_MAIN&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// main executable uses LC_UNIXTHREAD, dyld needs to let &quot;start&quot; in program set up for main()</span></span><br><span class="line">				result = (<span class="keyword">uintptr_t</span>)sMainExecutable-&gt;getEntryFromLC_UNIXTHREAD();</span><br><span class="line">				*startGlue = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="dyld-加载流程"><a href="#dyld-加载流程" class="headerlink" title="dyld 加载流程"></a><code>dyld</code> 加载流程</h4><p><code>dyld</code> 的加载流程主要包括以下 9 个步骤：</p>
<ol>
<li>主程序运行环境初始化，获取当前运行架构</li>
<li>加载共享缓存，检查共享缓存是否映射到共享区域</li>
<li>加载可执行文件，生成一个 <code>ImageLoader</code> 实例对象</li>
<li>加载插入的动态库</li>
<li>链接主程序</li>
<li>链接动态库</li>
<li>弱符号绑定</li>
<li>执行初始化方法</li>
<li>寻找程序入口 <code>LC_MAIN</code></li>
</ol>
<ul>
<li>分析第 8 步</li>
</ul>
<h4 id="initializeMainExecutable-执行初始化方法"><a href="#initializeMainExecutable-执行初始化方法" class="headerlink" title="initializeMainExecutable 执行初始化方法"></a>initializeMainExecutable 执行初始化方法</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initializeMainExecutable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">//循环遍历，对插入的 dylib 调用 runInitializers 方法进行初始化</span></span><br><span class="line">	<span class="comment">// run initialzers for any inserted dylibs</span></span><br><span class="line">	ImageLoader::InitializerTimingList initializerTimes[allImagesCount()];</span><br><span class="line">	initializerTimes[<span class="number">0</span>].count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">size_t</span> rootCount = sImageRoots.size();</span><br><span class="line">	<span class="keyword">if</span> ( rootCount &gt; <span class="number">1</span> ) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">1</span>; i &lt; rootCount; ++i) &#123;</span><br><span class="line">			sImageRoots[i]-&gt;runInitializers(gLinkContext, initializerTimes[<span class="number">0</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//主程序调用 runInitializers 方法初始化</span></span><br><span class="line">	<span class="comment">// run initializers for main executable and everything it brings up </span></span><br><span class="line">	sMainExecutable-&gt;runInitializers(gLinkContext, initializerTimes[<span class="number">0</span>]);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>runInitializers</code>  内部调用了 <code>processInitializers</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ImageLoader::runInitializers</span><span class="params">(<span class="keyword">const</span> LinkContext&amp; context, InitializerTimingList&amp; timingInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">	processInitializers(context, thisThread, timingInfo, up);</span><br><span class="line">	context.notifyBatch(dyld_image_state_initialized, <span class="literal">false</span>);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>processInitializers</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ImageLoader::processInitializers</span><span class="params">(<span class="keyword">const</span> LinkContext&amp; context, <span class="keyword">mach_port_t</span> thisThread, InitializerTimingList&amp; timingInfo, ImageLoader::UninitedUpwards&amp; images)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">// Calling recursive init on all images in images list, building a new list of</span></span><br><span class="line">	<span class="comment">// uninitialized upward dependencies.</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">uintptr_t</span> i=<span class="number">0</span>; i &lt; images.count; ++i) &#123;</span><br><span class="line">		images.imagesAndPaths[i].first-&gt;recursiveInitialization(context, thisThread, images.imagesAndPaths[i].second, timingInfo, ups);</span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对镜像列表调用 <code>recursiveInitialization</code> 递归初始化</p>
<p><code>recursiveInitialization</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ImageLoader::recursiveInitialization</span><span class="params">(<span class="keyword">const</span> LinkContext&amp; context, <span class="keyword">mach_port_t</span> this_thread, <span class="keyword">const</span> <span class="keyword">char</span>* pathToInitialize, InitializerTimingList&amp; timingInfo, UninitedUpwards&amp; uninitUps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">recursive_lock <span class="title">lock_info</span><span class="params">(this_thread)</span></span>;</span><br><span class="line">	recursiveSpinLock(lock_info); <span class="comment">//递归枷锁</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ( fState &lt; dyld_image_state_dependents_initialized<span class="number">-1</span> ) &#123;</span><br><span class="line">		<span class="keyword">uint8_t</span> oldState = fState;</span><br><span class="line">		<span class="comment">// break cycles</span></span><br><span class="line">		fState = dyld_image_state_dependents_initialized<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// initialize lower level libraries first</span></span><br><span class="line">			...</span><br><span class="line"></span><br><span class="line">			<span class="comment">// let objc know we are about to initialize this image 让objc知道将要初始化镜像</span></span><br><span class="line">			<span class="keyword">uint64_t</span> t1 = mach_absolute_time();</span><br><span class="line">			fState = dyld_image_state_dependents_initialized;</span><br><span class="line">			oldState = fState;</span><br><span class="line">			context.notifySingle(dyld_image_state_dependents_initialized, <span class="keyword">this</span>, &amp;timingInfo);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// initialize this image 初始化镜像</span></span><br><span class="line">			<span class="keyword">bool</span> hasInitializers = <span class="keyword">this</span>-&gt;doInitialization(context);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// let anyone know we finished initializing this image 镜像初始化完成</span></span><br><span class="line">			fState = dyld_image_state_initialized;</span><br><span class="line">			oldState = fState;</span><br><span class="line">			context.notifySingle(dyld_image_state_initialized, <span class="keyword">this</span>, <span class="literal">NULL</span>);</span><br><span class="line">			...</span><br><span class="line">		&#125;</span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line">	recursiveSpinUnLock();<span class="comment">//递归解锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>initializeMainExecutable</code> -&gt; <code>runInitializers</code> -&gt; <code>processInitializers</code> -&gt; <code>recursiveInitialization</code> -&gt; <code>notifySingle</code></p>
<h5 id="doInitialization"><a href="#doInitialization" class="headerlink" title="doInitialization"></a>doInitialization</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ImageLoaderMachO::doInitialization</span><span class="params">(<span class="keyword">const</span> LinkContext&amp; context)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CRSetCrashLogMessage2(<span class="keyword">this</span>-&gt;getPath());</span><br><span class="line"></span><br><span class="line">	<span class="comment">// mach-o has -init and static initializers</span></span><br><span class="line">	doImageInit(context);</span><br><span class="line">	doModInitFunctions(context);<span class="comment">//加载c++构造函数</span></span><br><span class="line">	</span><br><span class="line">	CRSetCrashLogMessage2(<span class="literal">NULL</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> (fHasDashInit || fHasInitializers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c++构造方法，在 <code>mach-O</code>的 <code>data段</code> 中对应 <code>__mod_init_func</code></p>
<h5 id="notifySingle"><a href="#notifySingle" class="headerlink" title="notifySingle"></a>notifySingle</h5><p>继续在 <code>dyld2.cpp</code> 中找到 <code>notifySingle</code> 实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">notifySingle</span><span class="params">(dyld_image_states state, <span class="keyword">const</span> ImageLoader* image, ImageLoader::InitializerTimingList* timingInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">if</span> ( (state == dyld_image_state_dependents_initialized) &amp;&amp; (sNotifyObjCInit != <span class="literal">NULL</span>) &amp;&amp; image-&gt;notifyObjC() ) &#123;</span><br><span class="line">		<span class="keyword">uint64_t</span> t0 = mach_absolute_time();</span><br><span class="line">		<span class="function">dyld3::ScopedTimer <span class="title">timer</span><span class="params">(DBG_DYLD_TIMING_OBJC_INIT, (<span class="keyword">uint64_t</span>)image-&gt;machHeader(), <span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">		(*sNotifyObjCInit)(image-&gt;getRealPath(), image-&gt;machHeader());</span><br><span class="line">		<span class="keyword">uint64_t</span> t1 = mach_absolute_time();</span><br><span class="line">		<span class="keyword">uint64_t</span> t2 = mach_absolute_time();</span><br><span class="line">		<span class="keyword">uint64_t</span> timeInObjC = t1-t0;</span><br><span class="line">		<span class="keyword">uint64_t</span> emptyTime = (t2-t1)*<span class="number">100</span>;</span><br><span class="line">		<span class="keyword">if</span> ( (timeInObjC &gt; emptyTime) &amp;&amp; (timingInfo != <span class="literal">NULL</span>) ) &#123;</span><br><span class="line">			timingInfo-&gt;addTime(image-&gt;getShortName(), timeInObjC);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关键函数指针 <code>sNotifyObjCInit</code> ，当前文件搜索 <code>sNotifyObjCInit</code> 找到赋值的地方</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerObjCNotifiers</span><span class="params">(_dyld_objc_notify_mapped mapped, _dyld_objc_notify_init init, _dyld_objc_notify_unmapped unmapped)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// record functions to call</span></span><br><span class="line">	sNotifyObjCMapped	= mapped;</span><br><span class="line">	sNotifyObjCInit		= init;</span><br><span class="line">	sNotifyObjCUnmapped = unmapped;</span><br></pre></td></tr></table></figure>

<p>再全局搜索 <code>registerObjCNotifiers</code> 查找到调用的地方</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _dyld_objc_notify_register(_dyld_objc_notify_mapped    mapped,</span><br><span class="line">                                _dyld_objc_notify_init      init,</span><br><span class="line">                                _dyld_objc_notify_unmapped  unmapped)</span><br><span class="line">&#123;</span><br><span class="line">	dyld::registerObjCNotifiers(mapped, init, unmapped);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>什么时候调用了 <code>_dyld_objc_notify_register</code> ?</p>
<p>通过添加 <code>_dyld_objc_notify_register</code> 符号断点，运行后发现调用者是 <code>_objc_init</code>， <code>_objc_init</code> 函数是 <code>Runtime</code> 的入口函数</p>
<p><img src="/2020/12/07/dyld%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/notifi_register.jpg" alt="notifi_register"></p>
<h4 id="objc-init"><a href="#objc-init" class="headerlink" title="_objc_init"></a>_objc_init</h4><p><code>_objc_init</code> 需要在 <code>libobjc</code> 源码中查看</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Called by libSystem BEFORE library initialization time</span></span><br><span class="line"><span class="keyword">void</span> _objc_init(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> initialized = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (initialized) <span class="keyword">return</span>;</span><br><span class="line">    initialized = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// fixme defer initialization until an objc-using image is found?</span></span><br><span class="line">    environ_init();</span><br><span class="line">    tls_init();</span><br><span class="line">    static_init();</span><br><span class="line">    runtime_init();</span><br><span class="line">    exception_init();</span><br><span class="line">    cache_init();</span><br><span class="line">    _imp_implementationWithBlock_init();</span><br><span class="line">    <span class="comment">//注册回调函数</span></span><br><span class="line">    _dyld_objc_notify_register(&amp;map_images, load_images, unmap_image);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __OBJC2__</span></span><br><span class="line">    didCallDyldNotifyRegister = <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看函数注释意思，<code>_objc_init</code> 的调用时机是在其他动态库初始化之前，由 <code>libSystem</code> 系统库调用</p>
<p>所以 <code>dyld</code> 加载的第 8 步，在初始化所有动态库和主程序之前，就注册了 <code>load_images</code> 的回调，Runtime调用 <code>load_images</code> 加载完所有 <code>load</code> 方法之后，就回调到 <code>dyld::_main</code> 的 <code>initializeMainExecutable()</code> </p>
<p><img src="/2020/12/07/dyld%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/dyld.png" alt="dyld"></p>
<h4 id="共享缓存"><a href="#共享缓存" class="headerlink" title="共享缓存"></a>共享缓存</h4><p><code>dyld</code> 加载时，为了优化程序启动，启用了共享缓存技术。共享缓存会在进程启动时被 <code>dyld</code> 映射到内存中，之后，当任何 <code>Mach-O</code> 镜像加载时，<code>dyld</code> 首先会检查该 <code>Mach-O</code> 镜像与所需的动态库是否在共享缓存中，如果存在，则直接将它在共享内存中的内存地址映射到进程的内存地址空间。在程序依赖的系统动态库很多的情况下，这种做法对程序启动性能是有明显提升的。</p>
<p><a href="https://opensource.apple.com/tarballs/dyld/">dyld750.6下载</a></p>
<p><a href="https://www.jianshu.com/p/e383013ca846">dyld 流程分析</a></p>
<p><a href="https://www.jianshu.com/p/db765ff4e36a">dyld加载流程</a></p>
]]></content>
  </entry>
  <entry>
    <title>《Flutter实战第二版》七：功能型组件</title>
    <url>/2022/01/18/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%B8%83%EF%BC%9A%E5%8A%9F%E8%83%BD%E5%9E%8B%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="7-功能型组件"><a href="#7-功能型组件" class="headerlink" title="7 功能型组件"></a>7 功能型组件</h3><p>功能型组件指的是不影响UI布局及外观的组件，通常具有一定的功能，如事件监听、数据存储等</p>
<p>FocusScope（焦点控制住）、PageStorage（数据存储）、NotificationListener（事件监听）都属于功能型组件</p>
<h4 id="7-1-导航返回拦截-WillPopScope"><a href="#7-1-导航返回拦截-WillPopScope" class="headerlink" title="7.1 导航返回拦截 WillPopScope"></a>7.1 导航返回拦截 WillPopScope</h4><p>Flutter 可以通过 willPopScope 来实现返回按钮拦截</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> WillPopScope(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">required</span> WillPopCallback onWillPop,</span><br><span class="line">  <span class="keyword">required</span> Widget child</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>onWillPop 当用户点击返回按钮时被调用，该回调需要返回一个 Future 对象</p>
<ul>
<li>示例</li>
</ul>
<p>为防止用户误触返回键退出，拦截返回事件。用户 1 秒内点击两次返回按钮时，则退出；如果间隔超过 1 秒则不退出，并重新计时</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WillPopScopeTestRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">WillPopScopeTestRoute</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">DateTime?</span> _lastPressedAt; <span class="comment">//上次点击时间</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> WillPopScope(</span><br><span class="line">      onWillPop: () <span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_lastPressedAt == <span class="keyword">null</span> ||</span><br><span class="line">            <span class="built_in">DateTime</span>.now().difference(_lastPressedAt!) &gt; <span class="built_in">Duration</span>(seconds: <span class="number">1</span>)) &#123;</span><br><span class="line">          <span class="comment">//两次点击间隔超过1秒则重新计时</span></span><br><span class="line">          _lastPressedAt = <span class="built_in">DateTime</span>.now();</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      child: Container(</span><br><span class="line">        alignment: Alignment.center,</span><br><span class="line">        child: Text(<span class="string">&quot;1秒内连续按两次返回键退出&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-2-数据共享-InheritedWidget"><a href="#7-2-数据共享-InheritedWidget" class="headerlink" title="7.2 数据共享 InheritedWidget"></a>7.2 数据共享 InheritedWidget</h4><p>InheritedWidget 提供了一种在 widget 树中从上到下共享数据的方式。比如在根 widget 中通过 InheritedWidget 共享了一个数据，那么我们可以在任意子 widget 中获取共享的数据</p>
<p>Flutter SDK 中通过 InheritedWidget 来共享主题和 Locale 信息</p>
<h5 id="didChangeDependencies"><a href="#didChangeDependencies" class="headerlink" title="didChangeDependencies"></a>didChangeDependencies</h5><p>State 对象有个 didChangeDependencies 回调，它会在依赖发生变化时被 Flutter 框架调用，</p>
<p>这个依赖指的是，子 widget 是否使用了父 widget 中 InheritedWidget 的数据，</p>
<p>这种机制可以使子组件在依赖的 InheritedWidget 变化时更新自身，如主题、语言等变化时，依赖他们的子 widget 的 didChangeDependencies 会被调用</p>
<ul>
<li>示例</li>
</ul>
<p>首先通过继承 InheritedWidget，将计数器点击次数保存在 ShareDataWidget 的 data 属性中</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShareDataWidget</span> <span class="keyword">extends</span> <span class="title">InheritedWidget</span> </span>&#123;</span><br><span class="line">  ShareDataWidget(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.data, <span class="comment">//需要在子树中共享的数据，保存点击次数</span></span><br><span class="line">    <span class="keyword">required</span> Widget child,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key, child: child);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> data;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义一个便捷方法，方便子树中的widget获取共享数据</span></span><br><span class="line">  <span class="keyword">static</span> ShareDataWidget? of(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> context.dependOnInheritedWidgetOfExactType&lt;ShareDataWidget&gt;();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//该回调决定当data发生变化时，是否通知子树中依赖data的Widget</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> updateShouldNotify(<span class="keyword">covariant</span> ShareDataWidget oldWidget) &#123;</span><br><span class="line">    <span class="keyword">return</span> oldWidget.data != data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后实现一个子组件 _TestWidget，在 build 方法中引用了 ShareDataWidget 中的数据，同时在 didChangeDependencies 回调中打印日志 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TestWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _TestWidget(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _TestWidgetState createState() =&gt; _TestWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TestWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">_TestWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//使用InheritedWidget中的共享数据</span></span><br><span class="line">    <span class="keyword">return</span> Text(ShareDataWidget.of(context)!.data.toString());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> didChangeDependencies() &#123;</span><br><span class="line">    <span class="keyword">super</span>.didChangeDependencies();</span><br><span class="line">    <span class="comment">//父或祖先widget中的InheritedWidget改变(updateShouldNotify返回true)时会被调用。</span></span><br><span class="line">    <span class="comment">//如果build中没有依赖InheritedWidget，则此回调不会被调用。</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Dependencies change&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后创建按钮，每点击一次就 ShareDataWidget 的值自增</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InheritedWidgetTestRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _InheritedWidgetTestRouteState createState() =&gt; _InheritedWidgetTestRouteState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_InheritedWidgetTestRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">InheritedWidgetTestRoute</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;标题&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: ShareDataWidget(<span class="comment">//使用ShareDataWidget</span></span><br><span class="line">          data: count,</span><br><span class="line">          child: Column(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">            children: [</span><br><span class="line">              Padding(</span><br><span class="line">                padding: EdgeInsets.only(bottom: <span class="number">20.0</span>),</span><br><span class="line">                child: _TestWidget(),<span class="comment">//子widget中依赖ShareDataWidget</span></span><br><span class="line">              ),</span><br><span class="line">              ElevatedButton(</span><br><span class="line">                	<span class="comment">//每点击一次，将count自增，然后重新build,ShareDataWidget的data将被更新  </span></span><br><span class="line">                  onPressed: () =&gt; setState(() &#123;</span><br><span class="line">                    ++count;</span><br><span class="line">                  &#125;),</span><br><span class="line">                  child: Text(<span class="string">&#x27;Increment&#x27;</span>)</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》七：功能型组件/WeChat82decdb61c34cabc1597ca20cba3581b.png" alt="WeChat82decdb61c34cabc1597ca20cba3581b" style="zoom:80%;" />

<p>每点击一次，计数器就会自增，控制台就会打印一句日志 flutter: Dependencies change，依赖变化后，其 didChangeDependencies 会被调用</p>
<p>如果 _TestWidget 的 build 方法中没有使用 ShareDataWidget 的数据，那么它的 didChangeDependencies 将不会被调用，因为它没有依赖 ShareDataWidget，即将上面改成 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="comment">//使用InheritedWidget中的共享数据</span></span><br><span class="line">  <span class="comment">//return Text(ShareDataWidget.of(context)!.data.toString());</span></span><br><span class="line">  retirn Text(<span class="string">&#x27;text&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>didChangeDependencies 中做什么</li>
</ul>
<p>一般子 widget 很少会重写此方法，因为依赖改变后 Flutter 也都会调用 build() 方法重新构建组件树。但是，如果需要在依赖改变后执行一些昂贵 的操作，比如网络请求，这时最好的方式是在此方法中执行，可以避免每次 build 都执行这些昂贵操作</p>
<h5 id="InheritedWidget"><a href="#InheritedWidget" class="headerlink" title="InheritedWidget"></a>InheritedWidget</h5><p>如果只想在 _TestWidgetState 中引用 ShareDataWidget 数据，但不希望在 ShareDataWidget 发生变化时调用 _TestWidgetState 的 didChangeDependencies</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个便捷方法，方便子树中的widget获取共享数据</span></span><br><span class="line"><span class="keyword">static</span> ShareDataWidget of(BuildContext context) &#123;</span><br><span class="line">  <span class="comment">//return context.dependOnInheritedWidgetOfExactType&lt;ShareDataWidget&gt;();</span></span><br><span class="line">  <span class="keyword">return</span> context.getElementForInheritedWidgetOfExactType&lt;ShareDataWidget&gt;().widget;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dependOnInheritedWidgetOfExactType 和 getElementForInheritedWidgetOfExactType 的区别是前者会注册依赖关系，后者不会。</p>
<p>调用 dependOnInheritedWidgetOfExactType 后，InheritedWidget 和依赖它的子孙组件关系便完成了注册，之后 InheritedWidget 发生变化，就会更新依赖它的子孙组件，也就会调用子孙组件的 didChangeDependencies 方法和 build 方法</p>
<h4 id="7-3-跨组件状态共享-Provider"><a href="#7-3-跨组件状态共享-Provider" class="headerlink" title="7.3 跨组件状态共享 Provider"></a>7.3 跨组件状态共享 Provider</h4><p>登录状态同步的示例</p>
<p>定义事件：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Event&#123;</span><br><span class="line">  login,</span><br><span class="line">  ... <span class="comment">//省略其它事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>登录页代码大致如下：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 登录状态改变后发布状态改变事件</span></span><br><span class="line">bus.emit(Event.login);</span><br></pre></td></tr></table></figure>

<p>依赖登录状态的页面：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> onLoginChanged(e)&#123;</span><br><span class="line">  <span class="comment">//登录状态变化处理逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> initState() &#123;</span><br><span class="line">  <span class="comment">//订阅登录状态改变事件</span></span><br><span class="line">  bus.<span class="keyword">on</span>(Event.login,onLogin);</span><br><span class="line">  <span class="keyword">super</span>.initState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> dispose() &#123;</span><br><span class="line">  <span class="comment">//取消订阅</span></span><br><span class="line">  bus.off(Event.login,onLogin);</span><br><span class="line">  <span class="keyword">super</span>.dispose();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过观察者模式来实现跨组件状态共享缺点：<br>必须显式定义各种事件，不好管理<br>订阅者必须显式注册状态改变回调，必须组件销毁时手动解绑回调以避免内存泄漏</p>
<p>InheritedWidget 的特性就是能绑定 InheritedWidget 与依赖它的子孙组件的依赖关系，且 <code> InheritedWidget 数据发生变化时，可以自动更新依赖的子孙组件</code> 。利用这个特性，我们可以将需要跨组件共享的状态保存在 InheritedWidget 中，然后在子组件中引用 InheritedWidget 即可</p>
<h5 id="7-3-1-Provider"><a href="#7-3-1-Provider" class="headerlink" title="7.3.1 Provider"></a>7.3.1 Provider</h5><p>实现一个最小功能的 Provider</p>
<p>首先需要一个保存共享的数据 InheritedWidget，由于具体业务数据不可预期，使用泛型，定义一个通用的 InheritedProvider 类，它继承自 InheritedWidget</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InHeritedProvider</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">InheritedWidget</span> </span>&#123;</span><br><span class="line">  InHeritedProvider(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.data,</span><br><span class="line">    <span class="keyword">required</span> Widget child,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(child: child);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> T data;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> updateShouldNotify(<span class="keyword">covariant</span> InHeritedProvider&lt;T&gt; oldWidget) &#123;</span><br><span class="line">    <span class="comment">//在此简单返回true，则每次更新都会调用依赖其的子孙节点的`didChangeDependencies`。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>数据发生变化怎么通知？</li>
</ul>
<p>Flutter 提供了 ChangeNotifier 类，继承自 Listenable 定义大致如下</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeNotifier</span> <span class="keyword">implements</span> <span class="title">Listenable</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span> listeners=[];</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> addListener(VoidCallback listener) &#123;</span><br><span class="line">     <span class="comment">//添加监听器</span></span><br><span class="line">     listeners.add(listener);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> removeListener(VoidCallback listener) &#123;</span><br><span class="line">    <span class="comment">//移除监听器</span></span><br><span class="line">    listeners.remove(listener);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> notifyListeners() &#123;</span><br><span class="line">    <span class="comment">//通知所有监听器，触发监听器回调 </span></span><br><span class="line">    listeners.forEach((item)=&gt;item());</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  ... <span class="comment">//省略无关代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，将要共享的状态放到一个 Model 类中，让它继承自 ChangeNotifier，这样当共享状态发生改变时，只需调用 notifyListeners() 来通知订阅者，然后订阅者重新构建 InheritedProvider</p>
<p>//TODO：。。。。</p>
<h4 id="7-4-颜色和主题"><a href="#7-4-颜色和主题" class="headerlink" title="7.4 颜色和主题"></a>7.4 颜色和主题</h4><h5 id="7-4-1-颜色"><a href="#7-4-1-颜色" class="headerlink" title="7.4.1 颜色"></a>7.4.1 颜色</h5><ul>
<li>MaterialColor</li>
</ul>
<p>MaterialColor 包含一种颜色的10个级别的渐变色，通过 [] 运算符的索引值来代表颜色的深度，有效的索引有：50，100，200，.. 800，900 数值越大，颜色越深，默认值为索引等于500的颜色</p>
<p>可以根据 shadeXX 来获取具体索引的颜色 Color.blue.shade50 </p>
<img src="《Flutter实战第二版》七：功能型组件/7-5.6f1c5012.jpeg" alt="7-5.6f1c5012" style="zoom:80%;" />

<h5 id="7-4-2-Theme"><a href="#7-4-2-Theme" class="headerlink" title="7.4.2 Theme"></a>7.4.2 Theme</h5><ul>
<li>ThemeData</li>
</ul>
<p>ThemeData 用于保存 Material 组件库的主题数据</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ThemeData(&#123;</span><br><span class="line">  Brightness? brightness, <span class="comment">//深色还是浅色</span></span><br><span class="line">  MaterialColor? primarySwatch, <span class="comment">//主题颜色样本，见下面介绍</span></span><br><span class="line">  Color? primaryColor, <span class="comment">//主色，决定导航栏颜色</span></span><br><span class="line">  Color? cardColor, <span class="comment">//卡片颜色</span></span><br><span class="line">  Color? dividerColor, <span class="comment">//分割线颜色</span></span><br><span class="line">  ButtonThemeData buttonTheme, <span class="comment">//按钮主题</span></span><br><span class="line">  Color dialogBackgroundColor,<span class="comment">//对话框背景颜色</span></span><br><span class="line">  <span class="built_in">String</span> fontFamily, <span class="comment">//文字字体</span></span><br><span class="line">  TextTheme textTheme,<span class="comment">// 字体主题，包括标题、body等文字样式</span></span><br><span class="line">  IconThemeData iconTheme, <span class="comment">// Icon的默认样式</span></span><br><span class="line">  TargetPlatform platform, <span class="comment">//指定平台，应用特定平台控件风格</span></span><br><span class="line">  ColorScheme? colorScheme,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>路由换肤示例</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThemeTestRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ThemeTestRouteState createState() =&gt; _ThemeTestRouteState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ThemeTestRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ThemeTestRoute</span>&gt; </span>&#123;</span><br><span class="line">  MaterialColor _themeColor = Colors.teal; <span class="comment">//当前路由主题色</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    ThemeData themeData = Theme.of(context);</span><br><span class="line">    <span class="keyword">return</span> Theme(</span><br><span class="line">      data: ThemeData(</span><br><span class="line">          primarySwatch: _themeColor, <span class="comment">//用于导航栏、FloatingActionButton的背景色等</span></span><br><span class="line">          iconTheme: IconThemeData(color: _themeColor) <span class="comment">//用于Icon颜色</span></span><br><span class="line">      ),</span><br><span class="line">      child: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(<span class="string">&quot;主题测试&quot;</span>)),</span><br><span class="line">        body: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            <span class="comment">//第一行Icon使用主题中的iconTheme</span></span><br><span class="line">            Row(</span><br><span class="line">                mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  Icon(Icons.favorite),</span><br><span class="line">                  Icon(Icons.airport_shuttle),</span><br><span class="line">                  Text(<span class="string">&quot;  颜色跟随主题&quot;</span>)</span><br><span class="line">                ]</span><br><span class="line">            ),</span><br><span class="line">            <span class="comment">//为第二行Icon自定义颜色（固定为黑色)</span></span><br><span class="line">            Theme(</span><br><span class="line">              data: themeData.copyWith(</span><br><span class="line">                iconTheme: themeData.iconTheme.copyWith(</span><br><span class="line">                    color: Colors.black</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              child: Row(</span><br><span class="line">                  mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">                  children: &lt;Widget&gt;[</span><br><span class="line">                    Icon(Icons.favorite),</span><br><span class="line">                    Icon(Icons.airport_shuttle),</span><br><span class="line">                    Text(<span class="string">&quot;  颜色固定黑色&quot;</span>)</span><br><span class="line">                  ]</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        floatingActionButton: FloatingActionButton(</span><br><span class="line">            onPressed: () =&gt;  <span class="comment">//切换主题</span></span><br><span class="line">                setState(() =&gt;</span><br><span class="line">                _themeColor =</span><br><span class="line">                _themeColor == Colors.teal ? Colors.blue : Colors.teal</span><br><span class="line">                ),</span><br><span class="line">            child: Icon(Icons.palette)</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》七：功能型组件/WeChat480a699489c96afae7c2834566a2792f.png" alt="WeChat480a699489c96afae7c2834566a2792f" style="zoom:80%;" />

<p>可以通过局部主题覆盖全局主题</p>
<h4 id="7-5-ValueListenableBuilder"><a href="#7-5-ValueListenableBuilder" class="headerlink" title="7.5 ValueListenableBuilder"></a>7.5 ValueListenableBuilder</h4><p>ValueListenableBuilder 功能是监听一个数据源，如果数据源发生变化，则会重新执行其 builder</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ValueListenableBuilder(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">this</span>.valueListenable, <span class="comment">// 数据源，类型为ValueListenable&lt;T&gt;</span></span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">this</span>.builder, <span class="comment">// builder</span></span><br><span class="line">  <span class="keyword">this</span>.child,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>valueListenable：类型为 <code>ValueListenable&lt;T&gt;</code> ，表示一个可监听的数据源</p>
<p>builder：数据源发生变化通知时，会重新调用 builder 重新 builder 子组件树</p>
<p>child：builder 中每次都会重新构建整个子组件树，如果子组件树中有一些不变的部分，可以传递给 child</p>
<p>点击器示例</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValueListenableRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ValueListenableRoute(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ValueListenableRouteState createState() =&gt; _ValueListenableRouteState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ValueListenableRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ValueListenableRoute</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个ValueNotifier，当数字变化时会通知 ValueListenableBuilder</span></span><br><span class="line">  <span class="keyword">final</span> ValueNotifier&lt;<span class="built_in">int</span>&gt; _counter = ValueNotifier&lt;<span class="built_in">int</span>&gt;(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">double</span> textScaleFactor = <span class="number">1.5</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;build&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;ValueListenableBuilder 测试&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: ValueListenableBuilder(</span><br><span class="line">            valueListenable: _counter,</span><br><span class="line">            builder: (BuildContext context, <span class="built_in">int</span> value, Widget? child) &#123;</span><br><span class="line">              <span class="comment">// builder 方法只会在 _counter 变化时被调用</span></span><br><span class="line">              <span class="keyword">return</span> Row(</span><br><span class="line">                mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">                children: [</span><br><span class="line">                  Text(<span class="string">&#x27;点击了<span class="subst">$value</span>次&#x27;</span>, textScaleFactor: textScaleFactor,)</span><br><span class="line">                ],</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        <span class="comment">// 点击后值 +1，触发 ValueListenableBuilder 重新构建</span></span><br><span class="line">        onPressed: () =&gt; _counter.value += <span class="number">1</span>,</span><br><span class="line">        child: Icon(Icons.add),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》七：功能型组件/WeChata5da268a632103c4c715f5e27552825c.png" alt="WeChata5da268a632103c4c715f5e27552825c" style="zoom:80%;" />

<p>控制台只在打开时 build 了一次，点击 + 按钮时只是 ValueListenableBuilder 重新构建了子组件树，整个页面没有重新 build；尽可能让 ValueListenableBuilder 只构建依赖数据源的 widget，这样的话可以缩小重新构建的范围</p>
<p>ValueListenableBuilder 和数据流向无关，可以实现任意数据流向的数据共享，实践中 ValueListenableBuilder 的拆分粒度应该尽可能的细</p>
<h4 id="7-6-异步-UI-更新"><a href="#7-6-异步-UI-更新" class="headerlink" title="7.6 异步 UI 更新"></a>7.6 异步 UI 更新</h4><h5 id="7-6-1-FutureBuilder"><a href="#7-6-1-FutureBuilder" class="headerlink" title="7.6.1 FutureBuilder"></a>7.6.1 FutureBuilder</h5><p>FutureBuilder 会依赖一个 Future，会根据所依赖的 Future 的状态来动态构建自身</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">FutureBuilder(&#123;</span><br><span class="line">  <span class="keyword">this</span>.future,</span><br><span class="line">  <span class="keyword">this</span>.initialData,</span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">this</span>.builder,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>future：FutureBuilder 依赖的 future，通常是一个异步耗时的任务</p>
<p>initialData：初始数据，用户设置默认数据</p>
<p>builder：widget 构建器，该构建器会在 Future 执行的不同阶段被多次调用</p>
<p>签名如下</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> AsyncWidgetBuilder&lt;T&gt; = Widget <span class="built_in">Function</span>(BuildContext context, AsyncSnapshot&lt;T&gt; snapshot);</span><br></pre></td></tr></table></figure>

<p>snapshot 会包含当前异步任务的状态信息及结果信息，<br>snapshot.connectionState 获取异步任务的状态信息<br>snapshot.hasError 判断异步任务是否有错误等</p>
<ul>
<li>示例</li>
</ul>
<p>实现一个路由从网上获取数据，获取数据时弹一个加载框；获取结束时，如果成功则显示获取到的数据，失败则显示错误</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_DemoState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Demo</span>&gt; </span>&#123;</span><br><span class="line">  </span><br><span class="line">  Future&lt;<span class="built_in">String</span>&gt; mockNetworkData() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Future.delayed(<span class="built_in">Duration</span>(seconds: <span class="number">2</span>), () =&gt; <span class="string">&quot;我是从互联网上获取的数据&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;标题&#x27;</span>)),</span><br><span class="line">      body: Container(</span><br><span class="line">        child: FutureBuilder(</span><br><span class="line">          future: mockNetworkData(),</span><br><span class="line">          builder: (BuildContext context, AsyncSnapshot snapshot) &#123;</span><br><span class="line">            <span class="comment">// 请求已结束</span></span><br><span class="line">            <span class="keyword">if</span> (snapshot.connectionState == ConnectionState.done) &#123;</span><br><span class="line">              <span class="keyword">if</span> (snapshot.hasError) &#123;</span><br><span class="line">                <span class="comment">// 请求失败，显示错误</span></span><br><span class="line">                <span class="keyword">return</span> Text(<span class="string">&quot;Error: <span class="subst">$&#123;snapshot.error&#125;</span>&quot;</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 请求成功，显示数据</span></span><br><span class="line">                <span class="keyword">return</span> Text(<span class="string">&quot;Contents: <span class="subst">$&#123;snapshot.data&#125;</span>&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 请求未结束，显示loading</span></span><br><span class="line">              <span class="keyword">return</span> CircularProgressIndicator();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》七：功能型组件/WeChatbfb98a9a1f4c131945af42218a1998ee.png" alt="WeChatbfb98a9a1f4c131945af42218a1998ee" style="zoom: 67%;" />

<p>connectionState 异步任务状态是个枚举</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> ConnectionState &#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">当前没有异步任务，比如[FutureBuilder]的[future]为null时</span></span></span><br><span class="line">  none,</span><br><span class="line">  <span class="comment">/// <span class="markdown">异步任务处于等待状态</span></span></span><br><span class="line">  waiting,</span><br><span class="line">  <span class="comment">/// <span class="markdown">Stream处于激活状态（流上已经有数据传递了），对于FutureBuilder没有该状态。</span></span></span><br><span class="line">  active,</span><br><span class="line">  <span class="comment">/// <span class="markdown">异步任务已经终止.</span></span></span><br><span class="line">  done,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConnectionState.active 只有在 StreamBuilder 中才会出现</p>
<h5 id="7-6-2-StreamBuilder"><a href="#7-6-2-StreamBuilder" class="headerlink" title="7.6.2 StreamBuilder"></a>7.6.2 StreamBuilder</h5><p>Dart 中 Stream 也是用于接收异步事件数据，和 Future 不同的是，它可以接收多个异步操作的结果，常用于会多次读取数据的异步任务场景，如网络内容下载，文件读写</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">StreamBuilder(&#123;</span><br><span class="line">  <span class="keyword">this</span>.initialData,</span><br><span class="line">  Stream&lt;T&gt; stream,</span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">this</span>.builder,</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>

<p>和 FutureBuilder 有一点不同，前者需要一个 future，后者需要一个 stream</p>
<ul>
<li>示例</li>
</ul>
<p>创建一个计时器，每隔1秒，计数加1，这里使用 Stream 来实现每隔一秒生成一个数字</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Stream&lt;<span class="built_in">int</span>&gt; counter() &#123;</span><br><span class="line">  <span class="keyword">return</span> Stream.periodic(<span class="built_in">Duration</span>(seconds: <span class="number">1</span>), (i) &#123;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">   <span class="keyword">return</span> StreamBuilder&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">     stream: counter(), <span class="comment">//</span></span><br><span class="line">     <span class="comment">//initialData: ,// a Stream&lt;int&gt; or null</span></span><br><span class="line">     builder: (BuildContext context, AsyncSnapshot&lt;<span class="built_in">int</span>&gt; snapshot) &#123;</span><br><span class="line">       <span class="keyword">if</span> (snapshot.hasError)</span><br><span class="line">         <span class="keyword">return</span> Text(<span class="string">&#x27;Error: <span class="subst">$&#123;snapshot.error&#125;</span>&#x27;</span>);</span><br><span class="line">       <span class="keyword">switch</span> (snapshot.connectionState) &#123;</span><br><span class="line">         <span class="keyword">case</span> ConnectionState.none:</span><br><span class="line">           <span class="keyword">return</span> Text(<span class="string">&#x27;没有Stream&#x27;</span>);</span><br><span class="line">         <span class="keyword">case</span> ConnectionState.waiting:</span><br><span class="line">           <span class="keyword">return</span> Text(<span class="string">&#x27;等待数据...&#x27;</span>);</span><br><span class="line">         <span class="keyword">case</span> ConnectionState.active:</span><br><span class="line">           <span class="keyword">return</span> Text(<span class="string">&#x27;active: <span class="subst">$&#123;snapshot.data&#125;</span>&#x27;</span>);</span><br><span class="line">         <span class="keyword">case</span> ConnectionState.done:</span><br><span class="line">           <span class="keyword">return</span> Text(<span class="string">&#x27;Stream 已关闭&#x27;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// unreachable</span></span><br><span class="line">     &#125;,</span><br><span class="line">   );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实战中，凡是UI会依赖多个异步数据而发生变化的场景都可以使用 StreamBuilder</p>
<h4 id="7-7-对话框详解"><a href="#7-7-对话框详解" class="headerlink" title="7.7 对话框详解"></a>7.7 对话框详解</h4><h5 id="7-7-1-使用对话框"><a href="#7-7-1-使用对话框" class="headerlink" title="7.7.1 使用对话框"></a>7.7.1 使用对话框</h5><ul>
<li>AlertDialog</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> AlertDialog(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  <span class="keyword">this</span>.title, <span class="comment">//对话框标题组件</span></span><br><span class="line">  <span class="keyword">this</span>.titlePadding, <span class="comment">// 标题填充</span></span><br><span class="line">  <span class="keyword">this</span>.titleTextStyle, <span class="comment">//标题文本样式</span></span><br><span class="line">  <span class="keyword">this</span>.content, <span class="comment">// 对话框内容组件</span></span><br><span class="line">  <span class="keyword">this</span>.contentPadding = <span class="keyword">const</span> EdgeInsets.fromLTRB(<span class="number">24.0</span>, <span class="number">20.0</span>, <span class="number">24.0</span>, <span class="number">24.0</span>), <span class="comment">//内容的填充</span></span><br><span class="line">  <span class="keyword">this</span>.contentTextStyle,<span class="comment">// 内容文本样式</span></span><br><span class="line">  <span class="keyword">this</span>.actions, <span class="comment">// 对话框操作按钮组</span></span><br><span class="line">  <span class="keyword">this</span>.backgroundColor, <span class="comment">// 对话框背景色</span></span><br><span class="line">  <span class="keyword">this</span>.elevation,<span class="comment">// 对话框的阴影</span></span><br><span class="line">  <span class="keyword">this</span>.semanticLabel, <span class="comment">//对话框语义化标签(用于读屏软件)</span></span><br><span class="line">  <span class="keyword">this</span>.shape, <span class="comment">// 对话框外形</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _DemoState createState() =&gt; _DemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_DemoState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Demo</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//弹出对话框</span></span><br><span class="line">  Future&lt;<span class="built_in">bool?</span>&gt; showDialog1() &#123;</span><br><span class="line">    <span class="keyword">return</span> showDialog&lt;<span class="built_in">bool</span>&gt;(</span><br><span class="line">        context: context,</span><br><span class="line">        builder: (context) &#123;</span><br><span class="line">          <span class="keyword">return</span> AlertDialog(</span><br><span class="line">            title: Text(<span class="string">&#x27;提示&#x27;</span>),</span><br><span class="line">            content: Text(<span class="string">&#x27;您确定要删除当前文件吗?&#x27;</span>),</span><br><span class="line">            actions: [</span><br><span class="line">              TextButton(</span><br><span class="line">                  onPressed: () =&gt; Navigator.of(context).pop(),<span class="comment">//关闭对话框</span></span><br><span class="line">                  child: Text(<span class="string">&#x27;取消&#x27;</span>)</span><br><span class="line">              ),</span><br><span class="line">              TextButton(</span><br><span class="line">                  onPressed: ()&#123;</span><br><span class="line">                    <span class="comment">//关闭对话框并返回true</span></span><br><span class="line">                    Navigator.of(context).pop(<span class="keyword">true</span>);</span><br><span class="line">                  &#125;,<span class="comment">// ... 执行删除操作</span></span><br><span class="line">                  child: Text(<span class="string">&#x27;删除&#x27;</span>)</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          );</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;标题&#x27;</span>)),</span><br><span class="line">      body: Container(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: [</span><br><span class="line">            ElevatedButton(</span><br><span class="line">                onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">                  <span class="comment">//弹出对话框并等待其关闭</span></span><br><span class="line">                  <span class="built_in">bool?</span> delete = <span class="keyword">await</span> showDialog1();</span><br><span class="line">                  <span class="keyword">if</span> (delete == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;取消删除&quot;</span>);</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;已确认删除&quot;</span>);</span><br><span class="line">                    <span class="comment">//... 删除文件</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                child: Text(<span class="string">&#x27;对话框1&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》七：功能型组件/WeChat27864c95f0c816238363a69b4f71ff06.png" alt="WeChat27864c95f0c816238363a69b4f71ff06" style="zoom:80%;" />

<p>通过 Navigator.of(context).pop(…) 方法来关闭对话框，都可以返回一个结果数据</p>
<ul>
<li>弹出对话框 showDialog()</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Future&lt;T?&gt; showDialog&lt;T&gt;(&#123;</span><br><span class="line">  <span class="keyword">required</span> BuildContext context,</span><br><span class="line">  <span class="keyword">required</span> WidgetBuilder builder, <span class="comment">// 对话框UI的builder</span></span><br><span class="line">  <span class="built_in">bool</span> barrierDismissible = <span class="keyword">true</span>, <span class="comment">//点击对话框barrier(遮罩)时是否关闭它</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>SimpleDialog</li>
</ul>
<p>会展示一个列表，用于列表选择的场景</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Future&lt;<span class="keyword">void</span>&gt; changeLanguage() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">int?</span> i = <span class="keyword">await</span> showDialog(</span><br><span class="line">      context: context,</span><br><span class="line">      builder: (context) &#123;</span><br><span class="line">        <span class="keyword">return</span> SimpleDialog(</span><br><span class="line">          title: Text(<span class="string">&#x27;请选择语言&#x27;</span>),</span><br><span class="line">          children: [</span><br><span class="line">            SimpleDialogOption(</span><br><span class="line">              child: Padding(</span><br><span class="line">                  padding: EdgeInsets.symmetric(vertical: <span class="number">6</span>),</span><br><span class="line">                  child: Text(<span class="string">&#x27;中文简体&#x27;</span>),</span><br><span class="line">              ),</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                Navigator.pop(context, <span class="number">1</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">            SimpleDialogOption(</span><br><span class="line">              child: Padding(</span><br><span class="line">                padding: EdgeInsets.symmetric(vertical: <span class="number">6</span>),</span><br><span class="line">                child: Text(<span class="string">&#x27;美国英语&#x27;</span>),</span><br><span class="line">              ),</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                Navigator.pop(context, <span class="number">2</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (i != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;选择了：<span class="subst">$&#123;i == <span class="number">1</span> ? <span class="string">&quot;中文简体&quot;</span> : <span class="string">&quot;美国英语&quot;</span>&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>列表项组件使用了 SimpleDialogOption 包装了，相当于一个 TextButton，只不过按钮是左对齐的，并且 padding 较小</p>
<ul>
<li>Dialog</li>
</ul>
<p>如果对话框需要嵌套一个 ListView 可以直接使用 Dialog 类</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Future&lt;<span class="keyword">void</span>&gt; showListDialog() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">int?</span> index = <span class="keyword">await</span> showDialog(</span><br><span class="line">      context: context,</span><br><span class="line">      builder: (context) &#123;</span><br><span class="line">        <span class="keyword">var</span> child = Column(</span><br><span class="line">          children: [</span><br><span class="line">            ListTile(title: Text(<span class="string">&#x27;请选择&#x27;</span>)),</span><br><span class="line">            Expanded(</span><br><span class="line">                child: ListView.builder(</span><br><span class="line">                    itemCount: <span class="number">30</span>,</span><br><span class="line">                    itemBuilder: (context, index) &#123;</span><br><span class="line">                      <span class="keyword">return</span> ListTile(</span><br><span class="line">                        title: Text(<span class="string">&quot;<span class="subst">$index</span>&quot;</span>),</span><br><span class="line">                        onTap: () =&gt; Navigator.of(context).pop(index),</span><br><span class="line">                      );</span><br><span class="line">                    &#125;,</span><br><span class="line">                ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> Dialog(child: child);</span><br><span class="line">      &#125;,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (index != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;点击了：<span class="subst">$index</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》七：功能型组件/WeChatf310a19612106d0766aaec0ad0fde4d9.png" alt="WeChatf310a19612106d0766aaec0ad0fde4d9" style="zoom: 67%;" />

<h5 id="7-7-2-对话框打开动画及遮罩"><a href="#7-7-2-对话框打开动画及遮罩" class="headerlink" title="7.7.2 对话框打开动画及遮罩"></a>7.7.2 对话框打开动画及遮罩</h5><p>如何打开一个普通风格的对话框（非 Material风格）？Flutter 提供了一个 showGeneralDialog 方法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Future&lt;T?&gt; showGeneralDialog&lt;T&gt;(&#123;</span><br><span class="line">  <span class="keyword">required</span> BuildContext context,</span><br><span class="line">  <span class="keyword">required</span> RoutePageBuilder pageBuilder, <span class="comment">//构建对话框内部UI</span></span><br><span class="line">  <span class="built_in">bool</span> barrierDismissible = <span class="keyword">false</span>, <span class="comment">//点击遮罩是否关闭对话框</span></span><br><span class="line">  <span class="built_in">String?</span> barrierLabel, <span class="comment">// 语义化标签(用于读屏软件)</span></span><br><span class="line">  Color barrierColor = <span class="keyword">const</span> Color(<span class="number">0x80000000</span>), <span class="comment">// 遮罩颜色</span></span><br><span class="line">  <span class="built_in">Duration</span> transitionDuration = <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">200</span>), <span class="comment">// 对话框打开/关闭的动画时长</span></span><br><span class="line">  RouteTransitionsBuilder? transitionBuilder, <span class="comment">// 对话框打开/关闭的动画</span></span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>showDialog 方法正是 showGeneralDialog 的一个封装，定制了 Material 风格对话框的遮罩颜色和动画</p>
<ul>
<li>封装一个 showCustomDialog 方法</li>
</ul>
<h5 id="7-7-3-对话框实现原理"><a href="#7-7-3-对话框实现原理" class="headerlink" title="7.7.3 对话框实现原理"></a>7.7.3 对话框实现原理</h5><p>直接调用 Navigatio 的 push 方法打开了一个新的对话框路由 RawDialogRoute，然后返回了 push 的返回值，对话框实际上正是通过路由的形式打开的</p>
<h5 id="7-7-4-对话框状态管理"><a href="#7-7-4-对话框状态管理" class="headerlink" title="7.7.4 对话框状态管理"></a>7.7.4 对话框状态管理</h5><h5 id="7-7-5-其它类型的对话框"><a href="#7-7-5-其它类型的对话框" class="headerlink" title="7.7.5 其它类型的对话框"></a>7.7.5 其它类型的对话框</h5><ul>
<li>Loading 框</li>
<li>日历选择</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>《Flutter实战第二版》三：基础组件</title>
    <url>/2022/01/18/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%B8%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="3-基础组件"><a href="#3-基础组件" class="headerlink" title="3 基础组件"></a>3 基础组件</h3><h4 id="3-1-文本及样式"><a href="#3-1-文本及样式" class="headerlink" title="3.1 文本及样式"></a>3.1 文本及样式</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(home: TextDemo()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextDemo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          children: [</span><br><span class="line">            Text(<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                color: Colors.blue,</span><br><span class="line">                fontSize: <span class="number">30</span>,</span><br><span class="line">                height: <span class="number">1.2</span>,</span><br><span class="line">                fontFamily: <span class="string">&#x27;Courier&#x27;</span>,</span><br><span class="line">                background: Paint()..color=Colors.yellow,</span><br><span class="line">                decoration: TextDecoration.underline,</span><br><span class="line">                decorationStyle: TextDecorationStyle.dashed,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            Text.rich(</span><br><span class="line">                TextSpan(children: [</span><br><span class="line">                  TextSpan(text: <span class="string">&#x27;Home: &#x27;</span>,</span><br><span class="line">                      style: TextStyle(fontSize: <span class="number">30</span>)</span><br><span class="line">                  ),</span><br><span class="line">                  TextSpan(text: <span class="string">&#x27;//flutterchina.club&#x27;</span>,</span><br><span class="line">                      style: TextStyle(</span><br><span class="line">                          color: Colors.blue, fontSize: <span class="number">30</span>),</span><br><span class="line">                  ),</span><br><span class="line">                ])</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%B8%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/WeChat312b40c64293529cd163ce4550ee7471.png?lastModify=1642479994" alt="WeChat312b40c64293529cd163ce4550ee7471"></p>
<h5 id="3-1-1-Text"><a href="#3-1-1-Text" class="headerlink" title="3.1.1 Text"></a>3.1.1 Text</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">body: Container(</span><br><span class="line">  child: Column(</span><br><span class="line">    children: [</span><br><span class="line">      Text(<span class="string">&#x27;Hello world&#x27;</span>, textAlign: TextAlign.left),</span><br><span class="line">      Text(<span class="string">&#x27;Hello world I`m Jack&#x27;</span>*<span class="number">4</span>, maxLines: <span class="number">1</span>, overflow: TextOverflow.ellipsis),</span><br><span class="line">      Text(<span class="string">&#x27;Hello world&#x27;</span>, textScaleFactor: <span class="number">2</span>),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<ul>
<li>Text 的构造方法</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Text(<span class="keyword">this</span>.data, &#123;  <span class="comment">//Text显示的内容</span></span><br><span class="line">Key key,</span><br><span class="line"><span class="keyword">this</span>.style, <span class="comment">//Text显示的样式</span></span><br><span class="line"><span class="keyword">this</span>.textAlign,<span class="comment">//文本应该如何水平对齐,TextAlign.start,end 或者center</span></span><br><span class="line"><span class="keyword">this</span>.textDirection, <span class="comment">//文本方向,TextDirection.ltr\TextDirection.rtl</span></span><br><span class="line"><span class="keyword">this</span>.locale,</span><br><span class="line"><span class="keyword">this</span>.softWrap,  <span class="comment">//是否自动换行，若为false，文字将不考虑容器大小，单行显示，超出屏幕部分将默认截断处理</span></span><br><span class="line"><span class="keyword">this</span>.overflow, <span class="comment">//当文字超出屏幕的时候，如何处理,TextOverflow.clip(裁剪)\TextOverflow.fade(渐隐)\TextOverflow.ellipsis(省略号)</span></span><br><span class="line"><span class="keyword">this</span>.textScaleFactor, <span class="comment">//字体大小缩放因子，将字体设置成10.0，然后倍率为2，使用字体大小就是20</span></span><br><span class="line"><span class="keyword">this</span>.maxLines, <span class="comment">//最大行数设置</span></span><br><span class="line"><span class="keyword">this</span>.semanticsLabel,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="3-1-2-TextStyle"><a href="#3-1-2-TextStyle" class="headerlink" title="3.1.2 TextStyle"></a>3.1.2 TextStyle</h5><ul>
<li>TextStyle 构造方法</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TextStyle(&#123;</span><br><span class="line">    <span class="keyword">this</span>.inherit: <span class="keyword">true</span>,      <span class="comment">// 为false的时候不继承默认样式</span></span><br><span class="line">    <span class="keyword">this</span>.color,              <span class="comment">// 颜色 </span></span><br><span class="line">    <span class="keyword">this</span>.fontSize,           <span class="comment">// 字号</span></span><br><span class="line">    <span class="keyword">this</span>.fontWeight,         <span class="comment">// 字重，加粗也用这个字段  FontWeight.w700</span></span><br><span class="line">    <span class="keyword">this</span>.fontStyle,          <span class="comment">// FontStyle.normal  FontStyle.italic斜体</span></span><br><span class="line">    <span class="keyword">this</span>.letterSpacing,      <span class="comment">// 字符间距  就是单个字母或者汉字之间的间隔，可以是负数</span></span><br><span class="line">    <span class="keyword">this</span>.wordSpacing,        <span class="comment">// 字间距 句字之间的间距</span></span><br><span class="line">    <span class="keyword">this</span>.textBaseline,       <span class="comment">// 基线，两个值，字面意思是一个用来排字母的，一人用来排表意字的（类似中文）</span></span><br><span class="line">    <span class="keyword">this</span>.height,            <span class="comment">// 当用来Text控件上时，行高（会乘以fontSize,所以不以设置过大）</span></span><br><span class="line">    <span class="keyword">this</span>.decoration,        <span class="comment">// 添加上划线，下划线，删除线 </span></span><br><span class="line">    <span class="keyword">this</span>.decorationColor,   <span class="comment">// 划线的颜色</span></span><br><span class="line">    <span class="keyword">this</span>.decorationStyle,   <span class="comment">// 这个style可能控制画实线，虚线，两条线，点, 波浪线等</span></span><br><span class="line">    <span class="keyword">this</span>.debugLabel,</span><br><span class="line">    <span class="built_in">String</span> fontFamily,    <span class="comment">// 字体</span></span><br><span class="line">    <span class="built_in">String</span> package,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>



<h5 id="3-1-3-TextSpan"><a href="#3-1-3-TextSpan" class="headerlink" title="3.1.3 TextSpan"></a>3.1.3 TextSpan</h5><p>TextSpan 将 Text 内容的不同部分按照不同的样式显示</p>
<ul>
<li>TextSpan 的定义:</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TextSpan(&#123;</span><br><span class="line">   TextStyle style, </span><br><span class="line">   Sting text,</span><br><span class="line">   <span class="built_in">List</span>&lt;TextSpan&gt; children,</span><br><span class="line">   GestureRecognizer recognizer,</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<p>style 和 text 属性代表该文本的样式和内容，children 是 TextSpan 数组，也就是 TextSpan 可以包括其它 TextSpan，recognizer 用于文本片段上手势识别处理</p>
<h5 id="3-1-4-DefaultTextStyle"><a href="#3-1-4-DefaultTextStyle" class="headerlink" title="3.1.4 DefaultTextStyle"></a>3.1.4 DefaultTextStyle</h5><p>文本样式可以被默认继承（子类文本组件未指定具体样式可以使用 Widget 树中父级的默认样式）</p>
<p>DefaultTextStyle 用于设置默认文本样式</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextDemo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: DefaultTextStyle(</span><br><span class="line">          style: TextStyle(</span><br><span class="line">            color: Colors.red,</span><br><span class="line">            fontSize: <span class="number">20</span>,</span><br><span class="line">          ),</span><br><span class="line">          child: Column(</span><br><span class="line">            children: [</span><br><span class="line">              Text(<span class="string">&#x27;123&#x27;</span>),</span><br><span class="line">              Text(<span class="string">&#x27;456&#x27;</span>),</span><br><span class="line">              Text(<span class="string">&#x27;789&#x27;</span>, style: TextStyle(</span><br><span class="line">                  inherit: <span class="keyword">false</span>,</span><br><span class="line">                  color: Colors.grey)</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          )</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%B8%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/WeChatd910839e3ff49d0f3f1548df3adf920f.png?lastModify=1642479994" alt="WeChatd910839e3ff49d0f3f1548df3adf920f"></p>
<h5 id="3-1-5-字体"><a href="#3-1-5-字体" class="headerlink" title="3.1.5 字体"></a>3.1.5 字体</h5><p>pubspec.yaml 中声明</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">flutter:</span><br><span class="line">  fonts:</span><br><span class="line">    - family: Raleway</span><br><span class="line">      fonts:</span><br><span class="line">        - asset: assets/fonts/Raleway-Regular.ttf</span><br><span class="line">        - asset: assets/fonts/Raleway-Medium.ttf</span><br><span class="line">          weight: <span class="number">500</span></span><br><span class="line">        - asset: assets/fonts/Raleway-SemiBold.ttf</span><br><span class="line">          weight: <span class="number">600</span></span><br><span class="line">    - family: AbrilFatface</span><br><span class="line">      fonts:</span><br><span class="line">        - asset: assets/fonts/abrilfatface/AbrilFatface-Regular.ttf</span><br></pre></td></tr></table></figure>

<p>使用字体</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明文本样式</span></span><br><span class="line"><span class="keyword">const</span> textStyle = <span class="keyword">const</span> TextStyle(</span><br><span class="line">  fontFamily: <span class="string">&#x27;Raleway&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用文本样式</span></span><br><span class="line"><span class="keyword">var</span> buttonText = <span class="keyword">const</span> Text(</span><br><span class="line">  <span class="string">&quot;Use the font for this text&quot;</span>,</span><br><span class="line">  style: textStyle,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="3-2-按钮"><a href="#3-2-按钮" class="headerlink" title="3.2 按钮"></a>3.2 按钮</h4><p>Material 库中的按钮，按下时都还有水波纹动画，就是点击按钮上会出现水波纹扩展动画</p>
<p>有一个 onPressed 属性来设置点击回调</p>
<p><img src="/../../../../../../%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%B8%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/WeChata1d3c6be4375dfacab4bffe55cf60aa5.png" alt="WeChata1d3c6be4375dfacab4bffe55cf60aa5"></p>
<ul>
<li>ElevatedButton</li>
</ul>
<p>漂浮按钮，默认带阴影和灰色背景，按下后阴影会变大</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ElevatedButton(</span><br><span class="line">    onPressed: ()&#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;onPressed&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    child: Text(<span class="string">&#x27;normal&#x27;</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>TextButton</li>
</ul>
<p>文本按钮，默认背景透明不带阴影，按下后会有背景色</p>
<ul>
<li>OutlineButton</li>
</ul>
<p>默认有一个灰色边框，不带阴影背景透明，按下后边框颜色变亮，同时出现背景和阴影</p>
<p>构造方法：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> OutlineButton(&#123;</span><br><span class="line">   Key key,</span><br><span class="line">   <span class="meta">@required</span> VoidCallback onPressed,</span><br><span class="line">   ButtonTextTheme textTheme,  <span class="comment">//按钮上字体主题</span></span><br><span class="line">   Color textColor,  <span class="comment">//字体颜色</span></span><br><span class="line">   Color disabledTextColor, <span class="comment">//按钮禁用时候文字的颜色</span></span><br><span class="line">   Color color,  <span class="comment">//按钮背景颜色</span></span><br><span class="line">   Color highlightColor,<span class="comment">//点击或者toch控件高亮的时候显示在控件上面，水波纹下面的颜色</span></span><br><span class="line">   Color splashColor, <span class="comment">//水波纹的颜色</span></span><br><span class="line">   <span class="built_in">double</span> highlightElevation,<span class="comment">//高亮时候的阴影</span></span><br><span class="line">   <span class="keyword">this</span>.borderSide,<span class="comment">//按钮边框</span></span><br><span class="line">   <span class="keyword">this</span>.disabledBorderColor, <span class="comment">//按钮禁用时边框的颜色</span></span><br><span class="line">   <span class="keyword">this</span>.highlightedBorderColor,<span class="comment">//高亮时边框的颜色</span></span><br><span class="line">   EdgeInsetsGeometry padding,<span class="comment">//边距</span></span><br><span class="line">   ShapeBorder shape, <span class="comment">//设置shape</span></span><br><span class="line">   Clip clipBehavior = Clip.none,</span><br><span class="line">   Widget child,</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>

<p>设置圆角和边框颜色</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">OutlineButton(</span><br><span class="line"> borderSide: BorderSide(color: Colors.red),</span><br><span class="line"> shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(<span class="number">20</span>)),</span><br><span class="line"> child: Text(<span class="string">&#x27;normal&#x27;</span>),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<ul>
<li>IconButton</li>
</ul>
<p>可点击 Icon，默认没有背景点击后出现背景</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">IconButton(</span><br><span class="line">     onPressed: ()&#123;</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;onPressed&#x27;</span>);</span><br><span class="line">     &#125;,</span><br><span class="line">     icon: Icon(Icons.thumb_up),</span><br><span class="line"> )</span><br></pre></td></tr></table></figure>

<ul>
<li>带图标按钮</li>
</ul>
<p>ElevatedButton、OutlineButton、IconButton 都有一个 icon 构造函数，通过 icon 创建带图标按钮</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ElevatedButton.icon(</span><br><span class="line">   icon: Icon(Icons.send),</span><br><span class="line">   label: Text(<span class="string">&quot;发送&quot;</span>),</span><br><span class="line">   onPressed: _onPressed,</span><br><span class="line"> )</span><br></pre></td></tr></table></figure>

<h4 id="3-3-图片及ICON"><a href="#3-3-图片及ICON" class="headerlink" title="3.3 图片及ICON"></a>3.3 图片及ICON</h4><h5 id="3-3-1-图片"><a href="#3-3-1-图片" class="headerlink" title="3.3.1 图片"></a>3.3.1 图片</h5><ul>
<li>asset 中加载图片</li>
</ul>
<p>根目录创建一个 images 目录，avata.png 拷贝到目录</p>
<p>pubspec.yaml 中的 flutter 部分添加内容</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">assets:</span><br><span class="line">	- images/avatar.png</span><br><span class="line">也可以</span><br><span class="line">	- images/</span><br></pre></td></tr></table></figure>

<p>加载图片</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Image(image: AssetImage(<span class="string">&#x27;images/avatar.png&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>也提供了快捷构造函数 Image.asset</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Image.asset(<span class="string">&#x27;images/avatar.png&#x27;</span>, width: <span class="number">100</span>,)</span><br></pre></td></tr></table></figure>

<ul>
<li>网络加载图片</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Image(image: NetworkImage(<span class="string">&#x27;https://xxxx&#x27;</span>), width: <span class="number">100</span>,)</span><br><span class="line">Image.network(<span class="string">&#x27;https://xxxx&#x27;</span>, width: <span class="number">100.0</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>Image 参数</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Image(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">this</span>.width, <span class="comment">//图片的宽</span></span><br><span class="line">  <span class="keyword">this</span>.height, <span class="comment">//图片高度</span></span><br><span class="line">  <span class="keyword">this</span>.color, <span class="comment">//图片的混合色值</span></span><br><span class="line">  <span class="keyword">this</span>.colorBlendMode, <span class="comment">//混合模式</span></span><br><span class="line">  <span class="keyword">this</span>.fit,<span class="comment">//缩放模式</span></span><br><span class="line">  <span class="keyword">this</span>.alignment = Alignment.center, <span class="comment">//对齐方式</span></span><br><span class="line">  <span class="keyword">this</span>.repeat = ImageRepeat.noRepeat, <span class="comment">//重复方式</span></span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>width、height 设置图片宽高，不指定宽高时，图片会根据父容器的限制，尽可能显示原始大小，如果只设置一个，另一个属性会按比例缩放</p>
<p>fit：图片显示空间和图片大小不同时指定图片适应模式</p>
<p>fill 拉伸填充满显示空间，长宽比发生变化，图片会变形</p>
<p>cover 按图片长宽比放大后居中填充显示空间，图片不会变形，超出显示被裁剪</p>
<p>fit width 图片宽度缩放到显示空间宽度，高度按比例缩放，居中显示，图片不变形，超出显示被裁剪</p>
<p>fit height</p>
<p>none 没有适应策略，图片比显示空间达，则显示图片中间部分</p>
<p>repeat：图片大小小于显示空间时，指定图片重复规则</p>
<img src="《Flutter实战第二版》三：基础组件/WeChatfd803adaf46878bf208e18fb3907acc4.png" alt="WeChatfd803adaf46878bf208e18fb3907acc4" style="zoom:80%;" />

<h5 id="3-3-2-iconfont"><a href="#3-3-2-iconfont" class="headerlink" title="3.3.2 iconfont"></a>3.3.2 iconfont</h5><p>Flutter 默认包含了一套 Material Design 的字体图标，是将图标做成字体文件，通过指定不同字符显示不同图片</p>
<p>在 pubspec.yaml 中配置</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">flutter:</span><br><span class="line">  users-material-design: <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<p>Material Design 所有图标可以在官网查看 <a href="https://material.io/tools/icons/">https://material.io/tools/icons/</a></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> icons = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">// accessible: 0xe03e</span></span><br><span class="line">icons += <span class="string">&quot;\uE03e&quot;</span>;</span><br><span class="line"><span class="comment">// error:  0xe237</span></span><br><span class="line">icons += <span class="string">&quot; \uE237&quot;</span>;</span><br><span class="line"><span class="comment">// fingerprint: 0xe287</span></span><br><span class="line">icons += <span class="string">&quot; \uE287&quot;</span>;</span><br><span class="line"></span><br><span class="line">Text(</span><br><span class="line">  icons,</span><br><span class="line">  style: TextStyle(</span><br><span class="line">    fontFamily: <span class="string">&quot;MaterialIcons&quot;</span>,</span><br><span class="line">    fontSize: <span class="number">24.0</span>,</span><br><span class="line">    color: Colors.green,</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>Flutter 封装了 IconData 和 Icon 来专门显示字体图标</p>
<p>icons 类中包含了所有 Material Design 图标的 IconData 静态变量定义</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Row(</span><br><span class="line">   mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">   children: &lt;Widget&gt;[</span><br><span class="line">     Icon(MyIcons.book,color: Colors.purple),</span><br><span class="line">     Icon(MyIcons.wechat,color: Colors.green),</span><br><span class="line">   ],</span><br><span class="line"> )</span><br></pre></td></tr></table></figure>



<ul>
<li>使用自定义字体图标 </li>
</ul>
<p>导入字体图标文件</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">fonts:</span><br><span class="line">  - family: myIcon  #指定一个字体名</span><br><span class="line">    fonts:</span><br><span class="line">      - asset: fonts/iconfont.ttf</span><br></pre></td></tr></table></figure>

<p>为了使用方便，定义 MyIcons 类，将字体文件中的所有图标都定义成静态变量</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIcons</span></span>&#123;</span><br><span class="line">  <span class="comment">// book 图标</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> IconData book = <span class="keyword">const</span> IconData(</span><br><span class="line">      <span class="number">0xe614</span>, </span><br><span class="line">      fontFamily: <span class="string">&#x27;myIcon&#x27;</span>, </span><br><span class="line">      matchTextDirection: <span class="keyword">true</span></span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 微信图标</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> IconData wechat = <span class="keyword">const</span> IconData(</span><br><span class="line">      <span class="number">0xec7d</span>,  </span><br><span class="line">      fontFamily: <span class="string">&#x27;myIcon&#x27;</span>, </span><br><span class="line">      matchTextDirection: <span class="keyword">true</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-单选开关和复选框"><a href="#3-4-单选开关和复选框" class="headerlink" title="3.4 单选开关和复选框"></a>3.4 单选开关和复选框</h4><p>它们本身不会保存当前选中状态</p>
<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%B8%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/WeChate24ea09c0c08061e88779c644b095b75.png?lastModify=1642479994" alt="WeChate24ea09c0c08061e88779c644b095b75"></p>
<p>都有个 activeColor 属性设置激活态颜色</p>
<p>Checkbox 大小固定，无法自定义</p>
<p>Switch 只能自定宽度，高度固定</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">bool</span> _switchSelected=<span class="keyword">true</span>; <span class="comment">//维护单选开关状态</span></span><br><span class="line"> <span class="built_in">bool</span> _checkboxSelected=<span class="keyword">true</span>;<span class="comment">//维护复选框状态</span></span><br><span class="line"> Switch(</span><br><span class="line"> value: _switchSelected,</span><br><span class="line"> onChanged: (value)&#123;</span><br><span class="line">   setState(() &#123;</span><br><span class="line">     _switchSelected = value;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;),</span><br><span class="line">Checkbox(</span><br><span class="line"> value: _checkboxSelected,</span><br><span class="line"> onChanged: (value)&#123;</span><br><span class="line">   setState(() &#123;</span><br><span class="line">     _checkboxSelected = value ?? <span class="keyword">false</span>;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;),</span><br></pre></td></tr></table></figure>

<h4 id="3-5-输入框及表单"><a href="#3-5-输入框及表单" class="headerlink" title="3.5 输入框及表单"></a>3.5 输入框及表单</h4><h5 id="3-5-1-输入框-TextField"><a href="#3-5-1-输入框-TextField" class="headerlink" title="3.5.1 输入框 TextField"></a>3.5.1 输入框 TextField</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TextField(&#123;</span><br><span class="line">   Key key,</span><br><span class="line">   <span class="keyword">this</span>.controller,           <span class="comment">//控制器，控制TextField文字</span></span><br><span class="line">   <span class="keyword">this</span>.focusNode, <span class="comment">//控制textField是否占有当前键盘的输入焦点</span></span><br><span class="line">   <span class="keyword">this</span>.decoration = <span class="keyword">const</span> InputDecoration(),    <span class="comment">//输入器装饰</span></span><br><span class="line">   TextInputType keyboardType,   <span class="comment">//输入的类型</span></span><br><span class="line">   <span class="keyword">this</span>.textInputAction,  <span class="comment">//键盘回车键图标</span></span><br><span class="line">   <span class="keyword">this</span>.textCapitalization = TextCapitalization.none,</span><br><span class="line">   <span class="keyword">this</span>.style,</span><br><span class="line">   <span class="keyword">this</span>.textAlign = TextAlign.start,   <span class="comment">//文字显示位置</span></span><br><span class="line">   <span class="keyword">this</span>.autofocus = <span class="keyword">false</span>, <span class="comment">//是否自动获取焦点</span></span><br><span class="line">   <span class="keyword">this</span>.obscureText = <span class="keyword">false</span>, <span class="comment">//是否*号显示</span></span><br><span class="line">   <span class="keyword">this</span>.autocorrect = <span class="keyword">true</span>,</span><br><span class="line">   <span class="keyword">this</span>.maxLines = <span class="number">1</span>,</span><br><span class="line">   <span class="keyword">this</span>.maxLength, <span class="comment">//文本框最大长度，设置后输入框右下角会显示输入的文本计数</span></span><br><span class="line">   <span class="keyword">this</span>.maxLengthEnforced = <span class="keyword">true</span>,</span><br><span class="line">   <span class="keyword">this</span>.onChanged,                <span class="comment">//文字改变触发</span></span><br><span class="line">   <span class="keyword">this</span>.onEditingComplete,   <span class="comment">//当用户提交可编辑内容时调用</span></span><br><span class="line">   <span class="keyword">this</span>.onSubmitted,   <span class="comment">////<span class="markdown">文字提交触发（键盘按键）</span></span></span><br><span class="line">   <span class="keyword">this</span>.inputFormatters, <span class="comment">//指定输入格式，输入内容改变时，会根据指定格式校验</span></span><br><span class="line">   <span class="keyword">this</span>.enabled,</span><br><span class="line">   <span class="keyword">this</span>.cursorWidth = <span class="number">2.0</span>, <span class="comment">//输入光标宽度</span></span><br><span class="line">   <span class="keyword">this</span>.cursorRadius,    <span class="comment">//输入光标圆角  </span></span><br><span class="line">   <span class="keyword">this</span>.cursorColor,   <span class="comment">//输入光标颜色</span></span><br><span class="line">   <span class="keyword">this</span>.keyboardAppearance,</span><br><span class="line">   <span class="keyword">this</span>.scrollPadding = <span class="keyword">const</span> EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<p>controller 编辑框的控制器，通过它可以设置/获取编辑框的内容、选择编辑内容、监听文本改变事件。</p>
<p>focusNode 用于控制 TextField 是否占有当前键盘的输入焦点</p>
<p>decoration 用于控制 TextField 的外观显示，如提示文本、背景颜色、边框</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">FocusNode focusNode1 = FocusNode();</span><br><span class="line">FocusNode focusNode2 = FocusNode();</span><br><span class="line">FocusScopeNode? focusScopeNode;</span><br><span class="line"></span><br><span class="line">body: Center(</span><br><span class="line">  child: Column(</span><br><span class="line">    children: [</span><br><span class="line">      TextField(</span><br><span class="line">        autofocus: <span class="keyword">true</span>,</span><br><span class="line">        focusNode: focusNode1,</span><br><span class="line">        controller: _unameController,</span><br><span class="line">        decoration: InputDecoration(</span><br><span class="line">          labelText: <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">          hintText: <span class="string">&#x27;用户名或邮箱&#x27;</span>,</span><br><span class="line">          prefixIcon: Icon(Icons.person),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      TextField(</span><br><span class="line">        focusNode: focusNode2,</span><br><span class="line">        decoration: InputDecoration(</span><br><span class="line">          labelText: <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">          hintText: <span class="string">&#x27;登录密码&#x27;</span>,</span><br><span class="line">          prefixIcon: Icon(Icons.lock),</span><br><span class="line">        ),</span><br><span class="line">        obscureText: <span class="keyword">true</span>,</span><br><span class="line">      ),</span><br><span class="line">      ElevatedButton(</span><br><span class="line">        onPressed: ()&#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">null</span> == focusScopeNode) &#123;</span><br><span class="line">            focusScopeNode = FocusScope.of(context);</span><br><span class="line">          &#125;</span><br><span class="line">          focusScopeNode!.requestFocus(focusNode2);</span><br><span class="line">        &#125;,</span><br><span class="line">        child: Text(<span class="string">&#x27;移动焦点&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      ElevatedButton(</span><br><span class="line">        onPressed: ()&#123;</span><br><span class="line">          focusNode1.unfocus();</span><br><span class="line">          focusNode2.unfocus();</span><br><span class="line">        &#125;,</span><br><span class="line">        child: Text(<span class="string">&#x27;隐藏键盘&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>



<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%B8%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/WeChatce892753a9d9210783f5c2d69dadd941.png?lastModify=1642479994" alt="WeChatce892753a9d9210783f5c2d69dadd941"></p>
<ul>
<li>获取输入内容</li>
</ul>
<p>定义一个 controller</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextEditingController _unameController = TextEditingController();</span><br></pre></td></tr></table></figure>

<p>设置输入 controller</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">    autofocus: <span class="keyword">true</span>,</span><br><span class="line">    controller: _unameController,</span><br></pre></td></tr></table></figure>

<p>通过 onChange 回调获取输入内容</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">    autofocus: <span class="keyword">true</span>,</span><br><span class="line">    onChanged: (v) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;onChange: <span class="subst">$v</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>通过 controller 监听获取输入的内容</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> initState() &#123;</span><br><span class="line">  <span class="keyword">super</span>.initState();</span><br><span class="line">  _unameController.addListener(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(_unameController.text);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>onChange 是专门用于监听文本变化</p>
<p>controller 还可以设置默认值、选择文本</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">_selectionController.text=<span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">_selectionController.selection=TextSelection(</span><br><span class="line">    baseOffset: <span class="number">2</span>,</span><br><span class="line">    extentOffset: _selectionController.text.length</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>控制焦点</li>
</ul>
<p>通过 FocusScopeNode 在输入框之间移动焦点、设置默认焦点</p>
<p>通过 FocusScope.of(context) 获取 Widget 树中默认的 FocusScopeNode</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">FocusScopeNode? focusScopeNode;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == focusScopeNode) &#123;</span><br><span class="line">  focusScopeNode = FocusScope.of(context);</span><br><span class="line">&#125;</span><br><span class="line">focusScopeNode!.requestFocus(focusNode2); <span class="comment">//移动焦点</span></span><br></pre></td></tr></table></figure>

<ul>
<li>监听焦点改变事件</li>
</ul>
<p>获取到焦点时 focusNode.hasFocus 为 true 失去焦点时为 false</p>
<p>FocusNode 继承自 ChangeNotifier，通过 FocusNode 可以监听焦点的改变</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//隐藏键盘</span></span><br><span class="line">focusNode1.unfocus();</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 创建 focusNode   </span></span><br><span class="line">FocusNode focusNode = FocusNode();</span><br><span class="line">...</span><br><span class="line"><span class="comment">// focusNode绑定输入框   </span></span><br><span class="line">TextField(focusNode: focusNode);</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 监听焦点变化    </span></span><br><span class="line">focusNode.addListener(()&#123;</span><br><span class="line">   <span class="built_in">print</span>(focusNode.hasFocus);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义样式</li>
</ul>
<p>分别设置输入框未获得和获得焦点下划线颜色</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">decoration: InputDecoration(</span><br><span class="line">  labelText: <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  hintText: <span class="string">&#x27;用户名或邮箱&#x27;</span>,</span><br><span class="line">  prefixIcon: Icon(Icons.person),</span><br><span class="line">  enabledBorder: UnderlineInputBorder( <span class="comment">//未获得焦点下划线颜色</span></span><br><span class="line">    borderSide: BorderSide(color: Colors.red),</span><br><span class="line">  ),</span><br><span class="line">  focusedBorder: UnderlineInputBorder( <span class="comment">//获得焦点下划线颜色</span></span><br><span class="line">    borderSide: BorderSide(color: Colors.yellow),</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<p>通过主题自定义输入框样式</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Theme(</span><br><span class="line">  data: Theme.of(context).copyWith(</span><br><span class="line">      hintColor: Colors.grey[<span class="number">200</span>], <span class="comment">//定义下划线颜色</span></span><br><span class="line">      inputDecorationTheme: InputDecorationTheme(</span><br><span class="line">          labelStyle: TextStyle(color: Colors.grey),<span class="comment">//定义label字体样式</span></span><br><span class="line">          hintStyle: TextStyle(color: Colors.grey, fontSize: <span class="number">14.0</span>)<span class="comment">//定义提示文本样式</span></span><br><span class="line">      )</span><br><span class="line">  ),</span><br></pre></td></tr></table></figure>

<p>另一种灵活的方式是直接隐藏 TextField 本身的下划线，通过 Container 去嵌套定义样式</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  child: TextField(</span><br><span class="line">    keyboardType: TextInputType.emailAddress,</span><br><span class="line">    decoration: InputDecoration(</span><br><span class="line">        labelText: <span class="string">&quot;Email&quot;</span>,</span><br><span class="line">        hintText: <span class="string">&quot;电子邮件地址&quot;</span>,</span><br><span class="line">        prefixIcon: Icon(Icons.email),</span><br><span class="line">        border: InputBorder.none <span class="comment">//隐藏下划线</span></span><br><span class="line">    )</span><br><span class="line">  ),</span><br><span class="line">  decoration: BoxDecoration(</span><br><span class="line">      <span class="comment">// 下滑线浅灰色，宽度1像素</span></span><br><span class="line">      border: Border(bottom: BorderSide(color: Colors.grey[<span class="number">200</span>], width: <span class="number">1.0</span>))</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h5 id="3-5-2-表单-Form"><a href="#3-5-2-表单-Form" class="headerlink" title="3.5.2 表单 Form"></a>3.5.2 表单 Form</h5><ul>
<li>Form</li>
</ul>
<p>可以对输入框进行分组，然后进行统一操作</p>
<p>Form 类的定义 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Form(&#123;</span><br><span class="line">  <span class="keyword">required</span> Widget child,</span><br><span class="line">  <span class="built_in">bool</span> autovalidate = <span class="keyword">false</span>,</span><br><span class="line">  WillPopCallback onWillPop,</span><br><span class="line">  VoidCallback onChanged,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>autovalidate 是否自动校验输入内容，为 true 时，每个 FormField 内容变化时自动校验合法性，显示错误信息，否则需要通过调用 FormState.validate() 来手动校验</p>
<p>onWillPop 决定 Form 所在路由是否可以直接返回，通常用于拦截返回按钮</p>
<p>onChanged： Form 任意一个子 FormField 内容发生改变时触发回调</p>
<ul>
<li>FormField</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> FormField(&#123;</span><br><span class="line">   ...</span><br><span class="line">   FormFieldSetter&lt;T&gt; onSaved, <span class="comment">//保存回调</span></span><br><span class="line">   FormFieldValidator&lt;T&gt;  validator, <span class="comment">//验证回调</span></span><br><span class="line">   T initialValue, <span class="comment">//初始值</span></span><br><span class="line">   <span class="built_in">bool</span> autovalidate = <span class="keyword">false</span>, <span class="comment">//是否自动校验。</span></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<p>Form 的子孙元素必须是 FormField 类型</p>
<p>为了使用方便，Flutter 提供了一个 TextFormField</p>
<ul>
<li>FormState</li>
</ul>
<p>FormState 为 Form 的State 类，可以通过 Form.of(context) 或 GlobalKey 获得，可以通过它来对 Form 的子孙 FormField 进行统一操作</p>
<p>FormState.validate()：调用后，会调用 Form 子孙 FormField 的 validate 回调，有一个校验失败返回 false</p>
<p>FormState.save()：会调用 Form 子孙 FormField 的 save 回调，用于保存表单内容</p>
<p>FormState.reset()：会将子孙 FormField 的内容清空</p>
<ul>
<li>示例</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">void</span> main() &#123;</span><br><span class="line">   runApp(MaterialApp(home: FormTestRoute()));</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">FormTestRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@override</span></span><br><span class="line">   _FormTestRouteState createState() =&gt; _FormTestRouteState();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">_FormTestRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">FormTestRoute</span>&gt; </span>&#123;</span><br><span class="line">   TextEditingController _unameController = TextEditingController();</span><br><span class="line">   TextEditingController _pwdController   = TextEditingController();</span><br><span class="line">   GlobalKey _formKey = GlobalKey&lt;FormState&gt;();</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@override</span></span><br><span class="line">   <span class="keyword">void</span> initState() &#123;</span><br><span class="line">     <span class="keyword">super</span>.initState();</span><br><span class="line"> </span><br><span class="line">     _unameController.addListener(() &#123;</span><br><span class="line">       <span class="built_in">print</span>(_unameController.text);</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@override</span></span><br><span class="line">   Widget build(BuildContext context) &#123;</span><br><span class="line">     <span class="keyword">return</span> Scaffold(</span><br><span class="line">       appBar: AppBar(</span><br><span class="line">         title: Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">       ),</span><br><span class="line">       body: Form(</span><br><span class="line">         key: _formKey,<span class="comment">//设置 globalkey</span></span><br><span class="line">         child: Column(</span><br><span class="line">           children: [</span><br><span class="line">             TextFormField(</span><br><span class="line">               autofocus: <span class="keyword">true</span>,</span><br><span class="line">               controller: _unameController,</span><br><span class="line">               decoration: InputDecoration(</span><br><span class="line">                 labelText: <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">                 hintText: <span class="string">&#x27;用户名或邮箱&#x27;</span>,</span><br><span class="line">                 prefixIcon: Icon(Icons.person),</span><br><span class="line">               ),</span><br><span class="line">               <span class="comment">//校验用户名</span></span><br><span class="line">               validator: (v)&#123;</span><br><span class="line">                 <span class="keyword">return</span> v!.trim().length &gt; <span class="number">0</span> ? <span class="keyword">null</span> : <span class="string">&#x27;用户名不能为空&#x27;</span>;</span><br><span class="line">               &#125;,</span><br><span class="line">             ),</span><br><span class="line">             TextFormField(</span><br><span class="line">               decoration: InputDecoration(</span><br><span class="line">                 labelText: <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">                 hintText: <span class="string">&#x27;登录密码&#x27;</span>,</span><br><span class="line">                 prefixIcon: Icon(Icons.lock),</span><br><span class="line">               ),</span><br><span class="line">               obscureText: <span class="keyword">true</span>,</span><br><span class="line">               <span class="comment">//校验密码</span></span><br><span class="line">               validator: (v)&#123;</span><br><span class="line">                 <span class="keyword">return</span> v!.trim().length &gt; <span class="number">0</span> ? <span class="keyword">null</span> : <span class="string">&#x27;密码不能为空&#x27;</span>;</span><br><span class="line">               &#125;,</span><br><span class="line">             ),</span><br><span class="line">             Padding(</span><br><span class="line">                 padding: EdgeInsets.only(top: <span class="number">20</span>),</span><br><span class="line">                 child: Row(</span><br><span class="line">                   children: [</span><br><span class="line">                     Expanded(</span><br><span class="line">                         child: ElevatedButton(</span><br><span class="line">                           child: Padding(</span><br><span class="line">                             padding: EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">                             child: Text(<span class="string">&#x27;登录&#x27;</span>),</span><br><span class="line">                           ),</span><br><span class="line">                           onPressed: ()&#123;</span><br><span class="line">                             <span class="comment">// 通过_formKey.currentState 获取FormState后，</span></span><br><span class="line">                             <span class="comment">// 调用validate()方法校验用户名密码是否合法，校验</span></span><br><span class="line">                             <span class="comment">// 通过后再提交数据。</span></span><br><span class="line">                             <span class="keyword">if</span> ((_formKey.currentState <span class="keyword">as</span> FormState).validate()) &#123;</span><br><span class="line">                               <span class="built_in">print</span>(<span class="string">&#x27;通过校验&#x27;</span>);</span><br><span class="line">                             &#125;</span><br><span class="line">                           &#125;,</span><br><span class="line">                         ),</span><br><span class="line">                     ),</span><br><span class="line">                   ],</span><br><span class="line">                 ),</span><br><span class="line">             ),</span><br><span class="line">           ],</span><br><span class="line">         ),</span><br><span class="line">       ),</span><br><span class="line">     );</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%B8%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/WeChat803de70354088ea04b9983c0a122d48b.png?lastModify=1642479994" alt="WeChat803de70354088ea04b9983c0a122d48b"></p>
<p>此处登录按钮的 onPressed 方法不能通过 Form.of(context) 来获取，这边的context是 FormTestRoute 的context</p>
<p>Form.of(context) 是根据所指定的 context 向根去查找，FormState 是在FormTestRoute的子树中所以不行 </p>
<p>可以通过 Builder 来构建登录按钮，Builder 会将 Widget 节点的context 作为回调参数</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Expanded(</span><br><span class="line"> <span class="comment">// 通过Builder来获取ElevatedButton所在widget树的真正context(Element) </span></span><br><span class="line">  child:Builder(builder: (context)&#123;</span><br><span class="line">    <span class="keyword">return</span> ElevatedButton(</span><br><span class="line">      ...</span><br><span class="line">      onPressed: () &#123;</span><br><span class="line">        <span class="comment">//由于本widget也是Form的子代widget，所以可以通过下面方式获取FormState  </span></span><br><span class="line">        <span class="keyword">if</span>(Form.of(context).validate())&#123;</span><br><span class="line">          <span class="comment">//验证通过提交数据</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="3-6-进度指示器"><a href="#3-6-进度指示器" class="headerlink" title="3.6 进度指示器"></a>3.6 进度指示器</h4><ul>
<li>LinearProgressIndicator</li>
</ul>
<p>线性条状进度条</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">LinearProgressIndicator(&#123;</span><br><span class="line">  <span class="built_in">double</span> value,</span><br><span class="line">  Color backgroundColor,</span><br><span class="line">  Animation&lt;Color&gt; valueColor,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>value：当前进度，取值 [0,1]，value 为 null 会执行一个循环动画，不为 null 时为一个具体进度的进度条</p>
<p>valueColor：进度条颜色，类型 <code>Animation&lt;Color&gt;</code>，允许对进度条颜色指定动画，如果使用固定颜色使用 AlwaysStoppedAnimation 来指定</p>
<ul>
<li>CircularProgressIndicator</li>
</ul>
<p>圆形进度条</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"> CircularProgressIndicator(&#123;</span><br><span class="line">  <span class="built_in">double</span> value,</span><br><span class="line">  Color backgroundColor,</span><br><span class="line">  Animation&lt;Color&gt; valueColor,</span><br><span class="line">  <span class="keyword">this</span>.strokeWidth = <span class="number">4.0</span>,</span><br><span class="line">  ...   </span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>

<p>strokeWidth 圆形进度条的粗细</p>
<ul>
<li>示例</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">LinearProgressIndicator(</span><br><span class="line">  backgroundColor: Colors.grey[<span class="number">200</span>],</span><br><span class="line">  valueColor: AlwaysStoppedAnimation(Colors.blue),</span><br><span class="line">  value: <span class="number">.5</span>,</span><br><span class="line">),</span><br><span class="line">CircularProgressIndicator(</span><br><span class="line">  backgroundColor: Colors.grey[<span class="number">200</span>],</span><br><span class="line">  valueColor: AlwaysStoppedAnimation(Colors.blue),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义尺寸</li>
</ul>
<p>CircularProgressIndicator 和 LinearProgressIndicator 都是取父容器的尺寸作为绘制边界的，可以通过尺寸限制 Widget，如 ConstrainedBox、SizedBox</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 线性进度条高度指定为3</span></span><br><span class="line">SizedBox(</span><br><span class="line">  height: <span class="number">3</span>,</span><br><span class="line">  child: LinearProgressIndicator(</span><br><span class="line">    backgroundColor: Colors.grey[<span class="number">200</span>],</span><br><span class="line">    valueColor: AlwaysStoppedAnimation(Colors.blue),</span><br><span class="line">    value: <span class="number">.5</span>,</span><br><span class="line">  ),</span><br><span class="line">),</span><br><span class="line"><span class="comment">// 圆形进度条直径指定为100</span></span><br><span class="line">SizedBox(</span><br><span class="line">  height: <span class="number">100</span>,</span><br><span class="line">  width: <span class="number">100</span>,</span><br><span class="line">  child: CircularProgressIndicator(</span><br><span class="line">    backgroundColor: Colors.grey[<span class="number">200</span>],</span><br><span class="line">    valueColor: AlwaysStoppedAnimation(Colors.blue),</span><br><span class="line">    value: <span class="number">.7</span>,</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<ul>
<li><p>进度色动画</p>
</li>
<li><p>自定义进度指示器样式</p>
</li>
</ul>
<p>可以通过 CustomPainter Widge 来自定义绘制逻辑</p>
]]></content>
  </entry>
  <entry>
    <title>《Flutter实战第二版》二：第一个Flutter应用</title>
    <url>/2022/01/18/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%BA%8C%EF%BC%9A%E7%AC%AC%E4%B8%80%E4%B8%AAFlutter%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h3 id="2-第一个-Flutter-应用"><a href="#2-第一个-Flutter-应用" class="headerlink" title="2 第一个 Flutter 应用"></a>2 第一个 Flutter 应用</h3><h4 id="2-1-计数器应用"><a href="#2-1-计数器应用" class="headerlink" title="2.1 计数器应用"></a>2.1 计数器应用</h4><h5 id="2-1-1-创建-Flutter-应用模板"><a href="#2-1-1-创建-Flutter-应用模板" class="headerlink" title="2.1.1 创建 Flutter 应用模板"></a>2.1.1 创建 Flutter 应用模板</h5><p>Android Studio 创建新的 Flutter 工程得到一个计数器应用 Demo</p>
<img src="《Flutter实战第二版》二：第一个Flutter应用/WeChatb18a46cb6a1321d33b71401d68d6e8ba.png" alt="WeChatb18a46cb6a1321d33b71401d68d6e8ba" style="zoom:50%;" />

<p>示例主要 Dart 代码在 lib/main.dart 文件中，源码</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123; runApp(<span class="keyword">const</span> MyApp()); &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">const</span> MyHomePage(title: <span class="string">&#x27;Flutter Demo Home Page&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;MyHomePage&gt; createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyHomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _counter = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">void</span> _incrementCounter() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _counter++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(widget.title),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            <span class="keyword">const</span> Text(</span><br><span class="line">              <span class="string">&#x27;You have pushed the button this many times:&#x27;</span>,</span><br><span class="line">            ),</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">&#x27;<span class="subst">$_counter</span>&#x27;</span>,</span><br><span class="line">              style: Theme.of(context).textTheme.headline4,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: _incrementCounter,</span><br><span class="line">        tooltip: <span class="string">&#x27;Increment&#x27;</span>,</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">      ), <span class="comment">// This trailing comma makes auto-formatting nicer for build methods.</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>分析</li>
</ul>
<ol>
<li>导入包</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>导入了 Material UI 组件库，Material 是一种标准的移动端和web端视觉设计语言，Flutter 默认提供了一套丰富的 Material 风格的 UI 组件</p>
<ol start="2">
<li>应用的入口</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123; runApp(<span class="keyword">const</span> MyApp()); &#125;</span><br></pre></td></tr></table></figure>

<p>man 函数为应用程序入口，main 函数调用了 runApp 方法，它的功能是启动 Flutter 应用，runApp 接受一个 Widget 参数，本示例中它是一个 MyApp 对象， MyApp() 是 Flutter 应用的根组件</p>
<ol start="3">
<li>应用结构</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,<span class="comment">//蓝色主题</span></span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">const</span> MyHomePage(title: <span class="string">&#x27;Flutter Demo Home Page&#x27;</span>),<span class="comment">//应用首页路由</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MyApp 类代表 Flutter 应用，继承了 StatelessWidget 类，意味着应用本身也是一个 widget</p>
<p>Flutter 中大多数东西都是 widget，包括对齐(Align)、填充(Padding)、手势处理(GestureDetector)等，都是以 widget 的形式提供</p>
<p>Flutter 构建页面时，会调用组件 build 方法，widget 的主要工作是提供一个 build() 方法来描述如何构建 UI 界面(通常是组合、拼装其它基础 widget)</p>
<p>MaterialAPP 是 Material 库中提供的 Flutter APP 框架，通过它可以设置应用的名称、主题、首页及路由列表，MaterialAPP 也是一个 widget</p>
<p>home 为 Flutter 应用首页，也是一个 widget</p>
<h5 id="2-1-2-首页"><a href="#2-1-2-首页" class="headerlink" title="2.1.2 首页"></a>2.1.2 首页</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;MyHomePage&gt; createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyHomePage</span>&gt; </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MyHomePage 应用首页 继承自 StatefulWidget 类，表示它是一个有状态的组件</p>
<p>StatefulWidget 至少由两个类组成：</p>
<p>一个 StatefulWidget 类；一个 State 类；StatefulWidget 类本身是不变的，State 类持有的状态在 widget 生命周期中可能发生变化</p>
<ul>
<li>State 类</li>
</ul>
<p>_MyHomePageState 类包含</p>
<ol>
<li>该组件的状态，这里只需要维护一个点击次数的计数器，所以定义一个 _counter</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> _counter = <span class="number">0</span>;<span class="comment">//记录按钮点击次数</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>设置状态的自增函数</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _incrementCounter() &#123;</span><br><span class="line">  setState(() &#123;</span><br><span class="line">    _counter++;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按钮点击时会调用此函数，该函数作用是先自增 _counter，然后调用 setState 方法，setState 方法作用是通知 Flutter 框架，有状态发生了改变，Flutter 框架收到通知后，会执行 build 方法来跟进新的状态重新构建界面</p>
<ol start="3">
<li>构建 UI 界面</li>
</ol>
<p>构建 UI 界面在 build 方法中，MyHomePage 第一次创建时，_MyHomePageState 类会被创建，Flutter 框架会调用 widget 的 build 方法来构建 widget 树</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Scaffold(</span><br><span class="line">    appBar: AppBar(</span><br><span class="line">      title: Text(widget.title),</span><br><span class="line">    ),</span><br><span class="line">    body: Center(</span><br><span class="line">      child: Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          <span class="keyword">const</span> Text(</span><br><span class="line">            <span class="string">&#x27;You have pushed the button this many times:&#x27;</span>,</span><br><span class="line">          ),</span><br><span class="line">          Text(</span><br><span class="line">            <span class="string">&#x27;<span class="subst">$_counter</span>&#x27;</span>,</span><br><span class="line">            style: Theme.of(context).textTheme.headline4,</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">    floatingActionButton: FloatingActionButton(</span><br><span class="line">      onPressed: _incrementCounter,</span><br><span class="line">      tooltip: <span class="string">&#x27;Increment&#x27;</span>,</span><br><span class="line">      child: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">    ), <span class="comment">// This trailing comma makes auto-formatting nicer for build methods.</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Scaffold 是 Material 库中提供的页面脚手架，提供了默认的导航栏、标题、和包含主屏幕 widget 树的body 属性，路由默认都是通过 Scaffold 创建</p>
<p>body 组件中包含了一个 Center 组件，Center 组件可以将子组件对齐到屏幕中心</p>
<p>Center 的子组件是一个 Column 组件，Column 作用是将其所有子组件沿屏幕垂直方向依次排列</p>
<p>floatingActionButton 页面右下角带+号的悬浮按钮，它的 onPressed 属性接受一个回调函数</p>
<h4 id="2-2-Widget"><a href="#2-2-Widget" class="headerlink" title="2.2 Widget"></a>2.2 Widget</h4><h5 id="2-2-1-Widget-概念"><a href="#2-2-1-Widget-概念" class="headerlink" title="2.2.1 Widget 概念"></a>2.2.1 Widget 概念</h5><p>Flutter 中是通过 Widget 嵌套 Widget 的方式来构建 UI 和进行实践处理的，Flutter中万物皆为 Widget</p>
<h5 id="2-2-2-StatelessWidget"><a href="#2-2-2-StatelessWidget" class="headerlink" title="2.2.2 StatelessWidget"></a>2.2.2 StatelessWidget</h5><p>StatelessWidget 用于不需要维护状态的场景，通常在 build 方法中通过嵌套其它 widget 来构建UI</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Echo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span>  </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Echo(&#123;</span><br><span class="line">    Key? key,  </span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.text,</span><br><span class="line">    <span class="keyword">this</span>.backgroundColor = Colors.grey, <span class="comment">//默认为灰色</span></span><br><span class="line">  &#125;):<span class="keyword">super</span>(key:key);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> text;</span><br><span class="line">  <span class="keyword">final</span> Color backgroundColor;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        color: backgroundColor,</span><br><span class="line">        child: Text(text),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在继承 widget 时，第一个参数通常应该是 key，按照惯例，widget 的属性应尽可能的被声明为 final</p>
<p>使用</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Echo(text: <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Context</li>
</ul>
<p>build 方法中有一个 context 参数，是BuildContext 类的一个实例，表示当前 widget 在 widget 树中的上下文，每个 widget 都会对应一个 context 对象</p>
<p>提供了从当前 widget 开始向上遍历 widget 树以及按照 widget 类型查找父级 widget 的方法</p>
<p>从子树中获取父级 widget 的示例</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span>  </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&quot;Context测试&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        child: Builder(builder: (context) &#123;</span><br><span class="line">          <span class="comment">// 在 widget 树中向上查找最近的父级`Scaffold`  widget </span></span><br><span class="line">          Scaffold scaffold = context.findAncestorWidgetOfExactType&lt;Scaffold&gt;();</span><br><span class="line">          <span class="comment">// 直接返回 AppBar的title， 此处实际上是Text(&quot;Context测试&quot;)</span></span><br><span class="line">          <span class="keyword">return</span> (scaffold.appBar <span class="keyword">as</span> AppBar).title;</span><br><span class="line">        &#125;),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-3-StatefulWidget"><a href="#2-2-3-StatefulWidget" class="headerlink" title="2.2.3 StatefulWidget"></a>2.2.3 StatefulWidget</h5><p>继承自 widget 类，重写了 createElement() 方法，添加了一个新的接口 createState()</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StatefulWidget</span> <span class="keyword">extends</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> StatefulWidget(&#123; Key key &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  StatefulElement createElement() =&gt; StatefulElement(<span class="keyword">this</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  State createState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-4-State"><a href="#2-2-4-State" class="headerlink" title="2.2.4 State"></a>2.2.4 State</h5><p>一个 StatefulWidget 类会对应一个 State 类，State表示与其对应的 StatefulWidget 要维护的状态</p>
<p>当State被改变时，可以手动调用其 setState() 方法通知Flutter 框架状态发生改变，Flutter 框架在收到消息后，会重新调用其 build 方法重新构建 widget 树，从而达到更新UI的目的</p>
<p>State 中有两个常用属性 widget、context</p>
<h5 id="2-2-5-从-widget-树中获取-State-对象"><a href="#2-2-5-从-widget-树中获取-State-对象" class="headerlink" title="2.2.5 从 widget 树中获取 State 对象"></a>2.2.5 从 widget 树中获取 State 对象</h5><p>context 对象有一个 findAncestorStateOfType() 方法，该方法可以从当前节点沿着 widget 树向上查找指定类型的 StatefulWidget 对应的 state 对象</p>
<p>通过context获取</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查找父级最近的Scaffold对应的ScaffoldState对象</span></span><br><span class="line">ScaffoldState _state = context.findAncestorStateOfType&lt;ScaffoldState&gt;()!;</span><br><span class="line"><span class="comment">// 打开抽屉菜单</span></span><br><span class="line">_state.openDrawer();</span><br></pre></td></tr></table></figure>

<p>Scaffold 也提供了一个 of 方法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接通过of静态方法来获取ScaffoldState</span></span><br><span class="line">ScaffoldState _state=Scaffold.of(context);</span><br><span class="line"><span class="comment">// 打开抽屉菜单</span></span><br><span class="line">_state.openDrawer();</span><br></pre></td></tr></table></figure>

<p>通过 GlobalKey</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个globalKey, 由于GlobalKey要保持全局唯一性，我们使用静态变量存储</span></span><br><span class="line"><span class="keyword">static</span> GlobalKey&lt;ScaffoldState&gt; _globalKey= GlobalKey();</span><br><span class="line">...</span><br><span class="line">Scaffold(</span><br><span class="line">    key: _globalKey , <span class="comment">//设置key</span></span><br><span class="line">    ...  </span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line"><span class="comment">//通过GlobalKey来获取State对象</span></span><br><span class="line">_globalKey.currentState.openDrawer()</span><br></pre></td></tr></table></figure>



<h4 id="2-3-状态管理"><a href="#2-3-状态管理" class="headerlink" title="2.3 状态管理"></a>2.3 状态管理</h4><h5 id="2-3-1-Widget-管理自身状态"><a href="#2-3-1-Widget-管理自身状态" class="headerlink" title="2.3.1 Widget 管理自身状态"></a>2.3.1 Widget 管理自身状态</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(home: FormTestRoute()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormTestRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _FormTestRouteState createState() =&gt; _FormTestRouteState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_FormTestRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">FormTestRoute</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: TapboxA(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>_TapboxAState 类：</p>
<p>管理 TapboxA 的状态，定义 _active：确定盒子的当前颜色的布尔值</p>
<p>定义 _handleTap() 函数，在点击盒子时更新 _active 并调用 setState() 更新UI</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TapboxA</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> TapboxA(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _TapboxAState createState() =&gt; _TapboxAState();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TapboxAState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">TapboxA</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> _active = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _handleTap() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _active = !_active;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> GestureDetector(</span><br><span class="line">      onTap: _handleTap,</span><br><span class="line">      child: Container(</span><br><span class="line">        child: Text(</span><br><span class="line">          _active ? <span class="string">&quot;Active&quot;</span> : <span class="string">&quot;Inactive&quot;</span>,</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">32.0</span>, color: Colors.red),</span><br><span class="line">        ),</span><br><span class="line">        width: <span class="number">200</span>,</span><br><span class="line">        height: <span class="number">200</span>,</span><br><span class="line">        decoration: BoxDecoration(</span><br><span class="line">          color: _active ? Colors.lightGreen[<span class="number">700</span>] : Colors.grey[<span class="number">600</span>],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-2-父-Widget-管理子-Widget-状态"><a href="#2-3-2-父-Widget-管理子-Widget-状态" class="headerlink" title="2.3.2 父 Widget 管理子 Widget 状态"></a>2.3.2 父 Widget 管理子 Widget 状态</h5><p>对于父 Widget 来说，管理状态并告诉其子 Widget 何时更新通常是比较好的方式，例如，IconButton 是一个图标按钮，但它是个无状态 Widget，因为我们认为父Widget需要知道该按钮是否被点击来采取相应处理</p>
<p>TapboxB通过回调将其状态导出到其父组件，状态由父组件管理，因此父组件未 StatefulWidget，TapboxB不管理任何状态，为 StatelessWidget</p>
<p>ParentWidget</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ParentWidget(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ParentWidgetState createState() =&gt; _ParentWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ParentWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ParentWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> _active = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">void</span> _handleTapboxChanged(<span class="built_in">bool</span> newValue) &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _active = newValue;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      child: TapBoxB(</span><br><span class="line">          active: _active,</span><br><span class="line">          onChanged: _handleTapboxChanged,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TapBoxB</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TapBoxB</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> TapBoxB(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">this</span>.active: <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.onChanged</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">bool</span> active;</span><br><span class="line">  <span class="keyword">final</span> ValueChanged&lt;<span class="built_in">bool</span>&gt; onChanged;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _handleTap() &#123;</span><br><span class="line">    onChanged(!active);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> GestureDetector(</span><br><span class="line">      onTap: _handleTap,</span><br><span class="line">      child: Container(</span><br><span class="line">        child: Center(</span><br><span class="line">          child: Text(</span><br><span class="line">              active ? <span class="string">&quot;Active&quot;</span> : <span class="string">&quot;Inactive&quot;</span>,</span><br><span class="line">              style: TextStyle(fontSize: <span class="number">32</span>, color: Colors.red),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        width: <span class="number">200</span>,</span><br><span class="line">        height: <span class="number">200</span>,</span><br><span class="line">        decoration: BoxDecoration(</span><br><span class="line">          color: active ? Colors.lightGreen[<span class="number">700</span>] : Colors.grey[<span class="number">600</span>],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-3-混合状态管理"><a href="#2-3-3-混合状态管理" class="headerlink" title="2.3.3 混合状态管理"></a>2.3.3 混合状态管理</h5><p>组件自身管理一些内部状态，父组件管理一些其它外部状态</p>
<h4 id="2-4-路由管理"><a href="#2-4-路由管理" class="headerlink" title="2.4 路由管理"></a>2.4 路由管理</h4><h5 id="2-4-1-示例"><a href="#2-4-1-示例" class="headerlink" title="2.4.1 示例"></a>2.4.1 示例</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> TestRoute(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        child: TextButton(</span><br><span class="line">            onPressed: ()&#123;</span><br><span class="line">              Navigator.push(</span><br><span class="line">                context,</span><br><span class="line">                MaterialPageRoute(builder: (context)&#123;</span><br><span class="line">                  <span class="keyword">return</span> NewRoute();</span><br><span class="line">                &#125;),</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">            child: Text(<span class="string">&quot;open new router&quot;</span>)</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> NewRoute(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;New route&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(<span class="string">&#x27;This is new route&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-2-MaterialPageRoute"><a href="#2-4-2-MaterialPageRoute" class="headerlink" title="2.4.2 MaterialPageRoute"></a>2.4.2 MaterialPageRoute</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"> MaterialPageRoute(&#123;</span><br><span class="line">  WidgetBuilder builder,</span><br><span class="line">  RouteSettings settings,</span><br><span class="line">  <span class="built_in">bool</span> maintainState = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">bool</span> fullscreenDialog = <span class="keyword">false</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>builder：是一个 WidgetBuilder 类型的回调函数，作用是构建路由页面的具体内容，返回一个 widget。通常要实现此回调，返回新路由的实例</p>
<p>settings：路由配置信息，如路由名称、是否初始路由（首页）</p>
<p>maintainState：默认情况下，当入栈一个新路由时，原来的路由仍然会被保存在内存中，如果想在路由没用的时候释放其所占用的所有资源，可以设置 maintainState 为 false</p>
<p>fullscreenDialog：新路由页面是否是一个全屏的模态对话框，iOS中为true，则新页面将会从屏幕底部滑入</p>
<h5 id="2-4-3-Navigtior"><a href="#2-4-3-Navigtior" class="headerlink" title="2.4.3 Navigtior"></a>2.4.3 Navigtior</h5><p>路由管理组件，提供打开和退出路由页面方法，通过一个栈来管理活动路由集合，当前页面就是栈顶的路由，常用两个方法 push、pop</p>
<h5 id="2-4-4-路由器传值"><a href="#2-4-4-路由器传值" class="headerlink" title="2.4.4 路由器传值"></a>2.4.4 路由器传值</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> TestRoute(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        child: TextButton(</span><br><span class="line">            onPressed: () <span class="keyword">async</span> &#123;<span class="comment">//打开下一个页面，并等待返回结果</span></span><br><span class="line">              <span class="keyword">var</span> result = <span class="keyword">await</span> Navigator.push(</span><br><span class="line">                context,</span><br><span class="line">                MaterialPageRoute(</span><br><span class="line">                    builder: (context) &#123;</span><br><span class="line">                      <span class="keyword">return</span> NewRoute(</span><br><span class="line">                          text: <span class="string">&#x27;提示123&#x27;</span>,</span><br><span class="line">                      );</span><br><span class="line">                    &#125;</span><br><span class="line">                ),</span><br><span class="line">              );</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&#x27;路由返回值：<span class="subst">$result</span>&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            child: Text(<span class="string">&quot;open new router&quot;</span>)</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> NewRoute(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.text, <span class="comment">//接收一个 text 参数</span></span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String?</span> text;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;New route&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Padding(</span><br><span class="line">          padding: EdgeInsets.all(<span class="number">18</span>),</span><br><span class="line">          child: Center(</span><br><span class="line">            child: Column(</span><br><span class="line">              children: [</span><br><span class="line">                Text(text!),</span><br><span class="line">                ElevatedButton(</span><br><span class="line">                    onPressed: ()&#123;</span><br><span class="line">                      Navigator.pop(context, <span class="string">&#x27;我是返回值1&#x27;</span>);<span class="comment">//传递返回值</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    child: Text(<span class="string">&#x27;返回&#x27;</span>)</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2-4-5-命名路由"><a href="#2-4-5-命名路由" class="headerlink" title="2.4.5 命名路由"></a>2.4.5 命名路由</h5><ul>
<li>路由表</li>
</ul>
<p>先注册一个路由表，key 是路由名字，value 是个 builder 回调函数</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, WidgetBuilder&gt; routes;</span><br></pre></td></tr></table></figure>

<p>打开一个新路由时，根据路由名字在路由表中查找对应的 WidgetBuilder</p>
<ul>
<li>注册路由表</li>
</ul>
<p>找到 MaterialApp，添加 routes 属性</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">runApp(MaterialApp(</span><br><span class="line">    home: TestRoute(),</span><br><span class="line">    routes: &#123;</span><br><span class="line">      <span class="string">&#x27;new_page&#x27;</span>: (context) =&gt; NewRoute(text: <span class="string">&#x27;提示123&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;/&#x27;</span>: (context) =&gt; TestRoute(),</span><br><span class="line">      <span class="comment">//其它路由注册信息</span></span><br><span class="line">    &#125;,</span><br><span class="line">));</span><br></pre></td></tr></table></figure>

<ul>
<li>通过路由名打开新路由</li>
</ul>
<p>使用 Navigator 的 pushNamed 方法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">onPressed: () &#123;</span><br><span class="line">  Navigator.pushNamed(context, <span class="string">&quot;new_page&quot;</span>); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>命名路由参数传递</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(</span><br><span class="line">      home: TestRoute(),</span><br><span class="line">      routes: &#123;</span><br><span class="line">        <span class="string">&#x27;new_page&#x27;</span>: (context) &#123;</span><br><span class="line">          <span class="keyword">return</span> NewRoute(text: ModalRoute.of(context)?.settings.arguments <span class="keyword">as</span> <span class="built_in">String</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//其它路由注册信息</span></span><br><span class="line">      &#125;,</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> TestRoute(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        child: TextButton(</span><br><span class="line">            onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">              <span class="comment">//带参数跳转</span></span><br><span class="line">              <span class="keyword">var</span> result = <span class="keyword">await</span> Navigator.of(context).pushNamed(<span class="string">&#x27;new_page&#x27;</span>, arguments: <span class="string">&#x27;提示123&#x27;</span>);</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&#x27;路由返回值：<span class="subst">$result</span>&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            child: Text(<span class="string">&quot;open new router&quot;</span>)</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> NewRoute(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.text, <span class="comment">//接收一个 text 参数</span></span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String?</span> text;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//获取路由参数</span></span><br><span class="line">    <span class="keyword">var</span> args = ModalRoute.of(context)?.settings.arguments <span class="keyword">as</span> <span class="built_in">String</span>;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;New route&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Padding(</span><br><span class="line">          padding: EdgeInsets.all(<span class="number">18</span>),</span><br><span class="line">          child: Center(</span><br><span class="line">            child: Column(</span><br><span class="line">              children: [</span><br><span class="line">                Text(args),</span><br><span class="line">                ElevatedButton(</span><br><span class="line">                    onPressed: ()&#123;</span><br><span class="line">                      Navigator.pop(context, <span class="string">&#x27;我是返回值1&#x27;</span>);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    child: Text(<span class="string">&#x27;返回&#x27;</span>)</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2-4-6-路由生成钩子"><a href="#2-4-6-路由生成钩子" class="headerlink" title="2.4.6 路由生成钩子"></a>2.4.6 路由生成钩子</h5><p>MaterialApp 有一个 onGenerateRoute 属性，打开命名路由时可能被调用</p>
<p>如果指定的路由名在路由表中已注册，则会调用路由表中的 builder 函数生成路由组件</p>
<p>如果没注册，调用 onGenerateRoute 来生成路由</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">MaterialApp(</span><br><span class="line">	onGenerateRoute: (RouteSettings settings) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialPageRoute(builder: (context)&#123;</span><br><span class="line">      <span class="built_in">String</span> routeName = settings.name <span class="keyword">as</span> <span class="built_in">String</span>;</span><br><span class="line">      <span class="comment">// 如果访问的路由页需要登录，但当前未登录，则直接返回登录页路由，</span></span><br><span class="line">      <span class="comment">// 引导用户登录；其它情况则正常打开路由。</span></span><br><span class="line">      <span class="keyword">return</span> NewRoute(text: ModalRoute.of(context)?.settings.arguments <span class="keyword">as</span> <span class="built_in">String</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>有了 onGenerateRoute 回调，实现控制权限功能就可以放弃使用路由表，提供一个 onGenerateRoute 回调，在回调中进行统一的权限控制</p>
<h4 id="2-5-包管理"><a href="#2-5-包管理" class="headerlink" title="2.5 包管理"></a>2.5 包管理</h4><p>使用配置文件 pubspec.yaml 来管理第三方依赖包</p>
<p>dependencies：应用或包依赖的其它包或插件</p>
<p>dev_dependencies：开发环境依赖的工具包</p>
<p>区别：</p>
<p>前者的依赖包将作为APP的源码的一部分参与编译，生成最终安装包</p>
<p>后者的依赖包只作为开发阶段的一些工具包，主要用于帮助提高开发、测试效率，如flutter的自动化测试包</p>
<ul>
<li>Pub 仓库</li>
</ul>
<p>Pub（<a href="https://pub.dev/%EF%BC%89%E6%98%AF">https://pub.dev/）是</a> Google 官方 Dart packages 仓库，查找需要的包和插件</p>
<ul>
<li>示例</li>
</ul>
<p>搜索 english_words，添加 english_words 到依赖项列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  flutter:</span><br><span class="line">    sdk: flutter</span><br><span class="line">  english_words: ^4.0.0</span><br></pre></td></tr></table></figure>

<p>单击 pubspec.yami 右上角 Pub get，或者控制台定位到当前工程目录 <code>flutter packages get</code> 命令下载依赖包</p>
<ul>
<li>依赖本地包</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">	pkg1:</span><br><span class="line">        path: ..&#x2F;..&#x2F;code&#x2F;pkg1</span><br></pre></td></tr></table></figure>

<ul>
<li>依赖 Git</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  pkg1:</span><br><span class="line">    git:</span><br><span class="line">      url: git:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;pkg1.git</span><br></pre></td></tr></table></figure>

<p>上面是包位于 Git 存储库的根目录中，如果不是可以使用 path 参数指定相对位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  package1:</span><br><span class="line">    git:</span><br><span class="line">      url: git:&#x2F;&#x2F;github.com&#x2F;flutter&#x2F;packages.git</span><br><span class="line">      path: packages&#x2F;package1        </span><br></pre></td></tr></table></figure>

<h4 id="2-6-资源管理"><a href="#2-6-资源管理" class="headerlink" title="2.6 资源管理"></a>2.6 资源管理</h4><ul>
<li>指定 assets</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter:</span><br><span class="line">  assets:</span><br><span class="line">    - assets&#x2F;my_icon.png</span><br><span class="line">    - assets&#x2F;background.png</span><br></pre></td></tr></table></figure>

<ul>
<li>加载图片</li>
</ul>
<p>Flutter 也可以为当前设备加载适合其分辨率的图像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">…&#x2F;image.png</span><br><span class="line">…&#x2F;Mx&#x2F;image.png</span><br><span class="line">…&#x2F;Nx&#x2F;image.png  &#x2F;&#x2F;M N 是数字标识</span><br><span class="line"></span><br><span class="line">…&#x2F;my_icon.png</span><br><span class="line">…&#x2F;2.0x&#x2F;my_icon.png</span><br><span class="line">…&#x2F;3.0x&#x2F;my_icon.png</span><br></pre></td></tr></table></figure>

<p>主资源默认使用1.0倍的分辨率图片，设备像素比率为1.8的设备上 …/2.0x/my_icon.png 将被选择。对于2.7的设备像素比率 …/3.0x/my_icon.png 将被选择</p>
<p>加载图片，可以使用 AssetImage </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">AssetImage(<span class="string">&#x27;graphics/background.png&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>依赖包中的资源图片</li>
</ul>
<p>要加载依赖包中的图像，必须给 AssetImage 提供 package 参数</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">AssetImage(<span class="string">&#x27;icons/heart.png&#x27;</span>, package: <span class="string">&#x27;my_icons&#x27;</span>)</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">Image.asset(<span class="string">&#x27;icons/heart.png&#x27;</span>, package: <span class="string">&#x27;my_icons&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-7-调试-Flutter-应用"><a href="#2-7-调试-Flutter-应用" class="headerlink" title="2.7 调试 Flutter 应用"></a>2.7 调试 Flutter 应用</h4><h4 id="2-8-Flutter-异常捕获"><a href="#2-8-Flutter-异常捕获" class="headerlink" title="2.8 Flutter 异常捕获"></a>2.8 Flutter 异常捕获</h4><p><a href="https://book.flutterchina.club/preface.html">Flutter实战 第二版</a></p>
<p><a href="https://flutterchina.club/widgets/material/">Flutter 中文网</a></p>
<p><a href="https://flutter.cn/docs/cookbook">Flutter.cn</a></p>
]]></content>
  </entry>
  <entry>
    <title>《Flutter实战第二版》五：容器类组件</title>
    <url>/2022/01/18/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%BA%94%EF%BC%9A%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="5-容器类组件"><a href="#5-容器类组件" class="headerlink" title="5 容器类组件"></a>5 容器类组件</h3><p>布局类组件一般都需要接收一个 widget 数组（children），容器类组件一般只需要接收一个子 widget（child）</p>
<p>布局类 widget 是按照一定的排列方式来对其子 widget 进行排列；容器类widget一般只是包装其子 widget，对其添加一些修饰（补白或背景色等）、变换（旋转裁剪等）、或限制（大小等）</p>
<h4 id="5-1-Padding"><a href="#5-1-Padding" class="headerlink" title="5.1 Padding"></a>5.1 Padding</h4><p>可以给子节点添加填充（留白），和间距效果类似</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Padding(&#123;</span><br><span class="line">  ...</span><br><span class="line">  EdgeInsetsGeometry padding,</span><br><span class="line">  Widget child,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>EdgeInsetsGeometry 是一个抽象类，开发中一般使用 EdgeInsets 类，它是 EdgeInsetsGeometry 的一个子类，定义了一些设置填充的便捷方法</p>
<ul>
<li>EdgeInsets</li>
</ul>
<p>EdgeInsets 的便捷方法：</p>
<p><code>fromLTRB(double left, double top, double right, double bottom)</code> 分别指定四个方向的填充</p>
<p><code>all(double value)</code> 所有方向均使用相同数值填充</p>
<p><code>only(&#123;left, top, right ,bottom &#125;)</code> 设置某个方向的填充（可以同时指多个方向）</p>
<p><code>symmetric(&#123; vertical, horizontal &#125;)</code> 用于设置对称方向的填充，vertical 指 top 和bottom，horizontal 指 left 和 right</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaddingTestRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Padding(</span><br><span class="line">      <span class="comment">//上下左右各添加16像素补白</span></span><br><span class="line">      padding: EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">      child: Column(</span><br><span class="line">        <span class="comment">//显式指定对齐方式为左对齐，排除对齐干扰</span></span><br><span class="line">        crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Padding(</span><br><span class="line">            <span class="comment">//左边添加8像素补白</span></span><br><span class="line">            padding: <span class="keyword">const</span> EdgeInsets.only(left: <span class="number">8.0</span>),</span><br><span class="line">            child: Text(<span class="string">&quot;Hello world&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">          Padding(</span><br><span class="line">            <span class="comment">//垂直方向上下各添加8像素补白</span></span><br><span class="line">            padding: <span class="keyword">const</span> EdgeInsets.symmetric(vertical: <span class="number">8.0</span>),</span><br><span class="line">            child: Text(<span class="string">&quot;I am Jack&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">          Padding(</span><br><span class="line">            <span class="comment">// 分别指定四个方向的补白</span></span><br><span class="line">            padding: <span class="keyword">const</span> EdgeInsets.fromLTRB(<span class="number">20.0</span>,<span class="number">.0</span>,<span class="number">20.0</span>,<span class="number">20.0</span>),</span><br><span class="line">            child: Text(<span class="string">&quot;Your friend&quot;</span>),</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》五：容器类组件/WeChat6661e3955fcbc5012a3fbf2acb8b2009.png" alt="WeChat6661e3955fcbc5012a3fbf2acb8b2009" style="zoom:80%;" />

<h4 id="5-2-尺寸限制类容器"><a href="#5-2-尺寸限制类容器" class="headerlink" title="5.2 尺寸限制类容器"></a>5.2 尺寸限制类容器</h4><p>尺寸限制类容器用于限制容器大小，ConstrainedBox<code>、</code>SizedBox<code>、</code>UnconstrainedBox<code>、</code>AspectRatio 等</p>
<p>尺寸限制类容器涉及到Flutter 布局流程 ，确定子组件大小的步骤为：<br>上层组件向下层组件传递约束条件<br>下层组件确定自己的大小，然后告诉上层组件，注意下层组件的大小必须符合父组件的约束</p>
<h5 id="5-2-1-ConstrainedBox"><a href="#5-2-1-ConstrainedBox" class="headerlink" title="5.2.1 ConstrainedBox"></a>5.2.1 ConstrainedBox</h5><p>ConstrainedBox 用于对子组件添加额外约束</p>
<p>。。看 四：布局类组件 4.2 布局原理与约束</p>
<h4 id="5-3-装饰容器-DecoratedBox"><a href="#5-3-装饰容器-DecoratedBox" class="headerlink" title="5.3 装饰容器 DecoratedBox"></a>5.3 装饰容器 DecoratedBox</h4><p>DecoratedBox 可以在其子组件绘制前或后绘制一些装饰，如背景、边框、渐变等</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> DecoratedBox(&#123;</span><br><span class="line">  Decoration decoration,</span><br><span class="line">  DecorationPosition position = DecorationPosition.background,</span><br><span class="line">  Widget? child</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>decoration 代表将要绘制的装饰</p>
<p>position 决定哪里绘制，接收 DecorationPositon 的枚举，background 在子组件之后绘制，即背景，foreground 在子组件之上绘制，即前景</p>
<ul>
<li>BoxDecoration</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">BoxDecoration(&#123;</span><br><span class="line">  Color color, <span class="comment">//颜色</span></span><br><span class="line">  DecorationImage image,<span class="comment">//图片</span></span><br><span class="line">  BoxBorder border, <span class="comment">//边框</span></span><br><span class="line">  BorderRadiusGeometry borderRadius, <span class="comment">//圆角</span></span><br><span class="line">  <span class="built_in">List</span>&lt;BoxShadow&gt; boxShadow, <span class="comment">//阴影,可以指定多个</span></span><br><span class="line">  Gradient gradient, <span class="comment">//渐变</span></span><br><span class="line">  BlendMode backgroundBlendMode, <span class="comment">//背景混合模式</span></span><br><span class="line">  BoxShape shape = BoxShape.rectangle, <span class="comment">//形状</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>绘制一个带阴影的背景色渐变的按钮</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">DecoratedBox(</span><br><span class="line">   decoration: BoxDecoration(</span><br><span class="line">     gradient: LinearGradient(colors:[Colors.red,Colors.orange.shade700]), <span class="comment">//背景渐变</span></span><br><span class="line">     borderRadius: BorderRadius.circular(<span class="number">3.0</span>), <span class="comment">//3像素圆角</span></span><br><span class="line">     boxShadow: [ <span class="comment">//阴影</span></span><br><span class="line">       BoxShadow(</span><br><span class="line">         color:Colors.black54,</span><br><span class="line">         offset: Offset(<span class="number">2.0</span>,<span class="number">2.0</span>),</span><br><span class="line">         blurRadius: <span class="number">4.0</span></span><br><span class="line">       )</span><br><span class="line">     ]</span><br><span class="line">   ),</span><br><span class="line">  child: Padding(</span><br><span class="line">    padding: EdgeInsets.symmetric(horizontal: <span class="number">80.0</span>, vertical: <span class="number">18.0</span>),</span><br><span class="line">    child: Text(<span class="string">&quot;Login&quot;</span>, style: TextStyle(color: Colors.white),),</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%BA%94%EF%BC%9A%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChatb229d2ef3c49cb4ea45184fc4edabea2.png" alt="WeChatb229d2ef3c49cb4ea45184fc4edabea2"></p>
<p>上面用到 LinearGradient 类，是用于定义线性渐变的类，Flutter 还提供了其它渐变配置 RadialGradient、SweepGradient</p>
<h4 id="5-4-变换"><a href="#5-4-变换" class="headerlink" title="5.4 变换"></a>5.4 变换</h4><p>Matrix4 是一个 4D 矩阵</p>
<ul>
<li>平移</li>
</ul>
<p>Transform.translate  接收一个 offset 参数，可以在绘制是沿 x y 轴对子组件平移指定距离</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">DecoratedBox(</span><br><span class="line">  decoration:BoxDecoration(color: Colors.red),</span><br><span class="line">  <span class="comment">//默认原点为左上角，左移20像素，向上平移5像素  </span></span><br><span class="line">  child: Transform.translate(</span><br><span class="line">    offset: Offset(<span class="number">-20.0</span>, <span class="number">-5.0</span>),</span><br><span class="line">    child: Text(<span class="string">&quot;Hello world&quot;</span>),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%BA%94%EF%BC%9A%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChat1771bb23256be799e6f11bbc2a98325a.png" alt="WeChat1771bb23256be799e6f11bbc2a98325a"></p>
<ul>
<li>旋转</li>
</ul>
<p>Transform.rotate </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span> <span class="keyword">as</span> math;</span><br><span class="line">DecoratedBox(</span><br><span class="line">  decoration:BoxDecoration(color: Colors.red),</span><br><span class="line">  child: Transform.rotate(</span><br><span class="line">    <span class="comment">//旋转90度</span></span><br><span class="line">    angle:math.pi/<span class="number">2</span> ,</span><br><span class="line">    child: Text(<span class="string">&quot;Hello world&quot;</span>),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>缩放</li>
</ul>
<p>Transform.scale</p>
<ul>
<li>RotatedBox</li>
</ul>
<p>Transform 的变换是应用在绘制阶段，不是应用在布局（layout）阶段，无论对子组件应用何种变换，其占用空间大小和在屏幕上的位置都是固定不变的</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Row(</span><br><span class="line">  mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    DecoratedBox(</span><br><span class="line">      decoration:BoxDecoration(color: Colors.red),</span><br><span class="line">      child: Transform.scale(scale: <span class="number">1.5</span>,</span><br><span class="line">          child: Text(<span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line">      )</span><br><span class="line">    ),</span><br><span class="line">    Text(<span class="string">&quot;你好&quot;</span>, style: TextStyle(color: Colors.green, fontSize: <span class="number">18.0</span>),)</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%BA%94%EF%BC%9A%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChat7c79d01b2fac91e32fdb2602d6be1ee1.png" alt="WeChat7c79d01b2fac91e32fdb2602d6be1ee1"></p>
<p>第一个 Text 放大后，绘制时会放大，但占用空间还是红色部分</p>
<p>RotatedBox 的变换是在 layout 阶段，会影响子组件位置和大小</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Row(</span><br><span class="line">  mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    DecoratedBox(</span><br><span class="line">      decoration: BoxDecoration(color: Colors.red),</span><br><span class="line">      <span class="comment">//将Transform.rotate换成RotatedBox  </span></span><br><span class="line">      child: RotatedBox(</span><br><span class="line">        quarterTurns: <span class="number">1</span>, <span class="comment">//旋转90度(1/4圈)</span></span><br><span class="line">        child: Text(<span class="string">&quot;Hello world&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">    Text(<span class="string">&quot;你好&quot;</span>, style: TextStyle(color: Colors.green, fontSize: <span class="number">18.0</span>),)</span><br><span class="line">  ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%BA%94%EF%BC%9A%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChatf5d0a9a9d12548219cbe16cae734cd85.png" alt="WeChatf5d0a9a9d12548219cbe16cae734cd85"></p>
<h4 id="5-5-Container"><a href="#5-5-Container" class="headerlink" title="5.5 Container"></a>5.5 Container</h4><p>Container 是一个组合类容器，<code>DecoratedBox</code>、<code>ConstrainedBox、Transform</code>、<code>Padding</code>、<code>Align</code> 等组件组合的一个多功能容器</p>
<p>只需要通过一个 Container 组件可以实现同时需要装饰、变换、限制的场景</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(&#123;</span><br><span class="line">  <span class="keyword">this</span>.alignment,</span><br><span class="line">  <span class="keyword">this</span>.padding, <span class="comment">//容器内补白，属于decoration的装饰范围</span></span><br><span class="line">  Color color, <span class="comment">// 背景色</span></span><br><span class="line">  Decoration decoration, <span class="comment">// 背景装饰</span></span><br><span class="line">  Decoration foregroundDecoration, <span class="comment">//前景装饰</span></span><br><span class="line">  <span class="built_in">double</span> width,<span class="comment">//容器的宽度</span></span><br><span class="line">  <span class="built_in">double</span> height, <span class="comment">//容器的高度</span></span><br><span class="line">  BoxConstraints constraints, <span class="comment">//容器大小的限制条件</span></span><br><span class="line">  <span class="keyword">this</span>.margin,<span class="comment">//容器外补白，不属于decoration的装饰范围</span></span><br><span class="line">  <span class="keyword">this</span>.transform, <span class="comment">//变换</span></span><br><span class="line">  <span class="keyword">this</span>.child,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>容器大小可以通过 width、height 属性来指定，也可以通过 constraints 来指定，如果同时存在，width、height 优先</p>
<p>color 和 decoration 是互斥的</p>
<p>例子</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  margin: EdgeInsets.only(top: <span class="number">50.0</span>, left: <span class="number">120.0</span>),</span><br><span class="line">  constraints: BoxConstraints.tightFor(width: <span class="number">200.0</span>, height: <span class="number">150.0</span>),<span class="comment">//卡片大小</span></span><br><span class="line">  decoration: BoxDecoration(  <span class="comment">//背景装饰</span></span><br><span class="line">    gradient: RadialGradient( <span class="comment">//背景径向渐变</span></span><br><span class="line">      colors: [Colors.red, Colors.orange],</span><br><span class="line">      center: Alignment.topLeft,</span><br><span class="line">      radius: <span class="number">.98</span>,</span><br><span class="line">    ),</span><br><span class="line">    boxShadow: [</span><br><span class="line">      <span class="comment">//卡片阴影</span></span><br><span class="line">      BoxShadow(</span><br><span class="line">        color: Colors.black54,</span><br><span class="line">        offset: Offset(<span class="number">2.0</span>, <span class="number">2.0</span>),</span><br><span class="line">        blurRadius: <span class="number">4.0</span>,</span><br><span class="line">      )</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">  transform: Matrix4.rotationZ(<span class="number">.2</span>),<span class="comment">//卡片倾斜变换</span></span><br><span class="line">  alignment: Alignment.center, <span class="comment">//卡片内文字居中</span></span><br><span class="line">  child: Text(</span><br><span class="line">    <span class="comment">//卡片文字</span></span><br><span class="line">    <span class="string">&quot;5.20&quot;</span>, style: TextStyle(color: Colors.white, fontSize: <span class="number">40.0</span>),</span><br><span class="line">  ),</span><br><span class="line"> )</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》五：容器类组件/WeChat351cd0ae2781d4d6e03e8d598ef69023.png" alt="WeChat351cd0ae2781d4d6e03e8d598ef69023" style="zoom:80%;" />

<ul>
<li>Padding 和 Margin</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  margin: EdgeInsets.all(<span class="number">20.0</span>), <span class="comment">//容器外补白</span></span><br><span class="line">  color: Colors.orange,</span><br><span class="line">  child: Text(<span class="string">&quot;Hello world!&quot;</span>),</span><br><span class="line">),</span><br><span class="line">Container(</span><br><span class="line">  padding: EdgeInsets.all(<span class="number">20.0</span>), <span class="comment">//容器内补白</span></span><br><span class="line">  color: Colors.orange,</span><br><span class="line">  child: Text(<span class="string">&quot;Hello world!&quot;</span>),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%BA%94%EF%BC%9A%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChat48a70d601784f808caac89583b0d4d09.png" alt="WeChat48a70d601784f808caac89583b0d4d09"></p>
<p>margin 的留白在容器外部，padding 的留白在容器内部</p>
<h4 id="5-6-裁剪"><a href="#5-6-裁剪" class="headerlink" title="5.6 裁剪"></a>5.6 裁剪</h4><table>
<thead>
<tr>
<th>剪裁Widget</th>
<th>默认行为</th>
</tr>
</thead>
<tbody><tr>
<td>ClipOval</td>
<td>子组件为正方形时剪裁成内贴圆形；为矩形时，剪裁成内贴椭圆</td>
</tr>
<tr>
<td>ClipRRect</td>
<td>将子组件剪裁为圆角矩形</td>
</tr>
<tr>
<td>ClipRect</td>
<td>默认剪裁掉子组件布局空间之外的绘制内容（溢出部分剪裁）</td>
</tr>
<tr>
<td>ClipPath</td>
<td>按照自定义的路径剪裁</td>
</tr>
</tbody></table>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClipTestRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// 头像  </span></span><br><span class="line">    Widget avatar = Image.asset(<span class="string">&quot;imgs/avatar.png&quot;</span>, width: <span class="number">60.0</span>);</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          avatar, <span class="comment">//不剪裁</span></span><br><span class="line">          ClipOval(child: avatar), <span class="comment">//剪裁为圆形</span></span><br><span class="line">          ClipRRect( <span class="comment">//剪裁为圆角矩形</span></span><br><span class="line">            borderRadius: BorderRadius.circular(<span class="number">5.0</span>),</span><br><span class="line">            child: avatar,</span><br><span class="line">          ), </span><br><span class="line">          Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Align(</span><br><span class="line">                alignment: Alignment.topLeft,</span><br><span class="line">                widthFactor: <span class="number">.5</span>,<span class="comment">//宽度设为原来宽度一半，另一半会溢出</span></span><br><span class="line">                child: avatar,</span><br><span class="line">              ),</span><br><span class="line">              Text(<span class="string">&quot;你好世界&quot;</span>, style: TextStyle(color: Colors.green),)</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">          Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              ClipRect(<span class="comment">//将溢出部分剪裁</span></span><br><span class="line">                child: Align(</span><br><span class="line">                  alignment: Alignment.topLeft,</span><br><span class="line">                  widthFactor: <span class="number">.5</span>,<span class="comment">//宽度设为原来宽度一半</span></span><br><span class="line">                  child: avatar,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              Text(<span class="string">&quot;你好世界&quot;</span>,style: TextStyle(color: Colors.green))</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%BA%94%EF%BC%9A%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChatedd5eb5c6aef971412aded090c9a4d5d.png" alt="WeChatedd5eb5c6aef971412aded090c9a4d5d"></p>
<ul>
<li>CustomClipper</li>
</ul>
<p>自定义裁剪区域</p>
<p>自定义一个 CustomClipper</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClipper</span> <span class="keyword">extends</span> <span class="title">CustomClipper</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Rect getClip(Size size) &#123;</span><br><span class="line">    <span class="keyword">return</span> Rect.fromLTWH(<span class="number">10.0</span>, <span class="number">15.0</span>, <span class="number">40.0</span>, <span class="number">30.0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldReclip(<span class="keyword">covariant</span> CustomClipper&lt;Rect&gt; oldClipper) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>getClip 用于获取裁剪区域的接口，返回的裁剪区域为 Rect.fromLTWH(10.0, 15.0, 40.0, 30.0)</p>
<p>shouldReclip 接口决定是否重新裁剪，如果应用中裁剪区域不会发生变化时应该返回false，就不会触发重新裁剪，避免不必要的性能开销，如果裁剪区域会发生变化，那么变化后应该返回 true 来重新执行裁剪</p>
<p>然后通过 ClipRect 来执行裁剪 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">DecoratedBox(</span><br><span class="line">  decoration: BoxDecoration(</span><br><span class="line">    color: Colors.red</span><br><span class="line">  ),</span><br><span class="line">  child: ClipRect(</span><br><span class="line">    clipper: MyClipper(), <span class="comment">//使用自定义的clipper</span></span><br><span class="line">    child: avatar</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>ClipPath 可以按照自定义的路径实现裁剪，需要自定义一个 <code>CustomClipper&lt;Path&gt;</code> 类型的Clipper，定义方式和 MyClipper 类似，getClip 返回一个 Path</p>
<h4 id="5-7-空间适配-FittedBox"><a href="#5-7-空间适配-FittedBox" class="headerlink" title="5.7 空间适配 FittedBox"></a>5.7 空间适配 FittedBox</h4><h5 id="5-7-1-FittedBox"><a href="#5-7-1-FittedBox" class="headerlink" title="5.7.1 FittedBox"></a>5.7.1 FittedBox</h5><p>子组件大小超出父组件大小时，如果不经过处理的话 Flutter 中就会显示一个溢出警告</p>
<p>为了方便开发者自定义适配规则，Flutter 提供了 FittedBox 组件</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> FittedBox(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  <span class="keyword">this</span>.fit = BoxFit.contain, <span class="comment">// 适配方式</span></span><br><span class="line">  <span class="keyword">this</span>.alignment = Alignment.center, <span class="comment">//对齐方式</span></span><br><span class="line">  <span class="keyword">this</span>.clipBehavior = Clip.none, <span class="comment">//是否剪裁</span></span><br><span class="line">  Widget? child,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Center(</span><br><span class="line">    child: Column(</span><br><span class="line">      children: [</span><br><span class="line">        wContainer(BoxFit.none),</span><br><span class="line">        Text(<span class="string">&#x27;Wendux&#x27;</span>),</span><br><span class="line">        wContainer(BoxFit.contain),</span><br><span class="line">        Text(<span class="string">&#x27;Flutter中国&#x27;</span>),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget wContainer(BoxFit boxFit) &#123;</span><br><span class="line">  <span class="keyword">return</span> Container(</span><br><span class="line">    width: <span class="number">50</span>,</span><br><span class="line">    height: <span class="number">50</span>,</span><br><span class="line">    color: Colors.red,</span><br><span class="line">    child: FittedBox(</span><br><span class="line">      fit: boxFit,</span><br><span class="line">      <span class="comment">// 子容器超过父容器大小</span></span><br><span class="line">      child: Container(width: <span class="number">60</span>, height: <span class="number">70</span>, color: Colors.blue),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E4%BA%94%EF%BC%9A%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChat2c36ee6dff4f283649d2ef335b96036f.png" alt="WeChat2c36ee6dff4f283649d2ef335b96036f"></p>
<p>父 Container 要比子 Container 小，没置顶任何适配方式时，子组件按照真实大小绘制，蓝色区域超出父组件空间，因而看不到红色区域</p>
<p>第二个适配方式 BoxFit.contain，含义是按子组件的比例缩放，尽可能多的占据父组件的空间，子组件的长宽不相同，按照比例适配父组件后，父组件能显示一部分</p>
<p>未指定适配方式时，子组件的大小超出了父组件，但 FittedBox 自身还是要遵守父组件传递的约束，所以 FittedBox 本身大小是 50x50，所以蓝色下面文本重叠了</p>
<p>如果不想让蓝色超出父组件布局范围，可以使用 ClipRec 对超出部分裁剪掉</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ClipRect( <span class="comment">// 将超出子组件布局范围的绘制内容剪裁掉</span></span><br><span class="line">  child: Container(</span><br><span class="line">    width: <span class="number">50</span>,</span><br><span class="line">    height: <span class="number">50</span>,</span><br><span class="line">    color: Colors.red,</span><br><span class="line">    child: FittedBox(</span><br><span class="line">      fit: boxFit,</span><br><span class="line">      child: Container(width: <span class="number">60</span>, height: <span class="number">70</span>, color: Colors.blue),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="5-7-2-单行缩放布局"><a href="#5-7-2-单行缩放布局" class="headerlink" title="5.7.2 单行缩放布局"></a>5.7.2 单行缩放布局</h5><p>三个数据指标，需要一行显示，我们希望当无法一行显示时能够对组件进行适当的缩放确保一行显示</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"> Widget build(BuildContext context) &#123;</span><br><span class="line">   <span class="keyword">return</span> Center(</span><br><span class="line">     child: Column(</span><br><span class="line">       children:  [</span><br><span class="line">         wRow(<span class="string">&#x27; 90000000000000000 &#x27;</span>),</span><br><span class="line">         FittedBox(child: wRow(<span class="string">&#x27; 90000000000000000 &#x27;</span>)),</span><br><span class="line">         wRow(<span class="string">&#x27; 800 &#x27;</span>),</span><br><span class="line">         FittedBox(child: wRow1(<span class="string">&#x27; 800 &#x27;</span>)),</span><br><span class="line">   		]</span><br><span class="line">       .map((e) =&gt; Padding(</span><br><span class="line">             padding: EdgeInsets.symmetric(vertical: <span class="number">20</span>),</span><br><span class="line">             child: e,</span><br><span class="line">           ))</span><br><span class="line">       .toList();,</span><br><span class="line">     ),</span><br><span class="line">   );</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接使用Row</span></span><br><span class="line"> Widget wRow(<span class="built_in">String</span> text) &#123;</span><br><span class="line">   Widget child = Text(text);</span><br><span class="line">   child = Row(</span><br><span class="line">     mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">     children: [child, child, child],</span><br><span class="line">   );</span><br><span class="line">   <span class="keyword">return</span> child;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》五：容器类组件/WeChatc17b2a1e3c1f5eddd9695a65c7bf9423.png" alt="WeChatc17b2a1e3c1f5eddd9695a65c7bf9423" style="zoom:80%;" />

<p>Row 在主轴的对齐方式为 MainAxisAlignment.spaceEvenly，会将水平方向的剩余显示空间均分成多份穿插在每个 child 之间</p>
<p>第一行超出屏幕宽度，直接使用 Row 会溢出</p>
<p>第二行加上 FittedBox 就可以按比例缩放至一行显示</p>
<p>Row 没被 FittedBox 包裹时，父组件传给 Row 的约束的 maxWidth 为屏幕宽度，Row的宽度也就是屏幕宽度</p>
<p>当被 FittedBox 包裹时，FittedBox 传给 Row的约束的 maxWidth 为无限大，因此 Row的最终宽度就是子组件的宽度之和</p>
<p>所以只需要让 FittedBox 子元素接收到的约束的 maxWidth 为屏幕宽度即可</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleLineFittedBox</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> SingleLineFittedBox(&#123;Key? key,<span class="keyword">this</span>.child&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"> <span class="keyword">final</span> Widget? child;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> LayoutBuilder(</span><br><span class="line">      builder: (_, constraints) &#123;</span><br><span class="line">        <span class="keyword">return</span> FittedBox(</span><br><span class="line">          child: ConstrainedBox(</span><br><span class="line">            constraints: constraints.copyWith(</span><br><span class="line">              minWidth: constraints.maxWidth,</span><br><span class="line">              maxWidth: <span class="built_in">double</span>.infinity,</span><br><span class="line">              <span class="comment">//maxWidth: constraints.maxWidth</span></span><br><span class="line">            ),</span><br><span class="line">            child: child,</span><br><span class="line">          ),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》五：容器类组件/WeChatf8d080b6a4934b277d35eae7dee059d2.png" alt="WeChatf8d080b6a4934b277d35eae7dee059d2" style="zoom:80%;" />

<h4 id="5-8-Scaffold"><a href="#5-8-Scaffold" class="headerlink" title="5.8 Scaffold"></a>5.8 Scaffold</h4><h5 id="5-8-1-Scaffold"><a href="#5-8-1-Scaffold" class="headerlink" title="5.8.1 Scaffold"></a>5.8.1 Scaffold</h5><p>Scaffold 是一个路由页的骨架</p>
<p>实现一个页面：<br>1.一个导航栏<br>2.导航栏右边分享按钮<br>3.一个抽屉菜单<br>4.有一个底部导航<br>5.右下角悬浮动作按钮</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScaffoldRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ScaffoldRouteState createState() =&gt; _ScaffoldRouteState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ScaffoldRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ScaffoldRoute</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _selectedIndex = <span class="number">1</span>;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">        actions: [</span><br><span class="line">          IconButton(onPressed: ()&#123;&#125;, icon: Icon(Icons.share))</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">      bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          items: [</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.home), title: Text(<span class="string">&#x27;Home&#x27;</span>)),</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.business), title:Text(<span class="string">&#x27;Business&#x27;</span>)),</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.school), title: Text(<span class="string">&#x27;School&#x27;</span>)),</span><br><span class="line">          ],</span><br><span class="line">          currentIndex: _selectedIndex,</span><br><span class="line">          fixedColor: Colors.blue, <span class="comment">//选中index图标颜色</span></span><br><span class="line">          onTap: _onItemTapped,</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">          child: Icon(Icons.add),</span><br><span class="line">          onPressed: _onAdd,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> _onItemTapped(<span class="built_in">int</span> index) &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _selectedIndex = index;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> _onAdd() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》五：容器类组件/WeChataf1f187dc2c0ab4fa149ec5e1962aaf7.png" alt="WeChataf1f187dc2c0ab4fa149ec5e1962aaf7" style="zoom:80%;" />

<p>AppBar 导航栏骨架</p>
<p>BottomNavigationBar 底部导航栏</p>
<p>FloatingActionButton 悬浮按钮</p>
<h5 id="5-8-2-AppBar"><a href="#5-8-2-AppBar" class="headerlink" title="5.8.2 AppBar"></a>5.8.2 AppBar</h5><p>APPBar 是一个 Material 风格的导航栏，通过它可以设置导航栏标题、导航栏菜单、导航栏底部Tab标题等</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">AppBar(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  <span class="keyword">this</span>.leading, <span class="comment">//导航栏最左侧Widget，常见为抽屉菜单按钮或返回按钮。</span></span><br><span class="line">  <span class="keyword">this</span>.automaticallyImplyLeading = <span class="keyword">true</span>, <span class="comment">//如果leading为null，是否自动实现默认的leading按钮</span></span><br><span class="line">  <span class="keyword">this</span>.title,<span class="comment">// 页面标题</span></span><br><span class="line">  <span class="keyword">this</span>.actions, <span class="comment">// 导航栏右侧菜单</span></span><br><span class="line">  <span class="keyword">this</span>.bottom, <span class="comment">// 导航栏底部菜单，通常为Tab按钮组</span></span><br><span class="line">  <span class="keyword">this</span>.elevation = <span class="number">4.0</span>, <span class="comment">// 导航栏阴影</span></span><br><span class="line">  <span class="keyword">this</span>.centerTitle, <span class="comment">//标题是否居中 </span></span><br><span class="line">  <span class="keyword">this</span>.backgroundColor,</span><br><span class="line">  ...   <span class="comment">//其它属性见源码注释</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果给 Scaffold 添加了菜单，默认情况下 Scaffold 会自动将 leading 设置为菜单按钮，点击它就可以打开抽屉菜单，也可以自定义图标</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Scaffold(</span><br><span class="line">  appBar: AppBar(</span><br><span class="line">    title: Text(<span class="string">&quot;App Name&quot;</span>),</span><br><span class="line">    leading: Builder(builder: (context) &#123;</span><br><span class="line">      <span class="keyword">return</span> IconButton(</span><br><span class="line">        icon: Icon(Icons.dashboard, color: Colors.white), <span class="comment">//自定义图标</span></span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          <span class="comment">// 打开抽屉菜单  </span></span><br><span class="line">          Scaffold.of(context).openDrawer(); </span><br><span class="line">        &#125;,</span><br><span class="line">      );</span><br><span class="line">    &#125;),</span><br><span class="line">    ...  </span><br><span class="line">  )  </span><br></pre></td></tr></table></figure>

<h5 id="5-8-3-抽屉菜单-Drawer"><a href="#5-8-3-抽屉菜单-Drawer" class="headerlink" title="5.8.3 抽屉菜单 Drawer"></a>5.8.3 抽屉菜单 Drawer</h5><p>Scaffold 的 drawer 和 endDrawer 属性可以分别接受一个 widget 来作为左、右抽屉菜单</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDrawer</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyDrawer(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Drawer(</span><br><span class="line">      child: MediaQuery.removePadding(</span><br><span class="line">        context: context,</span><br><span class="line">        <span class="comment">//移除抽屉菜单顶部默认留白</span></span><br><span class="line">        removeTop: <span class="keyword">true</span>,</span><br><span class="line">        child: Column(</span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Padding(</span><br><span class="line">              padding: <span class="keyword">const</span> EdgeInsets.only(top: <span class="number">38.0</span>),</span><br><span class="line">              child: Row(</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  Padding(</span><br><span class="line">                    padding: <span class="keyword">const</span> EdgeInsets.symmetric(horizontal: <span class="number">16.0</span>),</span><br><span class="line">                    child: ClipOval(</span><br><span class="line">                      child: Image.asset(</span><br><span class="line">                        <span class="string">&quot;img/avatar.png&quot;</span>,</span><br><span class="line">                        width: <span class="number">80</span>,</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                  Text(</span><br><span class="line">                    <span class="string">&quot;Wendux&quot;</span>,</span><br><span class="line">                    style: TextStyle(fontWeight: FontWeight.bold),</span><br><span class="line">                  )</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            Expanded(</span><br><span class="line">              child: ListView(</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  ListTile(</span><br><span class="line">                    leading: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">                    title: <span class="keyword">const</span> Text(<span class="string">&#x27;Add account&#x27;</span>),</span><br><span class="line">                  ),</span><br><span class="line">                  ListTile(</span><br><span class="line">                    leading: <span class="keyword">const</span> Icon(Icons.settings),</span><br><span class="line">                    title: <span class="keyword">const</span> Text(<span class="string">&#x27;Manage accounts&#x27;</span>),</span><br><span class="line">                  ),</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抽屉菜单通常将 Drawer 组件作为根节点，MediaQuery.removePadding 可以移除 Drawer 默认的一些留白（比如Drawer默认顶部会留手机状态栏等高的留白）</p>
<h5 id="5-8-4-FloatingActionButton"><a href="#5-8-4-FloatingActionButton" class="headerlink" title="5.8.4 FloatingActionButton"></a>5.8.4 FloatingActionButton</h5><p>可以通过 floatingActionButtonLocation 属性指定其在页面中悬浮的位置</p>
<h5 id="5-8-5-底部-Tab-导航栏"><a href="#5-8-5-底部-Tab-导航栏" class="headerlink" title="5.8.5 底部 Tab 导航栏"></a>5.8.5 底部 Tab 导航栏</h5><p>Material 组件库中提供了一个 BottomAPPBar 组件，可以和 FloatingActionButton 配合实现打洞效果</p>
<img src="《Flutter实战第二版》五：容器类组件/WeChat32ad216f5189993f92ba6d3d40aae74c.png" alt="WeChat32ad216f5189993f92ba6d3d40aae74c" style="zoom:80%;" />

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">bottomNavigationBar: BottomAppBar(</span><br><span class="line">  color: Colors.white,</span><br><span class="line">  shape: CircularNotchedRectangle(), <span class="comment">// 底部导航栏打一个圆形的洞</span></span><br><span class="line">  child: Row(</span><br><span class="line">    children: [</span><br><span class="line">      IconButton(icon: Icon(Icons.home)),</span><br><span class="line">      SizedBox(), <span class="comment">//中间位置空出</span></span><br><span class="line">      IconButton(icon: Icon(Icons.business)),</span><br><span class="line">    ],</span><br><span class="line">    mainAxisAlignment: MainAxisAlignment.spaceAround, <span class="comment">//均分底部导航栏横向空间</span></span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>上面代码没有控制打洞位置的属性，实际上打洞位置取决于 FloatingActionButton 的位置</p>
<p>上面 FloatingActionButton 的位置为</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,</span><br></pre></td></tr></table></figure>

<p>打洞位置在导航栏正中间</p>
<p>shape 属性决定洞的外形，也可以自定义外形</p>
]]></content>
  </entry>
  <entry>
    <title>《Flutter实战第二版》十一：文件操作与网络请求</title>
    <url>/2022/01/26/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%8D%81%E4%B8%80%EF%BC%9A%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<h3 id="11-文件操作与网络请求"><a href="#11-文件操作与网络请求" class="headerlink" title="11 文件操作与网络请求"></a>11 文件操作与网络请求</h3><h4 id="11-1-文件操作"><a href="#11-1-文件操作" class="headerlink" title="11.1 文件操作"></a>11.1 文件操作</h4><ul>
<li>临时目录</li>
</ul>
<p>getTemporaryDirectory() 获取，系统可随时清除的临时目录。iOS 上对应 NSTemporaryDirectory()，Android 上是 getCacheDir()</p>
<ul>
<li>文档目录</li>
</ul>
<p>getApplicationDocumentsDirectory() 获取应用程序的文档目录。iOS 上对应 NSDocumentDirectory，Android 上是 APPData 目录</p>
<ul>
<li>外部存储目录</li>
</ul>
<p>getExternalStorageDirectory() 获取外部存储目录，如 SD 卡，iOS 不支持外部目录，iOS 下调用会抛出 UnsupportedError 异常，Android 中是 getExternalStorageDirectory 的返回值</p>
<p>一旦你的 Flutter 应用程序有一个文件位置的引用，可以使用 dart:io API来执行对文件系统的读/写操作</p>
<ul>
<li>示例</li>
</ul>
<p>计数器示例，退出重启后可以恢复点击次数，用文件来保存数据</p>
<p>引入 PathProvider 插件，pubspec.yaml 中添加</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">path_provider: ^<span class="number">2.0</span><span class="number">.8</span></span><br></pre></td></tr></table></figure>

<p>实现 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:io&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:path_provider/path_provider.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileOperationRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  FileOperationRoute(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _FileOperationRouteState createState() =&gt; _FileOperationRouteState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_FileOperationRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">FileOperationRoute</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">//从文件读取点击次数</span></span><br><span class="line">    _readCounter().then((<span class="built_in">int</span> value) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _counter = value;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;File&gt; _getLocalFile() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// 获取应用目录</span></span><br><span class="line">    <span class="built_in">String</span> dir = (<span class="keyword">await</span> getApplicationDocumentsDirectory()).path;</span><br><span class="line">    <span class="keyword">return</span> File(<span class="string">&#x27;<span class="subst">$dir</span>/counter.txt&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="built_in">int</span>&gt; _readCounter() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      File file = <span class="keyword">await</span> _getLocalFile();</span><br><span class="line">      <span class="comment">// 读取点击次数（以字符串）</span></span><br><span class="line">      <span class="built_in">String</span> contents = <span class="keyword">await</span> file.readAsString();</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">int</span>.parse(contents);</span><br><span class="line">    &#125; <span class="keyword">on</span> FileSystemException &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _incrementCounter() <span class="keyword">async</span> &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _counter++;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 将点击次数以字符串类型写到文件中</span></span><br><span class="line">    <span class="keyword">await</span> (<span class="keyword">await</span> _getLocalFile()).writeAsString(<span class="string">&#x27;<span class="subst">$_counter</span>&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;文件操作&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(<span class="string">&#x27;点击了 <span class="subst">$_counter</span> 次&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: _incrementCounter,</span><br><span class="line">        tooltip: <span class="string">&#x27;Increment&#x27;</span>,</span><br><span class="line">        child: Icon(Icons.add),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》十一：文件操作与网络请求/WeChat090c4738bd95a6d28745c73778204758.png" alt="WeChat090c4738bd95a6d28745c73778204758" style="zoom:80%;" />

<p>实际开发中如果要存储一些简单数据，使用 shared_preferences 插件</p>
<h4 id="11-2-通过-HttpClient-发起-HTTP-请求"><a href="#11-2-通过-HttpClient-发起-HTTP-请求" class="headerlink" title="11.2 通过 HttpClient 发起 HTTP 请求"></a>11.2 通过 HttpClient 发起 HTTP 请求</h4><p>使用 HttpClient 发起请求分为五步</p>
<ol>
<li>创建 HttpClient</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">HttpClient httpClient = HttpClient();</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>打开HTTP连接，设置请求头</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">HttpClientRequest request = <span class="keyword">await</span> httpClient.getUrl(uri);</span><br></pre></td></tr></table></figure>

<p>这一步可以使用任意Http Method，如<code>httpClient.post(...)</code>、<code>httpClient.delete(...)</code>等。如果包含Query参数，可以在构建uri时添加</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Uri</span> uri = <span class="built_in">Uri</span>(scheme: <span class="string">&quot;https&quot;</span>, host: <span class="string">&quot;flutterchina.club&quot;</span>, queryParameters: &#123;</span><br><span class="line">    <span class="string">&quot;xx&quot;</span>:<span class="string">&quot;xx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;yy&quot;</span>:<span class="string">&quot;dd&quot;</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>通过 HttpClientRequest 可以设置请求 header</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">request.headers.add(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果是post或put等可以携带请求体方法，可以通过HttpClientRequest对象发送request body</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> payload=<span class="string">&quot;...&quot;</span>;</span><br><span class="line">request.add(utf8.encode(payload)); </span><br><span class="line"><span class="comment">//request.addStream(_inputStream); //可以直接添加输入流</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>等待连接服务器</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">HttpClientResponse response = <span class="keyword">await</span> request.close();</span><br></pre></td></tr></table></figure>

<p>这一步完成后，请求信息就已经发送给服务器了，返回一个<code>HttpClientResponse</code>对象，它包含响应头（header）和响应流(响应体的Stream)，接下来就可以通过读取响应流来获取响应内容</p>
<ol start="4">
<li>读取响应内容</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> responseBody = <span class="keyword">await</span> response.transform(utf8.decoder).join();</span><br></pre></td></tr></table></figure>

<p>我们通过读取响应流来获取服务器返回的数据，在读取时我们可以设置编码格式，这里是utf8</p>
<ol start="5">
<li>请求结束，关闭<code>HttpClient</code></li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">httpClient.close();</span><br></pre></td></tr></table></figure>

<p>关闭client后，通过该client发起的所有请求都会中止</p>
<ul>
<li>示例</li>
</ul>
<p>获取百度首页 html</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:io&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpTestRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _HttpTestRouteState createState() =&gt; _HttpTestRouteState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_HttpTestRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">HttpTestRoute</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> _loading = <span class="keyword">false</span>;</span><br><span class="line">  <span class="built_in">String</span> _text = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> SingleChildScrollView(</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          ElevatedButton(</span><br><span class="line">            child: Text(<span class="string">&quot;获取百度首页&quot;</span>),</span><br><span class="line">            onPressed: _loading ? <span class="keyword">null</span> : request,</span><br><span class="line">          ),</span><br><span class="line">          Container(</span><br><span class="line">            width: MediaQuery.of(context).size.width - <span class="number">50.0</span>,</span><br><span class="line">            child: Text(_text.replaceAll(<span class="built_in">RegExp</span>(<span class="string">r&quot;\s&quot;</span>), <span class="string">&quot;&quot;</span>)),</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request() <span class="keyword">async</span> &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _loading = <span class="keyword">true</span>;</span><br><span class="line">      _text = <span class="string">&quot;正在请求...&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//创建一个HttpClient</span></span><br><span class="line">      HttpClient httpClient = HttpClient();</span><br><span class="line">      <span class="comment">//打开Http连接</span></span><br><span class="line">      HttpClientRequest request =</span><br><span class="line">          <span class="keyword">await</span> httpClient.getUrl(<span class="built_in">Uri</span>.parse(<span class="string">&quot;https://www.baidu.com&quot;</span>));</span><br><span class="line">      <span class="comment">//使用iPhone的UA</span></span><br><span class="line">      request.headers.add(</span><br><span class="line">        <span class="string">&quot;user-agent&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.0 Mobile/14E304 Safari/602.1&quot;</span>,</span><br><span class="line">      );</span><br><span class="line">      <span class="comment">//等待连接服务器（会将请求信息发送给服务器）</span></span><br><span class="line">      HttpClientResponse response = <span class="keyword">await</span> request.close();</span><br><span class="line">      <span class="comment">//读取响应内容</span></span><br><span class="line">      _text = <span class="keyword">await</span> response.transform(utf8.decoder).join();</span><br><span class="line">      <span class="comment">//输出响应头</span></span><br><span class="line">      <span class="built_in">print</span>(response.headers);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//关闭client后，通过该client发起的所有请求都会中止。</span></span><br><span class="line">      httpClient.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      _text = <span class="string">&quot;请求失败：<span class="subst">$e</span>&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _loading = <span class="keyword">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》十一：文件操作与网络请求/WeChat268e06a2ed985dfb1a6c39fd00b96c2e.png" alt="WeChat268e06a2ed985dfb1a6c39fd00b96c2e" style="zoom:80%;" />

<ul>
<li>HttpClient </li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>idleTimeout</td>
<td>对应请求头中的keep-alive字段值，为了避免频繁建立连接，httpClient在请求结束后会保持连接一段时间，超过这个阈值后才会关闭连接。</td>
</tr>
<tr>
<td>connectionTimeout</td>
<td>和服务器建立连接的超时，如果超过这个值则会抛出SocketException异常。</td>
</tr>
<tr>
<td>maxConnectionsPerHost</td>
<td>同一个host，同时允许建立连接的最大数量。</td>
</tr>
<tr>
<td>autoUncompress</td>
<td>对应请求头中的Content-Encoding，如果设置为true，则请求头中Content-Encoding的值为当前HttpClient支持的压缩算法列表，目前只有”gzip”</td>
</tr>
<tr>
<td>userAgent</td>
<td>对应请求头中的User-Agent字段。</td>
</tr>
</tbody></table>
<p>这些属性也可通过 HttpClientRequest 直接设置 header，只对当前请求生效；HttpClient 设置的对整个 HttpClient 都生效</p>
<ul>
<li>HTTP 请求认证</li>
<li>代理</li>
<li>证书校验</li>
</ul>
<p>Https 中为了防止通过伪造证书而发起的中间人攻击，客户端应该对自签名或非CA颁发的证书进行校验</p>
<h4 id="11-3-HTTP请求-Dio-http-库"><a href="#11-3-HTTP请求-Dio-http-库" class="headerlink" title="11.3 HTTP请求-Dio http 库"></a>11.3 HTTP请求-Dio http 库</h4><p>引入 dio</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">dio: ^<span class="number">4.0</span><span class="number">.3</span></span><br></pre></td></tr></table></figure>

<p>导入并创建 dio 实例</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dio/dio.dart&#x27;</span>;</span><br><span class="line">Dio dio =  Dio();</span><br></pre></td></tr></table></figure>

<p>GET 请求</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Response response;</span><br><span class="line">response=<span class="keyword">await</span> dio.<span class="keyword">get</span>(<span class="string">&quot;/test?id=12&amp;name=wendu&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.data.toString());</span><br></pre></td></tr></table></figure>

<p>可以将 query 参数通过对象来传递</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">response=<span class="keyword">await</span> dio.<span class="keyword">get</span>(<span class="string">&quot;/test&quot;</span>,queryParameters:&#123;<span class="string">&quot;id&quot;</span>:<span class="number">12</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;wendu&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(response);</span><br></pre></td></tr></table></figure>

<p>POST 请求</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">response=<span class="keyword">await</span> dio.post(<span class="string">&quot;/test&quot;</span>,data:&#123;<span class="string">&quot;id&quot;</span>:<span class="number">12</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;wendu&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>发起多个并发请求</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">response= <span class="keyword">await</span> Future.wait([dio.post(<span class="string">&quot;/info&quot;</span>),dio.<span class="keyword">get</span>(<span class="string">&quot;/token&quot;</span>)]);</span><br></pre></td></tr></table></figure>

<p>下载文件</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">response=<span class="keyword">await</span> dio.download(<span class="string">&quot;https://www.google.com/&quot;</span>,_savePath);</span><br></pre></td></tr></table></figure>

<p>发送 FormData</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">FormData formData = FormData.from(&#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>: <span class="string">&quot;wendux&quot;</span>,</span><br><span class="line">   <span class="string">&quot;age&quot;</span>: <span class="number">25</span>,</span><br><span class="line">&#125;);</span><br><span class="line">response = <span class="keyword">await</span> dio.post(<span class="string">&quot;/info&quot;</span>, data: formData)</span><br></pre></td></tr></table></figure>

<p>如果发送的数据是FormData，则dio会将请求header的<code>contentType</code>设为“multipart/form-data”</p>
<p>通过FormData上传多个文件</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">FormData formData = FormData.from(&#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>: <span class="string">&quot;wendux&quot;</span>,</span><br><span class="line">   <span class="string">&quot;age&quot;</span>: <span class="number">25</span>,</span><br><span class="line">   <span class="string">&quot;file1&quot;</span>: UploadFileInfo(File(<span class="string">&quot;./upload.txt&quot;</span>), <span class="string">&quot;upload1.txt&quot;</span>),</span><br><span class="line">   <span class="string">&quot;file2&quot;</span>: UploadFileInfo(File(<span class="string">&quot;./upload.txt&quot;</span>), <span class="string">&quot;upload2.txt&quot;</span>),</span><br><span class="line">     <span class="comment">// 支持文件数组上传</span></span><br><span class="line">   <span class="string">&quot;files&quot;</span>: [</span><br><span class="line">      UploadFileInfo(File(<span class="string">&quot;./example/upload.txt&quot;</span>), <span class="string">&quot;upload.txt&quot;</span>),</span><br><span class="line">      UploadFileInfo(File(<span class="string">&quot;./example/upload.txt&quot;</span>), <span class="string">&quot;upload.txt&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line">response = <span class="keyword">await</span> dio.post(<span class="string">&quot;/info&quot;</span>, data: formData)</span><br></pre></td></tr></table></figure>

<p>dio 内部仍然使用 HttpClient 发起请求，所以代理、请求认证、证书校验等和 HttpClient 是相同的，可以在 onHttpClientCreate 回调中设置</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">(dio.httpClientAdapter <span class="keyword">as</span> DefaultHttpClientAdapter).onHttpClientCreate = (client) &#123;</span><br><span class="line">    <span class="comment">//设置代理 </span></span><br><span class="line">    client.findProxy = (uri) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;PROXY 192.168.1.2:8888&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//校验证书</span></span><br><span class="line">    httpClient.badCertificateCallback=(X509Certificate cert, <span class="built_in">String</span> host, <span class="built_in">int</span> port)&#123;</span><br><span class="line">      <span class="keyword">if</span>(cert.pem==PEM)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//证书一致，则允许发送数据</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;;   </span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<p><code>onHttpClientCreate</code> 会在当前dio实例内部需要创建HttpClient时调用，所以通过此回调配置HttpClient会对整个dio实例生效</p>
<ul>
<li>示例</li>
</ul>
<p>通过 Github 开放 API 请求 flutterchina 组织下所有公开的项目</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_FutureBuilderRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">FutureBuilderRoute</span>&gt; </span>&#123;</span><br><span class="line">  Dio _dio = Dio();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      alignment: Alignment.center,</span><br><span class="line">      child: FutureBuilder(</span><br><span class="line">          future: _dio.<span class="keyword">get</span>(<span class="string">&quot;https://api.github.com/orgs/flutterchina/repos&quot;</span>),</span><br><span class="line">          builder: (BuildContext context, AsyncSnapshot snapshot) &#123;</span><br><span class="line">            <span class="comment">//请求完成</span></span><br><span class="line">            <span class="keyword">if</span> (snapshot.connectionState == ConnectionState.done) &#123;</span><br><span class="line">              Response response = snapshot.data;</span><br><span class="line">              <span class="comment">//发生错误</span></span><br><span class="line">              <span class="keyword">if</span> (snapshot.hasError) &#123;</span><br><span class="line">                <span class="keyword">return</span> Text(snapshot.error.toString());</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//请求成功，通过项目信息构建用于显示项目名称的ListView</span></span><br><span class="line">              <span class="keyword">return</span> ListView(</span><br><span class="line">                children: response.data.map&lt;Widget&gt;((e) =&gt;</span><br><span class="line">                    ListTile(title: Text(e[<span class="string">&quot;full_name&quot;</span>]))</span><br><span class="line">                ).toList(),</span><br><span class="line">              );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//请求未完成时弹出loading</span></span><br><span class="line">            <span class="keyword">return</span> CircularProgressIndicator();</span><br><span class="line">          &#125;</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="11-4-实例：HTTP分块下载"><a href="#11-4-实例：HTTP分块下载" class="headerlink" title="11.4 实例：HTTP分块下载"></a>11.4 实例：HTTP分块下载</h4><p>Http 协议定义了分块传输的响应 header 字段，具体是否支持取决于 Server 的实现，可以指定 range 字段验证服务器是否支持分块传输，例如，可以利用 curl 命令来验证</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xxx:~ duwen$ curl -H &quot;Range: bytes=0-10&quot; http://download.dcloud.net.cn/HBuilder.9.0.2.macosx_64.dmg -v</span><br><span class="line"><span class="meta">#</span><span class="bash"> 请求头</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> GET /HBuilder.9.0.2.macosx_64.dmg HTTP/1.1</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Host: download.dcloud.net.cn</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> User-Agent: curl/7.54.0</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Accept: */*</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Range: bytes=0-10</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 响应头</span></span><br><span class="line">&lt; HTTP/1.1 206 Partial Content</span><br><span class="line">&lt; Content-Type: application/octet-stream</span><br><span class="line">&lt; Content-Length: 11</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; Date: Thu, 21 Feb 2019 06:25:15 GMT</span><br><span class="line">&lt; Content-Range: bytes 0-10/233295878</span><br></pre></td></tr></table></figure>

<p>请求头中添加 <code>Range: bytes=0-10</code> 告诉服务器本次请求只想获取 0-10（包括10共11个字节）这块内容，如果服务器支持分块传输，则响应状态码为206，表示部分内容，响应头中包含  Content-Range 字段</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Content-Range: bytes 0-10/233295878 //单位byte</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<p>分块下载</p>
<h4 id="11-5-WebSockets"><a href="#11-5-WebSockets" class="headerlink" title="11.5 WebSockets"></a>11.5 WebSockets</h4><p>WebSocket 协议正是为了解决客户端与服务端实时通信而产生的技术</p>
<p>Http 协议中虽然可以通过  keep-alive 机制使服务器在响应结束后链接会保持一段时间，但还是会断开。keep-alive 机制主要是用于避免在同一台服务器请求多个资源时频繁创建链接，它本质上是支持链接复用的技术，并非用于实时通信</p>
<ul>
<li>步骤</li>
</ul>
<ol>
<li>连接到 WebSocket 服务器</li>
<li>监听来自服务器的消息</li>
<li>将数据发送到服务器</li>
<li>关闭 WebSocket 连接</li>
</ol>
<h4 id="11-6-使用-Socket-API"><a href="#11-6-使用-Socket-API" class="headerlink" title="11.6 使用 Socket API"></a>11.6 使用 Socket API</h4><h4 id="11-7-Json-转-Dart-Model-类"><a href="#11-7-Json-转-Dart-Model-类" class="headerlink" title="11.7 Json 转 Dart Model 类"></a>11.7 Json 转 Dart Model 类</h4><h5 id="11-7-1-Json-转-Dart-类"><a href="#11-7-1-Json-转-Dart-类" class="headerlink" title="11.7.1 Json 转 Dart 类"></a>11.7.1 Json 转 Dart 类</h5><p>返回数据是 JSON 格式的字符串，为了方便在代码中操作 JSON，先将 JSON 格式字符串转为 Dart 对象，可以通过 <code>dart:convert</code> 中的 JSON 解码器 <code>json.decode()</code> 来实现，可以根据 JSON 字符串具体内容将其转为 List 或 Map</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个JSON格式的用户列表字符串</span></span><br><span class="line"><span class="built_in">String</span> jsonStr=<span class="string">&#x27;[&#123;&quot;name&quot;:&quot;Jack&quot;&#125;,&#123;&quot;name&quot;:&quot;Rose&quot;&#125;]&#x27;</span>;`</span><br><span class="line"><span class="comment">//将JSON字符串转为Dart对象(此处是List)</span></span><br><span class="line"><span class="built_in">List</span> items=json.decode(jsonStr);</span><br><span class="line"><span class="comment">//输出第一个用户的姓名</span></span><br><span class="line"><span class="built_in">print</span>(items[<span class="number">0</span>][<span class="string">&quot;name&quot;</span>]);</span><br></pre></td></tr></table></figure>

<p>有如下 JSON</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John Smith&quot;</span>,</span><br><span class="line">  <span class="string">&quot;email&quot;</span>: <span class="string">&quot;john@example.com&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; user = json.decode(json);</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Howdy, <span class="subst">$&#123;user[<span class="string">&#x27;name&#x27;</span>]&#125;</span>!&#x27;</span>);</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;We sent the verification link to <span class="subst">$&#123;user[<span class="string">&#x27;email&#x27;</span>]&#125;</span>.&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>容易出错，比如访问属性字段名写错，编译的时候不会报错，运行时会报错</p>
<p>解决：即 Json Model 化，引入模型类 User，一个 User.fromJson 构造函数，用于从一个 map 构造出一个 User 实例 map 结构；一个 toJson 方法，将 User 实例转化为一个 map</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> email;</span><br><span class="line"></span><br><span class="line">  User(<span class="keyword">this</span>.name, <span class="keyword">this</span>.email);</span><br><span class="line"></span><br><span class="line">  User.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json)</span><br><span class="line">      : name = json[<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">        email = json[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt;</span><br><span class="line">    &lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;&#123;</span><br><span class="line">      <span class="string">&#x27;name&#x27;</span>: name,</span><br><span class="line">      <span class="string">&#x27;email&#x27;</span>: email,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span> userMap = json.decode(json);</span><br><span class="line"><span class="keyword">var</span> user = User.fromJson(userMap);</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Howdy, <span class="subst">$&#123;user.name&#125;</span>!&#x27;</span>);</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;We sent the verification link to <span class="subst">$&#123;user.email&#125;</span>.&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>自动生成 Model</li>
</ul>
<p>官方推荐的 json_serializable package 包，是一个自动化的源代码生成器，可以在开发阶段为我们生成 JSON 序列化模板</p>
<ul>
<li>项目中设置 json_serializable</li>
</ul>
<p>json_serializable 需要一个常规和两个开发依赖项，开发依赖项是不包含在我们应用程序源代码中的依赖项</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  json_annotation: &lt;最新版本&gt;</span><br><span class="line"></span><br><span class="line">dev_dependencies:</span><br><span class="line">  build_runner: &lt;最新版本&gt;</span><br><span class="line">  json_serializable: &lt;最新版本&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>以 json_serializable 的方式创建 model 类</li>
</ul>
<p>user.dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:json_annotation/json_annotation.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// User.g.dart 将在我们运行生成命令后自动生成</span></span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;User.g.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">///<span class="markdown">这个标注是告诉生成器，这个类是需要生成Model类的</span></span></span><br><span class="line"><span class="meta">@JsonSerializable</span>()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">  User(<span class="keyword">this</span>.name, <span class="keyword">this</span>.email);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">String</span> email;</span><br><span class="line">  <span class="comment">//不同的类使用不同的mixin即可</span></span><br><span class="line">  <span class="keyword">factory</span> User.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) =&gt; _$UserFromJson(json);</span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt; _$UserToJson(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了上面设置，源码生成器将生成用于序列化 name 和 email 字段的 JSON 代码</p>
<ul>
<li>自定义命名策略</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显式关联JSON字段名与Model属性的对应关系 </span></span><br><span class="line"><span class="meta">@JsonKey</span>(name: <span class="string">&#x27;registration_date_millis&#x27;</span>)</span><br><span class="line"><span class="keyword">final</span> <span class="built_in">int</span> registrationDateMillis;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行代码生成程序</li>
</ul>
<p>上面的代码会报错，必须运行代码生成器来生成序列化模板</p>
<ul>
<li>一次性生成</li>
</ul>
<p>在项目根目录运行 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flutter packages pub run build_runner build</span><br></pre></td></tr></table></figure>

<p>这触发了一次构建，会通过源文件，找出需要生成 Model 类的源文件（包含 @JsonSerializable标注的）来生成对应的 .g.dart 文件；可以将所有 Model 类放到一个目录，然后在该目录执行命令</p>
<ul>
<li>持续生成</li>
</ul>
<p>使用 <code>_watcher_</code> 使源代码生成更加方便，会监视我们项目中文件的变换，并在需要时自动构建必要的文件</p>
<p>在项目根目录运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter packages pub run build_runner watch</span><br></pre></td></tr></table></figure>

<p>只需启动一次观察，然后就会在后台运行</p>
<h5 id="11-7-2-自动化生成模板"><a href="#11-7-2-自动化生成模板" class="headerlink" title="11.7.2 自动化生成模板"></a>11.7.2 自动化生成模板</h5><p>。。。</p>
<ul>
<li>json_model 包</li>
</ul>
<p>笔者发布的 json_model 包，把包加入开发依赖后，便可以用一条命令，根据 json 文件生成 Dart 类</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/18/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%9B%9B%EF%BC%9A%E5%B8%83%E5%B1%80%E7%B1%BB%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>title: 《Flutter实战第二版》四：布局类组件<br>abstract: 输入密码<br>message: 输入密码<br>date: 2022-01-18 12:17:35<br>tags: flutter<br>categories: flutter<br>password:</p>
<h3 id="4-布局类组件"><a href="#4-布局类组件" class="headerlink" title="4 布局类组件"></a>4 布局类组件</h3><h4 id="4-2-布局原理与约束"><a href="#4-2-布局原理与约束" class="headerlink" title="4.2 布局原理与约束"></a>4.2 布局原理与约束</h4><p>尺寸限制类容器用于限制容器大小，如 ConstrainedBox、SizedBox、UnconstrainedBox、AspectRatio等</p>
<p>Flutter 有两种布局模型<br>基于 RenderBox 的盒模型布局<br>基于 Sliver（RenderBox）按需加载列表布局</p>
<ul>
<li>布局流程</li>
</ul>
<p>上层组件向下层组件传递约束条件<br>下层组件确定自己的大小，然后告诉上层组件。注意下层组件的大小必须符合父组件的约束<br>上层组件确定下层组件相对于自身的偏移和确定自身的大小（大多数情况下会根据子组件的大小来确定自身大小）</p>
<p>比如，父组件传递给子组件的约束是“最大宽高不能超过100，最小宽高为0”，如果给子组件设宽高都为100，则子组件最终大小是 100*100，因为任何时候子组件都必须遵守父组件的约束</p>
<h5 id="4-2-1-BoxConstraints"><a href="#4-2-1-BoxConstraints" class="headerlink" title="4.2.1 BoxConstraints"></a>4.2.1 BoxConstraints</h5><p>盒模型布局过程中父渲染对象传递给子渲染对象的 <code>约束信息</code>，包含最大宽高信息，子组件大小需要在约束的范围内</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> BoxConstraints(&#123;</span><br><span class="line">  <span class="keyword">this</span>.minWidth = <span class="number">0.0</span>, <span class="comment">//最小宽度</span></span><br><span class="line">  <span class="keyword">this</span>.maxWidth = <span class="built_in">double</span>.infinity, <span class="comment">//最大宽度</span></span><br><span class="line">  <span class="keyword">this</span>.minHeight = <span class="number">0.0</span>, <span class="comment">//最小高度</span></span><br><span class="line">  <span class="keyword">this</span>.maxHeight = <span class="built_in">double</span>.infinity <span class="comment">//最大高度</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>BoxConstraints 还定义了便捷的构造函数</p>
<p>生成固定宽高的限制</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">constraints: BoxConstraints.tight(Size(<span class="number">100</span>, <span class="number">200</span>)),</span><br></pre></td></tr></table></figure>

<p>生成尽可能大的用以填充另一个容器的 BoxConstraints</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">constraints: BoxConstraints.expand(),</span><br></pre></td></tr></table></figure>

<h5 id="4-2-2-ConstrainedBox"><a href="#4-2-2-ConstrainedBox" class="headerlink" title="4.2.2 ConstrainedBox"></a>4.2.2 ConstrainedBox</h5><p>用于对子组件添加 <code>额外约束</code></p>
<p>实现一个最小高度为50，宽度尽可能大的红色容器</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先定义一个背景色红色盒子，不指定宽高</span></span><br><span class="line">Widget redBox = DecoratedBox(</span><br><span class="line">    decoration: BoxDecoration(color: Colors.red),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">body: Container(</span><br><span class="line">  child: ConstrainedBox(</span><br><span class="line">    constraints: BoxConstraints(</span><br><span class="line">      minWidth: <span class="built_in">double</span>.infinity,<span class="comment">//宽度尽可能大</span></span><br><span class="line">      minHeight: <span class="number">50.0</span>,<span class="comment">//最小高度50</span></span><br><span class="line">    ),</span><br><span class="line">    child: Container(</span><br><span class="line">      height: <span class="number">5</span>,</span><br><span class="line">      child: redBox,</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<p>虽然 Container 高度设置为 5 但最终高度是 50，正是 ConstrainedBox 最小高度限制生效了</p>
<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%9B%9B%EF%BC%9A%E5%B8%83%E5%B1%80%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChatb3dfacd2a03676594b4be71803e35712.png" alt="WeChatb3dfacd2a03676594b4be71803e35712"></p>
<h5 id="4-2-3-SizedBox"><a href="#4-2-3-SizedBox" class="headerlink" title="4.2.3 SizedBox"></a>4.2.3 SizedBox</h5><p>用于给子元素指定固定的宽高</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">SizedBox(</span><br><span class="line">  width: <span class="number">80</span>,</span><br><span class="line">  height: <span class="number">80</span>,</span><br><span class="line">  child: redBox,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>实际上 SizedBox 只是 ConstrainedBox 的一个定制</p>
<h5 id="4-2-4-多重限制"><a href="#4-2-4-多重限制" class="headerlink" title="4.2.4 多重限制"></a>4.2.4 多重限制</h5><p>如果组件有多个父级 ConstrainedBox 限制，最终哪个会生效？</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ConstrainedBox(</span><br><span class="line">  constraints: BoxConstraints(minWidth: <span class="number">60.0</span>, minHeight: <span class="number">60.0</span>), <span class="comment">//父</span></span><br><span class="line">  child: ConstrainedBox(</span><br><span class="line">    constraints: BoxConstraints(minWidth: <span class="number">90.0</span>, minHeight: <span class="number">20.0</span>),<span class="comment">//子</span></span><br><span class="line">    child: redBox,</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>最终显示宽度 90，高度 60</p>
<p>多重限制时，对于 minWidth minHeight 是取父子中数值较大的</p>
<h5 id="4-2-5-UnconstrainedBox"><a href="#4-2-5-UnconstrainedBox" class="headerlink" title="4.2.5 UnconstrainedBox"></a>4.2.5 UnconstrainedBox</h5><p>子组件不再受父组件约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body: Container(</span><br><span class="line">  child: ConstrainedBox(</span><br><span class="line">    constraints: BoxConstraints(minWidth: 60, minHeight: 100),</span><br><span class="line">    child: UnconstrainedBox(&#x2F;&#x2F;去除父级限制</span><br><span class="line">      child: ConstrainedBox(</span><br><span class="line">        constraints: BoxConstraints(minWidth: 90, minHeight: 20),</span><br><span class="line">        child: redBox,</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<p>如果没有 UnconstrainedBox，那么根据多重限制的规则最终显示是 90x100<br>由于 UnconstrainedBox，去除了父级限制，最终按子 ConstrainedBox 限制来绘制 redBox，redBox 最终宽 90 高 20</p>
<p>实际开发中，如果已经使用了 SizedBox 或 ConstrainedBox 给子元素指定了固定宽高，但没有效果时，几乎可以断定，已经有父组件指定了约束</p>
<h5 id="4-2-6-其它约束类容器"><a href="#4-2-6-其它约束类容器" class="headerlink" title="4.2.6 其它约束类容器"></a>4.2.6 其它约束类容器</h5><p>AspectRatio，可以指定子组件的长宽比</p>
<p>LimitedBox，可以指定最大宽高</p>
<p>FractionallySizeBox，可以根据父容器宽高的百分比来设置子组件宽高</p>
<h4 id="4-3-线性布局"><a href="#4-3-线性布局" class="headerlink" title="4.3 线性布局"></a>4.3 线性布局</h4><p>线性布局中有两个定义对齐方式的枚举类 MainAxisAlignment 和 CrossAxisAlignment，分别代表主轴对齐和纵轴对齐</p>
<h5 id="4-3-1-Row"><a href="#4-3-1-Row" class="headerlink" title="4.3.1 Row"></a>4.3.1 Row</h5><p>可以沿水平方向排列其子 Widget</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Row(&#123;</span><br><span class="line">  ...  </span><br><span class="line">  TextDirection textDirection,    </span><br><span class="line">  MainAxisSize mainAxisSize = MainAxisSize.max,    </span><br><span class="line">  MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start,</span><br><span class="line">  VerticalDirection verticalDirection = VerticalDirection.down,  </span><br><span class="line">  CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>textDirection 水平方向子组件的布局顺序，从左到右 TextDirection.ltr，从右到左 TextDirection.rtl </p>
<p>mainAxisSize 表示 Row 在主轴（水平）方向占用的空间，MainAxisSize.max 尽可能多的占用水平空间，MainAxisSize.min 尽可能少的占用水平空间</p>
<p>mainAxisAlignment 子组件在 Row 所占空间内对齐方式，MainAxisAlignment.start 表示沿着 textDirection 的初始方向对齐</p>
<p>verticalDirection 纵轴的对齐方向，默认 VerticalDirection.down 从上到下</p>
<p>crossAxisAlignment 子组件在纵轴方向对齐方式</p>
<h5 id="4-3-2-Column"><a href="#4-3-2-Column" class="headerlink" title="4.3.2 Column"></a>4.3.2 Column</h5><p>可以沿垂直方向排列其子组件</p>
<h4 id="4-4-弹性布局"><a href="#4-4-弹性布局" class="headerlink" title="4.4 弹性布局"></a>4.4 弹性布局</h4><p>弹性布局允许子组件按照一定比例来分配父容器空间</p>
<ul>
<li>Flex     </li>
</ul>
<p>Flex 组件可以沿着水平或垂直方向布局子组件，Row 和 Column 都继承自 Flex，参数基本相同，能使用 Flex 的地方都可以使用 Row 或 Column，它也可以和 Expanded 组件配合实现弹性布局</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Flex(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">this</span>.direction, <span class="comment">//弹性布局的方向, Row默认为水平方向，Column默认为垂直方向</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>Expanded</li>
</ul>
<p>只能作为 Flex 的孩子，它可以按比例扩伸 Flex 子组件所占用的空间</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Expanded(&#123;</span><br><span class="line">  <span class="built_in">int</span> flex = <span class="number">1</span>, </span><br><span class="line">  <span class="keyword">required</span> Widget child,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>flex 为弹性系数，为 0 或 null，则 child 是没有弹性的，如果大于 0，所有的 Expand 按照其 flex 的比例来分割主轴的全部剩余空间</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">body: Column(</span><br><span class="line">  children: [</span><br><span class="line">    Flex(</span><br><span class="line">        direction: Axis.horizontal,</span><br><span class="line">        children: [</span><br><span class="line">          Expanded(</span><br><span class="line">              flex: <span class="number">1</span>,</span><br><span class="line">              child: Container(</span><br><span class="line">                height: <span class="number">30</span>,</span><br><span class="line">                color: Colors.red,</span><br><span class="line">              ),</span><br><span class="line">          ),</span><br><span class="line">          Expanded(</span><br><span class="line">              flex: <span class="number">2</span>,</span><br><span class="line">              child: Container(</span><br><span class="line">                height: <span class="number">30</span>,</span><br><span class="line">                color: Colors.green,</span><br><span class="line">              ),</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">    ),</span><br><span class="line">    Padding(</span><br><span class="line">        padding: EdgeInsets.only(top: <span class="number">20</span>),</span><br><span class="line">        child: SizedBox(</span><br><span class="line">          height: <span class="number">100</span>,</span><br><span class="line">          child: Flex(</span><br><span class="line">              direction: Axis.vertical,</span><br><span class="line">              children: [</span><br><span class="line">                Expanded(</span><br><span class="line">                    flex: <span class="number">2</span>,</span><br><span class="line">                    child: Container(</span><br><span class="line">                      height: <span class="number">30</span>,</span><br><span class="line">                      color: Colors.red,</span><br><span class="line">                    ),</span><br><span class="line">                ),</span><br><span class="line">                Spacer( <span class="comment">//Spacer 占用指定比例的空间</span></span><br><span class="line">                    flex: <span class="number">1</span>,</span><br><span class="line">                ),</span><br><span class="line">                Expanded(</span><br><span class="line">                    flex: <span class="number">1</span>,</span><br><span class="line">                    child: Container(</span><br><span class="line">                      height: <span class="number">30</span>,</span><br><span class="line">                      color: Colors.green,</span><br><span class="line">                    ),</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%9B%9B%EF%BC%9A%E5%B8%83%E5%B1%80%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChatfbc763c47e927557d16a3e4f1bfe01c1.png" alt="WeChatfbc763c47e927557d16a3e4f1bfe01c1"></p>
<p>Spacer  的功能是占用指定比例的空间，只是 Expanded 的一个包装类</p>
<h4 id="4-5-流式布局"><a href="#4-5-流式布局" class="headerlink" title="4.5 流式布局"></a>4.5 流式布局</h4><p>Row 和 Column，如果子 widget 超出屏幕范围时，会溢出报错</p>
<p>超出屏幕范围会自动折行的布局称为流式布局，通过 Wrap 和 Flow 来支持</p>
<h5 id="4-5-1-Wrap"><a href="#4-5-1-Wrap" class="headerlink" title="4.5.1 Wrap"></a>4.5.1 Wrap</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Wrap(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">this</span>.direction = Axis.horizontal,</span><br><span class="line">  <span class="keyword">this</span>.alignment = WrapAlignment.start, <span class="comment">//主轴方向对齐方式</span></span><br><span class="line">  <span class="keyword">this</span>.spacing = <span class="number">0.0</span>,		<span class="comment">//主轴方向子 widget 的间距</span></span><br><span class="line">  <span class="keyword">this</span>.runAlignment = WrapAlignment.start, <span class="comment">//纵轴方向对齐方式</span></span><br><span class="line">  <span class="keyword">this</span>.runSpacing = <span class="number">0.0</span>, <span class="comment">//纵轴方向的间距</span></span><br><span class="line">  <span class="keyword">this</span>.crossAxisAlignment = WrapCrossAlignment.start,</span><br><span class="line">  <span class="keyword">this</span>.textDirection,</span><br><span class="line">  <span class="keyword">this</span>.verticalDirection = VerticalDirection.down,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>例子</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">body: Wrap(</span><br><span class="line">  spacing: <span class="number">8</span>, <span class="comment">// 主轴(水平)方向间距</span></span><br><span class="line">  runSpacing: <span class="number">4</span>,<span class="comment">// 纵轴（垂直）方向间距</span></span><br><span class="line">  alignment: WrapAlignment.center,<span class="comment">//沿主轴方向居中</span></span><br><span class="line">  children: [</span><br><span class="line">    Chip(</span><br><span class="line">      avatar: CircleAvatar(backgroundColor: Colors.blue, child: Text(<span class="string">&quot;A&quot;</span>)),</span><br><span class="line">      label: Text(<span class="string">&quot;Hamilton&quot;</span>),</span><br><span class="line">    ),</span><br><span class="line">    Chip(</span><br><span class="line">      avatar: CircleAvatar(backgroundColor: Colors.blue, child: Text(<span class="string">&quot;M&quot;</span>)),</span><br><span class="line">      label: Text(<span class="string">&quot;Lafayette&quot;</span>),</span><br><span class="line">    ),</span><br><span class="line">    Chip(</span><br><span class="line">      avatar: CircleAvatar(backgroundColor: Colors.blue, child: Text(<span class="string">&quot;H&quot;</span>)),</span><br><span class="line">      label: Text(<span class="string">&quot;Mulligan&quot;</span>),</span><br><span class="line">    ),</span><br><span class="line">    Chip(</span><br><span class="line">      avatar: CircleAvatar(backgroundColor: Colors.blue, child: Text(<span class="string">&quot;J&quot;</span>)),</span><br><span class="line">      label: Text(<span class="string">&quot;Laurens&quot;</span>),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<p><img src="/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%9B%9B%EF%BC%9A%E5%B8%83%E5%B1%80%E7%B1%BB%E7%BB%84%E4%BB%B6/WeChat3d54f85053626129a97f139ca49e747e.png" alt="WeChat3d54f85053626129a97f139ca49e747e"></p>
<h5 id="4-5-2-Flow"><a href="#4-5-2-Flow" class="headerlink" title="4.5.2 Flow"></a>4.5.2 Flow</h5><p>一般很少使用 Flow，因为其过于复杂，需要自己实现子 widget 的位置转换，很多情况下首先要考虑 Wrap 是否满足需求</p>
<p>主要用于一些自定义布局策略或性能要求较高（如动画）的场景</p>
<h4 id="4-6-层叠布局"><a href="#4-6-层叠布局" class="headerlink" title="4.6 层叠布局"></a>4.6 层叠布局</h4><p>Flutter 中使用 Stack 和 Positioned 这两个组件来配合实现绝对定位，Stack 允许子组件堆叠，而 Positioned 用于根据 Stack 的四个角来确定子组件的位置</p>
<h5 id="4-6-1-Stack"><a href="#4-6-1-Stack" class="headerlink" title="4.6.1 Stack"></a>4.6.1 Stack</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Stack(&#123;</span><br><span class="line">  <span class="keyword">this</span>.alignment = AlignmentDirectional.topStart,</span><br><span class="line">  <span class="keyword">this</span>.textDirection,</span><br><span class="line">  <span class="keyword">this</span>.fit = StackFit.loose,<span class="comment">//未定位widget使用子组件大小</span></span><br><span class="line">  <span class="keyword">this</span>.overflow = Overflow.clip,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>aligment：没有指定定位（没有使用Positioned）或部分定位的子组件对齐方式</p>
<p>fit：用于确定没有定位的子组件如何去适应 Stack 的大小。StackFit.loose 表示使用子组件的大小，StackFit.expand 表示扩伸到 Stack 的大小</p>
<p>clipBehavior：决定对超出 Stack 显示空间的部分如何裁剪</p>
<h5 id="4-6-2-Positioned"><a href="#4-6-2-Positioned" class="headerlink" title="4.6.2 Positioned"></a>4.6.2 Positioned</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Positioned(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  <span class="keyword">this</span>.left, </span><br><span class="line">  <span class="keyword">this</span>.top,</span><br><span class="line">  <span class="keyword">this</span>.right,</span><br><span class="line">  <span class="keyword">this</span>.bottom,</span><br><span class="line">  <span class="keyword">this</span>.width,</span><br><span class="line">  <span class="keyword">this</span>.height,</span><br><span class="line">  <span class="keyword">required</span> Widget child,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>left、right、top、bottom 分别代表 Stack 左、右、上、下四边的距离。width、height 用于配合 left、right、top、bottom 来定位组件，水平方向时，只能指定 left、right、width 三个属性中的两个</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过ConstrainedBox来确保Stack占满屏幕</span></span><br><span class="line">ConstrainedBox(</span><br><span class="line">  constraints: BoxConstraints.expand(),</span><br><span class="line">  child: Stack(</span><br><span class="line">    alignment:Alignment.center , <span class="comment">//指定未定位或部分定位widget的对齐方式</span></span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">      Container(</span><br><span class="line">        child: Text(<span class="string">&quot;Hello world&quot;</span>,style: TextStyle(color: Colors.white)),</span><br><span class="line">        color: Colors.red,</span><br><span class="line">      ),</span><br><span class="line">      Positioned(</span><br><span class="line">        left: <span class="number">18.0</span>,</span><br><span class="line">        child: Text(<span class="string">&quot;I am Jack&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      Positioned(</span><br><span class="line">        top: <span class="number">18.0</span>,</span><br><span class="line">        child: Text(<span class="string">&quot;Your friend&quot;</span>),</span><br><span class="line">      )        </span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》四：布局类组件/WeChatb7f223696d8793b8c8b7ad2a3a70efe0.png" alt="WeChatb7f223696d8793b8c8b7ad2a3a70efe0" style="zoom:80%;" />

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Stack(</span><br><span class="line">  alignment:Alignment.center ,</span><br><span class="line">  fit: StackFit.expand, <span class="comment">//未定位widget占满Stack整个空间</span></span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Positioned(</span><br><span class="line">      left: <span class="number">18.0</span>,</span><br><span class="line">      child: Text(<span class="string">&quot;I am Jack&quot;</span>),</span><br><span class="line">    ),</span><br><span class="line">    Container(child: Text(<span class="string">&quot;Hello world&quot;</span>,style: TextStyle(color: Colors.white)),</span><br><span class="line">      color: Colors.red,</span><br><span class="line">    ),</span><br><span class="line">    Positioned(</span><br><span class="line">      top: <span class="number">18.0</span>,</span><br><span class="line">      child: Text(<span class="string">&quot;Your friend&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">  ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》四：布局类组件/WeChat292f6adf44bfae8dcc84ab16cd736158.png" alt="WeChat292f6adf44bfae8dcc84ab16cd736158" style="zoom:80%;" />

<p>第二个文本组件没有定位，fit 属性会对它起作用，就会占满 Stack，Stack 子元素是堆叠的，所以第一个组件被第二个遮挡住了，第三个在最上层正常显示</p>
<h4 id="4-7-对齐与相对定位"><a href="#4-7-对齐与相对定位" class="headerlink" title="4.7 对齐与相对定位"></a>4.7 对齐与相对定位</h4><p>Stack 和 Positioned，我们可以指定一个或多个子元素相对父元素各个边的偏移，并且可以堆叠；如果只想简单调整下一个子元素在父元素中的位置的话使用 Align 组件更简单</p>
<h5 id="4-7-1-Align"><a href="#4-7-1-Align" class="headerlink" title="4.7.1 Align"></a>4.7.1 Align</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Align(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  <span class="keyword">this</span>.alignment = Alignment.center,</span><br><span class="line">  <span class="keyword">this</span>.widthFactor,</span><br><span class="line">  <span class="keyword">this</span>.heightFactor,</span><br><span class="line">  Widget child,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>widthFactor，heightFactor 用于确定 Align 组件本身宽高属性，是两个缩放因子，如果为 null，则组件的宽高会占用尽可能多的空间</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">body: Container(</span><br><span class="line">  width: <span class="number">120</span>,</span><br><span class="line">  height: <span class="number">120</span>,</span><br><span class="line">  color: Colors.red,</span><br><span class="line">  child: Align(</span><br><span class="line">    alignment: Alignment.topRight,</span><br><span class="line">    child: FlutterLogo(size: <span class="number">60</span>),</span><br><span class="line">  ),</span><br><span class="line">),</span><br><span class="line"><span class="comment">//相同效果 FlutterLogo宽高为60 则最终宽高都为 120</span></span><br><span class="line">Align(</span><br><span class="line">  widthFactor: <span class="number">2</span>,<span class="comment">//确定Align组件宽度 2*子组件宽60=120</span></span><br><span class="line">  heightFactor: <span class="number">2</span>,</span><br><span class="line">  alignment: Alignment.topRight,</span><br><span class="line">  child: FlutterLogo(size: <span class="number">60</span>),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》四：布局类组件/WeChat8615b0b3da0d913f7ac3f52a0b453f34.png" alt="WeChat8615b0b3da0d913f7ac3f52a0b453f34" style="zoom:80%;" />

<ul>
<li>Alignment</li>
</ul>
<p>继承自 AlignmentGeometry，x y 分别表示在水平和垂直方向偏移</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alignment(this.x, this.y)</span><br></pre></td></tr></table></figure>

<p>会以矩形中心点作为原点，x y 值从 -1 到 1 分别代表矩形左边到右边的距离和顶部到底部的距离，Alignment(-1,-1) 代表左上角顶点</p>
<ul>
<li>FractionalOffset</li>
</ul>
<p>FractionalOffset 继承自 Alignment，唯一区别就是坐标原点不同，坐标原点为矩形左侧顶点</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  height: <span class="number">120.0</span>,</span><br><span class="line">  width: <span class="number">120.0</span>,</span><br><span class="line">  color: Colors.blue[<span class="number">50</span>],</span><br><span class="line">  child: Align(</span><br><span class="line">    alignment: FractionalOffset(<span class="number">0.2</span>, <span class="number">0.6</span>),</span><br><span class="line">    child: FlutterLogo(</span><br><span class="line">      size: <span class="number">60</span>,</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h5 id="4-7-2-Align-和-Stack-对比"><a href="#4-7-2-Align-和-Stack-对比" class="headerlink" title="4.7.2 Align 和 Stack 对比"></a>4.7.2 Align 和 Stack 对比</h5><p>定位参考系统不同；Stack/Positioned 定位参考系可以是父容器的四个顶点，Align 则需要通过 aligment 参数来确定坐标原点</p>
<p>Stack 可以有多个子元素，并且子元素可以堆叠，而 Align 只能有一个子元素，不存在堆叠</p>
<h5 id="4-7-3-Center-组件"><a href="#4-7-3-Center-组件" class="headerlink" title="4.7.3 Center 组件"></a>4.7.3 Center 组件</h5><p>Center 继承自 Align，比 Align 少了一个 aligment 参数</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">...<span class="comment">//省略无关代码</span></span><br><span class="line">DecoratedBox(</span><br><span class="line">  decoration: BoxDecoration(color: Colors.red),</span><br><span class="line">  child: Center(</span><br><span class="line">    child: Text(<span class="string">&quot;xxx&quot;</span>),</span><br><span class="line">  ),</span><br><span class="line">),</span><br><span class="line">DecoratedBox(</span><br><span class="line">  decoration: BoxDecoration(color: Colors.red),</span><br><span class="line">  child: Center(</span><br><span class="line">    widthFactor: <span class="number">1</span>,</span><br><span class="line">    heightFactor: <span class="number">1</span>,</span><br><span class="line">    child: Text(<span class="string">&quot;xxx&quot;</span>),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》四：布局类组件/WeChat5e3ebd6ef218ee6f1388e9e97b95ecb0.png" alt="WeChat5e3ebd6ef218ee6f1388e9e97b95ecb0" style="zoom:80%;" />

<ul>
<li>总结</li>
</ul>
<p>在需要指定一些精确的偏移时优先使用 FractionalOffset，因为它的坐标原点和布局系统相同</p>
<h4 id="4-8-LayoutBuilder、AfterLayout"><a href="#4-8-LayoutBuilder、AfterLayout" class="headerlink" title="4.8 LayoutBuilder、AfterLayout"></a>4.8 LayoutBuilder、AfterLayout</h4><h5 id="4-8-1-LayoutBuilder"><a href="#4-8-1-LayoutBuilder" class="headerlink" title="4.8.1 LayoutBuilder"></a>4.8.1 LayoutBuilder</h5><p>通过  LayoutBuilder 我们可以在布局过程中拿到父组件传递的约束信息，然后可以根据约束信息动态的构建不同的布局</p>
<p>例子：当当前可用宽度小于200时，将子组件显示为一列，否则显示为两列</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResponsiveColumn</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ResponsiveColumn(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.children&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; children;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// 通过 LayoutBuilder 拿到父组件传递的约束，然后判断 maxWidth 是否小于200</span></span><br><span class="line">    <span class="keyword">return</span> LayoutBuilder(</span><br><span class="line">      builder: (BuildContext context, BoxConstraints constraints) &#123;</span><br><span class="line">        <span class="keyword">if</span> (constraints.maxWidth &lt; <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="comment">// 最大宽度小于200，显示单列</span></span><br><span class="line">          <span class="keyword">return</span> Column(children: children, mainAxisSize: MainAxisSize.min);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 大于200，显示双列</span></span><br><span class="line">          <span class="keyword">var</span> _children = &lt;Widget&gt;[];</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; children.length) &#123;</span><br><span class="line">              _children.add(Row(</span><br><span class="line">                children: [children[i], children[i + <span class="number">1</span>]],</span><br><span class="line">                mainAxisSize: MainAxisSize.min,</span><br><span class="line">              ));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              _children.add(children[i]);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> Column(children: _children, mainAxisSize: MainAxisSize.min);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LayoutBuilderRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> LayoutBuilderRoute(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">var</span> _children = <span class="built_in">List</span>.filled(<span class="number">6</span>, Text(<span class="string">&quot;A&quot;</span>));</span><br><span class="line">    <span class="comment">// Column在本示例中在水平方向的最大宽度为屏幕的宽度</span></span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        <span class="comment">// 限制宽度为190，小于 200</span></span><br><span class="line">        SizedBox(width: <span class="number">190</span>, child: ResponsiveColumn(children: _children)),</span><br><span class="line">        ResponsiveColumn(children: _children),</span><br><span class="line">        LayoutLogPrint(child:Text(<span class="string">&quot;xx&quot;</span>)) <span class="comment">// 下面介绍</span></span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以使用 LayoutBuilder 来根据设备的尺寸来实现响应式布局</p>
<p>LayoutBuilder 可以帮助排查问题，如遇到布局问题或想调试组件树中一个节点布局的约束时</p>
<h5 id="4-8-2-AfterLayout"><a href="#4-8-2-AfterLayout" class="headerlink" title="4.8.2 AfterLayout"></a>4.8.2 AfterLayout</h5><p>作者封装的组件，可以在子组件布局完成后执行一个回调</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">AfterLayout(</span><br><span class="line">  callback: (RenderAfterLayout ral) &#123;</span><br><span class="line">    <span class="built_in">print</span>(ral.size); <span class="comment">//子组件的大小</span></span><br><span class="line">    <span class="built_in">print</span>(ral.offset);<span class="comment">// 子组件在屏幕中坐标</span></span><br><span class="line">  &#125;,</span><br><span class="line">  child: Text(<span class="string">&#x27;flutter@wendux&#x27;</span>),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

































]]></content>
  </entry>
  <entry>
    <title>音视频开发</title>
    <url>/2021/08/03/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h4 id="音视频基础"><a href="#音视频基础" class="headerlink" title="音视频基础"></a>音视频基础</h4><h5 id="数字音频"><a href="#数字音频" class="headerlink" title="数字音频"></a>数字音频</h5><p>将模拟信号转换为数字信号的过程</p>
<ul>
<li>采样</li>
</ul>
<p>在时间轴上对信号进行数字化。</p>
<p>根据奈奎斯特定理（也称为采样定理），按比声音最高频率高2倍以上的频率对声音进行采样（也称为AD转换）</p>
<p>比如：对高质量音频信号，其频率范围是20Hz~20kHz（人耳能够听到的频率范围），所以采样频率一般为44.1kHz，这样就可以保证采样声音达到20kHz也能被数字化，从而使得经过数字化处理之后，人耳听到的声音质量不会被降低</p>
<p>44.1kHz就是代表1秒会采样44100次</p>
<ul>
<li>量化</li>
</ul>
<p>在幅度轴上对信号进行数字化</p>
<ul>
<li>编码</li>
</ul>
<p>按照一定的格式记录采样和量化后的数字数据</p>
<p>音频格式有很多种，音频裸数据格式就是脉冲编码调制（PCM）数据。</p>
<p>描述一段PCM数据一般需要以下几个概念：<br>量化格式（sampleFormat）<br>采样率（sampleRate）<br>声道数（channel）</p>
<p>以CD音质为例：量化格式为16比特（2字节），采样率为44100，声道数为2，这些信息就描述</p>
<p>CD音质的比特率：即1秒时间内的比特数目，衡量音频数据单位时间内的容量大小<br>44100 * 16 * 2 = 1378.125kbps</p>
<p>那么1分钟内，这类CD音质的数据需要占据多大内存空间？<br>1378.125 * 60 / 8 / 1024 = 10.09M</p>
<p>如果sampleFormat更加精确（比如用4字节来描述一个采样）或者sampleRate更加密集（比如48kHz的采样率）那么所占的存储空间会更大，同时能够描述的声音细节会越精确</p>
<h5 id="音频编码"><a href="#音频编码" class="headerlink" title="音频编码"></a>音频编码</h5><p>通过计算CD音质的数据采样，每分钟需要存储10.1M，若要在网络中实时在线传播的话，数据量可能就太大了，需要进行压缩编码</p>
<p>压缩算法包括有损压缩和无损压缩，无损压缩是指解压后的数据可以完全恢复，有损压缩解压后的数据不能完全恢复，会丢失一部分信息，压缩比越小，丢失的信息就越多</p>
<p>压缩编码实际上是压缩掉冗余信号，冗余信号是指不能被人耳感知到的信号</p>
<p>常见压缩编码格式：</p>
<ol>
<li>WAV编码</li>
</ol>
<p>在PCM数据格式前加上44字节，分辨用来描述PCM的采样率、声道数、数据格式等信息</p>
<p>特点：音质非常好，大量软件都支持其播放</p>
<p>适合场所：多媒体开发中的中间文件，保存音乐和音效素材</p>
<ol start="2">
<li>MP3编码</li>
</ol>
<p>具有不错的压缩比，听感上非常解决WAV文件</p>
<p>特点：音质在128kbps/s以上表现还不错，压缩比比较高，大量软件和硬件都支持，兼容性好</p>
<p>适合场所：搞比特率下对兼容性有要求的音乐欣赏</p>
<ol start="3">
<li>AAC编码</li>
</ol>
<p>目前比较热门的有损压缩编码技术，并衍生出了LC-AAC、HE-AAC、HE-AAC v2三种主要编码格式。</p>
<p>LC-AAC 是比较传统的AAC，主要应用于中高码率场景编码（&gt;=80Kbit/s）</p>
<p>HE-AAC 主要应用于低码率场景的编码（&lt;=80Kbit/s）</p>
<p>HE-AAC v2 主要应用于低码率场景的编码（&lt;=48Kbit/s）</p>
<p>特点：在小于128Kbit/s的码率下表现优异，多用于视频中的音频编码</p>
<ol start="4">
<li>Ogg编码</li>
</ol>
<p>一种非常有潜力的编码，各种码率下都有比较优秀的表现，尤其在中低码率场景下。可以用更下的码率达到更好的音质，128Kbit/s的Ogg币192Kbit/s甚至更高码率的MP3还要出色，但目前还没有媒体服务软件的支持</p>
<p>特点：可以用比MP3更小的码率实现比MP3更好的音质，高中低码率下均有良好表现，兼容性不够好，流媒体特性不支持</p>
<p>适用场景：语音聊天的音频消息场景</p>
<h5 id="视频编码"><a href="#视频编码" class="headerlink" title="视频编码"></a>视频编码</h5><p>视频压缩也是通过去除冗余信息来进行压缩的</p>
<p>使用帧间编码技术可以去除时间上冗余信息</p>
<p>使用帧内编码技术可以去除空间上冗余信息</p>
<h5 id="编码概念"><a href="#编码概念" class="headerlink" title="编码概念"></a>编码概念</h5><p>MPEG 算法适用于动态视频的压缩算法，它除了对单幅图像进行编码外，还利用图像序列中的相关原则去除冗余，大大提高视频压缩比。</p>
<p>MPEG主要包括几个版本：Mpeg1（用于VCD）、Mpeg2（用于DVD）、Mpeg4 AVC（现在流媒体使用最多的就是它了）</p>
<p>相比较与ISO指定的MPEG的视频压缩标准，ITU-T制定的H.261、H.262、H.263、H.264一系列视频编码标准是一套单独的体系。其中H.264集中了以往标准的所有有点，采用简洁设计，使得它比Mpeg4更容易推广，现在使用最多的就是H.264标准</p>
<ul>
<li>I帧</li>
</ul>
<p>帧内编码帧，</p>
<ul>
<li><p>P帧</p>
</li>
<li><p>B帧</p>
</li>
</ul>
<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>项目增加C++支持，OC语法支持混编，把引用C++的OC类后缀名改为.mm，就可以和C++一块编译了</p>
<p>LAME 一种MP3编码引擎，转码成MP3格式的音频文件时，最常用的就是LAME库</p>
<p>编译LAME，<a href="https://lame.sourceforge.io/download.php">LAME</a> 下载不下来，使用别人编译好的版本 <a href="https://github.com/JIANHUI2015/RemoteIODemo">lame </a> 两个文件 lame.h 和 libmp3lame.a，拖进项目就可以了</p>
<h4 id="AudioUnit"><a href="#AudioUnit" class="headerlink" title="AudioUnit"></a>AudioUnit</h4><p>iOS 平台上所有的音频框架底层都是基于 AudioUnit 实现的</p>
<p>较高层次的音频框架包括：Mediia Player、AVFoundation、OpenAL、AudioToolbox，这些框架都封装了 AudioUnit，提供了更高层次的API（功能更少，职责更单一接口）</p>
<p><img src="/2021/08/03/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/AudioUnit.png" alt="AudioUnit"></p>
<p>如果对音频需要更高成都的控制、性能以及灵活性，或者想要使用一些特殊功能（回声消除）时，可以直接使用 AudioUnit API，以下场景更适合使用 AudioUnit</p>
<ul>
<li>想使用低延迟的音频 I/O（input或者output）比如说 VoIP 的应用场景下</li>
<li>多路声音的合成并且回放，比如游戏或者音乐合成器的应用</li>
<li>使用 AudioUnit 里提供的特殊功能，比如：回声消除、Mix两轨音频、以及均衡器、压缩器、混响器等效果器</li>
<li>需要图状结构来处理音频，可以将音频处理模块组装到灵活的图状结构中</li>
</ul>
<h6 id="AudioSession"><a href="#AudioSession" class="headerlink" title="AudioSession"></a>AudioSession</h6><p>音频会话，用于管理与获取 iOS 设备音频的硬件信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AVAudioSession *audioSession &#x3D; [AVAudioSession sharedInstance];</span><br><span class="line">NSError *error &#x3D; nil;</span><br><span class="line">&#x2F;&#x2F;设置以何种方式使用音频硬件</span><br><span class="line">[audioSession setCategory:AVAudioSessionCategoryPlayAndRecord error:&amp;error];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置I&#x2F;O的Buffer，Buffer越小则说明延迟越低</span><br><span class="line">NSTimeInterval bufferDuration &#x3D; 0.002;</span><br><span class="line">[audioSession setPreferredIOBufferDuration:bufferDuration error:&amp;error];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置采样频率 让硬件设备按照设置的采样频率来采集或者播放音频</span><br><span class="line">double hwSampleRate &#x3D; 44100.0;</span><br><span class="line">[audioSession setPreferredSampleRate:hwSampleRate error:&amp;error];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置完所有参数之后就可以激活 AudioSession</span><br><span class="line">[audioSession setActive:YES error:&amp;error];</span><br></pre></td></tr></table></figure>

<h6 id="构建-AudioUnit"><a href="#构建-AudioUnit" class="headerlink" title="构建 AudioUnit"></a>构建 AudioUnit</h6><p>创建并启用 AudioSession 音频会话之后就可以构建 AudioUnit 了</p>
<p>需要指定类型（Type）、子类型（subtype）以及厂商（Manufacture），利用三个变量可以完整描述一个 AudioUnit 了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AudioComponentDescription ioUnitDescription;</span><br><span class="line">ioUnitDescription.componentType &#x3D; kAudioUnitType_Output;</span><br><span class="line">ioUnitDescription.componentSubType &#x3D; kAudioUnitSubType_RemoteIO;</span><br><span class="line">&#x2F;&#x2F;比较固定 直接kAudioUnitManufacturer_Apple就可以了</span><br><span class="line">ioUnitDescription.componentManufacturer &#x3D; kAudioUnitManufacturer_Apple;</span><br><span class="line">ioUnitDescription.componentFlags &#x3D; 0;</span><br><span class="line">ioUnitDescription.componentFlagsMask &#x3D; 0;</span><br></pre></td></tr></table></figure>

<p>上面代码构造了 RemoteIO 类型的 AudioUnit 描述的结构体，下面构造 AudioUnit</p>
<p>两种方式构建：1. 使用 AudioUnit 裸的创建方式 2. 使用 AUGraph 和 AUNode 的 Wrapper 来构建</p>
<ol>
<li>裸的创建方式</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;根据 AudioUnit 的描述，找出实际的 AudioUnit 类型</span><br><span class="line">AudioComponent ioUnitRef &#x3D; AudioComponentFindNext(NULL, &amp;ioUnitDescription);</span><br><span class="line">&#x2F;&#x2F;声明一个 AudioUnit 引用</span><br><span class="line">AudioUnit ioUnitInstance;</span><br><span class="line">&#x2F;&#x2F;根据类型创建 AudioUnit 实例</span><br><span class="line">AudioComponentInstanceNew(ioUnitRef, &amp;ioUnitInstance);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>AUGraph 创建方式（扩展性更高）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;声明并实例化一个AUGraph</span><br><span class="line">AUGraph processingGraph;</span><br><span class="line">NewAUGraph(&amp;processingGraph);</span><br><span class="line">&#x2F;&#x2F;按照AudioUnit的描述在AUGraph中增加一个AUNode</span><br><span class="line">AUNode ioNode;</span><br><span class="line">AUGraphAddNode(processingGraph, &amp;ioUnitDescription, &amp;ioNode);</span><br><span class="line">&#x2F;&#x2F;打开AUGraph，必须在获取AudioUnit之前打开整个AUGraph</span><br><span class="line">AUGraphOpen(processingGraph);</span><br><span class="line">&#x2F;&#x2F;在AUGraph中的某个Node里获得AudioUnit的引用</span><br><span class="line">AudioUnit ioUnit;</span><br><span class="line">AUGraphNodeInfo(processingGraph, ioNode, NULL, &amp;ioUnit);</span><br></pre></td></tr></table></figure>

<h6 id="AudioUnit-通用参数"><a href="#AudioUnit-通用参数" class="headerlink" title="AudioUnit 通用参数"></a>AudioUnit 通用参数</h6><p>以 RemoteIO  为例，RemoteIO 这个 AudioUnit 是与硬件 IO 相关的一个 Unit，分为输入和输出端，输入端一般是麦克风，输出端一般指扬声器或者耳机，如果需要同事使用输入输出，即K歌应用中的耳返功能，则需要做一些设置将他们连接起来</p>
<img src="remoteio.png" alt="remoteio" style="zoom:90%;" />

<p>RemoteIO Unit 分为 Element0 和 Element 1，Element0 控制输出端，Element1 控制输入端，每个 Element 又分为 Input Scope 和 Output Scope。</p>
<p>如果想要使用扬声器的声音播放功能，必须将这个 Unit 的 Element0 的 OutputScope 和 Speaker 进行连接</p>
<p>如果想要使用麦克风录音功能，必须将这个Unit 的 Element1 的 InputScope 和麦克风进行连接</p>
<p>使用扬声器代码：把 RemoteIOUnit的 Element0 的 OutputScope 连接到 Speaker 上，会返回一个 OSStatus 值，使用自定义 CheckStatus 函数判断错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OSStatus status &#x3D; noErr;</span><br><span class="line">UInt32 oneFlag &#x3D; 1;</span><br><span class="line">&#x2F;&#x2F;Element 0</span><br><span class="line">UInt32 busZero &#x3D; 0;</span><br><span class="line">status &#x3D; AudioUnitSetProperty(ioUnit,</span><br><span class="line">                              kAudioOutputUnitProperty_EnableIO,</span><br><span class="line">                              kAudioUnitScope_Output,</span><br><span class="line">                              busZero,</span><br><span class="line">                              &amp;oneFlag,</span><br><span class="line">                              sizeof(oneFlag));</span><br><span class="line">&#x2F;&#x2F;自定义的CheckStatus函数来判断错误并输出</span><br><span class="line">CheckStatus(status, @&quot;Could not Connect To Speaker&quot;, YES);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CheckStatus</span><span class="params">(OSStatus status, NSString *message, BOOL fatal)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (status != noErr) &#123;</span><br><span class="line">        <span class="keyword">char</span> fourCC[<span class="number">16</span>];</span><br><span class="line">        *(UInt32 *)fourCC = CFSwapInt32HostToBig(status);</span><br><span class="line">        fourCC[<span class="number">4</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isprint</span>(fourCC[<span class="number">0</span>]) &amp;&amp;</span><br><span class="line">            <span class="built_in">isprint</span>(fourCC[<span class="number">1</span>]) &amp;&amp;</span><br><span class="line">            <span class="built_in">isprint</span>(fourCC[<span class="number">2</span>]) &amp;&amp;</span><br><span class="line">            <span class="built_in">isprint</span>(fourCC[<span class="number">3</span>])) &#123;</span><br><span class="line">            NSLog(@<span class="string">&quot;%@: %s&quot;</span>, message, fourCC);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            NSLog(@<span class="string">&quot;%@: %d&quot;</span>, message, (<span class="keyword">int</span>)status);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fatal) &#123;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启用麦克风：把 RemoteIOUnit 的 Element1 的 InputScope 连接上麦克风</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Element 1</span><br><span class="line">UInt32 busOne &#x3D; 1;</span><br><span class="line">AudioUnitSetProperty(ioUnit,</span><br><span class="line">                     kAudioOutputUnitProperty_EnableIO,</span><br><span class="line">                     kAudioUnitScope_Input,</span><br><span class="line">                     busOne,</span><br><span class="line">                     &amp;oneFlag,</span><br><span class="line">                     sizeof(oneFlag));</span><br></pre></td></tr></table></figure>

<p>连接成功后，就该给 AudioUnit 设置数据格式了，AudioUnit 数据格式分为输入和输出两个部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;设置AudioUnit数据格式 AudioStreamBasicDescription描述音视频具体格式</span><br><span class="line">UInt32 bytesPerSample &#x3D; sizeof(Float32);</span><br><span class="line">AudioStreamBasicDescription asbd;</span><br><span class="line">bzero(&amp;asbd, sizeof(asbd));</span><br><span class="line"></span><br><span class="line">double _samplerRate &#x3D; 44100.0;</span><br><span class="line">UInt32 channels &#x3D; 2;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;指定音频的编码格式 此处 PCM</span><br><span class="line">asbd.mFormatID &#x3D; kAudioFormatLinearPCM;</span><br><span class="line">&#x2F;&#x2F;采样率</span><br><span class="line">asbd.mSampleRate &#x3D; _samplerRate;</span><br><span class="line">&#x2F;&#x2F;声道数 1单身到 2立体声</span><br><span class="line">asbd.mChannelsPerFrame &#x3D; channels;</span><br><span class="line">&#x2F;&#x2F;每个Packers有几个Frame</span><br><span class="line">asbd.mFramesPerPacket &#x3D; 1;</span><br><span class="line">&#x2F;&#x2F;mFormatFlags 描述声音表示格式的参数</span><br><span class="line">&#x2F;&#x2F;kAudioFormatFlagsNativeFloatPacked 指定每个sample的表示格式是Float格式；</span><br><span class="line">&#x2F;&#x2F;kAudioFormatFlagIsNonInterleaved   左右声道是非交错存放的</span><br><span class="line">&#x2F;&#x2F;实际的音频数据会存储在一个 AudioBufferList结构中的变量mBuffers中，如果mFormatFlags指定的是 NonInterleaved，那么左声道就会在mBuffers[0]里面，右声道就会在 mBuffers[1]里面</span><br><span class="line">asbd.mFormatFlags &#x3D; kAudioFormatFlagsNativeFloatPacked | kAudioFormatFlagIsNonInterleaved;</span><br><span class="line">&#x2F;&#x2F;一个声道的音频数据用多少位来表示</span><br><span class="line">asbd.mBitsPerChannel &#x3D; 8 * bytesPerSample;</span><br><span class="line">&#x2F;&#x2F;每一帧有多少字节 mBytesPerFrame和mBytesPerPacket根据mFormatFlags来分配</span><br><span class="line">&#x2F;&#x2F;NonInterleaved情况下bytesPerSample(因为左右声道分开存放的)；Interleaved的话bytesPerSample * channels(因为左右声道是交错存放)</span><br><span class="line">asbd.mBytesPerFrame &#x3D; bytesPerSample;</span><br><span class="line">&#x2F;&#x2F;每个包有多少字节</span><br><span class="line">asbd.mBytesPerPacket &#x3D; bytesPerSample;</span><br></pre></td></tr></table></figure>

<p>构造好了 BasicDescription 结构体，将结构体设置给对应 AudioUnit</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;构造好了BasicDescription结构体，将这结构体设置给对应的AudioUnit</span><br><span class="line">AudioUnitSetProperty(ioUnit,</span><br><span class="line">                     kAudioUnitProperty_StreamFormat,</span><br><span class="line">                     kAudioUnitScope_Output, 1,</span><br><span class="line">                     &amp;asbd, sizeof(asbd));</span><br></pre></td></tr></table></figure>



<ul>
<li>kAudioOutputUnitProperty_EnableIO 用于启用或禁用 I/O Unit上的输入输出，默认启用输出但禁用输入</li>
<li>kAudioUnitProperty_ElementCount 配置 Mixer Unit上的输入元素数量</li>
<li>kAudioUnitProperty_MaximumFramesPerSlice 指定音频数据最大帧数</li>
<li>kAudioUnitProperty_StreamFormat 指定特定音频单元输入或输出总线的音频流数据格式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UInt32 maximumFramesPerSlice &#x3D; 4096;</span><br><span class="line">AudioUnitSetProperty (</span><br><span class="line">              _ioUnit,</span><br><span class="line">              kAudioUnitProperty_MaximumFramesPerSlice,</span><br><span class="line">              kAudioUnitScope_Global,0,</span><br><span class="line">              &amp;maximumFramesPerSlice,</span><br><span class="line">              sizeof (maximumFramesPerSlice));</span><br></pre></td></tr></table></figure>

<p>Global Scope适用于整个AudioUnit，不与任何特定音频流相关，只有1个元素即0，某些属性，如每个切片最大帧数，仅适用于 Global Scope</p>
<p>设置音频数据流格式</p>
<img src="音视频开发/IOWithoutRenderCallback.png" alt="IOWithoutRenderCallback" style="zoom:70%;" />













<h6 id="AudioUnit-分类"><a href="#AudioUnit-分类" class="headerlink" title="AudioUnit 分类"></a>AudioUnit 分类</h6><ol>
<li>Effect Unit</li>
</ol>
<p>类型是 <code>kAudioUnitType_Effect</code>，主要提供声音特效处理的功能，子类型如下：</p>
<p>均衡器效果：子类型是 <code>kAudioUnitSubType_NBandEQ</code>，主要作用 是为声音的某些频带增强或者减弱能量，该效果器需要指定多个频带， 然后为各个频带设置宽度以及增益，最终将改变声音在频域上的能量分布</p>
<p>压缩效果器：子类型是 <code>kAudioUnitSubType_DynamicsProcessor</code>，主 要作用是当声音较小的时候可以提高声音的能量，当声音的能量超过了 设置的阈值时，可以降低声音的能量，当然应合理地设置作用时间、释 放时间以及触发值，使得最终可以将声音在时域上的能量压缩到一定范 围之内</p>
<p>混响效果器：子类型是 <code>kAudioUnitSubType_Reverb2</code>，对于人声处 理来讲这是非常重要的效果器，可以想象自己身处在一个空房子中，如 果有非常多的反射声和原始声音叠加在一起，那么从听感上可能会更有 震撼力，但是同时原始声音也会变得更加模糊，原始声音的一些细节会 被遮盖掉，所以混响设置的大或者小对于不同的人来讲会很不一致，可以根据自己的喜好来进行设置</p>
<p>Effect Unit下最常使用的就是上述三种效果器，其下还有很多种子类型的效果器，像高通(High Pass)、低通(Low Pass)、带通 (Band Pass)、延迟(Delay)、压限(Limiter)等效果器</p>
<ol start="2">
<li>Mixer Units</li>
</ol>
<p>类型是 <code>kAudioUnitType_Mixer</code>，主要提供 Mix 多路声音的功能，子类型如下：</p>
<p>3D Mixer：该效果器在移动身上无法使用</p>
<p>MultiChannelMixer：子类型是 <code>kAudioUnitSubType_MultiChannelMixer</code>，它是多路声音混音的效果器，可以接收多路音频的输入，还可以 分别调整每一路音频的增益与开关，并将多路音频合并成一路，该效果 器在处理音频的图状结构中非常有用</p>
<p>OutputScope仅设置采样率</p>
<p>默认情况下 kAudioUnitProperty_MaximumFramesPerSlice 设置为1024，如果在屏幕锁定情况下播放音频，必须增加此属性值，除非音频输入处于活动状态</p>
<p>如果音频活动处于活动状态，无需为 kAudioUnitProperty_MaximumFramesPerSlice 设置值</p>
<p>如果音频输入不活跃，将此属性设置为 4096</p>
<ol start="3">
<li>I/O Units</li>
</ol>
<p>类型是 <code>kAudioUnitType_Output</code>，主要提供的就是I/O的功能</p>
<p>RemoteIO：子类型是 <code>kAudioUnitSubType_RemoteIO</code>，是用来采集音频与播放音频的</p>
<p>Generic Output：子类型是 <code>kAudioUnitSubType_GenericOutput</code>，当 开发者需要进行离线处理，或者说在AUGraph中不使用Speaker(扬声 器)来驱动整个数据流，而是希望使用一个输出(可以放入内存队列或 者进行磁盘I/O操作)来驱动数据流时，就使用该子类型</p>
<ol start="4">
<li>Format Converter Units</li>
</ol>
<p>类型是 <code>kAudioUnitType_FormatConverter</code>，主要用于提供格式转换 的功能，比如:采样格式由Float到SInt16的转换、交错和平铺的格式转换、单双声道的转换等</p>
<p>AUConverter：子类型是 <code>kAudioUnitSubType_AUConverter</code>，当某些效果器对输入的音频格式有 明确的要求时(比如3D Mixer Unit就必须使用UInt16格式的sample)， 或者开发者将音频数据输入给一些其他的编码器进行编码，又或者开发 者想使用SInt16格式的PCM裸数据在其他CPU上进行音频算法计算等的 场景下，就需要使用到这个ConverterNode了。下面来看一个比较典型的 场景，我们自定义一个音频播放器(代码仓库中的AudioPlayer项目)， 由FFmpeg解码出来的PCM数据是SInt16格式的，因此不能直接输送给 RemoteIO Unit进行播放，所以需要构建一个ConvertNode将SInt16格式 表示的数据转换为Float32格式表示的数据，然后再输送给RemoteIO Unit，最终才能正常播放出来</p>
<p>Time Pitch:子类型是 <code>kAudioUnitSubType_NewTimePitch</code>，即变速 变调效果器，这是一个很有意思的效果器，可以对声音的音高、速度进 行调整，像“会说话的Tom猫”类似的应用场景就可以使用这个效果器来 实现</p>
<ol start="5">
<li>Generator Units</li>
</ol>
<p>类型是 <code>kAudioUnitType_Generator</code>，在开发中我们经常使用它来提供播放器的功能</p>
<p>AudioFilePlayer：子类型是 <code>kAudioUnitSubType_AudioFilePlayer</code>， 在 AudioUnit 里面，如果我们的输入不是麦克风，而希望其是一个媒体 文件，当然，也可以类似于代码仓库中的 AudioPlayer 项目自行解码，转 换之后将数据输送给 RemoteIO Unit 播放出来，但是其实还有一种更加简 单、方便的方式，那就是使用 AudioFilePlayer 这个 AudioUnit，可以参考 代码仓库中的 AUPlayer 项目，该项目就是利用 AudioFilePlayer 作为输入 数据源来提供数据的。需要注意的是，必须在初始化 AUGraph 之后，再 去配置 AudioFilePlayer 的数据源以及播放范围等属性，否则就会出现错 误，其实数据源还是会调用 AudioFile 的解码功能，将媒体文件中的压缩 数据解压成为PCM裸数据，最终再交给 AudioFilePlayer Unit 进行后续处 理</p>
<h6 id="构造一个-AUGraph"><a href="#构造一个-AUGraph" class="headerlink" title="构造一个 AUGraph"></a>构造一个 AUGraph</h6><p>实际的K歌应用场景，会对用户发出的声音进行处理，并且立即给 用户一个耳返(在50ms之内将声音输出到耳机中，让用户可以听到)。 那么如何让 RemoteIOUnit 利用麦克风采集出来的声音，经过中间效果器 的处理，最终输出到 Speaker 中播放给用户呢？如何 以AUGraph的方式将声音采集、声音处理以及声音输出的整个过程管理 起来</p>
<p>首先要知道数据可以在通道中传递是由最右端 Speaker(RemoteIO Unit)来驱动的，它会向其前一级——AUNode要数 据，然后它的前一级会继续向上一级节点要数据，并最终从 RemoteIOUnit的Element1 (即麦克风)中要数据，这样就可以将数据按 照相反的方向一级一级地传递下去，最终传递到RemoteIOUnit的 Element0(即Speaker)并播放给用户听到。当然你可能会想到离线处理 的时候应该由谁来进行驱动呢?其实在进行离线处理的时候应该使用 Mixer Unit大类型下面子类型为Generic Output的AudioUnit来做驱动端。 那么这些AudioUnit或者说AUNode是如何进行连接的呢?有两种方式， 第一种方式是直接将AUNode连接起来;第二种方式是通过回调的方式 将两个AUNode连接起来</p>
<p><img src="/2021/08/03/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/02.png" alt="02"></p>
<ul>
<li>直接连接</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AUGraphConnectNodeInput(mPlayerGraph, mPlayerNode, 0, mPlayerIONode, 0);</span><br></pre></td></tr></table></figure>

<p>AUPlayer实例中的一段代码，目标是将Audio File Player Unit和RemoteIO Unit直接连接起来，当RemoteIO Unit需要播放数据的时 候，就会调用AudioFilePlayer Unit来获取数据，这样就把这两个 AudioUnit连接起来了</p>
<ul>
<li>回调方式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AURenderCallbackStruct renderProc;</span><br><span class="line">renderProc.inputProc &#x3D; &amp;inputAvailableCallback;</span><br><span class="line">renderProc.inputProcRefCon &#x3D; (__bridge void *)self;</span><br><span class="line">AUGraphSetNodeInputCallback(mGraph, ioNode, 0, &amp;finalRenderProc);</span><br></pre></td></tr></table></figure>

<p>这段代码首先是构造一个AURenderCallback的结构体，并指定一个 回调函数，然后设置给RemoteIO Unit的输入端，当RemoteIO Unit需要 数据输入的时候就会回调该回调函数，回调函数代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static OSStatus renderCallback(void *inRefCon, AudioUnitRenderActionFlags</span><br><span class="line">           *ioActionFlags, const AudioTimeStamp *inTimeStamp, UInt32</span><br><span class="line">           inBusNumber, UInt32 inNumberFrames, AudioBufferList *ioData)</span><br><span class="line"> &#123;</span><br><span class="line">     OSStatus result &#x3D; noErr;</span><br><span class="line">     __unsafe_unretained AUGraphRecorder *THIS &#x3D; (__bridge</span><br><span class="line">             AUGraphRecorder *)inRefCon;</span><br><span class="line">     AudioUnitRender(THIS-&gt;mixerUnit, ioActionFlags, inTimeStamp, 0,</span><br><span class="line">             inNumberFrames, ioData);</span><br><span class="line">     result &#x3D; ExtAudioFileWriteAsync(THIS-&gt;finalAudioFile, inNumberFrames,</span><br><span class="line">             ioData);</span><br><span class="line">     return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>该回调函数主要完成两件事情:第一件事情是去Mixer Unit里面要 数据，通过调用AudioUnitRender的方式来驱动Mixer Unit获取数据，得 到数据之后放入ioData中，从而填充回调方法中的参数，将Mixer Unit与 RemoteIO Unit连接了起来;第二件事情则是利用ExtAudioFile将这段声 音编码并写入本地磁盘的一个文件中</p>
<p>本节的代码仓库中包含了两个实例项目:一个是AUPlayer，利用 AudioFilePlayer Unit和RemoteIO Unit做了一个最简单的播放器;另外一个是AudioPlayer，它会利用FFmpeg进行解码操作，解码出来的是SInt16 格式表示的数据，然后再通过一个ConvertNode将其转换为Float32格式 表示的数据，最终输送给RemoteIO Unit进行播放。将这两个项目对比来 看，第二种方式十分不便</p>
<h4 id="音频采集"><a href="#音频采集" class="headerlink" title="音频采集"></a>音频采集</h4><p>示例代码 AudioRecorder</p>
<p>如果想要直接指定一个路径，可以将录制的音频编码到文件中，可以使用 <code> AVAudioRecorder</code>，优点是简单易用</p>
<p>但如果想要实时在内存中获取录音数据来说，限制性非常强，iOS提供了两个层次API来协助实现</p>
<p><code>AudioQueue</code>：是AudioUnit更高级的封装，功能更单一，接口调用更简单，如果仅仅要获取内存中的录音数据，然后再进行编码输出，用更高级的AudioQueue的API会更好些</p>
<p><code>AudioUnit</code>：如果要使用更多音效处理，以及实时的监听（耳机中听到自己说话），使用AudioUnit会更方便一些</p>
<p>要使用 AudioUnit，需要通过 AudioSession 来开启硬件设备以及对硬件设备做一些设置，然后才能使用 AudioUnit</p>
<ol>
<li>获取 AVAudioSession 实例</li>
<li>为 AVAudioSession 设置类别，录音的同时为用户输送监听耳返，类别使用 AVAudioSessionCategoryPlayAndRecord，</li>
<li>为 AVAudioSession 设置预设采样率</li>
<li>启用 AVAudioSession</li>
<li>为 AVAudioSession 设置路由监听，采集音频或视频输出的路线发生变化时（比如拔出耳机、蓝牙设备连接成功）回调此方法，以便可以重新设置使用当前最新的麦克风或扬声器</li>
</ol>
<p>接下来构造应用所使用的 AUGraph，因为这里要使用录音功能，所以需要启用RemoteIO这个AudioUnit 的InputElement。RemoteIO 这个 AudioUnit 比较特别，Input-Element实际 上使用的是麦克风，而OutputElement使用的则是扬声器，所以这里首先 会启用 RemoteIOUnit 的 InputElement。</p>
<p>为了支持所开发的App可以在后续 Mix 一轨伴奏这一扩展功能，在AUGraph中需要增加 MultiChannelMixer 这个 AudioUnit。由于每个 AudioUnit 的输入输出格式并不相同，所以这 里还要使用AudioConvert这个AudioUnit将输入的AudioUnit连接到  MixerUnit上。最终将 MixerUnit 连接到 RemoteIO 这个 AudioUnit 的 OutputElement，将声音发送到耳机的扬声器中(如果直接发送到手机的 扬声器中就会出现啸叫)，这样就将 AUGraph 整体地建立起来了</p>
<p><img src="/2021/08/03/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/01.png" alt="01"></p>
<p><a href="https://developer.apple.com/library/archive/documentation/Audio/Conceptual/AudioSessionProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007875">Audio Session Programming Guide</a></p>
<p><a href="https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/ConstructingAudioUnitApps/ConstructingAudioUnitApps.html#//apple_ref/doc/uid/TP40009492-CH16-SW1">Audio Unit Hosting Guide for iOS</a></p>
<p><a href="https://github.com/zhanxiaokai/iOS-AudioRecorder">音频采集代码 AudioRecorder</a></p>
<p><a href="https://github.com/zhanxiaokai?tab=repositories">音视频进阶开发指南源码</a></p>
]]></content>
  </entry>
  <entry>
    <title>《Flutter实战第二版》六：可滚动组件</title>
    <url>/2022/01/18/%E3%80%8AFlutter%E5%AE%9E%E6%88%98%E7%AC%AC%E4%BA%8C%E7%89%88%E3%80%8B%E5%85%AD%EF%BC%9A%E5%8F%AF%E6%BB%9A%E5%8A%A8%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="6-可滚动组件"><a href="#6-可滚动组件" class="headerlink" title="6 可滚动组件"></a>6 可滚动组件</h3><h5 id="6-1-可滚动组件"><a href="#6-1-可滚动组件" class="headerlink" title="6.1 可滚动组件"></a>6.1 可滚动组件</h5><p>Flutter 中有两种布局模型<br>基于 RenderBox 的盒模型布局<br>基于 Sliver（RenderSliver）按需加载列表布局</p>
<p>Flutter 中的可滚动主要由三个角色组成：Scollable、Viewport 和 Sliver<br>Scollable 用于处理滑动手势，确定滑动偏移，滑动偏移时构建 Viewport<br>Viewport 显示的视窗，即列表的可视区域<br>Sliver 视窗里显示的元素</p>
<ul>
<li>布局过程</li>
</ul>
<p>Scrollable 监听到用户滑动行为后，根据最新的滑动偏移构建 Viewport</p>
<p>Viewport 将当前视口信息和配置信息通过 SliverConstraints 传递给 Sliver</p>
<p>Sliver 中对子组件（RenderBox）按需进行构建和布局，然后确认自身的位置、绘制等信息，保存在 geometry 中（一个 SliverGeometry 类型的对象）</p>
<ul>
<li>Scrollable</li>
</ul>
<p>用于处理滑动手势，确定滑动偏移，滑动偏移变化时构建 Viewport</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Scrollable(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">this</span>.axisDirection = AxisDirection.down, <span class="comment">//滚动方向</span></span><br><span class="line">  <span class="keyword">this</span>.controller,</span><br><span class="line">  <span class="keyword">this</span>.physics,</span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">this</span>.viewportBuilder, <span class="comment">//后面介绍</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>physics</code> 接受一个 ScrollPhysics 类型的对象，决定可滚动组件如何响应用户操作</p>
<p>比如用户滑动完抬起手指后，继续执行动画；或者滑动到边界时如何显示，默认情况下，Flutter会根据平台分别使用不同 ScrollPhysics 对象，应用不同效果，如滑动到边界时，继续拖动，iOS上会出现弹性效果，Android上会出现微光效果</p>
<p>Flutter SDK中包含两个 ScrollPhysics 的子类</p>
<p>ClampingScrollPhysics 列表滑动到边界时将不能继续滑动，通常Android中配合GlowingOverscrollIndicator （实现微光效果的组件）使用</p>
<p>BouncingScrollPhysics iOS 下弹性效果</p>
<p><code>controller</code>  接受一个 ScrollController 对象，主要作用是控制滚动位置和监听滚动事件</p>
<p><code>viewportBuilder</code> 构建 Viewport 的回调，用户滑动时，Scrollable 会调用此回调构建新的 Viewport</p>
<ul>
<li>Viewport</li>
</ul>
<p>用于渲染当前视口中需要显示 Sliver</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Viewport(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  <span class="keyword">this</span>.axisDirection = AxisDirection.down,</span><br><span class="line">  <span class="keyword">this</span>.crossAxisDirection,</span><br><span class="line">  <span class="keyword">this</span>.anchor = <span class="number">0.0</span>,</span><br><span class="line">  <span class="keyword">required</span> ViewportOffset offset, <span class="comment">// 用户的滚动偏移</span></span><br><span class="line">  <span class="comment">// 类型为Key，表示从什么地方开始绘制，默认是第一个元素</span></span><br><span class="line">  <span class="keyword">this</span>.center,</span><br><span class="line">  <span class="keyword">this</span>.cacheExtent, <span class="comment">// 预渲染区域</span></span><br><span class="line">  <span class="comment">//该参数用于配合解释cacheExtent的含义，也可以为主轴长度的乘数</span></span><br><span class="line">  <span class="keyword">this</span>.cacheExtentStyle = CacheExtentStyle.pixel, </span><br><span class="line">  <span class="keyword">this</span>.clipBehavior = Clip.hardEdge,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; slivers = <span class="keyword">const</span> &lt;Widget&gt;[], <span class="comment">// 需要显示的 Sliver 列表</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>offset：该参数为 Scrollable 构建 Viewport 时传入，描述了 Viewport 应该显示哪一部分内容</p>
<p>cacheExtentStyle：是个枚举，有 pixel 和 viewport 两个取值，为 pixel 时，cacheExtent 的值为预渲染区域的具体像素长度，为 viewport 时，cacheExtent 的值是一个乘数，表示有几个 viewport 的长度</p>
<ul>
<li>Sliver</li>
</ul>
<p>Sliver 主要作用是对子组件进行构建和布局</p>
<ul>
<li>可滚动组件通用配置</li>
</ul>
<p>几乎所有的可滚动组件在构造时都能指定 scrollDirection（滚动的主轴）reverse（滑动方向是否反向）controller、physics、cacheExtent</p>
<ul>
<li>Scrollbar</li>
</ul>
<p>滚动条，如果要给滚动组件添加滚动条，只需将 Scrollbar 作为可滚动组件的任意一个父级组件即可</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Scrollbar(</span><br><span class="line">  child: SingleChildScrollView(</span><br><span class="line">    ...</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="6-2-SingleChildScrollView"><a href="#6-2-SingleChildScrollView" class="headerlink" title="6.2 SingleChildScrollView"></a>6.2 SingleChildScrollView</h4><p>SingleChildScrollView 类似 Android 中的 ScrollView</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">SingleChildScrollView(&#123;</span><br><span class="line">  <span class="keyword">this</span>.scrollDirection = Axis.vertical, <span class="comment">//滚动方向，默认是垂直方向</span></span><br><span class="line">  <span class="keyword">this</span>.reverse = <span class="keyword">false</span>, </span><br><span class="line">  <span class="keyword">this</span>.padding, </span><br><span class="line">  <span class="built_in">bool</span> primary, </span><br><span class="line">  <span class="keyword">this</span>.physics, </span><br><span class="line">  <span class="keyword">this</span>.controller,</span><br><span class="line">  <span class="keyword">this</span>.child,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>primary 属性：表示是否使用 widget 树中默认的 PrimaryScrollController</p>
<p>通常 SingleChildScrollView 只应在期望的内容不会超过屏幕太多的时候使用，因为 SingleChildScrollView 不支持基于 Sliver 的延迟加载模型</p>
<p>例如：将大写字母 A-Z 沿垂直方向显示，垂直方向空间会超过屏幕视口高度，使用 SingleChildScrollView</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleChildScrollViewTestRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">String</span> str = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> Scrollbar( <span class="comment">// 显示进度条</span></span><br><span class="line">      child: SingleChildScrollView(</span><br><span class="line">        padding: EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">        child: Center(</span><br><span class="line">          child: Column( </span><br><span class="line">            <span class="comment">//动态创建一个List&lt;Widget&gt;  </span></span><br><span class="line">            children: str.split(<span class="string">&quot;&quot;</span>) </span><br><span class="line">                <span class="comment">//每一个字母都用一个Text显示,字体为原来的两倍</span></span><br><span class="line">                .map((c) =&gt; Text(c, textScaleFactor: <span class="number">2.0</span>,)) </span><br><span class="line">                .toList(),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/WeChat6f1348f5e3cb71768b5c796b10ce1e55.png" alt="WeChat6f1348f5e3cb71768b5c796b10ce1e55" style="zoom:80%;" />

<h4 id="6-3-ListView"><a href="#6-3-ListView" class="headerlink" title="6.3 ListView"></a>6.3 ListView</h4><p>最常用可滚动组件之一，可以沿一个方向排布所有子组件，支持列表懒加载</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ListView(&#123;</span><br><span class="line">  ...  </span><br><span class="line">  <span class="comment">//可滚动widget公共参数</span></span><br><span class="line">  Axis scrollDirection = Axis.vertical,</span><br><span class="line">  <span class="built_in">bool</span> reverse = <span class="keyword">false</span>,</span><br><span class="line">  ScrollController? controller,</span><br><span class="line">  <span class="built_in">bool?</span> primary,</span><br><span class="line">  ScrollPhysics? physics,</span><br><span class="line">  EdgeInsetsGeometry? padding,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//ListView各个构造函数的共同参数  </span></span><br><span class="line">  <span class="built_in">double?</span> itemExtent,</span><br><span class="line">  Widget? prototypeItem, <span class="comment">//列表项原型，后面解释</span></span><br><span class="line">  <span class="built_in">bool</span> shrinkWrap = <span class="keyword">false</span>,</span><br><span class="line">  <span class="built_in">bool</span> addAutomaticKeepAlives = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">bool</span> addRepaintBoundaries = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">double?</span> cacheExtent, <span class="comment">// 预渲染区域长度</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">//子widget列表</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>itemExtent：参数如果不为 null，则会强制 children 的长度为 itemExtent 的值，长度指滚动方向上子组件的长度</p>
<p>prototypeItem：如果我们知道列表中的所有列表项长度都相同但不知道具体是多少，我们可以指定一个列表项，这个列表项为 prototypeItem（列表项原型），和 itemExtent 互斥</p>
<p>ShrinkWrap：是否跟进子组件总长度来设置 ListView 的长度，默认 false；默认情况下，ListView 会在滚动方向尽可能多的占用空间，当 ListView 在一个无边界（滚动向上）的容器中时，必须为 true</p>
<p>addAutomaticKeepAlives</p>
<p>addRepaintBoundaries</p>
<h5 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h5><p>默认构造函数有一个 children 参数，接受一个 Widget 列表，这种方式适合只有少量的子组件数量已知且比较少的情况，反之使用 ListView.builder 按需动态构建列表</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ListView(</span><br><span class="line">  shrinkWrap: <span class="keyword">true</span>, </span><br><span class="line">  padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    <span class="keyword">const</span> Text(<span class="string">&#x27;I\&#x27;m dedicating every day to you&#x27;</span>),</span><br><span class="line">    <span class="keyword">const</span> Text(<span class="string">&#x27;Domestic life was never quite my style&#x27;</span>),</span><br><span class="line">    <span class="keyword">const</span> Text(<span class="string">&#x27;When you smile, you knock me out, I fall apart&#x27;</span>),</span><br><span class="line">    <span class="keyword">const</span> Text(<span class="string">&#x27;And I thought I was so smart&#x27;</span>),</span><br><span class="line">  ],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="ListView-builder"><a href="#ListView-builder" class="headerlink" title="ListView.builder"></a>ListView.builder</h5><p>适合列表项比较多或者列表项不确定的情况</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ListView.builder(&#123;</span><br><span class="line">  <span class="comment">// ListView公共参数已省略  </span></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">required</span> IndexedWidgetBuilder itemBuilder,</span><br><span class="line">  <span class="built_in">int</span> itemCount,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>itemBuilder：是列表项的构造器</p>
<ul>
<li>例子</li>
</ul>
<p>itemCount 列表项数量，为null则为无限列表</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ListView.builder(</span><br><span class="line">  itemCount: <span class="number">100</span>,</span><br><span class="line">  itemExtent: <span class="number">50.0</span>, <span class="comment">//强制高度为50.0</span></span><br><span class="line">  itemBuilder: (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListTile(title: Text(<span class="string">&quot;<span class="subst">$index</span>&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/WeChatd89bad409c79874b042dc4ffbed29249.png" alt="WeChatd89bad409c79874b042dc4ffbed29249" style="zoom:80%;" />

<h5 id="ListView-separated"><a href="#ListView-separated" class="headerlink" title="ListView.separated"></a>ListView.separated</h5><p>可以在生成的列表项之间加一个分割组件，比 ListView.builder 多了一个 separatedBuilder 参数，是一个分割组件生成器</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListView3</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//下划线widget预定义以供复用。  </span></span><br><span class="line">    Widget divider1=Divider(color: Colors.blue,);</span><br><span class="line">    Widget divider2=Divider(color: Colors.green);</span><br><span class="line">    <span class="keyword">return</span> ListView.separated(</span><br><span class="line">      itemCount: <span class="number">100</span>,</span><br><span class="line">      <span class="comment">//列表项构造器</span></span><br><span class="line">      itemBuilder: (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">        <span class="keyword">return</span> ListTile(title: Text(<span class="string">&quot;<span class="subst">$index</span>&quot;</span>));</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//分割器构造器</span></span><br><span class="line">      separatorBuilder: (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">        <span class="keyword">return</span> index%<span class="number">2</span>==<span class="number">0</span>?divider1:divider2;</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/WeChat5ceee9697183ace9c3a29f3a4ca3973e.png" alt="WeChat5ceee9697183ace9c3a29f3a4ca3973e" style="zoom:80%;" />

<h5 id="固定高度列表"><a href="#固定高度列表" class="headerlink" title="固定高度列表"></a>固定高度列表</h5><p>给列表指定 itemExtent 或 prototypeItem 会有更高的性能，在知道列表项的高度都相同时，强烈建议指定 itemExtent 或 prototypeItem</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FixedExtentList</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> FixedExtentList(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.builder(</span><br><span class="line">   		prototypeItem: ListTile(title: Text(<span class="string">&quot;1&quot;</span>)),</span><br><span class="line">      <span class="comment">//itemExtent: 56,</span></span><br><span class="line">      itemBuilder: (context, index) &#123;</span><br><span class="line">        <span class="comment">//LayoutLogPrint是一个自定义组件，在布局时可以打印当前上下文中父组件给子组件的约束信息</span></span><br><span class="line">        <span class="keyword">return</span> LayoutLogPrint(</span><br><span class="line">          tag: index, </span><br><span class="line">          child: ListTile(title: Text(<span class="string">&quot;<span class="subst">$index</span>&quot;</span>)),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="无限加载列表"><a href="#无限加载列表" class="headerlink" title="无限加载列表"></a>无限加载列表</h5><p>从数据源异步分批次拉取数据，用 ListView 展示，当滑动到列表末尾时，判断是否需要去拉取数据，如果是，则去拉取，拉取过程中表尾显示一个 loading，拉取成功后将数据插入表尾，如果不需要拉取，则表尾显示没有更多</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:english_words/english_words.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/rendering.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InfiniteListView</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _InfiniteListViewState createState() =&gt; _InfiniteListViewState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_InfiniteListViewState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">InfiniteListView</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> loadingTag = <span class="string">&quot;##loading##&quot;</span>; <span class="comment">//表尾标记</span></span><br><span class="line">  <span class="keyword">var</span> _words = &lt;<span class="built_in">String</span>&gt;[loadingTag];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _retrieveData();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.separated(</span><br><span class="line">      itemCount: _words.length,</span><br><span class="line">      itemBuilder: (context, index) &#123;</span><br><span class="line">        <span class="comment">//如果到了表尾</span></span><br><span class="line">        <span class="keyword">if</span> (_words[index] == loadingTag) &#123;</span><br><span class="line">          <span class="comment">//不足100条，继续获取数据</span></span><br><span class="line">          <span class="keyword">if</span> (_words.length - <span class="number">1</span> &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="comment">//获取数据</span></span><br><span class="line">            _retrieveData();</span><br><span class="line">            <span class="comment">//加载时显示loading</span></span><br><span class="line">            <span class="keyword">return</span> Container(</span><br><span class="line">              padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">              alignment: Alignment.center,</span><br><span class="line">              child: SizedBox(</span><br><span class="line">                width: <span class="number">24.0</span>,</span><br><span class="line">                height: <span class="number">24.0</span>,</span><br><span class="line">                child: CircularProgressIndicator(strokeWidth: <span class="number">2.0</span>),</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//已经加载了100条数据，不再获取数据。</span></span><br><span class="line">            <span class="keyword">return</span> Container(</span><br><span class="line">              alignment: Alignment.center,</span><br><span class="line">              padding: EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">              child: Text(</span><br><span class="line">                <span class="string">&quot;没有更多了&quot;</span>,</span><br><span class="line">                style: TextStyle(color: Colors.grey),</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//显示单词列表项</span></span><br><span class="line">        <span class="keyword">return</span> ListTile(title: Text(_words[index]));</span><br><span class="line">      &#125;,</span><br><span class="line">      separatorBuilder: (context, index) =&gt; Divider(height: <span class="number">.0</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _retrieveData() &#123;</span><br><span class="line">    Future.delayed(<span class="built_in">Duration</span>(seconds: <span class="number">2</span>)).then((e) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        <span class="comment">//重新构建列表</span></span><br><span class="line">        _words.insertAll(</span><br><span class="line">          _words.length - <span class="number">1</span>,</span><br><span class="line">          <span class="comment">//每次生成20个单词</span></span><br><span class="line">          generateWordPairs().take(<span class="number">20</span>).map((e) =&gt; e.asPascalCase).toList(),</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/WeChat4aceb0db67ca479d945b472396307dd9.png" alt="WeChat4aceb0db67ca479d945b472396307dd9" style="zoom:80%;" />

<p>_retrieveData 是模拟从数据源异步获取数据，使用 english_words 包的 generateWordPairs 方法每次生成 20 个单词</p>
<h5 id="添加固定表头"><a href="#添加固定表头" class="headerlink" title="添加固定表头"></a>添加固定表头</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Column(children: &lt;Widget&gt;[</span><br><span class="line">    ListTile(title:Text(<span class="string">&quot;商品列表&quot;</span>)),</span><br><span class="line">    Expanded(</span><br><span class="line">      child: ListView.builder(itemBuilder: (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">        <span class="keyword">return</span> ListTile(title: Text(<span class="string">&quot;<span class="subst">$index</span>&quot;</span>));</span><br><span class="line">      &#125;),</span><br><span class="line">    ),</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自动拉伸 ListView 以填充屏幕剩余空间</p>
<h4 id="6-4-滚动监听及控制"><a href="#6-4-滚动监听及控制" class="headerlink" title="6.4 滚动监听及控制"></a>6.4 滚动监听及控制</h4><h5 id="6-4-1-ScrollController"><a href="#6-4-1-ScrollController" class="headerlink" title="6.4.1 ScrollController"></a>6.4.1 ScrollController</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ScrollController(&#123;</span><br><span class="line">  <span class="built_in">double</span> initialScrollOffset = <span class="number">0.0</span>, <span class="comment">//初始滚动位置</span></span><br><span class="line">  <span class="keyword">this</span>.keepScrollOffset = <span class="keyword">true</span>,<span class="comment">//是否保存滚动位置</span></span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>ScrollController 常用属性和方法</p>
<p>offset：可滚动组件当前的滚动位置</p>
<p>jumpTo(double offset)、animateTo(double offset, …)：这两个方法用于跳转到指定的位置</p>
<ul>
<li>滚动监听</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">controller.addListener(()=&gt;<span class="built_in">print</span>(controller.offset))</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<p>创建一个 ListView，滚动位置发生变化时，打印当前滚动位置，判断超过 1000 像素，屏幕右下角显示返回顶部按钮，按钮点击恢复到初始位置；没超过 1000 像素，隐藏按钮</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollControllerTestRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  ScrollControllerTestRouteState createState() &#123;</span><br><span class="line">    <span class="keyword">return</span> ScrollControllerTestRouteState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollControllerTestRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ScrollControllerTestRoute</span>&gt; </span>&#123;</span><br><span class="line">  ScrollController _controller = ScrollController();</span><br><span class="line">  <span class="built_in">bool</span> showToTopBtn = <span class="keyword">false</span>; <span class="comment">//是否显示“返回到顶部”按钮</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">//监听滚动事件，打印滚动位置</span></span><br><span class="line">    _controller.addListener(() &#123;</span><br><span class="line">      <span class="built_in">print</span>(_controller.offset); <span class="comment">//打印滚动位置</span></span><br><span class="line">      <span class="keyword">if</span> (_controller.offset &lt; <span class="number">1000</span> &amp;&amp; showToTopBtn) &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          showToTopBtn = <span class="keyword">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_controller.offset &gt;= <span class="number">1000</span> &amp;&amp; showToTopBtn == <span class="keyword">false</span>) &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          showToTopBtn = <span class="keyword">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="comment">//为了避免内存泄露，需要调用_controller.dispose</span></span><br><span class="line">    _controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&quot;滚动控制&quot;</span>)),</span><br><span class="line">      body: Scrollbar(</span><br><span class="line">        child: ListView.builder(</span><br><span class="line">          itemCount: <span class="number">100</span>,</span><br><span class="line">          itemExtent: <span class="number">50.0</span>, <span class="comment">//列表项高度固定时，显式指定高度是一个好习惯(性能消耗小)</span></span><br><span class="line">          controller: _controller,</span><br><span class="line">          itemBuilder: (context, index) &#123;</span><br><span class="line">            <span class="keyword">return</span> ListTile(title: Text(<span class="string">&quot;<span class="subst">$index</span>&quot;</span>),);</span><br><span class="line">          &#125;</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: !showToTopBtn ? <span class="keyword">null</span> : FloatingActionButton(</span><br><span class="line">        child: Icon(Icons.arrow_upward),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          <span class="comment">//返回到顶部时执行动画</span></span><br><span class="line">          _controller.animateTo(</span><br><span class="line">            <span class="number">.0</span>,</span><br><span class="line">            duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">200</span>),</span><br><span class="line">            curve: Curves.ease,</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/WeChat42973799693e4227480a0cc11ab05bd7.png" alt="WeChat42973799693e4227480a0cc11ab05bd7" style="zoom:80%;" />

<ul>
<li>滚动位置恢复</li>
</ul>
<p>PageStorage 是一个用于保存页面（路由）相关数据的组件，是一个功能型组件，拥有一个存储桶，子树中的widget可以通过指定不同的 PageStorageKey 来存储各自的数据或状态</p>
<p>每次滚动结束，可滚动组件都会将滚动位置 offset 存储到 PageStorage 中</p>
<p>如果 ScrollController.keepScrollOffset 为 false，则滚动位置将不会被存储</p>
<p>多个可滚动组件时，显示指定 PageStorageKey</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ListView(key: PageStorageKey(<span class="number">1</span>), ... );</span><br><span class="line">...</span><br><span class="line">ListView(key: PageStorageKey(<span class="number">2</span>), ... );</span><br></pre></td></tr></table></figure>

<ul>
<li>ScrollPosition</li>
</ul>
<p>ScrollPosition 是用来保存可滚动组件的滚动位置的，一个 ScrollController 对象可以同时被多个可滚动组件使用，ScrollController 会为每个可滚动组件创建一个 ScrollPosition 对象，这些 ScrollPosition 保存在 ScrollController 的 positions 属性中</p>
<p>offset</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">double</span> <span class="keyword">get</span> offset =&gt; position.pixels;</span><br><span class="line">...</span><br><span class="line">controller.positions.elementAt(<span class="number">0</span>).pixels</span><br><span class="line">controller.positions.elementAt(<span class="number">1</span>).pixels</span><br><span class="line">...    </span><br></pre></td></tr></table></figure>

<p>controller.positions.length 来确定 controller 被几个可滚动组件使用</p>
<ul>
<li>ScrollPosition 的方法</li>
</ul>
<p>ScrollPosition 两个常用方法 animateTo() 和 jumpTo()，控制跳转滚动位置的方法</p>
<h5 id="6-4-2-滚动监听"><a href="#6-4-2-滚动监听" class="headerlink" title="6.4.2 滚动监听"></a>6.4.2 滚动监听</h5><p>Flutter widget 树中，子 widget 可以通过发送通知与父（包括祖先）widget 通信，父 widget 通过 NotificationListener 组件监听自己关注的通知</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollNotificationTestRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ScrollNotificationTestRouteState createState() =&gt; _ScrollNotificationTestRouteState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ScrollNotificationTestRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ScrollNotificationTestRoute</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> _progress = <span class="string">&#x27;0%&#x27;</span>;<span class="comment">//保存进度百分比</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Scrollbar(<span class="comment">//进度条，监听滚动通知</span></span><br><span class="line">          child: NotificationListener(</span><br><span class="line">              onNotification: (ScrollNotification notification) &#123;</span><br><span class="line">                <span class="built_in">double</span> progress = notification.metrics.pixels / notification.metrics.maxScrollExtent;</span><br><span class="line">                setState(() &#123;</span><br><span class="line">                  <span class="keyword">var</span> value = (progress * <span class="number">100</span>).toInt();</span><br><span class="line">                  <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$value</span>%, <span class="subst">$progress</span>&quot;</span>);</span><br><span class="line">                  _progress = <span class="string">&quot;<span class="subst">$value</span>%&quot;</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">// print(progress);</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">              &#125;,</span><br><span class="line">              child: Stack(</span><br><span class="line">                alignment: Alignment.center,</span><br><span class="line">                children: [</span><br><span class="line">                  ListView.builder(</span><br><span class="line">                    itemCount: <span class="number">100</span>,</span><br><span class="line">                    itemExtent: <span class="number">50.0</span>,</span><br><span class="line">                    itemBuilder: (context, index) =&gt; ListTile(title: Text(<span class="string">&#x27;<span class="subst">$index</span>&#x27;</span>)),</span><br><span class="line">                  ),</span><br><span class="line">                  CircleAvatar(</span><br><span class="line">                    radius: <span class="number">30.0</span>,</span><br><span class="line">                    child: Text(_progress),</span><br><span class="line">                    backgroundColor: Colors.black54,</span><br><span class="line">                  ),</span><br><span class="line">                ],</span><br><span class="line">              )</span><br><span class="line">          )</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/WeChat5139ec30bc349c3ef1280b60d76c0f9e.png" alt="WeChat5139ec30bc349c3ef1280b60d76c0f9e" style="zoom:80%;" />

<p>接收到滚动事件时，参数类型为 ScrollNotification，包括一个 metrics 属性，类型是 ScrollMetrics</p>
<p>该属性包含当前 ViewPort 及滚动位置等信息</p>
<p>pixels：当前滚动位置<br>maxScrollPosition：最大可滚动长度<br>extentBefore：滑出ViewPort顶部的长度，相当于顶部滑出屏幕上方的列表长度<br>extentInside：ViewPort内部长度，相当于屏幕显示的列表长度<br>extentAfter：列表中未滑入ViewPort部分的长度<br>atEdge：是否滑到了可滚动组件的边界</p>
<h4 id="6-5-AnimatedList"><a href="#6-5-AnimatedList" class="headerlink" title="6.5 AnimatedList"></a>6.5 AnimatedList</h4><p>AnimatedList 和 ListView 的功能大体相似，AnimatedList 可以在列表中插入或删除节点时执行一个动画</p>
<ul>
<li>示例</li>
</ul>
<p>点击底部 + 号向列表追加一个列表项，点击列表项删除按钮，删除该列表项，添加和删除分别执行指定的动画</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimatedListRoute</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> AnimatedListRoute(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _AnimatedListRouteState createState() =&gt; _AnimatedListRouteState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AnimatedListRouteState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AnimatedListRoute</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = &lt;<span class="built_in">String</span>&gt;[];</span><br><span class="line">  <span class="built_in">int</span> counter = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> globalKey = GlobalKey&lt;AnimatedListState&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; counter; i++) &#123;</span><br><span class="line">      data.add(<span class="string">&#x27;<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Stack(</span><br><span class="line">      children: [</span><br><span class="line">        AnimatedList(</span><br><span class="line">          key: globalKey,</span><br><span class="line">          initialItemCount: data.length,</span><br><span class="line">          itemBuilder: (</span><br><span class="line">            BuildContext context,</span><br><span class="line">            <span class="built_in">int</span> index,</span><br><span class="line">            Animation&lt;<span class="built_in">double</span>&gt; animation,</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="comment">//添加列表项时会执行渐显动画</span></span><br><span class="line">            <span class="keyword">return</span> FadeTransition(</span><br><span class="line">              opacity: animation,</span><br><span class="line">              child: buildItem(context, index),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">        buildAddBtn(),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个 “+” 按钮，点击后会向列表中插入一项</span></span><br><span class="line">  Widget buildAddBtn() &#123;</span><br><span class="line">    <span class="keyword">return</span> Positioned(</span><br><span class="line">      child: FloatingActionButton(</span><br><span class="line">        child: Icon(Icons.add),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          <span class="comment">// 添加一个列表项</span></span><br><span class="line">          data.add(<span class="string">&#x27;<span class="subst">$&#123;++counter&#125;</span>&#x27;</span>);</span><br><span class="line">          <span class="comment">// 告诉列表项有新添加的列表项</span></span><br><span class="line">          globalKey.currentState!.insertItem(data.length - <span class="number">1</span>);</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;添加 <span class="subst">$counter</span>&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">      bottom: <span class="number">30</span>,</span><br><span class="line">      left: <span class="number">0</span>,</span><br><span class="line">      right: <span class="number">0</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建列表项</span></span><br><span class="line">  Widget buildItem(context, index) &#123;</span><br><span class="line">    <span class="built_in">String</span> char = data[index];</span><br><span class="line">    <span class="keyword">return</span> ListTile(</span><br><span class="line">      <span class="comment">//数字不会重复，所以作为Key</span></span><br><span class="line">      key: ValueKey(char),</span><br><span class="line">      title: Text(char),</span><br><span class="line">      trailing: IconButton(</span><br><span class="line">        icon: Icon(Icons.delete),</span><br><span class="line">        <span class="comment">// 点击时删除</span></span><br><span class="line">        onPressed: () =&gt; onDelete(context, index),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> onDelete(context, index) &#123;</span><br><span class="line">    <span class="comment">// 待实现</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>删除 onDelete 执行渐隐+收缩组合动画</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">setState(() &#123;</span><br><span class="line">  globalKey.currentState!.removeItem(</span><br><span class="line">    index,</span><br><span class="line">    (context, animation) &#123;</span><br><span class="line">      <span class="comment">// 删除过程执行的是反向动画，animation.value 会从1变为0</span></span><br><span class="line">      <span class="keyword">var</span> item = buildItem(context, index);</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;删除 <span class="subst">$&#123;data[index]&#125;</span>&#x27;</span>);</span><br><span class="line">      data.removeAt(index);</span><br><span class="line">      <span class="comment">// 删除动画是一个合成动画：渐隐 + 缩小列表项告诉</span></span><br><span class="line">      <span class="keyword">return</span> FadeTransition(</span><br><span class="line">        opacity: CurvedAnimation(</span><br><span class="line">          parent: animation,</span><br><span class="line">          <span class="comment">//让透明度变化的更快一些</span></span><br><span class="line">          curve: <span class="keyword">const</span> Interval(<span class="number">0.5</span>, <span class="number">1.0</span>),</span><br><span class="line">        ),</span><br><span class="line">        <span class="comment">// 不断缩小列表项的高度</span></span><br><span class="line">        child: SizeTransition(</span><br><span class="line">          sizeFactor: animation,</span><br><span class="line">          axisAlignment: <span class="number">0.0</span>,</span><br><span class="line">          child: item,</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">    duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">200</span>), <span class="comment">// 动画时间为 200 ms</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/WeChat11c3ca4197d326442fed540c599a1cd8.png" alt="WeChat11c3ca4197d326442fed540c599a1cd8" style="zoom:80%;" />

<h4 id="6-6-GridView"><a href="#6-6-GridView" class="headerlink" title="6.6 GridView"></a>6.6 GridView</h4><p>GridView 可以构建一个二维网格列表</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">GridView(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    Axis scrollDirection = Axis.vertical,</span><br><span class="line">    <span class="built_in">bool</span> reverse = <span class="keyword">false</span>,</span><br><span class="line">    ScrollController? controller,</span><br><span class="line">    <span class="built_in">bool?</span> primary,</span><br><span class="line">    ScrollPhysics? physics,</span><br><span class="line">    <span class="built_in">bool</span> shrinkWrap = <span class="keyword">false</span>,</span><br><span class="line">    EdgeInsetsGeometry? padding,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.gridDelegate,  <span class="comment">//下面解释</span></span><br><span class="line">    <span class="built_in">bool</span> addAutomaticKeepAlives = <span class="keyword">true</span>,</span><br><span class="line">    <span class="built_in">bool</span> addRepaintBoundaries = <span class="keyword">true</span>,</span><br><span class="line">    <span class="built_in">double?</span> cacheExtent, </span><br><span class="line">    <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>gridDelegate 类型是 SliverGridDelegate，作用是控制 GridView 子组件如何排列（layout）</p>
<p>Flutter 提供了 SliverGridDelegate 的子类，SliverGridDelegateWithFixedCrossAxisCount，SliverGridDelegateWithMaxCrossAxisExtent</p>
<ul>
<li>SliverGridDelegateWithFixedCrossAxisCount</li>
</ul>
<p>该子类实现了一个横轴为固定数量子元素的 layout 算法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">SliverGridDelegateWithFixedCrossAxisCount(&#123;</span><br><span class="line">  <span class="meta">@required</span> <span class="built_in">double</span> crossAxisCount,  <span class="comment">//横轴子元素数量</span></span><br><span class="line">  <span class="built_in">double</span> mainAxisSpacing = <span class="number">0.0</span>, <span class="comment">//主轴方向间距</span></span><br><span class="line">  <span class="built_in">double</span> crossAxisSpacing = <span class="number">0.0</span>, <span class="comment">//横轴方向子元素间距</span></span><br><span class="line">  <span class="built_in">double</span> childAspectRatio = <span class="number">1.0</span>, </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>childAspectRatio：子元素在横轴长度和主轴长度的比例</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">GridView(</span><br><span class="line">  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">      crossAxisCount: <span class="number">3</span>, <span class="comment">//横轴三个子widget</span></span><br><span class="line">      childAspectRatio: <span class="number">1.0</span> <span class="comment">//宽高比为1时，子widget</span></span><br><span class="line">  ),</span><br><span class="line">  children:&lt;Widget&gt;[</span><br><span class="line">    Icon(Icons.ac_unit),</span><br><span class="line">    Icon(Icons.airport_shuttle),</span><br><span class="line">    Icon(Icons.all_inclusive),</span><br><span class="line">    Icon(Icons.beach_access),</span><br><span class="line">    Icon(Icons.cake),</span><br><span class="line">    Icon(Icons.free_breakfast)</span><br><span class="line">  ]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/WeChat1903ec58a90f35b79a5be2f22e6d67bb.png" alt="WeChat1903ec58a90f35b79a5be2f22e6d67bb" style="zoom:80%;" />

<p>子元素的大小通过 crossAxisCount 和 childAspectRatio 两个参数共同决定的</p>
<h5 id="GridView-count"><a href="#GridView-count" class="headerlink" title="GridView.count"></a>GridView.count</h5><p>构造函数，通过它可以快速创建横轴固定数量子元素的 GridView，上面代码等价于</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">GridView.count( </span><br><span class="line">  crossAxisCount: <span class="number">3</span>,</span><br><span class="line">  childAspectRatio: <span class="number">1.0</span>,</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Icon(Icons.ac_unit),</span><br><span class="line">    Icon(Icons.airport_shuttle),</span><br><span class="line">    Icon(Icons.all_inclusive),</span><br><span class="line">    Icon(Icons.beach_access),</span><br><span class="line">    Icon(Icons.cake),</span><br><span class="line">    Icon(Icons.free_breakfast),</span><br><span class="line">  ],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>SliverGridDelegateWithMaxCrossAxisExtent</li>
</ul>
<p>该子类实现一个横轴子元素为固定最大长度的 layout 算法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">SliverGridDelegateWithMaxCrossAxisExtent(&#123;</span><br><span class="line">  <span class="built_in">double</span> maxCrossAxisExtent,</span><br><span class="line">  <span class="built_in">double</span> mainAxisSpacing = <span class="number">0.0</span>,</span><br><span class="line">  <span class="built_in">double</span> crossAxisSpacing = <span class="number">0.0</span>,</span><br><span class="line">  <span class="built_in">double</span> childAspectRatio = <span class="number">1.0</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>maxCrossAxisExtent：子元素在横轴上最大长度，横轴方向上每个子元素的长度仍然是等分的</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">GridView(</span><br><span class="line">  padding: EdgeInsets.zero,</span><br><span class="line">  gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(</span><br><span class="line">      maxCrossAxisExtent: <span class="number">120.0</span>,</span><br><span class="line">      childAspectRatio: <span class="number">2.0</span> <span class="comment">//宽高比为2</span></span><br><span class="line">  ),</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Icon(Icons.ac_unit),</span><br><span class="line">    Icon(Icons.airport_shuttle),</span><br><span class="line">    Icon(Icons.all_inclusive),</span><br><span class="line">    Icon(Icons.beach_access),</span><br><span class="line">    Icon(Icons.cake),</span><br><span class="line">    Icon(Icons.free_breakfast),</span><br><span class="line">  ],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/WeChatae018d1dc24fdb3bad25c5536cf3294b.png" alt="WeChatae018d1dc24fdb3bad25c5536cf3294b" style="zoom:80%;" />

<h5 id="GridView-extent"><a href="#GridView-extent" class="headerlink" title="GridView.extent"></a>GridView.extent</h5><p>构造函数，通过它可以快速构建纵轴子元素为固定最大长度的 GridView，上面代码等价于</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">GridView.extent(</span><br><span class="line">   maxCrossAxisExtent: <span class="number">120.0</span>,</span><br><span class="line">   childAspectRatio: <span class="number">2.0</span>,</span><br><span class="line">   children: &lt;Widget&gt;[</span><br><span class="line">     Icon(Icons.ac_unit),</span><br><span class="line">     Icon(Icons.airport_shuttle),</span><br><span class="line">     Icon(Icons.all_inclusive),</span><br><span class="line">     Icon(Icons.beach_access),</span><br><span class="line">     Icon(Icons.cake),</span><br><span class="line">     Icon(Icons.free_breakfast),</span><br><span class="line">   ],</span><br><span class="line"> );</span><br></pre></td></tr></table></figure>

<h5 id="GridView-builder"><a href="#GridView-builder" class="headerlink" title="GridView.builder"></a>GridView.builder</h5><p>上面介绍的都需要一个 widget 数组作为其子元素，适用于子 widget 数量比较少，子 widget 比较多时，可以通过 GridView.builder 来动态构建子 widget</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">GridView.builder(</span><br><span class="line"> ...</span><br><span class="line"> <span class="keyword">required</span> SliverGridDelegate gridDelegate, </span><br><span class="line"> <span class="keyword">required</span> IndexedWidgetBuilder itemBuilder,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<p>异步数据源分批获取 Icon</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InfiniteGridView</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _InfiniteGridViewState createState() =&gt; _InfiniteGridViewState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_InfiniteGridViewState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">InfiniteGridView</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;IconData&gt; _icons = []; <span class="comment">//保存Icon数据</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 初始化数据</span></span><br><span class="line">    _retrieveIcons();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> GridView.builder(</span><br><span class="line">      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">        crossAxisCount: <span class="number">3</span>, <span class="comment">//每行三列</span></span><br><span class="line">        childAspectRatio: <span class="number">1.0</span>, <span class="comment">//显示区域宽高相等</span></span><br><span class="line">      ),</span><br><span class="line">      itemCount: _icons.length,</span><br><span class="line">      itemBuilder: (context, index) &#123;</span><br><span class="line">        <span class="comment">//如果显示到最后一个并且Icon总数小于200时继续获取数据</span></span><br><span class="line">        <span class="keyword">if</span> (index == _icons.length - <span class="number">1</span> &amp;&amp; _icons.length &lt; <span class="number">200</span>) &#123;</span><br><span class="line">          _retrieveIcons();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Icon(_icons[index]);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//模拟异步获取数据</span></span><br><span class="line">  <span class="keyword">void</span> _retrieveIcons() &#123;</span><br><span class="line">    Future.delayed(<span class="built_in">Duration</span>(milliseconds: <span class="number">200</span>)).then((e) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _icons.addAll([</span><br><span class="line">          Icons.ac_unit,</span><br><span class="line">          Icons.airport_shuttle,</span><br><span class="line">          Icons.all_inclusive,</span><br><span class="line">          Icons.beach_access,</span><br><span class="line">          Icons.cake,</span><br><span class="line">          Icons.free_breakfast,</span><br><span class="line">        ]);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>_retrieveIcons() 方法中通过 Future.delayed 模拟异步数据源获取数据，每次获取数据 200 毫秒，调用 setState 重新构建</p>
<h4 id="6-7-PageView-与页面缓存"><a href="#6-7-PageView-与页面缓存" class="headerlink" title="6.7 PageView 与页面缓存"></a>6.7 PageView 与页面缓存</h4><h5 id="6-7-1-PageView"><a href="#6-7-1-PageView" class="headerlink" title="6.7.1 PageView"></a>6.7.1 PageView</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">PageView(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  <span class="keyword">this</span>.scrollDirection = Axis.horizontal, <span class="comment">// 滑动方向</span></span><br><span class="line">  <span class="keyword">this</span>.reverse = <span class="keyword">false</span>,</span><br><span class="line">  PageController? controller,</span><br><span class="line">  <span class="keyword">this</span>.physics,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">  <span class="keyword">this</span>.onPageChanged,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//每次滑动是否强制切换整个页面，如果为false，则会根据实际的滑动距离显示页面</span></span><br><span class="line">  <span class="keyword">this</span>.pageSnapping = <span class="keyword">true</span>,</span><br><span class="line">  <span class="comment">//主要是配合辅助功能用的，后面解释</span></span><br><span class="line">  <span class="keyword">this</span>.allowImplicitScrolling = <span class="keyword">false</span>,</span><br><span class="line">  <span class="comment">//后面解释</span></span><br><span class="line">  <span class="keyword">this</span>.padEnds = <span class="keyword">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Tab 页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Page(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.text,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> text;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _PageState createState() =&gt; _PageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Page</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;build <span class="subst">$&#123;widget.text&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Center(child: Text(<span class="string">&#x27;<span class="subst">$&#123;widget.text&#125;</span>&#x27;</span>, textScaleFactor: <span class="number">5</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建 PageView</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageViewRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> children = &lt;Widget&gt;[];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123; <span class="comment">//生成6个Tab页面</span></span><br><span class="line">      children.add(Page(text: <span class="string">&#x27;<span class="subst">$i</span>&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;标题&#x27;</span>)),</span><br><span class="line">      body: PageView(</span><br><span class="line">        children: children,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后就可以滑动来回切换页面了</p>
<img src="《Flutter实战第二版》六：可滚动组件/WeChat6ff7e4dc572a88cb6f32c91d7b3a5956.png" alt="WeChat6ff7e4dc572a88cb6f32c91d7b3a5956" style="zoom:80%;" />

<h5 id="6-7-2-页面缓存"><a href="#6-7-2-页面缓存" class="headerlink" title="6.7.2 页面缓存"></a>6.7.2 页面缓存</h5><p>上面每当页面切换时都会重新触发 Page 页的 build</p>
<p>allowImplicitScrolling 设置为 true，前后各缓存一个页面宽度</p>
<h4 id="6-8-可滚动组件子项缓存-KeepAlive"><a href="#6-8-可滚动组件子项缓存-KeepAlive" class="headerlink" title="6.8 可滚动组件子项缓存 KeepAlive"></a>6.8 可滚动组件子项缓存 KeepAlive</h4><p>ListView 有一个 addAutomaticKeepAlives 属性如果为 true，则 ListView 会为每一个列表项添加一个 AutomaticKeeyAlive 父组件</p>
<h5 id="6-8-1-AutomaticKeeyAlive"><a href="#6-8-1-AutomaticKeeyAlive" class="headerlink" title="6.8.1 AutomaticKeeyAlive"></a>6.8.1 AutomaticKeeyAlive</h5><p>AutomaticKeeyAlive 组件的主要作用是将列表项的 RenderObject 的 keepAlive 按需自动标记为 true 或 false</p>
<p>将列表组件的 Viewport 区域 + cacheExtent（预渲染区域）称为加载区域</p>
<p>keepAlive 标记为 false 时，如果列表项滑出加载区域时，列表组件将会被销毁</p>
<p>keepAlive 标记为 true 时，当列表项滑出加载区域后，Viewport 会将列表组件缓存起来，当列表项进入加载区域时，Viewport 从先缓存中查找是否已缓存，如果有则复用，没有则重新创建列表项</p>
<ul>
<li>让 PageView 示例实现页面缓存 </li>
</ul>
<p>Flutter 提供了一个 AutomaticKeepAliveClientMixin，只需让 PageState 混入这个 mixin，同时添加一些必要操作即可</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Page</span>&gt; <span class="title">with</span> <span class="title">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> wantKeepAlive =&gt; <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">super</span>.build(context);<span class="comment">//必须调用</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;build <span class="subst">$&#123;widget.text&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Center(child: Text(<span class="string">&#x27;<span class="subst">$&#123;widget.text&#125;</span>&#x27;</span>, textScaleFactor: <span class="number">5</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-8-2-KeepAliveWrapper"><a href="#6-8-2-KeepAliveWrapper" class="headerlink" title="6.8.2 KeepAliveWrapper"></a>6.8.2 KeepAliveWrapper</h5><p>作者分装的组件，如果哪个列表项需要缓存，只需要使用 KeepAliveWrapper 包裹下即可</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">var</span> children = &lt;Widget&gt;[];</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line">    <span class="comment">//只需要用 KeepAliveWrapper 包装一下即可</span></span><br><span class="line">    children.add(KeepAliveWrapper(child:Page( text: <span class="string">&#x27;<span class="subst">$i</span>&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> PageView(children: children);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>KeepAliveWrapper 源码 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeepAliveWrapper</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> KeepAliveWrapper(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">this</span>.keepAlive = <span class="keyword">true</span>,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.child,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">bool</span> keepAlive;</span><br><span class="line">  <span class="keyword">final</span> Widget child;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _KeepAliveWrapperState createState() =&gt; _KeepAliveWrapperState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_KeepAliveWrapperState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">KeepAliveWrapper</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">super</span>.build(context);</span><br><span class="line">    <span class="keyword">return</span> widget.child;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> didUpdateWidget(<span class="keyword">covariant</span> KeepAliveWrapper oldWidget) &#123;</span><br><span class="line">    <span class="keyword">if</span>(oldWidget.keepAlive != widget.keepAlive) &#123;</span><br><span class="line">      <span class="comment">// keepAlive 状态需要更新，实现在 AutomaticKeepAliveClientMixin 中</span></span><br><span class="line">      updateKeepAlive();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">super</span>.didUpdateWidget(oldWidget);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> wantKeepAlive =&gt; widget.keepAlive;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ListView 中测试下 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeepAliveTest</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> KeepAliveTest(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.builder(itemBuilder: (_, index) &#123;</span><br><span class="line">      <span class="keyword">return</span> KeepAliveWrapper(</span><br><span class="line">        <span class="comment">// 为 true 后会缓存所有的列表项，列表项将不会销毁。</span></span><br><span class="line">        <span class="comment">// 为 false 时，列表项滑出预加载区域后将会别销毁。</span></span><br><span class="line">        <span class="comment">// 使用时一定要注意是否必要，因为对所有列表项都缓存的会导致更多的内存消耗</span></span><br><span class="line">        keepAlive: <span class="keyword">true</span>,</span><br><span class="line">        child: ListItem(index: index),</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListItem</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ListItem(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.index&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> index;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ListItemState createState() =&gt; _ListItemState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ListItemState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ListItem</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListTile(title: Text(<span class="string">&#x27;<span class="subst">$&#123;widget.index&#125;</span>&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;dispose <span class="subst">$&#123;widget.index&#125;</span>&#x27;</span>);</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-9-TabBarView"><a href="#6-9-TabBarView" class="headerlink" title="6.9 TabBarView"></a>6.9 TabBarView</h4><h5 id="6-9-1-TabBarView"><a href="#6-9-1-TabBarView" class="headerlink" title="6.9.1 TabBarView"></a>6.9.1 TabBarView</h5><p>TabBarView 封装了 PageView </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> TabBarView(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  required this.children, &#x2F;&#x2F; tab 页</span><br><span class="line">  this.controller, &#x2F;&#x2F; TabController</span><br><span class="line">  this.physics,</span><br><span class="line">  this.dragStartBehavior &#x3D; DragStartBehavior.start,</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>

<p>TabController 用于监听和控制 TabBarView 的页面切换，通常和 TabBar 联动，如果没有指定，则会在组件树中向上查找并使用最近一个 DefaultTabController</p>
<h5 id="6-9-2-TabBar"><a href="#6-9-2-TabBar" class="headerlink" title="6.9.2 TabBar"></a>6.9.2 TabBar</h5><img src="《Flutter实战第二版》六：可滚动组件/image-20210822144239879.02ae3d67.png" alt="image-20210822144239879.02ae3d67" style="zoom: 67%;" />

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TabBar(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">this</span>.tabs, <span class="comment">// 具体的 Tabs，需要我们创建</span></span><br><span class="line">  <span class="keyword">this</span>.controller,</span><br><span class="line">  <span class="keyword">this</span>.isScrollable = <span class="keyword">false</span>, <span class="comment">// 是否可以滑动</span></span><br><span class="line">  <span class="keyword">this</span>.padding,</span><br><span class="line">  <span class="keyword">this</span>.indicatorColor,<span class="comment">// 指示器颜色，默认是高度为2的一条下划线</span></span><br><span class="line">  <span class="keyword">this</span>.automaticIndicatorColorAdjustment = <span class="keyword">true</span>,</span><br><span class="line">  <span class="keyword">this</span>.indicatorWeight = <span class="number">2.0</span>,<span class="comment">// 指示器高度</span></span><br><span class="line">  <span class="keyword">this</span>.indicatorPadding = EdgeInsets.zero, <span class="comment">//指示器padding</span></span><br><span class="line">  <span class="keyword">this</span>.indicator, <span class="comment">// 指示器</span></span><br><span class="line">  <span class="keyword">this</span>.indicatorSize, <span class="comment">// 指示器长度，有两个可选值，一个tab的长度，一个是label长度</span></span><br><span class="line">  <span class="keyword">this</span>.labelColor, </span><br><span class="line">  <span class="keyword">this</span>.labelStyle,</span><br><span class="line">  <span class="keyword">this</span>.labelPadding,</span><br><span class="line">  <span class="keyword">this</span>.unselectedLabelColor,</span><br><span class="line">  <span class="keyword">this</span>.unselectedLabelStyle,</span><br><span class="line">  <span class="keyword">this</span>.mouseCursor,</span><br><span class="line">  <span class="keyword">this</span>.onTap,</span><br><span class="line">  ...</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>

<p>TapBar 通常位于 AppBar 底部，也可以接收一个 TabController</p>
<p>Material 组件库中已实现了一个 Tab 组件，一般会直接使用它 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Tab(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  <span class="keyword">this</span>.text, <span class="comment">//文本</span></span><br><span class="line">  <span class="keyword">this</span>.icon, <span class="comment">// 图标</span></span><br><span class="line">  <span class="keyword">this</span>.iconMargin = <span class="keyword">const</span> EdgeInsets.only(bottom: <span class="number">10.0</span>),</span><br><span class="line">  <span class="keyword">this</span>.height,</span><br><span class="line">  <span class="keyword">this</span>.child, <span class="comment">// 自定义 widget</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="6-9-3-示例"><a href="#6-9-3-示例" class="headerlink" title="6.9.3 示例"></a>6.9.3 示例</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TabViewRoute1</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _TabViewRoute1State createState() =&gt; _TabViewRoute1State();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TabViewRoute1State</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">TabViewRoute1</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> TabController _tabController;</span><br><span class="line">  <span class="built_in">List</span> tabs = [<span class="string">&quot;新闻&quot;</span>, <span class="string">&quot;历史&quot;</span>, <span class="string">&quot;图片&quot;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _tabController = TabController(length: tabs.length, vsync: <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&quot;App Name&quot;</span>),</span><br><span class="line">        bottom: TabBar(</span><br><span class="line">          controller: _tabController,</span><br><span class="line">          tabs: tabs.map((e) =&gt; Tab(text: e)).toList(),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      body: TabBarView( <span class="comment">//构建</span></span><br><span class="line">        controller: _tabController,</span><br><span class="line">        children: tabs.map((e) &#123;</span><br><span class="line">          <span class="keyword">return</span> KeepAliveWrapper(</span><br><span class="line">            child: Container(</span><br><span class="line">              alignment: Alignment.center,</span><br><span class="line">              child: Text(e, textScaleFactor: <span class="number">5</span>),</span><br><span class="line">            ),</span><br><span class="line">          );</span><br><span class="line">        &#125;).toList(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    _tabController.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<img src="《Flutter实战第二版》六：可滚动组件/WeChatfe6ded64a5b41253fae7d920235ca757.png" alt="WeChatfe6ded64a5b41253fae7d920235ca757" style="zoom:80%;" />

<p>为了实现 TabBar 和 TabBarView 的联动，显式创建了一个 TabController，TabController 又需要一个 TickerProvider（vsync参数）我们又混入了 SingleTickerProviderStateMixin ；TabController 中会执行动画，持有一些资源，所以在页面销毁时必须得释放资源</p>
<p>实战中，如果需要 TabBar 和 TabBarView 联动，通常会创建一个 DefaultTabController 作为他们共同的父级组件，这样它们在执行时就会从组件树向上查找，都会使用我们指定的这个 DefaultTabController，修改后如下</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TabViewRoute2</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">List</span> tabs = [<span class="string">&quot;新闻&quot;</span>, <span class="string">&quot;历史&quot;</span>, <span class="string">&quot;图片&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> DefaultTabController(</span><br><span class="line">      length: tabs.length,</span><br><span class="line">      child: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">&quot;App Name&quot;</span>),</span><br><span class="line">          bottom: TabBar(</span><br><span class="line">            tabs: tabs.map((e) =&gt; Tab(text: e)).toList(),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        body: TabBarView( <span class="comment">//构建</span></span><br><span class="line">          children: tabs.map((e) &#123;</span><br><span class="line">            <span class="keyword">return</span> KeepAliveWrapper(</span><br><span class="line">              child: Container(</span><br><span class="line">                alignment: Alignment.center,</span><br><span class="line">                child: Text(e, textScaleFactor: <span class="number">5</span>),</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125;).toList(),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到我们无需去手动管理Controller的生命周期，也不需要提供 SingleTickerProviderStateMixin，同时也没有其它的状态需要管理，也就不需要用 StatefulWidget 了</p>
<h4 id="6-10-CustomScrollView-和-Slivers"><a href="#6-10-CustomScrollView-和-Slivers" class="headerlink" title="6.10 CustomScrollView 和 Slivers"></a>6.10 CustomScrollView 和 Slivers</h4><h5 id="6-10-1-CustomScrollView"><a href="#6-10-1-CustomScrollView" class="headerlink" title="6.10.1 CustomScrollView"></a>6.10.1 CustomScrollView</h5><p>Flutter 提供了一个 CustomScrollView 组件帮助我们创建一个公共的 Scrollable 和 Viewport，然后它的 slivers 参数接受一个 Sliver 数组</p>
<p>加入我们想要在一个页面中，同时包含多个可滚动组件，且使他们的滑动效果统一起来</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget buildTwoSliverList() &#123;</span><br><span class="line">  <span class="comment">// SliverFixedExtentList 是一个 Sliver，它可以生成高度相同的列表项。</span></span><br><span class="line">  <span class="comment">// 再次提醒，如果列表项高度相同，我们应该优先使用SliverFixedExtentList </span></span><br><span class="line">  <span class="comment">// 和 SliverPrototypeExtentList，如果不同，使用 SliverList.</span></span><br><span class="line">  <span class="keyword">var</span> listView = SliverFixedExtentList(</span><br><span class="line">    itemExtent: <span class="number">56</span>, <span class="comment">//列表项高度固定</span></span><br><span class="line">    delegate: SliverChildBuilderDelegate(</span><br><span class="line">      (_, index) =&gt; ListTile(title: Text(<span class="string">&#x27;<span class="subst">$index</span>&#x27;</span>)),</span><br><span class="line">      childCount: <span class="number">10</span>,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 使用</span></span><br><span class="line">  <span class="keyword">return</span> CustomScrollView(</span><br><span class="line">    slivers: [</span><br><span class="line">      listView,</span><br><span class="line">      listView,</span><br><span class="line">    ],</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="《Flutter实战第二版》六：可滚动组件/combine-twolist.74a615bf.gif" alt="combine-twolist.74a615bf" style="zoom:80%;" />

<h5 id="6-10-2-Flutter-中常用的Sliver"><a href="#6-10-2-Flutter-中常用的Sliver" class="headerlink" title="6.10.2 Flutter 中常用的Sliver"></a>6.10.2 Flutter 中常用的Sliver</h5><table>
<thead>
<tr>
<th>Sliver名称</th>
<th>功能</th>
<th>对应的可滚动组件</th>
</tr>
</thead>
<tbody><tr>
<td>SliverList</td>
<td>列表</td>
<td>ListView</td>
</tr>
<tr>
<td>SliverFixedExtentList</td>
<td>高度固定的列表</td>
<td>ListView，指定<code>itemExtent</code>时</td>
</tr>
<tr>
<td>SliverAnimatedList</td>
<td>添加/删除列表项可以执行动画</td>
<td>AnimatedList</td>
</tr>
<tr>
<td>SliverGrid</td>
<td>网格</td>
<td>GridView</td>
</tr>
<tr>
<td>SliverPrototypeExtentList</td>
<td>根据原型生成高度固定的列表</td>
<td>ListView，指定<code>prototypeItem</code> 时</td>
</tr>
<tr>
<td>SliverFillViewport</td>
<td>包含多给子组件，每个都可以填满屏幕</td>
<td>PageView</td>
</tr>
</tbody></table>
<p>除了和列表对应的 Sliver 之外还有一些用于对 Sliver 进行布局、装饰的组件，<strong>它们的子组件必须是 Sliver</strong>，我们列举几个常用的</p>
<table>
<thead>
<tr>
<th>Sliver名称</th>
<th>对应 RenderBox</th>
</tr>
</thead>
<tbody><tr>
<td>SliverPadding</td>
<td>Padding</td>
</tr>
<tr>
<td>SliverVisibility、SliverOpacity</td>
<td>Visibility、Opacity</td>
</tr>
<tr>
<td>SliverFadeTransition</td>
<td>FadeTransition</td>
</tr>
<tr>
<td>SliverLayoutBuilder</td>
<td>LayoutBuilder</td>
</tr>
</tbody></table>
<p>还有一些其它常用的 Sliver</p>
<table>
<thead>
<tr>
<th>Sliver名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>SliverAppBar</td>
<td>对应 AppBar，主要是为了在 CustomScrollView 中使用。</td>
</tr>
<tr>
<td>SliverToBoxAdapter</td>
<td>一个适配器，可以将 RenderBox 适配为 Sliver，后面介绍。</td>
</tr>
<tr>
<td>SliverPersistentHeader</td>
<td>滑动到顶部时可以固定住，后面介绍。</td>
</tr>
</tbody></table>
<ul>
<li>示例</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为本路由没有使用 Scaffold，为了让子级Widget(如Text)使用</span></span><br><span class="line"><span class="comment">// Material Design 默认的样式风格,我们使用 Material 作为本路由的根。</span></span><br><span class="line">Material(</span><br><span class="line">  child: CustomScrollView(</span><br><span class="line">    slivers: &lt;Widget&gt;[</span><br><span class="line">      <span class="comment">// AppBar，包含一个导航栏.</span></span><br><span class="line">      SliverAppBar(</span><br><span class="line">        pinned: <span class="keyword">true</span>, <span class="comment">// 滑动到顶端时会固定住</span></span><br><span class="line">        expandedHeight: <span class="number">250.0</span>,</span><br><span class="line">        flexibleSpace: FlexibleSpaceBar(</span><br><span class="line">          title: <span class="keyword">const</span> Text(<span class="string">&#x27;Demo&#x27;</span>),</span><br><span class="line">          background: Image.asset(</span><br><span class="line">            <span class="string">&quot;./imgs/sea.png&quot;</span>,</span><br><span class="line">            fit: BoxFit.cover,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      SliverPadding(</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">        sliver: SliverGrid(</span><br><span class="line">          <span class="comment">//Grid</span></span><br><span class="line">          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">            crossAxisCount: <span class="number">2</span>, <span class="comment">//Grid按两列显示</span></span><br><span class="line">            mainAxisSpacing: <span class="number">10.0</span>,</span><br><span class="line">            crossAxisSpacing: <span class="number">10.0</span>,</span><br><span class="line">            childAspectRatio: <span class="number">4.0</span>,</span><br><span class="line">          ),</span><br><span class="line">          delegate: SliverChildBuilderDelegate(</span><br><span class="line">            (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">              <span class="comment">//创建子widget</span></span><br><span class="line">              <span class="keyword">return</span> Container(</span><br><span class="line">                alignment: Alignment.center,</span><br><span class="line">                color: Colors.cyan[<span class="number">100</span> * (index % <span class="number">9</span>)],</span><br><span class="line">                child: Text(<span class="string">&#x27;grid item <span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">            childCount: <span class="number">20</span>,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      SliverFixedExtentList(</span><br><span class="line">        itemExtent: <span class="number">50.0</span>,</span><br><span class="line">        delegate: SliverChildBuilderDelegate(</span><br><span class="line">          (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">            <span class="comment">//创建列表项</span></span><br><span class="line">            <span class="keyword">return</span> Container(</span><br><span class="line">              alignment: Alignment.center,</span><br><span class="line">              color: Colors.lightBlue[<span class="number">100</span> * (index % <span class="number">9</span>)],</span><br><span class="line">              child: Text(<span class="string">&#x27;list item <span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">          childCount: <span class="number">20</span>,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>头部 SliverAppBar：SliverAppBar 对应 APPBar，不同之处在于 SliverAppBar 可以集成到 CustomScrollView， SliverAppBar 可以结合 FlexibleSpaceBar 实现Material Design 中头部伸缩的模型</p>
<p>中间 SliverGrid：它用 SliverPadding 包裹以给 SliverGrid 添加补白。SliverGrid 是一个两列，宽高比为4的网格，它有20个子组件</p>
<p>底部SliverFixedExtentList：它是一个所有子元素高度都为50像素的列表</p>
<img src="《Flutter实战第二版》六：可滚动组件/WeChata2a92923087dac38a2ad6c5e16f9cfb4.png" alt="WeChata2a92923087dac38a2ad6c5e16f9cfb4" style="zoom:80%;" />

<ul>
<li>SliverToBoxAdapter</li>
</ul>
<p>实际布局中，通常需要在 CustomScrollView 中添加一些自定义组件，这些组件并非都有 Sliver 版本，为此 Flutter 提供了一个 SliverToBoxAdapter 组件，是一个适配器，可以将 RenderBox 适配为 Sliver。</p>
<p>比如想在列表顶部加一个可以横向滚动的 PageView，可以使用 SliverToBoxAdapter 来适配</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">CustomScrollView(</span><br><span class="line">  slivers: [</span><br><span class="line">    SliverToBoxAdapter(</span><br><span class="line">      child: SizedBox(</span><br><span class="line">        height: <span class="number">300</span>,</span><br><span class="line">        child: PageView(</span><br><span class="line">          children: [Text(<span class="string">&quot;1&quot;</span>), Text(<span class="string">&quot;2&quot;</span>)],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">    buildSliverFixedList(),</span><br><span class="line">  ],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>SliverPersistentHeader</li>
</ul>
<p>SliverPersistentHeader 的功能是当滑动到 CustomScrollView 的顶部时，可以将组件固定在顶部</p>
<h4 id="6-11-自定义-Sliver"><a href="#6-11-自定义-Sliver" class="headerlink" title="6.11 自定义 Sliver"></a>6.11 自定义 Sliver</h4><h4 id="6-12-嵌套可滚动组件-NestedScrollView"><a href="#6-12-嵌套可滚动组件-NestedScrollView" class="headerlink" title="6.12 嵌套可滚动组件 NestedScrollView"></a>6.12 嵌套可滚动组件 NestedScrollView</h4><p>CustomScrollView 只能组合 Sliver，如果有孩子也是可滚动组件（通过SliverToBoxAdapter嵌入）且他们滑动方向一致时便不能正常工作，解决这个问题 NestedScrollView</p>
]]></content>
  </entry>
  <entry>
    <title>anti</title>
    <url>/2021/12/06/anti/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="f399bcd89cd99dd295add6f637e534163715188e89a01b1e0fd8780ce1bf889c">850b39b29b344cb8879ce9506751f488737aa98aafe5116b1a87c0f3817fa6c5dc3e5d386f2d27acd20ce85e0b913e97942ae38c914ae58955b62546f2205be7a78c7953e3f6dabf6be714ea6fc8fdf0dd132891e9d4d55b857ae024b7b89e026211c582d6c726fc3c054b2f8208f6d95ef410cf8ad266840868d420b0acc6237a26d881dce929ca86e5dc1130293d5c74000a2f5991c9831074d5472abff9824bef927bea06a20f54255b10f16f81a8222632ad761ecaac75914fec3ebb7e88ed3c49d7610a8b2836062f9241893eebadc5d8326b089e3edf002e9ac96eb47c14b749108710bbe586f669e521880db7655509cd04cc904e81273363bf3d3db5976973dc8fd3fcdf74f390d8e5900276f5f7f5ed3c1f6622e4796cd59c7e42af70ea22c84d78aa3e7285d685171d503a9c5e8a6da2f538648eae1ce1068e002eeafb965814cd96c57deb9d25acc217ec738bac5f267319163e0bbbe4b9484267b38fe85f7dcabd8fa0dca2242ba150156766d931b3f1c58336e27b30f68433fee7d69b950df87b7a31e8da7c0192ef237d0940d27230d401c80f1cb764b643bf520ed965b67d500691ef14b074af4d2df422e9e55c44254afe92f7cdd8efd03e8d39d09c1c944e61f90315ecbe92f1c83c1d1729c0777e623a24a7a12464fcc110a7be73a697dbffda4f6f4a6cd2ae41539aa235425f70009e5fdbc6ae7f3cc22e5102e1a644861d6ee4154561f3227b8b9a0b00f02445ef575866d23b546c35000f3aeef390cb12b7dac3d20e13c8ef941549ba23eda743bb539933956a65759fd09cdb042cacd23f6769ee7f80113f1659595a5f567edf21cc582c72576f0d92ad2eeee39ce5f96357d6e346761f3223fab57e16ce69f2f40820ce84eb84b661549658a82e8fa72a14cd159b37cb587685c76f4a5207155a8fcf85f0f6862107d548672fe4c328ed80448a51f881d88066bc2f09e4e8f9bc803e8f540eaaae89876f0e6214fc14cd6a96d4a482dca97d3569b0e472405a89c7bf8a8b4aacd1fa06b12bbecc7b30b9f4b9766218aa33f551122fe53776187be3483e180826cb0fa6e8c636145593cb70bac930402697a5efb7fb8772a2224f0fa9055507be5704fe11a11fd5144bbbdc95b453fed0f997104e35efb9d15c8da481c3340b7fb6a86f013277d81c3b9e5b1cb3d86dd5a48ca779eb25dca63989d51a335104b9ddeeb73c614dbdb87e8638e99d4bb542a55471ba40e3bface490248cedbc53caacc03edff56de289849c8223f8d9fb48ed261b6f21cb5f5c5263264ce6690b866ddaee6e954ee8c2a251b3d5c579db8da30f9720a06e92f0e1f932aacb1f5edf6aa970ccef32109d738aa4321b0ed336d4438a1428a3e1e327442376922deaa9fa3a6b4179599ef01569f7e80047ff7735cfd58b9133256e57c228748937e2ab8f9ea4a1dcfddeed918c22cb1033183880febb70652fb16860ef74de45d0a9067b47854235dc9efab154baf8eb75a81ec20616604db5aeeeb9782b60a69fcc11eab22a934e2359cf2a444d0d787862d514bd683d718260b5f15b7f0d254c97cc3a5ab550aa8abb5cc0fad3a951a3efbfaeda89ad724db7ef55fe257dbd682fe51318936f2176e7f21ccb0862d20fe5b8e5322375f0f2fcedc9ad96b1745f7316b5e70b3bac9623575928a636416fa727a8de99febd24d79edc3cb3c71022178cb78cbd163cbb880aeea26e4793181399bb44b3a43c0bde9409ed1cec0a74fec70c2256778f23f054b0dd4f16f5557a50294f19f2c006e727a9d5cddc342bd41a0f21ddc7fd31c179e10a2139bc43d57c900ec5c4be5c941e627f128911fd796b7f97c689e5bf8ec9a73b682dc5cf912fb7037d09afff167a73ca11d74ae0ff7f5cfb9d4f17ce736bb454194abd61712881fc0bb3d2b27a6ae5eb7ecc7e3dd9d96a5793a7c8503091640f1b4c9898e7a651e4da3437d9028b0e1fbc5aeef3b23290dbe910bc51bf8901f997bd1307eefc4ab2b69f0fab7c2b63830c31e67ce5eaed248fcaef83469808eb79575f25672c1589d57adaf30fa3945180d76a847514c05aaf7d649248c5bd48328e6dde55100dead796a13efb5895d8e01769af03fc75e31b41a0be7d013d353ba5808560957a16f8646c55eb4f5b3ab1f1a0a46e03f94674dc1a3055ea2b1d2a1a89fbbae401c0ee47344aa9db6077e5d3e2c3245921d48a2c1ff448e6eabe19b9d3732af5c212719f4b6b6ab2d6cc949e6aafe3ef7a9cc8804d3417046e9831fa978ba09c4f166674da8e2ffc93fa78a3d8b918afc7561119c3610f9d3dfbce91cb89fc259091542aa3d1db7e71d299f2fe82451cc4e80202d252d310c7892688a48df3535ac45c80a71e84d11dd80a1acfed8993faec031144e9611bb316c9d9427f132abda96e8b7972cc3c8a0d57978cbc8710e3548606d7b9a45aff3f2a7e3b03d123f078493b0067626c4d4f05bfd574174dc1054c22dac3a79ac4431b90e23042906cad4fe20dfc630efdd27115a302c42fd81ee4600fa7984dc98ec07b050a2e6dc79fe2d62a5548c41ea29fc25fc2a8aa1b7a0447c4abcbb0c11bc59980b859dc13f25eaa6d7760d65ad6dd9dc61aed312d66fae3a59907f21c1ca15f7cba05006a29ab8ddd70ea7707107ee4eb5bb7b6429e9e46940c88c346a6ffbc0f4f34a5e2452963a57373128ca9dc23faced8bf277d7a9cc7dd1b25b6e67289e0fbf900c29bd05b20b9d35e3da06350b357ac1fce1fdf190173c7e5b9e7be2f1c29b86c7e396f1701e454ec5db6f191b8cb4bc5857360c8b99544e2a5609226525107a767f1f489b1a194a56c5ec888d80793b7a633df010519db4c3d080258d6cfc71976794d00dfdf3a6af905c80d18220c0458399579b9a41684c3c1f35e9e2401f7f731a66d2649855783d12ee0531d9038c2f9a7b0d26eb0ad94c03d0b7ddf39422acc4deaffd6a78a42d325309393d51c323d24c26b7333a879149d04687236631da216b252e1413d1ee3717595d7683d945afc7601e2c1317441c992722a9baf416ec9593a927781c4bf7f53a6d29494a4d3116c6559a5d275be0c5e0d79ef90dc29a3cd46a9f77adf4569d8eb9f1f936f1f3ebdad5464223aad19583676cd835a521aed31d18aec9b8c7ad801757c43115e625c575ae474687d55f04c84f669b53ff2646dc26d6ad3913d72365001d041e057c7269b2b07699feadb77b9a4f8dd4c6d391ef2af994a8a72d879091783ea80f7ee09f40fdd524cf19589aecd8356c6e6c1dc2831ad7d9b245422c68f2aa2e73bc19e8c5bb0d9760cbe7ffaf26027875e8dc1354ae1a27e01c674f6b58fa008336e8974a0f5caf9293156db4664586a5a712cc58de07e1c490627749e72b2baee48a792a15cbb49dd8678c0f2f72eb94501aaa63e3d5f048c09148b28609842068b83f22bf98e3b57fba9948b2390d745c917d61c3b96c4bf2a7a30e427206b93f9fe964d1adbaeee77c68b0ea9d994ac70c6da0aeaea001f85a7e42fe18897df09bbcc3fd89191a270056cb00a16cff5eb0cb2313c71132d50daf9371588283c16c32db5be459784f19a69fd4052a6c247cf8a5355fa3bc50861667b87952d1f04ea75afddc141c990bdae30a9c559b7a3a3c99bd59f5dd87d0301905390779f20f21bb6259c32c64c9efe3301fc470db0a61e3c1aa41336f3e18e453024ed29c48f9d3492a7011dae7024a59fd6b1e420801420daffc3d31d80c939ae804e0700039bf8fb3614eb50985298239c1d914ed15900d3eed2a059883ecc64ee12396ad2e1141e128e8b54cdae83366a60cbf2f531c09ca6efd3a4eaae66bc913672fdf698aa3dd855ccd6b18b89436e3bd81ea857f97fe3a9dcf42e3945875353d57f1a2f2613a025fe6e587f76c689a52b059f0ea2ad75daf6f5bb86874bc28fa2d6909a0c8f40c85e90465046ab9c6cc8c89a0272c6e5c04ef71f9db00e27cda3e51f742a49fe89c4b788eb2b21201b824c61ddcf7bc1bac27f3598a2c0d2b999c3a692f57ca9f2f3396d2e7d92f3ba73e0157d3b72ea31e06abbe7b04ebbbb7045159da80ec5d383ee07b6e6625633040e3f9756b8091857be0f627c07a50b86cc295ef9bf85d6e8a44781ddc09659f23f974b588502cc82ed2cefb6615a4d5136baf28f35894afcb0a9f630cbfd9146d28215159bb9c5223212e9b525c780cd9472890c74120376cc1412f104f7b737300398b885704b316296367aade0e60d6b0ffd8468e2c3e44fcf557c92d5851aa33ec37d8cc5b93cf97c8d4ec202042ff58af12c1f0c2daf4ce798e165971b2ca74683b41feea7aec3856557942be39afe518e5d1cc0fc020f96884e269fa57f58ec3c6373385db53a58f9a769b2cb0c922081616103f7297242392e7d8e9bae9aa82ac4589fd99b3e36e4045ed1b636c08eccb56d42d3583b8be84f520f650d37c53d8ae8e45c485d80b26894ff7484246a2c59f1a44d096d08ef23a9ca40c52336b79e0dcbafd5298ed15c0c9fe1cc3aa398b53ba060f4046ff4e3dc89c4eb34a230b81fa99c38e946a1218bd7f348983bfe777d0abba44f6bdae0432248d0f997bf65369c133498a5ab620969b38770c7893998ab7d483712de90ccd2c313c171dcc9c1516eba4e3699f3a06a06338b67abcb4bfa4c96586f312ce2adf5d783005628343ee25ab6350f72f9ebd7db425bdbb76c9e081e48c82f1db1f79e124beed93d8aa9715a84b76eb3186cb71a4f44e9937984673db0c505e94ade350625511f73346cca21b139511c1e9d8cbcfec5a5e4421a66060395576ec04c411d08114d279a52a91c1273d4f6d8f7e70ffe06cc8f7a9ae76b1dcb2606913e6459aa7b52ee31b7eaa1ff199e0a07bf4eecdc1e3234714edc06026db33df07b349e27c1f9687d137830d2126f1d88eb15f420633e6b3006023a5156d767958331a496a421c87f3e5550bc06a1ea8a1a2bc8c77bdf4e8b0ec736d874d32d47654eb8689a3f73228a5505c2412d27a0de0fdedf4bff869adc40abf5c691aab20b380182bdb18a54134d820691aa93ad429034a33f71cff3637dd9c1702152c783af46c45924b3545900b76e9fdffeb8a30d5d2042af35d1227ba2fdbfd512f50d4cc372e7aab8c8873f67ddd5d27f8e72937529d7b08c199b1655326ef231d197c43acc0d91dd9c36ad9ebf900c6edd93e29fe87f8435f09de470d0edacbeab237f7aa4aa6f79e5cbcfb58cee781d5b328c08404be8afbaf239e97200d929a37342dcb5cab8155b713c7e47bacefd3af68464eba62d400b23a2bab6efe9ce4b122328088760258a5e19b9a884abe4b7ef65bad8b0077f347c67b02903e6d1664119d73323a47d1d499350c1d270413e6627a2192df6a6cfc1c2fdb95ca2b65b9a76863ff78a3164f4c302457a1eae6eb29e763551682212c4bc2056672a65593beeb23d46b688639a52cad50667eb9376d324082940c78bc5fa9f39f703032cb47ec0abfd6f49ee08c49ecc389c3b97f6ae39c176143b715a8bb287d118dc7ddef1a3151c466a17dce6e968c3bf22fb914bda97d977a5333e9f3aa46de718a68e7c4d59a6eca5d0f3ff2e3e1a210329debf1f50bd6037b20c6a5f644a3d276447c52ca446ba99ac8d871c6e2ab680f3858f3d8f8742e5caca8a91f7082a324ead94448bdd13e729494ad8b03808927e34dd46396587e6bfdb0f298f940c29b1cd50fc9084d8ea16c145d1ae45d97d9a132658b2132d794029cbd35a5bf03f803710888cc688cebdbab2fc6cb6c4d7ca01a23c178174d926c0a5ca98e492beafafd4b3b728a4dfe39bc102876a5d2e09c8d59d642b8ee137f5a62f82665216f75d37c92ec14857cf0d93c4b8fb49042d94af346c789d7e0b99ec8dece04da8305d2fc032e0e67e483c80828f7e203537a72b4f4981b7217ce36e4f14625a2a7b5b1689843b9fb9e1850bd6ac16591935e12dfc617d8671f51548b99fe6a547d0289eed7878559d62946bc0ff340815591b7ec5a182b154f716cd68f9be07e56cff8d613171f93c50005b177f119104005a02aa3307916ee2e2c6d81761ff37be1b5f0448bc8949bb6908252ae7ba5cc765f16a07277e4235e4fe7df48f04f0a9531f39c0764f900f7b37ac1b5add8e584b081ea43b6ba39002461e6636d5f9ea4ed460ae53503e68f539297c02c55833d989c6a73e42231819453596b21c70a42d4ebc2e52fd603eca7d6b46f96758ea50d5c3c418196b94743acda5718dde5559d3809b7b0cf95d3b655e7cc01bb8595757572cedd2423f4df2ee1b85f31d205b39d9c9ba1380f32db4dcbb5b45412ccb2c9d4d20db7522502cd8b72c7b1e1e00c0027ec61d482dd1b2c16c693556deff15ec8e5e63232d475bb39ada52488e6c626903fc553e786e445515ce4b89d917bb8c0f952fbaad41836f8cc7013abd895c491eb40b08db0902d2b7b1357b85bbe6fbc1d36c3cb0d5a784a8d46cbce6b46f65c07714b424fed3d00ec7d6dc9b7f35373291ce31dcfc71e391e021568110e3430c8a23d00ab7413cc2f2d02c3c961abf38158e060c1dffd7a1cd9c2dc3c740d534348b7875b7e7d331cbc0fbdf285f893d36cb51ca616d4a43c80d0ff693dae454a5b681702e6cc2eb5082904180d48f678ca5775b44b02ded7ee3f6f99931b29bf4be1e83a6ccc06af532ae7e7ddb41914df60e1d92f39ca53ea437db575b52a18c34cbdebc42041cca7505c065e587610253f112af8a8cadf1c389449b67c7ed81105ab4610ca8baed7d8c255110dfe8bf8e7ea7d8f13d40fbe03624e5c3e32742097ee859a236a15cb20492ca284b1f521c2bc61745358121fdcb9d56947056932877768ee25232f172c8d259b8caaba6a03654a1974ff949846be4ec34215a37d4c8bd66b8c8d5bbc9025a5684ff9d1ba3e7a82ac1742ca0aa4426eeac740c742a80b3b5f5291c6e5589b377e80f8457b24fd0a207b06bf759f207224b322174ea3cd9ecb10cbc8baae8915fb1caaf344bda12e12b2af4a78654fec9033888fc1794f757fb1937f5a1e97afd04ffe225404e44f524a3475f493eb917388a679e93ec728cc70ef745d6187d2a32cf6946adef20482e0689296ffd15e7aca7f7e09c4d7698b5d3d955434df0860400766c9435d8bf3f1f43f1059102ce684d09842ed969fb4d4c211f74113eb0b8077a7fb06a4222b859463900bc7478a8ddd9e4ab037127bc2adc7f6c1226fbe51dd18dda637a9d79c9ab44d5aa7779a8b58b4214d128e112a8c98bf1541e27b789f679329b7812d58c67131f8c9652652612bf53d436da63462bbdde83a3bdbe90d640381a2e968274e974b4274314cd00a1011f02e433c547ad7ec4836e8a087835868803c0dbdbde8742ba5e8e26c745be1dec9f8f0a60150cfd0158f88274593e12e0d65c93e9a5a77f4922216eb4a4b181bd6cf28101f611a3ffcb3e49766e61ccb161c74f5cfd983952200e4622bd63a0eb1635cfdcc88e969a8921cce3bf505abc3648c35c3d9fb28c04a95e0c85f7f773755ec8ebc5f2911e4645cd32ea302f3c6a1734cf5f9cf67781a0efe3591056415c966118c2a074c9543d36b82a0ea6aa75c7df3e5a97825154a5d1aaf7fcdb416f2e0bb782e164d016ab8fe573882d7ca7f353c174b47f871da8a2ac1105b9f1949235ca006fd251c5cd58e6577b15b627c3a34f9a5dfddb72b3e3ccf31ee62155d315827c05ea87c17be5667104deeb091603b4217473c2ff06d2effffb5067e2ec7764292ee029d4de87e1a9942ed98c211e652a3c7ec81a2d219ff915aff31e37422f6eea943a5443ea00a6fb5d08699fb30f145ff1565139dfa05f2cc733e097a8dc03495ee1fd743ff51e3cfc4cabe9560af8adc44b5fb6f4c4b0262d6f8b2e40b43ce39efbb7fb438fc8d9da94e66760a660d29b7d422c6e428f0c379463c7080b4504d1c57f42546bb2f85c0b4e257842a26570bbbdf18fcddd5d3be19316106d67a2c333e7738acb0f5bd0f64000736a807fbbdc51669d90c39631b4c90f93a02d1fee4e918b6ab8b54c59b8bf8eddb237a6670df5c6a2f9d995c11044ea468118ab0e140055bb</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-正则表达式</title>
    <url>/2022/04/11/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>正则表达式测试工具 <a href="http://tool.oschina.net/regex/">http://tool.oschina.net/regex/</a></p>
<p>常用匹配规则</p>
<table>
<thead>
<tr>
<th align="left">\w</th>
<th align="left">匹配字母、数字、下划线,等价于[a-zA-Z0-9_]</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\W</td>
<td align="left">匹配不是字母、数字、下划线的其他字符</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">匹配任意空白字符,等价于(\t\n\r\f)</td>
</tr>
<tr>
<td align="left">\S</td>
<td align="left">匹配任意非空字符</td>
</tr>
<tr>
<td align="left">\d</td>
<td align="left">匹配数字,等价于[0-9]</td>
</tr>
<tr>
<td align="left">\D</td>
<td align="left">匹配不是数字的字符</td>
</tr>
<tr>
<td align="left">\A</td>
<td align="left">匹配字符串开头</td>
</tr>
<tr>
<td align="left">\Z</td>
<td align="left">匹配字符串结尾的,如果存在换行,只匹配到换行前的结束字符串</td>
</tr>
<tr>
<td align="left">\z</td>
<td align="left">匹配字符串结尾的,如果存在换行,匹配到换行符\n</td>
</tr>
<tr>
<td align="left">\G</td>
<td align="left">最好完成匹配的位置</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">匹配一个换行符</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">匹配一个制表符(tab)</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">匹配一行字符串的开头</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">匹配一行字符串的结尾</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">匹配任意字符,除了换行符.当re.DOTALL标记被指定时,这可以匹配包括换行符在内的任字符</td>
</tr>
<tr>
<td align="left">[…]</td>
<td align="left">用来表示一组字符,比如[abc]表示匹配a或b或c,[a-z],[0-9]</td>
</tr>
<tr>
<td align="left">[^…]</td>
<td align="left">匹配不在[]里面的字符,比如[^abc]匹配除a,b,c以外的字符</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">匹配0个或多个字符</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">匹配1个或多个字符</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">匹配0个或1个前面的正则表达式片段,(.*?)表示尽可能少地匹配字符</td>
</tr>
<tr>
<td align="left">{n}</td>
<td align="left">匹配前面表达式n次, 如\d{5}表示匹配5个数字</td>
</tr>
<tr>
<td align="left">{n,m}</td>
<td align="left">匹配前面的表达式n到m次,贪婪模式</td>
</tr>
<tr>
<td align="left">a|b</td>
<td align="left">匹配a或者b</td>
</tr>
<tr>
<td align="left">(…)</td>
<td align="left">匹配括号里的表达式,也可以表示一个组</td>
</tr>
</tbody></table>
<h5 id="match-从开头匹配"><a href="#match-从开头匹配" class="headerlink" title="match 从开头匹配"></a>match 从开头匹配</h5><p>match() 方法可以得到匹配到的字符串内容</p>
<p>传入匹配字符串及正则表达式就可以检测这个正则表达式是否匹配字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = <span class="string">&#x27;Hello 123 4567 World_This is a Regex Demo&#x27;</span></span><br><span class="line">print(<span class="built_in">len</span>(content))</span><br><span class="line">result = re.match(<span class="string">&#x27;^Hello\s\d\d\d\s\d&#123;4&#125;\s\w&#123;10&#125;&#x27;</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.span())</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="comment">#41</span></span><br><span class="line"><span class="comment">#&lt;re.Match object; span=(0, 25), match=&#x27;Hello 123 4567 World_This&#x27;&gt;</span></span><br><span class="line"><span class="comment">#Hello 123 4567 World_This</span></span><br><span class="line"><span class="comment">#(0, 25)</span></span><br></pre></td></tr></table></figure>

<p>^ 匹配字符串开头；\s 匹配空白字符串；\d 匹配数字，3个\d 匹配123；\d{4}，{4}代表匹配前面规则4次，4个数字；\w{10} 匹配 10 个字母数字及下划线</p>
<p>group() 方法输出匹配内容，span() 方法输出匹配的范围</p>
<h5 id="匹配目标-group-x"><a href="#匹配目标-group-x" class="headerlink" title="匹配目标 group(x)"></a>匹配目标 group(x)</h5><p>用 match() 方法可以得到匹配到的字符串内容，如果要从字符串中提取一部分内容。</p>
<p>使用 （） 括号将想提取的字符串括起来，调用 group() 方法提取结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = <span class="string">&#x27;Hello 1234567 World This is a Regex Demo&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;^Hello\s(\d+)\sWorld&#x27;</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">19</span>), match=<span class="string">&#x27;Hello 1234567 World&#x27;</span>&gt;</span><br><span class="line"><span class="number">1234567</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">19</span>)</span><br></pre></td></tr></table></figure>

<p>想将字符串中的 1234567 提取出来，可以将数字部分的正则表达式用括号 （\d+）括起来，然后调用 group(1) 获取匹配结果，如果后面还有（）内容，依次用 group(2) 获取</p>
<p>span 输出匹配范围</p>
<h5 id="通用匹配"><a href="#通用匹配" class="headerlink" title="通用匹配 .*"></a>通用匹配 .*</h5><p>点可以匹配任意字符（除换行符），星代表匹配前面的字符无限次，组合在一起</p>
<p>.* 匹配任意字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = re.match(<span class="string">&#x27;^Hello.*Demo$&#x27;</span>, content)</span><br><span class="line">print(result.group())</span><br></pre></td></tr></table></figure>

<p>中间部分省略，最后加一个结尾字符串</p>
<p>group() 输出匹配的全部字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Hello <span class="number">123</span> <span class="number">4567</span> World This <span class="keyword">is</span> a Regex Demo</span><br></pre></td></tr></table></figure>

<h5 id="贪婪与非贪婪"><a href="#贪婪与非贪婪" class="headerlink" title=".* 贪婪与非贪婪"></a>.* 贪婪与非贪婪</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = <span class="string">&#x27;Hello 1234567 World This is a Regex Demo&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;^He.*(\d+).*Demo$&#x27;</span>, content)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line"><span class="comment">#结果 7</span></span><br></pre></td></tr></table></figure>

<p>依然想匹配中间数字，数字两边比较乱，省略都写成 <code> .*</code>，结果打印只有 7</p>
<p>贪婪匹配下 .* 会匹配尽可能多的字符，.*  后面\d+至少一个数字，没有指明具体多少个数字，.*  会尽可能匹配多的字符，123456 也被前面匹配了，给 \d+ 就留下一个数字7匹配，得到的内容就是 7 </p>
<p>非贪婪匹配，尽可能匹配少的字符，<code>.*?</code> 来代替 <code>.*</code> ，最后得到结果 1234567</p>
<p>所以做匹配的时候，字符串中间尽可能使用非贪婪匹配</p>
<h5 id="修饰符-例如-re-S"><a href="#修饰符-例如-re-S" class="headerlink" title="修饰符 例如 re.S"></a>修饰符 例如 re.S</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content = <span class="string">&#x27;&#x27;&#x27;Hello 1234567 World_This</span></span><br><span class="line"><span class="string">is a Regex Demo</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;^He.*?(\d+).*?Demo$&#x27;</span>, content)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line"><span class="comment">#结果 报错了</span></span><br></pre></td></tr></table></figure>

<p>修改在字符串中加了换行符，没有匹配到结果，又调用了 group 会报错</p>
<p>因为点（.）匹配的是除换行符之外的任意字符，遇到换行符时，.*? 就不能匹配了，导致匹配失败，只需要加一个修饰符 re.S 修正</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = re.match(<span class="string">&#x27;^He.*?(\d+).*?Demo$&#x27;</span>, content, re.S)</span><br></pre></td></tr></table></figure>

<p>re.S 使点（.）匹配包括换行在内的所有字符</p>
<p>re.I 使匹配对大小写不敏感</p>
<p>re.M 多行匹配，影响 ^ 和 $</p>
<h5 id="转义匹配"><a href="#转义匹配" class="headerlink" title="转义匹配"></a>转义匹配</h5><p>正则匹配遇到特殊字符时，使用转义 \</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content = <span class="string">&#x27;(百度)www.baidu.com&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;\(百度\)www\.baidu\.com&#x27;</span>, content)</span><br></pre></td></tr></table></figure>

<h5 id="Search-扫描整个字符串匹配"><a href="#Search-扫描整个字符串匹配" class="headerlink" title="Search 扫描整个字符串匹配"></a>Search 扫描整个字符串匹配</h5><p>match() 是从字符串开头开始匹配的，开头不匹配，那整个匹配就失败</p>
<p>所以 match 适合用来检测某个字符串是否符合某个正则表达式的规则。</p>
<p>Search() 匹配时会扫描整个字符串，返回一个成功匹配结果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">html = &#x27;&#x27;&#x27;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;songs-list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>经典老歌<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;introduction&quot;</span>&gt;</span>经典老歌列表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;2&quot;</span>&gt;</span>一路上有你<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;7”&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &lt;a href=&quot;</span>/<span class="attr">2.mp3</span>&quot; <span class="attr">singer</span>=<span class="string">&quot;任贤齐&quot;</span>&gt;</span>沧海一卢笑<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/3.mp3&quot;</span> <span class="attr">singer</span>=<span class="string">&quot;齐秦&quot;</span>&gt;</span>往事随风<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;6&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/4.mp3&quot;</span> <span class="attr">singer</span>=<span class="string">&quot;beyond&quot;</span>&gt;</span>尤辉岁月<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/S.mp3&quot;</span> <span class="attr">singer</span>=<span class="string">&quot;陈慧琳&quot;</span>&gt;</span>记事本<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/6.mp3&quot;</span> <span class="attr">singer</span>=<span class="string">&quot;邓丽君&quot;</span>&gt;</span>但愿人长久<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>

<p>尝试获取 class 为 active 的 li 节点内部超链接包含的歌手名（齐秦）和歌名（往事随风）</p>
<p>此时需要提取第三个 li 节点下 a 节点的 singer 属性和文本</p>
<p>正则表达式可以以 li 开头，寻找下一个标识符 active，中间部分用 .*<em>? 来匹配，接下来取 singer 属性值</em></p>
<p> <code>singer=&quot;(.*?)&quot;</code>  需要提取部分用小括号括起来，用 group 提取，两侧的边界是双引号</p>
<p>接下来匹配 a 节点文本，左边界是  <code>&gt;</code>  右边界是 <code>&lt;/a&gt;</code> 目标内容用 <code>.*?</code> 匹配</p>
<p>正则表达式：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;li.*?active.*?singer=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>然后再调用 search() 方法，就会搜索整个 html 文本找到符合正则表达式的第一个内容返回，由于代码有换行，需要加入 re.S 参数，匹配包括换行在内的所有参数，由于绝大多数 HTML 文本都带有换行符，所以尽量加上 re.S 参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = re.search(<span class="string">&#x27;&lt;li.*?active.*?singer=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>, html, re.S)</span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line">	print(result.group(<span class="number">1</span>), result.group(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h5 id="findall-匹配返回所有"><a href="#findall-匹配返回所有" class="headerlink" title="findall 匹配返回所有"></a>findall 匹配返回所有</h5><p>search 返回匹配正则表达式第一个内容，想要匹配所有内容使用 findall() ，会搜索整个字符串，然后返回匹配正则表达式的所有内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = re.findall(<span class="string">&#x27;&lt;li.*?href=&quot;(.*?)&quot;.*?singer=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>, html, re.S)</span><br><span class="line">print(<span class="built_in">type</span>(results))</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">	print(result[<span class="number">0</span>], result[<span class="number">1</span>], result[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p>返回的每个元素都是元组类型，用对应索引依次取出</p>
<h5 id="sub-修改文本"><a href="#sub-修改文本" class="headerlink" title="sub 修改文本"></a>sub 修改文本</h5><p>修改文本，把一串字符串中的数字去掉</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content = <span class="string">&#x27;54aKS4yrsoiRS4ix5L2g&#x27;</span></span><br><span class="line">content = re.sub(<span class="string">&#x27;\d+&#x27;</span>,<span class="string">&#x27;&#x27;</span>, content)</span><br></pre></td></tr></table></figure>

<p>第一个参数\d+匹配所有的数字，第二个参数为替换成的字符串，第三个参数是原字符串</p>
<p>上面 html 中需要获取歌名，直接正则表达式提取比较麻烦</p>
<p>借助 sub 方法将 a 节点去掉只留下文本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = re.sub(<span class="string">&#x27;&lt;a.*?&gt;|&lt;/a&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, html)</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;songs-list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>经典老歌<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;introduction&quot;</span>&gt;</span>经典老歌列表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;2&quot;</span>&gt;</span>一路上有你<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;7”&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">		沧海一卢笑 </span></span></span><br><span class="line"><span class="tag"><span class="string">	&lt;/li&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">	&lt;li data-view=&quot;</span><span class="attr">4</span>&quot; <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span><br><span class="line">		往事随风</span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;6&quot;</span>&gt;</span>尤辉岁月<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;5&quot;</span>&gt;</span>记事本<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">		但愿人长久</span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再利用 findall 提取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = re.findall(<span class="string">&#x27;&lt;li.*?&gt;(.*?)&lt;/li&gt;&#x27;</span>, html, re.S)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">	print(result.strip())</span><br></pre></td></tr></table></figure>

<p>strip 移除字符串首尾指定字符 strip() 去除首尾空格，strip(‘0’) 去除首尾字符 0</p>
<h5 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h5><p>将正则字符串编译成正则表达式对象，以便在后面的匹配中复用</p>
<p>想把3个日期中的时间去掉，没必要重复写3个同样的正则表达式</p>
<p>通过 compile 编译成正则表达式对象，后面就不用重复写正则表达式，直接复用正则表达式对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">content1 &#x3D; &#39;2016-12-15 12:00&#39;</span><br><span class="line">content2 &#x3D; &#39;2016-12-17 12:55&#39;</span><br><span class="line">content3 &#x3D; &#39;2016-12-22 13:21&#39;</span><br><span class="line">pattern &#x3D; re.compile(&#39;\d&#123;2&#125;:\d&#123;2&#125;&#39;)</span><br><span class="line">result1 &#x3D; re.sub(pattern, &#39;&#39;, content1)</span><br><span class="line">result2 &#x3D; re.sub(pattern, &#39;&#39;, content2)</span><br><span class="line">result3 &#x3D; re.sub(pattern, &#39;&#39;, content3)</span><br><span class="line">print(result1, result2, result3)</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-数据爬取</title>
    <url>/2022/04/13/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/</url>
    <content><![CDATA[<h4 id="6-Ajax-数据爬取"><a href="#6-Ajax-数据爬取" class="headerlink" title="6. Ajax 数据爬取"></a>6. Ajax 数据爬取</h4><p>有些网页原始的 HTML 文档不会包含任何数据，数据都是通过 Ajax 统一加载后再呈现出来。</p>
<p>遇到这种页面，直接利用 requests 等库来抓取原始页面，是无法获取到有效数据的</p>
<p>Ajax 是利用 JavaScript 在保证页面不被刷新、页面链接不改变的情况下与服务器交换数据并更新部分网页的技术</p>
<p>例子：如微博页面，分页加载微博内容，这个过程就是 Ajax 加载的过程，页面并没有刷新，网页却多了新的内容</p>
<h5 id="6-2-Ajax-分析方法"><a href="#6-2-Ajax-分析方法" class="headerlink" title="6.2 Ajax 分析方法"></a>6.2 Ajax 分析方法</h5><ol>
<li>查看请求</li>
</ol>
<p>Chrome 打开微博链接 <a href="https://m.weibo.cn/u/2830678474">https://m.weibo.cn/u/2830678474</a></p>
<p>页面中鼠标右键选择检查选项，弹出开发者工具</p>
<p>切换到 Network 选项卡，重新刷新页面，出现非常多的条目</p>
<p>Ajax 其实是特殊的请求类型，叫作 xhr</p>
<p>找到 Type 为 xhr 的就是 Ajax 请求，点击请求查看详细信息，Request Headers 中有一个信息为 X-Requested-With:XMLHttpRequest，这就标记了此请求是 Ajax 请求</p>
<ol start="2">
<li>过滤请求</li>
</ol>
<p>Chrome 开发者工具筛选点击 XHR 筛选出所有 Ajax 请求</p>
<h5 id="6-3-Ajax-结果提取"><a href="#6-3-Ajax-结果提取" class="headerlink" title="6.3 Ajax 结果提取"></a>6.3 Ajax 结果提取</h5><p>模拟 Ajax 请求，将前10页微博爬取下来</p>
<p>代码地址 <a href="https://github.com/Python3WebSpider/WeiboList">https://github.com/Python3WebSpider/WeiboList</a></p>
<p>查看请求链接</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">第一页</span><br><span class="line">https://m.weibo.cn/api/container/getIndex?type=uid&amp;value=2830678474&amp;containerid=1076032830678474</span><br><span class="line">第一页返回数据</span><br><span class="line">...</span><br><span class="line"><span class="string">&quot;cardlistInfo&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;containerid&quot;</span>: <span class="string">&quot;1076032830678474&quot;</span>,</span><br><span class="line">    <span class="string">&quot;v_p&quot;</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="string">&quot;show_style&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: <span class="number">2488</span>,</span><br><span class="line">    <span class="string">&quot;since_id&quot;</span>: <span class="number">4751617833832728</span></span><br><span class="line">&#125;</span><br><span class="line">第二页</span><br><span class="line"> https://m.weibo.cn/api/container/getIndex?type=uid&amp;value=2830678474&amp;containerid=1076032830678474&amp;since_id=4755918556758808</span><br></pre></td></tr></table></figure>

<p>第二页的 since_id 请求参数是第一页返回的</p>
<p>需要把第一页返回数据中的 since_id 保存，在请求第二页的时候使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">since_id = <span class="string">&#x27;&#x27;</span></span><br><span class="line">client = MongoClient()</span><br><span class="line">db = client[<span class="string">&#x27;weibo&#x27;</span>]</span><br><span class="line">collection = db[<span class="string">&#x27;weibo&#x27;</span>]</span><br><span class="line">max_page = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span>(<span class="params"><span class="built_in">dict</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> collection.insert_one(<span class="built_in">dict</span>):</span><br><span class="line">        print(<span class="string">&#x27;Save to Mongo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_local</span>(<span class="params"><span class="built_in">dict</span></span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;weibo.json&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(json.dumps(<span class="built_in">dict</span>, indent=<span class="number">2</span>, ensure_ascii=<span class="literal">False</span>))</span><br><span class="line">        file.write(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;=&#x27;</span> * <span class="number">50</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">json</span>):</span></span><br><span class="line">    <span class="keyword">if</span> json:</span><br><span class="line">        items = json.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;cards&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            item = item.get(<span class="string">&#x27;mblog&#x27;</span>)</span><br><span class="line">            weibo = &#123;&#125;</span><br><span class="line">            weibo[<span class="string">&#x27;id&#x27;</span>] = item.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">            weibo[<span class="string">&#x27;text&#x27;</span>] = pq(item.get(<span class="string">&#x27;text&#x27;</span>)).text()<span class="comment">#去除HTML标签</span></span><br><span class="line">            weibo[<span class="string">&#x27;attitudes&#x27;</span>] = item.get(<span class="string">&#x27;attitudes_count&#x27;</span>)</span><br><span class="line">            weibo[<span class="string">&#x27;comments&#x27;</span>] = item.get(<span class="string">&#x27;comments_count&#x27;</span>)</span><br><span class="line">            weibo[<span class="string">&#x27;reposts&#x27;</span>] = item.get(<span class="string">&#x27;reposts_count&#x27;</span>)</span><br><span class="line">            <span class="keyword">yield</span> weibo <span class="comment">#将weibo以generator返回</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>():</span></span><br><span class="line">    <span class="keyword">global</span> since_id <span class="comment"># 声明全局变量</span></span><br><span class="line">    base_url = <span class="string">&#x27;https://m.weibo.cn/api/container/getIndex?type=uid&amp;value=2830678474&amp;containerid=1076032830678474&#x27;</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;uid&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;2830678474&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;containerid&#x27;</span>: <span class="string">&#x27;1076032830678474&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> since_id != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        params[<span class="string">&#x27;since_id&#x27;</span>] = since_id</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    result = requests.get(base_url, params=params, headers=headers)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> result.status_code == <span class="number">200</span>:</span><br><span class="line">            jsonRes = result.json()</span><br><span class="line">            info = jsonRes.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;cardlistInfo&#x27;</span>)</span><br><span class="line">            since_id = info[<span class="string">&#x27;since_id&#x27;</span>]</span><br><span class="line">            <span class="keyword">return</span> jsonRes</span><br><span class="line">    <span class="keyword">except</span> requests.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">        print(e.args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_page):</span><br><span class="line">        data = get_page()</span><br><span class="line">        results = parse_page(data)</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">            save_to_mongo(result)</span><br><span class="line">            <span class="comment"># print(type(result),result)</span></span><br><span class="line">            <span class="comment"># save_to_local(result) #保存到本地文件</span></span><br></pre></td></tr></table></figure>

<p>保存数据到本地</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_local</span>(<span class="params"><span class="built_in">dict</span></span>):</span></span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;weibo.json&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">      file.write(json.dumps(<span class="built_in">dict</span>, indent=<span class="number">2</span>, ensure_ascii=<span class="literal">False</span>))</span><br><span class="line">      file.write(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;=&#x27;</span> * <span class="number">50</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>保存数据到MongoDB</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span>(<span class="params"><span class="built_in">dict</span></span>):</span></span><br><span class="line">  <span class="keyword">if</span> collection.insert_one(<span class="built_in">dict</span>):</span><br><span class="line">      print(<span class="string">&#x27;Save to Mongo&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h5 id="6-4-分析-Ajax-爬取今日头条街拍美图"><a href="#6-4-分析-Ajax-爬取今日头条街拍美图" class="headerlink" title="6.4 分析 Ajax 爬取今日头条街拍美图"></a>6.4 分析 Ajax 爬取今日头条街拍美图</h5><p>链接有变动，查看最新代码 <a href="https://github.com/Python3WebSpider/Jiepai">https://github.com/Python3WebSpider/Jiepai</a></p>
<h4 id="7-动态渲染页面爬取"><a href="#7-动态渲染页面爬取" class="headerlink" title="7. 动态渲染页面爬取"></a>7. 动态渲染页面爬取</h4><p>Python 提供了许多模拟浏览器运行的库，如  Selenium、Splash、PyV8、Ghost 等</p>
<p>有些 Ajax 接口含有很多加密参数，难以直接找出其规律，也很难直接分析 Ajax 来抓取，可以使用模拟浏览器运行的方式来实现，不用管 Ajax 接口到底有哪些参数</p>
<h5 id="7-1-Selenium-的使用"><a href="#7-1-Selenium-的使用" class="headerlink" title="7.1 Selenium 的使用"></a>7.1 Selenium 的使用</h5><p>Selenium 是一个自动化测试工具，利用它可以驱动浏览器执行特定的动作，如点击、下拉，同时还可以获取浏览器当前呈现页面的源码，做到可见即可爬</p>
<p>需要配置好 ChromeDriver，安装好 python 的 selenium 库</p>
<h6 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h6><h6 id="声明浏览器对象"><a href="#声明浏览器对象" class="headerlink" title="声明浏览器对象"></a>声明浏览器对象</h6><p>Selenium 支持非常多浏览器，如 Chrome、Firefox等</p>
<p>初始化浏览器对象并赋值为 browser 对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()  <span class="comment">#弹出Chrome浏览器</span></span><br><span class="line">browser = webdriver.Safari()</span><br><span class="line">browser = webdriver.Firefox()</span><br></pre></td></tr></table></figure>

<h6 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h6><p>调用 get() 来请求页面，传入链接 URL 即可</p>
<p>如 get() 方法访问页面，打印源代码再关闭浏览器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser = webdriver.Chrome()  <span class="comment">#弹出Chrome浏览器</span></span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">print(browser.page_source)<span class="comment">#打印源代码</span></span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure>

<h6 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h6><p>Selenium 可以驱动浏览器完成各种动作，如填充表单模拟点击等</p>
<ol>
<li>单个节点 find_element()</li>
</ol>
<p>比如想获取百度搜索框的这个节点，查看源码找到搜索框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">imput</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s_ipt&quot;</span> <span class="attr">value</span> <span class="attr">maxlength</span>=<span class="string">&quot;255&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来就是获取它了，可以通过 find_element_by_name() 根据 name 值获取，find_element_by_id() 是根据 id 获取，还有根据 XPath、CSS 选择器等获取方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser = webdriver.Chrome()  <span class="comment">#弹出Chrome浏览器</span></span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">input_first = browser.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>)</span><br><span class="line">input_second = browser.find_element_by_class_name(<span class="string">&#x27;s_ipt&#x27;</span>)</span><br><span class="line">input_third = browser.find_element_by_name(<span class="string">&#x27;wd&#x27;</span>)</span><br><span class="line">input_forth = browser.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;kw&quot;]&#x27;</span>)</span><br><span class="line">input_five  = browser.find_element_by_css_selector(<span class="string">&#x27;#kw&#x27;</span>)</span><br><span class="line">print(input_first, input_second, input_third, input_forth, input_five)</span><br></pre></td></tr></table></figure>

<p>返回结果都是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=<span class="string">&quot;21787490d750c720cf715181e538f416&quot;</span>, element=<span class="string">&quot;b3dcf1e9-05a9-4a1c-8e83-deebd46c2413&quot;</span>)&gt; </span><br></pre></td></tr></table></figure>

<ul>
<li>find_element()</li>
</ul>
<p>selenium 还提供了通用的方法 find_element() ，两个参数：查找方式 By 和值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">input_first = browser.find_element(By.ID, <span class="string">&#x27;kw&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>多个节点  find_elements()</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser = webdriver.Chrome()  <span class="comment">#弹出Chrome浏览器</span></span><br><span class="line">browser.get(<span class="string">&#x27;https://www.taobao.com&#x27;</span>)</span><br><span class="line"><span class="built_in">list</span> = browser.find.elements_by_css_selector(<span class="string">&#x27;.service-bd li&#x27;</span>)</span><br><span class="line"><span class="comment">#也可直接用 find_elements() 方法来选择</span></span><br><span class="line"><span class="built_in">list</span> = browser.find_elements(By.CSS_SELECTOR, <span class="string">&#x27;.service-bd li&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>节点交互</li>
</ol>
<p>让浏览器执行一些动作，输入文字 send_keys()，清空文字 clear()， 点击按钮 click()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.remote.webelement <span class="keyword">import</span> WebElement</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="built_in">input</span> = browser.find_element(By.ID, <span class="string">&#x27;kw&#x27;</span>)<span class="comment"># type: WebElement</span></span><br><span class="line"><span class="built_in">input</span>.send_keys(<span class="string">&#x27;iPhone&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">input</span>.clear()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">input</span>.send_keys(<span class="string">&#x27;iPad&#x27;</span>)</span><br><span class="line">button = browser.find_element(By.ID, <span class="string">&#x27;su&#x27;</span>) <span class="comment"># type: WebElement</span></span><br><span class="line">button.click()</span><br></pre></td></tr></table></figure>

<p>驱动浏览器打开百度，输入文字，清空搜索，调用 click() 点击搜索</p>
<p>更多操作交互查看 </p>
<p><a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement</a></p>
<h6 id="动作链"><a href="#动作链" class="headerlink" title="动作链"></a>动作链</h6><p>一些操作没有特定的执行对象，比如鼠标拖拽，键盘按键等，这些动作用另一种方式来执行，就是动作链</p>
<p>拖拽实例</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;iframe frameborder=&quot;0&quot; id=&quot;iframeResult&quot; style=&quot;height: 592.96px;&quot; cd_frame_id_=&quot;8cb7e7ff87254590477aee6f726ea77d&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">&#x27;http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&#x27;</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">&#x27;iframeResult&#x27;</span>)</span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">&#x27;#draggable&#x27;</span>)<span class="comment">#拖拽节点</span></span><br><span class="line">target = browser.find_element_by_css_selector(<span class="string">&#x27;#droppable&#x27;</span>)<span class="comment">#拖拽目标节点</span></span><br><span class="line">actions = ActionChains(browser)</span><br><span class="line">actions.drag_and_drop(source, target)</span><br><span class="line">actions.perform()<span class="comment">#执行</span></span><br></pre></td></tr></table></figure>

<p>更多动作链操作</p>
<p><a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains</a></p>
<h6 id="执行-JavaScript"><a href="#执行-JavaScript" class="headerlink" title="执行 JavaScript"></a>执行 JavaScript</h6><p>利用 execute_script() 将进度条下拉到最底部，然后弹窗</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span>)</span><br><span class="line">browser.execute_script(<span class="string">&#x27;window.scrollTo(0, document.body.scrollHeight)&#x27;</span>)</span><br><span class="line">browser.execute_script(<span class="string">&#x27;alert(&quot;To Bottom&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="获取节点信息"><a href="#获取节点信息" class="headerlink" title="获取节点信息"></a>获取节点信息</h6><p>前面通过 page_souce 属性获取网页源代码，接着就可以使用解析库（正则、Beautiful Soup、pyquery）等来提取信息</p>
<p>Selenium 已提供了选取节点的方法，返回 WebElement 类型，它也有相关的方法和属性来直接提取节点信息，如属性、文本等。这样就可以不用通过解析源代码来提取信息了</p>
<ol>
<li>获取属性</li>
</ol>
<p>通过 get_attribute() 方法获取节点属性，输入想要获取的属性名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.remote.webelement <span class="keyword">import</span> WebElement</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span>)</span><br><span class="line">logo = browser.find_element_by_class_name(<span class="string">&#x27;ExploreHomePage-specialsLoginImg&#x27;</span>) <span class="comment"># type: WebElement</span></span><br><span class="line">print(logo)</span><br><span class="line">print(logo.get_attribute(<span class="string">&#x27;class&#x27;</span>))</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>获取文本值</li>
</ol>
<p>每个 WebElement 都有 text 属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logo = browser.find_element_by_class_name(<span class="string">&#x27;ExploreHomePage-ContentSection-header&#x27;</span>) <span class="comment"># type: WebElement</span></span><br><span class="line">print(logo.text)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>获取 id、位置、标签名和大小</li>
</ol>
<p>id 获取节点id，location 获取该节点在页面中相对位置，tag_name 获取标签名称，size 获取节点大小也就是宽高</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(logo.<span class="built_in">id</span>)</span><br><span class="line">print(logo.location)</span><br><span class="line">print(logo.tag_name)</span><br><span class="line">print(logo.size)</span><br></pre></td></tr></table></figure>

<h6 id="切换-Frame"><a href="#切换-Frame" class="headerlink" title="切换 Frame"></a>切换 Frame</h6><p>网页中有一种节点叫作 iframe，也就是子 Frame，相当于页面的子页面</p>
<p>Selenium 打开页面后，默认是在父级 Frame 里面操作，此时如果页面中还有子 Frame，它是不能获取到子Frame 里面的节点的，需要用 switch_to.frame() 方法来切换 Frame</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">&#x27;http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&#x27;</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">&#x27;iframeResult&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    logo = browser.find_element_by_class_name(<span class="string">&#x27;logo&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">    print(<span class="string">&#x27;No Logo&#x27;</span>)</span><br><span class="line">browser.switch_to.parent_frame()</span><br><span class="line">logo = browser.find_element_by_class_name(<span class="string">&#x27;logo&#x27;</span>)</span><br><span class="line">print(logo)</span><br><span class="line">print(logo.text)</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">No Logo</span><br><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=<span class="string">&quot;020e37884ff7c4ab42f87a840d6bc616&quot;</span>, element=<span class="string">&quot;d5450a09-946b-4ace-b6b2-f3dd7c0382fd&quot;</span>)&gt;</span><br></pre></td></tr></table></figure>

<p>这里先通过 switch_to.frame 切换到子 Frame里面，尝试获取父级 Frame 里的 logo 节点（这是不能找到的）找不到抛出异常，接着切换回父级 Frame，然后再次重新获取节点，此时成功获取了</p>
<p>所以当页面中包含子 Frame 时，如果想获取子 Frame 中的节点，需要先调用 switch_to.frame 方法切换到对应的 Frame，然后再进行操作</p>
<h6 id="延时等待"><a href="#延时等待" class="headerlink" title="延时等待"></a>延时等待</h6><p>Selenium 中，get 方法会在网页框架加载结束后执行，此时如果获取 page_source，可能并不是浏览器完全加载完成的页面，有些还有额外的 Ajax 请求，需要等待一段时间，确保节点已加载出来</p>
<ol>
<li>隐式等待</li>
</ol>
<p>implicitly_wait</p>
<p>如果 Selenium 没有在 DOM 中找到节点，将继续等待，超出设定时间抛出找不到节点的异常</p>
<p>当查找节点没有立即出现，隐式等待一段时间再查找DOM，默认时间0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span>)</span><br><span class="line"><span class="built_in">input</span> = browser.find_element_by_class_name(<span class="string">&#x27;zu-top-add-question&#x27;</span>)</span><br><span class="line">print(<span class="built_in">input</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>显式等待</li>
</ol>
<p>指定要查找的结点，指定一个最长等待事件，规定时间内加载出来了这个节点，就返回查找节点，超过时间未找到节点抛出异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)<span class="comment"># 指定最长等待时间</span></span><br><span class="line">browser.get(<span class="string">&#x27;https://www.taobao.com/&#x27;</span>)</span><br><span class="line">wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">input</span> = wait.until(EC.presence_of_element_located(By.ID, <span class="string">&#x27;q&#x27;</span>))</span><br><span class="line">button = wait.until(EC.element_to_be_clickable(By.CSS_SELECTOR, <span class="string">&#x27;.btn-search&#x27;</span>))</span><br><span class="line">print(<span class="built_in">input</span>, button)</span><br></pre></td></tr></table></figure>

<p>引入 WebDriverWait 对象，指定最长等待时间</p>
<p>调用 until 方法，传入要等待条件 presence_of_element_located 节点出现的意思，参数是节点的定位元组，ID 为 q 的节点搜索框</p>
<p>10秒内搜索框成功加载出来，就返回该节点，超过10秒抛出异常</p>
<p>element_to_be_clickable 可点击，查按钮查找 CSS 选择器 .btn-search ，10秒内它是可点击的，也就是成功加载出来了，就返回这个按钮节点，超过10秒不可点击，也就是没有加载出来，就抛出异常</p>
<ul>
<li>其它等待条件</li>
</ul>
<p>比如判断标题内容，判断某个节点内是否出现了某文字等</p>
<table>
<thead>
<tr>
<th>等待条件</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>title_is</td>
<td>标题是某内容</td>
</tr>
<tr>
<td>title_contains</td>
<td>标题包含某内容</td>
</tr>
<tr>
<td>presence_of_element_loated</td>
<td>节点加载出来，传入定位元组(By.ID,’p’)</td>
</tr>
<tr>
<td>visibility_of_element_located</td>
<td>节点可见，传入定位元组</td>
</tr>
<tr>
<td>visibility_of</td>
<td>可见，传入节点对象</td>
</tr>
<tr>
<td>presence_of_all_elements_located</td>
<td>所有节点加载出来</td>
</tr>
<tr>
<td>text_to_be_present_in_element</td>
<td>某个节点文本包含某文字</td>
</tr>
<tr>
<td>text_to_be_present_in_element_value</td>
<td>某个节点值包含某文字</td>
</tr>
<tr>
<td>frame_to_be_available_and_switch_to_it</td>
<td>加载并切换</td>
</tr>
<tr>
<td>invisibility_of_element_located</td>
<td>节点不可见</td>
</tr>
<tr>
<td>element_to_be_clickable</td>
<td>节点可点击</td>
</tr>
<tr>
<td>staleness_of</td>
<td>判断一个结点是否仍在DOM，可判断页面是否已刷新</td>
</tr>
<tr>
<td>element_to_be_selected</td>
<td>节点可选择，传入节点对象</td>
</tr>
<tr>
<td>element_located_to_be_selected</td>
<td>节点可选择，传入定位元组</td>
</tr>
<tr>
<td>element_selection_state_to_be</td>
<td>传入节点对象及状态，相等返回True，否则返回False</td>
</tr>
<tr>
<td>element_located_selection_state_to_be</td>
<td>传入定位元组及状态，相等返回True，否则返回False</td>
</tr>
<tr>
<td>alert_is_present</td>
<td>是否出现警告</td>
</tr>
</tbody></table>
<p>更多等待条件的参数及用法</p>
<p> <a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions</a></p>
<h6 id="前进和后退"><a href="#前进和后退" class="headerlink" title="前进和后退"></a>前进和后退</h6><p>back() 和 forward()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser.back()</span><br><span class="line">browser.forward()</span><br></pre></td></tr></table></figure>

<h6 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h6><p>获取、添加、删除 Cookies</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(browser.get_cookie())</span><br><span class="line">browser.add_cookie(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;name&#x27;</span>&#125;)</span><br><span class="line">browser.delete_all_cookies()</span><br></pre></td></tr></table></figure>

<h6 id="选项卡管理"><a href="#选项卡管理" class="headerlink" title="选项卡管理"></a>选项卡管理</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">browser.execute_script(<span class="string">&#x27;window.open()&#x27;</span>) <span class="comment">#打开新选项卡</span></span><br><span class="line">print(browser.window_handles) <span class="comment">#打印所有选项卡</span></span><br><span class="line">browser.switch_to.window(browser.window_handles[<span class="number">1</span>]) <span class="comment">#切换选项卡</span></span><br><span class="line">browser.get(<span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.switch_to.window(browser.window_handles[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<h6 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h6><p>try except</p>
<p>更多异常类 <a href="https://selenium-python.readthedocs.io/api.html#module-selenium.common.exceptions">https://selenium-python.readthedocs.io/api.html#module-selenium.common.exceptions</a></p>
<h5 id="7-2-Splash-使用"><a href="#7-2-Splash-使用" class="headerlink" title="7.2 Splash 使用"></a>7.2 Splash 使用</h5><p>Splash Scripts Reference <a href="https://splash.readthedocs.io/en/stable/scripting-ref.html">https://splash.readthedocs.io/en/stable/scripting-ref.html</a></p>
<p>Splash 是一个 JavaScript 渲染服务，是一个带有 HTTP API 的轻量级浏览器，对接了 Python 中的 Twisted 和 QT 库，利用它同样可以动态渲染页面的抓取</p>
<ul>
<li>Splash 可以实现功能</li>
</ul>
<p>异步方式处理多个网页渲染过程</p>
<p>获取渲染后的页面的源代码或截图</p>
<p>通过关闭图片渲染或者使用 Adblock 规则来加快页面渲染速度</p>
<p>可执行特定的 JavaScript 脚本</p>
<p>可通过 Lua 脚本来控制页面渲染过程</p>
<p>获取渲染的详细过程并通过 HAR（HTTP Archive）格式呈现</p>
<h6 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h6><p>Docker 安装 Splash 后启动，本机 8050 端口运行了 Splash 服务，打开 <a href="http://localhost:8050/">http://localhost:8050</a> 可以看到 Web 页面，显示一个渲染示例，有个输入框默认 <a href="http://google.com/">http://google.com</a></p>
<p>修改成百度 <a href="https://www.baidu.com/">https://www.baidu.com</a> ，点击 Render me 测试渲染</p>
<p>可以看到网页返回结果显示了渲染截图、HAR加载统计数据、网页的源代码</p>
<p>通过 HAR 结果可以看到，Splash 执行了整个网页的渲染过程，包括 CSS、JavaScript 的加载等过程，呈现的页面和在浏览器中得到的结果一致</p>
<p>返回查看入口的脚本 </p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash, args)</span></span></span><br><span class="line">  <span class="built_in">assert</span>(splash:go(args.url))</span><br><span class="line">  <span class="built_in">assert</span>(splash:wait(<span class="number">0.5</span>))</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    html = splash:html(),</span><br><span class="line">    png = splash:png(),</span><br><span class="line">    har = splash:har(),</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>这是用 Lua 语言写的脚本，首先调用 go() 方法去加载页面，然后调用 wait() 方法等待一定时间，最后返回页面的源码、截图、HAR等信息</p>
<h6 id="Splash-Lua-脚本"><a href="#Splash-Lua-脚本" class="headerlink" title="Splash Lua 脚本"></a>Splash Lua 脚本</h6><p>Splash 可以通过 Lua 脚本执行一系列渲染操作，这样就可以用 Splash 来模拟类似 Chrome、PhantomJs 的操作</p>
<ul>
<li>入口及返回值</li>
</ul>
<p>方法的返回值可以是字符形式或者字典形式</p>
<p>evaljs() 方法传入 JavaScript 脚本</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash, args)</span></span></span><br><span class="line">  splash:go(args.url)</span><br><span class="line">  splash:wait(<span class="number">0.5</span>)</span><br><span class="line">  <span class="keyword">local</span> title = splash:evaljs(<span class="string">&#x27;document.title&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> title</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<ul>
<li>异步处理</li>
</ul>
<p>Splash 支持异步处理，但是没有显式指明回调方法，其回调的跳转是在 Splash 内部完成</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash, args)</span></span></span><br><span class="line">  <span class="keyword">local</span> example_urls = &#123;<span class="string">&quot;www.baidu.com&quot;</span>, <span class="string">&quot;www.taobao.com&quot;</span>, <span class="string">&quot;www.zhihu.com&quot;</span>&#125;</span><br><span class="line">  <span class="keyword">local</span> urls = args.urls <span class="keyword">or</span> example_urls</span><br><span class="line">  <span class="keyword">local</span> results = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> index, url <span class="keyword">in</span> <span class="built_in">ipairs</span>(urls) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> ok, reason = splash:go(<span class="string">&quot;http://&quot;</span> .. url) #lua字符串拼接</span><br><span class="line">    <span class="keyword">if</span> ok <span class="keyword">then</span></span><br><span class="line">      splash:wait(<span class="number">2</span>)</span><br><span class="line">      results[url] = splash:png()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> results</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>go() 方法会返回加载页面的结果状态，如果返回错误 ok 变量就为空</p>
<h6 id="Splash-对象属性"><a href="#Splash-对象属性" class="headerlink" title="Splash 对象属性"></a>Splash 对象属性</h6><ul>
<li>args</li>
</ul>
<p>该属性可以获取加载时配置的参数</p>
<ul>
<li>js_enabled</li>
</ul>
<p>Splash 的 JavaScript 执行开关，设置为 true 或 false 来控制是否执行 JavaScript，默认开启一般不用设置</p>
<ul>
<li>resource_timeout</li>
</ul>
<p>设置加载超时时间，单位秒，0 或 nil 不检测超时</p>
<ul>
<li>images_enabled</li>
</ul>
<p>设置图片是否加载，默认加载，禁用后可以节省流量提高网页加载速度，禁用后可能会影响 JavaScript 渲染，因为禁用后外层DOM节点高度会受影响，进而影响 DOM 节点位置</p>
<p>Splash 使用了缓存，如果一开始加载出来了网页图片，然后禁用图片加载，重新加载页面，之前加载好的图片可能还会显示出来，重启Splash即可</p>
<ul>
<li>plugins_enabled</li>
</ul>
<p>可以控制浏览器插件（如Flash插件）是否开启，默认 false</p>
<ul>
<li>scroll_postion</li>
</ul>
<p>可以控制页面上下或左右滚动</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">splash.scroll_position = &#123;y=<span class="number">400</span>&#125;</span><br><span class="line">splash.scroll_position = &#123;x=<span class="number">200</span>, y=<span class="number">400</span>&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Splash-对象的方法"><a href="#Splash-对象的方法" class="headerlink" title="Splash 对象的方法"></a>Splash 对象的方法</h6><ul>
<li>go()</li>
</ul>
<p>请求某个链接，可以模拟GET和POST请求，支持传入请求头、表单</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">ok, reason = splash:go&#123;url, baseurl=<span class="literal">nil</span>, headers=<span class="literal">nil</span>, http_method=<span class="string">&quot;GET&quot;</span>, body=<span class="literal">nil</span>, fordata=<span class="literal">nil</span>&#125;</span><br><span class="line">#baseurl 资源加载相对路径 可选</span><br><span class="line">#body POST请求时的表单数据 Content-<span class="built_in">type</span> 为 application/json</span><br><span class="line">#fordata POST请求时的表单数据 Content-<span class="built_in">type</span> 为 application/x-www-form-urlencoded</span><br></pre></td></tr></table></figure>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash, args)</span></span></span><br><span class="line">	<span class="keyword">local</span> ok, reason = splash:go&#123;<span class="string">&quot;http://httpbin.org/post&quot;</span>, http_method=<span class="string">&quot;POST&quot;</span>, body=<span class="string">&quot;name=Germey&quot;</span>&#125;</span><br><span class="line">	<span class="keyword">if</span> ok <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">return</span> splash:html() #返回网页源码</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<ul>
<li>wait()</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">ok, reason = splash:wait&#123;<span class="built_in">time</span>, cancel_on_redirect=<span class="literal">false</span>, cancel_on_error=<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>

<p>cancel_on_redirect 可选，默认false，如果发生了重定向就停止等待，并返回重定向结果</p>
<p>cancel_on_error 可选，默认false，如果发生了加载错误，就停止等待</p>
<ul>
<li>jsfunc()</li>
</ul>
<p>可以直接调用 JavaScript 定义的方法，调用的方法需要用双中括号包围</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash, args)</span></span></span><br><span class="line">  <span class="keyword">local</span> get_div_count = splash:jsfunc(<span class="string">[[</span></span><br><span class="line"><span class="string">  function()&#123;</span></span><br><span class="line"><span class="string">    var body = document.body;</span></span><br><span class="line"><span class="string">    var divs = body.getElementsByTagName(&#x27;div&#x27;);</span></span><br><span class="line"><span class="string">    return divs.length;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  ]]</span>)</span><br><span class="line">  splash:go(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> (<span class="string">&quot;There are %s DIVS&quot;</span>):<span class="built_in">format</span>(get_div_count())</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>更多JavaScript 到 Lua 转换细节 <a href="https://splash.readthedocs.io/en/stable/scripting-ref.html">https://splash.readthedocs.io/en/stable/scripting-ref.html</a></p>
<ul>
<li>evaljs()</li>
</ul>
<p>可以执行 JavaScript 代码并返回最后一条 JavaScript 语句的返回结果</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> title = splash:evaljs(<span class="string">&quot;document.title&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>runjs()</li>
</ul>
<p>可以执行 JavaScript 代码，与 evaljs() 功能类似，但更偏向于执行某些动作或声明某些方法</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">splash:runjs(<span class="string">&quot;foo = function() &#123; return &#x27;bar&#x27; &#125;&quot;</span>) #声明一个JavaScript定义的方法</span><br><span class="line"><span class="keyword">local</span> result = splash:evaljs(<span class="string">&quot;foo()&quot;</span>) #通过evaljs()调用得到结果</span><br></pre></td></tr></table></figure>

<ul>
<li>autoload()</li>
</ul>
<p>可以设置每个页面访问时自动加载的对象</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">ok, reason = splash:autoload&#123;source_or_url, source=<span class="literal">nil</span>, url=<span class="literal">nil</span>&#125;</span><br></pre></td></tr></table></figure>

<p>source_or_url JavaScript 代码或者 JavaScript 库链接</p>
<p>source JavaScript 代码</p>
<p>url JavaScript 库链接</p>
<p>此方法只负责加载 JavaScript 代码或库，不执行任何操作，如果要执行，evaljs()</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash, args)</span></span></span><br><span class="line">	splash:autoload(<span class="string">[[</span></span><br><span class="line"><span class="string">  function get_document_title()&#123;</span></span><br><span class="line"><span class="string">    return document.title;</span></span><br><span class="line"><span class="string">  &#125;  </span></span><br><span class="line"><span class="string">  ]]</span>)</span><br><span class="line">  splash:go(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> splash:evaljs(<span class="string">&quot;get_document_title()&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>这里用 autoload 声明了一个 JavaScript 方法</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash, args)</span></span></span><br><span class="line">	<span class="built_in">assert</span>(splash:autoload(<span class="string">&quot;https://code.jquery.com/jquery-2.1.3.min.js&quot;</span>))</span><br><span class="line">  <span class="built_in">assert</span>(splash:go(<span class="string">&quot;https://www.taobao.com&quot;</span>))</span><br><span class="line">  <span class="keyword">local</span> version = splash:evaljs(<span class="string">&quot;$.fn.jquery&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;JQuery version&#x27;</span> .. version</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<ul>
<li>call_later()</li>
</ul>
<p>可以通过设置定时任务和延迟时间来实现任务延迟执行，并且可以在执行前通过 cancel() 方法重新执行特定任务</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">timer = splash:call_later(callback, delay)</span><br></pre></td></tr></table></figure>



<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash, args)</span></span></span><br><span class="line">  <span class="keyword">local</span> snapshots = &#123;&#125;</span><br><span class="line">  <span class="keyword">local</span> timer = splash:call_later(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    snapshots[<span class="string">&quot;a&quot;</span>] = splash:png()</span><br><span class="line">    splash:wait(<span class="number">1.0</span>)</span><br><span class="line">    snapshots[<span class="string">&quot;b&quot;</span>] = splash:png()</span><br><span class="line">  <span class="keyword">end</span>, <span class="number">1.5</span>)</span><br><span class="line">  <span class="built_in">assert</span>(splash:go(<span class="string">&quot;https://www.baidu.com&quot;</span>))</span><br><span class="line">  splash:wait(<span class="number">3.0</span>)</span><br><span class="line">  timer:reraise()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> snapshots</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>设置了一个定时任务，1.5 秒的时候获取网页截图，等待1秒，2.5秒的时候再获取网页截图</p>
<ul>
<li>http_get()</li>
</ul>
<p>模拟发送 HTTP 的 GET请求</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">response = splash:http_get(url, headers=<span class="literal">nil</span>, follow_redirects=<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<p>follow_redirects 是否启动自动重定向 默认 true</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash, args)</span></span></span><br><span class="line">	<span class="keyword">local</span> treat = <span class="built_in">require</span>(<span class="string">&quot;treat&quot;</span>)</span><br><span class="line">	<span class="keyword">local</span> response = splash:http_get(<span class="string">&quot;http://httpbin.org/get&quot;</span>)</span><br><span class="line">  	<span class="keyword">return</span> &#123;</span><br><span class="line">      html = treat.as_string(response.body),</span><br><span class="line">      url = response.url,</span><br><span class="line">      <span class="built_in">status</span> = response.<span class="built_in">status</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<ul>
<li>http_post()</li>
</ul>
<p>模拟 POST 请求</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">response = splash:http_post&#123;url, headers=<span class="literal">nil</span>, follow_redirects=<span class="literal">true</span>, body=<span class="literal">nil</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash, args)</span></span></span><br><span class="line">	<span class="keyword">local</span> treat = <span class="built_in">require</span>(<span class="string">&quot;treat&quot;</span>)</span><br><span class="line">  <span class="keyword">local</span> json = <span class="built_in">require</span>(<span class="string">&quot;json&quot;</span>)</span><br><span class="line">	<span class="keyword">local</span> response = splash:http_post&#123;<span class="string">&quot;http://httpbin.org/post&quot;</span>,</span><br><span class="line">  	body=json.encode(&#123;name=<span class="string">&quot;Germey&quot;</span>&#125;),</span><br><span class="line">    headers = &#123;[<span class="string">&quot;content-type&quot;</span>] = <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  	<span class="keyword">return</span> &#123;</span><br><span class="line">      html = treat.as_string(response.body),</span><br><span class="line">      url = response.url,</span><br><span class="line">      <span class="built_in">status</span> = response.<span class="built_in">status</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<ul>
<li>set_content()</li>
</ul>
<p>用来设置页面内容</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">funciton main(splash)</span><br><span class="line">	<span class="built_in">assert</span>(splash:set_content(<span class="string">&quot;&lt;html&gt;&lt;body&gt;hello&lt;/body&gt;&lt;/html&gt;&quot;</span>))</span><br><span class="line">	<span class="keyword">return</span> splash:png()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<ul>
<li>html()</li>
</ul>
<p>获取网页源代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return splash:html()</span><br></pre></td></tr></table></figure>

<ul>
<li>png()</li>
</ul>
<p>获取 PNG 格式的网页截图</p>
<ul>
<li>har()</li>
</ul>
<p>获取页面加载过程描述</p>
<ul>
<li>url()</li>
</ul>
<p>获取当前正在访问的URL</p>
<ul>
<li>get_cookies()</li>
</ul>
<p>获取当前页面的 Cookies</p>
<ul>
<li>add_cookie()</li>
</ul>
<p>添加 Cookie</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">cookies = splash:add_cookie&#123;name, value, <span class="built_in">path</span>=<span class="literal">nil</span>, domain=<span class="literal">nil</span>, expires=<span class="literal">nil</span>, httpOnly=<span class="literal">nil</span>, secure=<span class="literal">nil</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash)</span></span></span><br><span class="line">	splash:add_cookie&#123;<span class="string">&quot;sessionid&quot;</span>, <span class="string">&quot;34234jojo&quot;</span>, <span class="string">&quot;/&quot;</span>, domain=<span class="string">&quot;http://example.com&quot;</span>&#125;</span><br><span class="line">  splash:go(<span class="string">&quot;http://example.com&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> splash:html()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<ul>
<li>clear_cookies()</li>
</ul>
<p>清除所有 cookies</p>
<ul>
<li>get_viewport_size()</li>
</ul>
<p>获取当前浏览器页面的大小，即宽高</p>
<ul>
<li>set_viewport_size()</li>
</ul>
<p>设置浏览器页面宽高</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">splash:set_viewport(<span class="number">400</span>, <span class="number">700</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>set_viewport_full()</li>
</ul>
<p>设置浏览器全屏显示</p>
<ul>
<li>set_user_agent()</li>
</ul>
<p>设置浏览器 User-Agent</p>
<ul>
<li>set_custom_headers()</li>
</ul>
<p>设置请求头</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">splash:set_custom_headers(&#123;</span><br><span class="line">	[<span class="string">&quot;User-Agent&quot;</span>] = <span class="string">&quot;Splash&quot;</span>,</span><br><span class="line">	[<span class="string">&quot;Site&quot;</span>] = <span class="string">&quot;Splash&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>select()</li>
</ul>
<p>选中符合条件的第一个节点，如果有多个符合条件只会返回一个，参数是CSS 选择器</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span> = splash:<span class="built_in">select</span>(<span class="string">&quot;#kw&quot;</span>)</span><br><span class="line"><span class="built_in">input</span>:send_text(<span class="string">&#x27;Splash&#x27;</span>)</span><br><span class="line">splash:wait(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">return</span> splash:png()</span><br></pre></td></tr></table></figure>

<ul>
<li>select_all()</li>
</ul>
<p>选中所有符合条件的节点，参数是CSS 选择器</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">local</span> treat = <span class="built_in">require</span>(<span class="string">&#x27;treat&#x27;</span>)</span><br><span class="line"><span class="built_in">assert</span>(splash:go(<span class="string">&quot;https://quotes.toscrape.com/&quot;</span>))</span><br><span class="line"><span class="keyword">local</span> = texts = splash:select_all(<span class="string">&#x27;.quote .text&#x27;</span>)</span><br><span class="line"> <span class="keyword">for</span> index, text <span class="keyword">in</span> <span class="built_in">ipairs</span>(texts) <span class="keyword">do</span></span><br><span class="line">   results[index] = text.node.innerHTML</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"> <span class="keyword">return</span> treat.as_array(results)</span><br></pre></td></tr></table></figure>

<p>通过 CSS 选择器选中了节点的正文内容，随后遍历所有节点，将内容获取下来</p>
<ul>
<li>mouse_click()</li>
</ul>
<p>可以模拟鼠标点击操作，参数为坐标x和y，也可以直接选中某个节点</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span> = splash:<span class="built_in">select</span>(<span class="string">&#x27;#kw&#x27;</span>)</span><br><span class="line"><span class="built_in">input</span>:send_text(<span class="string">&#x27;Splash&#x27;</span>)</span><br><span class="line">submit = splash:<span class="built_in">select</span>(<span class="string">&#x27;#su&#x27;</span>)</span><br><span class="line">submit:mouse_click()</span><br></pre></td></tr></table></figure>



<p>针对页面元素的API操作 <a href="https://splash.readthedocs.io/en/stable/scripting-element-object.html">https://splash.readthedocs.io/en/stable/scripting-element-object.html</a></p>
<h6 id="Splash-API-调用"><a href="#Splash-API-调用" class="headerlink" title="Splash API 调用"></a>Splash API 调用</h6><p>如何利用 Splash 渲染页面，Splash 提供了一些 HTTP API 接口，只需要请求这些接口并传递相应的参数即可</p>
<ul>
<li>render.html</li>
</ul>
<p>用于获取 JavaScript 渲染的页面的 HTML 代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;localhost:8050&#x2F;render.html?url&#x3D;https:&#x2F;&#x2F;www.baidu.com</span><br></pre></td></tr></table></figure>

<p>传递一个url参数来指定渲染 URL，返回结果即页面渲染后的源代码</p>
<p>Python 实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">&#x27;http://localhost:8050/render.html?url=https://www.baidu.com&#x27;</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">print(respons.text)</span><br></pre></td></tr></table></figure>

<p>此接口还可以指定其它参数 如wait 等待秒数 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">&#x27;http://localhost:8050/render.html?url=https://www.baidu.com&amp;wait=5&#x27;</span></span><br></pre></td></tr></table></figure>

<p>还支持代理设置、图片加载设置、Headers 设置、请求方法设置</p>
<p>具体用法 <a href="https://splash.readthedocs.io/en/stable/api.html">https://splash.readthedocs.io/en/stable/api.html</a></p>
<ul>
<li>render.png</li>
</ul>
<p>可以获取网页截图，参数比 render.html 多了几个 比如 width 和 height 来控制宽高</p>
<p>返回 PNG 格式的图片二进制数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;localhost:8050&#x2F;render.png?url&#x3D;https:&#x2F;&#x2F;www.baidu.com&amp;wait&#x3D;5&amp;width&#x3D;1000&amp;height&#x3D;700</span><br></pre></td></tr></table></figure>

<p>具体用法 <a href="https://splash.readthedocs.io/en/stable/api.html">https://splash.readthedocs.io/en/stable/api.html</a></p>
<ul>
<li>render.jpeg</li>
</ul>
<p>和 render.png 类似，返回 JPEG 格式二进制图片</p>
<ul>
<li>render.har</li>
</ul>
<p>获取页面加载的 HAR 数据，JSON 格式的</p>
<ul>
<li>render.json</li>
</ul>
<p>包含了前面接口所有功能，JSON 格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;localhost:8050&#x2F;render.json?url&#x3D;http:&#x2F;&#x2F;httpbin.org</span><br></pre></td></tr></table></figure>

<p>可以传入不同的参数控制返回结果，传入html=1 返回结果会增加源代码数据 png=1 增加 PNG 截图数据，传入 har=1 会获得页面 HAR 数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;localhost:8050&#x2F;render.json?url&#x3D;http:&#x2F;&#x2F;httpbin.org&amp;html&#x3D;1&amp;png&#x3D;1&amp;har&#x3D;1</span><br></pre></td></tr></table></figure>

<ul>
<li>execute</li>
</ul>
<p>用此接口便可实现与 Lua脚本的对接</p>
<p>如果实现一些交互操作的话，使用 execute 接口</p>
<p>写个简单的脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function main(splash)</span><br><span class="line">	return &#39;hello&#39;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>然后将此接口转化为 URL 编码的字符串，拼接到 execute 接口后面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;localhost:8050&#x2F;execute?lua_source&#x3D;function+main%jo342342</span><br></pre></td></tr></table></figure>

<p>lua_source 参数传递了转码后的 Lua 脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">lua = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">function main(splash)</span></span><br><span class="line"><span class="string">	return &#x27;hello&#x27;</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://localhost:8050/execute?lua_source=&#x27;</span> + quote(lua)</span><br><span class="line">response = requests.get(url)</span><br></pre></td></tr></table></figure>

<p>返回 JSON 格式，成功获取了请求的 URL、状态码、网页源代码</p>
<h5 id="7-3-Splash-负载均衡配置"><a href="#7-3-Splash-负载均衡配置" class="headerlink" title="7.3 Splash 负载均衡配置"></a>7.3 Splash 负载均衡配置</h5><p>Splash 做页面抓取时，如果爬取的量非常大，任务非常多，用一个Splash服务来处理压力太大，搭建一个负载均衡器把压力分散到服务器上，相当于多台机器多个服务共同参与任务的处理，减小单个 Splash服务的压力</p>
<h6 id="配置-Splash-服务"><a href="#配置-Splash-服务" class="headerlink" title="配置 Splash 服务"></a>配置 Splash 服务</h6><p>要搭建 Splash 负载均衡，首先要有多个 Splash 服务</p>
<p>比如 4台远程主机的 8050 端口上都开启了 Splash 服务，访问其中任何一个服务时，都可以使用 Splash 服务</p>
<h6 id="配置负载均衡"><a href="#配置负载均衡" class="headerlink" title="配置负载均衡"></a>配置负载均衡</h6><p>任意一台带有公网IP 的主机配置负载均衡，主机上装好 Nginx 修改 Nginx 配置文件 nginx.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">	upstream splash &#123;</span><br><span class="line">		least_conn;</span><br><span class="line">		server 41.159.27:8050;</span><br><span class="line">		server 41.159.27:8050;</span><br><span class="line">		server 41.159.27:8050;</span><br><span class="line">		server 41.159.27:8050;</span><br><span class="line">	&#125;</span><br><span class="line">	server&#123;</span><br><span class="line">		listen 8050;</span><br><span class="line">		location &#x2F; &#123;</span><br><span class="line">			proxy_pass http:splash;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>。。。</p>
<p>配置完成后重启 Nginx 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure>

<p>直接访问 Nginx 所在服务器的 8050 端口，即可实现负载均衡了</p>
<h6 id="配置认证"><a href="#配置认证" class="headerlink" title="配置认证"></a>配置认证</h6><h5 id="7-4-使用-Selenium-爬取淘宝商品"><a href="#7-4-使用-Selenium-爬取淘宝商品" class="headerlink" title="7.4 使用 Selenium 爬取淘宝商品"></a>7.4 使用 Selenium 爬取淘宝商品</h5><p>代码 <a href="https://github.com/Python3WebSpider/TaobaoProduct">https://github.com/Python3WebSpider/TaobaoProduct</a></p>
<p>利用 Selenium 模拟浏览器操作抓取淘宝的商品信息，并将结果保存到MongoDB</p>
<h6 id="获取商品列表"><a href="#获取商品列表" class="headerlink" title="获取商品列表"></a>获取商品列表</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">KEYWORD = <span class="string">&#x27;iPad&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span>(<span class="params">page</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  抓取索引页</span></span><br><span class="line"><span class="string">  :param page: 页码</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  print(<span class="string">&#x27;正在爬取第&#x27;</span>, page, <span class="string">&#x27;页&#x27;</span>)</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      url = <span class="string">&#x27;https://s.taobao.com/search?q=&#x27;</span> + quote(KEYWORD)</span><br><span class="line">      browser.get(url)</span><br><span class="line">      <span class="keyword">if</span> page &gt; <span class="number">1</span>:</span><br><span class="line">          <span class="built_in">input</span> = wait.until(</span><br><span class="line">              EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">&#x27;#mainsrp-pager div.form &gt; input&#x27;</span>)))</span><br><span class="line">          submit = wait.until(</span><br><span class="line">              EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">&#x27;#mainsrp-pager div.form &gt; span.btn.J_Submit&#x27;</span>)))</span><br><span class="line">          <span class="built_in">input</span>.clear()</span><br><span class="line">          <span class="built_in">input</span>.send_keys(page)</span><br><span class="line">          submit.click()</span><br><span class="line">      wait.until(</span><br><span class="line">          EC.text_to_be_present_in_element((By.CSS_SELECTOR, <span class="string">&#x27;#mainsrp-pager li.item.active &gt; span&#x27;</span>), <span class="built_in">str</span>(page)))</span><br><span class="line">      wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">&#x27;.m-itemlist .items .item&#x27;</span>)))</span><br><span class="line">      get_products()</span><br><span class="line">  <span class="keyword">except</span> TimeoutException:</span><br><span class="line">      index_page(page)</span><br></pre></td></tr></table></figure>

<p>定义了 index_page() 方法，抓取商品列表</p>
<p>访问搜索链接，页码大于1就进行跳页操作，否则等待页面加载完成</p>
<p>等待加载使用 WebDriverWait 对象，指定最长等待时间 10 秒，这个时间内匹配了等待条件，也就说页面加载出来了，就立即返回相应结果继续向下执行，否则到了最大时间没加载出来时，抛出异常</p>
<p>等待商品加载出来 presence_of_element_located，传入 CSS 选择器 .m-itemlist .items .item，这选择器对应页面内容是每个商品的信息块</p>
<p>是否跳转到了对应页面，跳转到某一页后页码都会高亮，只需要判断当前高亮的页码数是当前页码即可</p>
<p>text_to_be_present_in_element 会等待指定的文本出现在某个节点里时返回成功，会检测当前高亮的页码节点是不是传过来的页码数</p>
<h6 id="解析商品列表"><a href="#解析商品列表" class="headerlink" title="解析商品列表"></a>解析商品列表</h6><p>直接返回页面源代码，使用pyquery解析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_products</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  提取商品数据</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  html = browser.page_source</span><br><span class="line">  doc = pq(html)</span><br><span class="line">  items = doc(<span class="string">&#x27;#mainsrp-itemlist .items .item&#x27;</span>).items()</span><br><span class="line">  <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">      product = &#123;</span><br><span class="line">          <span class="string">&#x27;image&#x27;</span>: item.find(<span class="string">&#x27;.pic .img&#x27;</span>).attr(<span class="string">&#x27;data-src&#x27;</span>),</span><br><span class="line">          <span class="string">&#x27;price&#x27;</span>: item.find(<span class="string">&#x27;.price&#x27;</span>).text(),</span><br><span class="line">          <span class="string">&#x27;deal&#x27;</span>: item.find(<span class="string">&#x27;.deal-cnt&#x27;</span>).text(),</span><br><span class="line">          <span class="string">&#x27;title&#x27;</span>: item.find(<span class="string">&#x27;.title&#x27;</span>).text(),</span><br><span class="line">          <span class="string">&#x27;shop&#x27;</span>: item.find(<span class="string">&#x27;.shop&#x27;</span>).text(),</span><br><span class="line">          <span class="string">&#x27;location&#x27;</span>: item.find(<span class="string">&#x27;.location&#x27;</span>).text()</span><br><span class="line">      &#125;</span><br><span class="line">      print(product)</span><br><span class="line">      save_to_mongo(product)</span><br></pre></td></tr></table></figure>

<h6 id="保存到-MongoDB"><a href="#保存到-MongoDB" class="headerlink" title="保存到 MongoDB"></a>保存到 MongoDB</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MONGO_URL = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">MONGO_DB = <span class="string">&#x27;taobao&#x27;</span></span><br><span class="line">MONGO_COLLECTION = <span class="string">&#x27;products&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span>(<span class="params">result</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  保存至MongoDB</span></span><br><span class="line"><span class="string">  :param result: 结果</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      <span class="keyword">if</span> db[MONGO_COLLECTION].insert(result):</span><br><span class="line">          print(<span class="string">&#x27;存储到MongoDB成功&#x27;</span>)</span><br><span class="line">  <span class="keyword">except</span> Exception:</span><br><span class="line">      print(<span class="string">&#x27;存储到MongoDB失败&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>quote()</p>
<p>单个字符串编码，url 多个字符串编码用 urlencode</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">KEYWORD = <span class="string">&#x27;ipad&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;https://s.taobao.com/search?q=&#x27;</span> + quote(KEYWORD)</span><br></pre></td></tr></table></figure>

<h6 id="遍历每页"><a href="#遍历每页" class="headerlink" title="遍历每页"></a>遍历每页</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MAX_PAGE = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  遍历每一页</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, MAX_PAGE + <span class="number">1</span>):</span><br><span class="line">      index_page(i)</span><br><span class="line">  browser.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main()</span><br></pre></td></tr></table></figure>





<h6 id="Chrome-Handless-模式"><a href="#Chrome-Handless-模式" class="headerlink" title="Chrome Handless 模式"></a>Chrome Handless 模式</h6><p>Chrome59版本开始已开始支持 Handless 模式，也就是无界面模式，这样爬取的时候就不会弹出浏览器了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">browser = webdriver.Chrome(chrome_options=chrome_options)</span><br></pre></td></tr></table></figure>

<h6 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h6><p>可以把常量设置放 Config.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MONGO_URL = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">MONGO_DB = <span class="string">&#x27;taobao&#x27;</span></span><br><span class="line">MONGO_COLLECTION = <span class="string">&#x27;products&#x27;</span></span><br><span class="line">KEYWORD = <span class="string">&#x27;ipad&#x27;</span></span><br><span class="line">MAX_PAGE = <span class="number">100</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>from config import *</code> 导入</p>
<h6 id="对接-Firefox"><a href="#对接-Firefox" class="headerlink" title="对接 Firefox"></a>对接 Firefox</h6><p>只需要更改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser = webdriver.Firefox()</span><br></pre></td></tr></table></figure>





















]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-数据存储</title>
    <url>/2022/04/12/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h4 id="5-1-文件存储"><a href="#5-1-文件存储" class="headerlink" title="5.1 文件存储"></a>5.1 文件存储</h4><h5 id="5-1-1-TXT-文本存储"><a href="#5-1-1-TXT-文本存储" class="headerlink" title="5.1.1 TXT 文本存储"></a>5.1.1 TXT 文本存储</h5><p>保存知乎上近期热点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Safari/605.1.15&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">html = requests.get(url, headers=headers).text</span><br><span class="line">doc = pq(html)</span><br><span class="line"><span class="comment"># items = doc(&#x27;.css-4cffwv&#x27;)</span></span><br><span class="line">items = doc(<span class="string">&#x27;.css-4cffwv .css-vurnku .css-1as7ang&#x27;</span>).items()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    topic = item(<span class="string">&#x27;.css-1g4zjtl a&#x27;</span>).text()</span><br><span class="line">    des = item(<span class="string">&#x27;.css-13jrecd&#x27;</span>).text()</span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&#x27;explore.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    file.write(<span class="string">&#x27;\n&#x27;</span>.join([topic, des]))</span><br><span class="line">    file.write(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;=&#x27;</span> * <span class="number">50</span> + <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">    file.close()</span><br></pre></td></tr></table></figure>

<p>open 第一个参数为保存文件名称，第二个参数为 a 代表追加方式写入到文本</p>
<p>写入完成后需要调用 close 方法关闭文件对象</p>
<h6 id="打开方式"><a href="#打开方式" class="headerlink" title="打开方式"></a>打开方式</h6><table>
<thead>
<tr>
<th>打开方式</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>只读方式打开，文件指针放在文件开头</td>
</tr>
<tr>
<td>rb</td>
<td>以二进制只读方式打开一个文件，文件指针放在文件开头</td>
</tr>
<tr>
<td>r+</td>
<td>以读写方式打开一个文件，文件指针放在文件开头</td>
</tr>
<tr>
<td>rb+</td>
<td>以二进制读写方式打开一个文件，文件指针放在文件开头</td>
</tr>
<tr>
<td>w</td>
<td>以写入方式打开一个文件，文件已存在会覆盖，不存在则创建</td>
</tr>
<tr>
<td>wb</td>
<td>以二进制写入方式打开一个文件，文件已存在会覆盖，不存在则创建</td>
</tr>
<tr>
<td>w+</td>
<td>以读写入方式打开一个文件，文件已存在会覆盖，不存在则创建</td>
</tr>
<tr>
<td>wb+</td>
<td>以二进制读写方式打开一个文件，文件已存在会覆盖，不存在则创建</td>
</tr>
<tr>
<td>a</td>
<td>以追加方式打开一个文件，文件已存在新内容写入已有内容之后，不存在则创建</td>
</tr>
<tr>
<td>ab</td>
<td>以二进制追加方式打开一个文件，文件已存在新内容写入已有内容之后，不存在则创建</td>
</tr>
<tr>
<td>a+</td>
<td>以读写方式打开一个文件，文件已存在新内容写入已有内容之后，不存在则创建</td>
</tr>
<tr>
<td>ab+</td>
<td></td>
</tr>
</tbody></table>
<h6 id="简化写法"><a href="#简化写法" class="headerlink" title="简化写法"></a>简化写法</h6><p>with as 语法，with 控制块结束时，文件会自动关闭，不需要调用 close</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;explore.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&#x27;\n&#x27;</span>.join([topic, des]))</span><br><span class="line">    file.write(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;=&#x27;</span> * <span class="number">50</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="5-1-2-JSON-文件存储"><a href="#5-1-2-JSON-文件存储" class="headerlink" title="5.1.2 JSON 文件存储"></a>5.1.2 JSON 文件存储</h5><h6 id="读取-JSON"><a href="#读取-JSON" class="headerlink" title="读取 JSON"></a>读取 JSON</h6><p>可以调用 JSON 库的 loads() 方法将 JSON 文本字符串转为 JSON 对象，通过 dumps() 将 JSON 对象转为文本字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;[&#123;&quot;name&quot;: &quot;Bob&quot;&#125;,&#123;&quot;gender&quot;: &quot;male&quot;&#125;]&#x27;</span></span><br><span class="line">data = json.loads(<span class="built_in">str</span>)</span><br><span class="line">print(data)</span><br><span class="line"><span class="comment">#转成JSON就可以用索引获取内容了</span></span><br><span class="line">data[<span class="number">0</span>][<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">data[<span class="number">0</span>].get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">data[<span class="number">0</span>].get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>获取键值推荐使用 get 方法，如果键名不存在不会报错，返回None，get 方法还可以传入第二个参数（默认值）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">  <span class="built_in">str</span> = file.read()</span><br><span class="line">  data = json.loads(<span class="built_in">str</span>)</span><br><span class="line">  print(data)</span><br></pre></td></tr></table></figure>

<h6 id="输出JSON"><a href="#输出JSON" class="headerlink" title="输出JSON"></a>输出JSON</h6><p>将JSON对象转为字符串，写入文本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>&#125;, &#123;<span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">  file.write(json.dumps(data))</span><br></pre></td></tr></table></figure>

<p>如果想保存JSON格式，再加一个参数 indent，代表缩进字符个数</p>
<p>输出中文，加参数 ensure_ascii 为 False</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file.write(json.dumps(data, indent=<span class="number">2</span>, ensure_ascii=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>

<h5 id="5-1-3-CSV-文件存储"><a href="#5-1-3-CSV-文件存储" class="headerlink" title="5.1.3 CSV 文件存储"></a>5.1.3 CSV 文件存储</h5><p>逗号分隔值或字符分隔值，文件以纯文本形式存储表格数据</p>
<h6 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile)</span><br><span class="line">    writer.writerow([<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>])</span><br><span class="line">    writer.writerow([<span class="string">&#x27;10001&#x27;</span>, <span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;20&#x27;</span>])</span><br><span class="line">    writer.writerow([<span class="string">&#x27;10002&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;21&#x27;</span>])</span><br><span class="line">    writer.writerow([<span class="string">&#x27;10003&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;22&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>首先打开 data.csv 文件，模式为 w 写入，调用 csv 库的 writer 方法初始化写入对象，调用 writerow() 方法传入写入的每行数据</p>
<p>以文本方式打开，写入的文本默认以逗号分隔</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span>,name,age</span><br><span class="line"><span class="number">10001</span>,Mike,<span class="number">20</span></span><br><span class="line"><span class="number">10002</span>,Bob,<span class="number">21</span></span><br><span class="line"><span class="number">10003</span>,Jack,<span class="number">22</span></span><br></pre></td></tr></table></figure>

<p>也可以用 Excel 打开，每个值对应一个单元格</p>
<p>可以指定分隔符号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer = csv.writer(csvfile,delimiter=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment">#文本方式打开</span></span><br><span class="line"><span class="built_in">id</span> name age</span><br><span class="line"><span class="number">10001</span> Mike <span class="number">20</span></span><br><span class="line"><span class="number">10002</span> Bob <span class="number">21</span></span><br><span class="line"><span class="number">10003</span> Jack <span class="number">22</span></span><br></pre></td></tr></table></figure>

<p>Excel 打开只有一个单元格显示所有值了</p>
<p>writerrows() 写入多行，参数需要二维列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer = csv.writer(csvfile)</span><br><span class="line">writer.writerow([<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>])</span><br><span class="line">writer.writerows([[<span class="string">&#x27;10001&#x27;</span>, <span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;20&#x27;</span>],[<span class="string">&#x27;10002&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;21&#x27;</span>],[<span class="string">&#x27;10003&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;22&#x27;</span>]])</span><br></pre></td></tr></table></figure>

<ul>
<li>字典的写入方式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    fieldnames = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</span><br><span class="line">    writer.writeheader() <span class="comment">#写入头信息</span></span><br><span class="line">    writer.writerow(&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;10001&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    reader = csv.reader(csvfile)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        print(row)</span><br></pre></td></tr></table></figure>

<p>构造 Reader 对象，遍历输出每行内容，每行都是一个列表形式</p>
<ul>
<li>pandas</li>
</ul>
<p>利用 read_csv 方法将数据从 csv 中读取出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>



<h4 id="5-2-关系型数据库存储"><a href="#5-2-关系型数据库存储" class="headerlink" title="5.2 关系型数据库存储"></a>5.2 关系型数据库存储</h4><p>基于关系模型的数据库，关系模型是通过二维表来保存的，存储方式是行列组成的表</p>
<h5 id="5-2-1-MySQL-存储"><a href="#5-2-1-MySQL-存储" class="headerlink" title="5.2.1 MySQL 存储"></a>5.2.1 MySQL 存储</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;12345678&#x27;</span>,port=<span class="number">3306</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">cursor.execute(<span class="string">&#x27;SELECT VERSION()&#x27;</span>)</span><br><span class="line">data = cursor.fetchone()</span><br><span class="line">print(<span class="string">&#x27;Database version:&#x27;</span>, data)</span><br><span class="line">cursor.execute(<span class="string">&#x27;CREATE DATABASE spiders DEFAULT CHARACTER SET utf8&#x27;</span>)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<p>通过 PyMySQL 的 connect() 方法声明一个 MySQL 连接对象 db，端口默认 3306</p>
<p>连接成功后需要调用 cursor 获得 MySQL 的操作游标，利用游标来执行 SQL语句，直接用 execute() 方法来执行</p>
<p>fetchone 方法来获得第一条数据</p>
<p>第二句创建数据库的操作，数据库名 spiders，默认编码 UTF-8</p>
<p>终端登录数据库 mysql -uroot -p</p>
<p>show databases; 查询创建成功的数据库</p>
<h6 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h6><p>创建了数据库后，连接时需要额外参数 db</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;12345678&#x27;</span>,port=<span class="number">3306</span>,db=<span class="string">&#x27;spiders&#x27;</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">&#x27;CREATE TABLE IF NOT EXISTS students (id VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, age INT NOT NULL, PRIMARY KEY (id))&#x27;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<h6 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span> = <span class="string">&#x27;20120001&#x27;</span></span><br><span class="line">user = <span class="string">&#x27;Bob&#x27;</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line">db = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;12345678&#x27;</span>,port=<span class="number">3306</span>,db=<span class="string">&#x27;spiders&#x27;</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">&#x27;INSERT INTO students(id, name, age) values(%s, %s, %s)&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql, (<span class="built_in">id</span>, user, age))</span><br><span class="line">    db.commit()<span class="comment">#插入、更新、删除 都需要commit</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    db.rollback()<span class="comment">#执行失败回滚</span></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<p>优化插入方法</p>
<p>实现传入一个字典来插入数据的方法，不需要去修改SQL语句和插入操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>, user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;12345678&#x27;</span>, port=<span class="number">3306</span>, db=<span class="string">&#x27;spiders&#x27;</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;20120003&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">table = <span class="string">&#x27;students&#x27;</span></span><br><span class="line">keys = <span class="string">&#x27;,&#x27;</span>.join(data.keys()) <span class="comment">#id,user,age</span></span><br><span class="line">values = <span class="string">&#x27;,&#x27;</span>.join([<span class="string">&#x27;%s&#x27;</span>] * <span class="built_in">len</span>(data))</span><br><span class="line">sql = <span class="string">f&#x27;INSERT INTO <span class="subst">&#123;table&#125;</span>(<span class="subst">&#123;keys&#125;</span>) VALUES(<span class="subst">&#123;values&#125;</span>)&#x27;</span>.<span class="built_in">format</span>(table=table, keys=keys, values=values)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> cursor.execute(sql, <span class="built_in">tuple</span>(data.values())):</span><br><span class="line">        print(<span class="string">&#x27;Success&#x27;</span>)</span><br><span class="line">        db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    db.rollback()</span><br><span class="line">    print(<span class="string">&#x27;Failed&#x27;</span>)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<h6 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h6><p>如果数据存在，则更新数据，如果数据不存在，则插入数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>, user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;12345678&#x27;</span>, port=<span class="number">3306</span>, db=<span class="string">&#x27;spiders&#x27;</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;20120003&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line">table = <span class="string">&#x27;students&#x27;</span></span><br><span class="line">keys = <span class="string">&#x27;,&#x27;</span>.join(data.keys()) <span class="comment">#id,user,age</span></span><br><span class="line">values = <span class="string">&#x27;,&#x27;</span>.join([<span class="string">&#x27;%s&#x27;</span>] * <span class="built_in">len</span>(data))</span><br><span class="line">sql = <span class="string">f&#x27;INSERT INTO <span class="subst">&#123;table&#125;</span>(<span class="subst">&#123;keys&#125;</span>) VALUES (<span class="subst">&#123;values&#125;</span>) ON DUPLICATE KEY UPDATE&#x27;</span>.<span class="built_in">format</span>(table=table,keys=keys,values=values)</span><br><span class="line">update = <span class="string">&#x27;,&#x27;</span>.join([<span class="string">&quot; &#123;key&#125; = %s&quot;</span>.<span class="built_in">format</span>(key = key) <span class="keyword">for</span> key <span class="keyword">in</span> data])</span><br><span class="line">sql+=update</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> cursor.execute(sql, <span class="built_in">tuple</span>(data.values())*<span class="number">2</span>):</span><br><span class="line">        print(<span class="string">&#x27;Success&#x27;</span>)</span><br><span class="line">        db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    db.rollback()</span><br><span class="line">    print(<span class="string">&#x27;Failed&#x27;</span>)</span><br><span class="line">db.close()</span><br><span class="line"><span class="comment">#INSERT INTO students(id,name,age) VALUES (%s,%s,%s) ON DUPLICATE KEY UPDATEid = %s,name = %s,age = %s</span></span><br></pre></td></tr></table></figure>

<p>ON DUPLICATE KEY UPDATE 主键已存在就执行更新操作</p>
<h6 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>, user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;12345678&#x27;</span>, port=<span class="number">3306</span>, db=<span class="string">&#x27;spiders&#x27;</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">table = <span class="string">&#x27;students&#x27;</span></span><br><span class="line">condition = <span class="string">&#x27;age &gt; 22&#x27;</span></span><br><span class="line">sql = <span class="string">f&#x27;DELETE FROM <span class="subst">&#123;table&#125;</span> WHERE <span class="subst">&#123;condition&#125;</span>&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure>

<h6 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>, user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;12345678&#x27;</span>, port=<span class="number">3306</span>, db=<span class="string">&#x27;spiders&#x27;</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">&#x27;SELECT * FROM students WHERE age &gt; 18&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    print(<span class="string">&#x27;Count:&#x27;</span>, cursor.rowcount) <span class="comment">#查询结果条数 总共2条</span></span><br><span class="line">    one = cursor.fetchone() </span><br><span class="line">    print(<span class="string">&#x27;One:&#x27;</span>, one) <span class="comment">#获取结果第一条</span></span><br><span class="line">    results = cursor.fetchall() <span class="comment">#获取到剩下的1条 按指针偏移查找的 fetchone 已取了一条</span></span><br><span class="line">    print(<span class="string">&#x27;Result Type:&#x27;</span>, <span class="built_in">type</span>(results))</span><br><span class="line">    print(<span class="string">&#x27;Results:&#x27;</span>, results)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">        print(row)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">Count: <span class="number">2</span></span><br><span class="line">One: (<span class="string">&#x27;20120001&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">Result Type: &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">Results</span>:</span> ((<span class="string">&#x27;20120002&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">22</span>),)</span><br><span class="line">(<span class="string">&#x27;20120002&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">22</span>)</span><br></pre></td></tr></table></figure>

<p>还可以用 while 循环加 fetchone 方法获取所有数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">row = cursor.fetchone()</span><br><span class="line"><span class="keyword">while</span> row:</span><br><span class="line">  print(<span class="string">&#x27;Row:&#x27;</span>, row)</span><br><span class="line">  row = cursor.fetchone()<span class="comment">#每循环一次 指针就会偏移一条数据</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3-非关系型数据库"><a href="#5-3-非关系型数据库" class="headerlink" title="5.3 非关系型数据库"></a>5.3 非关系型数据库</h4><p>基于键值对的，数据之间没有耦合性，性能高</p>
<p>文档型数据库：MongoDB</p>
<p>键值存储数据库：Redis、Oracle BDB</p>
<h5 id="5-3-1-MongoDB-存储"><a href="#5-3-1-MongoDB-存储" class="headerlink" title="5.3.1 MongoDB 存储"></a>5.3.1 MongoDB 存储</h5><p>基于分布式文件存储的开源数据库系统，内容存储形式类似 JSON 对象，字段值可以包含其它文档、数组及文档数组</p>
<h6 id="连接-MongoDB"><a href="#连接-MongoDB" class="headerlink" title="连接 MongoDB"></a>连接 MongoDB</h6><p>使用 PyMongo 库里的 MongoClient，第一个参数地址 host，第二个参数为端口默认27017</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">27017</span>)</span><br><span class="line"><span class="comment">#第一个参数host还可传入MongoDB的连接字符串，以mongodb开头</span></span><br><span class="line">client = MongoClient(<span class="string">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line">client = MongoClient()</span><br></pre></td></tr></table></figure>

<p>这样就创建 MongoDB 的连接对象了</p>
<h6 id="指定数据库"><a href="#指定数据库" class="headerlink" title="指定数据库"></a>指定数据库</h6><p>指定操作哪个数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = client.test <span class="comment">#调用client的test即可返回test数据库</span></span><br><span class="line"><span class="comment">#也可以</span></span><br><span class="line">db = client[<span class="string">&#x27;test&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h6 id="指定集合"><a href="#指定集合" class="headerlink" title="指定集合"></a>指定集合</h6><p>MongoDB的每个数据库又包含许多集合，类似关系型数据库中的表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">collection &#x3D; db.students</span><br><span class="line">collection &#x3D; db[&#39;students&#39;]</span><br></pre></td></tr></table></figure>

<h6 id="插入数据-1"><a href="#插入数据-1" class="headerlink" title="插入数据"></a>插入数据</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">student1 = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;2017002&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">student2 = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;2017003&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.tests</span><br><span class="line">collection = db.students</span><br><span class="line">result = collection.insert_one(student1) <span class="comment">#单条插入</span></span><br><span class="line">result = collection.insert_many([student1, student2]) <span class="comment">#多条插入</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<h6 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h6><p>find_one()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = collection.find_one(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>&#125;)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">&#123;<span class="string">&#x27;_id&#x27;</span>: ObjectId(<span class="string">&#x27;62554aac23dcb7329838bd6b&#x27;</span>), <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;2017001&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>多了个_id属性 ，也可跟进 ObjectId来查询</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bson.objectid <span class="keyword">import</span> ObjectId</span><br><span class="line">result = collection.find_one(&#123;<span class="string">&#x27;_id&#x27;</span>: ObjectId(<span class="string">&#x27;62554aac23dcb7329838bd6b&#x27;</span>)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p>find()</p>
<p>多条数据查询 find() 返回一个生成器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = collection.find(&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;)<span class="comment">#查询年龄20数据</span></span><br><span class="line">result = collection.find(&#123;<span class="string">&#x27;age&#x27;</span>: &#123;<span class="string">&#x27;$gt&#x27;</span>: <span class="number">20</span>&#125;&#125;) <span class="comment">#年龄大于20数据</span></span><br></pre></td></tr></table></figure>

<ul>
<li>比较符号</li>
</ul>
<p>$lt 小于 $gt大小 $lte小于等于 $gte大于等于 $ne不等于 $in 在范围内 $nin 不在范围内</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: &#123;<span class="string">&#x27;$in&#x27;</span>: [<span class="number">20</span>, <span class="number">33</span>]&#125;&#125;</span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: &#123;<span class="string">&#x27;$nin&#x27;</span>: [<span class="number">20</span>, <span class="number">33</span>]&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>还可进行正则匹配查询，如 以M开头的学生数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = connection.find(&#123;<span class="string">&#x27;name&#x27;</span>: &#123;<span class="string">&#x27;$regex&#x27;</span>: <span class="string">&#x27;^M.*&#x27;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#$regex 匹配正则表达式 </span></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: &#123;<span class="string">&#x27;$regex&#x27;</span>: <span class="string">&#x27;^M.*&#x27;</span>&#125;&#125;</span><br><span class="line"><span class="comment">#$exists 属性是否存在 </span></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: &#123;<span class="string">&#x27;$exists&#x27;</span>: <span class="string">&#x27;True&#x27;</span>&#125;&#125;</span><br><span class="line"><span class="comment">#$type 类型判断</span></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: &#123;<span class="string">&#x27;$type&#x27;</span>: <span class="string">&#x27;int&#x27;</span>&#125;&#125;</span><br><span class="line"><span class="comment">#$mod 数字模操作</span></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: &#123;<span class="string">&#x27;$mod&#x27;</span>: [<span class="number">5</span>, <span class="number">0</span>]&#125;&#125;</span><br><span class="line"><span class="comment">#$text 文本查询</span></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: &#123;<span class="string">&#x27;$text&#x27;</span>: <span class="string">&#x27;Mike&#x27;</span>&#125;&#125;</span><br><span class="line"><span class="comment">#$where 高级条件查询 </span></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: &#123;<span class="string">&#x27;$where&#x27;</span>: <span class="string">&#x27;^M.*&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>更详细 <a href="https://docs.mongodb.com/manual/reference/operator/query">https://docs.mongodb.com/manual/reference/operator/query</a></p>
<h6 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h6><p>统计查询结果有多少条，count()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = collection.find().count()</span><br><span class="line"><span class="comment">#或者统计符合某个条件的数据</span></span><br><span class="line">count = collection.find(&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;).count</span><br></pre></td></tr></table></figure>

<h6 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h6><p>sort() 方法，其中传入排序的字段及升降序标志即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = collection.find().sort(<span class="string">&#x27;name&#x27;</span>, pymongo.ASCENDING)</span><br><span class="line">print([result[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">for</span> result <span class="keyword">in</span> results])</span><br><span class="line"><span class="comment">#降序 pymongo.DESCENDING</span></span><br></pre></td></tr></table></figure>

<h6 id="偏移"><a href="#偏移" class="headerlink" title="偏移"></a>偏移</h6><p>只想取某几个元素，利用 skip() 方法偏移几个位置，比如偏移 2 就忽略前两个元素，得到第3个元素</p>
<p>还可利用 limit() 方法限制返回个数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = collection.find().sort(<span class="string">&#x27;name&#x27;</span>, pymongo.ASCENDING).skip(<span class="number">2</span>)</span><br><span class="line">results = collection.find().sort(<span class="string">&#x27;name&#x27;</span>, pymongo.ASCENDING).skip(<span class="number">2</span>).limit(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h6 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h6><p>update() 方法，指定更新的条件和更新后的数据即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collection = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Kevin&#x27;</span>&#125;</span><br><span class="line">student = collection.find_one(condition)</span><br><span class="line">student[<span class="string">&#x27;age&#x27;</span>] = <span class="number">25</span></span><br><span class="line">result = collection.update(collection, student)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment">#先将数据查询出来，修改年龄，调用update更新</span></span><br></pre></td></tr></table></figure>

<p>也可用 $set 操作符更新</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = collection.update(condition, &#123;<span class="string">&#x27;$set&#x27;</span>: student&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><p>delete_one() delete_many()</p>
<h6 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h6><h5 id="5-3-2-Redis-存储"><a href="#5-3-2-Redis-存储" class="headerlink" title="5.3.2 Redis 存储"></a>5.3.2 Redis 存储</h5><p>基于内存的高效的键值型非关系型数据库</p>
<p>redis-py 库提供两个类 Redis 和 StrictRedis 来实现 Redis 的命令操作</p>
<p>官方推荐使用 StrictRedis</p>
<h6 id="连接Redis"><a href="#连接Redis" class="headerlink" title="连接Redis"></a>连接Redis</h6><p>启动服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure>

<p>连接Redis并测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis</span><br><span class="line"><span class="comment">#不传的话这就是4个默认参数</span></span><br><span class="line">redis = StrictRedis(host=<span class="string">&#x27;localhost&#x27;</span>,port=<span class="number">6379</span>,db=<span class="number">0</span>,password=<span class="literal">None</span>)</span><br><span class="line">redis.<span class="built_in">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>)</span><br><span class="line">print(redis.get(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line"><span class="comment">#能打印 b&#x27;Bob&#x27; 说明连接成功，并可执行set()和get()操作了</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>也可用ConnectionPool来测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis,ConnectionPool</span><br><span class="line">pool = ConnectionPool(host=<span class="string">&#x27;localhost&#x27;</span>,port=<span class="number">6379</span>,db=<span class="number">0</span>,password=<span class="literal">None</span>)</span><br><span class="line">redis = StrictRedis(connection_pool=pool)</span><br><span class="line"><span class="comment">#公网访问</span></span><br><span class="line">pool = ConnectionPool(host=<span class="string">&#x27;120.79.222.153&#x27;</span>,port=<span class="number">6379</span>,db=<span class="number">0</span>,password=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>ConnectionPool 还支持通过 URL 来构建</p>
<p>URL 支持的格式有3种</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建Redis TCP连接 Redis+SSL连接 Redis UNIX socket连接</span></span><br><span class="line">redis://[:password]@host:port/db </span><br><span class="line">rediss://[:password]@host:port/db</span><br><span class="line">unix://[:password]@/path/to/socket.sock?db=db</span><br></pre></td></tr></table></figure>

<p>password 部分有则可以写，没有可以省略</p>
<p>使用第一种连接字符串进行连接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">&#x27;redis://@localhost:6379/0&#x27;</span></span><br><span class="line">pool = ConnectionPool.from_url(url)</span><br><span class="line">redis = StrictRedis(connection_pool=pool)</span><br><span class="line">print(redis.get(<span class="string">&#x27;name&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>键操作</p>
<p>键的一些判断和操作方法</p>
<p>字符串操作</p>
<p>Redis支持最基本的键值对形式存储</p>
<p>列表操作</p>
<p>Redis 还提供了列表存储，列表内的元素可以重复，而且可以从两端存储</p>
<p>集合操作</p>
<p>还提供了集合存储，集合中的元素都是不重复的</p>
<p>有序集合操作</p>
<p>有序集合比集合多了一个分数字段，利用它可以对集合中的数据进行排序</p>
<p>散列操作</p>
<p>Redis 还提供了散列表的数据结构，可以用name指定一个散列表的名称，表内存储了各个键值对</p>
<h6 id="Redis-Dump"><a href="#Redis-Dump" class="headerlink" title="Redis Dump"></a>Redis Dump</h6><p>提供了 Redis 数据的导入导出功能</p>
<p>redis-dump 用于导出数据</p>
<p>redis-load 用于导入数据</p>
<h6 id="redis-dump"><a href="#redis-dump" class="headerlink" title="redis-dump"></a>redis-dump</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-dump -h #查看用法</span><br><span class="line">-u #代表Redis连接字符串</span><br><span class="line">-d #代表数据库代号</span><br><span class="line">-s #代表导出之后的休眠时间</span><br><span class="line">-c #代表分块大小 默认10000</span><br><span class="line">-f #代表导出时的过滤器</span><br><span class="line">-0 #代表禁用运行时的优化</span><br><span class="line">-V #显示版本</span><br><span class="line">-D #开启调试</span><br></pre></td></tr></table></figure>

<p>导出命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-dump -u :xxpassword@localhost:6379</span><br><span class="line">#如果没有密码</span><br><span class="line">redis-dump -u localhost:6379</span><br></pre></td></tr></table></figure>

<p>运行之后可以将本地0至15号数据库的所有数据输出</p>
<p>每条数据包含6个字段，db 数据库代号，key 键名，ttl 该键值对的有效时间，type 键值类型，value 内容，size 占用空间</p>
<p>如果想输出 JSON 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-dump -u :xxpassword@localhost:6379 &gt; .&#x2F;redis_data.jl</span><br></pre></td></tr></table></figure>

<p>可以 -d 参数，指定某个数据库导出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-dump -u :xxpassword@localhost:6379 -d 1 &gt; .&#x2F;redis_data.jl</span><br></pre></td></tr></table></figure>

<p>-f 参数过滤，如想导出以 adsl 开头的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-dump -u :xxpassword@localhost:6379 -f adsl:* &gt; .&#x2F;redis_data.jl</span><br></pre></td></tr></table></figure>

<h6 id="redis-load"><a href="#redis-load" class="headerlink" title="redis-load"></a>redis-load</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-load --help</span><br><span class="line">-n #代表不检测UTF-8编码</span><br></pre></td></tr></table></figure>

<p>可以将 JSON 行文件导入到 Redis 数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt; redis_data.json redis-load -u :xxpassword@localhost:6379</span><br><span class="line">#或者</span><br><span class="line">cat redis_data.json | redis-load -u :xxpassword@localhost:6379</span><br></pre></td></tr></table></figure>



















]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-基本库使用</title>
    <url>/2022/04/11/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E5%9F%BA%E6%9C%AC%E5%BA%93%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>urllib、request</p>
<h4 id="3-基本库使用"><a href="#3-基本库使用" class="headerlink" title="3. 基本库使用"></a>3. 基本库使用</h4><h5 id="3-1-urllib"><a href="#3-1-urllib" class="headerlink" title="3.1 urllib"></a>3.1 urllib</h5><p>Python内置 HTTP 请求库，包含4个模块</p>
<ul>
<li>request</li>
</ul>
<p>基本 HTTP 请求模块，用来模拟发送请求</p>
<ul>
<li>error</li>
</ul>
<p>异常处理，如果出现请求错误，可以捕获这些异常</p>
<ul>
<li>parse</li>
</ul>
<p>工具模块，提供了许多 URL 处理方法 如拆分、解析、合并</p>
<ul>
<li>robotparser</li>
</ul>
<p>识别网站 robots.txt 文件，然后判断哪些网站可以爬，实际用的少</p>
<h6 id="3-1-1-发送请求"><a href="#3-1-1-发送请求" class="headerlink" title="3.1.1 发送请求"></a>3.1.1 发送请求</h6><ol>
<li>urlopen() </li>
</ol>
<p>可以完成简单请求和网页抓取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> http.client <span class="keyword">import</span> HTTPResponse</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;https://www.python.org&#x27;</span>) <span class="comment">#type: HTTPResponse</span></span><br><span class="line">print(<span class="built_in">type</span>(response)) //&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">http</span>.<span class="title">client</span>.<span class="title">HTTPResponse</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params">response.read(<span class="params"></span>).decode(<span class="params"><span class="string">&#x27;utf-8&#x27;</span></span>)</span>)</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params">response.status</span>)</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params">response.getheaders(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params">response.getheader(<span class="params"><span class="string">&#x27;Server&#x27;</span></span>)</span>)</span></span><br></pre></td></tr></table></figure>

<p>调用 read 方法可以得到返回的网页内容</p>
<blockquote>
<p>response 敲属性代码没提示，加上类型注释 #type: HTTPResponse</p>
<p>或者使用 isinstance 指定 assert isinstance(response, HTTPResponse)</p>
</blockquote>
<p>urlopen 的参数 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlopen(url, data=<span class="literal">None</span>, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,*, cafile=<span class="literal">None</span>, capath=<span class="literal">None</span>, cadefault=<span class="literal">False</span>, context=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>data参数： 可选，如果是字节流编码格式内容，即 bytes 类型，需要通过 bytes() 方法转换，如果传递了参数则是 POST 方式请求</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> http.client <span class="keyword">import</span> HTTPResponse</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">bytes</span>(urllib.parse.urlencode(&#123;<span class="string">&#x27;word&#x27;</span>: <span class="string">&#x27;hello&#x27;</span>&#125;),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>, data=data) <span class="comment">#type: HTTPResponse</span></span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure>

<p>byte() 方法第一个参数需要 str 类型，需要用 urllib.parse 模块里的 urlencode() 方法将参数字典转化为字符串</p>
<p>站点 <a href="http://httpbin.org/post">http://httpbin.org/post</a>  可以提供 HTTP 请求测试</p>
<p>timeout参数： 超时时间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"><span class="keyword">from</span> http.client <span class="keyword">import</span> HTTPResponse</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = urllib.request.urlopen(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>, timeout=<span class="number">0.1</span>)<span class="comment">#type: HTTPResponse</span></span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(e.reason, socket.timeout):</span><br><span class="line">        print(<span class="string">&#x27;TIME OUT&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>其它参数</li>
</ul>
<p>context 参数：必须是 ssl.SSLContext 类型，用来指定 SSL 设置</p>
<p>cafile 和 capath ：分别指定 CA 证书 和 它的路径，这个在请求 HTTPS 链接时会有用</p>
<ol start="2">
<li>Request</li>
</ol>
<p>如果需要 Headers 等信息，可以利用更加强大的 Resquest 类来构建</p>
<p>利用 Request 可以将请求独立成一个对象，更加丰富的配置参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> http.client <span class="keyword">import</span> HTTPResponse</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(<span class="string">&#x27;https://python.org&#x27;</span>)</span><br><span class="line">response = urllib.request.urlopen(request) <span class="comment">#type: HTTPResponse</span></span><br><span class="line">print(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>Request 参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url, data=<span class="literal">None</span>, headers=&#123;&#125;,origin_req_host=<span class="literal">None</span>, unverifiable=<span class="literal">False</span>,method=<span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>url：必传参数，其它都是可选</p>
<p>data：如果要传，必须传 bytes（字节流）类型的，如果它是字典，先用 urllib.parse 模块里的 urlenode() 编码</p>
<p>headers： 是一个字典，可以在构建请求时通过 headers 直接构建，也可通过调用请求实例的 add_header()方法添加，可以通过修改 User-Agent 来伪装浏览器，默认是 Python-urllib</p>
<p>origin_req_host：请求方 host 名称或 IP 地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.client <span class="keyword">import</span> HTTPResponse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/4.0 (compatible)&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;httpbin.org&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dict</span> = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Germey&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data = <span class="built_in">bytes</span>(urllib.parse.urlencode(<span class="built_in">dict</span>), encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">req = request.Request(url=url, data=data, headers=headers, method=<span class="string">&#x27;POST&#x27;</span>)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line"><span class="comment"># type:HTTPResponse</span></span><br><span class="line">print(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))&#125;</span><br></pre></td></tr></table></figure>

<p>unverifiable：这个请求是否是无法验证的，默认 false，</p>
<p>method：请求方法 POST GET</p>
<p>headers 也可以用 add_header() 方法添加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">req = request.Request(url=url, data=data, method=<span class="string">&#x27;POST&#x27;</span>)</span><br><span class="line">req.add_header(<span class="string">&#x27;User-Agent&#x27;</span>, <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>高级用法</li>
</ol>
<p>更高级的操作（Cookie处理、设置代理）该怎么操作？使用 Handler，可以理解为各种处理器</p>
<p>urllib.request 模块里的 BaseHandler 类是所有 Handler 的父类</p>
<p>子类：</p>
<p>HTTPDefaultErrorHandler：处理 HTTP 响应错误，错误会抛出 HTTPError 类型异常</p>
<p>HTTPRedirectHandler：用于处理重定向</p>
<p>HTTPCookieProcessor：用于处理 Cookies</p>
<p>ProxyHandler：用于设置代理</p>
<p>HTTPPasswordMgr：用于管理密码</p>
<p>HTTPBasicAuthHandler：用于管理认证，如果一个链接打开时需要认证，可以用它来解决认证问题</p>
<p>OpenerDirector：可以称为 Opener，可以利用 Handler 来构建 Opener</p>
<p>用法：登录验证、代理、Cookie</p>
<h6 id="3-1-2-处理异常"><a href="#3-1-2-处理异常" class="headerlink" title="3.1.2 处理异常"></a>3.1.2 处理异常</h6><ol>
<li>URLError</li>
</ol>
<p>由 request 模块生成的异常都可以通过捕获这个类来处理，有一个 reason 属性，返回错误的原因</p>
<p>例子：打开一个不存在的页面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,error</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = request.urlopen(<span class="string">&#x27;https://cuiqingcai.com/index.htm&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>HTTPError</li>
</ol>
<p>URLError 的子类，专门用来处理 HTTP 请求错误，比如认证失败，有3个属性，code，reason，headers</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.code, e.reason, e.headers, seq=<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>URLError 是 HTTPError 的父类，所以先捕获子类错误再捕获父类错误</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.code, e.reason, e.headers, seq=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;success&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>reason 返回的不一定是字符串，也可能是一个对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,error</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">...</span><br><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">  print(<span class="built_in">type</span>(e.reason))</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">isinstance</span>(e.reason, socket.timeout):</span><br><span class="line">    print(<span class="string">&#x27;TIME OUT&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h6 id="3-1-3-解析链接"><a href="#3-1-3-解析链接" class="headerlink" title="3.1.3 解析链接"></a>3.1.3 解析链接</h6><p>urllib 库还提供了 parse 模块，定义了处理 URL 的标准接口，例如实现 URL 各部分的抽取、合并及链接转换</p>
<ol>
<li>urlparse()</li>
</ol>
<p>实现 URL 的识别和分段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line">result = urlparse(<span class="string">&#x27;http://www.baidu.com/index.html;user?id=s#comment&#x27;</span>)</span><br><span class="line">print(<span class="built_in">type</span>(result), result)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">urllib</span>.<span class="title">parse</span>.<span class="title">ParseResult</span>&#x27;&gt; </span></span><br><span class="line"><span class="class"><span class="title">ParseResult</span>(<span class="params">scheme=<span class="string">&#x27;http&#x27;</span>, netloc=<span class="string">&#x27;www.baidu.com&#x27;</span>, path=<span class="string">&#x27;/index.html&#x27;</span>, params=<span class="string">&#x27;user&#x27;</span>, query=<span class="string">&#x27;id=s&#x27;</span>, fragment=<span class="string">&#x27;comment&#x27;</span></span>)</span></span><br></pre></td></tr></table></figure>

<p>输出结果是 ParseResult 类型，包含 6 个部分，scheme、netloc、path、params、query、fragment</p>
<p>可以用索引顺序来获取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(result.scheme, result[<span class="number">0</span>], result.netloc, result[<span class="number">1</span>], sep=<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>#</code> 后面是锚点，用于直接定位页面内部的下拉位置</p>
<p>urlparse() 有3个参数：urlstring、scheme、allow_fragments</p>
<p>scheme：http或https等 urlstring中不包含 scheme 信息时才生效</p>
<p>allow_fragments：如果被设置为 false，fragment 部分就会被忽略</p>
<ol start="2">
<li>urlunparse()</li>
</ol>
<p>参数是一个可迭代对象，长度必须是6，构造URL</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunparse</span><br><span class="line">data = [<span class="string">&#x27;http&#x27;</span>,<span class="string">&#x27;www.baidu.com&#x27;</span>,<span class="string">&#x27;index.html&#x27;</span>,<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;a=6&#x27;</span>,<span class="string">&#x27;comment&#x27;</span>]</span><br><span class="line">print(urlunparse(data))</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">http://www.baidu.com/index.html;user?a=6#comment</span><br><span class="line"><span class="comment">#这里data用了列表类型，也可以用其它类型比如元组或者特定的数据结构</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>urlsplit()</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlsplit</span><br><span class="line">result = urlsplit(<span class="string">&#x27;http://www.baidu.com/index.html;user?id=s#comment&#x27;</span>)</span><br><span class="line">print(<span class="built_in">type</span>(result), result)</span><br></pre></td></tr></table></figure>

<p>和 urlparse 使用类似，不过不再单独解析 params 部分，只返回 5个 结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">urllib</span>.<span class="title">parse</span>.<span class="title">SplitResult</span>&#x27;&gt; <span class="title">SplitResult</span>(<span class="params">scheme=<span class="string">&#x27;http&#x27;</span>, netloc=<span class="string">&#x27;www.baidu.com&#x27;</span>, path=<span class="string">&#x27;/index.html;user&#x27;</span>, query=<span class="string">&#x27;id=s&#x27;</span>, fragment=<span class="string">&#x27;comment&#x27;</span></span>)</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>urlunsplit()</li>
</ol>
<p>将链接各个部分组合成完成链接，传入参数是一个可迭代对象，如列表、元组，长度必须是5</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunsplit</span><br><span class="line">data = [<span class="string">&#x27;http&#x27;</span>,<span class="string">&#x27;www.baidu.com&#x27;</span>,<span class="string">&#x27;index.html&#x27;</span>,<span class="string">&#x27;a=6&#x27;</span>,<span class="string">&#x27;comment&#x27;</span>]</span><br><span class="line">print(urlunsplit(data))</span><br><span class="line"><span class="comment">#http://www.baidu.com/index.html?a=6#comment</span></span><br></pre></td></tr></table></figure>



<ol start="5">
<li>urljoin()</li>
</ol>
<p>urlunparse 和 urlunsplit 我们可以完成链接的合并，不过必须有特定的长度，链接的每一部分都要清晰的分开</p>
<p>生成链接还有个方法 urljoin() 方法</p>
<p>可以提供一个 base_url 基础链接作为第一个参数，将新的链接作为第二个参数</p>
<p>该方法会分析 base_url 的 scheme、netloc、和path 这3个内容对新链接缺失的部分进行补充</p>
<p>实现连接拼合与生成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"></span><br><span class="line">print(urljoin(<span class="string">&#x27;http://www.baidu.com&#x27;</span>, <span class="string">&#x27;FAQ.html&#x27;</span>))</span><br><span class="line">print(urljoin(<span class="string">&#x27;http://www.baidu.com&#x27;</span>, <span class="string">&#x27;https://cuiqingcai.com/FAQ.html&#x27;</span>))</span><br><span class="line">print(urljoin(<span class="string">&#x27;http://www.baidu.com/about.html&#x27;</span>, <span class="string">&#x27;https://cuiqingcai.com/FAQ.html&#x27;</span>))</span><br><span class="line">print(urljoin(<span class="string">&#x27;http://www.baidu.com/about.html&#x27;</span>, <span class="string">&#x27;https://cuiqingcai.com/FAQ.html?question=2&#x27;</span>))</span><br><span class="line">print(urljoin(<span class="string">&#x27;http://www.baidu.com?wd=abc&#x27;</span>, <span class="string">&#x27;https://cuiqingcai.com/index.php&#x27;</span>))</span><br><span class="line">print(urljoin(<span class="string">&#x27;http://www.baidu.com&#x27;</span>, <span class="string">&#x27;?category=2#comment&#x27;</span>))</span><br><span class="line">print(urljoin(<span class="string">&#x27;www.baidu.com&#x27;</span>, <span class="string">&#x27;?category=2#comment&#x27;</span>))</span><br><span class="line">print(urljoin(<span class="string">&#x27;www.baidu.com#comment&#x27;</span>, <span class="string">&#x27;?category=2&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://www.baidu.com/FAQ.html</span><br><span class="line">https://cuiqingcai.com/FAQ.html</span><br><span class="line">https://cuiqingcai.com/FAQ.html</span><br><span class="line">https://cuiqingcai.com/FAQ.html?question=2</span><br><span class="line">https://cuiqingcai.com/index.php</span><br><span class="line">http://www.baidu.com?category=2#comment</span><br><span class="line">www.baidu.com?category=2#comment</span><br><span class="line">www.baidu.com?category=2</span><br></pre></td></tr></table></figure>

<p>base_url 提供了三项内容 scheme、netloc、path</p>
<p>如果3项在新链接不存在就补充，新链接存在就使用新链接部分，base_url 里的就不起作用了，以右边新链接为准</p>
<ol start="6">
<li>urlencode()</li>
</ol>
<p>将字典序列化为 GET 请求参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line">base_url = <span class="string">&#x27;http://www.baidu.com?&#x27;</span></span><br><span class="line">url = base_url + urlencode(params)</span><br><span class="line">print(url)</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>parse_qs()</li>
</ol>
<p>将请求参数反序列化成字典类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qs</span><br><span class="line">query = <span class="string">&#x27;name=germey&amp;age=22&#x27;</span></span><br><span class="line">print(parse_qs(query))</span><br><span class="line"><span class="comment">#结果 &#123;&#x27;name&#x27;:[&#x27;germey&#x27;],&#x27;age&#x27;:[&#x27;22&#x27;]&#125;</span></span><br></pre></td></tr></table></figure>



<ol start="7">
<li>parse_sql()</li>
</ol>
<p>将参数转化成元组组成的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qsl</span><br><span class="line">query = <span class="string">&#x27;name=germey&amp;age=2&#x27;</span></span><br><span class="line">print(parse_qsl(query))</span><br><span class="line"><span class="comment">#结果 [(&#x27;name&#x27;, &#x27;germey&#x27;), (&#x27;age&#x27;, &#x27;2&#x27;)]</span></span><br></pre></td></tr></table></figure>

<ol start="8">
<li>quote()</li>
</ol>
<p>将内容转化为 URL 编码格式，URL 中带中文参数时，可能导致乱码问题，用这个可以将中文字符转化为 URL 编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">keyword = <span class="string">&#x27;测试&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;https://baidu.com/s?wd=&#x27;</span> + quote(keyword)</span><br><span class="line"><span class="comment">#结果：https://baidu.com/s?wd=%E5%joj</span></span><br></pre></td></tr></table></figure>

<ol start="9">
<li>unquote()</li>
</ol>
<p>可以进行 URL 解码</p>
<h6 id="3-1-4-分析-Robots-协议"><a href="#3-1-4-分析-Robots-协议" class="headerlink" title="3.1.4 分析 Robots 协议"></a>3.1.4 分析 Robots 协议</h6><p>urllib 的 robotparser 模块，可以实现网站 Robots 协议的分析</p>
<ol>
<li>Robots 协议</li>
</ol>
<p>爬虫协议，全名叫网络爬虫排除标准，告诉爬虫和搜索引擎哪些页面可以抓取不抓取，通常是一个 robots.txt 协议</p>
<ol start="2">
<li>robotparser</li>
</ol>
<p>了解 Robots 协议之后，就可以使用 robotparse 模块来解析 robots.txt 了，该模块提供了一个类 RobotFileParse，它可以根据某网站的 robots.txt 文件来判断一个爬虫是否有权限来爬取这个网页</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotFileParser</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line">rp = RobotFileParser()</span><br><span class="line">rp.set_url(<span class="string">&#x27;https://www.jianshu.com/robots.txt&#x27;</span>)</span><br><span class="line">rp.read()</span><br><span class="line"><span class="comment">#判断网页是否可以被抓取</span></span><br><span class="line">print(rp.can_fetch(<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;https://www.jianshu.com/p/823596514412&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>常用几个方法：</p>
<p>set_url()：设置 robots.txt 文件的链接</p>
<p>read()：读取 robots.txt 文件并进行分享，不会返回任何内容，但执行了读取操作</p>
<p>parse()：用来解析 robots.txt 文件，传入的参数是 robots.txt 某些行的内容</p>
<p>can_fetch()：两个参数，第一个 User-agent，第二个要抓取的URL，返回该搜索引擎是否可以抓取这个URL</p>
<p>mtime()：返回上次抓取和分析 robots.txt 时间</p>
<h5 id="3-2-使用-Request"><a href="#3-2-使用-Request" class="headerlink" title="3.2 使用 Request"></a>3.2 使用 Request</h5><h6 id="3-2-1-基本用法"><a href="#3-2-1-基本用法" class="headerlink" title="3.2.1 基本用法"></a>3.2.1 基本用法</h6><ul>
<li>GET 请求</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)</span><br><span class="line">print(<span class="built_in">type</span>(r))</span><br><span class="line">print(r.status_code)</span><br><span class="line">print(<span class="built_in">type</span>(r.text))</span><br><span class="line">print(r.text)</span><br><span class="line">print(r.cookies)</span><br></pre></td></tr></table></figure>

<p>调用 get() 方法实现与 urlopen 相同的操作，得到一个 Response 对象</p>
<p>带参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  requests</span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>, params=params)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

<p>网页的返回类型实际上是 str 类型，JSON格式的，想得到字典格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(r.json())</span><br></pre></td></tr></table></figure>

<p>如果返回结果不是 JSON 格式，会出现解析错误，抛出 json.decoder.JSONDecodeError 异常</p>
<ul>
<li>抓取二进制数据</li>
</ul>
<p>图片、音频、视频这些文件本质上都是二进制码组成</p>
<p>提取图片保存下来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://github.com/favicon.ico&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;vavicon.ico&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f: <span class="comment">#wb写入</span></span><br><span class="line">    f.write(r.content)</span><br><span class="line"><span class="comment">#调用了open方法，第一个参数文件名，第二个参数代表以二进制写的形式打开，可以向文件写入二进制数据</span></span><br></pre></td></tr></table></figure>

<ul>
<li> POST 请求</li>
</ul>
<h6 id="3-2-2-高级用法"><a href="#3-2-2-高级用法" class="headerlink" title="3.2.2 高级用法"></a>3.2.2 高级用法</h6><ol>
<li>文件上传</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;favicon.ico&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125; <span class="comment">#rb读取</span></span><br><span class="line">r = requests.post(<span class="string">&#x27;https://httpbin.org/post&#x27;</span>, files=files)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Cookies</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">print(r.cookies)<span class="comment">#RequestsCookieJar</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> r.cookies.items():</span><br><span class="line">    print(key+<span class="string">&#x27;=&#x27;</span>+value)</span><br></pre></td></tr></table></figure>

<p>模拟Cookies，放 headers里面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">	<span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">  <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r = request.get(<span class="string">&#x27;https://xxxx&#x27;</span>, headers=headers)</span><br></pre></td></tr></table></figure>

<p>也可以通过 cookies 参数来设置，不过需要构建 RequestsCookieJar对象，然后复制下来的 cookies 利用 split 方法分割，再利用 set 方法设置好每个 Cookie 的 key 和 value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cookies = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">jar = requests.cookies.RequestsCookieJar()</span><br><span class="line"><span class="keyword">for</span> cookies <span class="keyword">in</span> cookies.split(<span class="string">&#x27;;&#x27;</span>):</span><br><span class="line">  key, value = cookie.split(<span class="string">&#x27;=&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">  jar.<span class="built_in">set</span>(key, value)</span><br><span class="line">r = request.get(<span class="string">&#x27;https://xxxx&#x27;</span>, cookies=jar)</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>会话维持</li>
</ol>
<p>方便维持一个会话，不用担心 cookies 问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests.get(<span class="string">&#x27;http://httpbin.org/cookies/set/number/123456&#x27;</span>)<span class="comment">#请求这个网址时可以设置一个cookie</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://httpbin.org/cookies&#x27;</span>)</span><br><span class="line">print(r.text)</span><br><span class="line"><span class="comment">#结果&#123;&quot;cookies&quot;: &#123;&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>上面是两个不相关的会话，第一个设置了 cookies，第二个 cookies 为空</p>
<p>使用 session</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = requests.session()</span><br><span class="line">s.get(<span class="string">&#x27;http://httpbin.org/cookies/set/number/123456&#x27;</span>)</span><br><span class="line">r = s.get(<span class="string">&#x27;http://httpbin.org/cookies&#x27;</span>)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

<p>成功获取，两个请求在同一会话，不用担心 cookies 问题</p>
<p>通常用于模拟登录成功之后再进行下一步的操作</p>
<ol start="4">
<li>SSL 证书验证</li>
</ol>
<p>请求一个 HTTPS 站点，但证书验证错误的页面，会报 SSLError 错误，如何避免这个错误？</p>
<p>request 提供了证书验证的功能，使用 verify 参数控制是否检查证书</p>
<p>将 verify 参数设置为 False 即可</p>
<p>当然也可以指定本地证书用作客户端证书，这可以是单个文件（包含秘钥和证书）或一个包含两个文件路径的元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = requests.get(<span class="string">&#x27;https://www.12306.cn&#x27;</span>, cert=(<span class="string">&#x27;/path/server.crt&#x27;</span>, <span class="string">&#x27;/path/key&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>上面的例子，我们需要有 crt 和 key 文件，且指定路径。本地私有证书的key必须是解密状态</p>
<ol start="5">
<li>代理设置</li>
</ol>
<p>某些网站测试请求几次能正常获取，一旦大规模爬取，网站可能会弹出验证码或跳转登录页面内</p>
<p>用代理来解决这个问题，就要用到 proxies 参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://10.10.1.10:3128&quot;</span>,</span><br><span class="line">  <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://10.10.1.10:1080&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">request.get(<span class="string">&quot;https://www.taobao.com&quot;</span>, proxiex=proxies)</span><br></pre></td></tr></table></figure>

<p>若代理需要使用 HTTP Basic Auth，可以使用类似 <a href="http://user:pasword@host:port">http://user:pasword@host:port</a> 这样的语法来设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxiex = &#123;</span><br><span class="line">	<span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://user:password@10.10.1.10:3128&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了 HTTP 代理外，request 还支持 SOCKS 协议的代理</p>
<p>需要安装 socks 这个库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install <span class="string">&#x27;requests[socks]&#x27;</span></span><br></pre></td></tr></table></figure>



<ol start="6">
<li>超时设置</li>
</ol>
<p>timeout 参数</p>
<ol start="7">
<li>身份认证</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://xxx&#x27;</span>, auth=HTTPBasicAuth(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>))</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure>

<p>如果用户名和密码正确，请求会自动认证成功返回200，错误401</p>
<p>也可以传一个元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;http://xxx&#x27;</span>, auth=(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>还提供了其它认证方式，如 OAuth，需要安装 oauth 包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install requests_oauthlib</span><br></pre></td></tr></table></figure>





<ol start="8">
<li>Prepared Request</li>
</ol>
<p>介绍 urllib 时，可以将请求表示为数据结构，各个参数通过一个 Request 对象来表示。这里 requests 也可以做到，这个数据结构叫 Prepared Request</p>
<p>有了 Request 这个对象，就可以将请求当作独立的对象来看待，这样在队列调度时会非常方便</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> requests.sessions <span class="keyword">import</span> Session</span><br><span class="line">s = Session()</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://xxx&#x27;</span>)</span><br><span class="line">prepped = s.prepare_request(r)</span><br><span class="line">r = s.send(prepped)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

<p>调用 Session 的 prepare_request 方法将其转换为一个 Prepared Request 对象，然后调用 send 方法发送即可</p>
<h5 id="3-3-正则表达式"><a href="#3-3-正则表达式" class="headerlink" title="3.3 正则表达式"></a>3.3 正则表达式</h5><p>正则表达式测试工具 <a href="http://tool.oschina.net/regex/">http://tool.oschina.net/regex/</a></p>
<h5 id="3-4-抓取猫眼电影排行"><a href="#3-4-抓取猫眼电影排行" class="headerlink" title="3.4 抓取猫眼电影排行"></a>3.4 抓取猫眼电影排行</h5><p>(爬不了了有滑块验证)</p>
<p>书本配套代码 <a href="https://github.com/Python3WebSpider/MaoYan">https://github.com/Python3WebSpider/MaoYan</a></p>
<p>排行链接  <a href="https://maoyan.com/board/4">https://maoyan.com/board/4</a></p>
<p>第二页链接  <a href="https://maoyan.com/board/4?offset=10">https://maoyan.com/board/4?offset=10</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one_page</span>(<span class="params">url</span>):</span></span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		headers = &#123;</span><br><span class="line">			<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_10; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&#x27;</span></span><br><span class="line">		&#125;</span><br><span class="line">		response = requests.get(url, headers=headers)</span><br><span class="line">		<span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">			<span class="keyword">return</span> response.text</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">	<span class="keyword">except</span> RequestException:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	url = <span class="string">&#x27;https://maoyan.com/board/4&#x27;</span></span><br><span class="line">	html = get_one_page(url)</span><br><span class="line">	print(html)</span><br></pre></td></tr></table></figure>

<p>可以通过浏览器查看源码，选择网络查看原始请求部分</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;board-index board-index-1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/films/1200486&quot;</span> <span class="attr">title</span>=<span class="string">&quot;我不是药神&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-link&quot;</span> <span class="attr">data-act</span>=<span class="string">&quot;boarditem-click&quot;</span> <span class="attr">data-val</span>=<span class="string">&quot;&#123;movieId:1200486&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;//s3plus.meituan.net/v1/mss_e2821d7f0cfe4ac1bf9202ecf9590e67/cdn-prod/file:5788b470/image/loading_2.e3d934bf.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;poster-default&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;https://p0.meituan.net/movie/414176cfa3fea8bed9b579e9f42766b9686649.jpg@160w_220h_1e_1c&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;我不是药神&quot;</span> <span class="attr">class</span>=<span class="string">&quot;board-img&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;board-item-main&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;board-item-content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;movie-item-info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/films/1200486&quot;</span> <span class="attr">title</span>=<span class="string">&quot;我不是药神&quot;</span> <span class="attr">data-act</span>=<span class="string">&quot;boarditem-click&quot;</span> <span class="attr">data-val</span>=<span class="string">&quot;&#123;movieId:1200486&#125;&quot;</span>&gt;</span>我不是药神<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;star&quot;</span>&gt;</span>主演：徐峥,周一围,王传君<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;releasetime&quot;</span>&gt;</span>上映时间：2018-07-05<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;movie-item-number score-num&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;score&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;integer&quot;</span>&gt;</span>9.<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fraction&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>        </span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一部电影信息对应源码是一个 dd 节点</p>
<p>先获取排行信息，在 class 为 board-index 的 i 节点内，提取 i 节点内的信息</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;</span><br></pre></td></tr></table></figure>

<p>图片信息：dd 后面有个 a 节点，内部有两个 img 节点，第二个 img 节点的 data-src 属性是图片的链接，提取第二个 img 节点 data-sr 属性</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src=&quot;(.*?)&quot;</span><br></pre></td></tr></table></figure>

<p>电影名称：后面 p 节点内， class 为 name</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src=&quot;(.*?)&quot;.*?name.*?&gt;(.*?)&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>findall 提取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src=&quot;(.*?)&quot;.*?name.*?&gt;(.*?)&lt;/a&gt;&#x27;</span>, re.S)</span><br><span class="line">items = re.findall(pattern, html)</span><br><span class="line">print(items)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;https://p0.meituan.net/movie/414176cfa3fea8bed9b579e9f42766b9686649.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/1200486&quot; title=&quot;我不是药神&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:1200486&#125;&quot;&gt;我不是药神&#x27;</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;https://p0.meituan.net/movie/8112a8345d7f1d807d026282f2371008602126.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/1297&quot; title=&quot;肖申克的救赎&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:1297&#125;&quot;&gt;肖申克的救赎&#x27;</span>), (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;https://p1.meituan.net/movie/c9b280de01549fcb71913edec05880585769972.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/1206605&quot; title=&quot;绿皮书&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:1206605&#125;&quot;&gt;绿皮书&#x27;</span>), (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;https://p0.meituan.net/movie/609e45bd40346eb8b927381be8fb27a61760914.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/1292&quot; title=&quot;海上钢琴师&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:1292&#125;&quot;&gt;海上钢琴师&#x27;</span>), (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;https://p1.meituan.net/movie/ac8f0004928fbce5a038a007b7c73cec746794.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/1216365&quot; title=&quot;小偷家族&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:1216365&#125;&quot;&gt;小偷家族&#x27;</span>), (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;https://p0.meituan.net/movie/61fea77024f83b3700603f6af93bf690585789.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/1203&quot; title=&quot;霸王别姬&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:1203&#125;&quot;&gt;霸王别姬&#x27;</span>), (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;https://p0.meituan.net/movie/005955214d5b3e50c910d7a511b0cb571445301.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/1211270&quot; title=&quot;哪吒之魔童降世&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:1211270&#125;&quot;&gt;哪吒之魔童降世&#x27;</span>), (<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;https://p1.meituan.net/movie/580d81a2c78bf204f45323ddb4244b6c6821175.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/1303&quot; title=&quot;美丽人生&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:1303&#125;&quot;&gt;美丽人生&#x27;</span>), (<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;https://p1.meituan.net/movie/6bea9af4524dfbd0b668eaa7e187c3df767253.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/4055&quot; title=&quot;这个杀手不太冷&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:4055&#125;&quot;&gt;这个杀手不太冷&#x27;</span>), (<span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;https://p0.meituan.net/moviemachine/c2496a7290a72eac6081321898c347693550574.jpg@160w_220h_1e_1c&#x27;</span>, <span class="string">&#x27;&lt;a href=&quot;/films/416&quot; title=&quot;盗梦空间&quot; data-act=&quot;boarditem-click&quot; data-val=&quot;&#123;movieId:416&#125;&quot;&gt;盗梦空间&#x27;</span>)]</span><br></pre></td></tr></table></figure>

<p>写入文件</p>
<p>通过 JSON库的 dumps() 方法实现字典的序列化，ensure_ascii 为 False，保证输出结果是中文形式而不是 Unicode 编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_file</span>(<span class="params">content</span>):</span></span><br><span class="line">	<span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f: <span class="comment">#a appending追加写入</span></span><br><span class="line">		print(<span class="built_in">type</span>(json.dumps(content)))</span><br><span class="line">		f.write(json.dumps(content, ensure_ascii=<span class="literal">False</span>)+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>分页爬取：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">offset</span>):</span></span><br><span class="line">	url = <span class="string">&#x27;https://maoyan.com/board/4?offset=&#x27;</span> + <span class="built_in">str</span>(offset) </span><br><span class="line">	html = get_one_page(url)</span><br><span class="line">	pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src=&quot;(.*?)&quot;.*?name.*?&gt;(.*?)&lt;/a&gt;&#x27;</span>, re.S)</span><br><span class="line">	items = re.findall(pattern, html)</span><br><span class="line">	print(items)</span><br><span class="line">	write_to_file(items)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">		main(offset=i*<span class="number">10</span>)</span><br><span class="line">		time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-解析库使用</title>
    <url>/2022/04/11/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E8%A7%A3%E6%9E%90%E5%BA%93%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="4-解析库使用"><a href="#4-解析库使用" class="headerlink" title="4. 解析库使用"></a>4. 解析库使用</h4><h5 id="4-1-XPath"><a href="#4-1-XPath" class="headerlink" title="4.1 XPath"></a>4.1 XPath</h5><p>更多XPath用法 <a href="http://www.w3school.com.cn/xpath/index.asp">http://www.w3school.com.cn/xpath/index.asp</a></p>
<p>XML 路径语言</p>
<ul>
<li>常用规则</li>
</ul>
<table>
<thead>
<tr>
<th>nodename</th>
<th align="left">选取此节点的所有子节点</th>
</tr>
</thead>
<tbody><tr>
<td>/</td>
<td align="left">从当前节点选取直接子节点</td>
</tr>
<tr>
<td>//</td>
<td align="left">从当前节点选取子孙节点</td>
</tr>
<tr>
<td>.</td>
<td align="left">选取当前节点</td>
</tr>
<tr>
<td>..</td>
<td align="left">选取当前节点的父节点</td>
</tr>
<tr>
<td>@</td>
<td align="left">选取属性</td>
</tr>
</tbody></table>
<p>例如：所有名称为 title，同时属性 lang 的值为 eng 的节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;title[@lang&#x3D;&#39;eng&#39;]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = etree.tostring(html) <span class="comment"># type: bytes</span></span><br><span class="line">print(result.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>导入 lxml 库的 etree 模块，声明一段 HTML 文本，调用 HTML 类进行初始化，这样就成功构造了一个 XPath 解析对象</p>
<p>HTML 文件最后一个 li 节点是没有闭合的，但 etree 模块可以自动修正 HTML 文本，处理后 li 节点被补全，还自动添加了 body、html 节点</p>
<p>toString 输出修正后的 HTML 代码，结果是 bytes 类型，利用 decode 转成 str 类型</p>
<p>也可读取文本进行解析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = etree.parse(<span class="string">&#x27;./test.html&#x27;</span>, etree.HTMLParser())</span><br></pre></td></tr></table></figure>

<h6 id="所有结点"><a href="#所有结点" class="headerlink" title="所有结点"></a>所有结点</h6><p>一般用// 开头的 XPath 规则来选取所有符合要求的节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> lxml.etree <span class="keyword">import</span> _Element</span><br><span class="line">text = <span class="string">&#x27;xxxxx&#x27;</span></span><br><span class="line">html = etree.HTML(text) <span class="comment"># type: _Element</span></span><br><span class="line">result = html.xpath(<span class="string">&#x27;//*&#x27;</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>html.xpath 代码没提示，可以先打印类型 print(type(html)) -&gt; &lt;class ‘lxml.etree._Element’&gt;</p>
<p>再通过导包的方式</p>
</blockquote>
<p>返回形式是一个列表，每个元素是 Element 类型，其后跟了节点的名称，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[&lt;Element html at <span class="number">0x7f8f63e97280</span>&gt;, &lt;Element body at <span class="number">0x7f8f63f225c0</span>&gt;, &lt;Element div at <span class="number">0x7f8f63f22b40</span>&gt;, &lt;Element ul at <span class="number">0x7f8f63f22b80</span>&gt;, &lt;Element li at <span class="number">0x7f8f63f22bc0</span>&gt;, &lt;Element a at <span class="number">0x7f8f63f22c40</span>&gt;, &lt;Element li at <span class="number">0x7f8f63f22c80</span>&gt;, &lt;Element a at <span class="number">0x7f8f63f22cc0</span>&gt;, &lt;Element li at <span class="number">0x7f8f63f22d00</span>&gt;, &lt;Element a at <span class="number">0x7f8f63f22c00</span>&gt;, &lt;Element li at <span class="number">0x7f8f63f22d40</span>&gt;, &lt;Element a at <span class="number">0x7f8f63f22d80</span>&gt;, &lt;Element li at <span class="number">0x7f8f63f22dc0</span>&gt;, &lt;Element a at <span class="number">0x7f8f63f22e00</span>&gt;]</span><br></pre></td></tr></table></figure>

<p>也可指定节点名称</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = html.xpath(<span class="string">&#x27;//li&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h6><p>/ 或 // 查找元素的子节点或子孙节点</p>
<p>例如：选择 li 节点的所有直接 a 子节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = html.xpath(<span class="string">&#x27;//li/a&#x27;</span>) </span><br></pre></td></tr></table></figure>

<p>ul 节点下的所有子孙 a 节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = html.xpath(<span class="string">&#x27;//ul//a&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="父节点"><a href="#父节点" class="headerlink" title="父节点"></a>父节点</h6><p>href 属性为 link4.html 的 a 节点，然后再获取其父结点，然后再获取其 class 属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = html.xpath(<span class="string">&#x27;//a[@href=&quot;link4.html&quot;]/../@class&#x27;</span>)</span><br><span class="line"><span class="comment">#结果：item-1</span></span><br></pre></td></tr></table></figure>

<p>也可以通过 parent:: 获取父节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = html.xpath(<span class="string">&#x27;//a[@href=link4.html/parent::*/@class]&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="属性匹配"><a href="#属性匹配" class="headerlink" title="属性匹配"></a>属性匹配</h6><p>@ 符号进行属性过滤，如果选取 class 为 item-1 的 li 节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = html.xpath(<span class="string">&#x27;//li[@class=&#x27;</span>item<span class="number">-1</span><span class="string">&#x27;]&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="文本获取"><a href="#文本获取" class="headerlink" title="文本获取"></a>文本获取</h6><p>text() 方法获取节点中的文本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先选取a节点再获取文本</span></span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[@class=&quot;item-0&quot;]/a/text()&#x27;</span>)</span><br><span class="line">结果：[<span class="string">&#x27;first item&#x27;</span>, <span class="string">&#x27;fifth item&#x27;</span>]</span><br><span class="line"><span class="comment">#或者使用//</span></span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[@class=&quot;item-0&quot;]//text()&#x27;</span>)</span><br><span class="line">结果：[<span class="string">&#x27;first item&#x27;</span>, <span class="string">&#x27;fifth item&#x27;</span>, <span class="string">&#x27;\n  \t&#x27;</span>] <span class="comment">#因为自动修正的尾标签换行了</span></span><br></pre></td></tr></table></figure>

<p>如果想获取某些特定子孙节点下的所有文本，可以先选取到特定的子孙节点，再调用 text()</p>
<h6 id="属性获取"><a href="#属性获取" class="headerlink" title="属性获取"></a>属性获取</h6><p>获取 li 节点下所有 a 节点的 href 属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = html.xpath(<span class="string">&#x27;//li/a/@href&#x27;</span>)</span><br><span class="line">结果</span><br><span class="line">[<span class="string">&#x27;link1.html&#x27;</span>, <span class="string">&#x27;link2.html&#x27;</span>, <span class="string">&#x27;link3.html&#x27;</span>, <span class="string">&#x27;link4.html&#x27;</span>, <span class="string">&#x27;link5.html&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h6 id="属性多值匹配"><a href="#属性多值匹配" class="headerlink" title="属性多值匹配"></a>属性多值匹配</h6><p>某些节点的属性可能有多个值</p>
<p>下面 html 中 li 节点的 class 属性有两个值 li 和 li-list，就需要用到 cantains() 函数了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;li li-first&quot;&gt;&lt;a href=&quot;link.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[contains(@class, &quot;li&quot;)]/a/text()&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="多属性匹配"><a href="#多属性匹配" class="headerlink" title="多属性匹配"></a>多属性匹配</h6><p>多个属性确定一个节点，就需要同事匹配多个属性，可以使用 and 连接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;li li-first&quot; name=&quot;item&quot;&gt;&lt;a href=&quot;link.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[contains(@class, &quot;li&quot;) and @name=&quot;item&quot;]/a/text()&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>运算符：</li>
</ul>
<table>
<thead>
<tr>
<th>or、and</th>
<th>或、与</th>
</tr>
</thead>
<tbody><tr>
<td>+、-、*、div、mod</td>
<td>加、减、乘、除、除法余数</td>
</tr>
<tr>
<td>&gt;、=、&lt;、!=、&gt;=、&lt;=</td>
<td>大于、等于、小于、不等于、大于等于、小于等于</td>
</tr>
</tbody></table>
<h6 id="按序选择"><a href="#按序选择" class="headerlink" title="按序选择"></a>按序选择</h6><p>有时候匹配了多个节点，只想要其中某个节点</p>
<p>可以利用中括号传入索引的方法获取特定次序的节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = html.xpath(<span class="string">&#x27;//li[1]/a/text()&#x27;</span>)  <span class="comment">#第一个li节点 </span></span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[last()]/a/text()&#x27;</span>) <span class="comment">#最后一个li节点</span></span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[position()&lt;3]/a/text()&#x27;</span>)<span class="comment">#位置小于3的li节点</span></span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[last()-2]/a/text()&#x27;</span>) <span class="comment">#倒数第3个节点</span></span><br></pre></td></tr></table></figure>

<p>Xpath 中提供了 100 多个函数，具体参考 <a href="http://www.w3school.com.en/xpath/xpath_functions.asp">http://www.w3school.com.en/xpath/xpath_functions.asp</a></p>
<h6 id="节点轴选择"><a href="#节点轴选择" class="headerlink" title="节点轴选择"></a>节点轴选择</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//获取所有祖先节点</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[1]/ancestor::*&#x27;</span>)</span><br><span class="line">//获取所有 div 的祖先节点</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[1]/ancestor::div&#x27;</span>)</span><br><span class="line">//获取 li 节点所有属性值</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[1]/attribute::*&#x27;</span>)</span><br><span class="line">//获取直接字节点，取 href 属性为 link.html 的 a 节点</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[1]/child::a[@href=&quot;link1.html&quot;]&#x27;</span>)</span><br><span class="line">//获取子孙节点，取包含 span 节点</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[1]/descendant::span&#x27;</span>)</span><br><span class="line">//获取当前节点之后所有节点，只获取第二个后续节点</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[1]/following::*[2]&#x27;</span>)</span><br><span class="line">//获取当前节点之后的所有同级节点</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[1]/following-sibling::*&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>XPath 轴 <a href="http://www.w3school.com.cn/xpath/xpath_axes.asp">http://www.w3school.com.cn/xpath/xpath_axes.asp</a></p>
<h5 id="4-2-Beautiful-Soup"><a href="#4-2-Beautiful-Soup" class="headerlink" title="4.2 Beautiful Soup"></a>4.2 Beautiful Soup</h5><p>HTML 或 XML 的解析库，借助网页的结构和属性等特性来解析网页</p>
<p>自动将输入文档转换为 Unicode 编码，输出文档转换为 UTF-8 编码，不需要考虑编码方式</p>
<p>Beautiful Soup 在解析时依赖解析器，lxml 解析器有解析 HTML 和 XML 的功能，且速度快，容错能力强</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(<span class="string">&#x27;&lt;p&gt;Hello&lt;/p&gt;&#x27;</span>, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.p.string) <span class="comment">#选取p节点，调用string属性就可以得到里面文本了</span></span><br></pre></td></tr></table></figure>

<p>第一个参数 HTML字符串， 第二个参数为解析器的类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot; Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;linkl&quot;&gt;&lt;! - Elsie ...&gt;&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.prettify())</span><br><span class="line">print(soup.title.string)</span><br></pre></td></tr></table></figure>

<p>调用 pretttify() 方法，把要解析的字符串以标准的缩进格式输出，Beautiful Soup 可以自动更正格式</p>
<p>soup.title.string 选取 title 节点，再调用 string 属性就可以得到里面的文本了</p>
<h6 id="1-节点选择器"><a href="#1-节点选择器" class="headerlink" title="1. 节点选择器"></a>1. 节点选择器</h6><p>直接调用节点名称就可以选择节点元素，再调用 string 属性就可以得到节点内的文本了</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">print(soup.title)</span><br><span class="line">print(<span class="built_in">type</span>(soup.title))</span><br><span class="line">print(soup.title.string)</span><br><span class="line">print(soup.head)</span><br><span class="line">print(soup.p)</span><br><span class="line">结果</span><br><span class="line">&lt;title&gt;The Dormouse<span class="string">&#x27;s story&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;</span>bs4.element.Tag<span class="string">&#x27;&gt;</span></span><br><span class="line"><span class="string">The Dormouse&#x27;</span>s story</span><br><span class="line">&lt;head&gt;&lt;title&gt;The Dormouse<span class="string">&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line">&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>只打印了第一个 p 节点的内容，多个节点时，这种选择方式只会选择到第一个匹配的节点</p>
<h6 id="提取信息"><a href="#提取信息" class="headerlink" title="提取信息"></a>提取信息</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//获取节点名称</span><br><span class="line">print(soup.title.name)  		</span><br><span class="line">title</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//获取属性</span><br><span class="line">print(soup.p.attrs)					</span><br><span class="line">&#123;<span class="string">&#x27;class&#x27;</span>: [<span class="string">&#x27;title&#x27;</span>], <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;dromouse&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//获取 name 属性</span><br><span class="line">print(soup.p.attrs[<span class="string">&#x27;name&#x27;</span>])	</span><br><span class="line">dromouse</span><br></pre></td></tr></table></figure>

<p>比较简单方式，注意返回有的是字符串，有的是字符串组成的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.p[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">print(soup.p[<span class="string">&#x27;class&#x27;</span>])</span><br><span class="line"><span class="comment">#需要注意有的返回字符串，有的返回字符串组成的列表，要注意判断类型</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;获取内容(是第一个 p 节点)</span><br><span class="line">print(soup.p.string)</span><br></pre></td></tr></table></figure>

<h6 id="嵌套选择"><a href="#嵌套选择" class="headerlink" title="嵌套选择"></a>嵌套选择</h6><p>可以继续调用节点进行下一步选择</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(soup.head.title.string)</span><br></pre></td></tr></table></figure>

<h6 id="关联选择"><a href="#关联选择" class="headerlink" title="关联选择"></a>关联选择</h6><p>有时候不能一步就选到想要的节点元素，需要先选中某个节点元素，然后以它为基准再选择它的父节点、子节点、兄弟节点</p>
<ol>
<li>直接子节点 contents、children</li>
</ol>
<p>添加一个 p 节点</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;p class=&quot;story&quot;&gt;</span><br><span class="line">	Once upon a time there were three little sisters; <span class="keyword">and</span> their names were</span><br><span class="line">  &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;linkl&quot;&gt; </span><br><span class="line">    &lt;span&gt; Elsie&lt;/span&gt;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>调用 contents 属性，结果返回 p 节点的直接子节点，返回结果是一个列表形式</p>
<p>包含文本和节点，得到的是直接子节点的列表（span是子孙节点在a节点里面，没有单独选出来）</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">print(soup.p.contents)</span><br><span class="line">[&#x27;\n\tOnce upon a time there were three little sisters; and their names were\n\t&#x27;, &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;linkl&quot;&gt;</span><br><span class="line">&lt;span&gt; Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;, &#x27;\n&#x27;]</span><br></pre></td></tr></table></figure>

<p>同样可以直接调用 children 属性得到相应的结果，返回结果是生成器类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.p.children)</span><br><span class="line"><span class="keyword">for</span> i, child <span class="keyword">in</span> <span class="built_in">enumerate</span>(soup.p.children):</span><br><span class="line">  print(i, child)</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>子孙节点 descendants</li>
</ol>
<p>如果要获取所有子孙节点的话，调用 descendants 属性，返回结果是生成器类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.p.descendants)</span><br><span class="line"><span class="keyword">for</span> i, child <span class="keyword">in</span> <span class="built_in">enumerate</span>(soup.p.descendants):</span><br><span class="line">    print(i, child)</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>父节点和 祖先节点</li>
</ol>
<p>获取父节点，调用 parent 属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.a.parent)</span><br></pre></td></tr></table></figure>

<p>想要获取所有的祖先节点，调用 parents 属性，返回结果是生成器类型，这里用列表输出索引和内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="built_in">list</span>(<span class="built_in">enumerate</span>(soup.a.parents)))</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>兄弟节点（同级节点）</li>
</ol>
<p>next_sibling 节点下一个兄弟元素</p>
<p>previous_sibling 节点上一个兄弟元素</p>
<p>next_siblings 所有前面的兄弟元素</p>
<p>previous_siblings 所有后面的兄弟元素</p>
<ol start="5">
<li>提取信息</li>
</ol>
<p>返回的是单个节点，直接调用 string、attrs 等属性获取文本和属性</p>
<p>多个节点的生成器，则可转为列表后取出某个元素，然后调用 string、attrs</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.a.next_sibling)</span><br><span class="line">print(soup.a.next_sibling.string)</span><br><span class="line">print(<span class="built_in">list</span>(soup.a.parents)[<span class="number">0</span>])</span><br><span class="line">pirnt(<span class="built_in">list</span>(soup.a.parents)[<span class="number">0</span>].attrs[<span class="string">&#x27;class&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h6 id="2-方法选择器"><a href="#2-方法选择器" class="headerlink" title="2. 方法选择器"></a>2. 方法选择器</h6><p>前面的选择方法都是通过属性来选择的，Beautiful Soup 还提供了一些查询方法</p>
<h6 id="find-all"><a href="#find-all" class="headerlink" title="find_all()"></a>find_all()</h6><p>查找所有符合条件的元素，传入属性或文本，就可以得到符合条件的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">find_all(name, attrs, recursive, text, **kwargs)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;panel&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;panel-heading&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;panel-body&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>  (1) name 根据节点名来查询元素</p>
<p>查询所有 ul 节点，返回结果是列表类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.find_all(name=<span class="string">&#x27;ul&#x27;</span>)) </span><br><span class="line"><span class="comment">#结果列表类型，长度2</span></span><br></pre></td></tr></table></figure>

<p>查询出所有 ul 节点后，再继续查询其内部的 li 节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> soup.find_all(name=<span class="string">&#x27;ul&#x27;</span>):</span><br><span class="line">  print(ul.find_all(name=<span class="string">&#x27;li&#x27;</span>))</span><br><span class="line">  <span class="keyword">for</span> li <span class="keyword">in</span> ul.find_all(name=<span class="string">&#x27;li&#x27;</span>):</span><br><span class="line">    print(li.string)</span><br></pre></td></tr></table></figure>



<p>(2)  attrs 传入属性查询</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.find_all(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;list-1&#x27;</span>&#125;))</span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;elements&#x27;</span>&#125;))</span><br><span class="line"></span><br><span class="line">print(soup.find_all(<span class="built_in">id</span>=<span class="string">&#x27;list-1&#x27;</span>))</span><br><span class="line">print(soup.find_all(class_=<span class="string">&#x27;element&#x27;</span>)) </span><br><span class="line"><span class="comment">#class 是 Python 关键字，需要加下划线</span></span><br></pre></td></tr></table></figure>



<p>(3) text 匹配节点的文本，可以传字符串或正则表达式对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#参数为正则表达式对象</span></span><br><span class="line">print(soup.find_all(text=re.<span class="built_in">compile</span>(<span class="string">&#x27;link&#x27;</span>)))</span><br></pre></td></tr></table></figure>

<h6 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h6><p>返回的是单个元素，也就是第一个匹配的元素</p>
<ol start="3">
<li>其它查询方法</li>
</ol>
<p>find_parents() 和 find_parent()：前者返回所有祖先节点，后者返回直接父节点</p>
<p>find_next_siblings() 和 find_next_sibling()：前者返回后面所有兄弟节点，后者返回后面第一个兄弟节点</p>
<p>find_previous_siblings() 和 find_previous_sibling()：：前者返回前面所有兄弟节点，后者返回前面第一个兄弟节点</p>
<p>find_all_next() 和 find_next()：前者返回节点后所有符合条件的节点，后者返回第一个符合条件的节点</p>
<p>find_all_previous() 和 find_previous：</p>
<h6 id="3-CSS-选择器"><a href="#3-CSS-选择器" class="headerlink" title="3. CSS 选择器"></a>3. CSS 选择器</h6><p>Beautiful Soup还提供了另一种选择器，CSS 选择器</p>
<p>只需要调用 select ，传入相应 CSS 选择器即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">html = &#x27;&#x27;&#x27;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span> <span class="attr">id</span>=<span class="string">&quot;list-1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;element&quot;</span>&gt;</span>Foo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;element&quot;</span>&gt;</span>Bar<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;element&quot;</span>&gt;</span>Jay<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list list-small&quot;</span> <span class="attr">id</span>=<span class="string">&quot;list-2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;element&quot;</span>&gt;</span>Foo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;element&quot;</span>&gt;</span>Bar<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.select(<span class="string">&#x27;.panel .panel-heading&#x27;</span>))</span><br><span class="line">print(soup.select(<span class="string">&#x27;ul li&#x27;</span>)) <span class="comment">#选择所有ul节点下面的li节点</span></span><br><span class="line">print(soup.select(<span class="string">&#x27;#list-2 .element&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">[&lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">&lt;h4&gt;Hello&lt;/h4&gt;</span><br><span class="line">&lt;/div&gt;]</span><br><span class="line"></span><br><span class="line">[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;]</span><br><span class="line"></span><br><span class="line">[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;]</span><br></pre></td></tr></table></figure>

<h6 id="嵌套选择-1"><a href="#嵌套选择-1" class="headerlink" title="嵌套选择"></a>嵌套选择</h6><p>select() 方法同样支持嵌套选择，如先选择所有 ul 节点，再遍历每个 ul 节点，选择其 li 节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> soup.select(<span class="string">&#x27;ul&#x27;</span>):</span><br><span class="line">	print(ul.select(<span class="string">&#x27;li&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>输出了所有 ul 节点下所有 li 节点组成的列表</p>
<h6 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> soup.select(<span class="string">&#x27;ul&#x27;</span>):</span><br><span class="line">	print(ul[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">	print(ul.attrs[<span class="string">&#x27;id&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h6 id="获取文本"><a href="#获取文本" class="headerlink" title="获取文本"></a>获取文本</h6><p>获取文本可以用 string 属性，还有个方法 get_text()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> soup.select(<span class="string">&#x27;li&#x27;</span>):</span><br><span class="line">	print(<span class="string">&#x27;Get Text:&#x27;</span>, li.get_text())</span><br><span class="line">	print(<span class="string">&#x27;String:&#x27;</span>, li.string)</span><br></pre></td></tr></table></figure>



<h5 id="4-3-pyquery"><a href="#4-3-pyquery" class="headerlink" title="4.3 pyquery"></a>4.3 pyquery</h5><p>如果比较喜欢用CSS选择器，对jQuery有所了解，可以使用 pyquery</p>
<h6 id="字符串初始化"><a href="#字符串初始化" class="headerlink" title="字符串初始化"></a>字符串初始化</h6><p>传入 HTML 字符串（常用）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq <span class="comment">#引入 PyQuery 对象，取别名 pq</span></span><br><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">doc = pq(html)</span><br><span class="line">print(doc(<span class="string">&#x27;li&#x27;</span>)) <span class="comment">#选择所有li节点</span></span><br></pre></td></tr></table></figure>

<h6 id="URL-初始化"><a href="#URL-初始化" class="headerlink" title="URL 初始化"></a>URL 初始化</h6><p>可以传入网页的 URL</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">doc = pq(<span class="string">&#x27;https://cuiqingcai.com&#x27;</span>)</span><br><span class="line">print(doc(<span class="string">&#x27;title&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>PyQuery对象会先请求这个URL，然后用得到的 HTML 内容完成初始化，相当于网页的源码以字符串的形式传递给 PyQuery 类来初始化，相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">doc = pq(requests.get(<span class="string">&#x27;https://cuiqingcai.com&#x27;</span>).text)</span><br><span class="line">print(doc(<span class="string">&#x27;title&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h6 id="文件初始化"><a href="#文件初始化" class="headerlink" title="文件初始化"></a>文件初始化</h6><p>可以传本地文件名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">doc = pq(filename=<span class="string">&#x27;demo.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="基于CSS选择器"><a href="#基于CSS选择器" class="headerlink" title="基于CSS选择器"></a>基于CSS选择器</h6><blockquote>
<p>#id 选择器通过 HTML 元素的 id 属性选取指定元素</p>
<p>.class 选择器通过指定 class 查找元素</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div id=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;ul class=&quot;list&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">doc = pq(html)</span><br><span class="line">print(doc(<span class="string">&#x27;#container .list li&#x27;</span>))</span><br><span class="line">print(<span class="built_in">type</span>(doc(<span class="string">&#x27;#container .list li&#x27;</span>))) <span class="comment">#pyquery.pyquery.PyQuery</span></span><br></pre></td></tr></table></figure>

<p>先选取 id 为 container 的节点，然后再选取其内部的 class 为 list 的节点内部的所有 li 节点</p>
<h6 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h6><p>常用查询函数和 jQuery 中函数的用法完全相同</p>
<ol>
<li>子节点</li>
</ol>
<p>查找子节点需要用到 find() 方法，传入参数是 CSS 选择器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">items = doc(<span class="string">&#x27;.list&#x27;</span>) <span class="comment">#选取class为list的节点</span></span><br><span class="line">lis = items.find(<span class="string">&#x27;li&#x27;</span>)<span class="comment">#选取内部li节点</span></span><br><span class="line">print(lis)</span><br></pre></td></tr></table></figure>

<p>其实 find() 查找范围是节点的所有子孙节点，如果只想查找子节点可以用 children()</p>
<p>如果要筛选所有子节点中符合条件的节点，比如节点中 class 为 active 的节点，可以像 children() 方法传入 CSS 选择器 .active</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = items.children(<span class="string">&#x27;.active&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>父节点</li>
</ol>
<p>可以用 parent() 方法来获取某个节点的父节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">doc = pq(html)</span><br><span class="line">items = doc(<span class="string">&#x27;.list&#x27;</span>) <span class="comment">#type: pyquery</span></span><br><span class="line">print(<span class="built_in">type</span>(items))</span><br><span class="line">container = items.parent()</span><br><span class="line">print(container)</span><br><span class="line"><span class="comment">#先选取class为list的节点</span></span><br></pre></td></tr></table></figure>

<p>想要获取祖先节点用 parents()</p>
<p>想要筛选某个祖先节点，向 parents() 传入 CSS 选择器，这样就会返回祖先节点中符合 CSS 选择器的节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parent = items.parents(<span class="string">&#x27;.wrap&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>兄弟节点</li>
</ol>
<p>siblings()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = doc(<span class="string">&#x27;.list .item-0.active&#x27;</span>) <span class="comment">#type: pyquery</span></span><br><span class="line">print(li.siblings())</span><br><span class="line">print(li.siblings(<span class="string">&#x27;.active&#x27;</span>))<span class="comment">#筛选class为active的节点</span></span><br></pre></td></tr></table></figure>

<h6 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h6><p>单个节点可以直接打印输出，也可直接转成字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = doc(<span class="string">&#x27;.item-0.active&#x27;</span>)</span><br><span class="line">print(li)</span><br><span class="line">print(<span class="built_in">str</span>(li))</span><br></pre></td></tr></table></figure>

<p>遍历，调用 items() 方法，得到一个生成器，遍历下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = doc(<span class="string">&#x27;li&#x27;</span>).items</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">	print(li)</span><br></pre></td></tr></table></figure>

<h6 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h6><ol>
<li>获取属性</li>
</ol>
<p>调用 attr() 方法获取属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = doc(<span class="string">&#x27;.item-0.active a&#x27;</span>)<span class="comment">#class为item-0和active的li节点内的a节点</span></span><br><span class="line">print(a.attr(<span class="string">&#x27;href&#x27;</span>))<span class="comment">#调用attr方法传入属性的名称</span></span><br><span class="line"><span class="comment">#也可调用attr属性来获取</span></span><br><span class="line">print(a.attr.href)</span><br></pre></td></tr></table></figure>

<p>多个节点调用attr()方法只返回第一个节点属性，获取所有的需要遍历</p>
<ol start="2">
<li>获取文本</li>
</ol>
<p>text() 方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a.text())</span><br></pre></td></tr></table></figure>

<p>获取内部 HTML 文本，html() 方法</p>
<h6 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h6><p>pyquery 提供了一系列方法对节点进行动态修改</p>
<ul>
<li>addClass removeClass</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = doc(<span class="string">&#x27;.item-0.active&#x27;</span>)</span><br><span class="line">li.removeClass(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">li.addClass(<span class="string">&#x27;active&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>attr、text、html</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = doc(<span class="string">&#x27;.item-0 .active&#x27;</span>)</span><br><span class="line">li.attr(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;link&#x27;</span>)</span><br><span class="line">li.text(<span class="string">&#x27;change item&#x27;</span>)</span><br><span class="line">li.html(<span class="string">&#x27;&lt;span&gt;change item&lt;/span&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">#调用 attr 方法后 li节点多了个原本不存在属性 name 值为link</span></span><br><span class="line"><span class="comment">#调用attr修改属性 text html修改节点内部内容</span></span><br></pre></td></tr></table></figure>

<ul>
<li>remove</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;wrap&quot;&gt;</span></span><br><span class="line"><span class="string">  Hello,world</span></span><br><span class="line"><span class="string">  &lt;p&gt;This is a paragraph&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">doc = pq(html)</span><br><span class="line">wrap = doc(<span class="string">&#x27;.wrap&#x27;</span>)</span><br><span class="line">print(wrap.text())</span><br><span class="line"><span class="comment">#结果Hello,world This is a paragraph</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wrap.find(<span class="string">&#x27;p&#x27;</span>).remove()</span><br><span class="line">print(wrap.text())</span><br></pre></td></tr></table></figure>

<p>还有其它节点操作方法 append() empty() prepend()</p>
<p>参考 <a href="http://pyquery.readthedocs.io/en/latest/api.html">http://pyquery.readthedocs.io/en/latest/api.html</a></p>
<ul>
<li>伪类选择器</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">doc(<span class="string">&#x27;li:first-child&#x27;</span>)<span class="comment">#第一个li节点</span></span><br><span class="line">doc(<span class="string">&#x27;li:last-child&#x27;</span>)<span class="comment">#最后一个li节点</span></span><br><span class="line">doc(<span class="string">&#x27;li:nth-child(2)&#x27;</span>)<span class="comment">#第二个li节点</span></span><br><span class="line">doc(<span class="string">&#x27;li:gt(2)&#x27;</span>)<span class="comment">#第三个li之后的节点</span></span><br><span class="line">doc(<span class="string">&#x27;li:nth-child(2n)&#x27;</span>)<span class="comment">#偶数位的li节点</span></span><br><span class="line">doc(<span class="string">&#x27;li:contains(second)&#x27;</span>)<span class="comment">#包含second文本的li节点</span></span><br></pre></td></tr></table></figure>































]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-环境配置</title>
    <url>/2022/04/11/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><a href="https://setup.scrape.center/">https://setup.scrape.center</a></p>
<h4 id="Python-IDE"><a href="#Python-IDE" class="headerlink" title="Python IDE"></a>Python IDE</h4><h5 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h5><p>配置</p>
<p>终端 which python3 查看 python3 路径</p>
<p>Preference-Project:pythonProject-PythonInterpreter</p>
<p>Show All 添加 上面 python 路径</p>
<h4 id="Python-版本"><a href="#Python-版本" class="headerlink" title="Python 版本"></a>Python 版本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python 3.7.9</span><br></pre></td></tr></table></figure>





<h4 id="1-开发环境配置"><a href="#1-开发环境配置" class="headerlink" title="1.开发环境配置"></a>1.开发环境配置</h4><h5 id="1-1-Python3的安装"><a href="#1-1-Python3的安装" class="headerlink" title="1.1 Python3的安装"></a>1.1 Python3的安装</h5><ol>
<li>Homebrew 安装</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install python3</span><br></pre></td></tr></table></figure>

<p>命令执行完后，Python3 和 pip3 均已成功安装</p>
<ol start="2">
<li>安装包安装</li>
</ol>
<p><a href="https://www.python.org/downloads/">官网 </a>下载安装包安装</p>
<ol start="3">
<li>Anaconda 安装</li>
</ol>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">镜像地址</a></p>
<ul>
<li>测试验证</li>
</ul>
<p>终端输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Python3</span><br><span class="line">pip3 -V</span><br></pre></td></tr></table></figure>



<h5 id="1-2请求库安装"><a href="#1-2请求库安装" class="headerlink" title="1.2请求库安装"></a>1.2请求库安装</h5><h6 id="1-2-1-requests"><a href="#1-2-1-requests" class="headerlink" title="1.2.1 requests"></a>1.2.1 requests</h6><p>阻塞式 HTTP 请求，发出请求后，会一直等待服务器响应，响应后才会进行下一步处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install requests</span><br></pre></td></tr></table></figure>

<p>验证安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; import requests</span><br></pre></td></tr></table></figure>

<h6 id="1-2-2-Selenium"><a href="#1-2-2-Selenium" class="headerlink" title="1.2.2 Selenium"></a>1.2.2 Selenium</h6><p>自动化测试工具，可以驱动浏览器执行特定的动作，如点击、下拉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install selenium</span><br></pre></td></tr></table></figure>

<p>验证安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; import selenium</span><br></pre></td></tr></table></figure>

<h6 id="1-2-3-ChromeDriver"><a href="#1-2-3-ChromeDriver" class="headerlink" title="1.2.3 ChromeDriver"></a>1.2.3 ChromeDriver</h6><p>Selenium 是一个自动化测试工具，需要配合浏览器使用</p>
<p>安装 ChromeDriver 才能驱动 Chrome 浏览器完成相应操作</p>
<p>查看 Chrome 版本号：帮助-关于 Google Chrome 版本 100.0.4896.75（正式版本） (x86_64)</p>
<p>ChromeDriver <a href="http://npm.taobao.org/mirrors/chromedriver/">下载地址</a> 选择 100.0.4896.60/chromedriver_mac64.zip  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mv chromedriver &#x2F;usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure>

<p>验证安装： 终端输入 chromedriver 开启</p>
<p>再程序中测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; from selenium import webdriver</span><br><span class="line">&gt;&gt;&gt; browser &#x3D; webdriver.Chrome()</span><br></pre></td></tr></table></figure>

<p>运行后，弹出一个空白 Chrome 浏览器，证明配置没问题</p>
<h6 id="1-2-4-GeckoDriver"><a href="#1-2-4-GeckoDriver" class="headerlink" title="1.2.4 GeckoDriver"></a>1.2.4 GeckoDriver</h6><p> <a href="https://github.com/mozilla/geckodriver/releases">下载地址</a>  geckodriver-v0.30.0-macos.tar.gz</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mv geckodriver &#x2F;usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure>

<p>验证安装： 终端输入 geckodriver 开启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; from selenium import webdriver</span><br><span class="line">&gt;&gt;&gt; browser &#x3D; webdriver.Firefox()</span><br></pre></td></tr></table></figure>

<h6 id="1-2-5-PhantomJS"><a href="#1-2-5-PhantomJS" class="headerlink" title="1.2.5 PhantomJS"></a>1.2.5 PhantomJS</h6><p><del>无界面的、可脚本编程的 WebKit 浏览器引擎</del></p>
<p><del>Selenium 支持 PhantomJS，这样运行的时候就不会再弹出一个浏览器了</del></p>
<p><a href="https://phantomjs.org/download.html">下载地址</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mv phantomjs &#x2F;usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure>

<p><del>验证安装： 终端输入 phantomjs</del></p>
<p><del>Selenium中使用，只需要将 Chrome 切换为 PhantomJS</del></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver </span><br><span class="line">browser &#x3D; webdriver.PhantomJS() </span><br><span class="line">browser.get(&#39;https:&#x2F;&#x2F;www.baidu.com’) </span><br><span class="line">print(browser.current_url)</span><br></pre></td></tr></table></figure>

<p>报错不支持了：<code>Selenium support for PhantomJS has been deprecated </code> </p>
<p>使用无界面版本 <code>use headless versions of Chrome or Firefox instead</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"># 创建chrome参数对象</span><br><span class="line">opt &#x3D; webdriver.ChromeOptions()</span><br><span class="line"># 把chrome设置成无界面模式，不论windows还是linux都可以，自动适配对应参数</span><br><span class="line">opt.set_headless()</span><br><span class="line"># 创建chrome无界面对象</span><br><span class="line">driver &#x3D; webdriver.Chrome(options&#x3D;opt)</span><br><span class="line"># 访问百度</span><br><span class="line">driver.get(&#39;https:&#x2F;&#x2F;baidu.com&#x2F;&#39;)</span><br><span class="line">#打印内容</span><br><span class="line">print(driver.page_source)</span><br></pre></td></tr></table></figure>

<h6 id="1-2-6-aiohttp"><a href="#1-2-6-aiohttp" class="headerlink" title="1.2.6 aiohttp"></a>1.2.6 aiohttp</h6><p>异步 Web 服务的库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install aiohttp</span><br></pre></td></tr></table></figure>

<p>字符编码检测库 cchardet , 加速 DNS 的解析库  aiodns</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install cchardet aiodns</span><br></pre></td></tr></table></figure>

<h5 id="1-3-解析库安装"><a href="#1-3-解析库安装" class="headerlink" title="1.3 解析库安装"></a>1.3 解析库安装</h5><h6 id="1-3-1-lxml"><a href="#1-3-1-lxml" class="headerlink" title="1.3.1 lxml"></a>1.3.1 lxml</h6><p>Python 的一个解析库，支持 HTML 和 XML 的解析，支持 XPath 解析方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install lxml</span><br></pre></td></tr></table></figure>

<h6 id="1-3-2-Beautiful-Soup"><a href="#1-3-2-Beautiful-Soup" class="headerlink" title="1.3.2 Beautiful Soup"></a>1.3.2 Beautiful Soup</h6><p>Python 的一个 HTML 或 XML 的解析库</p>
<p>Beautiful Soup 的 HTML 和 XML 解析器是依赖于 lxml 库的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install beautifulsoup4</span><br></pre></td></tr></table></figure>

<p>验证安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; from bs4 import BeautifulSoup</span><br><span class="line">&gt;&gt;&gt; soup &#x3D; BeautifulSoup(&#39;&lt;p&gt;Hello&lt;&#x2F;p&gt;&#39;, &#39;lxml&#39;)</span><br><span class="line">&gt;&gt;&gt; print(soup.p.string)</span><br></pre></td></tr></table></figure>

<h6 id="1-3-3-pyquery"><a href="#1-3-3-pyquery" class="headerlink" title="1.3.3 pyquery"></a>1.3.3 pyquery</h6><p>网页解析工具，提供和 jQuery类型语法来解析 HTML 文档，支持 CSS 选择器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install pyquery</span><br></pre></td></tr></table></figure>

<h6 id="1-3-4-tesserocr"><a href="#1-3-4-tesserocr" class="headerlink" title="1.3.4 tesserocr"></a>1.3.4 tesserocr</h6><p>OCR 识别</p>
<p>使用 Homebrew 安装 ImageMagick 和 tesseract 库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install imagemagick</span><br><span class="line">brew install tesseract-lang</span><br><span class="line">pip3 install tesserocr pillow</span><br></pre></td></tr></table></figure>

<p><a href="http://my.cnki.net/elibregister/CheckCode.aspx">验证码测试连接</a></p>
<p>使用命令行测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tesseract image.png result -1 eng &amp;&amp; cat result.txt</span><br></pre></td></tr></table></figure>

<p>Python 代码测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; import tesserocr</span><br><span class="line">&gt;&gt;&gt; from PIL import Image</span><br><span class="line">&gt;&gt;&gt; image &#x3D; Image.open(&#39;&#x2F;Users&#x2F;midland_whk&#x2F;Downloads&#x2F;CheckCode.aspx.jpeg&#39;)</span><br><span class="line">&gt;&gt;&gt; print(tesserocr.image_to_text(image))</span><br><span class="line">或者</span><br><span class="line">&gt;&gt;&gt; print(tesserocr.file_to_text(&#39;image.png&#39;))</span><br></pre></td></tr></table></figure>

<p>利用 Image 读取图片，再调用 tesserocr 的 image_to_text 将识别结果输出</p>
<h5 id="1-4-数据库安装"><a href="#1-4-数据库安装" class="headerlink" title="1.4 数据库安装"></a>1.4 数据库安装</h5><h6 id="1-4-1-MySQL"><a href="#1-4-1-MySQL" class="headerlink" title="1.4.1 MySQL"></a>1.4.1 MySQL</h6><p>轻量级关系型数据库</p>
<p><a href="https://downloads.mysql.com/archives/community/">下载地址</a></p>
<p>MySQL安装后 <code>open ~/.bash_profile</code><br>添加 <code>PATH=$PATH:/usr/local/mysql/bin</code><br>生效 <code>source ~/.bash_profile</code><br>终端登录mysql <code>mysql -uroot -p</code></p>
<p>或者 Homebrew 方式安装 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure>

<p>启动、停止、重启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mysql.server start </span><br><span class="line">sudo mysql.server stop </span><br><span class="line">sudo mysql.server restart</span><br><span class="line">sudo &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;support-files&#x2F;mysql.server stop</span><br><span class="line">sudo &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;support-files&#x2F;mysql.server restart</span><br></pre></td></tr></table></figure>

<p>打开系统偏好设置-MySQL</p>
<p>initialize Database 可以设置密码 8 位</p>
<ul>
<li>Navicat Premium </li>
</ul>
<p>数据库的可视化工具</p>
<ul>
<li>Navicat Premium 连接 MySQL 报错 2059</li>
</ul>
<p>原因：mysql8之前版本中加密规则为mysql_native_password，mysql8之后加密规则为caching_sha2_password，将mysql用户登录加密规则改为 mysql_native_password</p>
<p>解决：</p>
<p>1 登录数据库 mysql -uroot -p</p>
<p>2 输入数据库密码登录</p>
<p>3 输入 use mysql; 出现 Database changed</p>
<p>4 输入 select host,user,plugin from user; 目的为了查看user的root 对应host是什么</p>
<p>5 修改加密规则 ALTER USER ‘root’@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘12345678’;</p>
<p>6 查看修改结果 select host,user,plugin from user;</p>
<h6 id="1-4-2-MongoDB"><a href="#1-4-2-MongoDB" class="headerlink" title="1.4.2 MongoDB"></a>1.4.2 MongoDB</h6><p>C++编写的非关系型数据库，内容存储形式类似 JSON 对象，字段值可以包含其它文档、数组及文档数组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install mongodb <span class="comment">#失效了</span></span><br></pre></td></tr></table></figure>

<p>直接下载社区版 <a href="https://www.mongodb.com/try/download">https://www.mongodb.com/try/download</a></p>
<p>下载完 mongodb-macos-x86_64-5.0.7 解压命名为 mongodb 放到 /usr/local/ 目录</p>
<p>再把 MongoDB 的二进制命令文件目录添加到PATH</p>
<p>export PATH=/usr/local/mongodb/bin:$PATH</p>
<p>创建数据库存放路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;usr&#x2F;local&#x2F;var&#x2F;mongodb</span><br></pre></td></tr></table></figure>

<p>日志文件路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;mongodb</span><br></pre></td></tr></table></figure>

<p>确保当前用户对上面目录读写权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chown 用户 &#x2F;usr&#x2F;local&#x2F;var&#x2F;mongodb</span><br><span class="line">sudo chown 用户 &#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;mongodb</span><br></pre></td></tr></table></figure>

<p>后台启动mongodb</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#--dbpath 设置数据存放目录</span></span><br><span class="line"><span class="comment">#--logpath 设置日志存放目录</span></span><br><span class="line"><span class="comment">#--fork 在后台运行</span></span><br><span class="line">mongod --dbpath /usr/<span class="built_in">local</span>/var/mongodb --logpath /usr/<span class="built_in">local</span>/var/<span class="built_in">log</span>/mongodb/mongo.log --fork</span><br></pre></td></tr></table></figure>

<p>如果不想后台运行，而是在控制台上查看运行过程可以直接设置配置文件启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongod --config &#x2F;usr&#x2F;local&#x2F;etc&#x2F;mongod.conf</span><br></pre></td></tr></table></figure>

<p>查看是否启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps aux | grep -v grep | grep mongod</span><br></pre></td></tr></table></figure>

<p>启动后可以用mongodb命令打开一个终端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin </span><br><span class="line">.&#x2F;mongo</span><br></pre></td></tr></table></figure>





<p>启动、停止和重启 MongoDB</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew services start mongodb </span><br><span class="line">sudo mongod</span><br><span class="line">brew services stop mongodb </span><br><span class="line">brew services restart mongodb</span><br></pre></td></tr></table></figure>

<p>可视化工具 RoboMongo/Robo 2T <a href="https://robomongo.org/download">https://robomongo.org/download</a></p>
<p>Studio 3T <a href="https://studio3t.com/download">https://studio3t.com/download</a></p>
<h6 id="1-4-3-Redis"><a href="#1-4-3-Redis" class="headerlink" title="1.4.3 Redis"></a>1.4.3 Redis</h6><p>基于内存的高效的非关系型数据库</p>
<ul>
<li><p>Linux 下的安装</p>
</li>
<li><ul>
<li>Ubuntu、Debian、Deepin 系统下，使用 apt-get 命令安装 Redis</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get -y install redis-server</span><br></pre></td></tr></table></figure>

<p>然后 redis-cli 进入 Redis 命令行模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; set &#39;name&#39; &#39;Germey&#39;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get &#39;name&#39;</span><br><span class="line">&#39;Germey&#39;</span><br><span class="line">#如果设置了密码需要先 auth xxx密码</span><br></pre></td></tr></table></figure>

<p>配置远程连接，修改配置文件 /etc/redis/redis.conf</p>
<p>注释 <code>bind 127.0.0.1</code></p>
<p>推荐给 Redis 设置密码，取消注释 <code>requirepass foobared</code> foobared 就是当前密码，可修改</p>
<p>重启 Redis 服务，就可以使用密码远程连接 Redis 了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;redis-server restart</span><br></pre></td></tr></table></figure>

<p>停止和启动 Redis 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;redis-server stop</span><br><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;redis-server start</span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li>CentOS 和 Red Hat 系统中，首先添加 EPEL 仓库，然后更新 yum 源</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install epel-release</span><br><span class="line">sudo yum update</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>安装 Redis 数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum -y install redis</span><br><span class="line">#安装好后启动</span><br><span class="line">sudo systemctl start redis</span><br></pre></td></tr></table></figure>

<p>同样可以使用 redis-cli 进入 Redis 命令行模式</p>
<p>为了使 Redis 能被远程连接，修改配置文件 /etc/redis.conf</p>
<p>修改完之后保存重启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart redis</span><br></pre></td></tr></table></figure>

<p>还需要关闭linux的防火墙开放6379端口，宝塔面板安全设置或者防火墙关闭命令</p>
<p>云主机安全主添加入方向6379端口</p>
<ul>
<li>Mac 安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure>

<blockquote>
<p>brew 会报错提示redis下载失败</p>
</blockquote>
<p>redis 官网下载 <a href="https://redis.io/download/">https://redis.io/download/</a> redis-6.2.6.tar.gz</p>
<p>解压重命名为 redis，放入到 /usr/local/ 目录</p>
<p>进入目录编译，成功会提示 It’s a good idea to run make test</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo make</span><br><span class="line">sudo make test</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p>安装成功后使用命令 redis-server 启动服务</p>
<p>连接redis：新打开终端输入 redis-cli</p>
<p>启动 Redis 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew services start redis</span><br><span class="line">redis-service &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis.conf</span><br></pre></td></tr></table></figure>

<p>Mac 下 Redis 配置文件路径 /usr/local/tec/redis.conf 可以通过修改它来配置访问密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew services stop redis</span><br><span class="line">brew services restart redis</span><br></pre></td></tr></table></figure>

<p>可以安装 Redis Destop Manager 可视化管理工具来管理 Redis</p>
<h5 id="1-5-Python-存储库安装"><a href="#1-5-Python-存储库安装" class="headerlink" title="1.5 Python 存储库安装"></a>1.5 Python 存储库安装</h5><p>安装了存储数据的数据库，如果想要和 Python 交互的话，还需要安装一些 Python 存储库</p>
<p>MySQL 需要安装 PyMySQL</p>
<p>MongoDB 需要安装 PyMongo</p>
<h6 id="1-5-1-PyMySQL"><a href="#1-5-1-PyMySQL" class="headerlink" title="1.5.1 PyMySQL"></a>1.5.1 PyMySQL</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import pymysql</span><br><span class="line">&gt;&gt;&gt; pymysql.VERSION</span><br><span class="line">(1, 0, 2, None)</span><br></pre></td></tr></table></figure>

<h6 id="1-5-2-PyMongo"><a href="#1-5-2-PyMongo" class="headerlink" title="1.5.2 PyMongo"></a>1.5.2 PyMongo</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install pymongo</span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import pymongo </span><br><span class="line">&gt;&gt;&gt; pymongo.version</span><br></pre></td></tr></table></figure>

<h6 id="1-5-3-redis-py"><a href="#1-5-3-redis-py" class="headerlink" title="1.5.3 redis-py"></a>1.5.3 redis-py</h6><p>Redis 使用 redis-py 库来与其交互</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install redis</span><br><span class="line">#运行完毕后即可完成 redis-py 的安装</span><br></pre></td></tr></table></figure>

<h6 id="1-5-4-RedisDump"><a href="#1-5-4-RedisDump" class="headerlink" title="1.5.4 RedisDump"></a>1.5.4 RedisDump</h6><p>RedisDump 一个用于 Redis 数据导入/导出的工具，基于 Ruby 实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem install redis-dump</span><br></pre></td></tr></table></figure>

<p>验证：安装成功后执行下面命令，成功调用则安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis dump </span><br><span class="line">redis-load</span><br></pre></td></tr></table></figure>

<h5 id="1-6-Web-库安装"><a href="#1-6-Web-库安装" class="headerlink" title="1.6 Web 库安装"></a>1.6 Web 库安装</h5><h6 id="1-6-1-Flask"><a href="#1-6-1-Flask" class="headerlink" title="1.6.1 Flask"></a>1.6.1 Flask</h6><p>轻量级的 Web 服务程序，主要用来做一些 API 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install flask</span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">@app.route(&quot;&#x2F;&quot;)</span><br><span class="line">def hello():</span><br><span class="line">    return &quot;hello world&quot;</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p>运行后，系统会在 5000 端口开启 Web 服务</p>
<p>直接访问 <a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a> 可以看到网页中显示 Hello World，一个最简单的 Flask 程序就运行成功了</p>
<h6 id="1-6-2-Tornado"><a href="#1-6-2-Tornado" class="headerlink" title="1.6.2 Tornado"></a>1.6.2 Tornado</h6><p>支持异步的 Web 框架，通过使用非阻塞 I/O 流，可以支撑成千上万的开放连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install tornado</span><br></pre></td></tr></table></figure>

<p>验证 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tornado.ioloop</span><br><span class="line">import tornado.web</span><br><span class="line"></span><br><span class="line">class MainHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        self.write(&quot;hello world&quot;)</span><br><span class="line">def make_app():</span><br><span class="line">    return  tornado.web.Application([</span><br><span class="line">        (r&quot;&#x2F;&quot;, MainHandler)</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app &#x3D; make_app()</span><br><span class="line">    app.listen(8888)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>

<p>运行后，系统在 8888 端口运行了 Web 服务， 访问 <a href="http://127.0.0.8888/">http://127.0.0.8888/</a> 网页呈现 helloworld</p>
<h5 id="1-7-APP-爬取相关库安装"><a href="#1-7-APP-爬取相关库安装" class="headerlink" title="1.7 APP 爬取相关库安装"></a>1.7 APP 爬取相关库安装</h5><h6 id="1-7-1-Charles"><a href="#1-7-1-Charles" class="headerlink" title="1.7.1 Charles"></a>1.7.1 Charles</h6><h6 id="1-7-2-mitmproxy"><a href="#1-7-2-mitmproxy" class="headerlink" title="1.7.2 mitmproxy"></a>1.7.2 mitmproxy</h6><p>支持 HTTP 和 HTTPS 的抓包程序，通过控制台的形式操作</p>
<p>有两个关联组件</p>
<p>mitmdump：是 mitmproxy 命令行接口，利用它对接 Python 脚本，实现监听后的处理</p>
<p>mitmweb：一个 Web 程序，通过它以清楚观察到 mitmproxy 捕获请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install mitmproxy</span><br></pre></td></tr></table></figure>

<p>完成安装，还附带安装了 mitmdump mitmweb 两个组件</p>
<p>要捕获 https 请求需要证书配置</p>
<p>mitmproxy 安装后会提供一套 CA 证书，运行 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump</span><br></pre></td></tr></table></figure>

<p>在用户目录 .mitmproxy 目录里面找到 CA 证书</p>
<p>配置：</p>
<p>双击 mitmproxy-ca-cert.pem 弹出钥匙串管理，找到 mitmproxy 证书，打开设置，选始终信任</p>
<p>将 mitmproxy-ca-cert.pem 隔空投送到手机设备，安装</p>
<h6 id="Linux下安装-mitmproxy"><a href="#Linux下安装-mitmproxy" class="headerlink" title="Linux下安装 mitmproxy"></a>Linux下安装 mitmproxy</h6><p>操作系统 CentOS 8.5</p>
<p>可以下载编译好的二进制包 <a href="https://github.com/mitmproxy/mitmproxy/releases">https://github.com/mitmproxy/mitmproxy/releases</a></p>
<p>看到 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You can find the latest release packages at https:&#x2F;&#x2F;mitmproxy.org&#x2F;downloads&#x2F;.</span><br></pre></td></tr></table></figure>

<p>进入下载最新linux包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;snapshots.mitmproxy.org&#x2F;8.0.0&#x2F;mitmproxy-8.0.0-linux.tar.gz</span><br><span class="line">tar -zxvf mitmproxy-8.0.0-linux.tar.gz</span><br><span class="line">sudo mv mitmproxy mitmdump mitmweb &#x2F;usr&#x2F;bin</span><br></pre></td></tr></table></figure>

<p>配置证书</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su root #切换到root用户</span><br><span class="line">cd &#x2F;root</span><br><span class="line">mitmdump #运行命令产生CA证书</span><br></pre></td></tr></table></figure>

<p>默认8080端口，如果占用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsof -i:8080</span><br><span class="line">kill -9 进程id</span><br></pre></td></tr></table></figure>

<p>或者修改指定端口号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump -p 3328</span><br></pre></td></tr></table></figure>



<h6 id="CentOS证书配置"><a href="#CentOS证书配置" class="headerlink" title="CentOS证书配置"></a>CentOS证书配置</h6><p><a href="https://zhuanlan.zhihu.com/p/43581988">https://zhuanlan.zhihu.com/p/43581988</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看mitmproxy版本和系统信息</span><br><span class="line">$ mitmproxy --version</span><br><span class="line">#安装 ca-certificates</span><br><span class="line">$ yum install ca-certificates</span><br><span class="line">#转换证书，pem → crt linux上.pem文件先转化为.crt文件</span><br><span class="line">$ cd ~&#x2F;.mitmproxy&#x2F;</span><br><span class="line">$ openssl x509 -in mitmproxy-ca-cert.pem -inform PEM -out mitmproxy-ca-cert.crt</span><br><span class="line">$ ll</span><br><span class="line">total 28</span><br><span class="line">#打开根证书动态配置开关</span><br><span class="line">update-ca-trust force-enable</span><br><span class="line">#将证书复制到</span><br><span class="line">cp mitmproxy-ca-cert.crt &#x2F;etc&#x2F;pki&#x2F;ca-trust&#x2F;source&#x2F;anchors&#x2F;</span><br><span class="line">#安装根证书</span><br><span class="line">update-ca-trust extract</span><br><span class="line">外部证书存放目录</span><br><span class="line">$ ll &#x2F;etc&#x2F;pki&#x2F;ca-trust&#x2F;source&#x2F;anchors&#x2F;</span><br><span class="line">total 4</span><br><span class="line"></span><br></pre></td></tr></table></figure>

















<h6 id="1-7-3-Appium-安装"><a href="#1-7-3-Appium-安装" class="headerlink" title="1.7.3 Appium 安装"></a>1.7.3 Appium 安装</h6><p>移动端的自动化测试工具</p>
<p><a href="http://appium.io/">下载链接</a> 直接安装</p>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g appium</span><br></pre></td></tr></table></figure>

<p>利用 WebDriver 来实现 APP 的自动化测试</p>
<p>Appium 相当于一个服务器，可以向 Appium 发送一些操作指令，Appium 就会跟进不同指令对设备进行驱动</p>
<p>点击 Start Server 按钮即可启动 Appium 的服务，相当于开启了一个 Appium 服务器。</p>
<p>可以通过 Appium 内置驱动或 Python 代码向 Appium 的服务器发送一系列操作指令</p>
<p>默认 Appium 运行后正在监听 4723 端口</p>
<p>安装1.22.3 报错了</p>
<p>下载 appium-desktop-1.22.3.dmg 双击将.app拖入应用程序执行下面命令就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xattr -cr &quot;&#x2F;Applications&#x2F;Appium Server GUI.app&quot;</span><br><span class="line">codesign --deep --sign - &#x2F;Applications&#x2F;Appium\ Server\ GUI.app</span><br></pre></td></tr></table></figure>

<p>Pycharm 安装 appium-pyhton-client 包</p>
<h6 id="appium-inspector"><a href="#appium-inspector" class="headerlink" title="appium-inspector"></a>appium-inspector</h6><p>从Appium分离出来的</p>
<p><a href="https://github.com/appium/appium-inspector/releases/tag/v2022.2.1">https://github.com/appium/appium-inspector/releases/tag/v2022.2.1</a></p>
<h6 id="WebDriverAgent"><a href="#WebDriverAgent" class="headerlink" title="WebDriverAgent"></a>WebDriverAgent</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;appium&#x2F;WebDriverAgent</span><br><span class="line">brew install Carthage</span><br><span class="line">.&#x2F;scripts&#x2F;bootstrap.sh</span><br></pre></td></tr></table></figure>

<h6 id="libimobiledevice"><a href="#libimobiledevice" class="headerlink" title="libimobiledevice"></a>libimobiledevice</h6><p>使用原生协议与评估 iOS 设备进行通信的库，通过这个库 MacOS 能够获取到 iOS 设备信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install --HEAD libimobiledevice</span><br></pre></td></tr></table></figure>









<h5 id="1-8-爬虫框架安装"><a href="#1-8-爬虫框架安装" class="headerlink" title="1.8 爬虫框架安装"></a>1.8 爬虫框架安装</h5><h6 id="1-8-1-pyspider"><a href="#1-8-1-pyspider" class="headerlink" title="1.8.1 pyspider"></a>1.8.1 pyspider</h6><p>pyspider 是支持 JavaScript 渲染的，而这过程依赖 PhantomJS，所以还需要安装 PhantomJS</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install pyspider</span><br></pre></td></tr></table></figure>

<p>验证：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyspider all</span><br></pre></td></tr></table></figure>

<p>这时 pyspider 的 Web 服务器会在本地 5000 端口运行，直接打开浏览器 <a href="http://localhost:5000/">http://localhost:5000/</a> 即可进入 pyspider 的 WebUI 管理页面</p>
<p>报错 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.8&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;pyspider&#x2F;run.py&quot;, line 231</span><br><span class="line">    async&#x3D;True, get_object&#x3D;False, no_input&#x3D;False):</span><br></pre></td></tr></table></figure>

<p>修改文件 <code>/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pyspider/run.py</code> </p>
<p><code>pyspider/fetcher/tornado_fetcher.py</code></p>
<p><code>pyspider/webui/app.py</code></p>
<p>async 改成 async_mode</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 uninstall wsgidav</span><br><span class="line">pip3 install wsgidav&#x3D;&#x3D;2.4.1</span><br></pre></td></tr></table></figure>

<p>报错： <code>ImportError: cannot import name DispatcherMiddleware</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 uninstall werkzeug</span><br><span class="line">pip3 install werkzeug&#x3D;&#x3D;0.16.0</span><br></pre></td></tr></table></figure>

<ul>
<li>报错端口号被占用</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Error: Could not create web server listening on port 25555</span><br><span class="line">...</span><br><span class="line">File &quot;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/tornado/netutil.py&quot;, line 198, in bind_sockets</span><br><span class="line">    sock.bind(sockaddr)</span><br><span class="line">OSError: [Errno 48] Address already in use</span><br></pre></td></tr></table></figure>

<p>根据报错提示，找到 tornado/netutil.py sock.bind(sockaddr) 方法，上面添加一个打印方法</p>
<p>print(‘====’, sockaddr)</p>
<p>重新执行 pyspider all</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">==== (&#x27;127.0.0.1&#x27;, 23333)</span><br><span class="line">==== (&#x27;0.0.0.0&#x27;, 5000)</span><br></pre></td></tr></table></figure>

<p>查看端口使用情况，kill 掉 PID</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof -i:25555</span><br><span class="line">COMMAND     PID  USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line">phantomjs 51059  xxx    7u  IPv4 0x644470676405ed1d      0t0  TCP *:25555 (LISTEN)</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">kill</span> 掉PID 51059</span></span><br><span class="line">kill 51059</span><br><span class="line">COMMAND    PID   USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line">com.apple  910 	 xxx   22u  IPv4 0x13685d2d3155f357      0t0  TCP commplex-main </span><br></pre></td></tr></table></figure>

<p>5000端口kill掉再查看端口还是一直被 commplex-main  使用，这个需要关掉 共享-隔空投送接收器才行，再kill</p>
<p><code>pyspider all</code> 在python3.8 3.9 3.10 环境执行都报错提示，放弃了还是使用python3.7版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">_pickle.PicklingError: Can&#x27;t pickle &lt;function cli at 0x7fbbf73674c0&gt;: it&#x27;s not the same object as pyspider.run.cli</span><br></pre></td></tr></table></figure>



<h6 id="1-8-2-Scrapy"><a href="#1-8-2-Scrapy" class="headerlink" title="1.8.2 Scrapy"></a>1.8.2 Scrapy</h6><p>十分强大的爬虫框架</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install scrapy</span><br></pre></td></tr></table></figure>

<p>验证： 命令行输入 scrapy</p>
<h6 id="1-8-3-Scrapy-Splash"><a href="#1-8-3-Scrapy-Splash" class="headerlink" title="1.8.3 Scrapy-Splash"></a>1.8.3 Scrapy-Splash</h6><p>Scrapy-Splash 是一个 Scrapy 中支持 JavaScript 渲染的工具</p>
<p>安装分两部分：</p>
<ul>
<li>Splash 服务安装</li>
</ul>
<p>通过 Docker安装，安装后会启动一个 Splash 服务，可以通过它的接口来实现 JavaScript 页面的加载</p>
<p>安装 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -p 8050:8050 scrapinghub&#x2F;splash</span><br></pre></td></tr></table></figure>

<p>Scrapy-Splash 会使用 Splash 的 HTTP API 进行页面渲染，安装 Splash 来提供渲染服务</p>
<p>安装完成后 Splash 已经在 8050 上运行了， 打开 <a href="http://localhost:8050/">http://localhost:8050</a> 即可看到 Splash 的主页</p>
<p>也可以直接安装在远程服务器上，在服务器上以守护态运行 Splash 即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8050:8050 scrapinghub&#x2F;splash</span><br></pre></td></tr></table></figure>

<p>-d 参数代表将 Docker 容器以守护态运行，这样终端远程服务器连接后，不会终止 Splash 服务的运行</p>
<ul>
<li>Scrapy-Splash 的 Python 库安装</li>
</ul>
<p>安装之后即可在 Scrapy 中使用 Splash 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install scrapy-splash</span><br></pre></td></tr></table></figure>

<h6 id="1-8-4-Scrapy-Redis"><a href="#1-8-4-Scrapy-Redis" class="headerlink" title="1.8.4 Scrapy-Redis"></a>1.8.4 Scrapy-Redis</h6><p>Scrapy 的分布式扩展模块，有了它，可以方便实现 Scrapy 分布式爬虫的搭建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install scrapy-redis</span><br></pre></td></tr></table></figure>



<h5 id="1-9-部署相关库安装"><a href="#1-9-部署相关库安装" class="headerlink" title="1.9 部署相关库安装"></a>1.9 部署相关库安装</h5><p>如果想要大规模抓取数据，就会用到分布式爬虫，</p>
<h6 id="1-9-1-Docker"><a href="#1-9-1-Docker" class="headerlink" title="1.9.1 Docker"></a>1.9.1 Docker</h6><p>Docker 是一种容器技术，可以将应用和环境等进行打包，形成一个独立的，类似 iOS APP 形式的应用</p>
<p>这个应用可以被分发到任意一个支持 Docker 的环境中，通过简单的命令即可运行</p>
<p>安装 Docker for Mac，如果系统不满足要求可以安装 Docker Toolbox</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install --cask --appdir&#x3D;&#x2F;Applications docker</span><br></pre></td></tr></table></figure>

<p>运行 Docker 后，菜单栏出现一个小鲸鱼图标，展开菜单点击 Start 即可启动，随后就可以在命令行下使用 Docker 命令了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<ul>
<li>镜像加速</li>
</ul>
<p>运行测试命令时，会发现它首先会下载一个 Hello World 的镜像，然后将其运行</p>
<p>下载镜像有时候会非常慢，因为默认是从国外 Docker Hub 下载的，为了提高下载速度，可以使用国内镜像来加速</p>
<p>推荐的 Docker 加速器有 <a href="https://daocloud.io/mirror">DaoCloud</a> 和 <a href="https://cr.console.aliyun.com/#/accelerator">阿里云</a> </p>
<h6 id="1-9-2-Scrapyd"><a href="#1-9-2-Scrapyd" class="headerlink" title="1.9.2 Scrapyd"></a>1.9.2 Scrapyd</h6><p>用于部署和运行 Scrapy 项目的工具，有了它，可以将写好的 Scrapy 项目上传到云主机并通过 API 来控制它</p>
<p>Scrapy 项目部署，基本上都使用 Linux 主机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install scrapyd</span><br></pre></td></tr></table></figure>



<h6 id="1-9-3-Scrapyd-Client"><a href="#1-9-3-Scrapyd-Client" class="headerlink" title="1.9.3 Scrapyd-Client"></a>1.9.3 Scrapyd-Client</h6><p>将 Scrapy 代码部署到远程 Scrapyd 的时候，第一步就是要将代码打包为 EGG 文件，再将 EGG 文件上传到远程主机。</p>
<p>Scrapyd-Client 实现了这些功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install scrapyd-client</span><br></pre></td></tr></table></figure>

<p>安装成功后会有一个可用命令，scrapyd-deploy 即部署命令</p>
<h6 id="1-9-4-Scrapyd-API-安装"><a href="#1-9-4-Scrapyd-API-安装" class="headerlink" title="1.9.4 Scrapyd API 安装"></a>1.9.4 Scrapyd API 安装</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install python-scrapyd-api</span><br></pre></td></tr></table></figure>

<p>安装好了 Scrapyd 之后，我们可以直接请求它提供的 API 来获取当前主机的 Scrapy 任务运行状况</p>
<p>比如 主机 IP 192.168.1.1 ，可以运行如下命令获取当前主机所有 Scrapy 项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;localhost:6800&#x2F;listproject.json</span><br></pre></td></tr></table></figure>

<p>返回结果是字符串，通过解析字符串就可以得到当前主机的所有项目</p>
<p>不过这种方式来获取任务状态还是繁琐，所以 Scrapyd API 为它做了一层封装</p>
<ul>
<li>验证安装</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapyd_api <span class="keyword">import</span> ScrapydAPI</span><br><span class="line">scrapyd = ScrapydAPI(<span class="string">&#x27;http://localhost:6800&#x27;</span>)</span><br><span class="line">print(scrapyd.list_project())</span><br></pre></td></tr></table></figure>

<p>这样可以用Python 直接来获取各个主机上 Scrapy 任务的运行状态了</p>
<h6 id="1-9-5-Scrapyrt"><a href="#1-9-5-Scrapyrt" class="headerlink" title="1.9.5 Scrapyrt"></a>1.9.5 Scrapyrt</h6><p>Scrapyrt 为 Scrapy 提供了一个调度的 HTTP接口，有了它，就不需要执行 Scrapy 命令，而是通过请求一个 HTTP 接口来调度 Scrapy 任务了</p>
<p>Scrapyrt 比 Scrapyd 更轻量，如果不需要分布式多任务的话，可以简单使用 Scrapyrt 实现远程 Scrapy 任务的调度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install scrapyrt</span><br></pre></td></tr></table></figure>

<p>在任意一个 Scrapy 项目中运行 <code>scrapyrt</code>  命令来启动 HTTP 服务</p>
<p>运行之后会默认会在 9080 端口上启动服务</p>
<p>更换端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapyrt -p 9081</span><br></pre></td></tr></table></figure>

<h6 id="1-9-6-Gerapy"><a href="#1-9-6-Gerapy" class="headerlink" title="1.9.6 Gerapy"></a>1.9.6 Gerapy</h6><p>Scrapy 分布式管理模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install gerapy</span><br></pre></td></tr></table></figure>























]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>RunLoop</title>
    <url>/2021/05/27/RunLoop/</url>
    <content><![CDATA[<p>[TOC]</p>
<h4 id="RunLoop-是什么"><a href="#RunLoop-是什么" class="headerlink" title="RunLoop 是什么"></a>RunLoop 是什么</h4><p><code>RunLoop</code> 通过内部维护的事件循环（Event Loop）来对事件/消息进行管理的一个对象<br>没有消息需要处理时，休眠以避免资源占用，由用户态切换到内核态<br>有消息需要处理时，立刻被唤醒，由内核态切换到用户态·</p>
<p><code>RunLoop</code> 是一个对象，循环中处理程序运行过程中出现的各种事件（如触摸事件、UI刷新事件、定时器事件、Selector事件）和消息，从而保持程序持续运行，没有事件处理的时候会进入睡眠，节省 CPU 资源，提高程序性能</p>
<p><code>RunLoop</code> 是一个接收处理异步消息事件的循环，一个循环中，等待事件发生，然后将事件送到能处理它的地方</p>
<ul>
<li><p>NSRunLoop<br><code>CFRunLoopRef</code> 的封装，提供了面向对象的 API，这些 API 不是线程安全的</p>
</li>
<li><p>CFRunLoopRef<br><code>CoreFoundation</code> 框架内的，提供了纯 C 函数的 API，这些 API 都是线程安全的</p>
</li>
</ul>
<h4 id="RunLoop-作用"><a href="#RunLoop-作用" class="headerlink" title="RunLoop 作用"></a>RunLoop 作用</h4><ul>
<li>保持程序持续运行 </li>
<li>处理 APP 中的各种事件（触摸、定时器、performSelector）</li>
<li>节省 CPU 资源，提高程序性能，该做事做事，该休息休息</li>
</ul>
<h4 id="RunLoop-源码"><a href="#RunLoop-源码" class="headerlink" title="RunLoop 源码"></a>RunLoop 源码</h4><p><code>CFRunLoop</code> 源码 <a href="http://opensource.apple.com/tarballs/CF/">下载地址</a></p>
<p>苹果提供了两个获取 <code>RunLoop</code> 的函数 <code>CFRunLoopGetMain()</code>   <code>CFRunLoopGetCurrent()</code></p>
<p>进入 <code>CFRunLoopGetMain()</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">CFRunLoopRef <span class="title">CFRunLoopGetMain</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    CHECK_FOR_FORK();</span><br><span class="line">    <span class="keyword">static</span> CFRunLoopRef __main = <span class="literal">NULL</span>; <span class="comment">// no retain needed</span></span><br><span class="line">    <span class="comment">//pthread_main_thread_np 主线程</span></span><br><span class="line">    <span class="keyword">if</span> (!__main) __main = _CFRunLoopGet0(pthread_main_thread_np()); <span class="comment">// no CAS needed</span></span><br><span class="line">    <span class="keyword">return</span> __main;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入 <code>_CFRunLoopGet0</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局的 Dictionary ke 是 pthread_t，value 是 CFRunLoopRef</span></span><br><span class="line"><span class="keyword">static</span> CFMutableDictionaryRef __CFRunLoops = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//访问 loopsDic 时的锁</span></span><br><span class="line"><span class="keyword">static</span> CFLock_t loopsLock = CFLockInit;</span><br><span class="line"></span><br><span class="line"><span class="comment">// should only be called by Foundation</span></span><br><span class="line"><span class="comment">// t==0 is a synonym for &quot;main thread&quot; that always works</span></span><br><span class="line"><span class="comment">//获取一个 pthread 对应的 RunLoop</span></span><br><span class="line">CF_EXPORT CFRunLoopRef _CFRunLoopGet0(<span class="keyword">pthread_t</span> t) &#123;</span><br><span class="line">  	<span class="comment">//如果 t 不存在，默认为主线程</span></span><br><span class="line">    <span class="keyword">if</span> (pthread_equal(t, kNilPthreadT)) &#123;</span><br><span class="line">			  t = pthread_main_thread_np();</span><br><span class="line">    &#125;</span><br><span class="line">    __CFLock(&amp;loopsLock);</span><br><span class="line">    <span class="keyword">if</span> (!__CFRunLoops) &#123;</span><br><span class="line">        __CFUnlock(&amp;loopsLock);</span><br><span class="line">      </span><br><span class="line">			 CFMutableDictionaryRef dict = CFDictionaryCreateMutable(kCFAllocatorSystemDefault, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;kCFTypeDictionaryValueCallBacks);</span><br><span class="line">      <span class="comment">//通过主线程 创建主运行循环</span></span><br><span class="line">			 CFRunLoopRef mainLoop = __CFRunLoopCreate(pthread_main_thread_np());</span><br><span class="line">			 CFDictionarySetValue(dict, pthreadPointer(pthread_main_thread_np()), mainLoop);</span><br><span class="line">      </span><br><span class="line">			 <span class="keyword">if</span> (!OSAtomicCompareAndSwapPtrBarrier(<span class="literal">NULL</span>, dict, (<span class="keyword">void</span> * <span class="keyword">volatile</span> *)&amp;__CFRunLoops)) &#123;</span><br><span class="line">	    		CFRelease(dict);</span><br><span class="line">			 &#125;</span><br><span class="line">			 CFRelease(mainLoop);</span><br><span class="line">       __CFLock(&amp;loopsLock);</span><br><span class="line">    &#125;</span><br><span class="line">    CFRunLoopRef loop = (CFRunLoopRef)CFDictionaryGetValue(__CFRunLoops, pthreadPointer(t));</span><br><span class="line">    __CFUnlock(&amp;loopsLock);</span><br><span class="line">    <span class="keyword">if</span> (!loop) &#123;</span><br><span class="line">				CFRunLoopRef newLoop = __CFRunLoopCreate(t);</span><br><span class="line">      	__CFLock(&amp;loopsLock);</span><br><span class="line">				loop = (CFRunLoopRef)CFDictionaryGetValue(__CFRunLoops, pthreadPointer(t));</span><br><span class="line">				<span class="keyword">if</span> (!loop) &#123;</span><br><span class="line">	   		 		CFDictionarySetValue(__CFRunLoops, pthreadPointer(t), newLoop);</span><br><span class="line">	    			loop = newLoop;</span><br><span class="line">				&#125;</span><br><span class="line">      </span><br><span class="line">       	<span class="comment">// don&#x27;t release run loops inside the loopsLock, because CFRunLoopDeallocate may end up taking it</span></span><br><span class="line">       	__CFUnlock(&amp;loopsLock);</span><br><span class="line">			 	CFRelease(newLoop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pthread_equal(t, pthread_self())) &#123;</span><br><span class="line">        _CFSetTSD(__CFTSDKeyRunLoop, (<span class="keyword">void</span> *)loop, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == _CFGetTSD(__CFTSDKeyRunLoopCntr)) &#123;</span><br><span class="line">            _CFSetTSD(__CFTSDKeyRunLoopCntr, (<span class="keyword">void</span> *)(PTHREAD_DESTRUCTOR_ITERATIONS<span class="number">-1</span>), (<span class="keyword">void</span> (*)(<span class="keyword">void</span> *))__CFFinalizeRunLoop);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> loop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>RunLoop 主要处理一下 6 类事件</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ <span class="comment">//observer源</span></span><br><span class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__ <span class="comment">//block应用</span></span><br><span class="line">__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ <span class="comment">//gcd主队列</span></span><br><span class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ <span class="comment">//调用timer</span></span><br><span class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ <span class="comment">//响应source0</span></span><br><span class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ <span class="comment">//响应source1</span></span><br></pre></td></tr></table></figure>

<h4 id="RunLoop-与线程"><a href="#RunLoop-与线程" class="headerlink" title="RunLoop 与线程"></a>RunLoop 与线程</h4><p><code>RunLoop</code> 与线程是一一对应的，其关系保存在一个全局的 <code>Dictionary</code> 里</p>
<p><code>key</code> 是 <code>pthread_t</code> ，<code>value</code> 是 <code>CFRunLoopRef</code></p>
<p>线程刚创建时并没有 <code>RunLoop</code>，如果你不主动获取，那它一直都不会有</p>
<p><code>RunLoop</code> 的创建发生在第一次获取时，<code>RunLoop</code> 的销毁发生在线程结束时</p>
<p>子线程 RunLoop 默认不开启</p>
<h4 id="RunLoop-结构"><a href="#RunLoop-结构" class="headerlink" title="RunLoop 结构"></a>RunLoop 结构</h4><h5 id="CFRunLoopRef"><a href="#CFRunLoopRef" class="headerlink" title="CFRunLoopRef"></a>CFRunLoopRef</h5><p><code>RunLoop</code> 底层就是一个 <code>CFRunLoopRef</code> 结构体</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CFRunLoop.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoop</span> * <span class="title">CFRunLoopRef</span>;</span></span><br><span class="line"><span class="comment">// CFRunLoop.c</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoop</span> &#123;</span></span><br><span class="line">    <span class="keyword">pthread_t</span> _pthread;  <span class="comment">// 与线程一一对应</span></span><br><span class="line">    CFMutableSetRef _commonModes;</span><br><span class="line">    CFMutableSetRef _commonModeItems;</span><br><span class="line">    CFRunLoopModeRef _currentMode;</span><br><span class="line">    CFMutableSetRef _modes;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>_pthread：<code>RunLoop</code> 与线程是一一对应关系</li>
<li>_commonModes：存储 <code>NSString</code> 对象的集合（Mode名称）</li>
<li>_commonModeItems：存储被标记为通用模式的 <code>Source0/Source1/Timer/Observer</code></li>
<li>_currentMode：<code>RunLoop</code> 当前的运行模式</li>
<li>_modes：存储 <code>RunLoop</code> 所有的 <code>Mode</code> 模式 </li>
</ul>
<h5 id="CFRunLoopModeRef"><a href="#CFRunLoopModeRef" class="headerlink" title="CFRunLoopModeRef"></a>CFRunLoopModeRef</h5><img src="RunLoop_0.png" alt="RunLoop_0" style="zoom:50%;" />

<p>一个 <code>RunLoop</code> 包含若干个 <code>Mode</code>，每个 <code>Mode</code> 又包含若干个 <code>Source/Timer/Observer</code></p>
<p>启动时只能选择其中一个 <code>Mode</code>，作为 <code>currentMode</code></p>
<p>如果要切换 <code>Mode</code>，只能退出 <code>Loop</code> ，再重新指定一个 <code>Mode</code> 进入，这样做主要为了分隔开不同组的 <code>Source/Timer/Observer</code> ，让其互不影响</p>
<p>数据结构：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CFRunLoop.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopMode</span> *<span class="title">CFRunLoopModeRef</span>;</span></span><br><span class="line"><span class="comment">// CFRunLoop.c</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopMode</span> &#123;</span></span><br><span class="line">    CFStringRef _name;             <span class="comment">// mode 类型，如：NSDefaultRunLoopMode</span></span><br><span class="line">    CFMutableSetRef _sources0;     <span class="comment">// CFRunLoopSourceRef</span></span><br><span class="line">    CFMutableSetRef _sources1;     <span class="comment">// CFRunLoopSourceRef</span></span><br><span class="line">    CFMutableArrayRef _observers;  <span class="comment">// CFRunLoopObserverRef</span></span><br><span class="line">    CFMutableArrayRef _timers;     <span class="comment">// CFRunLoopTimerRef</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>一个 <code>Mode</code> 可以将自己标记为 <code>Common</code> 属性 （通过将其 <code>ModeName</code> 添加到 <code>RunLoop</code> 的 <code>commonModes</code> 中），每当 <code>RunLoop</code> 的内容发生变化时，<code>RunLoop</code> 都会自动将 <code>_commonModeItems</code> 里的 <code>Source/Timer/Observer</code> 同步到具有 <code>Common</code> 标记的所有 <code>Mode</code> 里</p>
<p>举例：</p>
<p>当你创建一个 <code>Timer</code> 并加到 <code>Default Mode</code> 时，<code>Timer</code> 会得到回调，但滑动 <code>ScrollView</code>  时，<code>RunLoop</code> 会将 <code>Mode</code> 切换为 <code>TrackingRunLoopMode</code> ，这时 <code>Timer</code> 就不会被回调</p>
<p>一种办法是将这个 <code>Timer</code> 分别加入到这两个 <code>Mode</code> ，还有一种方式就是将 <code>Timer</code> 加入到顶层 <code>RunLoop</code> 的 <code>commonModeItems</code> 中，<code>commonModeItems</code> 被 <code>RunLoop</code> 自动更新到所有具有 <code>Common</code> 属性的 <code>Mode</code> </p>
<ul>
<li>RunLoop 常见模式<ul>
<li>NSDefaultRunLoopModel 默认 Mode，通常主线程在这个模式下运行</li>
<li>UITrackingRunLoopMode 追踪 Mode，保证 ScrollView 滑动顺畅，不受其它 Mode 影响</li>
<li>UIInitializationRunLoopMode 程序启动后过度 Mode，启动完成后就不使用</li>
<li>NSRunLoopCommonModes 不是实际存在的一种模式，只是一个标记，同步 <code>Source/Timer/Observer</code>到多个 Mode 中的技术方案</li>
</ul>
</li>
</ul>
<h5 id="CFRunLoopSourceRef"><a href="#CFRunLoopSourceRef" class="headerlink" title="CFRunLoopSourceRef"></a>CFRunLoopSourceRef</h5><p>事件产生的地方，有两个版本 <code>Source0</code> 和 <code>Source1</code></p>
<p><code>__CFRunLoopSource</code> 中的共用体 <code>union</code> 中的 <code>version0</code> 和 <code>version1</code> 就分别对应 <code>Source0</code> 和 <code>Source1</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CFRunLoop.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopSource</span> * <span class="title">CFRunLoopSourceRef</span>;</span></span><br><span class="line"><span class="comment">// CFRunLoop.m</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopSource</span> &#123;</span></span><br><span class="line">    CFRuntimeBase _base;</span><br><span class="line">    <span class="keyword">uint32_t</span> _bits;</span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> _lock;</span><br><span class="line">    CFIndex _order;                         <span class="comment">/* immutable */</span></span><br><span class="line">    CFMutableBagRef _runLoops;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">	    CFRunLoopSourceContext  version0;	<span class="comment">/* immutable, except invalidation */</span></span><br><span class="line">      CFRunLoopSourceContext1 version1;	<span class="comment">/* immutable, except invalidation */</span></span><br><span class="line">    &#125; _context;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Source0</code></li>
</ul>
<p>只包含了一个回调（函数指针），不能主动触发事件，使用时需要先调用 <code>CFRunLoopSourceSignal(source)</code> 将 <code>Source</code> 标记为待处理，然后手动调用 <code>CFRunLoopWakeUp(runloop) </code> 唤醒 <code>RunLoop</code> ，让其处理事件<br>表示非系统事件，即用户自定义的事件</p>
<ul>
<li><code>Source1</code></li>
</ul>
<p>包含了一个 <code>mach_port</code> 和一个回调（函数指针），被用于通过内核和其它线程相互发送消息，这种 <code>Source</code> 能主动唤醒 <code>RunLoop</code> 线程<br>表示系统事件，主要负责底层通讯，具备唤醒能力</p>
<h5 id="CFRunLoopTimerRef"><a href="#CFRunLoopTimerRef" class="headerlink" title="CFRunLoopTimerRef"></a>CFRunLoopTimerRef</h5><p><code>CFRunLoopTimerRef</code> 和 <code>NSTimer</code> 是对象桥接（toll-free-bridge）的，可以相互转换</p>
<p><code>performSelector:withObject:afterDelay:</code> 方法会创建 <code>timer</code> 并添加到 <code>RunLoop</code> 中</p>
<h5 id="CFRunLoopObserverRef"><a href="#CFRunLoopObserverRef" class="headerlink" title="CFRunLoopObserverRef"></a>CFRunLoopObserverRef</h5><p>观察者，用来监听 <code>RunLoop</code> 的 6 种活动状态</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Run Loop Observer Activities */</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">CF_OPTIONS</span><span class="params">(CFOptionFlags, CFRunLoopActivity)</span> </span>&#123;</span><br><span class="line">    kCFRunLoopEntry = (<span class="number">1U</span>L &lt;&lt; <span class="number">0</span>),          <span class="comment">// 即将进入 RunLoop</span></span><br><span class="line">    kCFRunLoopBeforeTimers = (<span class="number">1U</span>L &lt;&lt; <span class="number">1</span>),   <span class="comment">// 即将处理 Timers</span></span><br><span class="line">    kCFRunLoopBeforeSources = (<span class="number">1U</span>L &lt;&lt; <span class="number">2</span>),  <span class="comment">// 即将处理 Sources</span></span><br><span class="line">    kCFRunLoopBeforeWaiting = (<span class="number">1U</span>L &lt;&lt; <span class="number">5</span>),  <span class="comment">// 即将进入休眠</span></span><br><span class="line">    kCFRunLoopAfterWaiting = (<span class="number">1U</span>L &lt;&lt; <span class="number">6</span>),   <span class="comment">// 刚从休眠中唤醒</span></span><br><span class="line">    kCFRunLoopExit = (<span class="number">1U</span>L &lt;&lt; <span class="number">7</span>),           <span class="comment">// 即将退出 RunLoop</span></span><br><span class="line">    kCFRunLoopAllActivities = <span class="number">0x0FFFFFFF</span>U  <span class="comment">// 表示以上所有状态</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="RunLoop-启动"><a href="#RunLoop-启动" class="headerlink" title="RunLoop 启动"></a>RunLoop 启动</h4><p><code>iOS</code> 程序能保持持续运行的原因是在 <code>main()</code> 函数中调用了 <code>UIApplicationMain</code> 函数，这个函数内部会启动主线程的 <code>RunLoop</code></p>
<img src="bt.png" alt="bt" style="zoom:80%;" />

<p>看到，在 <code>UIApplicationMain</code> 函数中调用了 Core Foundation 框架下的 <code>CFRunLoopRunSpecific</code> 函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">SInt32 <span class="title">CFRunLoopRunSpecific</span><span class="params">(CFRunLoopRef rl, CFStringRef modeName, CFTimeInterval seconds, Boolean returnAfterSourceHandled)</span> </span>&#123;     <span class="comment">/* DOES CALLOUT */</span></span><br><span class="line">    CHECK_FOR_FORK();</span><br><span class="line">    <span class="keyword">if</span> (__CFRunLoopIsDeallocating(rl)) <span class="keyword">return</span> kCFRunLoopRunFinished;</span><br><span class="line">    __CFRunLoopLock(rl);</span><br><span class="line">    <span class="comment">//根据 modeName 找到当前运行的 mode</span></span><br><span class="line">    CFRunLoopModeRef currentMode = __CFRunLoopFindMode(rl, modeName, <span class="literal">false</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">volatile</span> _per_run_data *previousPerRun = __CFRunLoopPushPerRunData(rl);</span><br><span class="line">    CFRunLoopModeRef previousMode = rl-&gt;_currentMode;</span><br><span class="line">    rl-&gt;_currentMode = currentMode;</span><br><span class="line">    <span class="keyword">int32_t</span> result = kCFRunLoopRunFinished;</span><br><span class="line">  <span class="comment">//通知 Observer 即将进入 RunLoop</span></span><br><span class="line">	<span class="keyword">if</span> (currentMode-&gt;_observerMask &amp; kCFRunLoopEntry ) </span><br><span class="line">    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopEntry);</span><br><span class="line">  <span class="comment">//__CFRunLoopRun RunLoop 具体要做的事</span></span><br><span class="line">	result = __CFRunLoopRun(rl, currentMode, seconds, returnAfterSourceHandled, previousMode);</span><br><span class="line">	<span class="comment">//通知 Observer 即将退出 RunLoop</span></span><br><span class="line">  <span class="keyword">if</span> (currentMode-&gt;_observerMask &amp; kCFRunLoopExit ) </span><br><span class="line">    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="CFRunLoopRun"><a href="#CFRunLoopRun" class="headerlink" title="__CFRunLoopRun"></a>__CFRunLoopRun</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int32_t</span> __CFRunLoopRun(CFRunLoopRef rl, CFRunLoopModeRef rlm, CFTimeInterval seconds, Boolean stopAfterHandle, CFRunLoopModeRef previousMode) &#123;</span><br><span class="line">    <span class="keyword">int32_t</span> retVal = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 通知Observers：即将处理Timers</span></span><br><span class="line">        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeTimers);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通知Observers：即将处理Sources</span></span><br><span class="line">        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeSources);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通知Observers：即将处理Blocks</span></span><br><span class="line">        __CFRunLoopDoBlocks(rl, rlm);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理Sources0</span></span><br><span class="line">        <span class="keyword">if</span> (__CFRunLoopDoSources0(rl, rlm, stopAfterHandle)) &#123;</span><br><span class="line">            <span class="comment">// 处理Blocks</span></span><br><span class="line">            __CFRunLoopDoBlocks(rl, rlm);</span><br><span class="line">        &#125;</span><br><span class="line">        Boolean poll = sourceHandledThisLoop || (<span class="number">0U</span>LL == timeout_context-&gt;termTSR);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断有无Sources1</span></span><br><span class="line">        <span class="keyword">if</span> (__CFRunLoopServiceMachPort(dispatchPort, &amp;msg, <span class="keyword">sizeof</span>(msg_buffer), &amp;livePort, <span class="number">0</span>, &amp;voucherState, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">            <span class="comment">// 如果有Sources1 就跳转到handle_msg</span></span><br><span class="line">            <span class="keyword">goto</span> handle_msg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通知Observers：即将休眠</span></span><br><span class="line">        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeWaiting);</span><br><span class="line">        __CFRunLoopSetSleeping(rl);</span><br><span class="line">           </span><br><span class="line">        <span class="comment">// 等待别的消息来唤醒当前线程</span></span><br><span class="line">        __CFRunLoopServiceMachPort(waitSet, &amp;msg, <span class="keyword">sizeof</span>(msg_buffer), &amp;livePort, poll ? <span class="number">0</span> : TIMEOUT_INFINITY, &amp;voucherState, &amp;voucherCopy);</span><br><span class="line">        </span><br><span class="line">        __CFRunLoopUnsetSleeping(rl);</span><br><span class="line">        <span class="comment">// 通知Observers：结束睡眠</span></span><br><span class="line">        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopAfterWaiting);</span><br><span class="line"></span><br><span class="line">        handle_msg:</span><br><span class="line">        <span class="keyword">if</span> (被Timer唤醒) &#123;</span><br><span class="line">            <span class="comment">// 处理Timers</span></span><br><span class="line">            __CFRunLoopDoTimers(rl, rlm, mach_absolute_time()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (被GCD唤醒) &#123;</span><br><span class="line">            <span class="comment">// 处理GCD</span></span><br><span class="line">            __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 被Sources1唤醒</span></span><br><span class="line">            <span class="comment">// 处理Sources1</span></span><br><span class="line">            __CFRunLoopDoSource1(rl, rlm, rls) || sourceHandledThisLoop;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理Blocks</span></span><br><span class="line">        __CFRunLoopDoBlocks(rl, rlm);</span><br><span class="line">        <span class="keyword">if</span> (sourceHandledThisLoop &amp;&amp; stopAfterHandle) &#123;</span><br><span class="line">            <span class="comment">//事件已处理完</span></span><br><span class="line">            retVal = kCFRunLoopRunHandledSource;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeout_context-&gt;termTSR &lt; mach_absolute_time()) &#123;</span><br><span class="line">            <span class="comment">//超时</span></span><br><span class="line">            retVal = kCFRunLoopRunTimedOut;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__CFRunLoopIsStopped(rl)) &#123;</span><br><span class="line">            __CFRunLoopUnsetStopped(rl);</span><br><span class="line">            <span class="comment">//外部调用者强制停止</span></span><br><span class="line">            retVal = kCFRunLoopRunStopped;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rlm-&gt;_stopped) &#123;</span><br><span class="line">            rlm-&gt;_stopped = <span class="literal">false</span>;</span><br><span class="line">            retVal = kCFRunLoopRunStopped;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__CFRunLoopModeIsEmpty(rl, rlm, previousMode)) &#123;</span><br><span class="line">            <span class="comment">//mode为空，RunLoop结束</span></span><br><span class="line">            retVal = kCFRunLoopRunFinished;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span> == retVal);</span><br><span class="line">    <span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="RunLoop-事件循环机制"><a href="#RunLoop-事件循环机制" class="headerlink" title="RunLoop 事件循环机制"></a>RunLoop 事件循环机制</h5><p><code>RunLoop</code> 启动后首先会发送一个通知，通知观察者 RunLoop 即将启动</p>
<p>之后会通知将要处理 <code>Timer/Source0</code> 事件</p>
<p>处理 <code>Source0</code> 事件</p>
<p>如果有 <code>Source1</code> 需要处理，处理唤醒时收到的消息，之后跳回第2步</p>
<p>如果没有 <code>Source1</code> 要处理，此时线程将要休眠，同时发送通知给 Observer，发生从用户态到内核态的切换</p>
<p>线程进入休眠，等待唤醒</p>
<p>线程刚被唤醒，通知观察者</p>
<p>处理唤醒时收到的消息，之后回到第2步</p>
<p><img src="/2021/05/27/RunLoop/RunLoop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt="RunLoop事件循环"></p>
<h4 id="自动释放池-AutoReleasePool"><a href="#自动释放池-AutoReleasePool" class="headerlink" title="自动释放池 AutoReleasePool"></a>自动释放池 AutoReleasePool</h4><p>OC 的一种内存自动回收机制，将自动释放池 autoreleasepool 中变量的 release 时机延迟</p>
<p>将对象加入到自动释放池中，这个对象不会立即释放，而是等到 runloop 休眠或者超出 autoreleasepool 作用域之后才释放</p>
<h5 id="自动释放池原理"><a href="#自动释放池原理" class="headerlink" title="自动释放池原理"></a>自动释放池原理</h5><p>每个自动释放池都是由若干个 <code>AutoreleasePoolPage</code> 组成的双向链表结构</p>
<p>自动释放池本质是一个 <code>AutoreleasePoolPage 结构体对象</code> ，是一个栈结构存储的页</p>
<p>每一个 <code>AutoreleasePoolPage</code> 都是以双向链表形式连接</p>
<p>以栈为结点，通过双向链表的形式组合而成的数据结构</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">AutoreleasePage &#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> POOL_BOUNDARY nil <span class="comment">//边界对象（哨兵对象）</span></span></span><br><span class="line">	id *next;</span><br><span class="line">	AutoreleasePage *<span class="keyword">const</span> parent;</span><br><span class="line">	AutoreleasePage child;</span><br><span class="line">	<span class="keyword">pthread_t</span> <span class="keyword">const</span> thread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="autoreleasePool-在何时释放"><a href="#autoreleasePool-在何时释放" class="headerlink" title="autoreleasePool 在何时释放"></a>autoreleasePool 在何时释放</h5><p>APP 启动后，苹果在主线程 RunLoop 里注册了两个 Observer</p>
<p>第一个 Observer 监听事件是 Entry（即将进入Loop）创建自动释放池</p>
<p>第二个 Observer 监听两个事件，BeforeWaiting（准备进入休眠）释放旧的池并创建新池；Exit（即将退出 Loop）释放自动释放池</p>
<h4 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h4><h5 id="休眠状态的-RunLoop，通过哪种方式唤醒？"><a href="#休眠状态的-RunLoop，通过哪种方式唤醒？" class="headerlink" title="休眠状态的 RunLoop，通过哪种方式唤醒？"></a>休眠状态的 RunLoop，通过哪种方式唤醒？</h5><p>Source1、Timer、外部手动唤醒</p>
<h5 id="PerformSelector"><a href="#PerformSelector" class="headerlink" title="PerformSelector"></a>PerformSelector</h5><p>NSObject 的 <code>performSelector:afterDelay:</code>  、<code>performSelectorSelector:onThread:</code></p>
<p>实际内部会创建一个 Timer 并添加到当前线程的 RunLoop 中，如果当前线程没有 RunLoop，则方法会失效</p>
<h5 id="GCD-在-RunLoop-中的使用"><a href="#GCD-在-RunLoop-中的使用" class="headerlink" title="GCD 在 RunLoop 中的使用"></a>GCD 在 RunLoop 中的使用</h5><p>GCD 由子线程回到主线程，只有这种情况下才会触发 RunLoop，会触发 RunLoop 的 source1</p>
<p><a href="https://blog.ibireme.com/2015/05/18/runloop/">深入理解 RunLoop</a></p>
<p><a href="https://blog.csdn.net/weixin_42350379/article/details/104543184">深入浅出 RunLoop</a></p>
]]></content>
  </entry>
  <entry>
    <title>逆向-记录</title>
    <url>/2021/11/15/%E9%80%86%E5%90%91-%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="34d84f02f40336818a2be093b1cceca1b293d2bc77b8af3cd8bcf3feb34dcf28"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-爬取今日头条街拍</title>
    <url>/2022/04/14/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E7%88%AC%E5%8F%96%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1%E8%A1%97%E6%8B%8D/</url>
    <content><![CDATA[<h5 id="6-4-爬取今日头条街拍美图"><a href="#6-4-爬取今日头条街拍美图" class="headerlink" title="6.4 爬取今日头条街拍美图"></a>6.4 爬取今日头条街拍美图</h5><h6 id="抓取分析"><a href="#抓取分析" class="headerlink" title="抓取分析"></a>抓取分析</h6><p>打开今日头条首页 <a href="http://www.toutiao.com/">http://www.toutiao.com/</a>  搜索街拍</p>
<p>打开开发者工具，查看所有的网络请求，发现页面返回数据不是由 Ajax 加载的，是 HTML 类型，请求链接 </p>
<p><code>https://so.toutiao.com/search?dvpf=pc&amp;source=input&amp;keyword=街拍&amp;page_num=0&amp;pd=synthesis</code></p>
<p><img src="/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E7%88%AC%E5%8F%96%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1%E8%A1%97%E6%8B%8D/WeChat49f883417f3f8bd97ec5880e80066787.png" alt="WeChat49f883417f3f8bd97ec5880e80066787"></p>
<p>现在页面上显示有街拍-视频，街拍-图片，街拍讨论，其余显示的可以按分组显示，每组有标题和一些图片</p>
<p>现在需要抓取的就是分组标题和分组下的图片</p>
<p>先获取每页列表数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">page_num</span>):</span></span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  获取每页列表数据</span></span><br><span class="line"><span class="string">  :return: 列表html数据</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line">  params = &#123;</span><br><span class="line">      <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;dvpf&#x27;</span>: <span class="string">&#x27;pc&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;keyword&#x27;</span>: <span class="string">&#x27;街拍&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;page_num&#x27;</span>: page_num,</span><br><span class="line">      <span class="string">&#x27;pd&#x27;</span>: <span class="string">&#x27;synthesis&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  url = <span class="string">&#x27;https://so.toutiao.com/search?&#x27;</span> + urlencode(params)</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      r = requests.get(url, headers=headers)</span><br><span class="line">      <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">          <span class="keyword">return</span> r.text</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          print(<span class="string">&#x27;request get_page error&#x27;</span>)</span><br><span class="line">  <span class="keyword">except</span> requests.ConnectionError:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>接着从返回的 html 提取列表文章链接，通过正则提取</p>
<p>网站点击查看每条文章的链接是这种的</p>
<p> <a href="https://www.toutiao.com/article/7031340137846030856/?channel=&amp;source=search_tab">https://www.toutiao.com/article/7031340137846030856/?channel=&amp;source=search_tab</a></p>
<p>查看列表返回的 html 并没有找到完整的文章链接，需要自己拼接</p>
<p>正则提取列表 group_id，拼成完整文章链接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">html</span>):</span></span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  通过正则提取一页列表数据</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line">  pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;script type=application/json.*?(&#123;&quot;data&quot;:.*?&#125;&#125;&#125;)&lt;/script&gt;&#x27;</span>, re.S)</span><br><span class="line"></span><br><span class="line">  results = re.findall(pattern, html)</span><br><span class="line">  <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">      listItem = &#123;&#125;</span><br><span class="line">      <span class="built_in">dict</span> = json.loads(result)</span><br><span class="line">      group_id = <span class="built_in">dict</span>.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;group_id&#x27;</span>)</span><br><span class="line">      title = <span class="built_in">dict</span>.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> group_id != <span class="literal">None</span> <span class="keyword">and</span> title != <span class="literal">None</span>:</span><br><span class="line">          listItem[<span class="string">&#x27;title&#x27;</span>] = title</span><br><span class="line">          listItem[<span class="string">&#x27;group_id&#x27;</span>] = group_id</span><br><span class="line">          <span class="keyword">yield</span> listItem <span class="comment">#返回生成器</span></span><br></pre></td></tr></table></figure>

<p>进入文章获取响应页面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_article</span>(<span class="params">group_id</span>):</span></span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  获取文章html</span></span><br><span class="line"><span class="string">  :return: 文章html</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line">  params = &#123;</span><br><span class="line">      <span class="string">&#x27;channel&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;search_tab&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  url = <span class="string">&#x27;https://www.toutiao.com/article/&#x27;</span> + group_id</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      r = requests.get(url=url, params=params, headers=headers)</span><br><span class="line">      <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">          <span class="keyword">return</span> r.text</span><br><span class="line">  <span class="keyword">except</span> requests.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">      print(<span class="string">&#x27;Error:&#x27;</span>, e.args)</span><br></pre></td></tr></table></figure>

<p>解析文章页面，提取需要保存的图片链接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_article</span>(<span class="params">html</span>):</span></span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  提取图片数据</span></span><br><span class="line"><span class="string">  :return: 返回图片列表</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line">  pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;div class=&quot;pgc-img&quot;&gt;.*?src=&quot;(.*?)&quot;.*?alt=&quot;(.*?)&quot;&#x27;</span>, re.S)</span><br><span class="line">  results = re.findall(pattern, html)</span><br><span class="line">  images = []</span><br><span class="line">  <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">      image = &#123;&#125;</span><br><span class="line">      image[<span class="string">&#x27;url&#x27;</span>] = result[<span class="number">0</span>]</span><br><span class="line">      image[<span class="string">&#x27;title&#x27;</span>] = result[<span class="number">1</span>]</span><br><span class="line">      images.append(image)</span><br><span class="line">  <span class="keyword">return</span> images</span><br></pre></td></tr></table></figure>

<p>保存图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_image</span>(<span class="params">image</span>):</span></span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  保存图片</span></span><br><span class="line"><span class="string">  :param image: 图片对象&#123;title:xx,url:xx&#125;</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line">  image_path = <span class="string">&#x27;img&#x27;</span> + os.path.sep + image.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(image_path):</span><br><span class="line">      os.makedirs(image_path) <span class="comment"># 生成目录文件夹</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      resp = requests.get(image.get(<span class="string">&#x27;url&#x27;</span>))</span><br><span class="line">      <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">          file_path = image_path + os.path.sep + <span class="string">&#x27;&#123;file_name&#125;.&#123;file_suffix&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">              file_name=md5(resp.content).hexdigest(), <span class="comment">#使用图片md5值作为图片名</span></span><br><span class="line">              file_suffix=<span class="string">&#x27;jpg&#x27;</span></span><br><span class="line">          )</span><br><span class="line">          <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_path):</span><br><span class="line">              <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                  f.write(resp.content)</span><br><span class="line">              print(<span class="string">&#x27;Downloaded image path is %s&#x27;</span> % file_path)</span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">              print(<span class="string">&#x27;Already Downloaded&#x27;</span>, file_path)</span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">      print(e, <span class="string">&#x27;none123&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>根据 image 的 title 来创建文件夹，然后请求图片链接，获取图片的二进制数据，以二进制形式写入文件，图片的名称可以使用其内容的MD5值，这样可以去除重复</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;msToken=fftEubI251GAmJDZSNTUKj927FcCDPj7RE_XHLi_NMtm-cHnBx-iBxBVo4mygLcZI-dEjePff5pZeXl4c7mLta0KX2SDDPiTEslhfNOw0iNz; ttwid=1|xqpvNtm5D6xFmuFjl3WTtk_jkA4ybMYfqHLzIzKmi2Y|1649864470|16944aed776db4b21fa0d03d6e09c237023b5fc301a3df68c81d5ef03b17c355;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  list_html = get_page(<span class="number">0</span>)  <span class="comment"># 获取列表html</span></span><br><span class="line">  list_items = parse_page(list_html)  <span class="comment"># 获取文章列表</span></span><br><span class="line">  <span class="keyword">for</span> list_item <span class="keyword">in</span> list_items:</span><br><span class="line">      print(list_item)</span><br><span class="line">      article_html = get_article(list_item.get(<span class="string">&#x27;group_id&#x27;</span>))  <span class="comment"># 文章html</span></span><br><span class="line">      images = parse_article(article_html)  <span class="comment"># 提取图片数据</span></span><br><span class="line">      <span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">          save_image(image)</span><br></pre></td></tr></table></figure>



<p>书上还有多线程下载，作者最新代码给去掉了：不用Pool多进程是因为目前还没有办法实现跨进程共享Cookies</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#利用多线程的线程池，调用其 map() 方法实现多线程下载</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> Pool</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">offset</span>):</span></span><br><span class="line">  print(<span class="string">&quot;xx&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  pool = Pool()</span><br><span class="line">  GROUP_START = <span class="number">1</span></span><br><span class="line">  GROUP_END = <span class="number">20</span></span><br><span class="line">  groups = ([x * <span class="number">20</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(GROUP_START, GROUP_END + <span class="number">1</span>)])</span><br><span class="line">  pool.<span class="built_in">map</span>(main,groups)</span><br><span class="line">  pool.close()</span><br><span class="line">  pool.join()</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-验证码识别</title>
    <url>/2022/04/14/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<h4 id="8-验证码识别"><a href="#8-验证码识别" class="headerlink" title="8. 验证码识别"></a>8. 验证码识别</h4><p>识别验证码需要 tesserocr 库</p>
<h5 id="8-1-图形验证码识别"><a href="#8-1-图形验证码识别" class="headerlink" title="8.1 图形验证码识别"></a>8.1 图形验证码识别</h5><p>中国知网的注册页面有图形验证码 <a href="http://my.cnki.net/elibregister/commonRegister.aspx">http://my.cnki.net/elibregister/commonRegister.aspx</a></p>
<p>新标签打开图形验证码 <a href="http://my.cnki.net/elibregister/CheckCode.aspx">http://my.cnki.net/elibregister/CheckCode.aspx</a> 保存到本地命名为 code.jpg</p>
<p>案例网站 <a href="https://captcha7.scrape.center/">https://captcha7.scrape.center/</a> </p>
<h6 id="识别测试"><a href="#识别测试" class="headerlink" title="识别测试"></a>识别测试</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tesserocr</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  image = Image.<span class="built_in">open</span>(<span class="string">&#x27;code.jpg&#x27;</span>)</span><br><span class="line">  result = tesserocr.image_to_text(image)</span><br><span class="line">  print(result)</span><br></pre></td></tr></table></figure>

<p>新建 Image 对象，调用 tesserocr 的 image_to_text 方法，传入 Image 对象即可完成识别</p>
<p>还有个简单的方法，直接将图片文件转为字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(tesserocr.file_to_text(<span class="string">&#x27;code.jpg&#x27;</span>))</span><br></pre></td></tr></table></figure>

<img src="Python3网络爬虫开发实战-验证码识别/WeChat05c8c73a3a3040aeed742174d56d4712.png" alt="WeChat05c8c73a3a3040aeed742174d56d4712" style="zoom:60%;" />

<h6 id="验证码处理"><a href="#验证码处理" class="headerlink" title="验证码处理"></a>验证码处理</h6><p>有些验证码上有多余线条干扰图片的识别，这种情况需要做一些额外的处理，如转灰度、二值化等操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&#x27;code.png&#x27;</span>)</span><br><span class="line">print(np.array(image).shape)</span><br><span class="line">print(image.mode)</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">(<span class="number">38</span>, <span class="number">112</span>, <span class="number">4</span>)</span><br><span class="line">RGBA</span><br></pre></td></tr></table></figure>

<p>38 和 112 代表图片的高和宽，4 表示每个像素点的表示向量，4表示最后一维是一个长度为4的数组，分别代表 R、G、B、A，即一个像素点由 4 个数字表示。如果 image.mode 是 RGB，这个值就是 3</p>
<ul>
<li>mode：定义了图片类型和像素的位宽，9种类型</li>
</ul>
<p>1：像素用 1 位表示，Python 中表示为 True 或 False，即二值化</p>
<p>L：像素用 8 位表示，0~255，表示灰度图像，数值越小，颜色越黑</p>
<p>P：像素用 8 位表示，即调色板数据</p>
<p>RBG：像素用 3x8 位表示，即真彩色；RGBA：像素用 4x8 位表示，即有透明通道的真彩色</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">image = image.convert(<span class="string">&#x27;L&#x27;</span>) <span class="comment">#将图像转化为灰度图像</span></span><br><span class="line">image = image.convert(<span class="string">&#x27;1&#x27;</span>) <span class="comment">#将图像二值化处理</span></span><br><span class="line">image.show()</span><br></pre></td></tr></table></figure>

<ul>
<li>根据阈值删除图片中的干扰点</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&#x27;code.png&#x27;</span>)</span><br><span class="line">image = image.convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">threshold = <span class="number">50</span></span><br><span class="line">array = np.array(image) <span class="comment">#将图片转化为 NumPy 数组</span></span><br><span class="line">array = np.where(array &gt; threshold, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">image = Image.fromarray(array.astype(<span class="string">&#x27;uint8&#x27;</span>))</span><br><span class="line">image.show()</span><br></pre></td></tr></table></figure>

<p><img src="/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/WeChatb4e68e7e53ab397fa08b0b2a70230d24.png" alt="WeChatb4e68e7e53ab397fa08b0b2a70230d24"></p>
<p>将变量 threshold 设置为 50，代表灰度的阈值，接着将图片转化为 NumPy 数组，利用 NumPy 的 where 方法对数组进行筛选和处理，指定大于阈值的图片像素设置为 255，表示白色，否则设置为0，表示黑色</p>
<p>利用 Image 对象的 convert() 方法传入参数 L，即可将图片转化为灰度图像</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&#x27;code.jpg&#x27;</span>)</span><br><span class="line">image = image.convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">image.show()</span><br></pre></td></tr></table></figure>

<img src="Python3网络爬虫开发实战-验证码识别/WeChat502e6f6ba61943c5b6c39e8bc4d5c4f6.png" alt="WeChat502e6f6ba61943c5b6c39e8bc4d5c4f6" style="zoom:50%;" />

<p>传入 1 即可将图片进行二值化处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">image = image.convert(<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure>

<img src="Python3网络爬虫开发实战-验证码识别/WeChata596e46fadb12785691911910ffddb8e.png" alt="WeChata596e46fadb12785691911910ffddb8e" style="zoom:50%;" />

<p>还可以指定二值化的阈值，默认阈值127</p>
<p>不能直接转化原图，要将原图先转化为灰度图像，然后再指定二值化阈值，下面指定100，背景被去掉了部分会变得黑白分明</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&#x27;code.jpg&#x27;</span>)</span><br><span class="line">image = image.convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">table = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">100</span>:</span><br><span class="line">        table.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        table.append(<span class="number">1</span>)</span><br><span class="line">image = image.point(table, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">image.show()</span><br></pre></td></tr></table></figure>

<img src="Python3网络爬虫开发实战-验证码识别/WeChat506046716da1f482080b704db38e3f6f.png" alt="WeChat506046716da1f482080b704db38e3f6f" style="zoom:60%;" />

<p>针对一些有干扰的图片，可以做一些灰度和二值化处理，可以提高图片识别的正确率</p>
<h5 id="8-2-滑动验证码识别"><a href="#8-2-滑动验证码识别" class="headerlink" title="8.2 滑动验证码识别"></a>8.2 滑动验证码识别</h5><p>拖动拼合滑块的验证码</p>
<p>可以和原图对比检测的方式来识别缺口位置</p>
<p>同时获取两张图片，设定一个对比阈值，然后遍历两张图片，找出相同位置像素 RGB 差距超过此阈值的像素点，此像素点的位置就是缺口的位置</p>
<h6 id="模拟点击"><a href="#模拟点击" class="headerlink" title="模拟点击"></a>模拟点击</h6><p>头条登录页面测试</p>
<p>安居客登录页面测试 <a href="https://m.anjuke.com/member/login/?from=m_yhzx_dltx">https://m.anjuke.com/member/login/?from=m_yhzx_dltx</a></p>
<p>头条的滑动缺口是单独一张图片，大小为缺口大小</p>
<p>安居客滑动缺口带背景</p>
<p>模拟输入手机号点击验证码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.remote.webelement <span class="keyword">import</span> WebElement</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">wait = WebDriverWait(browser, <span class="number">20</span>)</span><br><span class="line">mobile = <span class="string">&#x27;18665906602&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_phone_input</span>():</span></span><br><span class="line">  phone_input = wait.until(EC.presence_of_element_located((By.ID, <span class="string">&#x27;dynamicPhone&#x27;</span>))) <span class="comment"># type: WebElement</span></span><br><span class="line">  phone_input.send_keys(mobile)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_code_button</span>():</span></span><br><span class="line">  button = wait.until(EC.element_to_be_clickable((By.ID, <span class="string">&#x27;dynamicVerifiCodeText&#x27;</span>))) <span class="comment"># type: WebElement</span></span><br><span class="line">  button.click()</span><br></pre></td></tr></table></figure>

<h6 id="识别缺口"><a href="#识别缺口" class="headerlink" title="识别缺口"></a>识别缺口</h6><h6 id="图片截取"><a href="#图片截取" class="headerlink" title="图片截取"></a>图片截取</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = wait.until(EC.presence_of_element_located((By.CLASS_NAME, <span class="string">&#x27;dvc-captcha__puzzleImg&#x27;</span>))) <span class="comment">#type: WebElement</span></span><br><span class="line">img.screenshot(<span class="string">&#x27;img1.png&#x27;</span>)</span><br><span class="line">shot2 = img.screenshot_as_png</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;img2.png&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(shot2)</span><br></pre></td></tr></table></figure>

<h5 id="使用OpenCV识别滑动验证码缺口"><a href="#使用OpenCV识别滑动验证码缺口" class="headerlink" title="使用OpenCV识别滑动验证码缺口"></a>使用OpenCV识别滑动验证码缺口</h5><p>测试地址 <a href="https://captcha1.scrape.center/">https://captcha1.scrape.center</a></p>
<p>安装库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install python-opencv</span><br></pre></td></tr></table></figure>

<p>步骤</p>
<p>对验证码图片进行高斯模糊滤波处理，消除部分噪声干扰</p>
<p>利用边缘检测算法，通过调整相应阈值识别出验证码图片中滑块的边缘</p>
<p>基于上一步得到的边缘轮廓信息，对比面积、位置、周长等特征筛选出最可能的轮廓</p>
<ul>
<li>高斯滤波</li>
</ul>
<p>高斯滤波用来去除图片中的一些噪声，减少噪声干扰，其实就是把图片模糊化，为下一步的边缘检测做好铺垫</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GaussianBlur</span>(<span class="params">src, ksize, sigmaX,dst=<span class="literal">None</span>, sigmaY=<span class="literal">None</span>, borderType=<span class="literal">None</span></span>)</span></span><br></pre></td></tr></table></figure>

<p>src：需要处理的图片，ksize：高斯滤波处理所用的高斯内核大小，需要传入一个元组，包含x和y两个元素</p>
<p>sigmaX：高斯内核函数在X方向上的标准偏差</p>
<p>ksize 可以取作 (5,5)，sigmaX 取作 0</p>
<p>经过高斯滤波后，图片会变模糊</p>
<ul>
<li>边缘检测</li>
</ul>
<p>由于验证码图片里的目标缺口通常具有比较明显的边缘，所以借助一些边缘检测算法，再加上调整阈值是可以找出缺口位置的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Canny</span>(<span class="params">image, threshold1, threshold2, edges=<span class="literal">None</span>,apertureSize=<span class="literal">None</span>,L2gradient=<span class="literal">None</span></span>)</span></span><br></pre></td></tr></table></figure>

<p>两个阈值，分别是最小判定临界点和最大判定临界点</p>
<p>apertureSize：用于查找图片渐变的索贝尔内核的大小</p>
<p>通常只需设置 threshold1, threshold2 的值，数值大小视具体图片而定，这里可以取200和450，边缘检测算法处理后，会保留一些比较明显的边缘信息</p>
<ul>
<li>轮廓提取</li>
</ul>
<p>进行边缘检测后处理后，可以看到图片中会保留比较明显的边缘信息，下一步可以利用 OpenCV 技术提取边缘轮廓</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">findContours(image,mode,method,contours=<span class="literal">None</span>,hierarch=<span class="literal">None</span>,offset=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>mode：定义轮廓的检索模式</p>
<p>method：定义轮廓的近似方法</p>
<p>。。。</p>
<h5 id="头条验证码识别"><a href="#头条验证码识别" class="headerlink" title="头条验证码识别"></a>头条验证码识别</h5><p>模拟点击显示滑动验证码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.remote.webelement <span class="keyword">import</span> WebElement</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> ndarray</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">wait = WebDriverWait(browser, <span class="number">20</span>)</span><br><span class="line">mobile = <span class="string">&#x27;186xxxx&#x27;</span></span><br><span class="line"></span><br><span class="line">browser.get(<span class="string">&#x27;https://www.toutiao.com&#x27;</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">button = wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">&#x27;//*[@id=&quot;root&quot;]/div/div[5]/div[2]/div[1]/div/a&#x27;</span>))) <span class="comment"># type: WebElement</span></span><br><span class="line">button.click()</span><br><span class="line"><span class="built_in">input</span> = wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">&#x27;//*[@id=&quot;login_modal_ele&quot;]/div/article/article/div[1]/div[1]/div[2]/article/div[1]/div/input&#x27;</span>))) <span class="comment"># type: WebElement</span></span><br><span class="line"><span class="built_in">input</span>.send_keys(mobile)</span><br><span class="line">code = browser.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;login_modal_ele&quot;]/div/article/article/div[1]/div[1]/div[2]/article/div[2]/div/span&#x27;</span>) <span class="comment"># type: WebElement</span></span><br><span class="line">code.click()</span><br></pre></td></tr></table></figure>

<p>获取验证码图片，保存到本地</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onload_save_img</span>(<span class="params">url, name</span>):</span></span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  下载链接图片</span></span><br><span class="line"><span class="string">  :param url: 图片链接</span></span><br><span class="line"><span class="string">  :param name: 保存图片名字</span></span><br><span class="line"><span class="string">  :return:</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line">  r = requests.get(url)</span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">      f.write(r.content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取验证码图片</span></span><br><span class="line">slider_elem = wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">&#x27;//*[@id=&quot;captcha_container&quot;]/div/div[2]/img[2]&#x27;</span>))) <span class="comment"># type: WebElement</span></span><br><span class="line">bk_elem = wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">&#x27;//*[@id=&quot;captcha-verify-image&quot;]&#x27;</span>))) <span class="comment"># type: WebElement</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存图片</span></span><br><span class="line">onload_save_img(slider_elem.get_attribute(<span class="string">&#x27;src&#x27;</span>), <span class="string">&#x27;slider_elem.jpg&#x27;</span>)</span><br><span class="line">onload_save_img(bk_elem.get_attribute(<span class="string">&#x27;src&#x27;</span>), <span class="string">&#x27;bk_elem.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以获取保存图片宽高</span></span><br><span class="line"><span class="comment">#缺口宽高</span></span><br><span class="line"><span class="comment">#width, height = slider_pic.shape[::-1]  # 取宽度和高度 -1 通道</span></span><br></pre></td></tr></table></figure>

<img src="Python3网络爬虫开发实战-验证码识别/bk_elem.jpg" alt="bk_elem" style="zoom:50%;" />

<img src="Python3网络爬虫开发实战-验证码识别/slider_elem.jpg" alt="slider_elem" style="zoom:67%;" />

<p>读取灰度图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取灰度图片 0灰度图片 1RBG图片</span></span><br><span class="line">slider_pic = cv2.imread(<span class="string">&#x27;slider_elem.jpg&#x27;</span>, <span class="number">0</span>)  <span class="comment"># type: ndarray</span></span><br><span class="line">bk_pic = cv2.imread(<span class="string">&#x27;bk_elem.jpg&#x27;</span>, <span class="number">0</span>)  <span class="comment"># type: ndarray</span></span><br></pre></td></tr></table></figure>

<img src="Python3网络爬虫开发实战-验证码识别/bk_resize.jpg" alt="bk_resize" style="zoom:80%;" />

<p><img src="/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/slider_resize.jpg" alt="slider_resize"></p>
<p>将保存图片进行缩放处理，缩放到网页上缺口图和背景图大小</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取缺口y值 计算缩放宽高</span></span><br><span class="line">slider_resize_y = slider_elem.location.get(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">slider_resize_w, slider_resize_h = (slider_elem.size.get(<span class="string">&#x27;width&#x27;</span>), slider_elem.size.get(<span class="string">&#x27;height&#x27;</span>))</span><br><span class="line">bk_resize_y = bk_elem.location.get(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">bk_resize_w, bk_resize_h = (bk_elem.size.get(<span class="string">&#x27;width&#x27;</span>), bk_elem.size.get(<span class="string">&#x27;height&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#对图片缩放处理后重新保存</span></span><br><span class="line">slider_resize = cv2.resize(slider_pic, (slider_resize_w, slider_resize_h))</span><br><span class="line">bk_resize = cv2.resize(bk_pic, (bk_resize_w, bk_resize_h))</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;slider_resize.jpg&#x27;</span>, slider_resize)</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;bk_resize.jpg&#x27;</span>, bk_resize)</span><br></pre></td></tr></table></figure>

<p>将背景图上缺口上下部分裁剪处理方便识别</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#裁剪方法 retval = img[y:y+h, x:x+w]  x,y 左上角坐标值 w,h 宽度、高度</span></span><br><span class="line"><span class="comment">#裁剪中间部分 (0,43,340,68)</span></span><br><span class="line">x,y,w,h = [<span class="number">0</span>, slider_resize_y-bk_resize_y, bk_resize_w, slider_resize_h]</span><br><span class="line">bk_cutimg = bk_resize[y:y+h, x:x+w]</span><br><span class="line"></span><br><span class="line"> cv2.imwrite(<span class="string">&#x27;bk_cutimg.jpg&#x27;</span>, bk_cutimg)</span><br></pre></td></tr></table></figure>

<p><img src="/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/bk_cutimg.jpg" alt="bk_cutimg"></p>
<p>消除噪声，边缘识别</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">canny</span>(<span class="params">image</span>):</span></span><br><span class="line">  <span class="comment">#高斯滤波 消除噪声干扰</span></span><br><span class="line">  image = cv2.GaussianBlur(image, (<span class="number">3</span>,<span class="number">3</span>), <span class="number">0</span>)</span><br><span class="line">  <span class="comment">#边缘识别</span></span><br><span class="line">  <span class="keyword">return</span> cv2.Canny(image, <span class="number">50</span>, <span class="number">150</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取滑块图</span></span><br><span class="line">slider_pic = cv2.imread(<span class="string">&#x27;slider_resize.jpg&#x27;</span>)</span><br><span class="line"><span class="comment"># 读取背景图</span></span><br><span class="line">bk_cutimg = cv2.imread(<span class="string">&#x27;bk_cutimg.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">slider_pic = canny(slider_pic)</span><br><span class="line">bk_cutimg = canny(bk_cutimg)</span><br><span class="line"></span><br><span class="line">cv2.imwrite(<span class="string">&#x27;canny_slider.jpg&#x27;</span>, slider_pic)</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;canny_bk.jpg&#x27;</span>, bk_cutimg)</span><br></pre></td></tr></table></figure>

<p><img src="/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/canny_bk.jpg" alt="canny_bk"></p>
<p><img src="/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/canny_slider.jpg" alt="canny_slider"></p>
<p>模板匹配，将匹配的缺口位置绘制出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#模板匹配</span></span><br><span class="line"><span class="comment"># 比较两张图的重叠区域</span></span><br><span class="line">result = cv2.matchTemplate(bk_cutimg, slider_pic, cv2.TM_CCORR_NORMED)  <span class="comment"># type: ndarray</span></span><br><span class="line">top, left = np.unravel_index(result.argmax(), result.shape)</span><br><span class="line">print(<span class="string">&#x27;滑块缺口位置&#x27;</span>, left, top, slider_resize_w, slider_resize_h)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制缺口矩形</span></span><br><span class="line">img_draw = bk_cutimg.copy()</span><br><span class="line">cv2.rectangle(img_draw, pt1=(left, top), pt2=(left + slider_resize_w, top + slider_resize_h), color=(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), thickness=<span class="number">5</span>)</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;img_draw.png&#x27;</span>, img_draw)</span><br></pre></td></tr></table></figure>

<p><img src="/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/img_draw.png" alt="img_draw"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#等待拖动滑块显示</span></span><br><span class="line">slider = wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">&#x27;//*[@id=&quot;secsdk-captcha-drag-wrapper&quot;]/div[2]&#x27;</span>)))  <span class="comment"># type: WebElement</span></span><br></pre></td></tr></table></figure>

<p>根据缺口位置，生成移动轨迹</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_track</span>(<span class="params">distance</span>):</span></span><br><span class="line">  print(<span class="string">&#x27;distance=&#x27;</span>, distance)</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  根据偏移量获取移动轨迹</span></span><br><span class="line"><span class="string">  :param distance: 偏移量</span></span><br><span class="line"><span class="string">  :return: 移动轨迹</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  rate = <span class="number">0.6</span></span><br><span class="line">  t = <span class="number">0.2</span></span><br><span class="line">  v = <span class="number">0</span></span><br><span class="line">  tracks = []</span><br><span class="line">  mid = rate * distance</span><br><span class="line">  s = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> s &lt; distance:</span><br><span class="line">      v0 = v</span><br><span class="line">      <span class="keyword">if</span> s &lt; mid:</span><br><span class="line">          a = <span class="number">20</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          a = <span class="number">-3</span></span><br><span class="line">      s0 = v0 * t + <span class="number">0.5</span> * a * t * t</span><br><span class="line">      v = v0 + a + t</span><br><span class="line">      tracks.append(<span class="built_in">round</span>(s0))</span><br><span class="line">      s += s0</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">sum</span>(tracks) != distance:</span><br><span class="line">      tracks.append(distance-<span class="built_in">sum</span>(tracks))</span><br><span class="line">  <span class="keyword">return</span> tracks</span><br></pre></td></tr></table></figure>

<p>模拟拖动滑块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shake_mouse</span>():</span></span><br><span class="line">  ActionChains(browser).move_by_offset(xoffset=<span class="number">-2</span>,yoffset=<span class="number">0</span>).perform()</span><br><span class="line">  ActionChains(browser).move_by_offset(xoffset=<span class="number">2</span>,yoffset=<span class="number">0</span>).perform()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span>(<span class="params">slider, tracks</span>):</span></span><br><span class="line">  <span class="comment"># back_tracks = [-1, -1, -2, -2, -3, -2, -2, -1, -1]</span></span><br><span class="line">  ActionChains(browser).click_and_hold(slider).perform()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> tracks:</span><br><span class="line">      ActionChains(browser).move_by_offset(xoffset=x,yoffset=<span class="number">0</span>).perform()</span><br><span class="line">  sleep(<span class="number">0.5</span>)</span><br><span class="line">  <span class="comment"># for x in back_tracks:</span></span><br><span class="line">  <span class="comment">#     ActionChains(browser).move_by_offset(xoffset=x,yoffset=0).perform()</span></span><br><span class="line">  shake_mouse()</span><br><span class="line">  sleep(<span class="number">0.5</span>)</span><br><span class="line">  ActionChains(browser).release().perform()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tracks = get_track(left) <span class="comment"># type: list</span></span><br><span class="line">tracks = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x != <span class="number">0</span>, tracks))</span><br><span class="line">move_to_gap(slider, tracks)</span><br></pre></td></tr></table></figure>



<ul>
<li>保存图片的方式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">captcha = browser.find_element_by_css_selectro(<span class="string">&#x27;#captcha&#x27;</span>)</span><br><span class="line">image = Image.<span class="built_in">open</span>(BytesIO(captcha.screenshot_as_png))</span><br></pre></td></tr></table></figure>

<p>直接保存图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">captcha.screenshot(<span class="string">&#x27;xx.png&#x27;</span>)</span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Airtest</title>
    <url>/2022/04/28/Airtest/</url>
    <content><![CDATA[<p><a href="https://airtest.netease.com/changelog.html">AirtestIDE 下载</a> </p>
<p><a href="https://airtest.doc.io.netease.com/tutorial/1_quick_start_guide/">官网Airetest Project Docs</a></p>
<p>AiretestIDE 一个跨平台的UI自动化测试编辑器，适用游戏和APP</p>
<p>自动化录制脚本、一键回放、报告查看；支持基于图像识别的 Airtest 框架；支持基于UI控件搜索的Poco框架</p>
<h4 id="连接设备"><a href="#连接设备" class="headerlink" title="连接设备"></a>连接设备</h4><ul>
<li>连接 iOS 手机</li>
</ul>
<p>手机通用-开发者-Enable UI Automation 需要开启</p>
<p>需要安装 Xcode 的 Mac 电脑</p>
<p><a href="https://github.com/AirtestProject/IOS-Tagent">iOS-Tagent</a> 基于 facebook 的 WebDriverAgent 项目上进行开发的</p>
<p>可以使用 Appium 的 WebDriverAgent 工具来部署iOS真机，也可使用 Airtest 下的 iOS-Tagent 工具来部署真机</p>
<p>Appium 的 WebDriverAgent 工具安装 <a href="https://testerhome.com/topics/7220">https://testerhome.com/topics/7220</a></p>
<p>Facebook 的 WebDriverAgent 工具安装 <a href="https://testerhome.com/topics/10463">https://testerhome.com/topics/10463</a></p>
<p>下载  iOS-Tagent 项目</p>
<p>Scheme-&gt;WebDriverAgentRunner-&gt;选择设备</p>
<p>product -&gt; Test 报错 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Building for iOS, but the embedded framework &#39;CocoaAsyncSocket.framework&#39; was built for iOS + iOS Simulator.</span><br><span class="line">Building for iOS, but the linked and embedded framework &#39;WebDriverAgentLib.framework&#39; was built for iOS + iOS Simulator.</span><br></pre></td></tr></table></figure>

<p>解决：选择 WebDriverAgentRunner Target -&gt; Build Setting -&gt; Build Options -&gt; Validate Workspace 设置为 YES</p>
<p>需要 libimobiledevice</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install libimobiledevice</span><br><span class="line">#端口转发 第一个是mac端口 第二个是iPhone端口</span><br><span class="line">#会将iPhone上8100的数据转发到mac的8100端口上</span><br><span class="line">iproxy 8100 8100</span><br></pre></td></tr></table></figure>

<p>访问地址 <a href="http://127.0.0.1:8100/status">http://127.0.0.1:8100/status</a> 可以看到返回的设备信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;value&quot; : &#123;</span><br><span class="line">    &quot;state&quot; : &quot;success&quot;,</span><br><span class="line">    &quot;os&quot; : &#123;</span><br><span class="line">      &quot;name&quot; : &quot;iOS&quot;,</span><br><span class="line">      &quot;version&quot; : &quot;13.1.3&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;ios&quot; : &#123;</span><br><span class="line">      &quot;simulatorVersion&quot; : &quot;13.1.3&quot;,</span><br><span class="line">      &quot;ip&quot; : &quot;10.1.253.216&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;build&quot; : &#123;</span><br><span class="line">      &quot;time&quot; : &quot;Dec 22 2020 14:54:08&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sessionId&quot; : null,</span><br><span class="line">  &quot;status&quot; : 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问 <a href="http://127.0.0.1:8100/inspector">http://127.0.0.1:8100/inspector</a> 可以看设备界面，但是报错了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;value&quot; : &#123;</span><br><span class="line">    &quot;error&quot; : &quot;unknown command&quot;,</span><br><span class="line">    &quot;message&quot; : &quot;Unhandled endpoint: \&#x2F;inspector -- http:\&#x2F;\&#x2F;127.0.0.1:8100\&#x2F; with parameters &#123;\n wildcards &#x3D; (\ninspector\n);\n&#125;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sessionId&quot; : null,</span><br><span class="line">  &quot;status&quot; : 6</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打开 AirtestIDE，连接 <a href="http://127.0.0.1:8100/">http://127.0.0.1:8100</a> 连接不上</p>
<p>Xcode控制台报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-[XCUIScreen screenshotDataForQuality:rect:error:]: unrecognized selector sent to instance 0x28070ffc0</span><br></pre></td></tr></table></figure>

<p>重新下载xcode项目 <a href="https://pan.baidu.com/s/1FCZ-FPQSqYmiGc5QjdjUew">https://pan.baidu.com/s/1FCZ-FPQSqYmiGc5QjdjUew</a>  nk77 可以连接上</p>
<p>左上角 + 号，新建一个 Airtest Project</p>
<img src="Airtest/WeChat74e3de483b997363ebd9b50d174b58cc.png" alt="WeChat74e3de483b997363ebd9b50d174b58cc" style="zoom:67%;" /> 

<p>自动生成初始化代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- encoding&#x3D;utf8 -*-</span><br><span class="line">__author__ &#x3D; &quot;midland_whk&quot;</span><br><span class="line">from airtest.core.api import *</span><br><span class="line">auto_setup(__file__)</span><br></pre></td></tr></table></figure>

<p>辅助窗中点击 touch，这时可以在右侧设备界面拖动框柱想要点击的区域，会自动生成一行点击代码</p>
]]></content>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-6异步爬虫</title>
    <url>/2022/05/06/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-6%E5%BC%82%E6%AD%A5%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<ul>
<li>event_loop：事件循环，相当于一个无限循环，可以把一些函数注册到这个事件循环上，当满足发生条件的时候，就调用对应的处理方法</li>
<li>coroutine：协程，可以将协程对象注册到事件循环中，它会被事件循环调用。可以使用 async 关键字来定义一个方法，这个方法在调用时不会立即被执行，而是会返回一个协程对象</li>
<li>task：任务，这是对协程对象的进一步封装，包含协程对象的各个状态</li>
<li>future：代表将来执行或者没有执行的任务的结果，实际上和 task 没有本质的区别</li>
</ul>
<h4 id="定义协程"><a href="#定义协程" class="headerlink" title="定义协程"></a>定义协程</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">execute</span>(<span class="params">x</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;Number&#x27;</span>, x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    coroutine = execute(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;After calling execute&#x27;</span>)</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(coroutine)</span><br><span class="line">    print(<span class="string">&#x27;After calling loop&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">After calling execute</span></span><br><span class="line"><span class="string">Number 1</span></span><br><span class="line"><span class="string">After calling loop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>引入 asyncio 包，这样才能使用 async 和 await 关键字</p>
<p>直接调用 execute 方法并没有立即执行，而是返回一个协程对象</p>
<p>之后调用 get_event_loop 方法创建一个事件循环 loop，调用 loop 对象的 run_until_complete 方法将协程对象注册到事件循环中，接着启动</p>
<p>async 定义的方法会变成一个无法直接执行的协程对象，必须将此对象注册到事件循环中才可以执行</p>
<p>前面提到 task 是对协程的进一步封装，比协程多了运行状态，如 running、finished，可以利用这些状态获取协程执行情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">coroutine = execute(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">&#x27;After calling execute&#x27;</span>)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">task = loop.create_task(coroutine) <span class="comment">#将协程对象转化为task对象</span></span><br><span class="line">print(<span class="string">&#x27;Task:&#x27;</span>, task)</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line">print(<span class="string">&#x27;Task:&#x27;</span>, task)</span><br><span class="line">print(<span class="string">&#x27;After calling loop&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">After calling execute</span></span><br><span class="line"><span class="string">Task: &lt;Task pending name=&#x27;Task-1&#x27; coro=&lt;execute() running at xxx&gt;&gt;</span></span><br><span class="line"><span class="string">Number 1</span></span><br><span class="line"><span class="string">Task: &lt;Task finished name=&#x27;Task-1&#x27; coro=&lt;execute() done, defined at xxx&gt;</span></span><br><span class="line"><span class="string">After calling loop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>定义 task 的另一种方式，直接调用 asyncio 包的 ensure_future 方法，返回也是 task 对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">task = asyncio.ensure_future(coroutine)</span><br><span class="line">loop.run_until_complete(task)</span><br></pre></td></tr></table></figure>

<h4 id="绑定回调"><a href="#绑定回调" class="headerlink" title="绑定回调"></a>绑定回调</h4><p>为某个 task 对象绑定一个回调方法    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span>():</span></span><br><span class="line">    url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">    status = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> status</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span>(<span class="params">task</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;Status:&#x27;</span>, task.result())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    coroutine = request()</span><br><span class="line">    task = asyncio.ensure_future(coroutine)</span><br><span class="line">    task.add_done_callback(callback)</span><br><span class="line">    print(<span class="string">&#x27;Task:&#x27;</span>, task)</span><br><span class="line"></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(task)</span><br><span class="line">    print(<span class="string">&#x27;Task:&#x27;</span>, task)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Task: &lt;Task pending name=&#x27;Task-1&#x27; coro=&lt;request() running at xxx cb=[callback() xx&gt;</span></span><br><span class="line"><span class="string">Status: &lt;Response [200]&gt;</span></span><br><span class="line"><span class="string">Task: &lt;Task finished name=&#x27;Task-1&#x27; coro=&lt;request() done, defined at xx result=&lt;Response [200]&gt;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>task 执行完毕后，就可以调用 callback 方法了，同时 task 对象还会作为参数传递给 callback 方法，调用 task 对象的 result 方法就可以获取返回结果</p>
<p>这里不使用回调方法，在 task 运行完毕后，也可直接调用 task.result() 方法获取结果</p>
<h4 id="多任务协程"><a href="#多任务协程" class="headerlink" title="多任务协程"></a>多任务协程</h4><p>如果想执行多次请求，使用 asyncio 包中的 wait 方法执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tasks = [asyncio.ensure_future(request()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> task <span class="keyword">in</span> tasks:</span><br><span class="line">    print(<span class="string">&#x27;Task Result:&#x27;</span>, task.result())</span><br><span class="line"><span class="comment">#5个任务被顺次执行</span></span><br></pre></td></tr></table></figure>

<h4 id="协程实现"><a href="#协程实现" class="headerlink" title="协程实现"></a>协程实现</h4><p>当遇到需要等待的情况时，程序可以暂时挂起，转而执行其他操作，从而避免因一直等待一个程序而耗费过多的时间，能够充分利用资源</p>
<p>await 关键字，可以将耗时等待的操作挂起，让出控制权。如果协程在执行的时候遇到 wait，事件循环就会将协程挂起，转而执行别的协程，直到其它协程挂起或执行完毕</p>
<p>await 后面的对象必须是如下格式之一：</p>
<p>一个原生的协程对象；一个由 types.coroutine修饰的生成器，这个生成器可以返回协程对象；一个包含 <code>__await__</code> 方法的对象返回一个迭代器</p>
<h4 id="使用-aiohttp"><a href="#使用-aiohttp" class="headerlink" title="使用 aiohttp"></a>使用 aiohttp</h4><p>aiohttp 是一个支持异步请求的库，和 asyncio 配合使用，可以非常方便的实现异步请求操作</p>
<p>官方文档链接 <a href="https://aiohttp.readthedocs.io/">https://aiohttp.readthedocs.io/</a> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">url</span>):</span></span><br><span class="line">    session = aiohttp.ClientSession()</span><br><span class="line">    response = <span class="keyword">await</span> session.get(url)</span><br><span class="line">    <span class="keyword">await</span> response.text()</span><br><span class="line">    <span class="keyword">await</span> session.close()</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span>():</span></span><br><span class="line">    url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">    print(<span class="string">&#x27;waiting for&#x27;</span>, url)</span><br><span class="line">    response = <span class="keyword">await</span> get(url)</span><br><span class="line">    print(<span class="string">&#x27;get response from&#x27;</span>, url, <span class="string">&#x27;response:&#x27;</span>, response)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  tasks = [asyncio.ensure_future(request()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">  loop = asyncio.get_event_loop()</span><br><span class="line">  loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure>



<h4 id="aiohttp-的使用"><a href="#aiohttp-的使用" class="headerlink" title="aiohttp 的使用"></a>aiohttp 的使用</h4><p>aiohttp 是一个基于 asyncio 的异步 HTTP 网络模块，既提供了服务端，又提供了客户端。用服务端可以搭建一个支持异步处理的服务器，这个服务器就是用来处理请求并返回响应的，类似 Django、Flask、Tornado 等一些 Web 服务器。而客户端可以用来发起请求</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">fetch</span>(<span class="params">session, url</span>):</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> response.text(), response.status</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        html, status = <span class="keyword">await</span> fetch(session, <span class="string">&#x27;https://cuiqingcai.com&#x27;</span>)</span><br><span class="line">        print(<span class="string">f&#x27;html:<span class="subst">&#123;html[:<span class="number">100</span>]&#125;</span>...&#x27;</span>)</span><br><span class="line">        print(<span class="string">f&#x27;status: <span class="subst">&#123;status&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(main())</span><br></pre></td></tr></table></figure>

<p>每个异步方法前都需要加 async 来修饰</p>
<p>with as 前同样需要 async 来修饰，python 中，with as 语句用于声明一个上下文管理器，能够帮我们自动分配和释放资源，异步方法中，with as 前加 async 代表声明一个支持异步的上下文管理器</p>
<p>对于一些返回协程的操作，前面需要加 await 来修饰。返回的是协程对象，前面就要加 await，response 调用 text 方法返回的是协程对象，前面需要加 awiat，而状态码返回的就是一个数值，不需要加 await，看对应返回类型决定加不加 await</p>
<p>Python 3.7 后可以使用 <code>asyncio.run(main())</code> 代替最后的启动操作，不需要显式声明事件循环</p>
<h5 id="URL-参数设置"><a href="#URL-参数设置" class="headerlink" title="URL 参数设置"></a>URL 参数设置</h5><p>参数设置借助 params 参数，传入字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    params = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>&#125;</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(<span class="string">&#x27;https://www.httpbin.org/get&#x27;</span>, params=params) <span class="keyword">as</span> response:</span><br><span class="line">            print(<span class="keyword">await</span> response.text())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure>

<h5 id="其它请求类型"><a href="#其它请求类型" class="headerlink" title="其它请求类型"></a>其它请求类型</h5><p>aiohttp 还支持其它请求类型，POST、PUT、DELETE 等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session.post(<span class="string">&#x27;http://xxx&#x27;</span>, data=<span class="string">b&#x27;data&#x27;</span>)</span><br><span class="line">session.put(<span class="string">&#x27;http://xxx&#x27;</span>)</span><br><span class="line">session.delete(<span class="string">&#x27;http://xxx&#x27;</span>)</span><br><span class="line">session.options(<span class="string">&#x27;http://xxx&#x27;</span>)</span><br><span class="line">session.head(<span class="string">&#x27;http://xxx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h5><p>对于 POST 表单提交 Content-Type 为 application/x-www-form-urlencoded</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> session.post(<span class="string">&#x27;https://www.httpbin.org/post&#x27;</span>, data=data) <span class="keyword">as</span> response:</span><br></pre></td></tr></table></figure>

<p>对于 POST JSON，Content-Type 为 application/json</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> session.post(<span class="string">&#x27;https://www.httpbin.org/post&#x27;</span>, json=data) <span class="keyword">as</span> response:</span><br></pre></td></tr></table></figure>

<h5 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;status:&#x27;</span>, response.status)</span><br><span class="line">print(<span class="string">&#x27;headers:&#x27;</span>, response.headers)</span><br><span class="line">print(<span class="string">&#x27;body:&#x27;</span>, <span class="keyword">await</span> response.text())</span><br><span class="line">print(<span class="string">&#x27;bytes:&#x27;</span>, <span class="keyword">await</span> response.read())</span><br><span class="line">print(<span class="string">&#x27;json:&#x27;</span>, <span class="keyword">await</span> response.json())</span><br></pre></td></tr></table></figure>

<p>返回的是一个协程对象需要加 await。具体查看 aiohttp 的 API</p>
<p>链接 <a href="https://docs.aiohttp.org/en/stable/client_reference.html">https://docs.aiohttp.org/en/stable/client_reference.html</a></p>
<h5 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h5><p>借助 ClientTimeout 对象设置超时，例如设置 1 秒的超时时间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>&#125;</span><br><span class="line">    timeout = aiohttp.ClientTimeout(total=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession(timeout=timeout) <span class="keyword">as</span> session:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>ClientTimeout 还有其他参数，connect、socket_connect 等</p>
<p><a href="https://docs.aiohttp.org/en/stable/client_quickstart.html#timeouts">https://docs.aiohttp.org/en/stable/client_quickstart.html#timeouts</a></p>
<h5 id="并发限制"><a href="#并发限制" class="headerlink" title="并发限制"></a>并发限制</h5><p>asyncio 的 Semaphore 来控制并发量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CONCURRENCY = <span class="number">5</span></span><br><span class="line">URL = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line">semaphore = asyncio.Semaphore(CONCURRENCY) <span class="comment">#创建信号量对象</span></span><br><span class="line">session = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">scripe_api</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> semaphore:</span><br><span class="line">        print(<span class="string">&#x27;scrapping:&#x27;</span>, URL)</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(URL) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> response.text()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">global</span> session;</span><br><span class="line">    session = aiohttp.ClientSession()</span><br><span class="line">    scripe_index_tasks = [asyncio.ensure_future(scripe_api()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*scripe_index_tasks)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure>

<p>创建信号量对象，使用：把 semaphore 直接放置在对应的爬取方法里，使用 async with 语句将 semaphore 作为上下文对象即可。这样信号量便可以控制进入爬取的最大协程数量</p>
<p>main 方法里声明了 1000 个 task，传递给 gather 方法运行</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-pyspider框架使用</title>
    <url>/2022/04/19/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-pyspider%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>pyspider 官方文档 <a href="http://docs.pyspider.org/">http://docs.pyspider.org/</a></p>
<h4 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h4><p>提供方便易用的WebUI系统，可视化编写和调试爬虫</p>
<p>提供爬取进度监控、爬取结果查看、爬虫项目管理等功能</p>
<p>支持多种后端数据库，如MySQL、MongoDB、Redis、SQLite</p>
<p>支持多种消息队列，如RabbitMQ、Beanstalk、Redis、Kombu</p>
<p>提供优先级控制、失败重试、定时抓取等功能</p>
<p>对接了 PhantomJS，可以抓取 JavaScript 渲染的页面</p>
<p>支持单机和分布式部署，支持 Docker 部署</p>
<p>pyspid 提供了 WebUI，爬虫的编写、调试都是在 WebUI 中进行的，如果要快速实现一个页面的抓取，使用pyspider</p>
<h5 id="pyspider-架构"><a href="#pyspider-架构" class="headerlink" title="pyspider 架构"></a>pyspider 架构</h5><p><img src="/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-pyspider%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/WeChataffa8b62cf8bf792b16728f4f46c0065.png" alt="WeChataffa8b62cf8bf792b16728f4f46c0065"></p>
<p>每个 pyspider 项目对应一个 Python 脚本，脚本中定义了一个 Handler 类，它有一个 on_start() 方法，爬取首先调用 no_start() 方法生成最初的抓取任务，然后发送给 Scheduler 进行调度</p>
<p>Scheduler 将抓取任务分发给 Fetcher 进行抓取，Fetcher 执行并得到响应，随后将响应发送给 Processer</p>
<p>Processer 处理响应并提取出新的 URL 生成新的抓取任务，然后通过消息队列的方式通知 Scheduler 当前任务抓取执行情况，并将新生成的抓取任务发送给 Scheduler，如果生成了新的提取结果，则将其发送到结果队列等待 Result Worker 处理</p>
<p>Scheduler 接收到新的抓取任务，然后查询数据库，判断其如果是新的抓取任务或者是需要重试的任务就继续进行调度，然后将其发送回 Fetcher 进行抓取</p>
<p>不断重复以上工作，直到所有的任务都执行完毕，抓取结束</p>
<p>抓取结束后，程序会回调 on_finished() 方法</p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><h5 id="启动-pyspider"><a href="#启动-pyspider" class="headerlink" title="启动 pyspider"></a>启动 pyspider</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyspider all</span><br></pre></td></tr></table></figure>

<p>这样可以启动 pyspider 的所有组件，最后一行输出提示 WebUI 运行在 5000 端口上，输入 <a href="http://localhost:5000/">http://localhost:5000</a> 可以看到 pyspider 的 WebUI 页面，可以用它来管理项目、编写代码、在线调试、监控任务</p>
<p><img src="/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-pyspider%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/WeChat941a660af574ca4e9a6f69c141140d7c.png" alt="WeChat941a660af574ca4e9a6f69c141140d7c"></p>
<h5 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h5><p>点击右边的 Create 按钮，弹出的浮窗输入项目名称和爬取的链接</p>
<p>接下来就看到 pyspider 项目编辑和调试页面</p>
<p><img src="/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-pyspider%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/WeChat3425c6583da1e0405c27d3f40dce8510.png" alt="WeChat3425c6583da1e0405c27d3f40dce8510"></p>
<p>左侧就是代码的调试页面，点击左侧右上角的 run 单步调试爬虫程序，左侧下半部分可以预览当前的爬取页面</p>
<p>右侧是代码编辑页面，可以直接编辑代码和保存代码，不需要借助 IDE</p>
<p>生成的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspider.libs.base_handler <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span>(<span class="params">BaseHandler</span>):</span></span><br><span class="line">  crawl_config = &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">  @every(minutes=24 * 60)</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">on_start</span>(<span class="params">self</span>):</span></span><br><span class="line">    	<span class="comment">#新建爬取请求</span></span><br><span class="line">      <span class="comment">#（爬取URL，指定爬取成功解析方法）</span></span><br><span class="line">      self.crawl(<span class="string">&#x27;http://travel.qunar.com/travelbook/list.htm&#x27;</span>, callback=self.index_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">  @config(age=10 * 24 * 60 * 60)</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index_page</span>(<span class="params">self, response</span>):</span></span><br><span class="line">      <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">&#x27;a[href^=&quot;http&quot;]&#x27;</span>).items():</span><br><span class="line">          self.crawl(each.attr.href, callback=self.detail_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">  @config(priority=2)</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">detail_page</span>(<span class="params">self, response</span>):</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="string">&quot;url&quot;</span>: response.url,</span><br><span class="line">          <span class="string">&quot;title&quot;</span>: response.doc(<span class="string">&#x27;title&#x27;</span>).text(),</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>Handler 就是 pyspider 爬虫的主类，可以在这里定义爬取、解析、存储的逻辑，整个爬虫的功能只需要一个 Handler 即可完成</p>
<p>crawl_config：将项目所有爬取配置统一定义到这里，如 Headers、代理等，配置后全局生效</p>
<p>on_start()：爬取入口，初始的爬取请求在这里产生，通过 crawl() 方法即可新建一个爬取请求，第一个参数爬取 URL，第二个参数 callback，指定爬取成功后哪个方法进行解析</p>
<p>index_page()：接收 Response 参数，Response 对接了 pyquery，直接调用 doc() 方法传入相应的 CSS 选择器，就可以像 pyquery 一样解析此页面，上面代码默认 <code>a[href=^=&quot;http&quot;]</code> ，也就是说该方法解析了页面的所有链接，然后将链接遍历，再次调用 crawl() 方法生成新的爬取请求，同时指定 callback 为 detail_page 解析</p>
<p>detail_page()：同样接收 Response 作为参数，抓取的就是详情页的信息，就不会生成新的请求，只对 Response 对象解析，解析后以字典形式返回，也可以进行后序处理，如保存到数据库</p>
<h5 id="爬取首页"><a href="#爬取首页" class="headerlink" title="爬取首页"></a>爬取首页</h5><p>点击左栏右上角的 run 按钮，即可看到页面下方 follows 便会出现一个标注，其中包含数字 1，这代表有新的爬取请求产生</p>
<img src="Python3网络爬虫开发实战-pyspider框架使用/WeChata1afccc130dc604431124e411f736a1b.png" alt="WeChata1afccc130dc604431124e411f736a1b" style="zoom:80%;" />

<p>左栏左上角显示当前 run 的配置文件，callback 是 on_start，说明点击run 之后执行了 on_start 方法</p>
<p>on_start() 方法中，我们利用 crawl() 方法生成一个爬取请求，那下方的 follows 上数字 1 就代表这一个爬取请求</p>
<p>点击 follows 按钮，可以看到生成的爬取请求的链接，每个链接右侧有一个箭头按钮，点击该箭头可以对此链接进行爬取，也就是爬取攻略的首页内容</p>
<p>再点击下方的 web 按钮，即可羽然当前爬取结果的页面</p>
<p>点击 html 按钮可查看当前页面的源代码</p>
<p>上面 index_page() 方法中提取了所有的链接并生成了新的爬取请求，只需要攻略详情页面的链接就够了，这里修改提取链接时的 CSS选择器，</p>
<p>首页切换到 web 页面，找到攻略标题，点击下方 enable css selector helper，点击标题，可以看到标题外多了一个红框，上方出现了一个 CSS 选择器，这就是当前标题对应的 CSS 选择器</p>
<img src="Python3网络爬虫开发实战-pyspider框架使用/WeChat71c9e7d7b2716e5c496dc2dde6ef328a.png" alt="WeChat71c9e7d7b2716e5c496dc2dde6ef328a" style="zoom:80%;" />

<p>右侧代码选中要更改的区域，点击左栏上右箭头，上方出现的标题的 CSS选择器就会被替换到右侧的代码中</p>
<p>替换 CSS 选择器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">&#x27;li &gt; .tit &gt; a&#x27;</span>).items():</span><br></pre></td></tr></table></figure>

<p>重新点击左栏上右上角 run 按钮，即可重新执行 index_page() 方法。</p>
<p>此时 follows 就变成了 10 个，也就是说现在提取的只有当前页面的 10 个攻略</p>
<p>现在只有第一页的内容，还需要爬取后序页面，所以还需要一个爬取链接，即爬取下一页的攻略列表页面</p>
<p>再利用 crawl() 方法添加下一页的爬取请求，在index_page() 方法里面添加代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span>(<span class="params">self, response</span>):</span></span><br><span class="line">  <span class="built_in">next</span> = response.doc(<span class="string">&#x27;.next&#x27;</span>).attr.href</span><br><span class="line">  self.crawl(<span class="built_in">next</span>, callback=self.index_page)</span><br><span class="line">  <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">&#x27;li &gt; .tit &gt; a&#x27;</span>).items():</span><br><span class="line">      self.crawl(each.attr.href, callback=self.detail_page)</span><br></pre></td></tr></table></figure>

<p>重新 run ，就可以看到 11 个爬取请求，follows 上显示 11</p>
<h5 id="爬取详情页"><a href="#爬取详情页" class="headerlink" title="爬取详情页"></a>爬取详情页</h5><p>任意选取一个详情页进入，点击请求中任意一个右箭头，执行详情页的爬取</p>
<img src="Python3网络爬虫开发实战-pyspider框架使用/WeChat75fbf9e380178eca4d6202777db75bb0.png" alt="WeChat75fbf9e380178eca4d6202777db75bb0" style="zoom:80%;" />

<p>切换到 web 页面预览效果，页面下拉，看到一些图片显示加载中，再查看源码，没有看到 img 节点</p>
<p>出现此现象的原因是 pyspider 默认发送 HTTP 请求，请求的 HTML 文档本身不包含 img 节点。但浏览器中我们看到了图片，这是因为这张图片是后期经过 JavaScript 出现的</p>
<p>pyspider 内部对接了 PhantomJS，只需要修改一个参数即可，添加 fetch_type</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span>(<span class="params">self, response</span>):</span></span><br><span class="line">  <span class="built_in">next</span> = response.doc(<span class="string">&#x27;.next&#x27;</span>).attr.href</span><br><span class="line">  self.crawl(<span class="built_in">next</span>, callback=self.index_page)</span><br><span class="line">  <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">&#x27;li &gt; .tit &gt; a&#x27;</span>).items():</span><br><span class="line">      self.crawl(each.attr.href, callback=self.detail_page, fetch_type=<span class="string">&#x27;js&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>图片被渲染出来了，这就是启用了 PhantomJS 渲染后的结果，最后将详情中的信息提取出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail_page</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: response.url,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: response.doc(<span class="string">&#x27;#booktitle&#x27;</span>).text(),</span><br><span class="line">        <span class="string">&#x27;date&#x27;</span>: response.doc(<span class="string">&#x27;.when .data&#x27;</span>).text(),</span><br><span class="line">        <span class="string">&#x27;day&#x27;</span>: response.doc(<span class="string">&#x27;.howlong .data&#x27;</span>).text(),</span><br><span class="line">        <span class="string">&#x27;who&#x27;</span>: response.doc(<span class="string">&#x27;.who .data&#x27;</span>).text(),</span><br><span class="line">        <span class="string">&#x27;text&#x27;</span>: response.doc(<span class="string">&#x27;#b_panel_schedule&#x27;</span>).text(),</span><br><span class="line">        <span class="string">&#x27;image&#x27;</span>: response.doc(<span class="string">&#x27;.cover_img&#x27;</span>).attr.src,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>左栏中输出了最终构造的字典信息</p>
<h5 id="启动爬虫"><a href="#启动爬虫" class="headerlink" title="启动爬虫"></a>启动爬虫</h5><p>返回爬虫主页面，将爬虫 status 设置成 DEBUG 或 RUNNING，点击右侧的 Run 按钮即可开始爬取</p>
<p><img src="/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-pyspider%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/WeChatab3cfe3bff369db2397e97e00e3ec0af.png" alt="WeChatab3cfe3bff369db2397e97e00e3ec0af"></p>
<p>最左侧可以定义项目的分组，方便管理</p>
<p>rate/burst 代表当前的爬取速率，rate 代表1秒发出多少个请求，burst 相当于流量控制中的令牌桶算法的令牌数，rate 和 burst 设置越大，爬取速率越快</p>
<p>process 中的 5m、1h、1d 指最近5分、1小时、1天内的请求情况，all 代表所有的请求情况</p>
<p>蓝色代表等待被执行的请求，绿色代表请求成功的请求，黄色代表请求失败后等待重试的请求，红色代表失败次数过多而被忽略的请求，这样可以知道爬取的进度和请求情况</p>
<p>点击 Active Tasks 可查看最近请求的详细情况</p>
<p>点击 Results 可查看所有爬取结果</p>
<h4 id="pyspider用法"><a href="#pyspider用法" class="headerlink" title="pyspider用法"></a>pyspider用法</h4><h5 id="pyspider-all-配置参数"><a href="#pyspider-all-配置参数" class="headerlink" title="pyspider all 配置参数"></a>pyspider all 配置参数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyspider [OPTIONS] COMMAND [ARGA]</span><br><span class="line">#OPTIONS 可选参数</span><br><span class="line">-c, --config FILENAME 指定配置文件名称</span><br><span class="line">--logging-config TEXT 日志配置文件名称 默认 pyspider&#x2F;pyspider&#x2F;logging.conf</span><br><span class="line">--debug 开启调试模式</span><br><span class="line">--queue-maxsize INTEGER 队列的最大长度 </span><br><span class="line">--taskdb TEXT taskdb的数据库连接字符串 默认 sqlite</span><br><span class="line">--rojectdb TEXT projectdb的数据库连接字符串 默认 sqlite</span><br><span class="line">--resultdb TEXT resultdb的数据库连接字符串 默认 sqlite</span><br><span class="line">--message-queue TEXT 消息队列连接字符串 默认 multiprocessing.Queue</span><br><span class="line">--phantomjs-proxy TEXT PhantomJS使用的代理 ip:port 形式</span><br><span class="line">--data-path TEXT 数据库存放路径</span><br><span class="line">--version pyspider的版本</span><br><span class="line">--help 显示帮助信息</span><br></pre></td></tr></table></figure>

<p>-c 可以指定配置文件名称是一个常用配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;taskdb&quot;: &quot;mysql+taskdb:&#x2F;&#x2F;username:password@host:port&#x2F;taskdb&quot;,</span><br><span class="line">	&quot;projectdb&quot;: &quot;mysql+projectdb:&#x2F;&#x2F;username:password@host:port&#x2F;projectdb&quot;,</span><br><span class="line">	&quot;resultdb&quot;: &quot;mysql+resultdb:&#x2F;&#x2F;username:password@host:port&#x2F;resultdb&quot;,</span><br><span class="line">	&quot;message_queue&quot;: &quot;amqp:&#x2F;&#x2F;username:password@host:port&#x2F;%2F&quot;,</span><br><span class="line">	&quot;webui&quot;:&#123;</span><br><span class="line">		&quot;username&quot;: &quot;some_name&quot;,</span><br><span class="line">		&quot;password&quot;: &quot;some_passwd&quot;,</span><br><span class="line">		&quot;need-auth&quot;: true</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要配置 pyspider WebUI 的访问认证，可以新建一个pyspider.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;webui&quot;:&#123;</span><br><span class="line">		&quot;username&quot;: &quot;root&quot;,</span><br><span class="line">		&quot;password&quot;: &quot;123456&quot;,</span><br><span class="line">		&quot;need-auth&quot;: true</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样通过在启动时指定配置文件来配置 pyspider WebUI 的访问认证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyspider -c pyspider.json all</span><br></pre></td></tr></table></figure>

<p>运行之后再打开 <a href="http://localhost:5000/">http://localhost:5000</a></p>
<p>也可以单独运行 pyspider 的某一个组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#运行 Scheduler</span><br><span class="line">pyspider scheduler [OPTIONS]</span><br><span class="line">#运行 Fetcher</span><br><span class="line">pyspider fetcher [OPTIONS]</span><br><span class="line">#运行 Processor</span><br><span class="line">pyspider processor [OPTIONS]</span><br><span class="line">#运行 WebUI</span><br><span class="line">pyspider webui [OPTIONS]</span><br></pre></td></tr></table></figure>

<p>如果想要改变 WebUI运行端口为 5001</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyspider webui --port 5001</span><br></pre></td></tr></table></figure>

<p>或者配置到 JSON 文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;webui&quot;:&#123;&quot;port&quot;: 5001&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="crawl-方法"><a href="#crawl-方法" class="headerlink" title="crawl 方法"></a>crawl 方法</h5><p>callback 回调函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def on_start(self):</span><br><span class="line">	self.crawl(&#39;http:&#x2F;&#x2F;scrapy.org&#x2F;&#39;, callback&#x3D;self.index_page)</span><br></pre></td></tr></table></figure>

<p>index_page 方法的第一个参数是响应对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def index_page(self, response):</span><br><span class="line">	pass</span><br></pre></td></tr></table></figure>

<ul>
<li>age</li>
</ul>
<p>任务有效时间，如果某个任务在有效时间内且已经被执行，则它不会重复执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def on_start(self):</span><br><span class="line">	self.crawl(&#39;http:&#x2F;&#x2F;www.example.org&#x2F;&#39;, callback&#x3D;self.callback,age&#x3D;10*24*60*60)</span><br><span class="line">或者</span><br><span class="line">@config(age&#x3D;10*24*60*60)</span><br><span class="line">def callback(self):</span><br><span class="line">	pass   </span><br><span class="line">默认有效期10天</span><br></pre></td></tr></table></figure>

<ul>
<li>priority</li>
</ul>
<p>爬取优先级，默认0，数值越大，对应的请求会优先被调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def index_page(self):</span><br><span class="line">	self.crawl(&#39;http:&#x2F;&#x2F;www.example.org&#x2F;page.html&#39;, callback&#x3D;self.index_page)</span><br><span class="line">	self.crawl(&#39;http:&#x2F;&#x2F;www.example.org&#x2F;123.html&#39;, callback&#x3D;self.index_page,priority&#x3D;1)</span><br><span class="line">第二个链接先调用</span><br></pre></td></tr></table></figure>

<ul>
<li>exetime</li>
</ul>
<p>设置定时任务，值是时间戳，默认0，立即执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">improt time</span><br><span class="line">def on_start(self):</span><br><span class="line">	self.crawl(&#39;http:&#x2F;&#x2F;www.example.org&#x2F;&#39;, callback&#x3D;self.callback,exetime&#x3D;time.time()+30*60)</span><br></pre></td></tr></table></figure>

<p>该任务30分钟后执行</p>
<ul>
<li>retries</li>
</ul>
<p>定义重试次数，默认 3</p>
<ul>
<li><p>itag</p>
</li>
<li><p>auto_recrawl</p>
</li>
<li><p>method</p>
</li>
<li><p>params</p>
</li>
<li><p>data</p>
</li>
<li><p>files</p>
</li>
<li><p>user_agent</p>
</li>
<li><p>headers</p>
</li>
<li><p>cookies</p>
</li>
<li><p>connect_timeout</p>
</li>
<li><p>timeout</p>
</li>
<li><p>allow_redirects</p>
</li>
<li><p>validate_cert</p>
</li>
<li><p>proxy</p>
</li>
<li><p>fetch_type</p>
</li>
<li><p>js_script</p>
</li>
<li><p>js_run_at</p>
</li>
<li><p>js_viewport_width/js_viewport_height</p>
</li>
<li><p>load_images</p>
</li>
<li><p>save</p>
</li>
<li><p>cancel</p>
</li>
<li><p>force_update</p>
</li>
</ul>
<h4 id="任务区分"><a href="#任务区分" class="headerlink" title="任务区分"></a>任务区分</h4><p>pyspider 判断两个任务是否是重复是使用任务对应的 URL 的MD5值作为任务的唯一 ID，ID相同，两个任务就会被判定为相同，其中一个就不会爬取</p>
<p>很多情况下请求的链接可能是同一个，但 POST 参数不同，这时可以重写 task_id() 方法，改变这个 ID 的计算方式来实现不同任务区分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pyspider.libs.utils <span class="keyword">import</span> md5string</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_taskid</span>(<span class="params">self, task</span>):</span></span><br><span class="line">  <span class="keyword">return</span> md5string(task[<span class="string">&#x27;url&#x27;</span>]+json.dumps(task[<span class="string">&#x27;fetch&#x27;</span>].get(<span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;&#x27;</span>)))</span><br></pre></td></tr></table></figure>

<p>重写了 get_taskid 方法，利用 URL 和 POST 的参数来生成 ID</p>
<h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><p>可以使用 craw_config 指定全局配置，配置中的参数会和 crawl() 方法创建任务时的参数合并，如要全局配置一个 Headers</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Handler(BaseHandler):</span><br><span class="line">	crawl_config &#x3D; &#123;</span><br><span class="line">		&#39;headers&#39;: &#123;</span><br><span class="line">			&#39;User-Agent&#39;: &#39;GoogleBot&#39;,</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h4 id="定时爬取"><a href="#定时爬取" class="headerlink" title="定时爬取"></a>定时爬取</h4><p>可以通过 every 属性来设置爬取时间间隔</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@every(minutes=24*60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span>(<span class="params">self</span>):</span></span><br><span class="line">	<span class="keyword">for</span> url <span class="keyword">in</span> urllist:</span><br><span class="line">		self.crawl(url, callback=self.index_page)</span><br></pre></td></tr></table></figure>

<p>设置了每天执行一次爬取</p>
<p>上面提到了有效时间，有效时间内不会重复爬取，所以要把有效时间设置比重复时间更短，才可以实现定时爬取</p>
<p>将 age 设置小于定时时间</p>
<h4 id="项目状态"><a href="#项目状态" class="headerlink" title="项目状态"></a>项目状态</h4><p>TODO 刚被创建未实现状态</p>
<p>STOP 想停止某项目抓取，可将项目设置 STOP</p>
<p>CHECKING 正在运行的项目被修改后会变成 CHECKING 状态</p>
<p>DEBUG/RUNNING 这两个状态对项目运行没影响，设置任意一个项目都可以运行，用第二个可以区分项目是否测试通过</p>
<p>PAUSE 爬取过程中连续多次错误时，项目会自动设置为 PAUSE 状态，并等待一段时间后继续爬取</p>
<h4 id="删除项目"><a href="#删除项目" class="headerlink" title="删除项目"></a>删除项目</h4><p>将项目设置为 STOP，将分组名称设置为 delete，等待24小时，项目会自动删除</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-代理的使用</title>
    <url>/2022/04/21/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E4%BB%A3%E7%90%86%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>如果本机有相关代理软件的话，软件一般会在本机创建 HTTP 或 SOCKS 代理服务</p>
<p>只要设置了代理，就可以成功将本机 IP 切换到代理软件连接的服务器的 IP 了</p>
<p>设置代理后测试网址 <a href="http://httpbin.org/get">http://httpbin.org/get</a></p>
<h4 id="9-1-代理设置"><a href="#9-1-代理设置" class="headerlink" title="9.1 代理设置"></a>9.1 代理设置</h4><h5 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> ProxyHandler, build_opener</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  proxy = <span class="string">&#x27;183.172.236.158:10080&#x27;</span></span><br><span class="line">  proxy_handler = ProxyHandler(&#123;</span><br><span class="line">      <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://&#x27;</span> + proxy,</span><br><span class="line">      <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;https://&#x27;</span> + proxy</span><br><span class="line">  &#125;)</span><br><span class="line">  opener = build_opener(proxy_handler)</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      response = opener.<span class="built_in">open</span>(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br><span class="line">      print(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">  <span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">      print(e.reason)</span><br></pre></td></tr></table></figure>

<p>使用 ProxyHandler 设置代理</p>
<p>结果，origin 字段标明了客户端的 IP</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;, </span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;identity&quot;, </span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class="line">    &quot;User-Agent&quot;: &quot;Python-urllib&#x2F;3.8&quot;, </span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-6260b354-5d0a11da29ddab260babe279&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;origin&quot;: &quot;183.172.236.158&quot;, </span><br><span class="line">  &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果是需要认证的代理，只需要在代理前面加入代理认证的用户名和密码即可，将上面的 proxy 变量改成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy &#x3D; &#39;username:password@183.172.236.158:10080&#39;</span><br></pre></td></tr></table></figure>

<p>如果代理是 SOCKS5 类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="keyword">import</span> socks</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">socks.set_default_proxy(socks.SOCKS5, <span class="string">&#x27;183.172.236.158&#x27;</span>, <span class="string">&#x27;10080&#x27;</span>)</span><br><span class="line">socket.socket = socks.socksocket</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = request.urlopen(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br><span class="line">    print(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure>

<p>此处需要一个 socks 模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install PySocks</span><br></pre></td></tr></table></figure>

<p>如果本地有一个 SOCKS5代理，运行在 10080 端口，运行成功和上面是一样的</p>
<h5 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h5><p>只需要传入 proxies 即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">proxy = <span class="string">&#x27;183.172.236.158:10080&#x27;</span></span><br><span class="line"><span class="comment">#如果需要认证，改成 proxy = &#x27;username:password@183.172.236.158:10080&#x27;</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://&#x27;</span> + proxy,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;https://&#x27;</span> + proxy</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>, proxies=proxies)</span><br><span class="line">    print(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;Error&#x27;</span>, e.args)</span><br></pre></td></tr></table></figure>

<p>如果需要使用 SOCKS5代理，将 proxies 改成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxy = <span class="string">&#x27;183.172.236.158:10080&#x27;</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;socks5&#x27;</span> + proxy,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;socks5&#x27;</span> + proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要额外安装一个模块，叫作 requests[socks]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install &#39;requests[socks]&#39;</span><br></pre></td></tr></table></figure>

<p>还有一种设置方式，和 urllib 中的方法相同，相比第一种方法，此方法是全局设置的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">socks.set_default_proxy(socks.SOCKS5, <span class="string">&#x27;183.172.236.158&#x27;</span>, <span class="string">&#x27;10080&#x27;</span>)</span><br><span class="line">socket.socket = socks.socksocket</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br><span class="line">    print(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure>

<h5 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h5><p>Chrome、PhantomJS</p>
<h6 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h6><p>通过 ChromeOptions 来设置代理，创建 Chrome 对象使用 options 参数传递即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxy = <span class="string">&#x27;101.132.189.87:9090&#x27;</span></span><br><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--proxy-server=http://&#x27;</span> + proxy)</span><br><span class="line">browser = webdriver.Chrome(options=options)</span><br><span class="line">browser.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如果是认证代理，设置会比较麻烦</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line">ip = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">port = <span class="number">9743</span></span><br><span class="line">username = <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;bar&#x27;</span></span><br><span class="line"></span><br><span class="line">manifest_json = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;version&quot;: &quot;1.0.0&quot;,</span></span><br><span class="line"><span class="string">    &quot;manifest_version&quot;: 2,</span></span><br><span class="line"><span class="string">    &quot;name&quot;: &quot;Chrome Proxy&quot;,</span></span><br><span class="line"><span class="string">    &quot;permissions&quot;: [</span></span><br><span class="line"><span class="string">        &quot;proxy&quot;,</span></span><br><span class="line"><span class="string">        &quot;tabs&quot;,</span></span><br><span class="line"><span class="string">        &quot;unlimitedStorage&quot;,</span></span><br><span class="line"><span class="string">        &quot;storage&quot;,</span></span><br><span class="line"><span class="string">        &quot;&lt;all_urls&gt;&quot;,</span></span><br><span class="line"><span class="string">        &quot;webRequest&quot;,</span></span><br><span class="line"><span class="string">        &quot;webRequestBlocking&quot;</span></span><br><span class="line"><span class="string">    ],</span></span><br><span class="line"><span class="string">    &quot;background&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;scripts&quot;: [&quot;background.js&quot;]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">background_js = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">var config = &#123;</span></span><br><span class="line"><span class="string">        mode: &quot;fixed_servers&quot;,</span></span><br><span class="line"><span class="string">        rules: &#123;</span></span><br><span class="line"><span class="string">          singleProxy: &#123;</span></span><br><span class="line"><span class="string">            scheme: &quot;http&quot;,</span></span><br><span class="line"><span class="string">            host: &quot;%(ip)s&quot;,</span></span><br><span class="line"><span class="string">            port: %(port)s</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">chrome.proxy.settings.set(&#123;value: config, scope: &quot;regular&quot;&#125;, function() &#123;&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function callbackFn(details) &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">        authCredentials: &#123;</span></span><br><span class="line"><span class="string">            username: &quot;%(username)s&quot;,</span></span><br><span class="line"><span class="string">            password: &quot;%(password)s&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">chrome.webRequest.onAuthRequired.addListener(</span></span><br><span class="line"><span class="string">            callbackFn,</span></span><br><span class="line"><span class="string">            &#123;urls: [&quot;&lt;all_urls&gt;&quot;]&#125;,</span></span><br><span class="line"><span class="string">            [&#x27;blocking&#x27;]</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> % &#123;<span class="string">&#x27;ip&#x27;</span>: ip, <span class="string">&#x27;port&#x27;</span>: port, <span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;password&#x27;</span>: password&#125;</span><br><span class="line"></span><br><span class="line">plugin_file = <span class="string">&#x27;proxy_auth_plugin.zip&#x27;</span></span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(plugin_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> zp:</span><br><span class="line">    zp.writestr(<span class="string">&quot;manifest.json&quot;</span>, manifest_json)</span><br><span class="line">    zp.writestr(<span class="string">&quot;background.js&quot;</span>, background_js)</span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&quot;--start-maximized&quot;</span>)</span><br><span class="line">chrome_options.add_extension(plugin_file)</span><br><span class="line">browser = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line">browser.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>需要创建 manifest.json 配置文件和 background.js 脚本来设置代理，运行代码后会生成一个 proxy_auth_plugin.zip 文件来保存当前配置</p>
<h6 id="PhantomJS"><a href="#PhantomJS" class="headerlink" title="PhantomJS"></a>PhantomJS</h6><p><del>设置代理可以借助 service_args 参数，也就是命令行参数</del></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module &#39;selenium.webdriver&#39; has no attribute &#39;PhantomJS&#39;</span><br></pre></td></tr></table></figure>

<p>不支持了</p>
<h4 id="9-2-代理池的维护"><a href="#9-2-代理池的维护" class="headerlink" title="9.2 代理池的维护"></a>9.2 代理池的维护</h4><h5 id="存储模块"><a href="#存储模块" class="headerlink" title="存储模块"></a>存储模块</h5><p>存储抓取下来的代理，这里用 Redis 的有序集合，集合中每一个元素都是不重复的</p>
<h5 id="获取模块"><a href="#获取模块" class="headerlink" title="获取模块"></a>获取模块</h5><p>需要定时在各大代理网站抓取代理</p>
<h5 id="检测模块"><a href="#检测模块" class="headerlink" title="检测模块"></a>检测模块</h5><p>需要定时检测数据库中的代理</p>
<p>使用异步请求库 aiohttp 来进行检测</p>
<h5 id="接口模块"><a href="#接口模块" class="headerlink" title="接口模块"></a>接口模块</h5><p>用 API 来提供对外服务的接口</p>
<p>为了使代理池可以作为一个独立服务运行，最好增加一个接口模块，并以 WebAPI的形式暴露可用代理</p>
<h5 id="调度模块"><a href="#调度模块" class="headerlink" title="调度模块"></a>调度模块</h5><p>调用上面定义的模块，将上面模块通过多进程的形式运行起来</p>
<h4 id="9-3-付费代理"><a href="#9-3-付费代理" class="headerlink" title="9.3 付费代理"></a>9.3 付费代理</h4><p>讯代理 <a href="http://www.xdaili.cn/">http://www.xdaili.cn</a></p>
<p>阿布云代理 <a href="https://www.abuyun.com/">https://www.abuyun.com</a></p>
<h4 id="9-4-ADSL拨号代理"><a href="#9-4-ADSL拨号代理" class="headerlink" title="9.4 ADSL拨号代理"></a>9.4 ADSL拨号代理</h4><p>ADSL 通过拨号的方式上网，需要输入 ADSL 账号和密码，每次拨号就更换一个 IP，如果将 ADSL 主机作为代理，每隔一段时间主机拨号就换一个 IP，这样可以有效防止 IP 被封，主机稳定性好，代理响应速度很快</p>
<h5 id="购买主机"><a href="#购买主机" class="headerlink" title="购买主机"></a>购买主机</h5><p>购买动态拨号 VPS 主机</p>
<p>阿斯云 <a href="https://asiyun.cn/">https://asiyun.cn</a></p>
<p>云立方 <a href="http://www.yunlifang.cn/dynamicvps.asp">http://www.yunlifang.cn/dynamicvps.asp</a></p>
<p>建议选择电信线路，可以自行选择主机配置</p>
<p>推荐安装 CentOS 7 Linux 系统</p>
<p>找到远程管理面板-远程连接用户名和密码，也就是 SSH 远程连接服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh root@xxx.xx.xx.xx -p xxx</span><br></pre></td></tr></table></figure>

<p>输入管理密码，就可以连接上远程服务器了</p>
<p>进入后有个可用的脚本文件 ppp.sh，这是拨号初始化的脚本</p>
<p>运行 ppp.sh 脚本，输入用户名、密码等待它的配置完成</p>
<p>输入拨号命令 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adsl-start</span><br></pre></td></tr></table></figure>

<p>运行成功后就可以去试 ping 外网了</p>
<p>停止拨号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adsl-stop</span><br></pre></td></tr></table></figure>

<p>阿斯云拨号命令 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pppoe-start</span><br><span class="line">pppoe-stor</span><br></pre></td></tr></table></figure>



<p>断线重播的命令就是两个命令组合起来，每次拨号，ifconfig 查看主机 IP，发现主机 IP 一直在变化</p>
<h5 id="设置代理服务器"><a href="#设置代理服务器" class="headerlink" title="设置代理服务器"></a>设置代理服务器</h5><p>Linux 下搭建 HTTP 代理服务器，推荐 TinyProxy 和 Squid</p>
<h6 id="TinyProxy"><a href="#TinyProxy" class="headerlink" title="TinyProxy"></a>TinyProxy</h6><p>这里以 TinyProxy 为例</p>
<ul>
<li>安装 TinyProxy</li>
</ul>
<p>CentOS 系统使用 yum 来安装，其它系统如 Ubuntu，可以选择 apt-get 等命令安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">yum update -y</span><br><span class="line">yum install -y tinyproxy</span><br></pre></td></tr></table></figure>

<ul>
<li>配置 TinyProxy</li>
</ul>
<p>TinyProxy 安装完成后还要配置一下才可以用作代理服务器，需要编辑配置文件</p>
<p>/etc/tinyproxy/tinyproxy.conf</p>
<p><code>Port 8888</code>  这里可以设置代理的端口，默认 8888</p>
<p>继续找到代码  <code>Allow 127.0.0.1</code> 这行代码表示被允许连接的主机 IP，如果希望连接任何主机，这行代码注释即可，这里选择注释，也就是任何主机都可以使用这台主机作为代理服务器</p>
<p>设置完成后重启 TinyProxy 即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable tinyproxy.service</span><br><span class="line">systemctl restart tinyproxy.service</span><br></pre></td></tr></table></figure>

<p>防火墙开放该端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport 8888 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>如果想直接关闭防火墙也可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>

<ul>
<li>验证 TinyProxy</li>
</ul>
<p>先用 ifconfig 查看当前主机的 IP，比如这主机拨号 IP 为 112.88.118.212</p>
<p>其它主机运行测试下</p>
<p>用 curl 命令设置代理请求，检测代理是否生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -x 112.88.118.212:8888 httpbin.org&#x2F;get</span><br></pre></td></tr></table></figure>

<p>如果有正常的结果输出，并且 origin 的值为代理 IP 就证明 TinyProxy 设置成功了</p>
<h6 id="Squid"><a href="#Squid" class="headerlink" title="Squid"></a>Squid</h6><p>安装 Squid</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum -y update</span><br><span class="line">yum -y install squid</span><br><span class="line"></span><br><span class="line">systemctl start squid  #启动Squid</span><br><span class="line">systemctl enable squid #开机自动启动</span><br><span class="line">systemctl status squid #查看运行状态</span><br></pre></td></tr></table></figure>

<p>默认 Squid 运行在 3128 端口</p>
<ul>
<li>开启允许外网访问</li>
</ul>
<p>修改  <code>/etc/squid/squid.conf</code></p>
<p>允许公网访问，将 <code>http_access deny all</code> 修改为 <code>http_access allow all</code></p>
<p>还需要在配置文件的开头 acl 配置的部分添加该行内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acl all src 0.0.0.0&#x2F;0</span><br></pre></td></tr></table></figure>

<p>还可以将 Squid 配置成高度匿名代理，这样目标网站就无法从通过一些参数如 X-Forward-For 来得知爬虫机本身的 IP 了，配置文件添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request_header_access Via deny all</span><br><span class="line">request_header_access X-Forwarded-For deny all</span><br></pre></td></tr></table></figure>

<p>云主机厂商可能默认封禁了 Squid 的 3128 端口，更换端口</p>
<p><code>http_port 3128</code> 修改为 <code>http_port 3328</code></p>
<p>修改完配置后保存，重启 Squid </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart squid</span><br></pre></td></tr></table></figure>

<p>还需要宝塔面板或者命令开放3328防火墙端口</p>
<p>云主机上运行 curl 命令测试 Squid 的代理效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -x http:&#x2F;&#x2F;127.0.0.1:3328 https:&#x2F;&#x2F;httpbin.org&#x2F;get</span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<p>返回 origin 字段 IP 106.45.104.166 和 ifconfig 返回的云主机 IP 一致</p>
<p>本机运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -x http:&#x2F;&#x2F;106.45.104.166:3328 https:&#x2F;&#x2F;httpbin.org&#x2F;get</span><br></pre></td></tr></table></figure>

<p>返回结果看到 origin 字段返回地址就是云主机 IP地址了</p>
<h5 id="存储模块-1"><a href="#存储模块-1" class="headerlink" title="存储模块"></a>存储模块</h5><p>配置一个可以公网访问的 Redis 数据库，云主机可以将自己的代理存储到对应的 Redis 数据库中</p>
<p>云主机要进行 Redis 数据库的操作，可以使用 Python 实现，先在云主机上装 Python</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install python3</span><br></pre></td></tr></table></figure>

<p>自动拨号、连接 Redis 数据库、获取本机代理、设置 Redis 数据库的操作</p>
<p>使用 adslproxy 包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install adslproxy</span><br></pre></td></tr></table></figure>

<p>安装完成后使用 export 设置环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export REDIS_HOST&#x3D;&lt;Redis数据库的地址&gt;</span><br><span class="line">export REDIS_PORT&#x3D;&lt;Redis数据库的端口&gt;</span><br><span class="line">export REDIS_PASSWORD&#x3D;&lt;Redis数据库的密码&gt;</span><br><span class="line">export PROXY_PORT&#x3D;&lt;拨号云主机配置的代理端口&gt;</span><br><span class="line">export DIAL_BASH&#x3D;&lt;拨号脚本&gt; #pppoe-stop;pppoe-start</span><br><span class="line">export DIAL_IFNAME&#x3D;&lt;网卡名称&gt; #ppp0</span><br><span class="line">export CLIENT_NAME&#x3D;&lt;云主机的唯一标识&gt;</span><br><span class="line">export DIAL_CYCLE&#x3D;&lt;拨号间隔&gt;</span><br></pre></td></tr></table></figure>

<p>运行 <code>adslproxy send</code> 拨号</p>
<h5 id="拨号模块"><a href="#拨号模块" class="headerlink" title="拨号模块"></a>拨号模块</h5><p>定时拨号</p>
<p>只需要在拨号主机上运行定时脚本，每隔一段时间拨号一次，更新 IP，然后将 IP 在 Redis  散列表中更新即可</p>
<p>接下来就是获取IP，获取拨号后的 IP，只需要 ifconfig 命令，解析出对应网卡的 IP</p>
<p>获取 IP 之后，还需要进行有效性检测。拨号主机可以自己检测，比如可以利用 requests 设置自身的代理请求外网，如果成功，那么证明代理可用，然后再修改 Redis 散列表，更新代理</p>
<p>拨号后主机是离线状态，Redis 散列表中还存留上次的代理，这代理是无法使用的，每台主机在拨号之前还需要将自身的代理从 Redis 散列表中移除</p>
<h5 id="接口模块-1"><a href="#接口模块-1" class="headerlink" title="接口模块"></a>接口模块</h5><p>利用 Tornado 的Server模块搭建 Web 接口服务</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-分布式爬虫</title>
    <url>/2022/04/23/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<p>分布式爬虫将多台主机组合起来，共同完成一个爬取任务</p>
<p>Scrapy-Redis 库提供了 Scrapy 分布式的队列、调度器、去重等功能</p>
<h4 id="14-3-Scrapy-分布式实现"><a href="#14-3-Scrapy-分布式实现" class="headerlink" title="14.3 Scrapy 分布式实现"></a>14.3 Scrapy 分布式实现</h4><p>利用 Scrapy-Redis 来实现分布式对接</p>
<h5 id="搭建-Redis-服务器"><a href="#搭建-Redis-服务器" class="headerlink" title="搭建 Redis 服务器"></a>搭建 Redis 服务器</h5><p>要实现分布式部署，多台主机需要共享爬取队列和去重集合，而这两部分内容是存于 Redis 数据库中的，需要搭建一个可公网访问的 Redis 服务器</p>
<p>推荐使用 Linux 服务器，可以购买阿里云、腾讯云、Azure等提供的云主机，一般都会配有公网 IP</p>
<p>阿里云、腾讯云的服务器需要配置安全组放通 Redis 运行端口才可以远程访问</p>
<h5 id="配置-Scrapy-Redis"><a href="#配置-Scrapy-Redis" class="headerlink" title="配置 Scrapy-Redis"></a>配置 Scrapy-Redis</h5><ul>
<li>核心配置</li>
</ul>
<p>将调度器的类和去重的类替换为 Scrapy-Redis 提供的类，settings.py 里添加配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SCHEDULER &#x3D; &quot;scrapy_redis.scheduler.Scheduler&quot;</span><br><span class="line">DUPEFILTER_CLASS &#x3D; &quot;scrapy_redis.dupefilter.RFPDupeFilter&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>Redis 连接配置</li>
</ul>
<p>方式一：通过连接字符串配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">redis://[:password]@host:port/db</span><br><span class="line">rediss://[:password]@host:port/db</span><br><span class="line">unix://[:password]@/path/to/socket.sock?db=db</span><br><span class="line"><span class="comment">#如 redis://:foobared@127.2.34.25:6379</span></span><br></pre></td></tr></table></figure>

<p>中括号代表此选项可有可无 db是数据库代号，默认值 0</p>
<p>settings.py 里配置为 REDIS_URL 变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REDIS_URL &#x3D; &#39;redis:&#x2F;&#x2F;:foobared@127.2.34.25:6379&#39;</span><br></pre></td></tr></table></figure>

<p>方式二：是分项单独配置， settings.py 中配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REDIS_HOST &#x3D; &#39;127.2.34.25&#39;</span><br><span class="line">REDIS_PORT &#x3D; &#39;6379&#39;</span><br><span class="line">REDIS_PASSWORD &#x3D; &#39;foobared&#39;</span><br></pre></td></tr></table></figure>

<h5 id="配置调度队列"><a href="#配置调度队列" class="headerlink" title="配置调度队列"></a>配置调度队列</h5><p>此配置可选，默认使用 PriorityQueue，如果想更改配置，可有配置 SCHEDULER_QUEUE_CLASS 变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SCHEDULER_QUEUE_CLASS &#x3D; &#39;scrapy_redis.queue.PriorityQueue&#39;</span><br><span class="line">SCHEDULER_QUEUE_CLASS &#x3D; &#39;scrapy_redis.queue.FifoQueue&#39;</span><br><span class="line">SCHEDULER_QUEUE_CLASS &#x3D; &#39;scrapy_redis.queue.LifoQueue&#39;</span><br></pre></td></tr></table></figure>

<p>任选一配置，即可切换爬取队列的存储方式</p>
<h5 id="配置持久化"><a href="#配置持久化" class="headerlink" title="配置持久化"></a>配置持久化</h5><p>可选配置，默认 False。Scrapy-Redis 默认会在爬取全部完成清空爬取队列和去重指纹集合</p>
<p>如果不想自动清空爬取队列和去重指纹集合，可以增加配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SCHEDULER_PERSIST &#x3D; True</span><br></pre></td></tr></table></figure>

<h5 id="配置重爬"><a href="#配置重爬" class="headerlink" title="配置重爬"></a>配置重爬</h5><p>可选配置，默认 False，如果配置了持久化或者强制中断了爬虫，那么爬取队列和指纹集合不会被清空，爬虫重启之后就会接上次爬取，如果想重新爬取</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SCHEDULER_FLUSH_ON_START &#x3D; True</span><br></pre></td></tr></table></figure>

<p>分布式爬取不常用此配置</p>
<h5 id="Pipeline-配置"><a href="#Pipeline-配置" class="headerlink" title="Pipeline 配置"></a>Pipeline 配置</h5><p>可选配置，默认不启动</p>
<h5 id="配置存储目标"><a href="#配置存储目标" class="headerlink" title="配置存储目标"></a>配置存储目标</h5><p>最好将存储目标存到同一地方，可以在服务器上搭建一个 MongoDB 服务，或者购买 MongoDB 数据存储服务</p>
<p>这里使用服务器上搭建的 MongoDB 服务 ，IP120.27.34.25 用户名 admin 密码 admin123</p>
<p>修改 MONGO_URI </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MONGO_URI &#x3D; &#39;mongodb:&#x2F;&#x2F;admin:admin123@120.27.34.25:27017&#39;</span><br></pre></td></tr></table></figure>

<h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy crawl weibocn</span><br></pre></td></tr></table></figure>

<p>每台主机启动了此命令之后，就会从配置的 Redis 数据库中调度 Request，做到爬取队列共享和指纹集合共享，每台主机占用各自的宽带和处理器，不会互相影响</p>
<h4 id="14-5-Bloom-Filter-对接"><a href="#14-5-Bloom-Filter-对接" class="headerlink" title="14.5 Bloom Filter 对接"></a>14.5 Bloom Filter 对接</h4><p>布隆过滤器，用来检测一个元素是否在一个集合中</p>
<h5 id="对接-Scrapy-Redis"><a href="#对接-Scrapy-Redis" class="headerlink" title="对接 Scrapy-Redis"></a>对接 Scrapy-Redis</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install scrapy-redis-bloomfilter</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#去重类，要使用Bloom Filter 替换 DUPEFILTER_CLASS</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">&#x27;scrapy_redis_bloomfilter.dupefilter.RFPDupeFilter&#x27;</span></span><br><span class="line"><span class="comment">#散列函数的个数 默认 6</span></span><br><span class="line">BLOOMFILTER_HASH_NUMBER = <span class="number">6</span></span><br><span class="line"><span class="comment">#Bloom Filter 的bit参数 默认30 占用128M空间，去重量级1亿</span></span><br><span class="line">BLOOMFILTER_BIT = <span class="number">30</span></span><br></pre></td></tr></table></figure>



<h4 id="分布式爬虫部署"><a href="#分布式爬虫部署" class="headerlink" title="分布式爬虫部署"></a>分布式爬虫部署</h4><h4 id="15-1-Scrapyd-分布式部署"><a href="#15-1-Scrapyd-分布式部署" class="headerlink" title="15.1 Scrapyd 分布式部署"></a>15.1 Scrapyd 分布式部署</h4><p>Scrapyd 运行 Scrapy 爬虫的服务程序，提供一系列 HTTP 接口帮助部署、启动、停止、删除爬虫程序</p>
<h5 id="Scrapyd"><a href="#Scrapyd" class="headerlink" title="Scrapyd"></a>Scrapyd</h5><h5 id="Scrapyd-API"><a href="#Scrapyd-API" class="headerlink" title="Scrapyd API"></a>Scrapyd API</h5><h4 id="15-2-Scrapyd-Client"><a href="#15-2-Scrapyd-Client" class="headerlink" title="15.2 Scrapyd-Client"></a>15.2 Scrapyd-Client</h4><p>Scrapyd-Client 为了方便 Scrapy 项目的部署，提供了两个功能</p>
<p>将项目打包成 Egg文件</p>
<p>将打包生成的Egg文件通过 addversion.json 接口部署到 Scrapyd 上</p>
<h5 id="Scrapyd-Client-部署"><a href="#Scrapyd-Client-部署" class="headerlink" title="Scrapyd-Client 部署"></a>Scrapyd-Client 部署</h5><h4 id="15-3-Scrapyd-对接-Docker"><a href="#15-3-Scrapyd-对接-Docker" class="headerlink" title="15.3 Scrapyd 对接 Docker"></a>15.3 Scrapyd 对接 Docker</h4><p>将 Scrapyd 打包成一个 Docker 镜像，那么在服务器上只需要执行 Docker 命令就可以启动 Scrapyd 服务，就不用关心 Python 环境问题，也不需要担心版本冲突问题</p>
<h4 id="15-4-Scrapyd-批量部署"><a href="#15-4-Scrapyd-批量部署" class="headerlink" title="15.4 Scrapyd 批量部署"></a>15.4 Scrapyd 批量部署</h4>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS应用逆向与安全之道</title>
    <url>/2022/05/30/iOS%E5%BA%94%E7%94%A8%E9%80%86%E5%90%91%E4%B8%8E%E5%AE%89%E5%85%A8%E4%B9%8B%E9%81%93/</url>
    <content><![CDATA[<h4 id="frida"><a href="#frida" class="headerlink" title="frida"></a>frida</h4><p>利用 frida-trace 跟踪类的所有方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">frida-trace -U -f com.ss.iphone.ugc.Aweme -m &quot;-[AWEAwemeShareViewController *]&quot;</span><br></pre></td></tr></table></figure>





<h4 id="小程序格式分析"><a href="#小程序格式分析" class="headerlink" title="小程序格式分析"></a>小程序格式分析</h4><p>小程序是以 wxapkg 拓展名的文件，在微信沙河目录下搜索 wxapkg</p>
<p>iPhone 设备微信打开小程序，打开微信沙盒目录，搜索 wxapkg 找到最新事件的 wxapkg 文件</p>
<p>导出拷贝到电脑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;var&#x2F;mobile&#x2F;Containers&#x2F;Data&#x2F;Application&#x2F;3A176EEE-76AD-4424-8966-961834916101&#x2F;Library&#x2F;WechatPrivate&#x2F;0461325054f5668774d3cf52bc6ead7b&#x2F;WeApp&#x2F;LocalCache&#x2F;release&#x2F;wx48e51a643b3b85db</span><br></pre></td></tr></table></figure>

<ul>
<li>wxapkg 解包</li>
</ul>
<p>node.js 脚本还原小程序源码</p>
<p>解包脚本  <a href="https://github.com/larack8/wxappUnpacker">https://github.com/larack8/wxappUnpacker</a>  </p>
<p>加个代理访问快些  <a href="https://gh.fakev.cn/larack8/wxappUnpacker">https://gh.fakev.cn/larack8/wxappUnpacker</a>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#一键解包还原</span><br><span class="line">#自动将 wxapkg 文件解包，并将包中相关的已被编译&#x2F;混淆的文件自动恢复原状（包括目录结构）</span><br><span class="line">node .&#x2F;wuWxapkg.js &#x2F;Users&#x2F;xxx&#x2F;Desktop&#x2F;unpack&#x2F;10.wxapkg</span><br></pre></td></tr></table></figure>

<p>最后在微信开发者工具中，新建空白小程序工程，将还原后的相关目录文件导入工程，即可编译运行起来</p>
<p><a href="https://juejin.cn/post/6844903603484753927">微信小程序反编译实战（一）解包</a></p>
]]></content>
  </entry>
  <entry>
    <title>opencv</title>
    <url>/2022/04/15/opencv/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install opencv-python</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> ndarray</span><br><span class="line">bg_img = cv2.imread(<span class="string">&#x27;shot2.png&#x27;</span>) <span class="comment">#读取图片</span></span><br><span class="line"><span class="comment">#imgCanny = cv2.Canny(img,threshold1,threshold2)</span></span><br><span class="line">bg_edge = cv2.Canny(bg_img, <span class="number">100</span>, <span class="number">200</span>) <span class="comment">#识别图片边缘 得到图片边缘的灰度图</span></span><br><span class="line">bg_pic = cv2.cvtColor(bg_edge, cv2.COLOR_GRAY2RGB) <span class="comment">#将图片转换为RBG格式</span></span><br><span class="line">imgGray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) <span class="comment">#将图像转换为灰度图像</span></span><br></pre></td></tr></table></figure>



<h5 id="读写显示图像"><a href="#读写显示图像" class="headerlink" title="读写显示图像"></a>读写显示图像</h5><ul>
<li>imread()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&quot;PATH_TO_IMAGE.jpg/png&quot;</span>)</span><br><span class="line">img = imread(<span class="string">&quot;images/dog0.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>imshow()</li>
</ul>
<p>两个输入，一个是图像窗口的名字即title，一个是所展示图像的像素矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.imshow(<span class="string">&#x27;gray_scale&#x27;</span>, gray_scale)</span><br><span class="line"><span class="comment">#gray_scale 矩阵的数据类型是 np.uint8，浮点数类型会有显示异常情况</span></span><br><span class="line"><span class="comment">#同时需要在语句后加上</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#在时间k（单位ms）内，等待用户按键（例如关闭图像窗口）触发，如果没有触发事件，则跳出等待</span></span><br><span class="line"><span class="comment">#k=0，则无限等待触发事件</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;shot2.png&#x27;</span>, flags=<span class="number">0</span>) <span class="comment">#flag=0读取为灰度图像 flag=1读取为彩色图像RGB</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;demo&#x27;</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>imwrite()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cv2.imwrite(FILENAME, IMAGE)</span></span><br><span class="line">cv2.imwrite(<span class="string">&#x27;images/img&#x27;</span>,img)</span><br></pre></td></tr></table></figure>

<h5 id="调整大小和裁剪图像"><a href="#调整大小和裁剪图像" class="headerlink" title="调整大小和裁剪图像"></a>调整大小和裁剪图像</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;shot2.png&#x27;</span>, flags=<span class="number">0</span>) <span class="comment"># type: ndarray</span></span><br><span class="line">print(img.shape) <span class="comment"># (164, 290)</span></span><br><span class="line"></span><br><span class="line">imgResize1 = cv2.resize(img, (<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">imgResize2 = cv2.resize(img, (<span class="number">1024</span>, <span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;Image&#x27;</span>, img)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Image Resize2&#x27;</span>, imgResize1)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Image Resize2&#x27;</span>, imgResize2)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>不想对宽高进行硬编码，也可以使用形状，然后用索引增加宽高</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;shot2.png&#x27;</span>, flags=<span class="number">0</span>) <span class="comment"># type: ndarray</span></span><br><span class="line">print(img.shape)</span><br><span class="line">shape = img.shape</span><br><span class="line">imgResize1 = cv2.resize(img, (shape[<span class="number">0</span>] // <span class="number">2</span>, shape[<span class="number">1</span>] // <span class="number">2</span>))  <span class="comment">##Decrease size</span></span><br><span class="line">imgResize2 = cv2.resize(img, (shape[<span class="number">0</span>] * <span class="number">2</span>, shape[<span class="number">1</span>] * <span class="number">2</span>))  <span class="comment">##Increase size</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;Image Resize&quot;</span>, imgResize1)</span><br><span class="line">cv2.imshow(<span class="string">&quot;Image Increase size&quot;</span>, imgResize2)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>裁剪图像</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#retval = img[y:y+h, x:x+w]</span></span><br><span class="line"><span class="comment"># img nparray 多维数组</span></span><br><span class="line"><span class="comment"># x,y 左上角坐标值</span></span><br><span class="line"><span class="comment"># w,h 宽度、高度</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;shot2.png&#x27;</span>, flags=<span class="number">1</span>) <span class="comment"># type: ndarray</span></span><br><span class="line">print(img.shape)<span class="comment">#(164, 290, 3)</span></span><br><span class="line">imgCropped = img[<span class="number">0</span>:<span class="number">100</span>, <span class="number">50</span>:<span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;image&#x27;</span>, img)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;cropped&#x27;</span>, imgCropped)</span><br><span class="line">print(imgCropped.shape)<span class="comment">#(100, 50, 3)</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h5 id="绘制几何图形"><a href="#绘制几何图形" class="headerlink" title="绘制几何图形"></a>绘制几何图形</h5><ul>
<li>绘制矩形</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cv.rectangle(img,leftupper,rightdown,color,thickness)</span></span><br><span class="line"><span class="comment">#img:要绘制矩形的图像</span></span><br><span class="line"><span class="comment">#Leftupper, rightdown: 矩形的左上角和右下角坐标</span></span><br><span class="line"><span class="comment">#color: 线条的颜色</span></span><br><span class="line"><span class="comment">#Thickness: 线条宽度</span></span><br><span class="line">img_copy = img.copy()</span><br><span class="line"><span class="comment"># Draw a rectangle</span></span><br><span class="line">cv2.rectangle(img_copy, pt1 = (<span class="number">800</span>, <span class="number">470</span>), pt2 =(<span class="number">980</span>, <span class="number">530</span>),</span><br><span class="line">             color = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), thickness = <span class="number">5</span>)</span><br><span class="line">plt.imshow(img_copy)</span><br></pre></td></tr></table></figure>

<h5 id="轮廓"><a href="#轮廓" class="headerlink" title="轮廓"></a>轮廓</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;shot1.png&#x27;</span>, flags=<span class="number">1</span>) <span class="comment"># type: ndarray</span></span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">ret, thresh = cv2.threshold(gray, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">contours, hierachy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)</span><br><span class="line">draw_img = img.copy()</span><br><span class="line">res = cv2.drawContours(draw_img, contours, <span class="number">-1</span>, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>), <span class="number">2</span>) <span class="comment">#绘制轮廓</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;res&#x27;</span>, res)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;image&#x27;</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>



<h6 id="灰度图"><a href="#灰度图" class="headerlink" title="灰度图"></a>灰度图</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) <span class="comment">#灰度图</span></span><br></pre></td></tr></table></figure>

<h6 id="图像阈值"><a href="#图像阈值" class="headerlink" title="图像阈值"></a>图像阈值</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret, dst = cv2.threshold(src, thresh, maxval, <span class="built_in">type</span>)</span><br><span class="line"><span class="comment">#src 输入图，只能输入单通道图，通常来说为灰度图</span></span><br><span class="line"><span class="comment">#dst 输出图</span></span><br><span class="line"><span class="comment">#thresh 阈值</span></span><br><span class="line"><span class="comment">#maxval 当像素值超过了阈值（或者小于阈值，根据type来决定），所赋予的值</span></span><br><span class="line"><span class="comment">#type </span></span><br><span class="line"><span class="comment">#cv2.THRESH_TOZERO；cv2.THRESH_TOZERO_INV</span></span><br><span class="line"><span class="comment">#cv2.THRESH_BINARY 超过阈值部分取maxval（最大值），否则取0</span></span><br><span class="line"><span class="comment">#cv2.THRESH_BINARY_INV THRESH_BINARY的反转</span></span><br><span class="line"><span class="comment">#cv2.THRESH_TRUNC 大于阈值部分设为阈值，否则不变</span></span><br><span class="line"><span class="comment">#cv2.THRESH_TOZERO 大于阈值部分不改变，否则设为0</span></span><br><span class="line"><span class="comment">#cv2.THRESH_TOZERO_INV THRESH_TOZERO的反转</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment"># python 绘图工具</span></span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;shot1.png&#x27;</span>, flags=<span class="number">1</span>) <span class="comment"># type: ndarray</span></span><br><span class="line"></span><br><span class="line">img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) <span class="comment">#灰度图</span></span><br><span class="line">ret, thresh1 = cv2.threshold(img_gray, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">ret, thresh2 = cv2.threshold(img_gray, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY_INV)</span><br><span class="line">ret, thresh3 = cv2.threshold(img_gray, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_TRUNC)</span><br><span class="line">ret, thresh4 = cv2.threshold(img_gray, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_TOZERO)</span><br><span class="line">ret, thresh5 = cv2.threshold(img_gray, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_TOZERO_INV)</span><br><span class="line"></span><br><span class="line">titles = [<span class="string">&#x27;Original Image&#x27;</span>, <span class="string">&#x27;BINARY&#x27;</span>, <span class="string">&#x27;BINARY_INV&#x27;</span>, <span class="string">&#x27;TRUNC&#x27;</span>, <span class="string">&#x27;TOZERO&#x27;</span>, <span class="string">&#x27;TOZERO_INV&#x27;</span>]</span><br><span class="line">images = [img, thresh1, thresh2, thresh3, thresh4, thresh5]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>, i + <span class="number">1</span>), plt.imshow(images[i], <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.title(titles[i])</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="opencv/WeChatccfd9ec187d01b4329b4ce667c160300.png" alt="WeChatccfd9ec187d01b4329b4ce667c160300" style="zoom:70%;" />













































]]></content>
  </entry>
  <entry>
    <title>记录下1</title>
    <url>/2022/04/25/%E8%AE%B0%E5%BD%95%E4%B8%8B1/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="78aa9517902bb1cd759fdab35844173ffedd1069d489d0671937202d76829280"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>记录下2</title>
    <url>/2022/04/26/%E8%AE%B0%E5%BD%95%E4%B8%8B2/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="f0fc1b52b81c290a2fa392c209830822f3630f38b80601783e1d5aecc23db942">f52eb17464deb7d951323d6412142093972b99e442cd6fcdcf1ce39eef403470eb90b715056397b2790ee61afd0364577a9aa2b80857960fcb13757b4876a9abee70128ba62c5a1129dcdc9c38ff56e332c177da3bf4b75c3edaab499365d846ef6e615666e3f1dee9145918aeecf0b73a09ee1e1e7fbc2693920b0d3501e58f90b6822c42ed9bfd81fab189461ace1e34850297bd0e5248a551fbfde607ed609289ff1119ccd771b4d963c30bb54eeab1fca820d7078cd4f27416b7c8f265fc54459160a5ce5e0a0ddeb4b896d4bb7201120b34941daf1ac0d58fc5056b26898ca507c6ba4e1ba047277000882564e66a6128811a9810c23cfadb542371c5ae023bd2e29ecf03f624319f3d7f353334790bd3898457a0508bcfc5eb618016ad5365bb9315c71f87cac3eb3c2a874714534e69068279b006f2fa3b8c287e8c0ac32d75e4b4b42220ca37dff4578c1e3773ceb5ca6e3c9e5b9e7616e4b72e55f54ffe77a33a3d02362d00253add029eae8e0da1ec818b8465ea51194ad606e7cdb4cb87272e793a3dc0cd7a6883d731766ddd059e904c35a354e0bec65c061c23309d968ffea7215d74a8e232efca08c1a05d19c512c50f5d43911167447a0f04eaf783f10b93f301016c7d627531e0c3ce538a5a98452a6588a880d51ababfdd725dc0ca0dc71cffd51e5bc0934f098cd5fd64ee672a467e0451ca367f886f09d837cffdb3c33defef4e669e831deb7b2c15b6bbd419a00df683cac0370e59bf8fdc48e3854563c8ae560302058ad3f7c35d36eec51d8e810c8afa32373851808ddeb5494a4fa33d68fa458534fa519c341172fc71f4a4211e3c08203ef9a1b0017db5a7b783ed8131d91b999fa88f457c94315fd3f614da98e667b25bf9a5f27234844ab6912c9f5e5f17dec2d417c87a0ad8fdb9061f288e1553994afa02ad0485372b58d4784de920cabf04beaa099f9e1be664ad6b9fa77575697452dc9c751277d9ff19257594b9555e42e79eff8f21b495910347f1343be68bc782ae5e1805bf94be3529fe36ddea34d536b782c9481356d24e0579380914108ac7dd0ac168e8d0db3572ffc8436d734c696555721e2590e97b4b5276c6978e305291253000fdd48bde62bc07456fbf983f8489200a8f142a4c0422d3172c6610134588ae7f0127fb0d4e408e210dde948f20cc642aaeeb319a1f821dc5137cd87f72b8262dd2932bf8f8b47498fd08e4c0f7d874c613fafda96111889a8bf0064893bd4527cb23b2bf11b5dfa58ae373fb78682c6deab57af66f529936d47da24bb2a9d0e2b5e150993b9d044c40b3f1c8296f4c06e876e3bcfb1c69d859695b11f26e862b6a14f6f66e256490ad95e62e486e1fb884afed813c6854af098f5abdddf93a9285a94dc75c91aabd92270eba977703c88eeb6156a8e3e0234aaffe0dbe3416bb0bae75383f2bf2d448925d836ff30286e2c149f447c9546285691a09eeb6f33bbd854a34cee76b41cd467431a2a02d783199e9233b0b781ede78be7f1d2d65d281dfe66633f2203ebf3080bfb5ca0891e0c712af802c22dd3e5a19c789a09504d0dface2cd38ca289d6b929a127e47287601b72c0e0c5030f118c545285d7f37078336406331fc3ad163b8821684dcdeea52847ea6434528237606f1371586f490532d46c9818605ac4358420ec0ac73100db2351d1c3bb68d87bce520f28eb155da5f669090d3721b43c0fadb2a6939fe2d3cb83ba2cd2cbe711b5b230cfa715bd7699fcd14329e4d70e2f7f055a4b16c3aa7306ce35c576b4ed38e678246171b75322f707d882f97563b8b4c8b97732297caf63705caa4eed3680952e49712d699fe7f99f3b02437f7f40c2215a9e7397c0f7aeee22fbabe00992ff2cde1ebd47eda14d8e8b8a020c5159799bca8972b189fc024372d22d269f5c6483e1afef4dd1d3bdddf4c4c78a4e9821e8f3ea6158da068926d0265c9a0319a3c7009bc8b44df2ed7e2bf1cfc135abd1be7ec3fc78a887b5084e4a7c2110f264fda39e48de07dde869802636c11e39664fe33abe3820475788a3f0dcdfd3633251abe1216ce0ece7b374bb2a09b8ae71899f750ae5c6f0875e532e113ec124018df3e75865aa5b0190e1044077e4fa438cd00cb9c1cd8c6f2d8da6c218fbbd5a3b30560588484faf0f0e789ec2028f51d330dc6c71d20f7c28ed868e8ef1f57aa5a5f0f7d074405f7d887762961f81063f3fea403f642c1de5e3db8d79acd71d94934e05c53868e7e9593f87e14b5a266eb864104aae1f54fc5eca109504f0133b1d0a0057af96f752478d5fce19b114160a361258df081ae25b715267b9b9f3afac0162dcd04551bd963d321397481512606d4cf5a9eec038de1d2102c2b48f9a562492ccb6c60097aa5563d20499eae2e1ead22f04597f4243f8fc7892498d8881308a26f7f3dae3461b2ff18784a82c60ab7c43d299b6f2db1adea3b36b6c0f7737302733ca98267a7facfc3b80787f66c3ed5afe9f9a5ca967254d76ac2f07f2b0e204a6addda472944661412cfff1c2cb7478256885203098b3164dcd7b2d66286635e83f155f3f84070168e12222bb46bd5ba062bcd58432a4c702fb01d6ed59b0fc9915b9203019b09bda1e6825a087eb6e8ee16f3b859505fcc35ddb1b4c0ddfdc3e0fb377703458cacd63139442054898738cb921234fa5c53e9c31f3c1c87d9c127544a2c51bd56dbd590bd9fd1eab4e1f8395a7de2ba75981f8ec72f84542b4b1c2d6dfb44a8e985c6592b60a40084710d5c7d4b51e3e456d6f27a84a5cf84157f87cc440b0cbc0bf1d44717f4e018e569708c8efd6f9e3804ecaf43c9ec17a9a6b7d70d8913dcaa14ddea84331bdef603c96e7d63863400eac7638071da015a460400ff2e5f8a8fc574ae6bb8755d66b8a92af46711c4d2ce41a044fd976e719e0f8753f1828c8c47d5ef2abd062d61818e7608a62f6ced71e465a8c7fce2f363f84d0a2c83fce32e6bb2b4bf681b955ecd282e6cead5ec8e7c0a4681121988b86b7072c8141e0f7a0ee97bc9ce1b8197aa7001ae0c6b900cfad02bcafc09404a9f0b1fb75c541d6fe43e0a21cf84e2e6daf201dfee143b34cb272be4ec3565eefbc12edbf95918531a0fd7b27aa698a5f236697435eb5a0e20d5daa17c38c2f1d3a17375156f794f8bbf60bb99e42d9d0cb1da11b966b5265a0737845fabd65e8137358aab06dab9a5cf1e0b80b97813098bd710a9d3db727edd363bc6ad34e2a411a75ae5d95551bc799f3ed0a6c6f9f3febab0015e07f9473cb9f3cbab2da2f186504ccd2c40a3975dbb89db414d2bbeaf55aacc6e9d1341c1be70a0580071752d702f9dd06965eef44b662c216bd4624c6d4207e220691b630c694a74709b89f311b2b9e275ddced6ad614282a424a59b3e0c5071ade4ac517beaaa0a707edd778f3951829d3871c4d49e72819a94179cd9162a70bfbc096eaca128e5d26cff2183ae0842a06387e340e230f45105f2cd18211b20a13cc191e888296f95e40e4c7c5bf5c2cad540e34021e38e3537d1332f0feb78e85735ef38f0904a4689be3b819b9d37a0d996614d6f451643e0f5d46841808d564d6f01d0f85fa00d699556e415ba6cc925059d57adb5a93e6099c8a4a22339f3c026af0e3241bff4db60115aed6ed83a729bd8b2d5572c564e22b899a8c9d16b502cae633f5845096153a7c7c8f4b3f9acf620aacc6914ba8f3aefeb89df8fb2f9530a44024299a6b469b351199bffbceb66134334a1eedc4f6ff075859c6430592be0d722ade39c7bbd94a13a2fb80edabc85a5976a497604d8d80e2a247dbd3bc0caf854daa29f069fdc46db4130407cc16c7cb0f4024fadc13f3e57b575968f52bf95</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>逆向-Frida RPC调用</title>
    <url>/2022/06/17/%E9%80%86%E5%90%91-Frida-RPC%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<p>Frida 提供了 RPC（远程过程调用）功能，开发人员可以将封装好的任意函数指定为 RPC函数，提供给Python使用。</p>
<p>比如应用中存在一个加密函数，开发者不想分析它的实现，只是想调用它来得到结果，则可以将此加密函数导出，利用Python来调用它</p>
<p>利用 rpc.exports={} 导出RPC函数，多个函数间用逗号分隔</p>
<h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>定义 CoreClass 类里面 4 个方法 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)getDeviceId &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSString</span> *)httpPost:(<span class="built_in">NSURL</span> *)url &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;URL: %@&quot;</span>, url);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span>*)encrypt:(<span class="built_in">NSData</span>*)data key:(<span class="built_in">NSString</span>*)key&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;data: %@&quot;</span>, data);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;key: %@&quot;</span>, key);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@&quot;encrypt successed!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span>*)decrypt:(<span class="built_in">NSString</span>*)str key:(<span class="built_in">NSString</span>*)key&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;str: %@&quot;</span>, str);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;key: %@&quot;</span>, key);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@&quot;decrypt successed!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>现在要在 JS 里调用这 4 个方法</li>
</ul>
<p>实例方法需要初始化一个实例</p>
<p>类方法不需要初始化实例，在方法名称后面加上一个 _ 就可以调用了</p>
<p>JS 脚本: rpc.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ObjC.available) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;\n[*] Starting Hooking&#x27;</span>)</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> coreClass = ObjC.classes.CoreClass.alloc()</span><br><span class="line">		<span class="comment">//JS调用OC实例方法</span></span><br><span class="line">		<span class="keyword">var</span> deviceId = coreClass[<span class="string">&#x27;- getDeviceId&#x27;</span>].call(coreClass)</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;deviceId: &#x27;</span>+deviceId)</span><br><span class="line">		<span class="comment">//JS调用OC类方法</span></span><br><span class="line">		<span class="keyword">var</span> url = ObjC.classes.NSURL.URLWithString_(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">		<span class="keyword">var</span> retString = ObjC.classes.CoreClass.httpPost_(url)</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;retString: &#x27;</span>+retString)</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">var</span> str = ObjC.classes.NSString.stringWithString_(<span class="string">&#x27;testStr&#x27;</span>)</span><br><span class="line">		<span class="comment">//NSData *data = [str dataUsingEncoding:NSUTF8StringEncoding]</span></span><br><span class="line">		<span class="keyword">var</span> data = str.dataUsingEncoding_(<span class="number">4</span>)</span><br><span class="line">		<span class="keyword">var</span> key = ObjC.classes.NSString.stringWithString_(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">var</span> encryptString = coreClass[<span class="string">&#x27;- encrypt:key:&#x27;</span>].call(coreClass, decryptStr, key2)</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;encryptString: &#x27;</span>+encryptString)</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3.8 cmake.py rpc.js</span><br><span class="line"></span><br><span class="line">[*] Starting Hooking</span><br><span class="line">deviceId: e10adc3949ba59abbe56e057f20f883e</span><br><span class="line">retString: test</span><br><span class="line">encryptString: encrypt successed!</span><br><span class="line">decryptString: decrypt successed!</span><br></pre></td></tr></table></figure>

<p>接下来将代码导出给 Python 使用，JS 代码里定义 4 个函数</p>
<p>getDeviceId、httpPost、encrypt、decrypt，4个函数分别代表了调用目标进程的4个OC方法，然后用 rpc.exports 将 4 个函数导出</p>
<p>rpc.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ObjC.available) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;\n[*] Starting Hooking&#x27;</span>)</span><br><span class="line">	</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getHomeDirectory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> NSHomeDirectory = <span class="keyword">new</span> NativeFunction(ptr(Module.findExportByName(<span class="string">&quot;Foundation&quot;</span>, <span class="string">&quot;NSHomeDirectory&quot;</span>)), <span class="string">&#x27;pointer&#x27;</span>, [])</span><br><span class="line">    <span class="keyword">var</span> path = <span class="keyword">new</span> ObjC.Object(NSHomeDirectory());</span><br><span class="line">    <span class="keyword">return</span> path.toString()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getDeviceId</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> coreClass = ObjC.classes.CoreClass.alloc()</span><br><span class="line">		<span class="keyword">var</span> deviceId = coreClass[<span class="string">&#x27;- getDeviceId&#x27;</span>].call(coreClass)</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;deviceId: &#x27;</span>+deviceId)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">httpPost</span>(<span class="params">inputurl</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> url = ObjC.classes.NSURL.URLWithString_(inputurl)</span><br><span class="line">		<span class="keyword">var</span> retString = ObjC.classes.CoreClass.httpPost_(url)</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;retString: &#x27;</span>+retString)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">inputstr, inputkey</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> coreClass = ObjC.classes.CoreClass.alloc()</span><br><span class="line">		<span class="keyword">var</span> str = ObjC.classes.NSString.stringWithString_(inputstr)</span><br><span class="line">		<span class="comment">//NSData *data = [str dataUsingEncoding:NSUTF8StringEncoding]</span></span><br><span class="line">		<span class="keyword">var</span> data = str.dataUsingEncoding_(<span class="number">4</span>)</span><br><span class="line">		<span class="keyword">var</span> key = ObjC.classes.NSString.stringWithString_(inputkey)</span><br><span class="line">		<span class="keyword">var</span> encryptString = coreClass[<span class="string">&#x27;- encrypt:key:&#x27;</span>].call(coreClass, data, key)</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;encryptString: &#x27;</span>+encryptString)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params">inputstr, inputkey</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> coreClass = ObjC.classes.CoreClass.alloc()</span><br><span class="line">		<span class="keyword">var</span> decryptStr = ObjC.classes.NSString.stringWithString_(inputstr)</span><br><span class="line">		<span class="keyword">var</span> key2 = ObjC.classes.NSString.stringWithString_(inputkey)</span><br><span class="line">		<span class="keyword">var</span> decryptString = coreClass[<span class="string">&#x27;- decrypt:key:&#x27;</span>].call(coreClass, decryptStr, key2)</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;decryptString: &#x27;</span>+decryptString)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	rpc.exports = &#123;</span><br><span class="line">    gethomedirectory: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">// homedirectory 必须小写</span></span><br><span class="line">      <span class="keyword">return</span> getHomeDirectory()</span><br><span class="line">    &#125;,</span><br><span class="line">		deviceid: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			getDeviceId()</span><br><span class="line">		&#125;,</span><br><span class="line">		httppost: <span class="function"><span class="keyword">function</span>(<span class="params">inputurl</span>)</span>&#123;</span><br><span class="line">			httpPost(inputurl)</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="function"><span class="title">encrypt</span>(<span class="params">inputstr, inputkey</span>)</span>&#123;</span><br><span class="line">			encrypt(inputstr, inputkey)</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="function"><span class="title">decrypt</span>(<span class="params">inputstr, inputkey</span>)</span>&#123;</span><br><span class="line">			decrypt(inputstr, inputkey)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Python调用 cmake.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">bundle = <span class="string">&#x27;com.CMake&#x27;</span></span><br><span class="line"></span><br><span class="line">print(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> codecs.<span class="built_in">open</span>(sys.argv[<span class="number">1</span>], <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    source = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment">#f = open(s, &#x27;r&#x27;) #打开frida脚本</span></span><br><span class="line"><span class="comment">#source = f.read() #读取frida脚本</span></span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device(<span class="number">1000</span>) <span class="comment">#连接usb设备 1000表示超时</span></span><br><span class="line">pid = device.spawn(bundle) <span class="comment">#启动指定bundleId的app</span></span><br><span class="line">session = device.attach(pid)  <span class="comment">#附加到app</span></span><br><span class="line">script = session.create_script(source) <span class="comment">#创建frida javaScript脚本</span></span><br><span class="line">script.load() <span class="comment">#load脚本到app进程中 这样即注入成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rpc调用</span></span><br><span class="line">rpc = script.exports</span><br><span class="line">rpc.deviceid()</span><br><span class="line">rpc.httppost(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">rpc.encrypt(<span class="string">&#x27;str1&#x27;</span>, <span class="string">&#x27;key1&#x27;</span>)</span><br><span class="line">rpc.decrypt(<span class="string">&#x27;str2&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(rpc.homeDirectory())</span><br><span class="line"></span><br><span class="line">device.resume(pid) <span class="comment">#恢复app运行</span></span><br><span class="line">sys.stdin.read()<span class="comment">#读取打印日志</span></span><br></pre></td></tr></table></figure>

<h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>rpc.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打开URL</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openURL</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> UIApplication = ObjC.classes.UIApplication.sharedApplication();</span><br><span class="line">  <span class="keyword">var</span> toOpen = ObjC.classes.NSURL.URLWithString_(url);</span><br><span class="line">  <span class="keyword">return</span> UIApplication.openURL_(toOpen);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//播放系统声音</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">playSystemSound</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> NativeFunction(Module.ExportByName(<span class="string">&#x27;AudioToolbox&#x27;</span>,<span class="string">&#x27;AudioServicesPlaySystemSound&#x27;</span>),<span class="string">&#x27;void&#x27;</span>,[<span class="string">&#x27;int&#x27;</span>])(<span class="number">1111</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导出RPC函数</span></span><br><span class="line">rpc.exports = &#123;</span><br><span class="line">  openUrl: <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    openURL(url);</span><br><span class="line">  &#125;,</span><br><span class="line">  sound: <span class="function"><span class="title">fucntion</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  	playSystemSound();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>rpc.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  <span class="comment">#附加到目标进程</span></span><br><span class="line">  session = frida.get_usb_device().attach(<span class="string">u&#x27;App Store&#x27;</span>)</span><br><span class="line">  <span class="comment">#读取JS脚本</span></span><br><span class="line">  <span class="keyword">with</span> codecs.<span class="built_in">open</span>(<span class="string">&#x27;./rpc.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    souce = f.read()</span><br><span class="line">    </span><br><span class="line">  script = session.create_script(source)</span><br><span class="line">  script.load()</span><br><span class="line">  rpc = script.exports</span><br><span class="line">  rpc.openurl(<span class="string">&quot;https://www.chinapyg.com&quot;</span>);</span><br><span class="line">  rpc.sound()</span><br><span class="line">  session.detach()</span><br></pre></td></tr></table></figure>

<p>本例的JS脚本导出了两个RPC函数，程序启动后执行rpc.py脚本将rpc.js文件注入</p>
]]></content>
  </entry>
  <entry>
    <title>逆向-Frida拦截sub_xxx函数</title>
    <url>/2022/06/17/%E9%80%86%E5%90%91-Frida%E6%8B%A6%E6%88%AAsub-xxx%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>IDA 里看到的 <code>sub_1000061B4</code>  这种类型的函数是没有符号的，所以 IDA 解析时就显示 <code>sub_1000061B4</code></p>
<p>1000061B4 是 IDA 读取到的函数地址</p>
<p>定义一个函数</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> add(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2) &#123;</span><br><span class="line">    <span class="keyword">int</span> sum = num1 + num2;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="keyword">int</span> sum = add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;1+1=%d&quot;</span>, sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译后将可执行文件拖入 IDA，显示定义的函数是这种 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall add(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a1 + a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先去掉符号 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ strip -x &#x2F;Users&#x2F;xxx&#x2F;Desktop&#x2F;CMake&#x2F;CMake.app&#x2F;CMake</span><br></pre></td></tr></table></figure>

<p>再将可执行文件拖入 IDA</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall sub_1000061B4(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a1 + a2);</span><br><span class="line">&#125;</span><br><span class="line">sub_1000061B4(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="built_in">CFSTR</span>(<span class="string">&quot;1+1=%d&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>编写 Frida 脚本</p>
<p>IDA 上 C 函数偏移地址 0x61B4 </p>
<h4 id="cmake-js"><a href="#cmake-js" class="headerlink" title="cmake.js"></a>cmake.js</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_rva</span>(<span class="params"><span class="built_in">module</span>, offset</span>) </span>&#123;</span><br><span class="line">	<span class="comment">//获取基地址</span></span><br><span class="line">	<span class="keyword">var</span> base_addr = Module.findBaseAddress(<span class="built_in">module</span>)</span><br><span class="line">	<span class="comment">//函数地址 = 基地址+偏移地址</span></span><br><span class="line">	<span class="keyword">var</span> target_addr = base_addr.add(offset) </span><br><span class="line">	<span class="keyword">if</span> (Process.arch == <span class="string">&#x27;arm&#x27;</span>) &#123; <span class="comment">//如果是32位地址+1</span></span><br><span class="line">		<span class="keyword">return</span> target_addr.add(<span class="number">1</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> target_addr</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ObjC.available) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;\n[*] Starting Hooking&#x27;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> target_addr = get_rva(<span class="string">&#x27;CMake&#x27;</span>, <span class="number">0x61B4</span>)</span><br><span class="line">	</span><br><span class="line">	Interceptor.attach(ptr(target_addr), &#123;</span><br><span class="line">		onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;onEnter&#x27;</span>);</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;num1: &#x27;</span>+args[<span class="number">0</span>])</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;num2: &#x27;</span>+args[<span class="number">1</span>])</span><br><span class="line">		&#125;, </span><br><span class="line">		onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;onLeave&#x27;</span>)</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;Return value: &#x27;</span>+retval)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3.8 cmake.py cmake.js</span><br><span class="line"></span><br><span class="line">[*] Starting Hooking</span><br><span class="line">onEnter</span><br><span class="line">num1: 0x1</span><br><span class="line">num2: 0x2</span><br><span class="line">onLeave</span><br><span class="line">Return value: 0x3</span><br></pre></td></tr></table></figure>

<p>可以看到输入 1 + 2 结果 3</p>
<h4 id="cmake-py"><a href="#cmake-py" class="headerlink" title="cmake.py"></a>cmake.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">bundle = <span class="string">&#x27;com.CMake&#x27;</span></span><br><span class="line"></span><br><span class="line">print(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> codecs.<span class="built_in">open</span>(sys.argv[<span class="number">1</span>], <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    source = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment">#f = open(s, &#x27;r&#x27;) #打开frida脚本</span></span><br><span class="line"><span class="comment">#source = f.read() #读取frida脚本</span></span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device(<span class="number">1000</span>) <span class="comment">#连接usb设备 1000表示超时</span></span><br><span class="line">pid = device.spawn(bundle) <span class="comment">#启动指定bundleId的app</span></span><br><span class="line">session = device.attach(pid)  <span class="comment">#附加到app</span></span><br><span class="line">script = session.create_script(source) <span class="comment">#创建frida javaScript脚本</span></span><br><span class="line">script.load() <span class="comment">#load脚本到app进程中 这样即注入成功</span></span><br><span class="line">device.resume(pid) <span class="comment">#恢复app运行</span></span><br><span class="line">sys.stdin.read()<span class="comment">#读取打印日志</span></span><br></pre></td></tr></table></figure>

























<p><a href="https://blog.csdn.net/weixin_42400619/article/details/113385014?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165544788016782184643503%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=165544788016782184643503&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-6-113385014-null-null.nonecase&utm_term=frida+%E5%AE%9E%E6%88%98&spm=1018.2226.3001.4450">Frida如何拦截sub_xxx函数</a></p>
]]></content>
  </entry>
  <entry>
    <title>逆向-Frida绕过iOS反调试</title>
    <url>/2022/06/18/%E9%80%86%E5%90%91-Frida%E7%BB%95%E8%BF%87iOS%E5%8F%8D%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<p>macOS</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ iproxy 2222 22 #端口转发</span><br><span class="line">$ ssh -p 2222 root@localhost</span><br></pre></td></tr></table></figure>

<p>iOS设备上，查找应用进程名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root# ps -e</span><br><span class="line">8082 ??   0:16.32 &#x2F;var&#x2F;containers&#x2F;Bundle&#x2F;Application&#x2F;XXXX&#x2F;XinHuaShe.app&#x2F;XinHuaShe</span><br></pre></td></tr></table></figure>

<p>启动 debugserver 附加到 XinHuaShe 进程，监听 1234 端口，等待电脑端 LLDB 接入</p>
<p>debugserver 主机IP地址:端口号 -a 应用进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root# debugserver *:1234 -a XinHuaShe</span><br><span class="line">Attaching to process XinHuaShe...</span><br><span class="line">Segmentation fault: 11</span><br></pre></td></tr></table></figure>

<p>提示 <code>Segmentation fault: 11</code> 了 ，APP 做了反调试的防护</p>
<p>目前公开的反动态调试的防护就 ptrace</p>
<p>启动 APP</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root# debugserver -x posix *:1234 &#x2F;var&#x2F;containers&#x2F;Bundle&#x2F;Application&#x2F;CB03D455-A7BC-4762-84C6-3FAE31A3C67C&#x2F;XinHuaShe.app&#x2F;XinHuaShe</span><br></pre></td></tr></table></figure>

<p>电脑端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ iproxy 1234 1234</span><br><span class="line">$ lldb</span><br><span class="line">(lldb) process connect connect:&#x2F;&#x2F;localhost:1234 &#x2F;&#x2F;手机IP地址</span><br><span class="line">error: failed to get reply to handshake packet  &#x2F;&#x2F;报错了</span><br></pre></td></tr></table></figure>

<p>修改启动debugserver</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root# debugserver -x posix localhost:1234 &#x2F;var&#x2F;containers&#x2F;Bundle&#x2F;Application&#x2F;CB03D455-A7BC-4762-84C6-3FAE31A3C67C&#x2F;XinHuaShe.app&#x2F;XinHuaShe</span><br></pre></td></tr></table></figure>

<p>继续</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ lldb</span><br><span class="line">(lldb) process connect connect:&#x2F;&#x2F;localhost:1234 &#x2F;&#x2F;手机IP地址</span><br><span class="line"></span><br><span class="line">Process 9824 stopped</span><br><span class="line">* thread #1, stop reason &#x3D; signal SIGSTOP</span><br><span class="line">    frame #0: 0x0000000108c91000 dyld&#96; _dyld_start</span><br><span class="line">dyld&#96;_dyld_start:</span><br><span class="line">-&gt;  0x108c91000 &lt;+0&gt;:  mov    x28, sp</span><br><span class="line">    0x108c91004 &lt;+4&gt;:  and    sp, x28, #0xfffffffffffffff0</span><br><span class="line">    0x108c91008 &lt;+8&gt;:  mov    x0, #0x0</span><br><span class="line">    0x108c9100c &lt;+12&gt;: mov    x1, #0x0</span><br><span class="line">    0x108c91010 &lt;+16&gt;: stp    x1, x0, [sp, #-0x10]!</span><br><span class="line">    0x108c91014 &lt;+20&gt;: mov    x29, sp</span><br><span class="line">    0x108c91018 &lt;+24&gt;: sub    sp, sp, #0x10             ; &#x3D;0x10</span><br><span class="line">    0x108c9101c &lt;+28&gt;: ldr    x0, [x28]</span><br><span class="line">Target 0: (XinHuaShe) stopped.</span><br><span class="line"></span><br><span class="line">(lldb) c</span><br><span class="line">Process 9824 resuming</span><br><span class="line">Process 9824 exited with status &#x3D; 45 (0x0000002d) &#x2F;&#x2F;直接退出了</span><br><span class="line"></span><br><span class="line">(lldb) b ptrace &#x2F;&#x2F;给ptrace下断点</span><br><span class="line">Breakpoint 1: no locations (pending).</span><br><span class="line">WARNING:  Unable to resolve breakpoint to any actual locations.</span><br><span class="line">(lldb) c</span><br><span class="line">Process 9841 resuming</span><br><span class="line">1 location added to breakpoint 1</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;打印调用栈</span><br><span class="line">(lldb) bt</span><br><span class="line">error: invalid thread</span><br><span class="line">external version is 20200929_18:15:57_6075104</span><br><span class="line">Object_Creator constructor</span><br><span class="line">Process 9841 stopped</span><br><span class="line">* thread #1, queue &#x3D; &#39;com.apple.main-thread&#39;, stop reason &#x3D; breakpoint 1.1</span><br><span class="line">    frame #0: 0x00000001b02a33b0 libsystem_kernel.dylib&#96; __ptrace</span><br><span class="line">libsystem_kernel.dylib&#96;__ptrace:</span><br><span class="line">-&gt;  0x1b02a33b0 &lt;+0&gt;:  adrp   x9, 213850</span><br><span class="line">    0x1b02a33b4 &lt;+4&gt;:  add    x9, x9, #0x110            ; &#x3D;0x110</span><br><span class="line">    0x1b02a33b8 &lt;+8&gt;:  str    wzr, [x9]</span><br><span class="line">    0x1b02a33bc &lt;+12&gt;: mov    x16, #0x1a</span><br><span class="line">    0x1b02a33c0 &lt;+16&gt;: svc    #0x80</span><br><span class="line">    0x1b02a33c4 &lt;+20&gt;: b.lo   0x1b02a33e4               ; &lt;+52&gt;</span><br><span class="line">    0x1b02a33c8 &lt;+24&gt;: pacibsp</span><br><span class="line">    0x1b02a33cc &lt;+28&gt;: stp    x29, x30, [sp, #-0x10]!</span><br><span class="line">Target 0: (XinHuaShe) stopped.</span><br></pre></td></tr></table></figure>

<p>x30 寄存器也叫 lr 寄存器，打印返回地址 p/x $lr</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(lldb) p&#x2F;x $lr</span><br><span class="line">(unsigned long) $0 &#x3D; 0x00000001003139e0</span><br><span class="line">(lldb) image list -o -f</span><br><span class="line">[  0] 0x0000000000254000 &#x2F;private&#x2F;var&#x2F;containers&#x2F;Bundle&#x2F;Application&#x2F;CB03D455-A7BC-4762-84C6-3FAE31A3C67C&#x2F;XinHuaShe.app&#x2F;XinHuaShe(0x0000000100254000)</span><br></pre></td></tr></table></figure>

<p>地址转换下  0x00000001003139e0 - 0x0000000000254000 = 0x1000BF9E0</p>
<p>IDA 中查找 0x1000BF9E0 地址</p>
<img src="逆向-Frida绕过iOS反调试/图片 1.png" alt="图片 1" style="zoom:100%;" />

<p>这段代码的含义就明显了，动态调用 ptrace，达到反动态调试的目的</p>
<p>这段函数位于 sub_1000BF9A0 内部</p>
<p>定位到函数右键 Jump to xref</p>
<p>看到 sub_1000BF9A0 的显示调用这地址 start+20</p>
<p>![图片 2](逆向-Frida绕过iOS反调试/图片 2.png)</p>
<p>双击 start+20 查看实现，它是 start 函数，在 start 函数中动态调用 ptrace 函数来达到反动态调试的目的</p>
<ul>
<li>去掉 sub_1000BF9A0</li>
</ul>
<ol>
<li>可以用 tweak 的方式</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;substrate.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;mach-o/dyld.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> (*old_sub_ACF0)(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> new_sub_ACF0(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// old_sub_ACF0();</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;iOSRE: anti-anti-debugging&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%ctor &#123;</span><br><span class="line">  <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> _sub_ACF0 = (_dyld_get_image_vmaddr_slide(<span class="number">0</span>) + <span class="number">0xACF0</span>) | <span class="number">0x1</span>;</span><br><span class="line">    <span class="keyword">if</span> (_sub_ACF0) <span class="built_in">NSLog</span>(<span class="string">@&quot;iOSRE: Found sub_ACF0!&quot;</span>);</span><br><span class="line">    MSHookFunction((<span class="keyword">void</span> *)_sub_ACF0, (<span class="keyword">void</span> *)&amp;new_sub_ACF0, (<span class="keyword">void</span> **)&amp;old_sub_ACF0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用 fishhook</li>
<li>Frida replace 掉 sub_1000BF9A0 函数</li>
</ol>
<p>hook.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取函数地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_rva</span>(<span class="params"><span class="built_in">module</span>, offset</span>) </span>&#123;</span><br><span class="line">	<span class="comment">//获取基地址</span></span><br><span class="line">	<span class="keyword">var</span> base_addr = Module.findBaseAddress(<span class="built_in">module</span>)</span><br><span class="line">	<span class="comment">//函数地址 = 基地址+偏移地址</span></span><br><span class="line">	<span class="keyword">var</span> target_addr = base_addr.add(offset) </span><br><span class="line">	<span class="keyword">if</span> (Process.arch == <span class="string">&#x27;arm&#x27;</span>) &#123; <span class="comment">//如果是32位地址+1</span></span><br><span class="line">		<span class="keyword">return</span> target_addr.add(<span class="number">1</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> target_addr</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ObjC.available) &#123; <span class="comment">//OC类加载完成</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;\n[*] Starting Hooking&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> target_addr = get_rva(<span class="string">&#x27;XinHuaShe&#x27;</span>, <span class="number">0xBF9A0</span>)</span><br><span class="line">	<span class="comment">//NativeCallback(func, returnType, argTypes[,abi])</span></span><br><span class="line">	<span class="comment">//或者不用参数</span></span><br><span class="line">	Interceptor.replace(ptr(target_addr), <span class="keyword">new</span> NativeCallback(<span class="function"><span class="keyword">function</span>(<span class="params">argc, argv</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;hook sub_ptrace bypass&#x27;</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;, int, [int, int]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hook.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">bundle = <span class="string">&#x27;com.xinhuamm.d0001&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sys.argv[1] 第一个参数 </span></span><br><span class="line"><span class="keyword">with</span> codecs.<span class="built_in">open</span>(sys.argv[<span class="number">1</span>], <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    source = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment">#f = open(sys.argv[1], &#x27;r&#x27;) #打开frida脚本</span></span><br><span class="line"><span class="comment">#source = f.read() #读取frida脚本</span></span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device(<span class="number">1000</span>) <span class="comment">#连接usb设备 1000表示超时</span></span><br><span class="line">pid = device.spawn(bundle) <span class="comment">#启动指定bundleId的app</span></span><br><span class="line">session = device.attach(pid)  <span class="comment">#附加到app</span></span><br><span class="line">script = session.create_script(source) <span class="comment">#创建frida javaScript脚本</span></span><br><span class="line">script.load() <span class="comment">#load脚本到app进程中 这样即注入成功</span></span><br><span class="line">device.resume(pid) <span class="comment">#恢复app运行</span></span><br><span class="line">sys.stdin.read()<span class="comment">#读取打印日志</span></span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3.8 hook.py hook.js</span><br></pre></td></tr></table></figure>

<p>报错 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Failed to spawn: the request to open &quot;com.xinhuamm.d0001&quot; failed.</span><br></pre></td></tr></table></figure>

















<p><a href="https://la0s.github.io/2019/03/07/anti_ptrace/">Frida绕过iOS反调试</a></p>
<p><a href="https://iosre.com/t/7-2-0-ios/770">干掉高德地图反动态调试</a></p>
]]></content>
  </entry>
  <entry>
    <title>逆向-Frida记录</title>
    <url>/2022/06/20/%E9%80%86%E5%90%91-Frida%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h4 id="py脚本"><a href="#py脚本" class="headerlink" title="py脚本"></a>py脚本</h4><h5 id="start-frida-py"><a href="#start-frida-py" class="headerlink" title="start_frida.py"></a>start_frida.py</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">bundle = <span class="string">&#x27;com.highaltitudehacks.dvia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sys.argv[1] 第一个参数 </span></span><br><span class="line"><span class="keyword">with</span> codecs.<span class="built_in">open</span>(sys.argv[<span class="number">1</span>], <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    source = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment">#f = open(sys.argv[1], &#x27;r&#x27;) #打开frida脚本</span></span><br><span class="line"><span class="comment">#source = f.read() #读取frida脚本</span></span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device(<span class="number">1000</span>) <span class="comment">#连接usb设备 1000表示超时</span></span><br><span class="line">pid = device.spawn(bundle) <span class="comment">#启动指定bundleId的app</span></span><br><span class="line">session = device.attach(pid)  <span class="comment">#附加到app</span></span><br><span class="line">script = session.create_script(source) <span class="comment">#创建frida javaScript脚本</span></span><br><span class="line">script.load() <span class="comment">#load脚本到app进程中 这样即注入成功</span></span><br><span class="line">device.resume(pid) <span class="comment">#恢复app运行</span></span><br><span class="line">sys.stdin.read()<span class="comment">#读取打印日志</span></span><br></pre></td></tr></table></figure>



<h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><h5 id="hello-world-js"><a href="#hello-world-js" class="headerlink" title="hello_world.js"></a>hello_world.js</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ObjC.available) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">    <span class="comment">//或者send打印</span></span><br><span class="line">	  <span class="comment">//end(&#x27;send hello world&#x27;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3.8 start_frida.py hello_world.js</span><br><span class="line">#打印 hello world</span><br></pre></td></tr></table></figure>

<h5 id="log-allClass-js"><a href="#log-allClass-js" class="headerlink" title="log_allClass.js"></a>log_allClass.js</h5><ul>
<li>打印应用中所有的 class 文件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ObjC.classes 加载的所有OC类</span></span><br><span class="line"><span class="keyword">if</span> (ObjC.available) &#123; <span class="comment">//OC类加载完成</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;\n[*] Starting Hooking&#x27;</span>)</span><br><span class="line">	 <span class="keyword">for</span> (<span class="keyword">var</span> className <span class="keyword">in</span> ObjC.classes) &#123;</span><br><span class="line">		 <span class="keyword">if</span> (ObjC.classes.hasOwnProperty(className)) &#123;</span><br><span class="line">			 <span class="built_in">console</span>.log(className)</span><br><span class="line">		 &#125;</span><br><span class="line">	 &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3.8 start_frida.py log_allClass.js</span><br><span class="line">#内容打印太多了 可以加 grep</span><br><span class="line">$ python3.8 start_frida.py log_allClass.js | grep Jailbreak</span><br><span class="line">JailbreakDetectionVC</span><br></pre></td></tr></table></figure>

<h5 id="hook-DIVA-app"><a href="#hook-DIVA-app" class="headerlink" title="hook DIVA app"></a>hook DIVA app</h5><p>app下载地址 <a href="https://github.com/prateek147/DVIA">https://github.com/prateek147/DVIA</a></p>
<p>里面有个越狱检测功能</p>
<p>查找包含越狱英文名的文件和方法，越狱 JailBroke 或 JailBreak</p>
<p>eval() 函数计算 JavaScript 字符串，并把它作为脚本代码来执行</p>
<h5 id="log-allJailMethods-js"><a href="#log-allJailMethods-js" class="headerlink" title="log_allJailMethods.js"></a>log_allJailMethods.js</h5><ul>
<li>打印包含越狱关键字类和方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ObjC.available) &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> className <span class="keyword">in</span> ObjC.classes) &#123;</span><br><span class="line">		<span class="keyword">if</span> (className.toLowerCase().indexOf(<span class="string">&#x27;jail&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;[#]ClassName--------&gt;&#x27;</span> + className)</span><br><span class="line">      </span><br><span class="line">			<span class="comment">//获取类的所有方法</span></span><br><span class="line">			<span class="keyword">var</span> methods = <span class="built_in">eval</span>(<span class="string">&#x27;ObjC.classes.&#x27;</span> + className + <span class="string">&#x27;.$methods&#x27;</span>)</span><br><span class="line">      </span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="keyword">if</span> (methods[i].toLowerCase().indexOf(<span class="string">&#x27;jail&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">						<span class="built_in">console</span>.log(<span class="string">&#x27;[-]&#x27;</span> + methods[i])</span><br><span class="line">					&#125;</span><br><span class="line">				&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">&#x27;[!] Exception:&#x27;</span> + err.message)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行python脚本 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3.8 start_frida.py log_allJailMethods.js</span><br><span class="line"></span><br><span class="line">[#]ClassName--------&gt;JailbreakDetectionVC</span><br><span class="line">[-]- isJailbroken</span><br><span class="line">[-]- jailbreakTest1Tapped:</span><br><span class="line">[-]- jailbreakTest2Tapped:</span><br></pre></td></tr></table></figure>

<h5 id="find-threadTrace-js"><a href="#find-threadTrace-js" class="headerlink" title="find_threadTrace.js"></a>find_threadTrace.js</h5><ul>
<li>跟踪越狱检测方法调用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跟踪越狱检测方法调用 修改返回值</span></span><br><span class="line"><span class="keyword">if</span> (ObjC.available) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;\n[*] Starting Hooking&#x27;</span>);</span><br><span class="line">	<span class="keyword">var</span> class_name = <span class="string">&#x27;JailbreakDetectionVC&#x27;</span></span><br><span class="line">	<span class="keyword">var</span> method_name = <span class="string">&#x27;- isJailbroken&#x27;</span></span><br><span class="line">	<span class="comment">//通过ObjC.classes返回当前注册类的映射表找到想要hook的类名、方法名</span></span><br><span class="line">	<span class="keyword">var</span> hooking = ObjC.classes[class_name][method_name]</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;className:&#x27;</span>+class_name+<span class="string">&#x27; methodName: &#x27;</span>+method_name)</span><br><span class="line">	Interceptor.attach(hooking.implementation,&#123;</span><br><span class="line">		onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">			<span class="comment">//args[0]:self</span></span><br><span class="line">			<span class="comment">//args[1]:The selector</span></span><br><span class="line">			<span class="comment">//args[2]:方法的第一个参数开始</span></span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;hook success&#x27;</span>)</span><br><span class="line">			<span class="built_in">this</span>.class_name = ObjC.Object(args[<span class="number">0</span>]).toString()</span><br><span class="line">			<span class="built_in">this</span>.method_name = ObjC.selectorAsString(args[<span class="number">1</span>])</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;onEnter args[0] class_name: &#x27;</span> + <span class="built_in">this</span>.class_name)</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;onEnter args[1] method_name: &#x27;</span> + <span class="built_in">this</span>.method_name)</span><br><span class="line">			<span class="comment">//打印函数调用栈</span></span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;isJailbroken called from:\n&#x27;</span> + Thread.backtrace(<span class="built_in">this</span>.context, Backtracer.ACCURATE).map(DebugSymbol.fromAddress).join(<span class="string">&#x27;\n\t&#x27;</span>))</span><br><span class="line">		&#125;, </span><br><span class="line">		onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>)</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;Return value of: &#x27;</span>)</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.class_name + <span class="string">&#x27;--&gt;&#x27;</span> + <span class="built_in">this</span>.method_name)</span><br><span class="line">			<span class="comment">//返回值类型</span></span><br><span class="line">			<span class="keyword">var</span> typeValue = <span class="built_in">Object</span>.prototype.toString.call(retval)</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;\t[-] Type of return value: &#x27;</span> + typeValue)</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;\t[-] Return value: &#x27;</span>, retval)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3.8 start_frida.py find_threadTrace.js</span><br><span class="line"></span><br><span class="line">[*] Starting Hooking</span><br><span class="line">className:JailbreakDetectionVC methodName: - isJailbroken</span><br><span class="line">hook success</span><br><span class="line">onEnter args[0] class_name: &lt;JailbreakDetectionVC: 0x12100c9d0&gt;</span><br><span class="line">onEnter args[1] method_name: isJailbroken</span><br><span class="line">isJailbroken called from:</span><br><span class="line">0x1006e1770 &#x2F;private&#x2F;var&#x2F;containers&#x2F;Bundle&#x2F;Application&#x2F;4259E6F5-A16E-4275-B615-62B05D26F2D9&#x2F;DamnVulnerableIOSApp.app&#x2F;DamnVulnerableIOSApp!-[JailbreakDetectionVC jailbreakTest1Tapped:]</span><br><span class="line">	0x184c926c4 UIKitCore!-[UIApplication sendAction:to:from:forEvent:]</span><br><span class="line">	0x1845c4a80 UIKitCore!-[UIControl sendAction:to:forEvent:]</span><br><span class="line">	0x1845c4dd0 UIKitCore!-[UIControl _sendActionsForEvents:withEvent:]</span><br><span class="line">	0x1845c364c UIKitCore!-[UIControl touchesEnded:withEvent:]</span><br><span class="line">	0x184cd0588 UIKitCore!-[UIWindow _sendTouchesForEvent:]</span><br><span class="line">	0x184cd1ea8 UIKitCore!-[UIWindow sendEvent:]</span><br><span class="line">	0x184cab948 UIKitCore!-[UIApplication sendEvent:]</span><br><span class="line">	0x184d34dc0 UIKitCore!__dispatchPreprocessedEventFromEventQueue</span><br><span class="line">	0x184d397d4 UIKitCore!__processEventQueue</span><br><span class="line">	0x184d30bd4 UIKitCore!__eventFetcherSourceCallback</span><br><span class="line">	0x182224848 CoreFoundation!__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__</span><br><span class="line">	0x182224744 CoreFoundation!__CFRunLoopDoSource0</span><br><span class="line">	0x182223a48 CoreFoundation!__CFRunLoopDoSources0</span><br><span class="line">	0x18221da28 CoreFoundation!__CFRunLoopRun</span><br><span class="line">	0x18221d1c0 CoreFoundation!CFRunLoopRunSpecific</span><br><span class="line">Return value of:</span><br><span class="line"> &lt;JailbreakDetectionVC: 0x12100c9d0&gt;--&gt;isJailbroken</span><br><span class="line">	[-] Type of return value: [object Object]</span><br><span class="line">	[-] Return value:  0x1</span><br></pre></td></tr></table></figure>

<h6 id="修改返回值"><a href="#修改返回值" class="headerlink" title="修改返回值"></a>修改返回值</h6><p>将 0x1 修改成 0x0</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ptr(0x0) ptr定义一个指针 指针地址为0x0</span></span><br><span class="line">onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;</span><br><span class="line">  retval.replace(ptr(<span class="number">0x0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="修改返回字符串"><a href="#修改返回字符串" class="headerlink" title="修改返回字符串"></a>修改返回字符串</h6><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">onLeave: function(retval)&#123;</span><br><span class="line">			console.log(<span class="string">&#x27;Return value of: &#x27;</span>)</span><br><span class="line">			<span class="comment">//返回值类型</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.key_value == <span class="string">&#x27;MT_Device_UUIDString&#x27;</span>) &#123;</span><br><span class="line">			    var newuuid = ObjC.classes.NSString.stringWithString_(<span class="string">&quot;12244386&quot;</span>)</span><br><span class="line">          retval.replace(newuuid)</span><br><span class="line">			&#125;</span><br><span class="line">			var typeValue = Object.prototype.toString.call(retval)</span><br><span class="line">			console.log(<span class="string">&#x27;\t[-] Type of return value: &#x27;</span> + typeValue)</span><br><span class="line">			console.log(<span class="string">&#x27;\t[-] Return value: &#x27;</span>, retval)</span><br><span class="line">			console.log(<span class="string">&#x27;\t[-] value: &#x27;</span>, ObjC.Object(retval).toString())</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>



<h5 id="enumerate-modules-js"><a href="#enumerate-modules-js" class="headerlink" title="enumerate_modules.js"></a>enumerate_modules.js</h5><ul>
<li>打印进程所有模块信息</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ObjC.available) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;\n[*] Starting Hooking&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> base_addr = Module.findBaseAddress(<span class="string">&#x27;CMake&#x27;</span>)</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;base_addr: &#x27;</span>+base_addr)</span><br><span class="line">  </span><br><span class="line">	Process.enumerateModules(&#123;</span><br><span class="line">		onMatch: <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">module</span></span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;Module name:&#x27;</span> + <span class="built_in">module</span>.name + <span class="string">&#x27;-&#x27;</span> + <span class="string">&#x27;Base Address:&#x27;</span> + <span class="built_in">module</span>.base);</span><br><span class="line">		&#125;,</span><br><span class="line">		onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3.8 cmake.py enumerate_modules.js</span><br><span class="line"></span><br><span class="line">[*] Starting Hooking</span><br><span class="line">base_addr: 0x102178000</span><br><span class="line">Module name:CMake-Base Address:0x100f54000</span><br><span class="line">Module name:substitute-inserter.dylib-Base Address:0x1010ac000</span><br><span class="line">Module name:Foundation-Base Address:0x1834f6000</span><br><span class="line">Module name:libobjc.A.dylib-Base Address:0x196d01000</span><br><span class="line">Module name:libSystem.B.dylib-Base Address:0x1b2c5c000</span><br><span class="line">Module name:CoreFoundation-Base Address:0x182181000</span><br><span class="line">Module name:UIKit-Base Address:0x1b6d1f000</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>模块基地址 Module name:CMake-Base Address:0x100f54000</p>
<h4 id="弹窗显示"><a href="#弹窗显示" class="headerlink" title="弹窗显示"></a>弹窗显示</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ObjC.available) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; NSString &#125; = ObjC.classes;</span><br><span class="line">  <span class="keyword">var</span> UIAlertController = ObjC.classes.UIAlertController;</span><br><span class="line">  <span class="keyword">var</span> UIAlertAction = ObjC.classes.UIAlertAction;</span><br><span class="line">  <span class="keyword">var</span> UIApplication = ObjC.classes.UIApplication;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 弹窗</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showAlert</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> alertHandler = <span class="keyword">new</span> ObjC.Block(&#123; <span class="attr">retType</span>: <span class="string">&#x27;void&#x27;</span>, <span class="attr">argTypes</span>: [<span class="string">&#x27;object&#x27;</span>], <span class="attr">implementation</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; &#125;);</span><br><span class="line"></span><br><span class="line">    ObjC.schedule(ObjC.mainQueue, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> alert = UIAlertController.alertControllerWithTitle_message_preferredStyle_(<span class="string">&#x27;LinXunFeng&#x27;</span>, <span class="string">&#x27;欢迎关注公众号：FSA全栈行动\n博客：https://fullstackaction.com&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">var</span> defaultAction = UIAlertAction.actionWithTitle_style_handler_(<span class="string">&#x27;OK&#x27;</span>, <span class="number">0</span>, alertHandler);</span><br><span class="line">      alert.addAction_(defaultAction);</span><br><span class="line">      UIApplication.sharedApplication().keyWindow().rootViewController().presentViewController_animated_completion_(alert, <span class="literal">true</span>, NULL);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 播放系统声音</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">playSystemSound</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> playSound = <span class="keyword">new</span> NativeFunction(Module.findExportByName(<span class="string">&#x27;AudioToolbox&#x27;</span>, <span class="string">&#x27;AudioServicesPlaySystemSound&#x27;</span>), <span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>])</span><br><span class="line">    playSound(<span class="number">1111</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> didTap = ObjC.classes.T1TranslateButton[<span class="string">&#x27;- _didTap:forEvent:&#x27;</span>]</span><br><span class="line">  <span class="keyword">var</span> setTitle = ObjC.classes.T1TranslateButton[<span class="string">&#x27;- setTitleText:&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 保留旧实现</span></span><br><span class="line">  <span class="keyword">var</span> didTapOldImp = didTap.implementation</span><br><span class="line"></span><br><span class="line">  <span class="comment">// hook</span></span><br><span class="line">  Interceptor.attach(setTitleOldImp, &#123;</span><br><span class="line">    onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">      args[<span class="number">2</span>] = ptr(NSString.stringWithString_(<span class="string">&quot;Hello LinXunFeng，点击我来弹个窗和听个曲吧&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 覆盖实现</span></span><br><span class="line">  didTap.implementation = ObjC.implement(setTitle, <span class="function"><span class="keyword">function</span>(<span class="params">handle, selector, arg1, arg2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 调用旧实现</span></span><br><span class="line">    <span class="comment">// didTapOldImp(handle, selector, arg1, arg2)</span></span><br><span class="line"></span><br><span class="line">    playSystemSound()</span><br><span class="line">    showAlert()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>逆向-MonkeyDev</title>
    <url>/2022/07/08/%E9%80%86%E5%90%91-MonkeyDev/</url>
    <content><![CDATA[<p><a href="https://github.com/AloneMonkey/MonkeyDev/wiki/%E5%AE%89%E8%A3%85">MonkeyDev安装</a>  <a href="https://github.com/AloneMonkey/MonkeyDevSpecs">MonkeyDev插件库</a></p>
<p><a href="https://github.com/AloneMonkey/WeChatPod">WeChatPod</a>    <a href="https://bbs.pediy.com/thread-265106.htm">破解iOS微信骰子和猜拳</a></p>
<p><a href="http://blog.imjun.net/posts/restore-symbol-of-iOS-app/">恢复符号表</a>  </p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>确保 Theos 环境已配置好</p>
<p>执行命令安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo &#x2F;bin&#x2F;sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;AloneMonkey&#x2F;MonkeyDev&#x2F;master&#x2F;bin&#x2F;md-install)&quot;</span><br></pre></td></tr></table></figure>

<p>卸载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo &#x2F;bin&#x2F;sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;AloneMonkey&#x2F;MonkeyDev&#x2F;master&#x2F;bin&#x2F;md-uninstall)&quot;</span><br></pre></td></tr></table></figure>

<p>更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo &#x2F;bin&#x2F;sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;AloneMonkey&#x2F;MonkeyDev&#x2F;master&#x2F;bin&#x2F;md-update)&quot;</span><br></pre></td></tr></table></figure>

<p>安装成功后 MonkeyDev 模板</p>
<p>![图 1](逆向-MonkeyDev/图 1.png)</p>
<h4 id="Logos-Tweak"><a href="#Logos-Tweak" class="headerlink" title="Logos Tweak"></a>Logos Tweak</h4><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>Xcode 无法识别 .xm文件导致代码无法高亮，需要在Xcode界面右侧设置 Type 为 Objective-C++Source</p>
<p>.xm 文件相当于 Theos 工程中的 Tweak.xm，直接写 Logos 语法即可，编译时会通过 logos.pl 转换成 .mm 文件</p>
<p>目会自动链接 <code>CydiaSubstrate.framework</code> 无需再手动链接</p>
<p>项目的一些配置在 Build Settings 列表下面 User-Defined</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MonkeyDevBuildPackageOnAnyBuild     每次build都生成deb包</span><br><span class="line">MonkeyDevCopyOnBuild    build的时将deb包拷贝到设备的&#x2F;var&#x2F;root&#x2F;MonkeyDevBuilds&#x2F;目录</span><br><span class="line">MonkeyDevDeviceIP       目标设备的ip地址，默认USB连接，localhost</span><br><span class="line">MonkeyDevDevicePort     目标设备的端口，默认22(做了端口映射填映射的端口)</span><br><span class="line">MonkeyDevDevicePassword   目标设备的ssh登录密码，默认为空使用免密码登录</span><br><span class="line">MonkeyDevInstallOnAnyBuild            每次build都将deb安装到设备</span><br><span class="line">MonkeyDevInstallOnProfiling             点击Profile才将deb安装到设备</span><br><span class="line">MonkeyDevKillProcessOnInstall         安装的时候杀掉指定的进程，填写进程名</span><br><span class="line">MonkeyDevClearUiCacheOnInstall    安装时 clear uicache</span><br><span class="line">MonkeyDevPath              MonkeyDev的安装路径，默认的，不用修改</span><br><span class="line">MonkeyDevTheosPath    theos的安装路径</span><br></pre></td></tr></table></figure>

<p>Command + B 安装提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Showing Recent Messages</span><br><span class="line">An empty identity is not valid when signing a binary for the product type &#39;Dynamic Library&#39;</span><br></pre></td></tr></table></figure>

<p>BuildSettings-User-Defined 添加 key CODE_SIGNING_ALLOWED NO</p>
<ul>
<li>Debug 模式安装</li>
</ul>
<p>Command+B自动安装到手机</p>
<ul>
<li>Release 模式安装</li>
</ul>
<p>Command+Shift+i，这种方式不会看到 Log</p>
<ul>
<li>查看 Log 输出</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew install libimobiledevice</span><br><span class="line">$ idevicesyslog | grep &#39;xxx&#39;</span><br></pre></td></tr></table></figure>

<p>或者自带的 console.app 查看</p>
<h4 id="非越狱APP集成"><a href="#非越狱APP集成" class="headerlink" title="非越狱APP集成"></a>非越狱APP集成</h4><p>创建 iOS 项目选择 MonkeyApp，越狱设备可以在 Target APP 填写目标 APP 的名字或 bundle id，工具将自动使用 frida-ios-dump 提取 ipa 文件（需要按 frida-ios-dump 的 README 配置好环境）</p>
<p><code>/opt/MonkeyDev/bin/dump.py</code> 可以指定 ip、port 及 password</p>
<p>创建项目名为 MonkeyApp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Config cycript的一些脚本下载以及methodtrace配置代码</span><br><span class="line">AntiAntiDebug 这里面是反反调试的代码</span><br><span class="line">fishhook 自动集成的fishhook模块</span><br></pre></td></tr></table></figure>

<p>项目已自动集成了 RevealServer.framework 和 libcycript.dylib，如果选择 Release 编译是不会集成的</p>
<h5 id="MDConfig-plist"><a href="#MDConfig-plist" class="headerlink" title="MDConfig.plist"></a>MDConfig.plist</h5><p><a href="https://github.com/omxcodec/OCMethodTrace/blob/master/README.md">https://github.com/omxcodec/OCMethodTrace/blob/master/README.md</a></p>
<ul>
<li>class-dump</li>
</ul>
<p>工程集成了 class-dump 导出可执行文件 OC 头文件，build settings，MONKEYDEV_CLASS_DUMP YES</p>
<ul>
<li>增加自己的库 </li>
</ul>
<p>将需要注入的 dylib 或 framework 拷贝到 frameworks 目录下，静态库的话，直接添加，指定 search path，和正常开发没啥区别。</p>
<p>动态库本身的 install_path，可以通过 install_name_tool -id 修改其为 @executable_path/Frameworks/xxx</p>
<ul>
<li><p>集成网络 cy 脚本</p>
</li>
<li><p>更改名字和bundleid</p>
</li>
</ul>
<p>直接在Xcode进行设置，想使用原来的 bundleid 进行重签，设置 build settings， MONKEYDEV_DEFAULT_BUNDLEID 为 YES</p>
<ul>
<li>生成IPA</li>
</ul>
<p>运行之后在源代码 LatestBuild 目录 双击 createIPA.command</p>
<ul>
<li>支持 CocoaPods 集成第三方库</li>
</ul>
<p>需要设置 use_frameworks!  动态库方式，再执行 pod install</p>
<h5 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h5><p>MonkeyApp运行后可以直接断点调试，但是每次修改调试都要重新运行安装，比较麻烦。</p>
<p>Logos Tweak 也可以 Xcode 调试。重签安装被调试的应用</p>
<p>Xcode - Debug - Attach to Process by PID or Name</p>
<h4 id="CaptainHook-Tweak"><a href="#CaptainHook-Tweak" class="headerlink" title="CaptainHook Tweak"></a>CaptainHook Tweak</h4><p>Logos Tweak 和 CaptainHook Tweak 都支持通过 Cocoapods 的方式集成，记得以静态库的方式集成</p>
<p>所以记得把 Podfile 中的 #use_frameworks! 注释掉，否则 Tweak 不生效</p>
<p>CaptainHook 无须依赖 Cydia Substrate 框架，直接导入 CaptainHook.h 头文件后使用里面的宏来进行 Hook</p>
<p><a href="https://github.com/rpetrich/CaptainHook/wiki">https://github.com/rpetrich/CaptainHook/wiki</a></p>
<p>Hook OC 方法：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.CHDeclareClass声明一个类</span></span><br><span class="line"><span class="comment">//2.使用CHLoadClass()或者CHLoadLateClass()在 CHConstructor 中加载声明的类</span></span><br><span class="line"><span class="comment">//3.CHOptimizedMethod()来Hook目标函数</span></span><br><span class="line"><span class="comment">//4.CHHook()在CHConstructor中注册Hook</span></span><br><span class="line"><span class="comment">//5.CHSuper()调用Hook原函数逻辑</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;CaptainHook/CaptainHook.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">CHDeclareClass(XLMemberManager);<span class="comment">//1 声明类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3 hook目标函数</span></span><br><span class="line"><span class="comment">//-(void)loginByUserName:(id)arg1 password:(id)arg2 verifyCode:(id)arg3 verifyKey:(id)arg4 finishBlock:(CDUnknownBlockType)arg5;</span></span><br><span class="line">CHOptimizedMethod(<span class="number">5</span>, <span class="keyword">self</span>, <span class="keyword">void</span>, XLMemberManager, loginByUserName, <span class="keyword">id</span>, arg1, password, <span class="keyword">id</span>, arg2, verifyCode, <span class="keyword">id</span>, arg3, verifyKey, <span class="keyword">id</span>, arg4, finishBlock, <span class="keyword">id</span>, arg5) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;userName:%@ password:%@ verifyCode:%@ verifyKey:%@&quot;</span>, arg1, arg2, arg3, arg4);</span><br><span class="line">    <span class="comment">//5 调用原来方法</span></span><br><span class="line">    <span class="keyword">return</span> CHSuper(<span class="number">5</span>, XLMemberManager, loginByUserName, arg1, password, arg2, verifyCode, arg3, verifyKey, arg4, finishBlock, arg5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CHConstructor &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;__inject success__&quot;</span>);</span><br><span class="line">        <span class="comment">//2 加载声明的类</span></span><br><span class="line">        CHLoadLateClass(XLMemberManager);</span><br><span class="line">        <span class="comment">//4 注册hook 5根参数</span></span><br><span class="line">        CHHook(<span class="number">5</span>, XLMemberManager, loginByUserName, password, verifyCode, verifyKey, finishBlock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ZKSwizzle"><a href="#ZKSwizzle" class="headerlink" title="ZKSwizzle"></a>ZKSwizzle</h4><p><a href="https://github.com/alexzielenski/ZKSwizzle">https://github.com/alexzielenski/ZKSwizzle</a></p>
<p>语法接近 Theos</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &quot;ZKSwizzle&#x2F;ZKSwizzle.h&quot;</span><br><span class="line">hook(XLMemberManager);</span><br><span class="line">-(void)loginByUserName:(id)arg1 password:(id)arg2 verifyCode:(id)arg3 verifyKey:(id)arg4 finishBlock:(void(^__nullable)(void))arg5 &#123;</span><br><span class="line">  NSLog(@&quot;userName:%@ password:%@ verifyCode:%@ verifyKey:%@&quot;, arg1, arg2, arg3, arg4);</span><br><span class="line">  &#x2F;&#x2F;调用原方法</span><br><span class="line">  ZKOrig(void, arg1, arg2, arg3, arg4, arg5);</span><br><span class="line">&#125;</span><br><span class="line">ctor &#123;</span><br><span class="line">  NSLog(@&quot;__inject success__&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>finishBlock 的类型不能用 id 代替，改为 void(^__nullable)(void) 即可</p>
<h4 id="Command-line-Took"><a href="#Command-line-Took" class="headerlink" title="Command-line Took"></a>Command-line Took</h4><h4 id="Logify"><a href="#Logify" class="headerlink" title="Logify"></a>Logify</h4><p>Theos 自带的工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ logify.pl xxx.h &gt; xxx.xm</span><br></pre></td></tr></table></figure>

<h4 id="ANYMethodLog"><a href="#ANYMethodLog" class="headerlink" title="ANYMethodLog"></a>ANYMethodLog</h4><p>用途和 Logify 相似，可控度更高，只需要了解一个类</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* aClass 要打印的类</span></span><br><span class="line"><span class="comment">* condition 根据此 block 来决定是否追踪方法（sel 是方法名）</span></span><br><span class="line"><span class="comment">* before 方法调用前会调用该 block（target 是检测的对象，sel 是方法名，args 是参数列表，deep 是调用层级）</span></span><br><span class="line"><span class="comment">* after 法调用后会调用该 block（interval 是执行方法的耗时，retValue 是返回值）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">+ (<span class="keyword">void</span>)logMethodWithClass:(Class)aClass</span><br><span class="line">                 condition:(<span class="built_in">BOOL</span>(^)(SEL sel)) condition</span><br><span class="line">                    before:(<span class="keyword">void</span>(^)(<span class="keyword">id</span> target, SEL sel, <span class="built_in">NSArray</span> *args, <span class="keyword">int</span> deep)) before</span><br><span class="line">                     after:(<span class="keyword">void</span>(^)(<span class="keyword">id</span> target, SEL sel, <span class="built_in">NSArray</span> *args, <span class="built_in">NSTimeInterval</span> interval, <span class="keyword">int</span> deep, <span class="keyword">id</span> retValue)) after;</span><br></pre></td></tr></table></figure>

<p>放到 %ctor</p>
<ol>
<li>打印一个类定义的所有方法，包括公开方法和私有方法</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[ANYMethodLog logMethodWithClass:[<span class="built_in">UIViewController</span> <span class="keyword">class</span>] condition:^<span class="built_in">BOOL</span>(SEL sel) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;method:%@&quot;</span>, <span class="built_in">NSStringFromSelector</span>(sel));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125; before:<span class="literal">nil</span> after:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>打印运行过程中调用了哪些方法</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[ANYMethodLog logMethodWithClass:[<span class="built_in">UIViewController</span> <span class="keyword">class</span>] condition:^<span class="built_in">BOOL</span>(SEL sel) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125; before:^(<span class="keyword">id</span> target, SEL sel, <span class="built_in">NSArray</span> *args, <span class="keyword">int</span> deep) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;target:%@ sel:%@&quot;</span>, target, <span class="built_in">NSStringFromSelector</span>(sel));</span><br><span class="line">&#125; after:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>打印特定几个方法的调用顺序</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[ANYMethodLog logMethodWithClass:[<span class="built_in">UIViewController</span> <span class="keyword">class</span>] condition:^<span class="built_in">BOOL</span>(SEL sel) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSArray</span> *whiteList = @[<span class="string">@&quot;loadView&quot;</span>, <span class="string">@&quot;viewWillAppear:&quot;</span>, <span class="string">@&quot;viewDidAppear:&quot;</span>, <span class="string">@&quot;viewWillDisappear:&quot;</span>, <span class="string">@&quot;viewDidDisappear:&quot;</span>, <span class="string">@&quot;viewWillLayoutSubviews&quot;</span>, <span class="string">@&quot;viewDidLayoutSubviews&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> [whiteList containsObject:<span class="built_in">NSStringFromSelector</span>(sel)];</span><br><span class="line">&#125; before:^(<span class="keyword">id</span> target, SEL sel, <span class="built_in">NSArray</span> *args, <span class="keyword">int</span> deep) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;target:%@ sel:%@&quot;</span>, target, <span class="built_in">NSStringFromSelector</span>(sel));</span><br><span class="line">&#125; after:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>打印调用方法的参数值</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[ANYMethodLog logMethodWithClass:<span class="built_in">NSClassFromString</span>(<span class="string">@&quot;UIViewController&quot;</span>) condition:^<span class="built_in">BOOL</span>(SEL sel) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSStringFromSelector</span>(sel) isEqualToString:<span class="string">@&quot;viewWillAppear:&quot;</span>];</span><br><span class="line">&#125; before:^(<span class="keyword">id</span> target, SEL sel, <span class="built_in">NSArray</span> *args, <span class="keyword">int</span> deep) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;before target:%@ sel:%@ args:%@&quot;</span>, target, <span class="built_in">NSStringFromSelector</span>(sel), args);</span><br><span class="line">&#125; after:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>打印某个方法调用前后的变化</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[ANYMethodLog logMethodWithClass:<span class="built_in">NSClassFromString</span>(<span class="string">@&quot;ListController&quot;</span>) condition:^<span class="built_in">BOOL</span>(SEL sel) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSStringFromSelector</span>(sel) isEqualToString:<span class="string">@&quot;changeBackground&quot;</span>];</span><br><span class="line">&#125; before:^(<span class="keyword">id</span> target, SEL sel, <span class="built_in">NSArray</span> *args, <span class="keyword">int</span> deep) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;before background color:%@&quot;</span>, [(ListController *)target view].backgroundColor);</span><br><span class="line">&#125; after:^(<span class="keyword">id</span> target, SEL sel, <span class="built_in">NSArray</span> *args, <span class="built_in">NSTimeInterval</span> interval, <span class="keyword">int</span> deep, <span class="keyword">id</span> retValue) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;after background color:%@&quot;</span>, [(ListController *)target view].backgroundColor);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>打印某个方法调用的耗时</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[ANYMethodLog logMethodWithClass:<span class="built_in">NSClassFromString</span>(<span class="string">@&quot;ListController&quot;</span>) condition:^<span class="built_in">BOOL</span>(SEL sel) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSStringFromSelector</span>(sel) isEqualToString:<span class="string">@&quot;changeBackground&quot;</span>];</span><br><span class="line">&#125; before:^(<span class="keyword">id</span> target, SEL sel, <span class="built_in">NSArray</span> *args, <span class="keyword">int</span> deep) &#123;</span><br><span class="line">&#125; after:^(<span class="keyword">id</span> target, SEL sel, <span class="built_in">NSArray</span> *args, <span class="built_in">NSTimeInterval</span> interval, <span class="keyword">int</span> deep, <span class="keyword">id</span> retValue) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;interval::%@&quot;</span>, [@(interval) stringValue]);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>追踪方法调用顺序</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[ANYMethodLog logMethodWithClass:<span class="built_in">NSClassFromString</span>(<span class="string">@&quot;ListController&quot;</span>) condition:^<span class="built_in">BOOL</span>(SEL sel) &#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="literal">YES</span>;</span><br><span class="line">&#125; before:^(<span class="keyword">id</span> target, SEL sel, <span class="built_in">NSArray</span> *args, <span class="keyword">int</span> deep) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *selector = <span class="built_in">NSStringFromSelector</span>(sel);</span><br><span class="line">    <span class="built_in">NSArray</span> *selectorArrary = [selector componentsSeparatedByString:<span class="string">@&quot;:&quot;</span>];</span><br><span class="line">    selectorArrary = [selectorArrary filteredArrayUsingPredicate:[<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@&quot;length &gt; 0&quot;</span>]];</span><br><span class="line">    <span class="built_in">NSMutableString</span> *selectorString = [<span class="built_in">NSMutableString</span> new];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; selectorArrary.count; i++) &#123;</span><br><span class="line">        [selectorString appendFormat:<span class="string">@&quot;%@:%@ &quot;</span>, selectorArrary[i], args[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *deepString = [<span class="built_in">NSMutableString</span> new];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; deep; i++) &#123;</span><br><span class="line">        [deepString appendString:<span class="string">@&quot;-&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@[%@ %@]&quot;</span>, deepString , target, selectorString);</span><br><span class="line">&#125; after:^(<span class="keyword">id</span> target, SEL sel, <span class="built_in">NSArray</span> *args, <span class="built_in">NSTimeInterval</span> interval, <span class="keyword">int</span> deep, <span class="keyword">id</span> retValue) &#123;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *deepString = [<span class="built_in">NSMutableString</span> new];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; deep; i++) &#123;</span><br><span class="line">        [deepString appendString:<span class="string">@&quot;-&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@ret:%@&quot;</span>, deepString, retValue);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>实际使用时，需要在 Makefile加入 ANYMethodLog.m </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iThunderHelper_FILES &#x3D; Tweak.xm ANYMethodLog.m </span><br></pre></td></tr></table></figure>

<h4 id="BigBang"><a href="#BigBang" class="headerlink" title="BigBang"></a>BigBang</h4><p>功能笔记专一，主要用来 Hook 某个类的所有方法，打印所有方法的执行顺序</p>
<p><a href="https://github.com/codesourse/BigBang">https://github.com/codesourse/BigBang</a></p>
<p>使用只需一个代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[BigBang hookClass:@&quot;XLMberManager&quot;]</span><br></pre></td></tr></table></figure>

<p>放在只会执行一次的函数里，避免多次 Hook，%ctor</p>
<h4 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h4><ol>
<li>安装插件后报错再安装报 dpkg 错误</li>
</ol>
<p>ssh 连接到设备 <code>ps -e | grep dpkg</code></p>
<p>kill dpkg端口号</p>
]]></content>
  </entry>
  <entry>
    <title>逆向-汇编</title>
    <url>/2022/06/13/%E9%80%86%E5%90%91-%E6%B1%87%E7%BC%96/</url>
    <content><![CDATA[<h5 id="寄存器操作"><a href="#寄存器操作" class="headerlink" title="寄存器操作"></a>寄存器操作</h5><ul>
<li>读取寄存器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ register read				#读取整个寄存器</span><br><span class="line">x0 &#x3D; 0x....</span><br><span class="line">x1 &#x3D; 0x....</span><br><span class="line">$ register read $x0		#读取 x0 寄存器</span><br></pre></td></tr></table></figure>

<ul>
<li>修改寄存器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ register write $x1 1</span><br><span class="line">$ register read $x1</span><br></pre></td></tr></table></figure>

<ul>
<li>打印操作</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ po $x1			#打印 OC 对象</span><br><span class="line">$ x&#x2F;s $x1	    #将 X1 寄存器的C字符串打印出来 打印出调用方法名字</span><br><span class="line"></span><br><span class="line">$ p&#x2F;x $x7		  #p命令输出原生类型</span><br><span class="line">$ p&#x2F;d $x7</span><br></pre></td></tr></table></figure>

<ul>
<li>内存读写</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -c 参数指定要读取的字节</span><br><span class="line">$ memory read $x0  #读取内存  如果读取数据超过1024字节会报错 加 --force 参数</span><br><span class="line">$ memory read 0x0000.. 0x0000.. #按区间读取</span><br><span class="line"></span><br><span class="line">#--outfile 读取的内存数据保存到文件</span><br><span class="line">$ memory read 0x000... -c 1025 --force -outfile &#x2F;tmp&#x2F;1.txt</span><br><span class="line"></span><br><span class="line">$ memory write 0x00.. 0x24 #修改成 0x24</span><br></pre></td></tr></table></figure>

<ul>
<li>反汇编</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ dis -a 0x00.. #反汇编指定地址</span><br></pre></td></tr></table></figure>

<ul>
<li>调用栈</li>
</ul>
<p>这里看到 frame， ru #1 0x000..f04</p>
<p>用这个地址减去 ASLR 的偏移量即可得到文件的偏移地址 </p>
<p>在 IDA 中取搜索这个文件偏移地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bt</span><br><span class="line">$ bt 2  #指定打印 2 层</span><br></pre></td></tr></table></figure>

<ul>
<li>单步命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ni  #单步执行 遇到子函数不进入，会执行到下一行</span><br><span class="line">$ si  #单步执行 遇到子函数进入</span><br><span class="line">$ finish 完成功能并退出子函数，如在 objc_msgSend 函数内任何地址输入finish，会完成objc_msgSend的原始调用</span><br><span class="line">$ return 和finish不同会直接退出子函数，原始代码流程不会调用，该命令通常在反-反调试时用于跳过检测函数</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h5 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h5><p>R0 ~ R30 是 31 个通用寄存器，每个寄存器有如下两种访问方式</p>
<ul>
<li>64 位通用寄存器名为 X0 ~ X30</li>
<li>32 位通用寄存器名为 W0 ~ W30</li>
</ul>
<p>32 位寄存器并不是独立存在的，比如 W0 是 X0 的低 32 位</p>
<p>Xcode 重新命名了 X29 X30 叫 fp  lr</p>
<ul>
<li>X0 ~ X7</li>
</ul>
<p>用来传递函数的参数，如果有更多的参数则使用栈来传递；X0 也用来存放函数的返回值</p>
<ul>
<li>pc 寄存器</li>
</ul>
<p>指令指针寄存器，指示了 CPU 当前要读取指令的地址（指向即将执行代码的地址）</p>
<p>保存的是将要执行的下一条指令的内存地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x104f227bB &lt;+8&gt;: mov W8, #-0x1</span><br></pre></td></tr></table></figure>

<p>加了#号表示常数，将 -1 赋值给 w8</p>
<p>orr 按位或</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/读取 x9 寄存器值</span></span><br><span class="line"><span class="regexp">(lldb)register read $x9</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 修改 pc 寄存器的指向位置</span></span><br><span class="line"><span class="regexp">(lldb)register write $pc 0x182a367b8</span></span><br><span class="line"><span class="regexp">(lldb)register read $pc</span></span><br></pre></td></tr></table></figure>

<p>我们可以通过改变 pc寄存器 的内容来控制 CPU 执行目标指令</p>
<ul>
<li>mov 指令，可以用来修改大部分寄存器的值（不能用于设置pc的值）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov x0, #10</span><br><span class="line">mov x1, #20</span><br></pre></td></tr></table></figure>

<ul>
<li>bl 指令</li>
</ul>
<p>转移（跳转指令）</p>
<ul>
<li>ret 指令</li>
</ul>
<p>默认使用 lr（X30）寄存器的值</p>
<ul>
<li>Xcode 新建汇编代码</li>
</ul>
<p>Xcode 新建选择 Assembly File，命名为 asm.s </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;标号 放到代码段</span><br><span class="line">.text</span><br><span class="line">&#x2F;&#x2F;告诉编译器 全局标号暴露给外面 _A _B</span><br><span class="line">.global _A,_B</span><br><span class="line"></span><br><span class="line">_A:</span><br><span class="line">    &#x2F;&#x2F;将a0存入到x0寄存器</span><br><span class="line">    mov x0,#0xa0</span><br><span class="line">    mov x1,#0x00</span><br><span class="line">    &#x2F;&#x2F;x0和#0x14加法运算 结果放到x1</span><br><span class="line">    add x1, x0, #0x14</span><br><span class="line">    &#x2F;&#x2F;跳转到B</span><br><span class="line">    bl _B</span><br><span class="line">    mov x0,#0x0</span><br><span class="line">    ret</span><br><span class="line">_B:</span><br><span class="line">    add x0, x0, #0x10</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int A(); &#x2F;&#x2F;声明</span><br><span class="line">int main(int argc,char *argv[])&#123;</span><br><span class="line">  A(); &#x2F;&#x2F;调用</span><br><span class="line">  @autoreleasepool&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以在调用处 A(); 打断点调试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-&gt; 0x10031a7f0 &lt;+24&gt;: bl 0x10031ab44</span><br></pre></td></tr></table></figure>

<p>s 指令进入，就到了上面的汇编指令了，ni 按汇编指令一步步往下走</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">(lldb)s</span><br><span class="line">(lldb)ni</span><br></pre></td></tr></table></figure>

<ul>
<li>LR 寄存器</li>
</ul>
<p>也称为 X30 寄存器，指向返回地址，存储函数调用完成时的返回地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-&gt; 0x10439ab38 &lt;+4&gt;: bl   0x10439ab44</span><br><span class="line">	 0x10439ab3c &lt;+8&gt;: mov  x0, #0xaaaa</span><br></pre></td></tr></table></figure>

<p>lr 值就是 0x10439ab3c</p>
<h5 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h5><p>栈的增长方向是从高地址到低地址的。栈低是高地址，栈顶是低地址</p>
<p>后进先出，高地址向低地址扩展数据结构</p>
<img src="逆向-汇编/栈.png" alt="栈" style="zoom:50%;" />





<ul>
<li>SP 寄存器</li>
</ul>
<p>（Stack Pointer）栈指针寄存器，任意时刻都会保存 <code>栈顶</code> 地址</p>
<ul>
<li>FP 寄存器</li>
</ul>
<p>也称为 X29 寄存器，某些时刻用它来保存 <code>栈底</code> 地址</p>
<ul>
<li>str（store register）指令</li>
</ul>
<p>将数据从寄存器中读出来，存到内存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str w0,[x8]  w0取出放到x8所指向的地方</span><br></pre></td></tr></table></figure>

<ul>
<li>ldr（load register） 指令</li>
</ul>
<p>将数据从内存中读出来，存到寄存器中</p>
<p>str 和 ldr 的变种 ldp 和 stp 还可以操作 2 个寄存器</p>
<p><u>函数的调用会开辟栈帧，在AArch64 中，函数的参数是通过 X0~X7 传递的</u></p>
<p>函数的返回值使用 X0 寄存器保存</p>
<p>X1 是方法名，X2是第一个参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sub sp, sp, #0x20 拉伸栈空间</span><br><span class="line">stp x0, x1, [sp, #0x10] sp往上加16个字节，存放 x0,x1</span><br><span class="line">ldp x1, x0, [sp, #0x10] sp往上偏移16个字节的值取出来，放入x1,x0</span><br></pre></td></tr></table></figure>

<ul>
<li>函数嵌套调用：会将 X29、X30寄存器入栈保护</li>
</ul>
<h5 id="状态寄存器-CPSR"><a href="#状态寄存器-CPSR" class="headerlink" title="状态寄存器 CPSR"></a>状态寄存器 CPSR</h5><p>和其它寄存器不一样，其它寄存器是用来存放数据的，都是整个寄存器具有一个含义</p>
<p>而 CPSR 寄存器是按位起作用，每一位都有专门含义</p>
<p>CPSR 寄存器是 32 位的</p>
<ul>
<li>低 8 位（包括 I、F、T 和 M[0-4]）称为控制位，程序无法修改，除非 CPU 运行与特权模式下，程序才能修改</li>
<li>N、Z、C、V 均为条件码标志位，内容可被算术或逻辑运算的结果所改变，并且可以决定某条指令是否被执行</li>
</ul>
<img src="逆向-汇编/图片.png" alt="15201620642085" style="zoom:70%;" />

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a == b&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a != b&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>if(a == b)</code>   处打断点调试，查看汇编代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b.ne 0x102fc68f8  &#x2F;&#x2F;带条件的跳转</span><br></pre></td></tr></table></figure>

<p>断点到 b.ne 后，查看 CPSR 寄存器</p>
<p>控制台 选择All Variable 可以看到寄存器的参数<br>查看 cpsr 寄存器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cpsr &#x3D; (unsigned int) 0x80000000</span><br></pre></td></tr></table></figure>

<p>第一个16进制位是 8，代表 N、Z、C、V  这 4 个二进制位</p>
<p> 16 进制 0x8，转换成二进制就是 1000 （可以用计算器计算）</p>
<p>正常流程结果是打印 <code>a != b</code></p>
<p>现在将修改 cpsr 寄存器的值为 0100 就是 0x4</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">(lldb) register write cpsr <span class="number">0x40000000</span></span><br><span class="line">(lldb) register read cpsr</span><br><span class="line">cpsr = <span class="number">0x40000000</span></span><br><span class="line">(lldb) c</span><br><span class="line">a == b</span><br></pre></td></tr></table></figure>

<ul>
<li>N</li>
</ul>
<p>符号标志位，记录相关指令执行后，其结果是否为负，如果为负 N=1，如果是非负 N=0</p>
<ul>
<li>Z</li>
</ul>
<p>0 标志位，记录相关指令执行后，其结果是否为0，如果为0 Z=1，如果结果不为0 Z=0</p>
<ul>
<li>C</li>
</ul>
<p>进位标志位</p>
<p>加法运算：运算结果产生了进位 C=1 ，否则 C=0</p>
<p>减法运算：运算时产生了借位 C=0，否则 C=1</p>
<ul>
<li>V</li>
</ul>
<p>溢出标志位，V=1 表示符号位溢出</p>
<p>正数+正数为负数 溢出</p>
<p>负数+负数为正数 溢出</p>
<p>正数+负数 不可能溢出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int g &#x3D; 12;</span><br><span class="line"></span><br><span class="line">int func(int a, int b)&#123;</span><br><span class="line">    printf(&quot;haha&quot;);</span><br><span class="line">    int c &#x3D; a + g;</span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char * argv[]) &#123;</span><br><span class="line">    func(10, 20);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>printf(&quot;haha&quot;)</code> 处打断点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	  0x102732730 &lt;+20&gt;: adrp   x0, 1</span><br><span class="line">    0x102732734 &lt;+24&gt;: add    x0, x0, #0xf2b      ; &#x3D;0xf2b </span><br><span class="line">-&gt;  0x102732738 &lt;+28&gt;: bl     0x102732a7c         ; symbol stub for: printf</span><br></pre></td></tr></table></figure>

<p>X0 存储的是第一个参数，动态调试可以直接打印 X0 的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(lldb) register read $x0</span><br><span class="line">      x0 &#x3D; 0x0000000102733f2b  &quot;haha&quot;</span><br></pre></td></tr></table></figure>

<p>分析</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x102732730 &lt;+20&gt;: adrp   x0, 1</span><br><span class="line">adrp 就是 address page, 每一页就是 4k，4k就是 12 位</span><br><span class="line">意思是</span><br><span class="line">将 1 左移 12 位，(1后面补上12个0) -&gt; 0x1000 (用计算器)</span><br><span class="line">将当前 pc 寄存器值 0x102732730，低 12 位清 0 -&gt; 0x102732000</span><br><span class="line">相加赋值给 X0 0x102732000+0x1000 &#x3D; 0x102733000</span><br><span class="line"></span><br><span class="line">0x102732734 &lt;+24&gt;: add    x0, x0, #0xf2b      ; &#x3D;0xf2b</span><br><span class="line">X0 加上 0xf2b </span><br><span class="line">(lldb) p&#x2F;x 0x102733000+0xf2b</span><br><span class="line">(long) $0 &#x3D; 0x0000000102733f2b</span><br><span class="line">常量地址就找到了 -&gt; p (char*)0x0000000102733f2b</span><br><span class="line">(char *) $3 &#x3D; 0x0000000102733f2b &quot;haha&quot;</span><br></pre></td></tr></table></figure>



<h5 id="循环选择判断"><a href="#循环选择判断" class="headerlink" title="循环选择判断"></a>循环选择判断</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmp w0, w1</span><br></pre></td></tr></table></figure>

<p>cmp 比较指令</p>
<p>BL标号：跳转到标号处执行<br>B.GT 比较结果是大于，执行标号，否则不跳转<br>B.GE 比较结果是大于等于，执行标号，否则不跳转<br>B.GQ 比较结果是等于，执行标号，否则不跳转<br>B.HI 比较结果是无符号大于，执行标号，否则不跳转</p>
<p>b.le 小于等于<br>b.lt 小于</p>
<p>dowhile循环：判断条件在后面，满足条件往前跳<br>while循环：判断条件在里面，不满足就往外跳</p>
<h5 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h5><p>常用算术指令</p>
<p><img src="/%E9%80%86%E5%90%91-%E6%B1%87%E7%BC%96/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%9C%AF%E6%8C%87%E4%BB%A4.png" alt="常用算术指令"></p>
<p>常用跳转指令</p>
<p>汇编<img src="/%E9%80%86%E5%90%91-%E6%B1%87%E7%BC%96/%E5%B8%B8%E7%94%A8%E8%B7%B3%E8%BD%AC%E6%8C%87%E4%BB%A4.png" alt="常用跳转指令"></p>
<p>无条件跳转</p>
<p><img src="/%E9%80%86%E5%90%91-%E6%B1%87%E7%BC%96/%E6%97%A0%E6%9D%A1%E4%BB%B6%E8%B7%B3%E8%BD%AC.png" alt="无条件跳转"></p>
<p>常用逻辑指令</p>
<p><img src="/%E9%80%86%E5%90%91-%E6%B1%87%E7%BC%96/%E5%B8%B8%E7%94%A8%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4.png" alt="常用逻辑指令"></p>
<p>常用数据传输指令</p>
<p><img src="/%E9%80%86%E5%90%91-%E6%B1%87%E7%BC%96/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E6%8C%87%E4%BB%A4.png" alt="常用数据传输指令"></p>
<p>常用地址偏移指令</p>
<p><img src="/%E9%80%86%E5%90%91-%E6%B1%87%E7%BC%96/%E5%B8%B8%E7%94%A8%E5%9C%B0%E5%9D%80%E5%81%8F%E7%A7%BB%E6%8C%87%E4%BB%A4.png" alt="常用地址偏移指令"></p>
<p>常用移位运算指令</p>
<p><img src="/%E9%80%86%E5%90%91-%E6%B1%87%E7%BC%96/%E5%B8%B8%E7%94%A8%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.png" alt="常用移位运算指令"></p>
<p>常用加载/存储指令</p>
<p>加载/存储指令都是成对出现的</p>
<p><img src="/%E9%80%86%E5%90%91-%E6%B1%87%E7%BC%96/%E5%B8%B8%E7%94%A8%E5%8A%A0%E8%BD%BD:%E5%AD%98%E5%82%A8%E6%8C%87%E4%BB%A41.png" alt="常用加载:存储指令1"></p>
<p><img src="/%E9%80%86%E5%90%91-%E6%B1%87%E7%BC%96/%E5%B8%B8%E7%94%A8%E5%8A%A0%E8%BD%BD:%E5%AD%98%E5%82%A8%E6%8C%87%E4%BB%A42.png" alt="常用加载:存储指令2"></p>
<p>ARM 指令的一个重要特点是可以条件执行，每条 ARM 指令的条件码域包含 4 位条件码，共16种</p>
<p>几乎所有指令均根据 CPSR 中条件码的状态和指令条件码域的设置有条件地执行，当指令执行条件满足时，指令被执行，否则被忽略</p>
<p><img src="/%E9%80%86%E5%90%91-%E6%B1%87%E7%BC%96/%E6%8C%87%E4%BB%A4%E6%9D%A1%E4%BB%B6%E7%A0%81.png" alt="指令条件码"></p>
<h5 id="Objc汇编机制"><a href="#Objc汇编机制" class="headerlink" title="Objc汇编机制"></a>Objc汇编机制</h5><p>OC 中 X0 寄存器保存了对象本身</p>
<p>X1 寄存器保存了方法名</p>
<p>X2 ~ X7 开始是参数，其它参数通过栈传递</p>
]]></content>
  </entry>
  <entry>
    <title>逆向-砸壳</title>
    <url>/2022/06/13/%E9%80%86%E5%90%91-%E7%A0%B8%E5%A3%B3/</url>
    <content><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>脱壳原理</p>
<p>dyld加载MachO文件，将MachO文件导出</p>
<h4 id="检测是否加壳"><a href="#检测是否加壳" class="headerlink" title="检测是否加壳"></a>检测是否加壳</h4><ul>
<li>使用 otool</li>
</ul>
<p>otool 可以看到二进制文件的信息有个 crypt，cryptid = 1 已加壳，crypt = 0，未加壳</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">otool -l WeChat | grep crypt</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 MachOView 查看</li>
</ul>
<p>可执行文件拖入 MachOView 展开 Load Commands 节点 LC_ENCRYPTION_INFO_64</p>
<p>可以看到 Crypt ID</p>
<img src="逆向-砸壳/WeChatc7de80a199f342265e06ba9817134a60.png" alt="WeChatc7de80a199f342265e06ba9817134a60" style="zoom:80%;" />

<h4 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h4><h5 id="Clutch"><a href="#Clutch" class="headerlink" title="Clutch"></a>Clutch</h5><blockquote>
<p>使用问题比较多，好多砸壳失败的</p>
</blockquote>
<p>全自动脱壳工具，原理是应用运行时的内存数据按照一定格式导出，并重新打包为 ipa 文件</p>
<ul>
<li>安装</li>
</ul>
<p><a href="https://github.com/KJCracks/Clutch/releases">https://github.com/KJCracks/Clutch/releases</a> 下载最新版 Clutch 2.0.4</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ iproxy 2222 22 #端口转发</span><br><span class="line">#macOS执行</span><br><span class="line">$ scp -p 2222 -r .&#x2F;Clutch root@localhost:&#x2F;usr&#x2F;bin&#x2F;</span><br><span class="line">#iOS设备执行</span><br><span class="line">$ chmod +x &#x2F;usr&#x2F;bin&#x2F;Clutch</span><br></pre></td></tr></table></figure>

<p>输入 Clutch，输出了帮助信息则安装配置成功</p>
<ul>
<li>Clutch</li>
</ul>
<p>Clutch -i 参数打印所有应用列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root# Clutch -i</span><br><span class="line">Installed apps:</span><br><span class="line">1:  今日头条 &lt;com.ss.iphone.article.News&gt;</span><br></pre></td></tr></table></figure>

<p>脱壳</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root# Clutch -d com.ss.iphone.article.News</span><br></pre></td></tr></table></figure>

<p>脱壳完成后的 ipa 包在 <code>/private/var/mobile/Documents/Dumped</code> 路径</p>
<p>再拷贝到电脑</p>
<h5 id="dumpedcrypted"><a href="#dumpedcrypted" class="headerlink" title="dumpedcrypted"></a>dumpedcrypted</h5><ul>
<li>编译  dumpdecrypted</li>
</ul>
<p>下载 <a href="https://github.com/stefanesser/dumpdecrypted">https://github.com/stefanesser/dumpdecrypted</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd dumpdecrypted-master</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure>

<p>生成 dumpdecrypted.dylib</p>
<ul>
<li>给 dumpdecrypted.dylib 重签名 </li>
</ul>
<p>可以使用 ldid 签名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldid -S dumpdecrypted.dylib</span><br></pre></td></tr></table></figure>

<p>或者使用 codesign 签名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">codesign -f -s - .&#x2F;dumpdecrypted.dylib</span><br></pre></td></tr></table></figure>

<ul>
<li>拷贝 dumpdecrypted.dylib 到设备</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ scp -P2222 .&#x2F;dumpdecrypted.dylib root@localhost:&#x2F;usr&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure>

<ul>
<li>dumpdecrypted 脱壳</li>
</ul>
<p>查找路径和进程ID</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &#x2F;temp</span><br><span class="line">$ ps -e | grep WhatsApp</span><br><span class="line">#或者</span><br><span class="line">$ ps -ax | grep WhatsApp</span><br></pre></td></tr></table></figure>

<p>使用 DYLD_INSERT_LIBRARIES 环境变量将 dumpdecrypted.dylib 注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DYLD_INSERT_LIBRARIES&#x3D;&#x2F;usr&#x2F;lib&#x2F;dumpdecrypted.dylib &#x2F;var&#x2F;mobile&#x2F;Containers&#x2F;Bundle&#x2F;Application&#x2F;1C8620F5-AFB5-46F8-9283-5FF70F4ADB5D&#x2F;WhatsApp.app&#x2F;WhatsApp</span><br></pre></td></tr></table></figure>

<p>生成 WhatsApp.decrypted 为脱壳后的文件，将文件拷贝到电脑</p>
<p>有些包是多架构的需要抽取指定架构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lipo AppStore.decrypted -thin arm64 -output AppStore.arm64</span><br></pre></td></tr></table></figure>

<h5 id="frida-ios-dump"><a href="#frida-ios-dump" class="headerlink" title="frida-ios-dump"></a>frida-ios-dump</h5><p>通过注入 JS 实现内存 dump，然后利用 Python 自动复制到 macOS生成ipa文件</p>
<p>原理和 dumpdecrypted 一样，都是通过把内存中已解密的数据 dump 再修复 Mach-O</p>
<ul>
<li>安装 frida</li>
</ul>
<p>iOS 设备 添加 Cydia 源：<a href="https://build.frida.re/">https://build.frida.re</a>  安装 Frida for A12+ devices</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#macOS安装frida</span><br><span class="line">$ sudo pip install frida</span><br><span class="line">#如果报错</span><br><span class="line">$ sudo pip install frida -upgrade -ignore-installed six</span><br></pre></td></tr></table></figure>

<ul>
<li>配置 frida-ios-dump 环境</li>
</ul>
<p>下载 <a href="https://github.com/AloneMonkey/frida-ios-dump">https://github.com/AloneMonkey/frida-ios-dump</a> 放到 /opt/dump 目录</p>
<p>安装依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo pip install -r requirements.txt --upgrade</span><br></pre></td></tr></table></figure>

<p>可以添加别名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim ~&#x2F;.bash_profile</span><br><span class="line">$ alias dump.py&#x3D;“&#x2F;opt&#x2F;dump&#x2F;frida-ios-dump-3.x&#x2F;dump.py”</span><br><span class="line">$ source ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>

<ul>
<li>砸壳</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#端口转发</span><br><span class="line">$ iproxy 2222 22</span><br><span class="line">#列出所有应用</span><br><span class="line">$ python3.8 dump.py -l</span><br><span class="line">#砸壳</span><br><span class="line">$ python3.8 dump.py com.moutai.mall</span><br></pre></td></tr></table></figure>

<h5 id="DumpDecrypter（推荐）"><a href="#DumpDecrypter（推荐）" class="headerlink" title="DumpDecrypter（推荐）"></a>DumpDecrypter（推荐）</h5><p>Cydia - Cydiakk中文源，搜索 DumpDecrypter 可以一键砸壳</p>
<h5 id="修复闪退"><a href="#修复闪退" class="headerlink" title="修复闪退"></a>修复闪退</h5><p>脱壳后的 ipa 包安装后闪退</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#解压ipa包</span><br><span class="line">$ unzip decrypted-app.ipa</span><br><span class="line">#导出ent.xml</span><br><span class="line">$ codesign -d --entitlements - .&#x2F;Payload&#x2F;WhatsApp.app &gt; emt.xml</span><br><span class="line">#codesign重签名</span><br><span class="line">$ codesign -s - --entitlements ent.xml -f .&#x2F;Payload&#x2F;WhatsApp.app&#x2F;WhatsApp</span><br><span class="line">#压缩成新ipa包</span><br><span class="line">$ zip -r WhatsApp_ok.ipa Payload</span><br></pre></td></tr></table></figure>

<h5 id="LLDB-手动砸壳"><a href="#LLDB-手动砸壳" class="headerlink" title="LLDB 手动砸壳"></a>LLDB 手动砸壳</h5><p>LLDB手动脱壳实现原理是从内存中 dump 出解密后的数据，并修复 Mach-O 头部。</p>
<p>点击 APP 启动，内核开始读取 MachO，查看 MachO 是否被加密</p>
<p>如果没有加密，直接交给 dyld 加载并运行</p>
<p>如果加密，则需要内核解密，得到解密后的 MachO 文件，再交给 dyld 加载运行</p>
<ul>
<li>SSH 连接设备</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ iproxy 2222 22</span><br><span class="line">$ ssh -p 2222 root@localhost</span><br></pre></td></tr></table></figure>

<p>ps 命令找到目标路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ps -e | grep SogouInput</span><br><span class="line">4096 ??  0:04.69 &#x2F;var&#x2F;containers&#x2F;Bundle&#x2F;Application&#x2F;3546467A-CBFD-45D6-B27C-04682210031E&#x2F;SogouInput.app&#x2F;SogouInput</span><br></pre></td></tr></table></figure>

<ul>
<li>拷贝到桌面</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ scp -r -P 2222 root@localhost:&#x2F;var&#x2F;containers&#x2F;Bundle&#x2F;Application&#x2F;3546467A-CBFD-45D6-B27C-04682210031E&#x2F;SogouInput.app ~&#x2F;Desktop</span><br></pre></td></tr></table></figure>

<ul>
<li>查看是否加密</li>
</ul>
<p>要在内存中解密二进制文件，就需要知道加密数据的偏移量及大小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">otool -l SogouInput | grep crypt</span><br><span class="line"> cryptoff 6299648  &#x2F;&#x2F;文件偏移</span><br><span class="line">cryptsize 4096		 &#x2F;&#x2F;加密文件大小</span><br><span class="line">  cryptid 1			   &#x2F;&#x2F;是否加密</span><br></pre></td></tr></table></figure>

<p>MachO 从位置 6299648（十进制） 开始后的 4096（十进制） 字节都被加密了</p>
<ul>
<li>开始脱壳</li>
</ul>
<p>LLDB 附加进程，然后获取 APP 的内存加载地址</p>
<ul>
<li>LLDB 连接</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iproxy 1234 1234</span><br></pre></td></tr></table></figure>

<p>设备上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">debugserver *:1234 -a SogouInput</span><br></pre></td></tr></table></figure>

<p>Mac</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lldb</span><br><span class="line">(lldb) process connect connect:&#x2F;&#x2F;localhost:1234</span><br><span class="line">(lldb) image list -o -f  </span><br><span class="line">[  0] 0x0000000004e0c000 &#x2F;private&#x2F;var&#x2F;containers&#x2F;Bundle&#x2F;Application&#x2F;3546467A-CBFD-45D6-B27C-04682210031E&#x2F;SogouInput.app&#x2F;SogouInput(0x0000000104e0c000)</span><br></pre></td></tr></table></figure>

<p>image list 查看 APP 在内存中的偏移 ASLR 为 0x0000000104e0c000</p>
<p>如果这边遇到报错 <code>error: rejecting incoming connection from ::ffff:127.0.0.1 (expecting ::1)</code></p>
<p>debugserver 连接改成 <code>debugserver 127.0.0.1:1234 -a SogouInput</code></p>
<ul>
<li>Dump出解密部分二进制文件</li>
</ul>
<p>利用 memory 命令从内存中dump出解密后的二进制数据，保存到文件</p>
<p>读取内存中的数据拷贝出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;memory read --force --outfile 输出文件目录名称 --binary --count 加密文件的大小 ASLR+文件偏移 </span><br><span class="line">(--force 按字节读取意思)</span><br><span class="line">memory read --force --outfile .&#x2F;decrypted.bin --binary --count 4096 0x0000000104e0c000+6299648</span><br></pre></td></tr></table></figure>

<p>此时发现多了一个 decrypted.bin 文件</p>
<ul>
<li>修复文件</li>
</ul>
<p>dump 出来的数据没有 Mach-O 头部的信息，需要修复才能使用。将 dump 出来的数据重新写回脱壳前的文件，以替换加密的数据</p>
<ul>
<li>dd 指令将Dump出的二进制文件写入MachO文件</li>
</ul>
<p>指定大小文件写入另外一个文件里面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;dd seek&#x3D;文件偏移 bs&#x3D;单位为1字节 conv&#x3D;转换方式（保留未被截取部分的内容）if&#x3D;输入文件地址 of&#x3D;输出文件地址</span><br><span class="line">&#x2F;&#x2F;~&#x2F;Desktop目录</span><br><span class="line">dd seek&#x3D;6299648 bs&#x3D;1 conv&#x3D;notrunc if&#x3D;.&#x2F;decrypted.bin of&#x3D;.&#x2F;SogouInput.app&#x2F;SogouInput</span><br></pre></td></tr></table></figure>

<ul>
<li>更改 cycript 为 0，最后一步修改加密标记</li>
</ul>
<p>MachOView 打开 SogouInput</p>
<p>在 Load Command - LC_ENCRYPTION_INFO_64 可以看到 Crypt ID 值为 1</p>
<p>修改 Crypt ID 的 Data 0000001 改为 0000000，保存再次查看是否加密</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">otool -l SogouInput.app&#x2F;SogouInput | grep crypt</span><br><span class="line">     cryptoff 6299648</span><br><span class="line">    cryptsize 4096</span><br><span class="line">      cryptid 0</span><br></pre></td></tr></table></figure>

<p>利用 class-dump 导出头文件测试下能不能导出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class-dump -H &#x2F;Users&#x2F;midland_whk&#x2F;Desktop&#x2F;SogouInput.app&#x2F;SogouInput -o &#x2F;Users&#x2F;midland_whk&#x2F;Desktop&#x2F;header&#x2F;</span><br></pre></td></tr></table></figure>





































]]></content>
      <categories>
        <category>逆向</category>
      </categories>
  </entry>
  <entry>
    <title>逆向工具-Dobby</title>
    <url>/2022/06/09/%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7-Dobby/</url>
    <content><![CDATA[<h4 id="Inline-Hook"><a href="#Inline-Hook" class="headerlink" title="Inline Hook"></a>Inline Hook</h4><p>修改函数的前 N 字节内存，使其跳转到自己编写的函数，这样原函数的逻辑就被新函数接管了，同时还应该保存原函数的前 N 个字节，以便在需要时能正确恢复原来的汇编代码从而执行原始逻辑</p>
<h4 id="Dobby"><a href="#Dobby" class="headerlink" title="Dobby"></a>Dobby</h4><p>Dobby（原名 HookZz）<a href="https://github.com/jmpews/Dobby">https://github.com/jmpews/Dobby</a></p>
<h5 id="编译-Xcode-工程"><a href="#编译-Xcode-工程" class="headerlink" title="编译 Xcode 工程"></a>编译 Xcode 工程</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;jmpews&#x2F;Dobby.git --depth&#x3D;1</span><br></pre></td></tr></table></figure>

<p>这是个跨平台的，需要将 cmake 将工程编译成为 Xcode 工程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd Dobby &amp;&amp; mkdir build_for_ios_arm64 &amp;&amp; cd build_for_ios_arm64</span><br><span class="line">cmake .. -G Xcode \</span><br><span class="line">-DCMAKE_TOOLCHAIN_FILE&#x3D;cmake&#x2F;ios.toolchain.cmake \</span><br><span class="line">-DPLATFORM&#x3D;OS64 -DARCHS&#x3D;&quot;arm64&quot; -DCMAKE_SYSTEM_PROCESSOR&#x3D;arm64 \</span><br><span class="line">-DENABLE_BITCODE&#x3D;0 -DENABLE_ARC&#x3D;0 -DENABLE_VISIBILITY&#x3D;1 -DDEPLOYMENT_TARGET&#x3D;9.3 \</span><br><span class="line">-DDynamicBinaryInstrument&#x3D;ON -DNearBranch&#x3D;ON -DPlugin.SymbolResolver&#x3D;ON -DPlugin.Darwin.HideLibrary&#x3D;ON -DPlugin.Darwin.ObjectiveC&#x3D;ON</span><br><span class="line"></span><br><span class="line">#github 上是下面的</span><br><span class="line">cd Dobby &amp;&amp; mkdir build_for_ios &amp;&amp; cd build_for_ios</span><br><span class="line">cmake .. -G Xcode -DCMAKE_SYSTEM_NAME&#x3D;iOS -DCMAKE_OSX_ARCHITECTURES&#x3D;arm64 -DCMAKE_SYSTEM_PROCESSOR&#x3D;arm64 -DCMAKE_OSX_DEPLOYMENT_TARGET&#x3D;9.3</span><br></pre></td></tr></table></figure>

<p>cmake 编译后生成一个 Xcode 工程</p>
<img src="逆向工具-Dobby/WeChat646a5d4c48c7a119b2d324b20ff968a3.png" alt="WeChat646a5d4c48c7a119b2d324b20ff968a3" style="zoom:80%;" />

<p>编译 DobbyX.framework</p>
<p><img src="/%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7-Dobby/WeChatc1fcfbfb83d8dd9daed4ac78a60cadbd.png" alt="WeChatc1fcfbfb83d8dd9daed4ac78a60cadbd"></p>
<h5 id="导入-Framework"><a href="#导入-Framework" class="headerlink" title="导入 Framework"></a>导入 Framework</h5><p>创建测试工程 testDobby，将 DobbyX.framework 拖入工程</p>
<p>运行后报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dyld: Library not loaded: @rpath&#x2F;DobbyX.framework&#x2F;DobbyX</span><br><span class="line">  Referenced from: &#x2F;private&#x2F;var&#x2F;containers&#x2F;Bundle&#x2F;Application&#x2F;B6A97E11-656E-461B-93B0-A1D72E9313AB&#x2F;testDobby.app&#x2F;testDobby</span><br><span class="line">  Reason: image not found</span><br><span class="line">dyld: launch, loading dependent libraries</span><br><span class="line">DYLD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;lib&#x2F;system&#x2F;introspection</span><br><span class="line">DYLD_INSERT_LIBRARIES&#x3D;&#x2F;Developer&#x2F;usr&#x2F;lib&#x2F;libBacktraceRecording.dylib:&#x2F;Developer&#x2F;usr&#x2F;lib&#x2F;libMainThreadChecker.dylib:&#x2F;Developer&#x2F;Library&#x2F;PrivateFrameworks&#x2F;DTDDISupport.framework&#x2F;libViewDebuggerSupport.dylib</span><br></pre></td></tr></table></figure>

<p>将 Framework 首次拖入工程，Xcode 不会自动帮你拷贝，运行时会发现 Framework 没有打包进入 APP 包，造成 DYLD 加载时找不到库报错 </p>
<p>TARGETS testDobby - Build Phases，点击 + 选择 New Copy Files Phase</p>
<p>Copy Files 中，Destination 选择 Frameworks</p>
<img src="逆向工具-Dobby/WeChat511e8790f7c557a95e07f4c3227c5f93.png" alt="WeChat511e8790f7c557a95e07f4c3227c5f93" style="zoom:80%;" />

<p>运行后提示 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[*] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">[*] Dobby</span><br><span class="line">[*] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">[*] dobby in debug log mode, disable with cmake flag &quot;-DDOBBY_DEBUG&#x3D;OFF&quot;</span><br></pre></td></tr></table></figure>

<h5 id="Dobby-核心函数"><a href="#Dobby-核心函数" class="headerlink" title="Dobby 核心函数"></a>Dobby 核心函数</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DobbyHook</span><span class="params">(<span class="keyword">void</span> *address, <span class="keyword">void</span> *replace_call, <span class="keyword">void</span> **origin_call)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#address：需要 Hook 的函数地址</span></span><br><span class="line">#replace_all：新函数地址</span><br><span class="line">#origin_call：保留原始函数的指针的地址</span><br></pre></td></tr></table></figure>

<h5 id="Dobby-使用"><a href="#Dobby-使用" class="headerlink" title="Dobby 使用"></a>Dobby 使用</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;DobbyX/dobby.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.定义函数指针，用于保存被替换函数的地址</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> (*sum_p)(<span class="keyword">int</span> a, <span class="keyword">int</span> b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义将要被 HOOK 的函数</span></span><br><span class="line"><span class="keyword">int</span> sum(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.定义新函数，用此函数替换将要HOOK的函数</span></span><br><span class="line"><span class="keyword">int</span> mySum(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;Sum: %d, 🍺🍺&quot;</span>, sum_p(a, b)); <span class="comment">//调用原函数</span></span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">  	<span class="comment">//4.调用DobbyHook进行函数的HOOK</span></span><br><span class="line">    DobbyHook(sum, mySum, (<span class="keyword">void</span> *)&amp;sum_p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;Sum: %d&quot;</span>, sum(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#sum函数HOOK成功，先输出原始函数的执行结果，再输出替换函数的执行结果</span><br><span class="line">Sum: 30, 🍺🍺</span><br><span class="line">Sum: -10</span><br></pre></td></tr></table></figure>

<h5 id="HOOK函数地址"><a href="#HOOK函数地址" class="headerlink" title="HOOK函数地址"></a>HOOK函数地址</h5><p>逆向开发中，应用会剥离符号表，我们无法获得符号名称，所有 HOOK 的一定是地址</p>
<p>应用每次启动时，ASLR 偏移地址都不一样，所以不能直接 HOOK 地址</p>
<p>先找到函数在 MachO 中的偏移地址，加上 PAGEZERO 的 0x100000000，再加上本次启动的 ASLR 偏移地址</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;Inject.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;DobbyX/dobby.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;mach-o/dyld.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Inject</span></span></span><br><span class="line"><span class="comment">//0x5F04 MachO上函数偏移地址</span></span><br><span class="line"><span class="keyword">static</span> uintptr_t sumP = <span class="number">0x5F04</span> + <span class="number">0x100000000</span>;</span><br><span class="line"></span><br><span class="line">+(<span class="keyword">void</span>)load&#123;</span><br><span class="line">   sumP += _dyld_get_image_vmaddr_slide(<span class="number">0</span>); <span class="comment">//+ASLR偏移地址</span></span><br><span class="line">   DobbyHook((<span class="keyword">void</span> *)sumP, mySum, (<span class="keyword">void</span> *)&amp;sum_p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> (*sum_p)(<span class="keyword">int</span> a,<span class="keyword">int</span> b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mySum(<span class="keyword">int</span> a,<span class="keyword">int</span> b) &#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@&quot;Sum：%d，🍺🍺🍺🍺🍺&quot;</span>,sum_p(a,b));</span><br><span class="line">   <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>































]]></content>
      <categories>
        <category>逆向工具</category>
      </categories>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-App爬取</title>
    <url>/2022/04/18/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-App%E7%88%AC%E5%8F%96/</url>
    <content><![CDATA[<h4 id="11-2-mitmproxy-的使用"><a href="#11-2-mitmproxy-的使用" class="headerlink" title="11.2 mitmproxy 的使用"></a>11.2 mitmproxy 的使用</h4><p>官方文档 <a href="https://docs.mitmproxy.org/stable/">https://docs.mitmproxy.org/stable/</a></p>
<p>中文文档及配置 <a href="https://ptorch.com/news/269.html">https://ptorch.com/news/269.html</a></p>
<p>mitmproxy 是一个支持 HTTP 和 HTTPS 的抓包程序，是一个控制台形式的操作</p>
<p>有两个关联组件</p>
<p>mitmdump：是 mitmproxy 命令行接口，利用它对接 Python 脚本，实现监听后的处理</p>
<p>mitmweb：一个 Web 程序，通过它以清楚观察到 mitmproxy 捕获请求</p>
<p>mitmproxy 运行在 PC 上， mitmproxy 会在 PC 上的 8080 端口运行，然后开启一个代理服务，这个服务实际上是一个 HTTP/HTTPS 的代理</p>
<p>手机和PC在同一局域网内，设置代理为 mitmproxy 的代理地址，这样手机访问互联网时，流量包就会流经 mitmproxy，mitmproxy 再去转发这些数据包到真实的服务器，服务器返回数据包时再由 mitmproxy 转发回手机，这样 mitmproxy 就相当于起了中间人的作用。这个过程还可以对接 mitmdump，抓取到的 request  和 response 的内容都可以用 Python 处理</p>
<h5 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h5><p>启动 mitmproxy，之后会在 8080 端口上运行一个代理服务，右下角显示当前正在监听的端口</p>
<p>或者启动 mitmdump，也会监听 8080 端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmproxy</span><br></pre></td></tr></table></figure>

<img src="Python3网络爬虫开发实战-App爬取/WeChatbc9c4fbc9a77005d02a7b76380f4d96d.png" alt="WeChatbc9c4fbc9a77005d02a7b76380f4d96d" style="zoom:100%;" />



<h5 id="mitmproxy-使用"><a href="#mitmproxy-使用" class="headerlink" title="mitmproxy 使用"></a>mitmproxy 使用</h5><p>手机设置代理 端口号设置 8080</p>
<p>设置好之后，手机浏览请求，mitmproxy 页面便会呈现手机上的请求</p>
<img src="Python3网络爬虫开发实战-App爬取/WeChat3176183fed7aabb817d5cca64b557fea.png" alt="WeChat3176183fed7aabb817d5cca64b557fea" style="zoom:80%;" />

<p>键盘上下移动光标选择请求，敲击回车可以查看详情</p>
<img src="Python3网络爬虫开发实战-App爬取/WeChatbdf3664c9d6af574beb50d4ba5ecbda0.png" alt="WeChatbdf3664c9d6af574beb50d4ba5ecbda0" style="zoom:80%;" />

<p>可以看到 3 个分栏，Request、Response、Detail，通过鼠标点击分栏或者 Tab 切换</p>
<h6 id="命令行编辑功能"><a href="#命令行编辑功能" class="headerlink" title="命令行编辑功能"></a>命令行编辑功能</h6><p>点击 e 进入编辑功能，跳出一个列表可以选择需要编辑选项</p>
<p>esc 关闭列表选项</p>
<p>如进入编辑请求参数界面，光标移动到需要修改地方，回车可编辑</p>
<p>敲击 a 可以增加一行，输入 Key、Value</p>
<p>再敲击 esc，q 键，返回之前的界面，可以看到请求的参数已修改</p>
<img src="Python3网络爬虫开发实战-App爬取/WeChat4316a20d612a7c046a3338faa2f20b37.png" alt="WeChat4316a20d612a7c046a3338faa2f20b37" style="zoom:80%;" />

<p>敲击 r 发起修改后的请求</p>
<h5 id="mitmweb"><a href="#mitmweb" class="headerlink" title="mitmweb"></a>mitmweb</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmweb</span><br><span class="line">#提示</span><br><span class="line">Web server listening at http:&#x2F;&#x2F;127.0.0.1:8081&#x2F;</span><br><span class="line">Proxy server listening at http:&#x2F;&#x2F;*:8080</span><br></pre></td></tr></table></figure>

<p>打开链接 <a href="http://127.0.0.1:8081/">http://127.0.0.1:8081/</a> 可以看到请求</p>
<h5 id="mitmdump"><a href="#mitmdump" class="headerlink" title="mitmdump"></a>mitmdump</h5><p>mitmdump 是 mitmproxy 的命令行接口，同时可以对接 Python 对请求进行处理</p>
<p>可以命令行启动 mitmproxy，并把截获的数据保存到文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump -w outfile #打开乱码</span><br></pre></td></tr></table></figure>

<p>如果设置设置代理报错<code> killed by block_global</code>， 添加参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump -w outfile --set block_global&#x3D;false</span><br></pre></td></tr></table></figure>





<p>还可以指定一个脚本来处理截获的数据，使用 -s 参数，脚本需要放在当前命令执行的目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump -s script.py</span><br></pre></td></tr></table></figure>

<p>脚本写入如下代码：定义了一个 request() 方法，参数为 flow，其实是一个 HTTPFlow 对象，通过 request 属性即可获取当前请求对象，然后打印输出请求头，将请求头修改成了 MitmProxy</p>
<p>手机端访问 <a href="http://httpbin.org/get">http://httpbin.org/get</a> 测试，查看请求的相关数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">flow</span>):</span></span><br><span class="line">	flow.request.headers[<span class="string">&#x27;User-Agent&#x27;</span>] = <span class="string">&#x27;MitmProxy&#x27;</span></span><br><span class="line">	print(flow.request.headers)</span><br></pre></td></tr></table></figure>

<ul>
<li>静默模式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump -q -s index.py</span><br></pre></td></tr></table></figure>





<h6 id="日志输出"><a href="#日志输出" class="headerlink" title="日志输出"></a>日志输出</h6><p>可以设定不同级别以不同颜色输出结果，显示到中断控制台上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> ctx</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">flow</span>):</span></span><br><span class="line">	flow.request.headers[<span class="string">&#x27;User-Agent&#x27;</span>] = <span class="string">&#x27;MitmProxy&#x27;</span></span><br><span class="line">	ctx.log.info(<span class="built_in">str</span>(flow.request.headers))</span><br><span class="line">	ctx.log.warn(<span class="built_in">str</span>(flow.request.headers))</span><br><span class="line">	ctx.log.error(<span class="built_in">str</span>(flow.request.headers))</span><br><span class="line">	print(flow.request.headers)</span><br></pre></td></tr></table></figure>

<p>这里调用了 ctx 模块，它有一个 log 功能</p>
<h6 id="Request-请求"><a href="#Request-请求" class="headerlink" title="Request 请求"></a>Request 请求</h6><p>还可输出其它内容 headers、cookies 等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> ctx</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">flow</span>):</span></span><br><span class="line">	request = flow.request</span><br><span class="line">	info = ctx.log.info</span><br><span class="line">	print(info(<span class="built_in">str</span>(request.headers)))</span><br><span class="line">	print(info(<span class="built_in">str</span>(request.cookies)))</span><br><span class="line">	print(info(<span class="built_in">str</span>(request.host)))</span><br><span class="line">	print(info(<span class="built_in">str</span>(request.method)))</span><br><span class="line">	print(info(<span class="built_in">str</span>(request.port)))</span><br><span class="line">	print(info(<span class="built_in">str</span>(request.scheme)))</span><br></pre></td></tr></table></figure>

<p>可以对属性修改 ，修改脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">flow</span>):</span></span><br><span class="line">	url = <span class="string">&#x27;https://httpbin.org/get&#x27;</span></span><br><span class="line">	flow.request.url = url</span><br></pre></td></tr></table></figure>

<p>访问 <a href="https://baidu.com/">https://baidu.com</a> 直接跳转到这里了 <a href="https://httpbin.org/get">https://httpbin.org/get</a></p>
<p>Request 还有很多属性 参考 <a href="http://docs.mitmproxy.org/en/latest/scripting/api.html">http://docs.mitmproxy.org/en/latest/scripting/api.html</a></p>
<h6 id="Response-响应"><a href="#Response-响应" class="headerlink" title="Response 响应"></a>Response 响应</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> ctx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">response</span>(<span class="params">flow</span>):</span></span><br><span class="line">	response = flow.response</span><br><span class="line">	info = ctx.log.info</span><br><span class="line">	info(<span class="built_in">str</span>(response.status_code))</span><br><span class="line">	info(<span class="built_in">str</span>(response.headers))</span><br><span class="line">	info(<span class="built_in">str</span>(response.cookies))</span><br><span class="line">	info(<span class="built_in">str</span>(response.text))</span><br></pre></td></tr></table></figure>

<p>再访问 httpbin </p>
<ul>
<li>修改响应消息体-直接修改响应字段</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> ctx, http</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modify</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">response</span>(<span class="params">self, flow</span>):</span></span><br><span class="line">        <span class="keyword">if</span> flow.request.url.startswith(<span class="string">&quot;https://xxx.x.xxx.com.cn/activityInfo/getPrizeInfo==&quot;</span>):</span><br><span class="line">       		 //获取响应的json字符串，转成python对象进行解析和修改</span><br><span class="line">            response = json.loads(flow.response.get_text())</span><br><span class="line">            response[<span class="string">&#x27;limitCount&#x27;</span>] = <span class="number">1</span></span><br><span class="line">            //修改完成后，奖python对象转成json字符串，<span class="built_in">set</span>进请求的响应体重发送给客户端</span><br><span class="line">            flow.response.set_text(json.dumps(response))</span><br><span class="line">            ctx.log.info(<span class="string">&#x27;modify limitCount&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> addons = [</span><br><span class="line">	Modify()</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>修改响应消息体-通过读取json文件的字符串返给客户端</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> ctx, http</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modify</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">response</span>(<span class="params">self, flow</span>):</span></span><br><span class="line">        <span class="keyword">if</span> flow.request.url.startswith(<span class="string">&quot;https://xxx.x.xxx.com.cn/activityInfo/getPrizeInfo==&quot;</span>):</span><br><span class="line">        	//读取文件，在当前文件路径下执行脚本，否则需要写文件的绝对路径；不然会找不到该json文件</span><br><span class="line">       		 <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;getStatus.json&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">       		 	//从json文件中读取数据成python对象</span><br><span class="line">                res = json.load(f)</span><br><span class="line">            //将读取的python对象转成json字符串发送给客户端</span><br><span class="line">            flow.response.set_text(json.dumps(res))</span><br><span class="line">            ctx.log.info(<span class="string">&quot;modify order status&quot;</span>)</span><br><span class="line"> </span><br><span class="line"> addons = [</span><br><span class="line">	Modify()</span><br><span class="line">]</span><br></pre></td></tr></table></figure>







<h6 id="拦截请求"><a href="#拦截请求" class="headerlink" title="拦截请求"></a>拦截请求</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> http, ctx</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Lock</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Filter</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, filter_info</span>):</span></span><br><span class="line">    self.log_info = <span class="string">&quot;&quot;</span></span><br><span class="line">    self.mutex = Lock()</span><br><span class="line">    self.filter_info = filter_info</span><br><span class="line">    self.response_file = <span class="literal">None</span></span><br><span class="line">    self.switch_on = <span class="literal">False</span></span><br><span class="line">    self.log_file = <span class="string">&quot;log.txt&quot;</span></span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">self, info</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    self.log_info += <span class="string">f&quot;<span class="subst">&#123;info&#125;</span>\n\n&quot;</span></span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">write_log</span>(<span class="params">self, mode=<span class="string">&quot;w+&quot;</span></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    self.mutex.acquire()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(self.log_file, mode) <span class="keyword">as</span> f:</span><br><span class="line">      f.write(self.log_info)</span><br><span class="line">    self.mutex.release()</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_target_flow</span>(<span class="params">self, flow: http.HTTPFlow</span>) -&gt; bool:</span></span><br><span class="line">    <span class="keyword">for</span> info <span class="keyword">in</span> self.filter_info:</span><br><span class="line">      <span class="keyword">if</span> info[<span class="string">&quot;str_in_url&quot;</span>] <span class="keyword">in</span> flow.request.url:</span><br><span class="line">        self.log_file = info[<span class="string">&quot;log_file&quot;</span>]</span><br><span class="line">        self.switch_on = info[<span class="string">&quot;switch_on&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> info[<span class="string">&quot;response_file&quot;</span>] != <span class="literal">None</span>:</span><br><span class="line">          self.response_file = info[<span class="string">&quot;response_file&quot;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">modify_response</span>(<span class="params">self, flow: http.HTTPFlow</span>) -&gt; http.HTTPFlow:</span></span><br><span class="line">    <span class="keyword">if</span> self.switch_on <span class="keyword">and</span> self.response_file:</span><br><span class="line">      <span class="keyword">with</span> <span class="built_in">open</span>(self.response_file, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        flow.response.content = f.read().encode()</span><br><span class="line">    <span class="keyword">return</span> flow</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">self, flow: http.HTTPFlow</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.is_target_flow(flow):</span><br><span class="line">      self.log_info = <span class="string">&quot;&quot;</span></span><br><span class="line">      self.log(<span class="string">f&quot;——METHOD——\n<span class="subst">&#123;flow.request.method&#125;</span>&quot;</span>)</span><br><span class="line">      self.log(<span class="string">f&quot;——HOST——\n<span class="subst">&#123;flow.request.pretty_host&#125;</span>&quot;</span>)</span><br><span class="line">      self.log(<span class="string">f&quot;——URL——\n<span class="subst">&#123;flow.request.pretty_url&#125;</span>&quot;</span>)</span><br><span class="line">      query = [i + <span class="string">&quot;:&quot;</span> + flow.request.query[i] + <span class="string">&quot;\n&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> flow.request.query]</span><br><span class="line">      self.log(<span class="string">f&quot;——QUERY STRING——\n<span class="subst">&#123;<span class="string">&#x27;&#x27;</span>.join(query)&#125;</span>&quot;</span>)</span><br><span class="line">      <span class="keyword">if</span> flow.request.urlencoded_form:</span><br><span class="line">        form = [i + <span class="string">&quot;:&quot;</span> + flow.request.urlencoded_form[i] + <span class="string">&quot;\n&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> flow.request.urlencoded_form]</span><br><span class="line">        self.log(<span class="string">f&quot;——FORM——\n<span class="subst">&#123;<span class="string">&#x27;&#x27;</span>.join(form)&#125;</span>&quot;</span>)</span><br><span class="line">      self.write_log()</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">response</span>(<span class="params">self, flow: http.HTTPFlow</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.is_target_flow(flow):</span><br><span class="line">      self.log_info = <span class="string">&quot;&quot;</span></span><br><span class="line">      self.log(<span class="string">f&quot;——RESPONSE before modified——\n<span class="subst">&#123;flow.response.content.decode()&#125;</span>&quot;</span>)</span><br><span class="line">      flow = self.modify_response(flow)</span><br><span class="line">      self.log(<span class="string">f&quot;——RESPONSE after modified——\n<span class="subst">&#123;flow.response.content.decode()&#125;</span>&quot;</span>)</span><br><span class="line">      self.write_log(mode=<span class="string">&quot;a&quot;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">filter_info = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;str_in_url&quot;</span>: <span class="string">&quot;getSimpleNews&quot;</span>,</span><br><span class="line">    <span class="string">&quot;log_file&quot;</span>: <span class="string">&quot;getSimpleNews_log.txt&quot;</span>,</span><br><span class="line">    <span class="string">&quot;switch_on&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&quot;response_file&quot;</span>: <span class="string">&quot;getSimpleNews_response.txt&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;str_in_url&quot;</span>: <span class="string">&quot;getQQNewsComment&quot;</span>,</span><br><span class="line">    <span class="string">&quot;log_file&quot;</span>: <span class="string">&quot;getQQNewsComment_log.txt&quot;</span>,</span><br><span class="line">    <span class="string">&quot;switch_on&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&quot;response_file&quot;</span>: <span class="literal">None</span>,</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">addons = [</span><br><span class="line">  Filter(filter_info)</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="Script"><a href="#Script" class="headerlink" title="Script"></a>Script</h6><ol>
<li>可以定义 py 文件供 mitmproxy 加载，定义若干函数，这些函数实现 mitmproxy 提供的事件</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> http</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">self, flow:http.HTTPFlow</span>):</span></span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写 py 文件供 mitmproxy 加载，文件定义 addons 数组，数组元素是一个类实例，这些类里面有若干函数，这些函数实现 mitmproxy 提供的事件</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mitmproxy.http</span><br><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> ctx</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">self, flow: mitmproxy.http.HTTPFlow</span>):</span></span><br><span class="line">    self.num = self.num + <span class="number">1</span></span><br><span class="line">    ctx.log.info(<span class="string">&quot;We&#x27;ve seen %d flows&quot;</span> % self.num)</span><br><span class="line"></span><br><span class="line">addons = [</span><br><span class="line">    Counter()</span><br><span class="line">]</span><br></pre></td></tr></table></figure>







<p>sniffer.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> http</span><br><span class="line"> </span><br><span class="line">password_key = [<span class="string">&quot;password&quot;</span>, <span class="string">&quot;pwd&quot;</span>, <span class="string">&quot;pass&quot;</span>, <span class="string">&quot;passwd&quot;</span>, <span class="string">&quot;mm&quot;</span>, <span class="string">&quot;passport&quot;</span>, <span class="string">&quot;auth&quot;</span>, <span class="string">&quot;key&quot;</span>, <span class="string">&quot;mima&quot;</span>]</span><br><span class="line">form_login_key = [<span class="string">&quot;check&quot;</span>, <span class="string">&quot;login&quot;</span>, <span class="string">&quot;verify&quot;</span>, <span class="string">&quot;account&quot;</span>, <span class="string">&quot;logon&quot;</span>, <span class="string">&quot;signin&quot;</span>, <span class="string">&quot;denglu&quot;</span>]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sniffer</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">self, flow: http.HTTPFlow</span>):</span></span><br><span class="line">		request = flow.request</span><br><span class="line">		url = request.pretty_url</span><br><span class="line">		form_url = <span class="built_in">str</span>(request.urlencoded_form)</span><br><span class="line">		<span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">			<span class="keyword">if</span> self.any_match(form_login_key, url) <span class="keyword">or</span> self.any_match(password_key, form_url):</span><br><span class="line">				self.resolve(flow)</span><br><span class="line">                </span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">any_match</span>(<span class="params">self, <span class="built_in">list</span>, <span class="built_in">str</span>: <span class="built_in">str</span></span>):</span></span><br><span class="line">		lower_str = <span class="built_in">str</span>.lower()</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">			<span class="keyword">if</span> i <span class="keyword">in</span> lower_str:</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">resolve</span>(<span class="params">self, flow: http.HTTPFlow</span>):</span></span><br><span class="line">		request = flow.request</span><br><span class="line">		url = request.url</span><br><span class="line">		_from = <span class="built_in">str</span>(flow.client_conn.ip_address)</span><br><span class="line">		url_form = <span class="built_in">str</span>(request.urlencoded_form)</span><br><span class="line">		header = <span class="built_in">str</span>(request.headers)</span><br><span class="line"> </span><br><span class="line">		logging.info(<span class="string">&quot;url: %s \nheader: %s \nform: %s \nip_from: %s&quot;</span>, url, header, url_form, _from)</span><br></pre></td></tr></table></figure>

<p>addos.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sniffer <span class="keyword">import</span> Sniffer</span><br><span class="line"> </span><br><span class="line">addons = [</span><br><span class="line">	Sniffer()</span><br><span class="line">    <span class="comment"># YourSniffer()</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>









<h4 id="远程主机抓包"><a href="#远程主机抓包" class="headerlink" title="远程主机抓包"></a>远程主机抓包</h4><p>linux 主机 CentOS8系统，安装好 mitmproxy </p>
<p>云主机安全组入方向添加8080端口，宝塔面板防火墙开放8080端口</p>
<p>启动 mitmdump</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump -w outfile --set block_global&#x3D;false</span><br></pre></td></tr></table></figure>

<p>可以看到抓取到的链接</p>
<p>指定脚本处理数据，如获取京东的 pt_key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump -s main.py --set block_global&#x3D;false</span><br><span class="line">#</span><br><span class="line">mitmweb -s script1.py --set block_global&#x3D;false</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mitmproxy.net.http.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">flow</span>):</span></span><br><span class="line">    url = <span class="string">&#x27;https://mars.jd.com/log/sdk&#x27;</span></span><br><span class="line">    request = flow.request <span class="comment">#type: Request</span></span><br><span class="line">    <span class="keyword">if</span> request.url.startswith(url):</span><br><span class="line">        pt_key = request.cookies.get(<span class="string">&#x27;pt_key&#x27;</span>)</span><br><span class="line">        pt_pin = request.cookies.get(<span class="string">&#x27;pt_pin&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> pt_key <span class="keyword">and</span> pt_pin:</span><br><span class="line">            print(<span class="string">&#x27;接收到：pt_key=&#123;&#125;;pt_pin=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(pt_key, pt_pin))</span><br></pre></td></tr></table></figure>





<h4 id="11-3-mitmdump-爬取“得到”APP电子书信息"><a href="#11-3-mitmdump-爬取“得到”APP电子书信息" class="headerlink" title="11.3 mitmdump 爬取“得到”APP电子书信息"></a>11.3 mitmdump 爬取“得到”APP电子书信息</h4><p>爬取得到APP电子书板块，新书上架电子书信息，保存到 MongoDB</p>
<p>运行 mitmdump</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdup -s script.py</span><br></pre></td></tr></table></figure>

<p>script.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">response</span>(<span class="params">flow</span>):</span></span><br><span class="line">	print(<span class="string">&#x27;url:&#x27;</span>, flow.request.url)</span><br><span class="line">	print(<span class="string">&#x27;response:&#x27;</span>, flow.response.text)</span><br></pre></td></tr></table></figure>

<p>打印太多接口，不方便分析，改用 Charles 抓取数据</p>
<p>可以看到列表接口 <a href="https://entree.igetget.com/ebook2/v1/ebook/list">https://entree.igetget.com/ebook2/v1/ebook/list</a></p>
<h5 id="数据抓取"><a href="#数据抓取" class="headerlink" title="数据抓取"></a>数据抓取</h5><p>对接口做过滤限制，抓取接口数据，提取结果中对应的字段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> ctx</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">response</span>(<span class="params">flow</span>):</span></span><br><span class="line">	url = <span class="string">&#x27;https://entree.igetget.com/ebook2/v1/ebook/list&#x27;</span></span><br><span class="line">	requestUrl = flow.request.url <span class="comment">#type: str</span></span><br><span class="line">	<span class="keyword">if</span> requestUrl.startswith(url):</span><br><span class="line">		text = flow.response.text</span><br><span class="line">		data = json.loads(text)</span><br><span class="line">		books = data.get(<span class="string">&#x27;c&#x27;</span>).get(<span class="string">&#x27;list&#x27;</span>)</span><br><span class="line">		<span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">			ctx.log.info(<span class="built_in">str</span>(book))</span><br></pre></td></tr></table></figure>

<p>可以看到控制台上输出电子书信息</p>
<h5 id="提取保存"><a href="#提取保存" class="headerlink" title="提取保存"></a>提取保存</h5><p>声明 MongoDB 数据库连接，提取信息插入数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> ctx</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient()</span><br><span class="line">db = client[<span class="string">&#x27;igetget&#x27;</span>] <span class="comment">#相当于哪个数据库</span></span><br><span class="line">collection = db[<span class="string">&#x27;books&#x27;</span>] <span class="comment">#相当于哪个表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">response</span>(<span class="params">flow</span>):</span></span><br><span class="line">	url = <span class="string">&#x27;https://entree.igetget.com/ebook2/v1/ebook/list&#x27;</span></span><br><span class="line">	requestUrl = flow.request.url <span class="comment">#type: str</span></span><br><span class="line">	<span class="keyword">if</span> requestUrl.startswith(url):</span><br><span class="line">		text = flow.response.text</span><br><span class="line">		data = json.loads(text)</span><br><span class="line">		books = data.get(<span class="string">&#x27;c&#x27;</span>).get(<span class="string">&#x27;list&#x27;</span>)</span><br><span class="line">		<span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">			data = &#123;</span><br><span class="line">				<span class="string">&#x27;title&#x27;</span>: book.get(<span class="string">&#x27;operating_title&#x27;</span>),</span><br><span class="line">				<span class="string">&#x27;cover&#x27;</span>: book.get(<span class="string">&#x27;cover&#x27;</span>),</span><br><span class="line">				<span class="string">&#x27;summary&#x27;</span>: book.get(<span class="string">&#x27;other_share_summary&#x27;</span>),</span><br><span class="line">				<span class="string">&#x27;price&#x27;</span>: book.get(<span class="string">&#x27;price&#x27;</span>)</span><br><span class="line">			&#125;</span><br><span class="line">			ctx.log.info(<span class="built_in">str</span>(book))</span><br><span class="line">			collection.insert(data)</span><br></pre></td></tr></table></figure>

<h4 id="11-4-Appium-使用"><a href="#11-4-Appium-使用" class="headerlink" title="11.4 Appium 使用"></a>11.4 Appium 使用</h4><p>Appium 是一个跨平台移动端自动化测试工具，可以模拟 APP 内部的各种操作，如点击、滑动、文本输入等，对 iOS 设备 Appium 使用 UIAutomation 来实现驱动，对 Android 来说，使用 UIAutomator 和 Selendroid 来实现驱动</p>
<p>Appium 相当于一个服务器，我们可以向 Appium 发送一些操作指令，Appium 就会根据不同的指令对移动设备进行驱动，完成不同的动作</p>
<img src="Python3网络爬虫开发实战-App爬取/WeChatca0e02e38eb8e8ab9bcfa7bd8d363752.png" alt="WeChatca0e02e38eb8e8ab9bcfa7bd8d363752" style="zoom:50%;" />

<p>点击 Start Server 即可启动 Appium 的服务，相当于开启了一个 Appium 服务，可以通过 Appium 内置驱动或 Python 代码向 Appium 的服务发送一系列操作指令，Appium 就会根据不同的指令对移动设备进行驱动，完成不同的动作</p>
<h6 id="Appium内置驱动打开APP"><a href="#Appium内置驱动打开APP" class="headerlink" title="Appium内置驱动打开APP"></a>Appium内置驱动打开APP</h6><p>Appium 运行之后正在监听 4723 端口，我们可以向此端口对应的服务接口发送操作指令</p>
<p>Host设置127.0.0.1</p>
<p>打开 Appium Inspector</p>
<p>配置参数</p>
<p>Remote Path: /wd/hub</p>
<p>platformName: 品台名称 iOS 或 Android</p>
<p>deviceName：设备名称</p>
<p>bundleId：APP包名(下面截图改成 bundleId)</p>
<p>其它配置参数 <a href="https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/caps.md">https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/caps.md</a></p>
<img src="Python3网络爬虫开发实战-App爬取/3641650270925_.pic.jpg" alt="3641650270925_.pic" style="zoom: 67%;" />

<p>Start Session报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Failed to create session. An unknown server-side error occurred while processing the command. Original error: Unable to launch WebDriverAgent because of xcodebuild failure: xcodebuild failed with code 70 xcodebuild error message: . Make sure you follow the tutorial at https:&#x2F;&#x2F;github.com&#x2F;appium&#x2F;appium-xcuitest-driver&#x2F;blob&#x2F;master&#x2F;docs&#x2F;real-device-config.md. Try to remove the WebDriverAgentRunner application from the device if it is installed and reboot the device.</span><br></pre></td></tr></table></figure>

<p>进入 Appium 路径 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;Applications&#x2F;Appium Server GUI.app&#x2F;Contents&#x2F;Resources&#x2F;app&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;appium-webdriveragent</span><br></pre></td></tr></table></figure>

<p>打开 WebDriverAgent 项目，选择 Targets-WebDriverAgentRunner 配置好证书 </p>
<p>Product - Test ，如果连接手机，会安装一个 WebDriverAgent app，启动后又回到桌面，控制台可以看到设备的IP地址 <a href="http://10.1.253.120:8100/">http://10.1.253.120:8100</a> 加上/status 即 <a href="http://10.1.253.120:8100/status%EF%BC%8C%E6%89%93%E5%BC%80%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%87%BA%E7%8E%B0%E4%B8%80%E4%B8%B2">http://10.1.253.120:8100/status，打开浏览器，如果出现一串</a> JSON，说明 WDA 安装成功了，打开<a href="http://10.1.253.120:8100/inspector">http://10.1.253.120:8100/inspector</a> 可以查看界面和元素信息</p>
<p>再次点击 StartSession</p>
<img src="Python3网络爬虫开发实战-App爬取/3651650273841_.pic.jpg" alt="3651650273841_.pic" style="zoom:70%;" />

<p>左边显示APP界面，选中某个元素，中间就显示元素对应源代码，右栏显示元素的基本信息，如元素 id、class、text 等，以及可以执行的操作，如 Tap、Send Keys、Clear</p>
<p>还可以录制操作动作，窗口中操作的 APP行为都会被记录下来，Recorder 处可以自动生成对应语言的代码</p>
<img src="Python3网络爬虫开发实战-App爬取/3661650274120_.pic.jpg" alt="3661650274120_.pic" style="zoom:80%;" />

<h6 id="Python代码驱动APP"><a href="#Python代码驱动APP" class="headerlink" title="Python代码驱动APP"></a>Python代码驱动APP</h6><p>代码中指定 Appium Server</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">server = <span class="string">&#x27;http://localhost:4723/wd/hub&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这个 Server 在刚打开 Appium 的时候就已经开启了，是在 4723 端口上运行的</p>
<p>新建一个 Session，这类似点击 Appium 内置驱动的 Start Session 按钮相同的功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">	server = <span class="string">&#x27;http://localhost:4723/wd/hub&#x27;</span></span><br><span class="line">	desired_caps = &#123;</span><br><span class="line">		<span class="string">&#x27;platformName&#x27;</span>: <span class="string">&quot;iOS&quot;</span>,</span><br><span class="line">		<span class="string">&#x27;appium:deviceName&#x27;</span>: <span class="string">&#x27;iPhoneq&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;appium:bundleId&#x27;</span>: <span class="string">&#x27;com.SwiftDemo&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;appium:udid&#x27;</span>: <span class="string">&#x27;4ce52917e9a0932f3c821e2418a03d2a993c5650&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;appium:platformVersion&#x27;</span>: <span class="string">&#x27;14.5&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;appium:xcodeSigningId&#x27;</span>: <span class="string">&#x27;iPhone Developer&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;appium:xcodeOrgId&#x27;</span>: <span class="string">&#x27;C28X7H9ZW6&#x27;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	driver = webdriver.Remote(server, desired_caps)</span><br></pre></td></tr></table></figure>

<p>运行后就启动 APP了 </p>
<p>查看刚才录制生成的Python代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">el1 = driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value=<span class="string">&quot;DelegateProxy&quot;</span>) el1.click() </span><br><span class="line">el2 = driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value=<span class="string">&quot;ImagePicker照片选择&quot;</span>) el2.click()</span><br></pre></td></tr></table></figure>

<p>修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">	server = <span class="string">&#x27;http://localhost:4723/wd/hub&#x27;</span></span><br><span class="line">	desired_caps = &#123;</span><br><span class="line">		<span class="string">&#x27;platformName&#x27;</span>: <span class="string">&quot;iOS&quot;</span>,</span><br><span class="line">		<span class="string">&#x27;appium:deviceName&#x27;</span>: <span class="string">&#x27;iPhoneq&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;appium:bundleId&#x27;</span>: <span class="string">&#x27;com.SwiftDemo&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;appium:udid&#x27;</span>: <span class="string">&#x27;4ce52917e9a0932f3c821e2418a03d2a993c5650&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;appium:platformVersion&#x27;</span>: <span class="string">&#x27;14.5&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;appium:xcodeSigningId&#x27;</span>: <span class="string">&#x27;iPhone Developer&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;appium:xcodeOrgId&#x27;</span>: <span class="string">&#x27;C28X7H9ZW6&#x27;</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	driver = webdriver.Remote(server, desired_caps)</span><br><span class="line">  <span class="comment">#获取元素时设置等待</span></span><br><span class="line">	wait = WebDriverWait(driver, <span class="number">30</span>)</span><br><span class="line">	ele1 = wait.until(EC.presence_of_element_located((By.ID, <span class="string">&#x27;DelegateProxy&#x27;</span>)))</span><br><span class="line">	ele1.click()</span><br><span class="line">	ele2 = wait.until(EC.presence_of_element_located((By.ID, <span class="string">&#x27;ImagePicker照片选择&#x27;</span>)))</span><br><span class="line">	ele2.click()</span><br></pre></td></tr></table></figure>

<h6 id="API"><a href="#API" class="headerlink" title="API"></a>API</h6><p>使用的Python库为 AppiumPythonClint <a href="https://github.com/appium/python-client">https://github.com/appium/python-client</a> 此库继承自 Selenium</p>
<ul>
<li>初始化</li>
</ul>
<p>代码参数上面的</p>
<p>如果要打开的app没有先安装到手机上，也可以直接指定app的包路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app &#x3D; os.path.abspath(&#39;&#x2F;Users&#x2F;xx&#x2F;xx&#x2F;build&#x2F;Debug-iphoneos&#x2F;xx.app&#39;)</span><br></pre></td></tr></table></figure>

<ul>
<li>查找元素</li>
</ul>
<p>可以使用 Selenium 中通用的查找方法来查找元素</p>
<p>iOS 平台，可以使用 UIAutomation 来进行元素选择</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">el = self.driver.find_element_by_ios_uiautomation(<span class="string">&#x27;.elements()[0]&#x27;</span>)</span><br><span class="line">el = self.driver.find_element_by_ios_uiautomation(<span class="string">&#x27;.elements()&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>还可以使用 iOS Predicates 来进行元素选择</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">el = self.driver.find_element_by_ios_predicate(<span class="string">&#x27;wdName=&quot;Buttons&quot;&#x27;</span>)</span><br><span class="line">el = self.driver.find_element_by_ios_predicate(<span class="string">&#x27;wdName=&quot;SearchBar&quot; AND isWDDivisible == 1&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>也可使用 iOS Class Chain 来选择</p>
<p>此方法只适用于 XCUIText 驱动</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">el = self.driver.find_element_by_ios_class_chain(<span class="string">&#x27;XCUIElementTypeWindow/XCUIElementTypeButton[3]&#x27;</span>)</span><br><span class="line">el = self.driver.find_element_by_ios_class_chain(<span class="string">&#x27;XCUIElementTypeWindow/XCUIElementTypeButton&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>点击</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tap(self, positions, duration=<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#positions 点击的位置组成的列表</span></span><br><span class="line"><span class="comment">#duration  点击持续时间</span></span><br><span class="line">tap([(<span class="number">100</span>,<span class="number">200</span>),(<span class="number">100</span>,<span class="number">60</span>)], <span class="number">500</span>) <span class="comment">#模拟点击屏幕的几个点</span></span><br></pre></td></tr></table></figure>

<p>对某个元素如按钮，可以直接调用 click() 模拟点击</p>
<ul>
<li>屏幕拖动</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scroll(self, origin_el, destination_el)</span><br><span class="line"><span class="comment">#实现从元素 origin_el 滚动至 destination_el</span></span><br><span class="line"><span class="comment">#origin_el 被操作元素</span></span><br><span class="line"><span class="comment">#destination_el 目标元素</span></span><br><span class="line"></span><br><span class="line">swipe(self, start_x, start_y, end_X, end_Y, duration=<span class="literal">None</span>) <span class="comment">#从A点滑动到B点</span></span><br><span class="line"></span><br><span class="line">flick(self, start_x, start_y, end_X, end_Y) <span class="comment">#从A点快速滑动到B点</span></span><br></pre></td></tr></table></figure>

<ul>
<li>拖拽</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">drag_and_drop(self, origin_el, destination_el)</span><br><span class="line"><span class="comment">#实现从元素 origin_el 拖拽至 destination_el</span></span><br></pre></td></tr></table></figure>

<ul>
<li>文本输入</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set_text()</span><br></pre></td></tr></table></figure>

<ul>
<li>动作键</li>
</ul>
<p>与 Selenium 中的ActionChains 类似， Appi 中的 TouchAction 可支持的方法有 tap()、press()、long_press()、release()、move_to()、wait()、cancel() 等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">el = self.driver.find_element_by_accessiblity_id</span><br><span class="line">action = TouchAction(self.driver)</span><br><span class="line">action.tap(el).perform</span><br></pre></td></tr></table></figure>

<p>选中一个元素，然后利用 TouchAction 实现点击操作</p>
<p>如果要拖动</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">els = self.driver.find_elements_by_class_name(<span class="string">&#x27;listView&#x27;</span>)</span><br><span class="line">a1 = TouchAction()</span><br><span class="line">a1.press(els[<span class="number">0</span>]).move_to(x=<span class="number">10</span>, y=<span class="number">0</span>).move_to(x=<span class="number">10</span>,y=<span class="number">-75</span>).move_to(x=<span class="number">10</span>,y=<span class="number">-100</span>).release()</span><br><span class="line">aw = TouchAction()</span><br><span class="line">a2.press(els[<span class="number">1</span>]).move_to(x=<span class="number">10</span>, y=<span class="number">0</span>).move_to(x=<span class="number">10</span>, y=<span class="number">-30</span>).move_to(x=<span class="number">10</span>, y=<span class="number">-600</span>).release()</span><br></pre></td></tr></table></figure>

<p>更多参考 <a href="https://testerhome.com/topics/3711">https://testerhome.com/topics/3711</a></p>
<h6 id="11-5-Appium-爬取朋友圈"><a href="#11-5-Appium-爬取朋友圈" class="headerlink" title="11.5 Appium 爬取朋友圈"></a>11.5 Appium 爬取朋友圈</h6><p>代码 <a href="https://github.com/Python3WebSpider/Moments">https://github.com/Python3WebSpider/Moments</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">FLICK_START_X = <span class="number">300</span></span><br><span class="line">FLICK_START_Y = <span class="number">300</span></span><br><span class="line">FLICK_DISTANCE = <span class="number">700</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#... 进入朋友圈页面 模拟上滑</span></span><br><span class="line"> self.driver.swipe(FLICK_START_X, FLICK_START_Y + FLICK_DISTANCE, FLICK_START_X, FLICK_START_Y)</span><br><span class="line"><span class="comment"># 遍历每条状态 获取数据保存</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 昵称</span></span><br><span class="line">        nickname = item.find_element_by_id(<span class="string">&#x27;com.tencent.mm:id/aig&#x27;</span>).get_attribute(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">        <span class="comment"># 正文</span></span><br><span class="line">        content = item.find_element_by_id(<span class="string">&#x27;com.tencent.mm:id/cwm&#x27;</span>).get_attribute(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line"><span class="comment">#...</span></span><br></pre></td></tr></table></figure>





<p>使用终端代替Xcode</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 解锁keychain，以便可以正常的签名应用，</span><br><span class="line">PASSWORD&#x3D;&quot;replace-with-your-password&quot;</span><br><span class="line">security unlock-keychain -p $PASSWORD ~&#x2F;Library&#x2F;Keychains&#x2F;login.keychain</span><br><span class="line"></span><br><span class="line"># 获取设备的UDID</span><br><span class="line">UDID&#x3D;$(idevice_id -l | head -n1)</span><br><span class="line"></span><br><span class="line"># 运行测试</span><br><span class="line">xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination &quot;id&#x3D;$UDID&quot; test</span><br></pre></td></tr></table></figure>



<h4 id="11-5-Appium-mitmdump爬取京东商品"><a href="#11-5-Appium-mitmdump爬取京东商品" class="headerlink" title="11.5 Appium+mitmdump爬取京东商品"></a>11.5 Appium+mitmdump爬取京东商品</h4><p>Charles 抓包分析数据</p>
<p>mitmdump 抓取解析数据保存</p>
<p>Appium驱动APP完成一系列动作</p>
<h4 id="报错问题"><a href="#报错问题" class="headerlink" title="报错问题"></a>报错问题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A new session could not be created. Details: Appium&#39;s IosDriver does not support xcode version 13.3</span><br><span class="line">Apple has deprecated UIAutomation. Use the &quot;XCUITest&quot; automationName capability instead</span><br></pre></td></tr></table></figure>

<p>添加参数 automationName=XCUITest</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>ReactiveObjC使用</title>
    <url>/2022/05/21/ReactiveObjC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="1-MVVM登录"><a href="#1-MVVM登录" class="headerlink" title="1.MVVM登录"></a>1.MVVM登录</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">需求：1.监听两个文本框的内容，有内容才允许按钮点击</span></span><br><span class="line"><span class="comment">     2.默认登录请求.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">用MVVM：实现，之前界面的所有业务逻辑</span></span><br><span class="line"><span class="comment">分析：1.之前界面的所有业务逻辑都交给控制器做处理</span></span><br><span class="line"><span class="comment">     2.在MVVM架构中把控制器的业务全部搬去VM模型，也就是每个控制器对应一个VM模型.</span></span><br><span class="line"><span class="comment">步骤：</span></span><br><span class="line"><span class="comment">    1.创建LoginViewModel类，处理登录界面业务逻辑.</span></span><br><span class="line"><span class="comment">    2.这个类里面应该保存着账号的信息，创建一个账号Account模型</span></span><br><span class="line"><span class="comment">    3.LoginViewModel应该保存着账号信息Account模型。</span></span><br><span class="line"><span class="comment">    4.需要时刻监听Account模型中的账号和密码的改变，怎么监听？</span></span><br><span class="line"><span class="comment">    5.在非RAC开发中，都是习惯赋值，在RAC开发中，需要改变开发思维，由赋值转变为绑定，可以在一开始初始化的时候，就给Account模型中的属性绑定，并不需要重写set方法。</span></span><br><span class="line"><span class="comment">    6.每次Account模型的值改变，就需要判断按钮能否点击，在VM模型中做处理，给外界提供一个能否点击按钮的信号.</span></span><br><span class="line"><span class="comment">    7.这个登录信号需要判断Account中账号和密码是否有值，用KVO监听这两个值的改变，把他们聚合成登录信号.</span></span><br><span class="line"><span class="comment">    8.监听按钮的点击，由VM处理，应该给VM声明一个RACCommand，专门处理登录业务逻辑.</span></span><br><span class="line"><span class="comment">    9.执行命令，把数据包装成信号传递出去</span></span><br><span class="line"><span class="comment">    10.监听命令中信号的数据传递</span></span><br><span class="line"><span class="comment">    11.监听命令的执行时刻</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">rac_textSignal只有用户输入才有效，如果只是直接赋值 </span><br><span class="line">eg:<span class="keyword">self</span>.inputView.phoneTextField.text = <span class="string">@&quot;xxxx&quot;</span>  <span class="keyword">self</span>.inputView.phoneTextField.rac_textSignal 就不会触发的</span><br><span class="line">RAC(<span class="keyword">self</span>.viewModel , mobilePhone) = </span><br><span class="line">[RACSignal merge: @[RACObserve(<span class="keyword">self</span>.inputView.phoneTextField,text),</span><br><span class="line">     								<span class="keyword">self</span>.inputView.phoneTextField.rac_textSignal]];</span><br></pre></td></tr></table></figure>

<h5 id="控制器代码"><a href="#控制器代码" class="headerlink" title="控制器代码"></a>控制器代码</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) LoginViewModel *loginViewModel;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UITextField</span> *accountField;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UITextField</span> *pwdField;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIButton</span> *loginBtn;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line">- (LoginViewModel *)loginViewModel &#123;</span><br><span class="line">    <span class="keyword">if</span> (_loginViewModel == <span class="literal">nil</span>) &#123;</span><br><span class="line">        _loginViewModel = [[LoginViewModel alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _loginViewModel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图模型绑定</span></span><br><span class="line">- (<span class="keyword">void</span>)bindModel &#123;</span><br><span class="line">    <span class="comment">// 给模型的属性绑定信号</span></span><br><span class="line">    <span class="comment">// 只要账号文本框一改变，就会给account赋值</span></span><br><span class="line">    RAC(<span class="keyword">self</span>.loginViewModel.account, account) = _accountField.rac_textSignal;</span><br><span class="line">    RAC(<span class="keyword">self</span>.loginViewModel.account, pwd) = _pwdField.rac_textSignal;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 绑定登录按钮</span></span><br><span class="line">    RAC(<span class="keyword">self</span>.loginBtn,enabled) = <span class="keyword">self</span>.loginViewModel.enableLoginSignal;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 监听登录按钮点击</span></span><br><span class="line">    [[_loginBtn rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">        <span class="comment">// 执行登录事件</span></span><br><span class="line">        [<span class="keyword">self</span>.loginViewModel.LoginCommand execute:<span class="literal">nil</span>];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="VM代码"><a href="#VM代码" class="headerlink" title="VM代码"></a>VM代码</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LoginViewModel</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) Account *account;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否允许登录的信号</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) RACSignal *enableLoginSignal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) RACCommand *LoginCommand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LoginViewModel</span></span></span><br><span class="line">- (Account *)account</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_account == <span class="literal">nil</span>) &#123;</span><br><span class="line">        _account = [[Account alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _account;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">instancetype</span>)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        [<span class="keyword">self</span> initialBind];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化绑定</span></span><br><span class="line">- (<span class="keyword">void</span>)initialBind &#123;</span><br><span class="line">    <span class="comment">// 监听账号的属性值改变，把他们聚合成一个信号。</span></span><br><span class="line">    _enableLoginSignal = [RACSignal combineLatest:@[RACObserve(<span class="keyword">self</span>.account, account),RACObserve(<span class="keyword">self</span>.account, pwd)] reduce:^<span class="keyword">id</span>(<span class="built_in">NSString</span> *account,<span class="built_in">NSString</span> *pwd)&#123;</span><br><span class="line">        <span class="keyword">return</span> @(account.length &amp;&amp; pwd.length);</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理登录业务逻辑</span></span><br><span class="line">    _LoginCommand = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(<span class="keyword">id</span> input) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;点击了登录&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">            <span class="comment">// 模仿网络延迟</span></span><br><span class="line">            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">0.5</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                [subscriber sendNext:<span class="string">@&quot;登录成功&quot;</span>];</span><br><span class="line">                <span class="comment">// 数据传送完毕，必须调用完成，否则命令永远处于执行状态</span></span><br><span class="line">                [subscriber sendCompleted];</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 监听登录产生的数据</span></span><br><span class="line">    [_LoginCommand.executionSignals.switchToLatest subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([x isEqualToString:<span class="string">@&quot;登录成功&quot;</span>]) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;登录成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 监听登录状态</span></span><br><span class="line">    [[_LoginCommand.executing skip:<span class="number">1</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([x isEqualToNumber:@(<span class="literal">YES</span>)]) &#123;</span><br><span class="line">            <span class="comment">// 正在登录ing... 用蒙版提示</span></span><br><span class="line">            [MBProgressHUD showMessage:<span class="string">@&quot;正在登录...&quot;</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// 登录成功 隐藏蒙版</span></span><br><span class="line">            [MBProgressHUD hideHUD];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-登录"><a href="#2-登录" class="headerlink" title="2.登录"></a>2.登录</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将信号输出应用到对象属性上</span></span><br><span class="line">RAC(<span class="keyword">self</span>.passwordTextField, backgroundColor) =</span><br><span class="line">[validPasswordSignal</span><br><span class="line">    map:^<span class="keyword">id</span>(<span class="built_in">NSNumber</span> *passwordValid)&#123;</span><br><span class="line">      <span class="keyword">return</span>[passwordValid boolValue] ? [<span class="built_in">UIColor</span> clearColor]:[<span class="built_in">UIColor</span> yellowColor];</span><br><span class="line">&#125;];</span><br><span class="line"> </span><br><span class="line">RAC(<span class="keyword">self</span>.usernameTextField, backgroundColor) =</span><br><span class="line">[validUsernameSignal</span><br><span class="line">    map:^<span class="keyword">id</span>(<span class="built_in">NSNumber</span> *passwordValid)&#123;</span><br><span class="line">     <span class="keyword">return</span>[passwordValid boolValue] ? [<span class="built_in">UIColor</span> clearColor]:[<span class="built_in">UIColor</span> yellowColor];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">//聚合信号决定登录按钮是否可用</span></span><br><span class="line">RACSignal *signUpActiveSignal =</span><br><span class="line">  [RACSignal combineLatest:@[validUsernameSignal, validPasswordSignal]</span><br><span class="line">                    reduce:^<span class="keyword">id</span>(<span class="built_in">NSNumber</span>*usernameValid, <span class="built_in">NSNumber</span> *passwordValid)&#123;</span><br><span class="line">                      <span class="keyword">return</span> @([usernameValid boolValue]&amp;&amp;[passwordValid boolValue]);</span><br><span class="line">                    &#125;];</span><br><span class="line">[signUpActiveSignal subscribeNext:^(<span class="built_in">NSNumber</span>*signupActive)&#123;</span><br><span class="line">   <span class="keyword">self</span>.signInButton.enabled =[signupActive boolValue];</span><br><span class="line"> &#125;];</span><br><span class="line"></span><br><span class="line">[[[[<span class="keyword">self</span>.signInButton</span><br><span class="line">   rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>]</span><br><span class="line">   doNext:^(<span class="keyword">id</span> x)&#123; <span class="comment">//附加操作</span></span><br><span class="line">     <span class="keyword">self</span>.signInButton.enabled =<span class="literal">NO</span>;</span><br><span class="line">     <span class="keyword">self</span>.signInFailureText.hidden =<span class="literal">YES</span>;</span><br><span class="line">   &#125;]</span><br><span class="line">   flattenMap:^<span class="keyword">id</span>(<span class="keyword">id</span> x)&#123;</span><br><span class="line">     <span class="keyword">return</span>[<span class="keyword">self</span> signInSignal];</span><br><span class="line">   &#125;]</span><br><span class="line">   subscribeNext:^(<span class="built_in">NSNumber</span>*signedIn)&#123;</span><br><span class="line">     <span class="keyword">self</span>.signInButton.enabled =<span class="literal">YES</span>;</span><br><span class="line">     <span class="built_in">BOOL</span> success =[signedIn boolValue];</span><br><span class="line">     <span class="keyword">self</span>.signInFailureText.hidden = success;</span><br><span class="line">     <span class="keyword">if</span>(success)&#123;</span><br><span class="line">       [<span class="keyword">self</span> performSegueWithIdentifier:<span class="string">@&quot;signInSuccess&quot;</span> sender:<span class="keyword">self</span>];</span><br><span class="line">     &#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">- (RACSignal *)signInSignal &#123;</span><br><span class="line"><span class="keyword">return</span> [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber)&#123;</span><br><span class="line">   [<span class="keyword">self</span>.signInService </span><br><span class="line">     signInWithUsername:<span class="keyword">self</span>.usernameTextField.text</span><br><span class="line">               password:<span class="keyword">self</span>.passwordTextField.text</span><br><span class="line">               complete:^(<span class="built_in">BOOL</span> success)&#123;</span><br><span class="line">                    [subscriber sendNext:@(success)];</span><br><span class="line">                    [subscriber sendCompleted];</span><br><span class="line">     &#125;];</span><br><span class="line">   	 <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">  &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-MVVM网络请求"><a href="#3-MVVM网络请求" class="headerlink" title="3.MVVM网络请求"></a>3.MVVM网络请求</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需求：请求豆瓣图书信息，url:https://api.douban.com/v2/book/search?q=基础</span></span><br><span class="line"><span class="comment">分析：请求一样，交给VM模型管理</span></span><br><span class="line"><span class="comment">步骤:</span></span><br><span class="line"><span class="comment">    1.控制器提供一个视图模型（requesViewModel），处理界面的业务逻辑</span></span><br><span class="line"><span class="comment">    2.VM提供一个命令，处理请求业务逻辑</span></span><br><span class="line"><span class="comment">    3.在创建命令的block中，会把请求包装成一个信号，等请求成功的时候，就会把数据传递出去。</span></span><br><span class="line"><span class="comment">    4.请求数据成功，应该把字典转换成模型，保存到视图模型中，控制器想用就直接从视图模型中获取。</span></span><br><span class="line"><span class="comment">    5.假设控制器想展示内容到tableView，直接让视图模型成为tableView的数据源，把所有的业务逻辑交给视图模型去做，这样控制器的代码就非常少了。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h5 id="控制器代码-1"><a href="#控制器代码-1" class="headerlink" title="控制器代码"></a>控制器代码</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UITableView</span> *tableView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RequestViewModel *requesViewModel;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line">- (RequestViewModel *)requesViewModel &#123;</span><br><span class="line">    <span class="keyword">if</span> (_requesViewModel == <span class="literal">nil</span>) &#123;</span><br><span class="line">        _requesViewModel = [[RequestViewModel alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _requesViewModel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">  [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建tableView</span></span><br><span class="line">  <span class="built_in">UITableView</span> *tableView = [[<span class="built_in">UITableView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds];</span><br><span class="line">  tableView.dataSource = <span class="keyword">self</span>.requesViewModel;</span><br><span class="line"></span><br><span class="line">  [<span class="keyword">self</span>.view addSubview:tableView];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行请求</span></span><br><span class="line">  RACSignal *requesSiganl = [<span class="keyword">self</span>.requesViewModel.reuqesCommand execute:<span class="literal">nil</span>];</span><br><span class="line">   <span class="comment">// 获取请求的数据</span></span><br><span class="line">    [requesSiganl subscribeNext:^(<span class="built_in">NSArray</span> *x) &#123;</span><br><span class="line">        <span class="keyword">self</span>.requesViewModel.models = x;</span><br><span class="line">        [<span class="keyword">self</span>.tableView reloadData]; </span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h5 id="VM代码-1"><a href="#VM代码-1" class="headerlink" title="VM代码"></a>VM代码</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RequestViewModel</span> : <span class="title">NSObject</span>&lt;<span class="title">UITableViewDataSource</span>&gt;</span></span><br><span class="line"><span class="comment">// 请求命令</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) RACCommand *reuqesCommand;</span><br><span class="line"><span class="comment">//模型数组</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) <span class="built_in">NSArray</span> *models;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RequestViewModel</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        [<span class="keyword">self</span> initialBind];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)initialBind &#123;</span><br><span class="line">    _reuqesCommand = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(<span class="keyword">id</span> input) &#123;</span><br><span class="line">        </span><br><span class="line">        RACSignal *requestSignal = [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">  </span><br><span class="line">            <span class="built_in">NSMutableDictionary</span> *parameters = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">            parameters[<span class="string">@&quot;q&quot;</span>] = <span class="string">@&quot;基础&quot;</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 发送请求</span></span><br><span class="line">            [[AFHTTPRequestOperationManager manager] GET:<span class="string">@&quot;https://api.douban.com/v2/book/search&quot;</span> parameters:parameters success:^(AFHTTPRequestOperation *operation, <span class="keyword">id</span> responseObject) &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,responseObject);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 请求成功调用</span></span><br><span class="line">                <span class="comment">// 把数据用信号传递出去</span></span><br><span class="line">                [subscriber sendNext:responseObject];</span><br><span class="line">                [subscriber sendCompleted];</span><br><span class="line"></span><br><span class="line">            &#125; failure:^(AFHTTPRequestOperation *operation, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">                <span class="comment">// 请求失败调用</span></span><br><span class="line">            &#125;];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">        &#125;];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在返回数据信号时，把数据中的字典映射成模型信号，传递出去</span></span><br><span class="line">        <span class="keyword">return</span> [requestSignal map:^<span class="keyword">id</span>(<span class="built_in">NSDictionary</span> *value) &#123;</span><br><span class="line">            <span class="built_in">NSMutableArray</span> *dictArr = value[<span class="string">@&quot;books&quot;</span>];</span><br><span class="line">            <span class="comment">// 字典转模型，遍历字典中的所有元素，全部映射成模型，并且生成数组</span></span><br><span class="line">            <span class="built_in">NSArray</span> *modelArr = [[dictArr.rac_sequence map:^<span class="keyword">id</span>(<span class="keyword">id</span> value) &#123;</span><br><span class="line">                <span class="keyword">return</span> [Book bookWithDict:value];</span><br><span class="line">            &#125;] array];</span><br><span class="line">            <span class="keyword">return</span> modelArr;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;];</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - UITableViewDataSource</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.models.count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSString</span> *ID = <span class="string">@&quot;cell&quot;</span>;</span><br><span class="line">    <span class="built_in">UITableViewCell</span> *cell = [tableView dequeueReusableCellWithIdentifier:ID];</span><br><span class="line">    <span class="keyword">if</span> (cell == <span class="literal">nil</span>) &#123;</span><br><span class="line">        cell = [[<span class="built_in">UITableViewCell</span> alloc] initWithStyle:<span class="built_in">UITableViewCellStyleSubtitle</span> reuseIdentifier:ID];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Book *book = <span class="keyword">self</span>.models[indexPath.row];</span><br><span class="line">    cell.detailTextLabel.text = book.subtitle;</span><br><span class="line">    cell.textLabel.text = book.title;</span><br><span class="line">    <span class="keyword">return</span> cell;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h4 id="4-Cell复用问题"><a href="#4-Cell复用问题" class="headerlink" title="4.Cell复用问题"></a>4.Cell复用问题</h4><p> Cell复用时清理数据绑定或者事件监听的问题</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SUGoodsCell</span></span></span><br><span class="line">- (<span class="keyword">void</span>) awakeFromNib &#123;</span><br><span class="line">    [<span class="keyword">super</span> awakeFromNib];</span><br><span class="line">    RAC(<span class="keyword">self</span>.usernameLabel,  text) = RACObserve(<span class="keyword">self</span>,  viewModel. username);</span><br><span class="line">    RAC(<span class="keyword">self</span>.userIdLabel,  text) = RACObserve(<span class="keyword">self</span>,  viewModel. userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 注意viewModel出现在RACObserve宏中逗号右边。 这些 cell 终将被重用，新的viewModels将会被赋值，如果我们不将 viewModel放在逗号右边，那就会监听viewModel属性的变化然后每次都要重新设置绑定；如果放在逗号右边， RACObserve将会为我们负责这些事儿， 因此我们只需要设定一次绑定并让Reactive Cocoa做剩余的部分</p>
<p> 当然，RAC给UITableViewCell提供了一个方法：rac_prepareForReuseSignal，它的作用是当Cell即将要被重用时，告诉Cell。想象Cell上有多个button，Cell在初始化时给每个button都addTarget:action:forControlEvents，被重用时需要先移除这些target，下面这段代码就可以很方便地解决这个问题</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[[[<span class="keyword">self</span>.cancelButton</span><br><span class="line">    rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>]</span><br><span class="line">    takeUntil:<span class="keyword">self</span>.rac_prepareForReuseSignal]</span><br><span class="line">    subscribeNext:^(<span class="built_in">UIButton</span> *x) &#123;</span><br><span class="line">    <span class="comment">// do other things</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h4 id="5-UITableView-MVVM-RAC"><a href="#5-UITableView-MVVM-RAC" class="headerlink" title="5.UITableView MVVM+RAC"></a>5.UITableView MVVM+RAC</h4><p><a href="https://www.jianshu.com/p/119559ac0961">https://www.jianshu.com/p/119559ac0961</a></p>
<p>cell单独配置对应的cellviewmodel rac网络请求回来后，把实体model用cellviewmodel进行组装，</p>
<p>主viewmodel请求数据 解析成 [model]</p>
<p>转换成 [cellViewModel]</p>
<p>!(cell加了一层viewmodel 项目变得复杂了)</p>
<p>cell中有个cellVM来管理cell中要显示的数据，cellVM来自于VC中datasource数组</p>
<p>网络请求完成后将字典-》模型 再通过模型初始化cellVM 再将cellVM放入datasource</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">RAC(_defaultLab, hidden) = [RACObserve(cellModel, idDefault) not];</span><br></pre></td></tr></table></figure>

<h4 id="6-网络下图图片完成按钮可点击"><a href="#6-网络下图图片完成按钮可点击" class="headerlink" title="6.网络下图图片完成按钮可点击"></a>6.网络下图图片完成按钮可点击</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)btnAvliableWhenImgOK&#123;</span><br><span class="line">    <span class="comment">//  观察img 是否修改，如果修改就会触发</span></span><br><span class="line">    RACSignal * imagAvaibaleSignal = [RACObserve(<span class="keyword">self</span>, <span class="keyword">self</span>.imageView.image) map:^<span class="keyword">id</span>(<span class="keyword">id</span> value) &#123;</span><br><span class="line">        <span class="keyword">return</span>  value ? @YES : @NO;</span><br><span class="line">    &#125;];    </span><br><span class="line">    [imagAvaibaleSignal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;xx =%@&quot;</span>,x);</span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="keyword">self</span>.shareBtn.rac_command = [[RACCommand alloc] initWithEnabled:imagAvaibaleSignal signalBlock:^RACSignal *(<span class="keyword">id</span> input) &#123;</span><br><span class="line">        <span class="comment">// do share logic</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;input =%@&quot;</span>,input);</span><br><span class="line">        <span class="keyword">return</span> [RACSignal empty];<span class="comment">// 必须返回一个信号，不能返回nil</span></span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="comment">// 一个command 需要execute 才能触发执行 但是和btn绑定的command不需要</span></span><br><span class="line">    <span class="comment">//  [self.shareBtn.rac_command execute:@&quot;100&quot;];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-token失效"><a href="#7-token失效" class="headerlink" title="7.token失效"></a>7.token失效</h4><p>token 失效后捕获 error，重新请求 token，concat 拼接继续上一次请求</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">RACSignal *requestSignal = [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">    <span class="comment">// suppose first time send request, access token is expired or invalid</span></span><br><span class="line">    <span class="comment">// and next time it is correct.</span></span><br><span class="line">    <span class="comment">// the block will be triggered twice.</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">BOOL</span> isFirstTime = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">NSString</span> *url = <span class="string">@&quot;http://httpbin.org/ip&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!isFirstTime) &#123;</span><br><span class="line">        url = <span class="string">@&quot;http://nonexists.com/error&quot;</span>;</span><br><span class="line">        isFirstTime = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;url:%@&quot;</span>, url);</span><br><span class="line">    [[AFHTTPRequestOperationManager manager] GET:url parameters:<span class="literal">nil</span> success:^(AFHTTPRequestOperation *operation, <span class="keyword">id</span> responseObject) &#123;</span><br><span class="line">        [subscriber sendNext:responseObject];</span><br><span class="line">        [subscriber sendCompleted];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;subscriber sendcompleted&quot;</span>);</span><br><span class="line">    &#125; failure:^(AFHTTPRequestOperation *operation, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;subscriber send error&quot;</span>);</span><br><span class="line">        [subscriber sendError:error];</span><br><span class="line"></span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.labelForName.text = <span class="string">@&quot;sending request...&quot;</span>;</span><br><span class="line"><span class="comment">//Subscribes to the returned signal when an error occurs.</span></span><br><span class="line"></span><br><span class="line">[[requestSignal catch:^RACSignal *(<span class="built_in">NSError</span> *error) &#123;<span class="comment">// requestSignal 发送error 触发 catch&#123;&#125;  catch 中返回的signal 发送next 在subcribeNext接收后，再追加一次requestSignal</span></span><br><span class="line">    <span class="keyword">self</span>.labelForName.text = <span class="string">@&quot;oops, invalid access token&quot;</span>;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;catch ....&quot;</span>);</span><br><span class="line">    <span class="comment">// 模拟获取token的请求，然后concat requestSignal，再次发送之前的请求</span></span><br><span class="line">    <span class="keyword">return</span> [[RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">        <span class="keyword">double</span> delayInSeconds = <span class="number">1.0</span>;</span><br><span class="line">        dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * <span class="built_in">NSEC_PER_SEC</span>));</span><br><span class="line">        dispatch_after(popTime, dispatch_get_main_queue(), ^(<span class="keyword">void</span>)&#123;</span><br><span class="line">            [subscriber sendNext:@YES];</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;subscriber sendNext...&quot;</span>);</span><br><span class="line">            [subscriber sendCompleted];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;]concat:requestSignal];</span><br><span class="line">&#125;] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;next =%@&quot;</span>,x);</span><br><span class="line">    <span class="keyword">if</span> ([x isKindOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.labelForName.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;result:%@&quot;</span>, x[<span class="string">@&quot;origin&quot;</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; completed:^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;completed&quot;</span>);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h4 id="8-Command-登录"><a href="#8-Command-登录" class="headerlink" title="8.Command 登录"></a>8.Command 登录</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.loginCommand = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(<span class="keyword">id</span> input) &#123;</span><br><span class="line">    <span class="comment">//模拟login signal</span></span><br><span class="line">    <span class="keyword">return</span> [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">        [subscriber sendNext:<span class="string">@&quot;1000&quot;</span>];</span><br><span class="line">        [subscriber sendCompleted];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// -executionSignals returns a signal that includes the signals returned from</span></span><br><span class="line"><span class="comment">// the above block, one for each time the command is executed.</span></span><br><span class="line">[<span class="keyword">self</span>.loginCommand.executionSignals subscribeNext:^(RACSignal *loginSignal) &#123;</span><br><span class="line">    <span class="comment">// Log a message whenever we log in successfully.</span></span><br><span class="line">    [loginSignal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;xxx  %@&quot;</span>,x);</span><br><span class="line">    &#125;];</span><br><span class="line">    [loginSignal subscribeCompleted:^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Logged in successfully!&quot;</span>);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Executes the login command when the button is pressed. 按钮点击触发</span></span><br><span class="line"><span class="keyword">self</span>.shareBtn.rac_command = <span class="keyword">self</span>.loginCommand;</span><br></pre></td></tr></table></figure>

<h4 id="9-搜索框搜索"><a href="#9-搜索框搜索" class="headerlink" title="9.搜索框搜索"></a>9.搜索框搜索</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[[[[[[<span class="keyword">self</span>.textField.rac_textSignal throttle:<span class="number">1</span>]distinctUntilChanged]ignore:<span class="string">@&quot;&quot;</span>] map:^<span class="keyword">id</span>(<span class="keyword">id</span> value) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;value =%@&quot;</span>,value);</span><br><span class="line">    <span class="keyword">return</span> [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">        <span class="comment">//  network request</span></span><br><span class="line">        [subscriber sendNext:value];</span><br><span class="line">        [subscriber sendCompleted];</span><br><span class="line">        <span class="keyword">return</span> [RACDisposable disposableWithBlock:^&#123;</span><br><span class="line">            <span class="comment">//  cancel request</span></span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;] switchToLatest] subscribeNext:^(<span class="keyword">id</span> x) &#123;<span class="comment">// 如果不switchToLastest 则返回一个signal</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;x = %@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h4 id="10-MVVM-RAC"><a href="#10-MVVM-RAC" class="headerlink" title="10.MVVM+RAC"></a>10.MVVM+RAC</h4><p>获取列表数据</p>
<p>在 MVVM 里，网络通信相关的操作都是由 viewModel 来处理的，所以在 ViewModel 里定义一个 RACCommand</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  获取数据Command</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) RACCommand *fetchProductCommand;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在ViewModel 的 init 方法对它进行初始化</span></span><br><span class="line">_fetchProductCommand = [[RACCommand alloc]initWithSignalBlock:^RACSignal *(<span class="keyword">id</span> input) &#123;</span><br><span class="line">     <span class="keyword">return</span> [[[APIClient sharedClient]</span><br><span class="line">              fetchProductWithPageIndex:@(<span class="number">1</span>)]</span><br><span class="line">              takeUntil:<span class="keyword">self</span>.cancelCommand.executionSignals];</span><br><span class="line"> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">//订阅Command，获取数据后赋值给 items</span></span><br><span class="line">@weakify(<span class="keyword">self</span>);</span><br><span class="line">[[_fetchProductCommand.executionSignals switchToLatest] subscribeNext:^(ResponseData *response) &#123;</span><br><span class="line">    @strongify(<span class="keyword">self</span>);</span><br><span class="line">    <span class="keyword">if</span> (!response.success) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.errors sendNext:response.error];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.items = [ProductListModel objectArrayWithKeyValuesArray:response.data];</span><br><span class="line">        <span class="keyword">self</span>.page = response.page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>在 ViewController 里，订阅 ViewModel 的 items，有变化时 reload tableview</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[RACObserve(<span class="keyword">self</span>.viewModel, items) subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">     @strongify(<span class="keyword">self</span>);</span><br><span class="line">     [<span class="keyword">self</span>.table reloadData];</span><br><span class="line"> &#125;];</span><br></pre></td></tr></table></figure>

<p>tableView 的 dataSource</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - UITableViewDataSource</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSInteger</span>)numberOfSectionsInTableView:(<span class="built_in">UITableView</span> *)tableView &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.viewModel.items.count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    ProductListCell *cell = [tableView dequeueReusableCellWithIdentifier:<span class="string">@&quot;ProductListCell&quot;</span> forIndexPath:indexPath];</span><br><span class="line">    cell.viewModel = [<span class="keyword">self</span>.viewModel itemViewModelForIndex:indexPath.row];</span><br><span class="line">    <span class="keyword">return</span> cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UITableViewCell 中</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithCoder:aDecoder];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        @weakify(<span class="keyword">self</span>);</span><br><span class="line">        [RACObserve(<span class="keyword">self</span>, viewModel) subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">            @strongify(<span class="keyword">self</span>);</span><br><span class="line">            <span class="keyword">self</span>.productNameLabel.text = <span class="keyword">self</span>.viewModel.ProductName;</span><br><span class="line">            <span class="keyword">self</span>.bankNameLabel.text = <span class="keyword">self</span>.viewModel.ProductBank;</span><br><span class="line">            <span class="keyword">self</span>.profitLabel.text = <span class="keyword">self</span>.viewModel.ProductProfit;</span><br><span class="line">            <span class="keyword">self</span>.saleStatusLabel.text = <span class="keyword">self</span>.viewModel.SaleStatusCn;</span><br><span class="line">            <span class="keyword">self</span>.productTermLabel.text = <span class="keyword">self</span>.viewModel.ProductTerm;</span><br><span class="line">            <span class="keyword">self</span>.productAmtLabel.text = <span class="keyword">self</span>.viewModel.ProductAmt;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="11-Error"><a href="#11-Error" class="headerlink" title="11.Error"></a>11.Error</h4><p>BaseViewModel</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BaseViewModel</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) RACSubject *errors;</span><br></pre></td></tr></table></figure>

<p>ViewModel 对 RACCommand 的 errors 进行合并</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[[RACSignal merge:@[_fetchProductCommand.errors, <span class="keyword">self</span>.fetchMoreProductCommand.errors]] subscribe:<span class="keyword">self</span>.errors];</span><br></pre></td></tr></table></figure>

<p>RACCommannd 判断是否出现 error</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">@weakify(<span class="keyword">self</span>);</span><br><span class="line">[[_fetchProductCommand.executionSignals switchToLatest] subscribeNext:^(ResponseData *response) &#123;</span><br><span class="line">   @strongify(<span class="keyword">self</span>);</span><br><span class="line">   <span class="keyword">if</span> (!response.success) &#123;</span><br><span class="line">       [<span class="keyword">self</span>.errors sendNext:response.error];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">self</span>.items = [ProductListModel objectArrayWithKeyValuesArray:response.data];</span><br><span class="line">       <span class="keyword">self</span>.page = response.page;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>ViewController 中对 errors 进行订阅 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[_viewModel.errors subscribeNext:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">   ResponseData *data = [ResponseData objectWithKeyValues:error.userInfo];</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@&quot;something error:%@&quot;</span>, data.keyValues);</span><br><span class="line">   <span class="comment">//<span class="doctag">TODO:</span> 这里可以选择一种合适的方式将错误信息展示出来</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h4 id="12-http-请求-cancel"><a href="#12-http-请求-cancel" class="headerlink" title="12.http 请求 cancel"></a>12.http 请求 cancel</h4><p>ViewModel 中定义一个表示取消HTTP请求的 RACCommand</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) RACCommand *cancelCommand;</span><br><span class="line"></span><br><span class="line"> _fetchProductCommand = [[RACCommand alloc]initWithSignalBlock:^RACSignal *(<span class="keyword">id</span> input) &#123;</span><br><span class="line">   <span class="keyword">return</span> [[[APIClient sharedClient]</span><br><span class="line">            fetchProductWithPageIndex:@(<span class="number">1</span>)]</span><br><span class="line">            takeUntil:<span class="keyword">self</span>.cancelCommand.executionSignals];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

































<p><a href="https://www.cnblogs.com/manji/p/4846591.html">一次 MVVM+RAC实践</a></p>
<p><a href="https://www.jianshu.com/p/e10e5ca413b7">ReactiveCocoa进阶篇</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>逆向-Theos</title>
    <url>/2022/07/04/%E9%80%86%E5%90%91-Theos/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/ludashi/p/5714095.html">逆向工程之Theos</a></p>
<p><a href="https://theos.dev/docs/logos">Tweak Logos</a></p>
<p>Theos 一个跨平台的越狱开发工具包</p>
<p>Theos 相当于对 Cydia Substrate 的封装，因而能实现对 Object-C 运行时的 Hook，也能实现对 C 语言函数的 Hook</p>
<h4 id="Theos-安装"><a href="#Theos-安装" class="headerlink" title="Theos 安装"></a>Theos 安装</h4><ul>
<li>安装 ldid</li>
</ul>
<p>Theos 开发中，iOS 文件的签名由 ldid 工具来完成，ldid 取代了 Xcode 自带的 codesign</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew instll ldid</span><br></pre></td></tr></table></figure>

<p>或者下载 <a href="http://joedj.net/ldid">http://joedj.net/ldid</a> 放到 /opt/theos/bin 目录下，添加执行权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod 777 &#x2F;opt&#x2F;theos&#x2F;bin&#x2F;ldid</span><br></pre></td></tr></table></figure>

<ul>
<li>安装 xz、lzma（没装）</li>
</ul>
<p>两种压缩模块，为了后面 <code>make package</code> 能顺利通过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew install xz</span><br><span class="line">$ sudo cpan IO::Compress::Lzma</span><br></pre></td></tr></table></figure>

<ul>
<li>安装 dpkg，dpkg-deb</li>
</ul>
<p>可以使用 dpkg 制作 deb，Theos开发的插件都会以deb的格式进行发布</p>
<p>有了 dpkg-deb，Theos才能正确把工程打包成 deb 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install dpkg</span><br><span class="line">brew install dpkg-deb</span><br></pre></td></tr></table></figure>

<ul>
<li>添加环境变量</li>
</ul>
<p>.bash_profile</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export THEOS&#x3D;&#x2F;opt&#x2F;theos</span><br><span class="line">export PATH&#x3D;$PATH:$THEOS&#x2F;bin</span><br></pre></td></tr></table></figure>

<ul>
<li>安装 theos</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo git clone --recursive https:&#x2F;&#x2F;github.com&#x2F;theos&#x2F;theos.git $THEOS</span><br></pre></td></tr></table></figure>

<ul>
<li>设置 $THEOS 用户组权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo chown -R $(id -u):$(id -g) $THEOS</span><br></pre></td></tr></table></figure>

<p>最后 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ source ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>

<h4 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$THEOS&#x2F;bin&#x2F;nic.pl</span><br><span class="line">NIC 2.0 - New Instance Creator</span><br><span class="line">------------------------------</span><br><span class="line">  [1.] iphone&#x2F;activator_event</span><br><span class="line">  [2.] iphone&#x2F;application_modern</span><br><span class="line">  [3.] iphone&#x2F;application_swift</span><br><span class="line">  [4.] iphone&#x2F;flipswitch_switch</span><br><span class="line">  [5.] iphone&#x2F;framework</span><br><span class="line">  [6.] iphone&#x2F;library</span><br><span class="line">  [7.] iphone&#x2F;preference_bundle_modern</span><br><span class="line">  [8.] iphone&#x2F;tool</span><br><span class="line">  [9.] iphone&#x2F;tool_swift</span><br><span class="line">  [10.] iphone&#x2F;tweak</span><br><span class="line">  [11.] iphone&#x2F;xpc_service</span><br><span class="line">Choose a Template (required):</span><br></pre></td></tr></table></figure>

<p>tweak：插件模板</p>
<p>tool：命令行工具模板</p>
<p>application：系统级应用模板</p>
<p>xpc_service：XPC 服务模板</p>
<h4 id="Tweak插件开发"><a href="#Tweak插件开发" class="headerlink" title="Tweak插件开发"></a>Tweak插件开发</h4><p>iOS 越狱平台下的插件称为 tweak。实质就是 iOS 平台的动态库 dylib，利用 Cydia Substrate 提供的组件进行加载，完成特定功能</p>
<p>终端输入 nic.pl，工程模板选择 [10.] iphone/tweak，创建一个 tweak 工程</p>
<ul>
<li>配置参数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Project Name (required): 项目名称</span><br><span class="line">Package Name [com.yourcompany.langjitweak]: 包名</span><br><span class="line">Author&#x2F;Maintainer Name 作者名字，默认当前登录用户名</span><br><span class="line">[iphone&#x2F;tweak] MobileSubstrate Bundle filter: 注入应用的BundleID</span><br><span class="line">[iphone&#x2F;tweak] List of applications to terminate upon installation (space-separated, &#39;-&#39; for none) [SpringBoard]: 安装成功后需结束的进程，默认SpringBoard，不需要结束任务进程输入 -</span><br></pre></td></tr></table></figure>

<p>为了方便修改，可以在生成的文件夹新建 Xcode 项目，将文件拖入 Xcode 项目编辑</p>
<h5 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h5><p>![图片 1](逆向-Theos/图片 1.png)</p>
<ul>
<li>Makefile</li>
</ul>
<p>指定工程用到源文件、框架、库等信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#引入Makefile的公共文件</span><br><span class="line">include $(THEOS)&#x2F;makefiles&#x2F;common.mk  </span><br><span class="line">#指定处理器架构 多个架构空格分开 最新的A12处理器设备还需要arm64e</span><br><span class="line">ARCHS&#x3D;arm64 arm64e</span><br><span class="line"></span><br><span class="line">#指定目标规范 A12处理器设备指定SDK版本必须大于10.1</span><br><span class="line">#指定目标平台为iOS，编译器为clang，使用10.2版本SDK编译该tweak，编译后的程序只能在8.0及以上系统运行</span><br><span class="line"></span><br><span class="line">TARGET &#x3D; iphone:clang:10.2:8.0</span><br><span class="line">#可以省略编译类型 SDK设置为latest</span><br><span class="line">TARGET &#x3D; iphone:latest:8.0</span><br><span class="line"></span><br><span class="line">#指定的项目名称</span><br><span class="line">TWEAK_NAME &#x3D; iThunderHelper		</span><br><span class="line">iThunderHelper_CFLAGS &#x3D; -fobjc-arc</span><br><span class="line"></span><br><span class="line">#tweak包含的源文件(头文件除外)多个文件空格分开</span><br><span class="line">#如 iThunderHelper_FILES &#x3D; Tweak.xm ANYMethodLog.m PYG.m</span><br><span class="line">iThunderHelper_FILES &#x3D; Tweak.xm				</span><br><span class="line"></span><br><span class="line">#根据不同工程类型指定.mk文件，tweak工程是tweak.mk 还可以填入 application.mk及tool.mk</span><br><span class="line">include $(THEOS_MAKE_PATH)&#x2F;tweak.mk</span><br><span class="line"></span><br><span class="line">#这里做了端口映射 需要iproxy 2222 22</span><br><span class="line">THEOS_DEVICE_IP &#x3D; localhost</span><br><span class="line">THEOS_DEVICE_PORT &#x3D; 2222  </span><br><span class="line">或者</span><br><span class="line">THEOS_DEVICE_IP &#x3D; IP地址 </span><br></pre></td></tr></table></figure>

<ul>
<li><p>Tweak.xm</p>
<p>生成的默认源文件，后缀 .xm 表示支持 Logos 和 C/C++语法，如果后缀为 .x ，说明源文件支持 Logos和C语法</p>
</li>
<li><p>control</p>
</li>
</ul>
<p>deb 包的必备文件，记录 deb 包管理系统所需的基本信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Package: com.ithunderhelper #deb包的唯一ID</span><br><span class="line">Name: ithunderhelper #描述tweak名字</span><br><span class="line"></span><br><span class="line">#deb包的依赖项，多个依赖逗号隔开，指定版本号则在后面用括号标注</span><br><span class="line"># Depends: mobilesubstrate, com.rpetrich.rocketbootstrap(&gt;&#x3D;1.0.2)</span><br><span class="line">Depends: mobilesubstrate </span><br><span class="line"></span><br><span class="line">Version: 0.0.1	#deb包当前版本</span><br><span class="line">Architecture: iphoneos-arm #描述deb包的架构，不可修改</span><br><span class="line">Description: An awesome MobileSubstrate tweak!  #对tweak的简要描述</span><br><span class="line">Maintainer: cao #deb包维护人员</span><br><span class="line">Author: cao  #描述tweak的开发者</span><br><span class="line">Section: Tweaks #deb包所属类别</span><br></pre></td></tr></table></figure>

<ul>
<li><p>iThunderHelper.plist </p>
<p>tweak的作用对象</p>
</li>
</ul>
<h5 id="编译打包安装"><a href="#编译打包安装" class="headerlink" title="编译打包安装"></a>编译打包安装</h5><ul>
<li>编译</li>
</ul>
<p>编译 make，从日志看到 Theos 完成了预处理、编译、链接、签名一系列动作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ make</span><br></pre></td></tr></table></figure>

<p>编译生成 dylib 文件保存在 .theos/obj/debug/ 文件夹下</p>
<p>arm64和armv7分别有相应架构的 dylib 文件，外层的dylib 则是所有架构合并后的</p>
<ul>
<li>指定编译模式</li>
</ul>
<p>tweak 默认编译模式是 debug，如果想改为 release，只需要指定 DEBUG=0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ DEBUG&#x3D;0 make</span><br></pre></td></tr></table></figure>

<ul>
<li>打包</li>
</ul>
<p>make package 会先执行 make 命令，然后执行 dpkg-deb 命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ make package</span><br></pre></td></tr></table></figure>

<p>在 ./packages 目录生成一个 deb 包</p>
<ul>
<li>安装</li>
</ul>
<p>图形安装：</p>
<p>可以把 deb 通过爱思助手或者 scp 拷贝到设备指定目录，iFile 找到 deb 包，进入文件详情，点击安装</p>
<p>命令行安装：</p>
<p>scp 拷贝到设备，再利用 dpkg 命令安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ dpkg -i xxx.deb</span><br></pre></td></tr></table></figure>

<p>通过Theos安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ make package install</span><br></pre></td></tr></table></figure>

<h4 id="Logos"><a href="#Logos" class="headerlink" title="Logos"></a>Logos</h4><ul>
<li>%hook</li>
</ul>
<p>指定需要hook的Class 以%end结尾</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">%hook MainViewController</span><br><span class="line"><span class="comment">//hook的方法</span></span><br><span class="line">%end</span><br></pre></td></tr></table></figure>

<ul>
<li>%log</li>
</ul>
<p>打印类名、函数、参数等信息</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">%log((<span class="built_in">NSString</span> *)<span class="string">@&quot;tutuTest&quot;</span>, (<span class="built_in">NSString</span> *)<span class="string">@&quot;Debug&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>%orig</li>
</ul>
<p>执行原始代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以有返回值 </span></span><br><span class="line"><span class="keyword">id</span> value = %orig;</span><br><span class="line"><span class="comment">//调用原来方法 </span></span><br><span class="line"><span class="keyword">id</span> value = %orig(arg1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//%orig还可以更改原始函数的参数  %orig(参数)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将arg的参数修改为change arg2</span></span><br><span class="line">%orig(<span class="string">@&quot;change arg2&quot;</span>, arg2); </span><br></pre></td></tr></table></figure>

<ul>
<li>%group  </li>
</ul>
<p>将hook分组，便于代码管理及按条件初始化，以%end结尾</p>
<p>一个 %group 可以包含多个%hook，不属于某个自定义group的%hook会被归类到%group _ungrouped中</p>
<p>如果定义了group 那么一定要写%init(group)</p>
<p>%init初始化某个%group 必须在%hook或%ctor内调用</p>
<p>调用了%init，%group才能起作用</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">%group group1</span><br><span class="line">%hook ViewController</span><br><span class="line">-(<span class="keyword">void</span>)loginBtnCloick:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;111&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">%end</span><br><span class="line">%end</span><br><span class="line"></span><br><span class="line">%group group2</span><br><span class="line">%hook ViewController</span><br><span class="line">-(<span class="keyword">void</span>)loginBtnCloick:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;222&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">%end</span><br><span class="line">%end</span><br></pre></td></tr></table></figure>

<p>group需要初始化</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">%ctor &#123;</span><br><span class="line"> <span class="built_in">NSString</span> *v = [[<span class="built_in">UIDevice</span> currentDevice] systemVersion];</span><br><span class="line"> <span class="keyword">if</span>(v.doubleValue &gt; <span class="number">11.0</span>) &#123;</span><br><span class="line">    %init(group1)；</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    %init(group2)；</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%hook TargetClass</span><br><span class="line">- (<span class="keyword">void</span>)targetMethod &#123;</span><br><span class="line">  <span class="built_in">NSString</span> *v = [[<span class="built_in">UIDevice</span> currentDevice] systemVersion];</span><br><span class="line"> <span class="keyword">if</span>(v.doubleValue &gt; <span class="number">11.0</span>) &#123;</span><br><span class="line">    %init(group1)；</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    %init(group2)；</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line">%end</span><br></pre></td></tr></table></figure>

<ul>
<li>%ctor</li>
</ul>
<p>完成初始化工作 没定义会隐式生成 构造函数</p>
<p>一般可以用来初始化%group 不需要%end结尾</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">%hook SpringBoard</span><br><span class="line"><span class="comment">//hook方法</span></span><br><span class="line">%end</span><br><span class="line">%ctor &#123;</span><br><span class="line">    %init(_ungrouped); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>%dtor</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">%dtor &#123;</span><br><span class="line">    <span class="comment">//析构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>%new</li>
</ul>
<p>给现有class添加新函数</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">%hook XLMemberManager</span><br><span class="line"><span class="comment">//hook方法</span></span><br><span class="line"><span class="comment">//%new 不用%end  写在%hook类内部</span></span><br><span class="line">%new</span><br><span class="line">- (<span class="keyword">void</span>)newmethod &#123;</span><br><span class="line">&#125;</span><br><span class="line">%end</span><br></pre></td></tr></table></figure>

<p>添加了新方法，使用 [self newmethod] 调用会报错。</p>
<p>只需要加个定义，骗过编译器</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">XLMemberManager</span></span></span><br><span class="line">- (<span class="keyword">void</span>)newmethod;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<ul>
<li>%c</li>
</ul>
<p>动态获取一个类的定义 相当于objc_getClass 或 NSClassFroming</p>
<p>获取某个类 %c(ViewController)</p>
<p>然后可以调用类方法</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">XLMemberConfigure</span></span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">...</span><br><span class="line">XLMemberConfigure *configure = [[%c(XLMemberConfigure) alloc] init];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;memberConfigure=%@&quot;</span>, configure);</span><br></pre></td></tr></table></figure>

<ul>
<li>%property</li>
<li>%subclass</li>
</ul>
<p>子类块</p>
<p>父类中不存在的方法用%new说明符 要实例化新类的一个对象用%c运算符</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">%subclass MyObject : <span class="built_in">NSObject</span></span><br><span class="line">- (<span class="keyword">id</span>)init &#123;</span><br><span class="line"><span class="keyword">self</span> = %orig;</span><br><span class="line">[<span class="keyword">self</span> setSomeValue:<span class="string">@&quot;value&quot;</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//the following two new methods act as `@property (nonatomic, retain) id someValue;`</span></span><br><span class="line">%new</span><br><span class="line">- (<span class="keyword">id</span>)someValue &#123;</span><br><span class="line"><span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(someValue));</span><br><span class="line">&#125;</span><br><span class="line">%new</span><br><span class="line">- (<span class="keyword">void</span>)setSomeValue:(<span class="keyword">id</span>)value &#123;</span><br><span class="line">objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(someValue), value, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line">%end</span><br></pre></td></tr></table></figure>

<ul>
<li>%hookf</li>
</ul>
<p>给指定函数生成Hook，是对 MSHookFunction() 函数的包装格式</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">%hookf(rtype, symbolName, args...)&#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>symbolName 可以传入函数地址或者函数符号</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//传入地址</span></span><br><span class="line">FILE *fopen(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">const</span> <span class="keyword">char</span> *mode);</span><br><span class="line">%hookf(File *, fopen, <span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">const</span> <span class="keyword">char</span> *mode) &#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;fopen hooked&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(path[<span class="number">0</span>] !=<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> %orig;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果将 symbolName 作为字符串传入，那么函数将被动态查找</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">FILE *fopen(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">const</span> <span class="keyword">char</span> *mode);</span><br><span class="line">%hookf(File *, <span class="string">&quot;_open&quot;</span>, <span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">const</span> <span class="keyword">char</span> *mode) &#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;fopen hooked&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(path[<span class="number">0</span>] !=<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> %orig;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Logos-Tip"><a href="#Logos-Tip" class="headerlink" title="Logos Tip"></a>Logos Tip</h5><ul>
<li>获取属性，调用属性方法</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIView</span> *_anyView = MSHookIvar&lt;<span class="built_in">UIView</span>*&gt;(<span class="keyword">self</span>,<span class="string">&quot;_view&quot;</span>);</span><br><span class="line">_anyView.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br></pre></td></tr></table></figure>

<ul>
<li>打印参数Class</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)showLuckyMoneyWithPickingStatus:(<span class="built_in">NSObject</span> *)arg1 withController:(<span class="keyword">id</span>)arg2 delegate:(<span class="keyword">id</span>)arg3</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@&quot;status = %@, className = %@&quot;</span>,arg1,<span class="built_in">NSStringFromClass</span>(arg1.class));</span><br><span class="line">	%log; %orig;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法声明</li>
</ul>
<p>需要在注入的类里面调用某个方法 添加方法的声明就可以了 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">P1HomeNearbyViewController</span> : <span class="title">UIViewController</span></span></span><br><span class="line">- (<span class="keyword">void</span>)takeAction:(<span class="keyword">id</span>)arg1 withEvent:(<span class="keyword">id</span>)arg2;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>也可以不用写父类 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">P1HomeNearbyViewController</span></span></span><br><span class="line">- (<span class="keyword">void</span>)takeAction:(<span class="keyword">id</span>)arg1 withEvent:(<span class="keyword">id</span>)arg2;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>再 hook P1HomeNearbyViewController的 takeAction 方法里就可以直接用self 否则会self报错</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)takeAction:(<span class="keyword">id</span>)arg1 withEvent:(<span class="keyword">id</span>)arg2 &#123;</span><br><span class="line">  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1.0</span> * <span class="built_in">NSEC_PER_SEC</span>)),      dispatch_get_main_queue(), ^&#123;</span><br><span class="line">      [<span class="keyword">self</span> takeAction:arg1 withEvent:arg2];</span><br><span class="line">  &#125;);</span><br><span class="line">  %log;</span><br><span class="line">  %or&#125;ig;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改返回值</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//能否预览 直接1可以预览</span></span><br><span class="line">- (_Bool )canPreview &#123;</span><br><span class="line">  %log;</span><br><span class="line">  _Bool r = %orig;</span><br><span class="line">  r = <span class="number">1</span>;<span class="comment">//返回1</span></span><br><span class="line">  HBLogDebug(<span class="string">@&quot; = %d&quot;</span>, r);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注释方法</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)timerAction:(<span class="keyword">id</span>)arg1 &#123;</span><br><span class="line">  %log;</span><br><span class="line">  <span class="comment">//%orig;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>阻止alertcontroller弹窗</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加方法声明 重写presentViewController方法 阻止alertController显示</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LivePlayBackVC</span> : <span class="title">UIViewController</span></span></span><br><span class="line">- (<span class="keyword">void</span>)presentViewController:(<span class="built_in">UIViewController</span> *)present animated:(<span class="built_in">BOOL</span>)animated completion:(<span class="keyword">void</span> (^ _Nullable)(<span class="keyword">void</span>))completion;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">  </span><br><span class="line">%hook LivePlayBackVC</span><br><span class="line">- (<span class="keyword">void</span>)presentViewController:(<span class="built_in">UIViewController</span> *)present animated:(<span class="built_in">BOOL</span>)animated completion:(<span class="keyword">void</span> (^ _Nullable)(<span class="keyword">void</span>))completion&#123;</span><br><span class="line">    HBLogDebug(<span class="string">@&quot;presentViewController&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">%end</span><br></pre></td></tr></table></figure>

<ul>
<li>控制器跳转 </li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">TBBuyStandardViewController *vc = [[%c(TBBuyStandardViewController) alloc] initWithNavigatorURL:arg1 query: arg2];</span><br></pre></td></tr></table></figure>

<h4 id="命令行工具开发"><a href="#命令行工具开发" class="headerlink" title="命令行工具开发"></a>命令行工具开发</h4><p>Theos 提供的 tool 模板用来编写命令行工具，Cydia Substrate 自带的 cynject 工具就是例子</p>
<p>编写小工具，根据输入进程名查找 PID （等同于ps -ax | grep xxx）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$THEOS&#x2F;bin&#x2F;nic.pl</span><br><span class="line">NIC 2.0 - New Instance Creator</span><br><span class="line">------------------------------</span><br><span class="line">[8.] iphone&#x2F;tool</span><br><span class="line">Choose a Template (required): 8</span><br><span class="line">Project Name (required): FindProcess</span><br><span class="line">Package Name [com.yourcompany.findprocess]:com.FindProcess</span><br><span class="line">Author&#x2F;Maintainer Name [midland]:</span><br><span class="line">Instantiating iphone&#x2F;tool in findprocess&#x2F;...</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure>

<p>创建 tool 工程，接下来步骤和 tweak 类似，打开 main.mm 修改代码…</p>
<p>由于使用了纯 C 代码，输入 make 命令直接编译会出现错误，需将 main.mm 修改为 main.c</p>
<p>同时修改 Makefile 中的 findprocess_FILES 一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">findprocess_FILES &#x3D; main.c</span><br></pre></td></tr></table></figure>

<p>DEBUG=0 make package install 将命令行工具安装到设备</p>
<ul>
<li>兼容 iOS11-iOS13</li>
</ul>
<p>编译好的包在 iOS11-iOS13 可能出现 <code>killed:9</code> 错误</p>
<p>新建 ent.xml</p>
<img src="逆向-Theos/图片 2.png" alt="图片 2" style="zoom:80%;" />

<p>修改 Makefile，配置 CODESIGN_FLAGS 参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">findprocess_CODESIGN_FLAGS &#x3D; -S.&#x2F;ent.xml</span><br></pre></td></tr></table></figure>

<p>修改安装路径（不是必须的）命令行工具默认安装到 /usr/bin 目录，该路径可以修改配置 INSTALL_PATH 参数即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">findprocess_INSERT_PATH&#x3D; &#x2F;bin</span><br></pre></td></tr></table></figure>

<p>重新编译安装后 Cydia 里路径被改为 /bin 了</p>
<img src="逆向-Theos/图片 3.png" alt="图片 3" style="zoom:50%;" />

<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~root# findprocess WeChat</span><br></pre></td></tr></table></figure>

<h4 id="系统应用开发"><a href="#系统应用开发" class="headerlink" title="系统应用开发"></a>系统应用开发</h4><p>Theos 提供的 application 模板用来开发系统级应用比如 Filza，权限更高无法通过常规方式删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$THEOS&#x2F;bin&#x2F;nic.pl</span><br><span class="line">NIC 2.0 - New Instance Creator</span><br><span class="line">------------------------------</span><br><span class="line">[2.] iphone&#x2F;application_modern</span><br><span class="line">Choose a Template (required): 2</span><br><span class="line">Project Name (required): bookApp</span><br><span class="line">Package Name [com.yourcompany.bookapp]: com.bookApp</span><br><span class="line">Author&#x2F;Maintainer Name [midland]:</span><br><span class="line">[iphone&#x2F;application_modern] Class name prefix (two or more characters) [XX]:CD</span><br></pre></td></tr></table></figure>

<p>生成文件</p>
<img src="逆向-Theos/图片 4.png" alt="图片 4" style="zoom:90%;" />

<p>修改文件 CDRootViewController.m 内容</p>
<img src="逆向-Theos/图片 5.png" alt="图片 5" style="zoom:80%;" />

<p>代码在视图中间添加 Test 按钮，单机按钮，获取进程权限，然后打开keychain数据库，由于使用了 sqlite3，所以需要修改 Makefile，增加 xxx_LDFLAGS参数将其链接进来</p>
<img src="逆向-Theos/图片 6.png" alt="图片 6" style="zoom:70%;" />

<p>after-install 是 deb 文件安装后执行的命令。第二条命令是结束进程</p>
<p>DEBUG=0 make package install 编译安装到设备</p>
<p>运行日志 getuid 和 geteuid 都返回了501（mobile权限）代码执行失败</p>
<ul>
<li>以root权限运行（iOS11以下）</li>
</ul>
<p>Linux下可以使用 setuid(0)及setgid(0)提升权限，打开 main.m 修改如下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[]) &#123;</span><br><span class="line">	<span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        setuid(<span class="number">0</span>);</span><br><span class="line">        setgid(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="literal">nil</span>, <span class="built_in">NSStringFromClass</span>(CDAppDelegate.class));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译安装后闪退了，这是因为backboardd以mobile权限运行不能加载要求root权限的程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~root# ps aux | grep backboardd</span><br><span class="line">mobile 2438 0.6 1.0 .....</span><br></pre></td></tr></table></figure>

<p>换句话说，崩溃是好事，说明提升成功了</p>
<p>。。。</p>
<ul>
<li>以root权限运行（iOS11、iOS12）</li>
<li>以root权限运行（iOS13）</li>
</ul>
<h4 id="守护进程开发"><a href="#守护进程开发" class="headerlink" title="守护进程开发"></a>守护进程开发</h4><p>守护进程是一个运行在系统后台、不受前台用户交互影响的进程，通常，守护进程以字母 d 结尾，syslogd 是处理系统日志的后台，afc2d是文件服务的后台进程等</p>
<h4 id="增加系统设置项"><a href="#增加系统设置项" class="headerlink" title="增加系统设置项"></a>增加系统设置项</h4><p>PreferenceLoader 是一个开源的基础依赖包，越狱插件的系统设置菜单就是由它提供，Cydia 搜索安装 PreferenceLoader</p>
<p>进入系统设置时 PreferenceLoader 会从 /Library/PreferenceLoader/Preferences/ 目录下解析符合规则的 plist 文件，并生成响应的控件动态添加到系统设置</p>
<p><a href="http://iphonedevwiki.net/index.php/PreferenceBundles">http://iphonedevwiki.net/index.php/PreferenceBundles</a></p>
<h4 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h4><p>进程间通信（IPC）就是在不同进程之间传播或交换信息，正向开发中只能使用苹果公司提供 URLScheme，应用之间互相调用并且传送简单字符的一种机制</p>
<h5 id="Notification通信"><a href="#Notification通信" class="headerlink" title="Notification通信"></a>Notification通信</h5><p>有一个 userinfo 参数，但实际上无法传递，总是为 nil，不适合传递参数</p>
<h5 id="XPC通信"><a href="#XPC通信" class="headerlink" title="XPC通信"></a>XPC通信</h5><p>仅限于系统级别应用，如果用普通应用是不可达的</p>
<h5 id="RocketBootstrap通信"><a href="#RocketBootstrap通信" class="headerlink" title="RocketBootstrap通信"></a>RocketBootstrap通信</h5><p>私有框架 APPSupport 中存在一个 CPDistributedMessagingCenter（分布式消息传递中心）使用简单的消息和字典来提供不同进程之间的通信，RocketBootstrap 就是在其上进行封装</p>
<p>RocketBootstrap 要求在权限比较高的进程中启动一个服务，再通过发送通知的方式越过沙盒，因此创建一个 tweak 并注入 SpringBoard进程</p>
<h4 id="deb重打包"><a href="#deb重打包" class="headerlink" title="deb重打包"></a>deb重打包</h4><p>有时候需要对别人 deb 包进行修改破解限制，就需要 deb 重打包</p>
<p>新建必要目录，存放解包后的文件及打包后的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir extract</span><br><span class="line">$ mkdir extract&#x2F;DEBIAN</span><br><span class="line">$ mkdir build</span><br></pre></td></tr></table></figure>

<ul>
<li>安装 dpkg</li>
</ul>
<p>安装 <a href="https://www.macports.org/install.php">MacPorts</a> 软件包管理软件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo port install dpkg</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew install dpkg</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ dpkg-deb -c deb文件 &#x2F;&#x2F;显示文件列表</span><br><span class="line">$ dpkg-deb -X deb文件 输出路径 &#x2F;&#x2F;解压获取到Library中文件，里面有dylib</span><br><span class="line">$ dpkg-deb -e deb文件 输出路径 &#x2F;&#x2F;解压获取到Control文件</span><br><span class="line">$ dpkg-deb -R deb文件 输出路径 &#x2F;&#x2F;获取到 dylib和control文件</span><br><span class="line">$ dpkg-deb -b 通过-解压出来的文件 xxx.deb &#x2F;&#x2F;打包生成deb</span><br></pre></td></tr></table></figure>

<ul>
<li>解包</li>
</ul>
<p>-X参数可以提取deb包中的所有文件到 extract，-e 参数可以提取deb包中的控制信息到extract/DEBIAN</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ dpkg -X .&#x2F;xxx.deb extract</span><br><span class="line">$ dpkg -e .&#x2F;xxx.deb extract&#x2F;DEBIAN</span><br></pre></td></tr></table></figure>

<ul>
<li>重新打包成deb</li>
</ul>
<p>检查目录是否存在 .DS_Store 文件删除，再设置用户组权限打包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo chown -R root:wheel .&#x2F;extract</span><br><span class="line">$ dpkg-deb -b extract&#x2F; build&#x2F; 如果报错 </span><br><span class="line">$ dpkg-deb -Z gzip -b extract&#x2F; build&#x2F;</span><br></pre></td></tr></table></figure>





<h4 id="报错修改"><a href="#报错修改" class="headerlink" title="报错修改"></a>报错修改</h4><p>make package install</p>
<ol>
<li>提示 <code>obsolete compression type &#39;lzma&#39;; use xz instead</code></li>
</ol>
<p>解决：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">到theos目录 HTEOS&#x2F;makefiles&#x2F;package&#x2F;deb.mk</span><br><span class="line">第六行的THEOSPLATFORM_DPKG_DEB_COMPRESSION?&#x3D;lzma 把lzma改成xz就可以了</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>提示 <code>dpkg: error processing /tmp/_theos_install.deb (--install):</code></li>
</ol>
<p>解决：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">到目录 THEOS&#x2F;makefiles&#x2F;package&#x2F;deb.mk</span><br><span class="line">vim 进入 注释这一行</span><br><span class="line">#$(ECHO_NOTHING)COPYFILE_DISABLE&#x3D;1 $(FAKEROOT) -r $(_THEOS_PLATFORM_DPKG_DEB) -Z$(_THEOS_PLATFORM_DPKG_DEB_COMPRESSION) -b &quot;$(THEOS_STAGING_DIR)&quot; &quot;$(_THEOS_DEB_PACKAGE_FILENAME)&quot;$(ECHO_END)</span><br><span class="line">添加 </span><br><span class="line">$(ECHO_NOTHING)COPYFILE_DISABLE&#x3D;1 $(FAKEROOT) -r dpkg-deb -Zgzip -b &quot;$(THEOS_STAGING_DIR)&quot; &quot;$(_THEOS_DEB_PACKAGE_FILENAME)&quot; $(STDERR_NULL_REDIRECT)$(ECHO_END)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>Showing Recent Messages</p>
<p>An empty identity is not valid when signing a binary for the product type ‘Dynamic Library’.</p>
</li>
</ol>
<p>解决：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BuildSettings-User-Defined 添加 key CODE_SIGNING_ALLOWED NO</span><br></pre></td></tr></table></figure>









]]></content>
  </entry>
  <entry>
    <title>Python3网络爬虫开发实战-Scrapy框架使用</title>
    <url>/2022/04/19/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-Scrapy%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Scrapy 功能非常强大，爬取效率高，相关扩展组件多，可配置和可扩展程度非常高，几乎可以应对所有反爬网站，是目前Python中使用最广泛的爬虫框架</p>
<p>官方文档 <a href="https://doc.scrapy.org/en/latest/index.html">https://doc.scrapy.org/en/latest/index.html</a></p>
<h4 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h4><h5 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy startproject tutorial</span><br></pre></td></tr></table></figure>

<p><img src="/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-Scrapy%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/WeChatf2beb120c54835739c5d7653fc0fc630.png" alt="WeChatf2beb120c54835739c5d7653fc0fc630"></p>
<p>scrapy.cfg：Scrapy 项目的配置文件，定义了项目配置文件路径、部署相关信息等内容，Scrapy 部署时的配置文件</p>
<p>items.py：定义 Item 数据结构，所有的 Item 的定义都可以放这里，定义爬取的数据结构</p>
<p>pipelines.py：定义 Item Pipeline 的实现，所有 Item Pipeline 的实现都可以放这里，定义数据管道</p>
<p>settings.py：定义项目的全局配置，配置文件</p>
<p>middlewares.py：定义 Spider Middlewares 和 Downloader Middlewares 的实现，爬取时的中间件</p>
<p>spiders：其内包含一个个 Spider 的实现，每个 Spider 都有一个文件，放置 Spiders 的文件夹</p>
<h5 id="创建-Spider"><a href="#创建-Spider" class="headerlink" title="创建 Spider"></a>创建 Spider</h5><p>Spider 是自己定义的类，Scrapy 用它来从网页抓取内容，并解析抓取的结果，不过这个类必须继承 Scrapy 提供的 Spider 类 scrapy.Spider，还要定义 Spider 的名称和起始请求，以及怎样处理爬取后的结果的方法</p>
<p>命令行创建一个 Spider，生成 Quotes 这个 Spider</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd tutorial</span><br><span class="line">scrapy genspider quotes quotes.toscrape.com</span><br></pre></td></tr></table></figure>

<p>执行 genspider 命令，第一个参数是 Spider 名称，第二个参数是网站域名</p>
<p>执行完毕后，spiders 文件夹中多了一个 quotes.py</p>
<p>内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;quotes&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;quotes.toscrape.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://quotes.toscrape.com/&#x27;</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>name 每个项目唯一的名字，区分不同的Spider</p>
<p>allowed_domains 允许爬取的域名，如果初始或后续的请求链接不在这个域名下的，则请求链接会被过滤</p>
<p>start_urls，包含了Spider在启动时爬取的url列表，初始请求是由它来定义的</p>
<p>parse 是 Spider 的一个方法，默认情况下，被调用时 start_urls 里面的链接构成的请求完成下载执行后，返回的响应会作为唯一的参数传递给这个函数，该方法解析返回的响应、提取数据或者进一步生成要处理的请求</p>
<h5 id="创建-Item"><a href="#创建-Item" class="headerlink" title="创建 Item"></a>创建 Item</h5><p>Item 是保存爬取数据的容器，使用方法和字典类似</p>
<p>创建 Item 需要继承 scrapy.Item 类，并且定义类型为 scrapy.Field 的字段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuoteItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    text = scrapy.Field()</span><br><span class="line">    author = scrapy.Field()</span><br><span class="line">    tags = scrapy.Field()</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h5 id="解析-Response"><a href="#解析-Response" class="headerlink" title="解析 Response"></a>解析 Response</h5><p>parse() 方法的参数 response 是 start_urls 里面的链接爬取后的结果，所以在 parse() 方法中，我们可以直接对 response 变量包含的内容进行解析</p>
<p><img src="/Python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-Scrapy%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/WeChatb6f074004233d523d5e359e02e4ffb4e.png" alt="WeChatb6f074004233d523d5e359e02e4ffb4e"></p>
<p>网页结构中每一页都有多个 class 为 quote 的区块，每个区块都包含 text、author、tags，需要先找出所有的 quote，然后提取每一个 quote 中的内容</p>
<p>提取方式可以是 CSS 选择器或XPath 选择器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;quote&quot;</span> <span class="attr">itemscope</span>=<span class="string">&quot;&quot;</span> <span class="attr">itemtype</span>=<span class="string">&quot;http://schema.org/CreativeWork&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;text&quot;</span>&gt;</span>“The world as we have ....”<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>by <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;author&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;author&quot;</span>&gt;</span>Albert Einstein<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/author/Albert-Einstein&quot;</span>&gt;</span>(about)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tags&quot;</span>&gt;</span></span><br><span class="line">        Tags:</span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">class</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;change,deep-thoughts,thinking,world&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/tag/change/page/1/&quot;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/tag/deep-thoughts/page/1/&quot;</span>&gt;</span>deep-thoughts<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/tag/thinking/page/1/&quot;</span>&gt;</span>thinking<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/tag/world/page/1/&quot;</span>&gt;</span>world<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    quotes = response.css(<span class="string">&#x27;.quote&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> quote <span class="keyword">in</span> quotes:</span><br><span class="line">        text = quote.css(<span class="string">&#x27;.text::text&#x27;</span>).extract_first()</span><br><span class="line">        autnor = quote.css(<span class="string">&#x27;.author::text&#x27;</span>).extract_first()</span><br><span class="line">        tags = quote.css(<span class="string">&#x27;.tags .tag::text&#x27;</span>).extract()</span><br></pre></td></tr></table></figure>

<p>先利用选择器选取所有的 quote，并将其赋值为 quotes 变量，然后利用 for 循环对每个 quote 遍历，解析每个 quote 内容</p>
<p>对 text 来说，它的 class 为 text，所以用 .text 选择器来选取，这个结果实际上是整个带有标签的节点，要获取正文内容，可以加 ::text 来获取，这时的结果是长度为 1 的列表，所以要用 extract_first() 方法来获取第一个元素；对 tags 来说，由于我们要获取所有的标签，所以用 extract() 方法获取整个列表即可</p>
<h5 id="使用-Item"><a href="#使用-Item" class="headerlink" title="使用 Item"></a>使用 Item</h5><p>解析结果赋值 Item 的每一个字段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tutorial.items <span class="keyword">import</span> QuoteItem</span><br><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">      quotes = response.css(<span class="string">&#x27;.quote&#x27;</span>)</span><br><span class="line">      <span class="keyword">for</span> quote <span class="keyword">in</span> quotes:</span><br><span class="line">          item = QuoteItem()</span><br><span class="line">          item[<span class="string">&#x27;text&#x27;</span>] = quote.css(<span class="string">&#x27;.text::text&#x27;</span>).extract_first()</span><br><span class="line">          item[<span class="string">&#x27;autnor&#x27;</span>] = quote.css(<span class="string">&#x27;.author::text&#x27;</span>).extract_first()</span><br><span class="line">          item[<span class="string">&#x27;tags&#x27;</span>] = quote.css(<span class="string">&#x27;.tags .tag::text&#x27;</span>).extract()</span><br><span class="line">          <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure>

<h5 id="后续-Request"><a href="#后续-Request" class="headerlink" title="后续 Request"></a>后续 Request</h5><p>上面操作实现了从初始页面抓取内容，下一页的内容需要从当前页面中找到信息来生成下一个请求</p>
<p>拉取页面到底部有个 Next 按钮，查看源码，它的链接是 /page/2/ 全链接是 <a href="http://quotes.toscrape.com/page/2">http://quotes.toscrape.com/page/2</a> ，通过这个链接可以构造下一个请求</p>
<p>构造请求时需要用到 scrapy.Request，传递两个参数 url 和 callback</p>
<p>url：请求链接</p>
<p>callback：回调函数，会将请求的响应作为参数传递给这个回调函数，回调函数进行解析或生成下一个请求</p>
<p>修改后完整 Spider 类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> tutorial.items <span class="keyword">import</span> QuoteItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">  name = <span class="string">&#x27;quotes&#x27;</span></span><br><span class="line">  allowed_domains = [<span class="string">&#x27;quotes.toscrape.com&#x27;</span>]</span><br><span class="line">  start_urls = [<span class="string">&#x27;http://quotes.toscrape.com/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">      quotes = response.css(<span class="string">&#x27;.quote&#x27;</span>)</span><br><span class="line">      <span class="keyword">for</span> quote <span class="keyword">in</span> quotes:</span><br><span class="line">          item = QuoteItem()</span><br><span class="line">          item[<span class="string">&#x27;text&#x27;</span>] = quote.css(<span class="string">&#x27;.text::text&#x27;</span>).extract_first()</span><br><span class="line">          item[<span class="string">&#x27;autnor&#x27;</span>] = quote.css(<span class="string">&#x27;.author::text&#x27;</span>).extract_first()</span><br><span class="line">          item[<span class="string">&#x27;tags&#x27;</span>] = quote.css(<span class="string">&#x27;.tags .tag::text&#x27;</span>).extract()</span><br><span class="line">          <span class="keyword">yield</span> item</span><br><span class="line">      <span class="comment">#利用选择器生成下一页的请求</span></span><br><span class="line">      <span class="built_in">next</span> = response.css(<span class="string">&#x27;.pager .next a::attr(&quot;href&quot;)&#x27;</span>).extract_first()</span><br><span class="line">      <span class="comment">#urljoin()方法可以将相对URL构造成一个绝对的URL</span></span><br><span class="line">      url = response.urljoin(<span class="built_in">next</span>)</span><br><span class="line">      <span class="comment">#返回下一页请求</span></span><br><span class="line">      <span class="keyword">yield</span>  scrapy.Request(url=url, callback=self.parse)</span><br></pre></td></tr></table></figure>

<h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><p>进入目录运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy crawl quotes</span><br></pre></td></tr></table></figure>

<p>运行后 Scrapy 输出当前的版本号及正在启动项目名称、settings.py  中一些重写后的配置、Middlewares、Pipelines</p>
<p>接下来就输出各个页面的抓取结果了</p>
<p>最后输出整个抓取过程的统计信息，请求字节数、请求次数、响应次数、完成原因等</p>
<h5 id="保存到文件"><a href="#保存到文件" class="headerlink" title="保存到文件"></a>保存到文件</h5><p>Scrapy 提供的 Feed Exports 可以将结果输出，如想将上面结果保存成 JSON 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy crawl quotes -o quotes.json</span><br></pre></td></tr></table></figure>

<p>还可以每一个 Item 输出一行 JSON，输出后缀为 jl，为 jsonline 的缩写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy crawl quotes -o quotes.jl</span><br><span class="line">或者 </span><br><span class="line">scrapy crawl quotes -o quotes.jsonline</span><br></pre></td></tr></table></figure>

<p>输出格式还支持很多种，如 csv、xml、pickle、marshal 等，还支持 ftp、s3等远程输出，还可以通过自定义 ItemExporter 来实现其他的输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy crawl quotes -o quotes.csv</span><br><span class="line">scrapy crawl quotes -o quotes.xml</span><br><span class="line">scrapy crawl quotes -o quotes.pickle</span><br><span class="line">scrapy crawl quotes -o quotes.marshal</span><br><span class="line">scrapy crawl quotes -o ftp:&#x2F;&#x2F;user:pass@ftp.example.com&#x2F;path&#x2F;to&#x2F;quotes.csv</span><br></pre></td></tr></table></figure>

<p>通过 Scrapy 提供的 FeedExports，可以轻松的输出抓取结果到文件，想要更复杂的输出，如输出到数据库，可以使用 ItemPileline 来完成</p>
<h5 id="使用-Item-Pipeline"><a href="#使用-Item-Pipeline" class="headerlink" title="使用 Item Pipeline"></a>使用 Item Pipeline</h5><p>Item Pipeline 为项目管道，Item 生成后，它会自动被送到 Item Pipeline 进行处理，常用 Item Pipeline 来做如下操作</p>
<p>清理 HTML 数据、验证爬取数据，检查爬取字段、查重并丢弃重复内容、将爬取结果保存到数据库</p>
<p>要实现 Item Pipeline，只需要定义一个类并实现 process_item() 方法，启用 Item Pipeline 后，Item Pipeline 会自动调用这个方法，process_item() 方法必须返回包含数据的字典或 Item 对象或者抛出 DropItem 异常</p>
<p>process_item() 有两个参数，一个参数是 item，每次 Spider 生成的 Item 都会作为参数传递过来，第二个参数是 Spider，就是 Spider 的实例</p>
<p>实现 Item Pipeline，筛掉 text 长度大于 50 的Item，并将结果保存到 MongoDB</p>
<p>修改项目里的 pipelines.py 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextPipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">      self.limit = <span class="number">50</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">      <span class="keyword">if</span> item[<span class="string">&#x27;text&#x27;</span>]:</span><br><span class="line">          <span class="keyword">if</span> <span class="built_in">len</span>(item[<span class="string">&#x27;text&#x27;</span>] &gt; self.limit):</span><br><span class="line">              <span class="comment">#截断后拼省略号返回</span></span><br><span class="line">              item[<span class="string">&#x27;text&#x27;</span>] = item[<span class="string">&#x27;text&#x27;</span>][<span class="number">0</span>:self.limit].rstrip() + <span class="string">&#x27;...&#x27;</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          <span class="keyword">return</span> DropItem(<span class="string">&#x27;Missing Text&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>接下来将处理后的 item 存入 MongoDB，定义另外一个 Pipeline，MongoPipeline</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoPipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, mongo_uri, mongo_db</span>):</span></span><br><span class="line">      self.mongo_uri = mongo_uri</span><br><span class="line">      self.mongo_db = mongo_db</span><br><span class="line"><span class="meta">  @classmethod</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span>(<span class="params">cls, crawler</span>):</span></span><br><span class="line">      <span class="keyword">return</span> cls(</span><br><span class="line">          mongo_uri=crawler.settings.get(<span class="string">&#x27;MONGO_URI&#x27;</span>),</span><br><span class="line">          mongo_db=crawler.settings.get(<span class="string">&#x27;MONGODB_DATABASE&#x27;</span>)</span><br><span class="line">      )</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">      self.cline = pymongo.MongoClient(self.mongo_uri)</span><br><span class="line">      self.db = self.cline[self.mongo_db]</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">      name = item.__class__.__name__</span><br><span class="line">      self.db[name].insert(<span class="built_in">dict</span>(item))</span><br><span class="line">      <span class="keyword">return</span> item</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">      self.cline.close()</span><br></pre></td></tr></table></figure>

<p>MongoPipeline 实现了另外几个方法</p>
<p>from_crawler：是一个类方法，用 @classmethod 标识，是一种依赖注入的方式，参数是 crawler，通过 crawler 可以拿到全局配置的每个配置信息，全局配置 settings.py 定义了 MongoDB 连接需要的地址和数据库名称，拿到配置信息返回类对象即可，这方法主要用来获取 setting.py 中的配置</p>
<p>open_spider：当 Spider 开启时，这个方法被调用，上面程序中主要进行了一些初始化操作</p>
<p>close_spider：当 Spider 关闭时，这个方法被调用，上面程序中将数据库连接关闭</p>
<p>process_item() 方法则执行了数据库插入操作</p>
<p>定义好了 TextPipeline 和 MongoPipeline 两个类后，需要在 settings.py 中使用他们，MongoDB 的连接信息还需要定义</p>
<p>settings.py 中加入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TIME_PIPELINES = &#123;</span><br><span class="line">	<span class="string">&#x27;tutorial.pipelines.TextPipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">	<span class="string">&#x27;tutorial.pipelines.MongoPipeline&#x27;</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br><span class="line">MONGO_URI = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">MONGO_DB = <span class="string">&#x27;tutorial&#x27;</span></span><br></pre></td></tr></table></figure>

<p>赋值 TIME_PIPELINES 字典，键名是 Pipeline 的类名称，键值是调用优先级，是一个数字，数字越小则对应 Pipeline 越先被调用</p>
<p>重新执行爬取</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy crawl quotes</span><br></pre></td></tr></table></figure>

<h4 id="13-3-Selecotr-用法"><a href="#13-3-Selecotr-用法" class="headerlink" title="13.3 Selecotr 用法"></a>13.3 Selecotr 用法</h4><p>Scrapy 还提供了自己的数据提取方法，即 Selector，Selector 是基于 lxml 来构建的，支持 XPath 选择器、CSS 选择器以及正则表达式</p>
<h5 id="直接使用"><a href="#直接使用" class="headerlink" title="直接使用"></a>直接使用</h5><p>Selector 是一个可以独立使用的模块，可以利用 Selector 来构建一个选择器对象，然后调用它的相关方法 如</p>
<p>xpath()、css() 等来提取数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Selector</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  body = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  &lt;html&gt;</span></span><br><span class="line"><span class="string">      &lt;head&gt;</span></span><br><span class="line"><span class="string">          &lt;title&gt;Hello World&lt;/title&gt;</span></span><br><span class="line"><span class="string">      &lt;/head&gt;</span></span><br><span class="line"><span class="string">  &lt;/html&gt;</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line">  selector = Selector(text=body)</span><br><span class="line">  title = selector.xpath(<span class="string">&#x27;//title/text()&#x27;</span>).extract_first()</span><br><span class="line">  title1 = selector.xpath(<span class="string">&#x27;//title/text()&#x27;</span>).extract()</span><br><span class="line">  title2 = selector.xpath(<span class="string">&#x27;//title/text()&#x27;</span>)</span><br><span class="line">  print(title)</span><br><span class="line">  print(title1)</span><br><span class="line">  print(title2)</span><br><span class="line"><span class="comment">#Hello World</span></span><br><span class="line"><span class="comment">#[&#x27;Hello World&#x27;]</span></span><br><span class="line"><span class="comment">#[&lt;Selector xpath=&#x27;//title/text()&#x27; data=&#x27;Hello World&#x27;&gt;]</span></span><br></pre></td></tr></table></figure>

<h5 id="Scrapy-shell"><a href="#Scrapy-shell" class="headerlink" title="Scrapy shell"></a>Scrapy shell</h5><p>借助 Scrapy shell 来模拟 Scrapy 请求的过程 ，讲解相关的提取方法</p>
<p>官方文档的样例来做演示 <a href="https://docs.scrapy.org/en/latest/_static/selectors-sample1.html">https://docs.scrapy.org/en/latest/_static/selectors-sample1.html</a></p>
<p>开启 Scrapy shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy shell https:&#x2F;&#x2F;docs.scrapy.org&#x2F;en&#x2F;latest&#x2F;_static&#x2F;selectors-sample1.html</span><br></pre></td></tr></table></figure>

<p>就进入 Scrapy shell 模式，这过程其实是 Scrapy 发起了一次请求，请求的URL就是命令行下输入的 URL，然后把一些可操作的变量传递给我们，如request、response 等</p>
<img src="Python3网络爬虫开发实战-Scrapy框架使用/WeChatae25474d863d90da3fe12abbc4a54da0.png" alt="WeChatae25474d863d90da3fe12abbc4a54da0" style="zoom:80%;" />

<p>可以在命令模式下输入命令调用对象的一些操作方法，回车之后实时显示结果</p>
<p>查看页面源码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&#x27;http://example.com/&#x27;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example website<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;images&#x27;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;image1.html&#x27;</span>&gt;</span>Name: My image 1 <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;image1_thumb.jpg&#x27;</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;image2.html&#x27;</span>&gt;</span>Name: My image 2 <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;image2_thumb.jpg&#x27;</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;image3.html&#x27;</span>&gt;</span>Name: My image 3 <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;image3_thumb.jpg&#x27;</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;image4.html&#x27;</span>&gt;</span>Name: My image 4 <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;image4_thumb.jpg&#x27;</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;image5.html&#x27;</span>&gt;</span>Name: My image 5 <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;image5_thumb.jpg&#x27;</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="XPath-选择器"><a href="#XPath-选择器" class="headerlink" title="XPath 选择器"></a>XPath 选择器</h5><p>进入 Scrapy shell 之后，操作 response 这个变量来进行分析</p>
<p>response 有一个属性 selector，调用 response.selector 返回的内容就相当于用 response 的body 构造了一个 Selector 对象，通过这个 Selector 对象可以调用解析方法如 xpath()、css() 等</p>
<ul>
<li>查询嵌套查询</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#从html提取a节点</span><br><span class="line">&gt;&gt;&gt; result &#x3D; response.selector.xpath(&#39;&#x2F;&#x2F;a&#39;)</span><br><span class="line">&gt;&gt;&gt; result</span><br><span class="line">[&lt;Selector xpath&#x3D;&#39;&#x2F;&#x2F;a&#39; data&#x3D;&#39;&lt;a href&#x3D;&quot;image1.html&quot;&gt;Name: My image ...&#39;&gt;, </span><br><span class="line">&lt;Selector xpath&#x3D;&#39;&#x2F;&#x2F;a&#39; data&#x3D;&#39;&lt;a href&#x3D;&quot;image2.html&quot;&gt;Name: My image ...&#39;&gt;, </span><br><span class="line">&lt;Selector xpath&#x3D;&#39;&#x2F;&#x2F;a&#39; data&#x3D;&#39;&lt;a href&#x3D;&quot;image3.html&quot;&gt;Name: My image ...&#39;&gt;, </span><br><span class="line">&lt;Selector xpath&#x3D;&#39;&#x2F;&#x2F;a&#39; data&#x3D;&#39;&lt;a href&#x3D;&quot;image4.html&quot;&gt;Name: My image ...&#39;&gt;, </span><br><span class="line">&lt;Selector xpath&#x3D;&#39;&#x2F;&#x2F;a&#39; data&#x3D;&#39;&lt;a href&#x3D;&quot;image5.html&quot;&gt;Name: My image ...&#39;&gt;]</span><br><span class="line">#从a节点提取img节点</span><br><span class="line">&gt;&gt;&gt; result.xpath(&#39;.&#x2F;img&#39;)</span><br></pre></td></tr></table></figure>

<p>选择器前面加 . (点)，代表提取元素内部的数据，没有加点则代表从根节点开始提取</p>
<ul>
<li>提取内容</li>
</ul>
<p>Scrapy 提供了两个使用的快捷方法 </p>
<p>response.xpath() 和 response.css() 功能等同于 response.selector.xpath() 和 response.selector.css()</p>
<p>现在得到的是 SelectorList 类型的变量，该变量是由 Selector 对象组成的列表，可以用索引单独提取其中某个 Selector 元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; result[0]</span><br><span class="line">&lt;Selector xpath&#x3D;&#39;&#x2F;&#x2F;a&#39; data&#x3D;&#39;&lt;a href&#x3D;&quot;image1.html&quot;&gt;Name: My image ...&#39;&gt;</span><br></pre></td></tr></table></figure>

<p>提取内容 extract() 方法</p>
<p>加一层 /text() 就可以获取节点的内部文本，或者加一层 /@href 就可获取节点的 href 属性，@符号后面就是要获取的属性名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; result.extract()</span><br><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;a&#x2F;text()&#39;).extract()</span><br></pre></td></tr></table></figure>

<ul>
<li>提取单个元素 extract_first() 不用担心数组越界问题</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#将第一个匹配结果取出来 extract_first()</span><br><span class="line">&gt;&gt;&gt; result.xpath(&#39;&#x2F;&#x2F;a[@href&#x3D;&quot;image1.html&quot;]&#x2F;text()&#39;).extract_first()</span><br></pre></td></tr></table></figure>

<ul>
<li>提取不到使用默认值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; result.xpath(&#39;&#x2F;&#x2F;a[@href&#x3D;&quot;image1.html&quot;]&#x2F;text()&#39;).extract_first(&#39;Default Image&#39;)</span><br><span class="line">#默认值 Default Image</span><br></pre></td></tr></table></figure>

<h5 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h5><p>选取 a 节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; response.css(&#39;a&#39;)</span><br><span class="line">[&lt;Selector xpath&#x3D;&#39;descendant-or-self::a&#39; data&#x3D;&#39;&lt;a href&#x3D;&quot;image1.html&quot;&gt;Name: My image ...&#39;&gt;, &lt;Selector xpath&#x3D;&#39;descendant-or-self::a&#39; data&#x3D;&#39;&lt;a href&#x3D;&quot;image2.html&quot;&gt;Name: My image ...&#39;&gt;, &lt;Selector xpath&#x3D;&#39;descendant-or-self::a&#39; data&#x3D;&#39;&lt;a href&#x3D;&quot;image3.html&quot;&gt;Name: My image ...&#39;&gt;, &lt;Selector xpath&#x3D;&#39;descendant-or-self::a&#39; data&#x3D;&#39;&lt;a href&#x3D;&quot;image4.html&quot;&gt;Name: My image ...&#39;&gt;, &lt;Selector xpath&#x3D;&#39;descendant-or-self::a&#39; data&#x3D;&#39;&lt;a href&#x3D;&quot;image5.html&quot;&gt;Name: My image ...&#39;&gt;]</span><br><span class="line">&gt;&gt;&gt; response.css(&#39;a&#39;).extract()</span><br><span class="line">&gt;&gt;&gt; response.css(&#39;a&#39;).extract_first()</span><br></pre></td></tr></table></figure>

<ul>
<li>属性选择和嵌套选择</li>
</ul>
<p>查找 a 节点内部 img 节点，只需要加一个空格和img 即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; response.css(&#39;a[href&#x3D;&quot;image1.html&quot;]&#39;).extract()</span><br><span class="line">[&#39;&lt;a href&#x3D;&quot;image1.html&quot;&gt;Name: My image 1 &lt;br&gt;&lt;img src&#x3D;&quot;image1_thumb.jpg&quot;&gt;&lt;&#x2F;a&gt;&#39;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; response.css(&#39;a[href&#x3D;&quot;image1.html&quot;] img&#39;).extract()</span><br><span class="line">[&#39;&lt;img src&#x3D;&quot;image1_thumb.jpg&quot;&gt;&#39;]</span><br></pre></td></tr></table></figure>

<ul>
<li>节点内部文本和属性获取</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; response.css(&#39;a[href&#x3D;&quot;image1.html&quot;]::text&#39;).extract_first()</span><br><span class="line">&#39;Name: My image 1 &#39;</span><br><span class="line">&gt;&gt;&gt; response.css(&#39;a[href&#x3D;&quot;image1.html&quot;] img::attr(src)&#39;).extract_first()</span><br><span class="line">&#39;image1_thumb.jpg&#39;</span><br></pre></td></tr></table></figure>

<p>获取文本和属性要用 ::text 和 ::attr() 的写法</p>
<ul>
<li>CSS 选择器 XPath 选择器嵌套使用</li>
</ul>
<p>获取所有 img 节点的 src 属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;a&#39;).css(&#39;img&#39;).xpath(&#39;@src&#39;).extract()</span><br><span class="line">[&#39;image1_thumb.jpg&#39;, &#39;image2_thumb.jpg&#39;, &#39;image3_thumb.jpg&#39;, &#39;image4_thumb.jpg&#39;, &#39;image5_thumb.jpg&#39;]</span><br></pre></td></tr></table></figure>

<h5 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h5><p>Scrapy 还支持正则匹配</p>
<p>a 节点中文本类似于 Name: My image 1，现在提取 Name: 后面内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;a&#x2F;text()&#39;).re(&#39;Name:\s(.*)&#39;)</span><br><span class="line">[&#39;My image 1 &#39;, &#39;My image 2 &#39;, &#39;My image 3 &#39;, &#39;My image 4 &#39;, &#39;My image 5 &#39;]</span><br></pre></td></tr></table></figure>

<p>给 re() 方法传一个正则表达式，(.*) 就是要匹配的内容</p>
<p>同时存在两个分组，结果会按序输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;a&#x2F;text()&#39;).re(&#39;(.*?)\s(.*)&#39;)</span><br><span class="line">[&#39;Name:&#39;, &#39;My image 1 &#39;, &#39;Name:&#39;, &#39;My image 2 &#39;, &#39;Name:&#39;, &#39;My image 3 &#39;, &#39;Name:&#39;, &#39;My image 4 &#39;, &#39;Name:&#39;, &#39;My image 5 &#39;]</span><br></pre></td></tr></table></figure>

<p>类似 extract_first() 方法 re_first() 方法可以选择列表第一个元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;a&#x2F;text()&#39;).re_first(&#39;Name:\s(.*)&#39;)</span><br><span class="line">&#39;My image 1 &#39;</span><br></pre></td></tr></table></figure>

<p>response 对象不能直接调用 re() 和 re_first() ，如果想要对全文进行正则匹配，可以先调用 xpath() 方法再正则匹配</p>
<h4 id="13-4-Spider-用法"><a href="#13-4-Spider-用法" class="headerlink" title="13.4 Spider 用法"></a>13.4 Spider 用法</h4><h5 id="Spider-类"><a href="#Spider-类" class="headerlink" title="Spider 类"></a>Spider 类</h5><p>定义的 Spider 是继承自 scrapy.spiders.Spider</p>
<p>scrapy.spiders.Spider 类提供了 start_requests() 方法的默认实现，读取并请求 start_urls 属性，并根据返回的结果调用 parse() 方法解析结果。</p>
<p>name：爬虫名称，一般以网站域名名称来命名，Spider 爬取 mywebsite.com，命名为 mywebsite</p>
<p>allow_domains：允许爬取的域名，是可选配置，不在此范围的链接不会被跟进爬取</p>
<p>start_urls：起始 URL 列表，没有实现 start_requests() 方法时，默认会从这个列表开始抓取</p>
<p>custom_settings：一个字典，专属本 Spider 的配置，会覆盖全局的设置，此设置必须在初始化前被更新，必须定义成类变量</p>
<p>crawler：是由 from_crawler() 方法设置的，代表本 Spider 类对应的 Crawler 对象，Crawler 对象包含了很多项目组件，利用它可以获取项目一些配置信息，最常见的获取项目的设置信息，即 settings</p>
<p>settings：一个Settings 对象，利用它可以直接获取项目全局设置变量</p>
<ul>
<li>start_requests()</li>
</ul>
<p>此方法用于生成初始请求，必须返回一个可迭代对象。此方法会默认使用 start_urls 里面的URL 来构造 Request，而且 Request 是 GET请求方式，如果想在启动时以 POST 方式访问某个站点，可以直接重写这个方法，发送 POST 请求时使用 FormRequest</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImagesSpider</span>(<span class="params">Spider</span>):</span></span><br><span class="line">  name = <span class="string">&#x27;images&#x27;</span></span><br><span class="line">  allowed_domains = [<span class="string">&#x27;images.so.com&#x27;</span>]</span><br><span class="line">  start_urls = [<span class="string">&#x27;http://images.so.com/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span>(<span class="params">self</span>):</span></span><br><span class="line">      data = &#123;<span class="string">&#x27;ch&#x27;</span>: <span class="string">&#x27;photography&#x27;</span>, <span class="string">&#x27;listtype&#x27;</span>: <span class="string">&#x27;new&#x27;</span>&#125;</span><br><span class="line">      base_url = <span class="string">&#x27;https://image.so.com/zjl?&#x27;</span></span><br><span class="line">      <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self.settings.get(<span class="string">&#x27;MAX_PAGE&#x27;</span>) + <span class="number">1</span>):</span><br><span class="line">          data[<span class="string">&#x27;sn&#x27;</span>] = page * <span class="number">30</span></span><br><span class="line">          <span class="comment">#利用urlencode()方法将字典转化为URL的GET参数</span></span><br><span class="line">          params = urlencode(data)</span><br><span class="line">          url = base_url + params</span><br><span class="line">          <span class="keyword">yield</span> Request(url, self.parse)</span><br></pre></td></tr></table></figure>

<ul>
<li>parse()</li>
</ul>
<p>当 Response 没指定回调函数时，该方法被调用，负责处理 Response，处理返回结果，并从中提取想要的数据和下一步请求。需要返回一个包含 Request 或 Item 的可迭代对象</p>
<p>close()：当 Spider 关闭时，该方法被调用，这里一般会定义释放资源的一些操作</p>
<h4 id="13-5-Downloader-Middleware"><a href="#13-5-Downloader-Middleware" class="headerlink" title="13.5 Downloader Middleware"></a>13.5 Downloader Middleware</h4><p>下载中间件，处于 Scrapy 的 Request 和 Response 之间的处理模块</p>
<p>Scheduler 从队列中拿出一个 Request 发送给 Downloader 执行下载，这过程会经过 Downloader Middlewares 的处理</p>
<p>当 Downloader 将 Request 下载完成得到的 Response 返回给 Spider 时会再次经过  Downloader Middlewares 处理</p>
<p>修改 User-Agent、处理重定向、设置代理、失败重试、设置Cookies等功能都需要借助  Downloader Middlewares 实现</p>
<p>Scrapy 已经提供了许多  Downloader Middlewares，比如失败重试、自动重定向等功能的 Middleware，被 DOWNLOADER_MIDDLEWARES_BASE 变量定义，是一个字典格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&#39;scrapy.downloadermiddlewares.robotstxt.RobotsTxtMiddleware&#39;: 100</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>键值是 优先级，数字越小会被优先调用</p>
<p>Scrapy 提供了一个设置变量 DOWNLOADER_MIDDLEWARES，直接修改这个变量就可以添加自己定义的  Downloader Middlewares</p>
<h5 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h5><p>每个  Downloader Middlewares 都定义了一个或多个方法的类，核心方法三个</p>
<p>process_request(request, spider)</p>
<p>process_response(request, response, spider)</p>
<p>process_exception(request, exception, spider)</p>
<p>只需要实现一个方法，就可以定义一个 Downloader Middlewares </p>
<ul>
<li>process_request(request, spider)</li>
</ul>
<p>Request 被 Scrapy 引擎调度给Downloader之前，会被调用</p>
<p>可以用 process_request 对 Request 方法进行处理。返回值必须为 None、Response对象、Request 对象之一，或者抛出 IgnoreRequest 异常</p>
<ul>
<li>process_response(request, response, spider)</li>
</ul>
<p>Downloader 执行 Request 下载之后，会得到对应的 Response，Scrapy 引擎便会将 Response 发送给 Spider 进行解析。发送之前，可以用 process_response 方法对 Response 进行处理。返回值必须为 None、Response对象、Request 对象之一，或者抛出 IgnoreRequest 异常</p>
<ul>
<li>process_exception(request, exception, spider)</li>
</ul>
<p>Downloader 或 process_rqeuest() 方法抛出异常时被调用</p>
<h5 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h5><p>新建项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy startproject scrapydownloadertest</span><br></pre></td></tr></table></figure>

<p>进入项目新建 Spider， 名为 httpbin</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd scrapydownloadertest</span><br><span class="line">scrapy genspider httpbin httpbin.org</span><br></pre></td></tr></table></figure>

<p>修改内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpbinSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">  name = <span class="string">&#x27;httpbin&#x27;</span></span><br><span class="line">  allowed_domains = [<span class="string">&#x27;httpbin.org&#x27;</span>]</span><br><span class="line">  start_urls = [<span class="string">&#x27;http://httpbin.org/get&#x27;</span>]</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">      self.logger.debug(response.text)</span><br></pre></td></tr></table></figure>

<p>运行  <code>scrapy crawl httpbin</code></p>
<p>运行结果包含 Scrapy 发送的 Request 信息 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> DEBUG: &#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;,</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8&quot;,</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class="line">    &quot;Accept-Language&quot;: &quot;en&quot;,</span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Scrapy&#x2F;2.4.1 (+https:&#x2F;&#x2F;scrapy.org)&quot;,</span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-625fa44b-7de6f90f1696c8d44ba334ab&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;origin&quot;: &quot;14.155.91.98&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改 User-Agent 两种方式</li>
</ul>
<p>第一种修改 settings 里的 USER_AGENT 变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USERAGENT &#x3D; &#39;xxxx&#39;</span><br></pre></td></tr></table></figure>

<p>如果想设置更灵活，比如随机 User-Agent，需要借助 Downloader Middleware</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomUserAgentMiddleware</span>():</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">      self.user_agents = [</span><br><span class="line">          <span class="string">&#x27;xxx1&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;xxx2&#x27;</span>,</span><br><span class="line">      ]</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">      request.headers[<span class="string">&#x27;User-Agent&#x27;</span>] = random.choice(self.user_agents)</span><br></pre></td></tr></table></figure>

<p>要使这个 Downloader Middleware 生效还要去调用它，在 settings.py 中，将 DOWNLOADER_MIDDLEWARES 取消注释</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line"><span class="string">&#x27;scrapydownloadertest.middlewares.RandomUserAgentMiddleware&#x27;</span>: <span class="number">543</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次运行发现 User-Agent 被修改了 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DEBUG: &#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;,</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8&quot;,</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class="line">    &quot;Accept-Language&quot;: &quot;en&quot;,</span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;xxx2&quot;,</span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-625fa838-4f44d9361feb25107824c407&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;origin&quot;: &quot;14.155.91.98&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改响应</li>
</ul>
<p>RandomUserAgentMiddleware 中添加 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self, response, spider</span>):</span></span><br><span class="line">    response.status = <span class="number">201</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p>再 Spider 的 parse() 方法添加输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.logger.debug(&#39;Status code:&#39; + str(response.status))</span><br></pre></td></tr></table></figure>

<h4 id="13-6-Spider-Middleware"><a href="#13-6-Spider-Middleware" class="headerlink" title="13.6 Spider Middleware"></a>13.6 Spider Middleware</h4><p>Spider Middleware 三个作用</p>
<p>Response 发送给 Spider 之前对 Response 进行处理</p>
<p>Request 发送给 Scheduler 之前对 Request 进行处理</p>
<p>Item 发送给 Item Pipeline 之前对 Item 进行处理</p>
<p>Scrapy 已经提供了许多 Spider Middleware，被 SPIDER_MIDDLEWARES_BASE 变量定义</p>
<p>Spider Middleware 4个核心方法，只需要实现其中一个方法就可以定义一个 Spider Middleware</p>
<ul>
<li>process_spider_input(response, spider)</li>
</ul>
<p>Response 被 Spider Middleware 处理时被调用</p>
<p>返回 None 或者抛出异常</p>
<ul>
<li>process_spider_output(response, result, spider)</li>
</ul>
<p>当 Spider 处理 Response 返回结果时被调用</p>
<p>必须返回包含 Request 或 Item 对象的可迭代对象</p>
<ul>
<li>process_spider_exception(response, exception, spider)</li>
</ul>
<p>Spider 或 process_spider_input 方法抛出异常时调用</p>
<ul>
<li>process_start_requests(start_requests, spider)</li>
</ul>
<h4 id="13-6-Item-Pipeline"><a href="#13-6-Item-Pipeline" class="headerlink" title="13.6 Item Pipeline"></a>13.6 Item Pipeline</h4><p>参考使用 Item Pipeline</p>
<h4 id="爬取-360摄影美图"><a href="#爬取-360摄影美图" class="headerlink" title="爬取 360摄影美图"></a>爬取 360摄影美图</h4><h5 id="构造请求"><a href="#构造请求" class="headerlink" title="构造请求"></a>构造请求</h5><h5 id="MongoDB存储"><a href="#MongoDB存储" class="headerlink" title="MongoDB存储"></a>MongoDB存储</h5><h5 id="MySQL-存储"><a href="#MySQL-存储" class="headerlink" title="MySQL 存储"></a>MySQL 存储</h5><h5 id="Image-Pipeline"><a href="#Image-Pipeline" class="headerlink" title="Image Pipeline"></a>Image Pipeline</h5><p>Scrapy 提供了专门处理下载的 Pipeline，包括下载文件和图片，下载过程支持异步和多线程</p>
<p>官方文档地址 <a href="https://doc.scrapy.org/en/latest/topics/media-pipeline.html">https://doc.scrapy.org/en/latest/topics/media-pipeline.html</a></p>
<p>首先定义文件存储的路径，需要定义一个 IMAGES_STORE 变量，在settings.py 添加代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IMAGES_STORE &#x3D; &#39;.&#x2F;images&#39;</span><br></pre></td></tr></table></figure>

<p>下载的图片都会保存到当前路径的 images 子文件夹下</p>
<p>内置的 ImagesPipeline 会默认读取 Item 的 image_urls 字段，并认为字段是一个列表形式，它会遍历 Item 的 image_urls 字段，然后取出每个 URL 进行图片下载</p>
<p>现在生成的 Item 的图片链接字段并不是 image_urls 字段表示的，也不是列表形式，而是单个 URL</p>
<p>所以为了实现下载，需要重新定义下载部分逻辑，即要自定义 ImagePipeline，继承自内置的 ImagesPipeline</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImagePipeline</span>(<span class="params">ImagesPipeline</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">file_path</span>(<span class="params">self, request, response=<span class="literal">None</span>, info=<span class="literal">None</span></span>):</span></span><br><span class="line">      url = request.url</span><br><span class="line">      file_name = url.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">-1</span>]</span><br><span class="line">      <span class="keyword">return</span> file_name</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">item_completed</span>(<span class="params">self, results, item, info</span>):</span></span><br><span class="line">      image_paths = [x[<span class="string">&#x27;path&#x27;</span>] <span class="keyword">for</span> ok, x <span class="keyword">in</span> results <span class="keyword">if</span> ok]</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> image_paths:</span><br><span class="line">          <span class="keyword">raise</span> DropItem(<span class="string">&#x27;Image Downloaded Failed&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_media_requests</span>(<span class="params">self, item, info</span>):</span></span><br><span class="line">      <span class="keyword">yield</span> Request(item[<span class="string">&#x27;url&#x27;</span>])</span><br></pre></td></tr></table></figure>

<ul>
<li>get_media_requests</li>
</ul>
<p>第一个参数 item 是爬取生成的 Item 对象，将它的 url 字段取出来，然后直接生成 Request对象，将此 Request 加入到调度队列，等待被调度，执行下载</p>
<ul>
<li>file_path</li>
</ul>
<p>这个方法用来返回保存的文件名，直接将图片链接最后一部分当作文件名即可，用 split 函数分割拼接并提取最后一部分</p>
<ul>
<li>item_completed</li>
</ul>
<p>它是单个 Item 完成下载时的处理方法，并不是每张图都会下载成功，需要分析下载结果剔除下载失败的图片，没下载成功就不需要保存 Item 到数据库</p>
<p>方法第一个参数 results 就是该 Item 对应下载结果，是一个列表形式，列表每一个元素是一个元组，其中包含了下载成功或失败的信息</p>
<p>这里遍历下载结果找出所有成功的下载列表。</p>
<h4 id="13-8-Scrapy-对接-Selenium"><a href="#13-8-Scrapy-对接-Selenium" class="headerlink" title="13.8 Scrapy 对接 Selenium"></a>13.8 Scrapy 对接 Selenium</h4><p>Scrapy 抓取页面的方式和 requests 库类似，都是直接模拟 HTTP 请求</p>
<p>前面抓取 JavaScript 渲染的页面有两种方式。一种是分析 Ajax 请求，找到对应的接口抓取，Scrapy 同样也可以用这种方法抓取。另一种是用 Selenium 或 Splash 模拟浏览器进行抓取，不需要关心页面后台发生的请求，也不需要分析渲染过程，只需要关心页面最终结果，即可见即可爬</p>
<h5 id="对接-Selenium"><a href="#对接-Selenium" class="headerlink" title="对接 Selenium"></a>对接 Selenium</h5><p>对接 Selenium 进行抓取，采用 Downloader Middleware 来实现，在 Middleware 里面的 process_request() 方法里对每个抓取请求进行处理，启动浏览器进行页面渲染，再将渲染后的结果构造一个 HtmlResponse 对象返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</span><br><span class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> getLogger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeleniumMiddleware</span>():</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, timeout=<span class="literal">None</span>, service_args=[]</span>):</span></span><br><span class="line">      self.logger = getLogger(__name__)</span><br><span class="line">      self.timeout = timeout</span><br><span class="line">      self.browser = webdriver.PhantomJS(service_args=service_args)</span><br><span class="line">      self.browser.set_window_size(<span class="number">1400</span>, <span class="number">700</span>)</span><br><span class="line">      self.browser.set_page_load_timeout(self.timeout)</span><br><span class="line">      self.wait = WebDriverWait(self.browser, self.timeout)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">      self.browser.close()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">      用PhantomJS抓取页面</span></span><br><span class="line"><span class="string">      :param request: Request对象</span></span><br><span class="line"><span class="string">      :param spider: Spider对象</span></span><br><span class="line"><span class="string">      :return: HtmlResponse</span></span><br><span class="line"><span class="string">      &quot;&quot;&quot;</span></span><br><span class="line">      self.logger.debug(<span class="string">&#x27;PhantomJS is Starting&#x27;</span>)</span><br><span class="line">      page = request.meta.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          self.browser.get(request.url)</span><br><span class="line">          <span class="keyword">if</span> page &gt; <span class="number">1</span>:</span><br><span class="line">              <span class="built_in">input</span> = self.wait.until(</span><br><span class="line">                  EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">&#x27;#mainsrp-pager div.form &gt; input&#x27;</span>)))</span><br><span class="line">              submit = self.wait.until(</span><br><span class="line">                  EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">&#x27;#mainsrp-pager div.form &gt; span.btn.J_Submit&#x27;</span>)))</span><br><span class="line">              <span class="built_in">input</span>.clear()</span><br><span class="line">              <span class="built_in">input</span>.send_keys(page)</span><br><span class="line">              submit.click()</span><br><span class="line">          self.wait.until(</span><br><span class="line">              EC.text_to_be_present_in_element((By.CSS_SELECTOR, <span class="string">&#x27;#mainsrp-pager li.item.active &gt; span&#x27;</span>), <span class="built_in">str</span>(page)))</span><br><span class="line">          self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">&#x27;.m-itemlist .items .item&#x27;</span>)))</span><br><span class="line">          <span class="keyword">return</span> HtmlResponse(url=request.url, body=self.browser.page_source, request=request, encoding=<span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">                              status=<span class="number">200</span>)</span><br><span class="line">      <span class="keyword">except</span> TimeoutException:</span><br><span class="line">          <span class="keyword">return</span> HtmlResponse(url=request.url, status=<span class="number">500</span>, request=request)</span><br><span class="line"></span><br><span class="line"><span class="meta">  @classmethod</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span>(<span class="params">cls, crawler</span>):</span></span><br><span class="line">      <span class="keyword">return</span> cls(timeout=crawler.settings.get(<span class="string">&#x27;SELENIUM_TIMEOUT&#x27;</span>),</span><br><span class="line">                 service_args=crawler.settings.get(<span class="string">&#x27;PHANTOMJS_SERVICE_ARGS&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>process_request() 方法中，通过 Request 的 meta 属性获取当前需要爬取的页码，调用 PhantomJS 对象的 get() 方法访问 Request 对应的 URL，相当于从 Request 对象里获取请求链接，然后再用 PhantomJS 加载，而不再用 Scrapy 里的 Downloader</p>
<h5 id="解析页面"><a href="#解析页面" class="headerlink" title="解析页面"></a>解析页面</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">	products = response.xpath(..)</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

<p>使用 XPath 进行解析，调用 response 变量的 xpath() 方法</p>
<h4 id="13-9-Scrapy-对接-Splash"><a href="#13-9-Scrapy-对接-Splash" class="headerlink" title="13.9 Scrapy 对接 Splash"></a>13.9 Scrapy 对接 Splash</h4><p>Splash 和 Scrapy 都支持异步处理</p>
<p>在 Selenium 的对接过程中，每个页面的渲染下载是在 Downloader Middleware 里完成的，所以整个过程是阻塞式的。Scrapy 会等待这个过程完成后再继续处理和调度其它请求，影响了爬取效率，因此使用 Splash 的爬取效率币 Selenium 高很多</p>
<h4 id="13-10-通用爬虫"><a href="#13-10-通用爬虫" class="headerlink" title="13.10 通用爬虫"></a>13.10 通用爬虫</h4><h5 id="CrawSpider"><a href="#CrawSpider" class="headerlink" title="CrawSpider"></a>CrawSpider</h5><p>官方文档 <a href="https://docs.scrapy.org/en/latest/topics/spiders.html#crawlspider">https://docs.scrapy.org/en/latest/topics/spiders.html#crawlspider</a></p>
<p>Scrapy 提供的一个通用爬虫，在 Spider 里，可以指定一些爬取规则来实现页面的提取，这些爬取规则由一个专门 的数据结构 Rule 表示，Rule 里包含提取和跟进页面的配置，Spider 会根据 Rule 来确定当前页面中的哪些链接需要继续爬取、哪些页面的爬取结果需要用哪个方法解析</p>
<p>CrawlSpider 类继承自 Spider 类</p>
<p>rules：爬取规则属性，是包含一个或多个 Rule 对象的列表。每个 Rule 对爬取网站的动作都做了定义，CrawlSpider 会读取 rules 的每一个 Rule 并进行解析</p>
<p>parse_start_url()：是一个可重写的方法，当 start_urls 里对应的 Request 得到 Response 时，该方法被调用，会解析 Response 并必须返回 Item 对象或者 Request 对象</p>
<h6 id="Rule"><a href="#Rule" class="headerlink" title="Rule"></a>Rule</h6><p>定义页面的爬取逻辑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">contrib</span>.<span class="title">spiders</span>.<span class="title">Rule</span>(<span class="params">link_extractor, callback=<span class="literal">None</span>, cb_kwargs=<span class="literal">None</span>, follow=<span class="literal">None</span>, process_links=<span class="literal">None</span>, process_request=<span class="literal">None</span></span>)</span></span><br></pre></td></tr></table></figure>

<p>link_extractor：LinkExtractor 对象，通过它，Spider 可以知道从爬取的页面中提取哪些链接，提取的链接会自动生成 Request，一般常用 LxmlLinkExtractor 对象作为参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LxmlLinkExtractor</span>(<span class="params">FilteringLinkExtractor</span>):</span></span><br><span class="line">  	<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  	allow 正则表达式或正则表达式列表，定义从当前页面提取出的链接哪些是符合要求的，只有符合要求的链接才会被跟进；deny 则相反</span></span><br><span class="line"><span class="string">  	allow_domains 定义了符合要求的域名，在此域名的链接才会被跟进生成新的Request；deny_domains相反</span></span><br><span class="line"><span class="string">  	restrict_xpaths 从当前页面中XPath匹配的区域提取链接，值是XPath表达式或XPath表达式列表</span></span><br><span class="line"><span class="string">  	restrict_css 从当前页面中CSS选择器匹配的区域提取链接，值是CSS选择器或CSS选择器列表</span></span><br><span class="line"><span class="string">  	&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        self,</span></span></span><br><span class="line"><span class="function"><span class="params">        allow=(<span class="params"></span>),</span></span></span><br><span class="line"><span class="function"><span class="params">        deny=(<span class="params"></span>),</span></span></span><br><span class="line"><span class="function"><span class="params">        allow_domains=(<span class="params"></span>),</span></span></span><br><span class="line"><span class="function"><span class="params">        deny_domains=(<span class="params"></span>),</span></span></span><br><span class="line"><span class="function"><span class="params">        restrict_xpaths=(<span class="params"></span>),</span></span></span><br><span class="line"><span class="function"><span class="params">        tags=(<span class="params"><span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;area&#x27;</span></span>),</span></span></span><br><span class="line"><span class="function"><span class="params">        attrs=(<span class="params"><span class="string">&#x27;href&#x27;</span>,</span>),</span></span></span><br><span class="line"><span class="function"><span class="params">        canonicalize=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        unique=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        process_value=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        deny_extensions=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        restrict_css=(<span class="params"></span>),</span></span></span><br><span class="line"><span class="function"><span class="params">        strip=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        restrict_text=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>):</span></span><br></pre></td></tr></table></figure>

<p>callback：回调函数，每次从 link_extractor 中获取到链接时，该函数会被调用</p>
<p>避免使用 parse() 作为回调函数，由于 CrawlSpider 使用 parse() 方法来实现逻辑，如果 parse() 方法被覆盖了，CrawlSpider 将会运行失败</p>
<p>cb_kwargs：字典，它包含传递给回调函数的参数</p>
<p>follow：True 或 False，指定跟进规则从 Response 提取的链接是否需要跟进，如果 callback 为 None，follow 默认设置为 True，否则默认为 False</p>
<p>True，下一页的页面如果请求成功了就需要继续像上一个一样分析，代表继续跟进匹配分析</p>
<p>。。。</p>
<h6 id="Item-Loader"><a href="#Item-Loader" class="headerlink" title="Item Loader"></a>Item Loader</h6><p>提供一种便捷的机制帮助我们方便地提取 Item</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">loader</span>.<span class="title">ItemLoader</span>(<span class="params">[item, selector, response,] **kwargs</span>)</span></span><br><span class="line"><span class="class">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="class"><span class="title">item</span>:</span> Item对象，可以调用add_xpath()、add_css()、add_value()等方法来填充 Item对象</span><br><span class="line">selector: 是Selector对象，用来提取填充数据的选择器</span><br><span class="line">response: 是Response对象，用来使用构造选择器的Response</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>一个比较典型的Item Loader</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.loader <span class="keyword">import</span> ItemLoader</span><br><span class="line"><span class="keyword">from</span> project.items <span class="keyword">import</span> Product</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">loader = ItemLoader(item=Product(), response=response)</span><br><span class="line">loader.add_xpath(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;//div[@class=&quot;procuct_name&quot;]&#x27;</span>)</span><br><span class="line">loader.add_css(<span class="string">&#x27;stock&#x27;</span>, <span class="string">&#x27;p#stock&#x27;</span>)</span><br><span class="line">loader.add_value(<span class="string">&#x27;last_update&#x27;</span>, <span class="string">&#x27;today&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> loader.load_item()</span><br></pre></td></tr></table></figure>

<p>Item Loader 每个字段中都包含了一个 Input Processor(输入处理器) 和 一个 Output Processor(输出处理器)</p>
<p>InputProcessor 收到数据时立刻提取数据，保存到 ItemLoader 内，但不会分配给Item load_item 调用来生成 Item 对象。调用时会先调用  Output Processor 来处理之前收集到的数据，然后在存入 Item 中</p>
<p>一些内置 Processor</p>
<ul>
<li>Identity</li>
</ul>
<p>最简单的 Processor，不进行任何处理，直接返回原来的数据</p>
<ul>
<li>TakeFirst</li>
</ul>
<p>返回列表的第一个非空值，类似 extract_firs() 的功能，常用作 Output Processor</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.loader.processor <span class="keyword">import</span> TakeFirst</span><br><span class="line">processor = TakeFirst()</span><br><span class="line">print([<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>]) </span><br><span class="line"><span class="comment">#结果：输出 1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Join</li>
</ul>
<p>相当于字符串的 join()方法，可以把列表拼合成字符串，字符串默认使用空格分隔</p>
<p>也可以通过参数更改默认分隔符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.loader.processor <span class="keyword">import</span> Join</span><br><span class="line">processor = Join()</span><br><span class="line">print(processor([<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]))</span><br><span class="line"><span class="comment">#结果： one two three</span></span><br><span class="line">processor = Join(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="comment">#结果： one,two,three</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Compose</li>
</ul>
<p>是用给定的多个函数的组合而构造的 Processor，每个输入值被传递到第一个函数，其输出再传递到第二个函数，依次类推，知道最后一个函数返回整个处理器的输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.loader.processor <span class="keyword">import</span> Compose</span><br><span class="line">processor = Compose(<span class="built_in">str</span>.upper, <span class="keyword">lambda</span> s: s.strip())</span><br><span class="line">print(processor(<span class="string">&#x27; hello world&#x27;</span>))</span><br><span class="line"><span class="comment">#结果：HELLO WORLD</span></span><br></pre></td></tr></table></figure>

<p>第一个参数 str.upper，第二个是一个匿名函数，strip() 方法去除头尾空白字符，Compose 会顺次调用两个参数</p>
<ul>
<li>MapCompose</li>
</ul>
<p>与 Compose 类似，MapCompose可以迭代处理一个列表输入值</p>
<p>被处理对象是一个可迭代对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.loader.processor <span class="keyword">import</span> MapCompose</span><br><span class="line">processor = MapCompose(<span class="built_in">str</span>.upper, <span class="keyword">lambda</span> s: s.strip())</span><br><span class="line">print(processor([<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>]))</span><br><span class="line"><span class="comment">#结果：[&#x27;HELLO&#x27;, &#x27;WORLD&#x27;, &#x27;PYTHON&#x27;]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>SelectJmes</li>
</ul>
<p>SelectJmes 可以查询 JSON，传入 Key，返回查询所得到的 Value，要安装 jmespath 库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install jmespath</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.loader.processor <span class="keyword">import</span> SelectJmes</span><br><span class="line">processor = SeleJme(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">print(processor(&#123;<span class="string">&#x27;foo&#x27;</span>: <span class="string">&#x27;bar&#x27;</span>&#125;))</span><br><span class="line"><span class="comment">#结果：bar</span></span><br></pre></td></tr></table></figure>





<h5 id="爬取中华网科技类新闻"><a href="#爬取中华网科技类新闻" class="headerlink" title="爬取中华网科技类新闻"></a>爬取中华网科技类新闻</h5><p><a href="https://tech.china.com/articles/">https://tech.china.com/articles/</a> 爬取新闻列表中所有分页的新闻详情，包括标题、正文、时间、来源</p>
<h6 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h6><p>新建 Scrapy 项目，名为 scrapyuniversal</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy startproject scrapyuniversal</span><br></pre></td></tr></table></figure>

<p>创建一个 CrawlSpider，需要先指定一个模板，看看哪些模板可用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy genspider -l</span><br><span class="line">#运行结果</span><br><span class="line">Available templates:</span><br><span class="line">  basic</span><br><span class="line">  crawl</span><br><span class="line">  csvfeed</span><br><span class="line">  xmlfeed</span><br></pre></td></tr></table></figure>

<p>创建 Spider 的时候默认使用了第一个模板 basic，要创建 CrawlSpider 选择 crawl 模板</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy genspider -t crawl china tech.china.com</span><br></pre></td></tr></table></figure>

<p>生成的 Spider 内容多了一个 rules，回调函数不再是 parse，而是 parse_item</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rules = (</span><br><span class="line">    Rule(LinkExtractor(allow=<span class="string">r&#x27;Items/&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">True</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h6 id="定义-Rule"><a href="#定义-Rule" class="headerlink" title="定义 Rule"></a>定义 Rule</h6><p>要实现新闻的爬取，需要做的就是定义好 Rule，然后实现解析函数</p>
<p>修改 start_urls </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">start_urls = [<span class="string">&#x27;http://tech.china.com/articles/&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>Spider 爬取 start_urls 里的每一个链接，得到 Response 之后，Spider 就会根据 Rule 里来提取这个页面内的超链接，去生成进一步的 Request，接下来定义 Rule 来指定提取哪些链接</p>
<p>将新闻列表中每条新闻的详情链接提取出来</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wntjItem item_defaultView clearfix&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item_con&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 0px;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-con-inner&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;tit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://tech.china.com/article/20220224/202202241016344.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>世界首台量子重力仪“走出实验室”，对学界、业界和国家安全等将具有深远影响<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item_foot&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;time&quot;</span>&gt;</span>2022-02-24 05:59<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item_num&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;s-nub&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以用 LinkExtractor 的 restrict_xpaths 属性来指定，之后 Spider 就会从这个区域提取所有超链接生成 Request。</p>
<p>但是每篇文章的导航中可能还有一些其它超链接标签，我们只需要新闻的超链接，真正新闻超链接路径都是以article开头的，用一个正则表达式将其匹配出来再赋值给 allow 即可，还需要指定一个回调函数 callback</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rules = (</span><br><span class="line">  Rule(LinkExtractor(allow=<span class="string">&#x27;article\/.*\.html&#x27;</span>, restrict_xpaths=<span class="string">&#x27;//[@id=&quot;rank-defList&quot;]//[@class=&quot;tit&quot;]&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">True</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>还要让当前页面实现分页功能，所以还需要提取下一页的链接</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pages&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;a1&quot;</span>&gt;</span>12219条<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://tech.china.com/articles/index.html&quot;</span> <span class="attr">class</span>=<span class="string">&quot;a1&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://tech.china.com/articles/index_2.html&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://tech.china.com/articles/index_9.html&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://tech.china.com/articles/index_10.html&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">a</span>&gt;</span> ..</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://tech.china.com/articles/index_489.html&quot;</span>&gt;</span>489<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://tech.china.com/articles/index_2.html&quot;</span> <span class="attr">class</span>=<span class="string">&quot;a1&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span>	</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再加一个 Rule</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Rule(LinkExtractor(restrict_xpaths=<span class="string">&#x27;//div[@class=&quot;pages&quot;]//a[contains(., &quot;下一页&quot;)]&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>不需要像新闻详情页一样去提取页面详细信息，也就是不需要生成 Item，所以不需要加 callback 参数</p>
<p>接着运行代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy crawl china</span><br></pre></td></tr></table></figure>

<p>查看输出，实现了翻页和详情页的抓取了</p>
<h6 id="解析页面-1"><a href="#解析页面-1" class="headerlink" title="解析页面"></a>解析页面</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    loader = ChinaLoader(item=NewsItem(), response=response)</span><br><span class="line">    loader.add_xpath(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;//h1[@id=&quot;chan_newsTitle&quot;]/text()&#x27;</span>)</span><br><span class="line">    loader.add_value(<span class="string">&#x27;url&#x27;</span>, response.url)</span><br><span class="line">    loader.add_xpath(<span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;//div[@id=&quot;chan_newsDetail&quot;]/text()&#x27;</span>)</span><br><span class="line">    loader.add_xpath(<span class="string">&#x27;datetime&#x27;</span>, <span class="string">&#x27;//div[@id=&quot;chan_newsInfo&quot;]//*[@class=&quot;time&quot;]/text()&#x27;</span>,re=<span class="string">&#x27;(\d+-\d+-\d+\s\d+:\d+:\d+)&#x27;</span>)</span><br><span class="line">    loader.add_xpath(<span class="string">&#x27;source&#x27;</span>, <span class="string">&#x27;//div[@id=&quot;chan_newsInfo&quot;]//*[@class=&quot;source&quot;]/text()&#x27;</span>, re=<span class="string">&#x27;来源：(.*)&#x27;</span>)</span><br><span class="line">    loader.add_value(<span class="string">&#x27;website&#x27;</span>, <span class="string">&#x27;中华网&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> loader.load_item()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.loader <span class="keyword">import</span> ItemLoader</span><br><span class="line"><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> TakeFirst, Join, Compose</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsLoader</span>(<span class="params">ItemLoader</span>):</span></span><br><span class="line">  default_output_processor = TakeFirst()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChinaLoader</span>(<span class="params">NewsLoader</span>):</span></span><br><span class="line">  text_out = Compose(Join(), <span class="keyword">lambda</span> s: s.strip()) <span class="comment">#把列表拼合成一个字符串</span></span><br><span class="line">  source_out = Compose(Join(), <span class="keyword">lambda</span> s: s.strip())</span><br></pre></td></tr></table></figure>

<h6 id="通用配置抽取"><a href="#通用配置抽取" class="headerlink" title="通用配置抽取"></a>通用配置抽取</h6><h4 id="13-11-Scrapyt"><a href="#13-11-Scrapyt" class="headerlink" title="13.11 Scrapyt"></a>13.11 Scrapyt</h4><p>Scrapyt 为 Scrapy 提供了一个调度的 HTTP 接口，有了它就不需要再执行 Scrapy 命令，而是通过请求一个 HTTP 接口即可调度 Scrapy 任务，如果项目是在远程服务器运行，可以利用它来启动项目</p>
<h5 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h5><p>支持如下参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">spider_name：Spider 名称</span></span><br><span class="line"><span class="string">url：爬取链接，如果传递了该参数，Scrapy会直接使用该URL生成Request，而直接忽略start_requests()方法和start_urls属性的定义</span></span><br><span class="line"><span class="string">callback：回调函数名称</span></span><br><span class="line"><span class="string">max_requests：最大请求数量，可选，如定义5，表示最多执行5次Request请求，其余会被忽略</span></span><br><span class="line"><span class="string">start_requests：是否要执行start_requests方法，布尔类型，可选，Scrapy项目中如果定义了start_requests方法，项目启动时会默认调用该方法，Scrapyrt中就不一样，默认不执行start_requests方法，如果要执行start_requests，设置为true</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在项目目录下运行 Scrapyrt，默认服务运行在 9080 端口上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;localhost:9080&#x2F;crawl.json\?spider_name\&#x3D;china\&amp;url\&#x3D;http:&#x2F;&#x2F;tech.china.com&#x2F;articles&#x2F;</span><br></pre></td></tr></table></figure>

<p>会返回一个 JSON 格式，status 显示了爬取状态，items 部分是项目的爬取结果，stats 是爬取的统计情况，items_dropped 是被忽略的 Item 列表</p>
<h5 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h5><p>Request Body 必须是一个合法的JSON配置，JSON里面可以配置响应的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">spider_name</span></span><br><span class="line"><span class="string">max_requests</span></span><br><span class="line"><span class="string">request: Request配置，JSON对象，必传参数，通过该参数可以定义Request的各个参数，必须指定url字段指定爬取链接,其它参数可选</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>JSON配置实例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;request&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;http://quotes.toscrape.com/&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;callback&quot;</span>: <span class="string">&quot;parse&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dont_filter&quot;</span>: <span class="string">&quot;True&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cookies&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;foo&quot;</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;max_requests&quot;</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;spider_name&quot;</span>:quotes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行下面命令传递该JSON配置并发起POST请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;localhost:9080&#x2F;crawl.json -d &#39;&#123;&quot;requests&quot;...JSON字符串&#125;&#39;</span><br></pre></td></tr></table></figure>

<h4 id="Scrapy对接Docker"><a href="#Scrapy对接Docker" class="headerlink" title="Scrapy对接Docker"></a>Scrapy对接Docker</h4><p>把 Scrapy 项目制作成一个 Docker 镜像，只要其它主机安装了 Docker，那么只要将镜像下载并运行即可，而不必担心环境问题或版本问题</p>
<h5 id="创建Dockerfile"><a href="#创建Dockerfile" class="headerlink" title="创建Dockerfile"></a>创建Dockerfile</h5><p>项目根目录下新建 requirements.txt，将整个项目依赖的 Python 环境包都列出来，如</p>
<p>如果库需要特定的版本，还可以指定版本号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy</span><br><span class="line">pymongo</span><br><span class="line">scrapy&gt;&#x3D;1.4.0</span><br><span class="line">pymongo&gt;&#x3D;3.4.0</span><br></pre></td></tr></table></figure>

<p>根目录下新建 Dockerfile 没有后缀，修改内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM python:3.8 </span><br><span class="line">ENV PATH &#x2F;usr&#x2F;local&#x2F;bin:$PATH</span><br><span class="line">ADD . &#x2F;code</span><br><span class="line">WORKDIR &#x2F;code</span><br><span class="line">RUN pip3.8 install -r requirements.txt</span><br><span class="line">CMD scrapy crawl china</span><br><span class="line">#第一行From代表使用 Docker 基础镜像，这里直接使用 python:3.8的镜像，在此基础上运行项目</span><br><span class="line">#第二行ENV是环境变量设置，增加&#x2F;usr&#x2F;local&#x2F;bin这个环境变量路径</span><br><span class="line">#第三行ADD是将本地的代码放置到虚拟容器中 .本地当前路径 &#x2F;code代表虚拟容器中的路径</span><br><span class="line">#第四行WORKDIR是指定工作目录，这里将刚添加的代码路径设置成工作路径</span><br><span class="line">#第五行RUN是执行某些命令来做一些环境准备工作</span><br><span class="line">#第六行CMD是容器启动命令，容器运行时，此命令会被执行</span><br></pre></td></tr></table></figure>

<h5 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker build -t china:latest .</span><br></pre></td></tr></table></figure>

<p>构建成功后，查看镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line">#china latest 41c797934ce 2 minutes ago 768M</span><br></pre></td></tr></table></figure>

<h5 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h5><p>镜像可以本地测试运行，这样就利用此镜像新建并运行了一个 Docker 容器，运行效果完全一致</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run china</span><br></pre></td></tr></table></figure>

<h5 id="推送至-Docker-Hub"><a href="#推送至-Docker-Hub" class="headerlink" title="推送至 Docker Hub"></a>推送至 Docker Hub</h5><p>构建完成后，可以将镜像 Push 到 Docker 镜像托管平台，Docker Hub 或者私有的 Docker Registry 等，这样就可以从远程服务器下载镜像并运行了</p>
<p><a href="https://hub.docker.com/">https://hub.docker.com</a> 注册账号，新建一个 Reponsitory，名为 quotes，比如用户名为 germey，那么此 Reponsitory 的地址就可以用 germey/quotes 来表示</p>
<p>打标签，推送镜像到 Docker Hub</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker tag quotes:latest germey&#x2F;quotes:latest</span><br><span class="line">docker push germey&#x2F;quotes</span><br></pre></td></tr></table></figure>

<p>如果我们想在其他的主机上运行这个镜像，主机上装好 Docker 后，运行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run germey&#x2F;quotes</span><br></pre></td></tr></table></figure>

<p>会自动下载镜像，启动容器运行，不需要配置 Python 环境，不需要关系版本冲突的问题</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>ReactiveObjC</title>
    <url>/2022/05/20/ReactiveObjC/</url>
    <content><![CDATA[<h4 id="RACSignal"><a href="#RACSignal" class="headerlink" title="RACSignal"></a>RACSignal</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用步骤</span></span><br><span class="line"><span class="comment">// 1.创建信号 + (RACSignal *)createSignal:(RACDisposable * (^)(id&lt;RACSubscriber&gt; subscriber))didSubscribe</span></span><br><span class="line"><span class="comment">// 2.订阅信号,才会激活信号. - (RACDisposable *)subscribeNext:(void (^)(id x))nextBlock</span></span><br><span class="line"><span class="comment">// 3.发送信号 - (void)sendNext:(id)value</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RACSignal底层实现：</span></span><br><span class="line"><span class="comment">// 1.创建信号，首先把didSubscribe保存到信号中，还不会触发。</span></span><br><span class="line"><span class="comment">// 2.当信号被订阅，也就是调用signal的subscribeNext:nextBlock</span></span><br><span class="line"><span class="comment">// 2.2 subscribeNext内部会创建订阅者subscriber，并且把nextBlock保存到subscriber中。</span></span><br><span class="line"><span class="comment">// 2.1 subscribeNext内部会调用siganl的didSubscribe</span></span><br><span class="line"><span class="comment">// 3.siganl的didSubscribe中调用[subscriber sendNext:@1];</span></span><br><span class="line"><span class="comment">// 3.1 sendNext底层其实就是执行subscriber的nextBlock</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建信号</span></span><br><span class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * (<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">    <span class="comment">// block调用时刻：每当有订阅者订阅信号，就会调用block</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.发送信号</span></span><br><span class="line">    [subscriber sendNext:@<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果不再发送数据，最好发送信号完成，内部会自动调用[RACDisposable disposable]取消订阅信号</span></span><br><span class="line">    [subscriber sendCompleted];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [RACDisposable disposableWithBlock:^&#123;</span><br><span class="line">        <span class="comment">// block调用时刻：当信号发送完成或者发送错误，就会自动执行这个block,取消订阅信号</span></span><br><span class="line">        <span class="comment">// 执行完Block后，当前信号就不在被订阅了</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;信号被销毁&quot;</span>);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.订阅信号，才会激活信号</span></span><br><span class="line">[signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="comment">//block调用时刻：每当有信号发出数据，就会调用block</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;接收到数据：%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">接收到数据：1</span></span><br><span class="line"><span class="comment">信号被销毁</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="RacSubscribe"><a href="#RacSubscribe" class="headerlink" title="RacSubscribe"></a>RacSubscribe</h4><p>表示订阅者的意思，用于发送信号，这是一个协议，不是一个类，只要遵守了这个协议，并且实现方法才能成为订阅者。通过 create 创建的信号，都有一个订阅者，帮助发送数据</p>
<h4 id="RACDisposable"><a href="#RACDisposable" class="headerlink" title="RACDisposable"></a>RACDisposable</h4><p>用于取消订阅或者清理资源，当信号发送完成或者发送错误的时候，就会自动触发它</p>
<p>不想监听某个信号时，可以通过它主动取消订阅信号</p>
<h4 id="RACSubject"><a href="#RACSubject" class="headerlink" title="RACSubject"></a>RACSubject</h4><p>信号提供者，自己可以充当信号，又能发送信号</p>
<p>通常用来代替代理，有了它，就不必要定义代理了</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用步骤</span></span><br><span class="line"><span class="comment">// 1.创建信号 [RACSubject subject]，跟RACSiganl不一样，创建信号时没有block。</span></span><br><span class="line"><span class="comment">// 2.订阅信号 - (RACDisposable *)subscribeNext:(void (^)(id x))nextBlock</span></span><br><span class="line"><span class="comment">// 3.发送信号 sendNext:(id)value</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 底层实现</span></span><br><span class="line"><span class="comment">// RACSubject:底层实现和RACSignal不一样。</span></span><br><span class="line"><span class="comment">// 1.调用subscribeNext订阅信号，只是把订阅者保存起来，并且订阅者的nextBlock已经赋值了。</span></span><br><span class="line"><span class="comment">// 2.调用sendNext发送信号，遍历刚刚保存的所有订阅者，一个一个调用订阅者的nextBlock</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单使用</span></span><br><span class="line"><span class="comment">//1.创建信号</span></span><br><span class="line">RACSubject *subject = [RACSubject subject];</span><br><span class="line"><span class="comment">//2.订阅信号</span></span><br><span class="line">[subject subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;第一个订阅者%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line">[subject subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;第二个订阅者%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">//3.发送信号</span></span><br><span class="line">[subject sendNext:<span class="string">@&quot;1&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果</span></span><br><span class="line"><span class="comment">第一个订阅者1</span></span><br><span class="line"><span class="comment">第二个订阅者1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h5 id="RACSubject-替换代理"><a href="#RACSubject-替换代理" class="headerlink" title="RACSubject 替换代理"></a>RACSubject 替换代理</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 需求:</span></span><br><span class="line"><span class="comment">// 1.给当前控制器添加一个按钮，modal到另一个控制器界面</span></span><br><span class="line"><span class="comment">// 2.另一个控制器view中有个按钮，点击按钮，通知当前控制器</span></span><br><span class="line"></span><br><span class="line">步骤一：在第二个控制器.h，添加一个RACSubject代替代理。</span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">TwoViewController</span> : <span class="title">UIViewController</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACSubject *delegateSignal;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line">步骤二：监听第二个控制器按钮点击</span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">TwoViewController</span></span></span><br><span class="line">- (<span class="keyword">IBAction</span>)notice:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">   <span class="comment">// 通知第一个控制器，告诉它，按钮被点了</span></span><br><span class="line">   <span class="comment">// 通知代理</span></span><br><span class="line">   <span class="comment">// 判断代理信号是否有值</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">self</span>.delegateSignal) &#123;</span><br><span class="line">      <span class="comment">// 有值，才需要通知</span></span><br><span class="line">      [<span class="keyword">self</span>.delegateSignal sendNext:<span class="literal">nil</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line">步骤三：在第一个控制器中，监听跳转按钮，给第二个控制器的代理信号赋值，并且监听.</span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">OneViewController</span> </span></span><br><span class="line">- (<span class="keyword">IBAction</span>)btnClick:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">  <span class="comment">// 创建第二个控制器</span></span><br><span class="line">  TwoViewController *twoVc = [[TwoViewController alloc] init];</span><br><span class="line">  <span class="comment">// 设置代理信号</span></span><br><span class="line">  twoVc.delegateSignal = [RACSubject subject];</span><br><span class="line">  <span class="comment">// 订阅代理信号</span></span><br><span class="line">  [twoVc.delegateSignal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@&quot;点击了通知按钮&quot;</span>);</span><br><span class="line">  &#125;];</span><br><span class="line">  <span class="comment">// 跳转到第二个控制器</span></span><br><span class="line">  [<span class="keyword">self</span> presentViewController:twoVc animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h4 id="RACReplaySubject"><a href="#RACReplaySubject" class="headerlink" title="RACReplaySubject"></a>RACReplaySubject</h4><p>重复提供信号类，RACSubject 的子类</p>
<p>区别：</p>
<p>RACReplaySubject 可以先发送信号，再订阅信号。RACSubject 就不可以</p>
<p>使用场景：</p>
<p>如果一个信号每被订阅一次，就需要把之前的值重复发送一遍，使用重复提供信号类</p>
<p>可以设置 capacity 数量来限制缓存的 value 的数量，即缓存最新的几个值</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RACReplaySubject使用步骤:</span></span><br><span class="line"><span class="comment">// 1.创建信号 [RACSubject subject]，跟RACSiganl不一样，创建信号时没有block。</span></span><br><span class="line"><span class="comment">// 2.可以先订阅信号，也可以先发送信号。</span></span><br><span class="line"><span class="comment">// 2.1 订阅信号 - (RACDisposable *)subscribeNext:(void (^)(id x))nextBlock</span></span><br><span class="line"><span class="comment">// 2.2 发送信号 sendNext:(id)value</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RACReplaySubject:底层实现和RACSubject不一样。</span></span><br><span class="line"><span class="comment">// 1.调用sendNext发送信号，把值保存起来，然后遍历刚刚保存的所有订阅者，一个一个调用订阅者的nextBlock。</span></span><br><span class="line"><span class="comment">// 2.调用subscribeNext订阅信号，遍历保存的所有值，一个一个调用订阅者的nextBlock</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果想当一个信号被订阅，就重复播放之前所有值，需要先发送信号，在订阅信号。</span></span><br><span class="line"><span class="comment">// 也就是先保存值，在订阅值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建信号</span></span><br><span class="line">RACReplaySubject *replaySubject = [RACReplaySubject subject];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.发送信号</span></span><br><span class="line">[replaySubject sendNext:@<span class="number">1</span>];</span><br><span class="line">[replaySubject sendNext:@<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.订阅信号</span></span><br><span class="line">[replaySubject subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@&quot;第一个订阅者接收到的数据%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅信号</span></span><br><span class="line">[replaySubject subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@&quot;第二个订阅者接收到的数据%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果</span></span><br><span class="line"><span class="comment">第一个订阅者接收到的数据1</span></span><br><span class="line"><span class="comment">第一个订阅者接收到的数据2</span></span><br><span class="line"><span class="comment">第二个订阅者接收到的数据1</span></span><br><span class="line"><span class="comment">第二个订阅者接收到的数据2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="RACTuple"><a href="#RACTuple" class="headerlink" title="RACTuple"></a>RACTuple</h4><p>元组类，类似 NSArray，用来包装值</p>
<h4 id="RACSequence"><a href="#RACSequence" class="headerlink" title="RACSequence"></a>RACSequence</h4><p>RAC 中的集合类，用于代替 NSArray，NSDictionary 可以使用它来快速遍历数组和字典</p>
<h5 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.遍历数组</span></span><br><span class="line"><span class="built_in">NSArray</span> *numbers = @[@<span class="number">1</span>, @<span class="number">2</span>, @<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里其实是三步</span></span><br><span class="line"><span class="comment">// 第一步: 把数组转换成集合RACSequence numbers.rac_sequence</span></span><br><span class="line"><span class="comment">// 第二步: 把集合RACSequence转换RACSignal信号类,numbers.rac_sequence.signal</span></span><br><span class="line"><span class="comment">// 第三步: 订阅信号，激活信号，会自动把集合中的所有值，遍历出来。</span></span><br><span class="line">[numbers.rac_sequence.signal subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h5 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.遍历字典,遍历出来的键值对会包装成RACTuple(元组对象)</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *dict = @&#123;<span class="string">@&quot;name&quot;</span>: <span class="string">@&quot;jack&quot;</span>, <span class="string">@&quot;age&quot;</span>: @<span class="number">18</span>&#125;;</span><br><span class="line">[dict.rac_sequence.signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">  <span class="comment">// 解包元组，会把元组的值，按顺序给参数里面的变量赋值</span></span><br><span class="line">  RACTupleUnpack(<span class="built_in">NSString</span> *key, <span class="built_in">NSString</span> *value) = x;</span><br><span class="line">  <span class="comment">// 相当于以下写法</span></span><br><span class="line">  <span class="comment">//NSString *key = x[0];</span></span><br><span class="line">  <span class="comment">//NSString *value = x[1];</span></span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;%@ %@&quot;</span>, key, value);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h5 id="拼接数组"><a href="#拼接数组" class="headerlink" title="拼接数组"></a>拼接数组</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *arr1 = @[<span class="string">@&quot;1&quot;</span>, <span class="string">@&quot;2”];</span></span><br><span class="line"><span class="string">NSArray *arr2 = @[@&quot;</span><span class="number">3</span><span class="string">&quot;, @&quot;</span><span class="number">4</span><span class="string">&quot;];</span></span><br><span class="line"><span class="string">NSArray *arr3 = @[arr1.rac_sequence, arr2.rac_sequence].rac_sequence.flatten.array;</span></span><br><span class="line"><span class="string">//arr3 两个数组相加 1 2 3 4</span></span><br></pre></td></tr></table></figure>

<h5 id="字典转模型"><a href="#字典转模型" class="headerlink" title="字典转模型"></a>字典转模型</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.1 OC写法</span></span><br><span class="line"><span class="built_in">NSString</span> *filePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@&quot;flags.plist&quot;</span> ofType:<span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSArray</span> *dictArr = [<span class="built_in">NSArray</span> arrayWithContentsOfFile:filePath];</span><br><span class="line"><span class="built_in">NSMutableArray</span> *items = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">NSDictionary</span> *dict <span class="keyword">in</span> dictArr) &#123;</span><br><span class="line">    FlagItem *item = [FlagItem flagWithDict:dict];</span><br><span class="line">    [items addObject:item];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.2 RAC写法</span></span><br><span class="line"><span class="built_in">NSString</span> *filePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@&quot;flags.plist&quot;</span> ofType:<span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSArray</span> *dictArr = [<span class="built_in">NSArray</span> arrayWithContentsOfFile:filePath];</span><br><span class="line"><span class="built_in">NSMutableArray</span> *flags = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">_flags = flags;</span><br><span class="line"><span class="comment">// rac_sequence注意点：调用subscribeNext，并不会马上执行nextBlock，而是会等一会。</span></span><br><span class="line">[dictArr.rac_sequence.signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="comment">// 运用RAC遍历字典，x：字典</span></span><br><span class="line">    FlagItem *item = [FlagItem flagWithDict:x];</span><br><span class="line">    [flags addObject:item];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 3.3 RAC高级写法:</span></span><br><span class="line"><span class="built_in">NSString</span> *filePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@&quot;flags.plist&quot;</span> ofType:<span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSArray</span> *dictArr = [<span class="built_in">NSArray</span> arrayWithContentsOfFile:filePath];</span><br><span class="line"><span class="comment">// map:映射的意思，目的：把原始值value映射成一个新值</span></span><br><span class="line"><span class="comment">// array: 把集合转换成数组</span></span><br><span class="line"><span class="comment">// 底层实现：当信号被订阅，会遍历集合中的原始值，映射成新值，并且保存到新的数组里。</span></span><br><span class="line"><span class="built_in">NSArray</span> *flags = [[dictArr.rac_sequence map:^<span class="keyword">id</span>(<span class="keyword">id</span> value) &#123;</span><br><span class="line">    <span class="keyword">return</span> [FlagItem flagWithDict:value];</span><br><span class="line">&#125;] array];</span><br></pre></td></tr></table></figure>

<h4 id="RACCommand"><a href="#RACCommand" class="headerlink" title="RACCommand"></a>RACCommand</h4><p>RAC 中用于处理事件的类，可以把事件如何处理，事件中的数据如何传递，包装到这个类中，可以方便的监控事件的整个过程</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一、RACCommand使用步骤:</span></span><br><span class="line"><span class="comment">// 1.创建命令 initWithSignalBlock:(RACSignal * (^)(id input))signalBlock</span></span><br><span class="line"><span class="comment">// 2.在signalBlock中，创建RACSignal，并且作为signalBlock的返回值</span></span><br><span class="line"><span class="comment">// 3.执行命令 - (RACSignal *)execute:(id)input</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二、RACCommand使用注意:</span></span><br><span class="line"><span class="comment">// 1.signalBlock必须要返回一个信号，不能传nil.</span></span><br><span class="line"><span class="comment">// 2.如果不想要传递信号，直接创建空的信号[RACSignal empty];</span></span><br><span class="line"><span class="comment">// 3.RACCommand中信号如果数据传递完，必须调用[subscriber sendCompleted]，这时命令才会执行完毕，否则永远处于执行中。</span></span><br><span class="line"><span class="comment">// 4.RACCommand需要被强引用，否则接收不到RACCommand中的信号，因此RACCommand中的信号是延迟发送的</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 三、RACCommand设计思想：内部signalBlock为什么要返回一个信号，这个信号有什么用。</span></span><br><span class="line"><span class="comment">// 1.在RAC开发中，通常会把网络请求封装到RACCommand，直接执行某个RACCommand就能发送请求。</span></span><br><span class="line"><span class="comment">// 2.当RACCommand内部请求到数据的时候，需要把请求的数据传递给外界，这时候就需要通过signalBlock返回的信号传递了</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 四、如何拿到RACCommand中返回信号发出的数据。</span></span><br><span class="line"><span class="comment">// 1.RACCommand有个执行信号源executionSignals，这个是signal of signals(信号的信号),意思是信号发出的数据是信号，不是普通的类型。</span></span><br><span class="line"><span class="comment">// 2.订阅executionSignals就能拿到RACCommand中返回的信号，然后订阅signalBlock返回的信号，就能获取发出的值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 五、监听当前命令是否正在执行executing</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 六、使用场景,监听按钮点击，网络请求</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.创建命令</span></span><br><span class="line">RACCommand *command = [[RACCommand alloc] initWithSignalBlock:^RACSignal * (<span class="keyword">id</span> input) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;执行命令&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.创建信号,用来传递数据</span></span><br><span class="line">    <span class="keyword">return</span> [RACSignal createSignal:^RACDisposable * (<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">        [subscriber sendNext:<span class="string">@&quot;请求数据&quot;</span>];</span><br><span class="line">        <span class="comment">// 注意：数据传递完，最好调用sendCompleted，这时命令才执行完毕</span></span><br><span class="line">        [subscriber sendCompleted];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 强引用命令，不要被销毁，否则接收不到数据</span></span><br><span class="line">_command = command;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.订阅RACCommand中的信号</span></span><br><span class="line">[command.executionSignals subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    [x subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// RAC高级用法</span></span><br><span class="line"><span class="comment">// switchToLatest:用于signal of signals，获取signal of signals发出的最新信号,也就是可以直接拿到RACCommand中的信号</span></span><br><span class="line">[command.executionSignals.switchToLatest subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[[command.executing skip:<span class="number">1</span>] subscribeNext:^(<span class="built_in">NSNumber</span> * x) &#123;</span><br><span class="line">    <span class="keyword">if</span> ([x boolValue] == <span class="literal">YES</span>) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;正在执行&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;执行完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.执行命令</span></span><br><span class="line">[command execute:@<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<h4 id="RACMulticastConnection"><a href="#RACMulticastConnection" class="headerlink" title="RACMulticastConnection"></a>RACMulticastConnection</h4><p>用于当一个信号，被多次订阅时，为了保证创建信号时，避免多次调用创建信号中的 block，造成副作用，可以使用这个类型处理</p>
<p>解决重复请求的问题</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// RACMulticastConnection使用步骤:</span></span><br><span class="line"><span class="comment">// 1.创建信号 + (RACSignal *)createSignal:(RACDisposable * (^)(id&lt;RACSubscriber&gt; subscriber))didSubscribe</span></span><br><span class="line"><span class="comment">// 2.创建连接 RACMulticastConnection *connect = [signal publish];</span></span><br><span class="line"><span class="comment">// 3.订阅信号,注意：订阅的不再是之前的信号，而是连接的信号。 [connect.signal subscribeNext:nextBlock]</span></span><br><span class="line"><span class="comment">// 4.连接 [connect connect]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// RACMulticastConnection底层原理:</span></span><br><span class="line"><span class="comment">// 1.创建connect，connect.sourceSignal -&gt; RACSignal(原始信号)  connect.signal -&gt; RACSubject</span></span><br><span class="line"><span class="comment">// 2.订阅connect.signal，会调用RACSubject的subscribeNext，创建订阅者，而且把订阅者保存起来，不会执行block。</span></span><br><span class="line"><span class="comment">// 3.[connect connect]内部会订阅RACSignal(原始信号)，并且订阅者是RACSubject</span></span><br><span class="line"><span class="comment">// 3.1.订阅原始信号，就会调用原始信号中的didSubscribe</span></span><br><span class="line"><span class="comment">// 3.2 didSubscribe，拿到订阅者调用sendNext，其实是调用RACSubject的sendNext</span></span><br><span class="line"><span class="comment">// 4.RACSubject的sendNext,会遍历RACSubject所有订阅者发送信号。</span></span><br><span class="line"><span class="comment">// 4.1 因为刚刚第二步，都是在订阅RACSubject，因此会拿到第二步所有的订阅者，调用他们的nextBlock</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需求：假设在一个信号中发送请求，每次订阅一次都会发送请求，这样就会导致多次请求。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建请求信号</span></span><br><span class="line">RACSignal *signal1 = [RACSignal createSignal:^RACDisposable * (<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;发送请求&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 2.订阅信号</span></span><br><span class="line">[signal1 subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;接收数据&quot;</span>);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 2.订阅信号</span></span><br><span class="line">[signal1 subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;接收数据&quot;</span>);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果，会执行两遍发送请求，也就是每次订阅都会发送一次请求</span></span><br><span class="line"><span class="comment">发送请求</span></span><br><span class="line"><span class="comment">发送请求</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解决：使用RACMulticastConnection就能解决.</span></span><br><span class="line"><span class="comment">// 1.创建请求信号</span></span><br><span class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * (<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;发送请求&quot;</span>);</span><br><span class="line">    [subscriber sendNext:@<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">RACMulticastConnection *connect = [signal publish];</span><br><span class="line"><span class="comment">// 2.订阅信号</span></span><br><span class="line">[connect.signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;订阅者一信号%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 2.订阅信号</span></span><br><span class="line">[connect.signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;订阅者二信号%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br><span class="line">[connect connect];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">发送请求</span></span><br><span class="line"><span class="comment">订阅者一信号1</span></span><br><span class="line"><span class="comment">订阅者二信号1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="RACScheduler"><a href="#RACScheduler" class="headerlink" title="RACScheduler"></a>RACScheduler</h4><p>RAC 中的队列，用 GCD 封装的</p>
<h4 id="RACUnit"><a href="#RACUnit" class="headerlink" title="RACUnit"></a>RACUnit</h4><p>表示 stream 不包含有意义的值，可以理解为 nil</p>
<h4 id="RACEvent"><a href="#RACEvent" class="headerlink" title="RACEvent"></a>RACEvent</h4><p>把数据包装成信号事件（signal event）</p>
<h4 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h4><h5 id="代替代理"><a href="#代替代理" class="headerlink" title="代替代理"></a>代替代理</h5><p>rac_signalForSelector：用于代替代理</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需求：自定义redView,监听红色view中按钮点击</span></span><br><span class="line"><span class="comment">// 之前都是需要通过代理监听，给红色View添加一个代理属性，点击按钮的时候，通知代理做事情</span></span><br><span class="line"><span class="comment">// rac_signalForSelector:把调用某个对象的方法的信息转换成信号，就要调用这个方法，就会发送信号。</span></span><br><span class="line"><span class="comment">// 这里表示只要redV调用btnClick:,就会发出信号，订阅就好了。</span></span><br><span class="line"></span><br><span class="line">[[redView rac_signalForSelector:<span class="keyword">@selector</span>(btnAction:)] subscribeNext:^(RACTuple *x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;红色按钮点击&quot;</span>);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[[<span class="keyword">self</span> rac_signalForSelector:<span class="keyword">@selector</span>(scrollViewDidScroll:) fromProtocol:<span class="class"><span class="keyword">@protocol</span>(<span class="title">UIScrollViewDelegate</span>)] <span class="title">subscribeNext</span>:^(<span class="title">RACTuple</span> *<span class="title">tuple</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>



<h5 id="代替KVO"><a href="#代替KVO" class="headerlink" title="代替KVO"></a>代替KVO</h5><p>rac_valuesAndChangesForKeyPath：用于监听某个对象的属性改变</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把监听redV的center属性改变转换成信号，只要值改变就会发送信号</span></span><br><span class="line"><span class="comment">// observer:可以传入nil</span></span><br><span class="line">[[redView rac_valuesAndChangesForKeyPath:<span class="string">@&quot;center&quot;</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> observer:<span class="literal">nil</span>] subscribeNext:^(RACTwoTuple&lt;<span class="keyword">id</span>,<span class="built_in">NSDictionary</span> *&gt; *x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h5 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h5><p>rac_signalForControlEvents：用于监听某个事件</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把按钮点击事件转换为信号，点击按钮，就会发送信号</span></span><br><span class="line">[[<span class="keyword">self</span>.btn rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>] subscribeNext:^(<span class="built_in">UIControl</span> *x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;按钮被点击&quot;</span>);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h5 id="代替通知"><a href="#代替通知" class="headerlink" title="代替通知"></a>代替通知</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把监听到的通知转换信号</span></span><br><span class="line">[[[<span class="built_in">NSNotificationCenter</span> defaultCenter] rac_addObserverForName:<span class="built_in">UIKeyboardWillShowNotification</span> object:<span class="literal">nil</span>] subscribeNext:^(<span class="built_in">NSNotification</span> *x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;键盘弹出&quot;</span>);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h5 id="监听文本框文字改变"><a href="#监听文本框文字改变" class="headerlink" title="监听文本框文字改变"></a>监听文本框文字改变</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.监听文本框的文字改变</span></span><br><span class="line">[_textField.rac_textSignal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@&quot;文字改变了%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h5 id="多次请求，都获取到数据才展示界面"><a href="#多次请求，都获取到数据才展示界面" class="headerlink" title="多次请求，都获取到数据才展示界面"></a>多次请求，都获取到数据才展示界面</h5><p><code>rac_liftSelector:withSignalsFromArray:Signals</code> ：当传入的Signals(信号数组)，每一个signal都至少sendNext过一次，就会去触发第一个selector参数的方法</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6.处理多个请求，都返回结果的时候，统一做处理.</span></span><br><span class="line">RACSignal *request1 = [RACSignal createSignal:^RACDisposable * (<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">    [subscriber sendNext:<span class="string">@&quot;发送请求1&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line">RACSignal *request2 = [RACSignal createSignal:^RACDisposable * (<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">    [subscriber sendNext:<span class="string">@&quot;发送请求2&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 使用注意：几个信号，参数一的方法就几个参数，每个参数对应信号发出的数据。</span></span><br><span class="line">[<span class="keyword">self</span> rac_liftSelector:<span class="keyword">@selector</span>(updateUIWithR1:r2:) withSignalsFromArray:@[request1, request2]];</span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)updateUIWithR1:(<span class="keyword">id</span>)data1 r2:(<span class="keyword">id</span>)data2 &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;更新UI %@ %@&quot;</span>, data1, data2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="常见宏"><a href="#常见宏" class="headerlink" title="常见宏"></a>常见宏</h4><ul>
<li>RAC(TARGET, …)</li>
</ul>
<p>给某个对象绑定属性</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只要文本框文字改变，就会修改label的文字</span></span><br><span class="line">RAC(<span class="keyword">self</span>.labelView,text) = _textField.rac_textSignal;</span><br></pre></td></tr></table></figure>

<ul>
<li>RACObserve(TARGET, KEYPATH)</li>
</ul>
<p>监听某个对象的某个属性，返回的是信号</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[RACObserve(<span class="keyword">self</span>.view, center) subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<ul>
<li>@weakify(Obj)和@strongify(Obj)</li>
</ul>
<p>需要自己手动导入 RACEXTScope.h 才可使用</p>
<ul>
<li>RACTuplePack</li>
</ul>
<p>把数据包装成 RACTuple（元组类）</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">RACTuple *tuple = RACTuplePack(@<span class="number">1</span>, @<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>RACTupleUnpack</li>
</ul>
<p>把 RACTuple（元组类）解包成对应数据</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">RACTuple *tuple = RACTuplePack(<span class="string">@&quot;jack&quot;</span>, @<span class="number">20</span>);</span><br><span class="line">RACTupleUnpack(<span class="built_in">NSString</span> *name, <span class="built_in">NSNumber</span> *age) = tuple;</span><br></pre></td></tr></table></figure>

<h4 id="常见操作方法"><a href="#常见操作方法" class="headerlink" title="常见操作方法"></a>常见操作方法</h4><p>RAC开发，应该把重心放在绑定，也就是可以在创建一个对象的时候，就绑定好以后想要做的事情，而不是等赋值之后在去做事情</p>
<p>列如：把数据展示到控件上，之前都是重写控件的setModel方法，用RAC就可以在一开始创建控件的时候，就绑定好数据</p>
<h5 id="映射-flattenMap-Map"><a href="#映射-flattenMap-Map" class="headerlink" title="映射 flattenMap Map"></a>映射 flattenMap Map</h5><p>用于把源信号内容映射成新的内容</p>
<ul>
<li>flattenMap</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// flattenMap作用:把源信号的内容映射成一个新的信号，信号可以是任意类型</span></span><br><span class="line"></span><br><span class="line">[[_textField.rac_textSignal flattenMap:^__kindof RACSignal * (<span class="built_in">NSString</span> *value) &#123;</span><br><span class="line">    <span class="comment">// 返回值：绑定信号的内容.</span></span><br><span class="line">    <span class="keyword">return</span> [RACReturnSignal <span class="keyword">return</span>:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;输出:%@&quot;</span>, value]];</span><br><span class="line">&#125;] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<ul>
<li>Map</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听文本框的内容改变，把结构重新映射成一个新值</span></span><br><span class="line"></span><br><span class="line">[[_textField.rac_textSignal map:^<span class="keyword">id</span> (<span class="built_in">NSString</span> * value) &#123;</span><br><span class="line">  	<span class="comment">// 返回值：就是处理完源信号的内容。</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;输出:%@&quot;</span>, value];</span><br><span class="line">&#125;] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<ul>
<li>区别</li>
</ul>
<p>flattenMap 中的 block 返回信号</p>
<p>Map 中的 block 返回对象</p>
<p>signal of signal 用 flattenMap</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">RACSubject *signalOfSignals = [RACSubject subject];</span><br><span class="line">RACSubject *signal = [RACSubject subject];</span><br><span class="line"></span><br><span class="line">[[signalOfSignals flattenMap:^__kindof RACSignal * (<span class="keyword">id</span> value) &#123;</span><br><span class="line">    <span class="comment">// 当signalOfsignals的signals发出信号才会调用</span></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="comment">// 只有signalOfsignals的signal发出信号才会调用，</span></span><br><span class="line">    <span class="comment">// 因为内部订阅了bindBlock中返回的信号，也就是flattenMap返回的信号。</span></span><br><span class="line">    <span class="comment">// 也就是flattenMap返回的信号发出内容，才会调用。</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@aaa&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 信号的信号发送信号</span></span><br><span class="line">[signalOfSignals sendNext:signal];</span><br><span class="line"><span class="comment">// 信号发送内容</span></span><br><span class="line">[signal sendNext:@<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<h5 id="组合-concat"><a href="#组合-concat" class="headerlink" title="组合 concat"></a>组合 concat</h5><p>按一定顺序拼接信号，当多个信号发出的时候，有顺序的接收信号</p>
<p>前面信号发送完成，后面信号才被激活</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">RACSignal *signalA = [RACSignal createSignal:^RACDisposable * (<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">    [subscriber sendNext:@<span class="number">1</span>];</span><br><span class="line">    [subscriber sendCompleted];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line">RACSignal *signalB = [RACSignal createSignal:^RACDisposable * (<span class="keyword">id</span>&lt;RACSubscriber&gt;  subscriber) &#123;</span><br><span class="line">    [subscriber sendNext:@<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 把signalA拼接到signalB后，signalA发送完成，signalB才会被激活</span></span><br><span class="line">RACSignal *concatSignal = [signalA concat:signalB];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以后只需要面对拼接信号开发。</span></span><br><span class="line"><span class="comment">// 订阅拼接的信号，不需要单独订阅signalA，signalB</span></span><br><span class="line"><span class="comment">// 内部会自动订阅。</span></span><br><span class="line"><span class="comment">// 注意：第一个信号必须发送完成，第二个信号才会被激活</span></span><br><span class="line">[concatSignal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">RACSignal *concatSignal =  [[signalA concat:signalC] concat:signalB]; </span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">RACSignal *concatSignal =  [RACSignal concat:@[signalA,signalC,signalB] ];</span><br></pre></td></tr></table></figure>

<h5 id="then"><a href="#then" class="headerlink" title="then"></a>then</h5><p>用于连接两个信号，当第一个信号完成，才会连接 then 返回的信号</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意使用then，之前信号的值会被忽略掉.</span></span><br><span class="line"><span class="comment">// 底层实现：1、先过滤掉之前的信号发出的值。2.使用concat连接then返回的信号</span></span><br><span class="line">[[[RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">    [subscriber sendNext:@<span class="number">1</span>];</span><br><span class="line">    [subscriber sendCompleted];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;] then:^RACSignal *&#123;</span><br><span class="line">    <span class="keyword">return</span> [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">        [subscriber sendNext:@<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="comment">// 只能接收到第二个信号的值，也就是then返回信号的值 2</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h5 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h5><p>把多个信号合并为一个信号，任何一个信号有新值的时候就会调用</p>
<p> 一个页面n个请求 拿到哪个数据就显示哪个数据 可以没有顺序</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 底层实现：</span></span><br><span class="line"><span class="comment">// 1.合并信号被订阅的时候，就会遍历所有信号，并且发出这些信号。</span></span><br><span class="line"><span class="comment">// 2.每发出一个信号，这个信号就会被订阅</span></span><br><span class="line"><span class="comment">// 3.也就是合并信号一被订阅，就会订阅里面所有的信号。</span></span><br><span class="line"><span class="comment">// 4.只要有一个信号被发出就会被监听</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">RACSignal *signalA = [RACSignal createSignal:^RACDisposable * (<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">    [subscriber sendNext:@<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line">RACSignal *signalB = [RACSignal createSignal:^RACDisposable * (<span class="keyword">id</span>&lt;RACSubscriber&gt;  subscriber) &#123;</span><br><span class="line">    [subscriber sendNext:@<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 合并信号,任何一个信号发送数据，都能监听到</span></span><br><span class="line">RACSignal *mergeSignal = [signalA merge:signalB];</span><br><span class="line"></span><br><span class="line">[mergeSignal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h5 id="zipWith"><a href="#zipWith" class="headerlink" title="zipWith"></a>zipWith</h5><p>把两个信号压缩成一个信号，只有当两个信号同时发出信号内容时，并且把两个信号的内容合并成一个元组，才会触发压缩流的 next 事件</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 底层实现:</span></span><br><span class="line"><span class="comment">// 1.定义压缩信号，内部就会自动订阅signalA，signalB</span></span><br><span class="line"><span class="comment">// 2.每当signalA或者signalB发出信号，就会判断signalA，signalB有没有发出个信号，有就会把最近发出的信号都包装成元组发出</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">RACSignal *signalA = [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">   [subscriber sendNext:@<span class="number">1</span>];</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">RACSignal *signalB = [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">   [subscriber sendNext:@<span class="number">2</span>];</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩信号A，信号B</span></span><br><span class="line">RACSignal *zipSignal = [signalA zipWith:signalB];</span><br><span class="line">[zipSignal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;RACTwoTuple:0xxx&gt;(1,2)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h5 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest"></a>combineLatest</h5><p>将多个信号合并起来，并且拿到各个信号的最新值，必须每个合并的 signal 至少都有过一次 sendNext，才会触发合并的信号</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 底层实现：</span></span><br><span class="line"><span class="comment">// 1.当组合信号被订阅，内部会自动订阅signalA，signalB,必须两个信号都发出内容，才会被触发。</span></span><br><span class="line"><span class="comment">// 2.并且把两个信号组合成元组发出。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">RACSignal *signalA = [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">   [subscriber sendNext:@<span class="number">1</span>];</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">RACSignal *signalB = [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">   [subscriber sendNext:@<span class="number">2</span>];</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把两个信号组合成一个信号,跟zip一样，没什么区别</span></span><br><span class="line">RACSignal *combineSignal = [signalA combineLatest:signalB];</span><br><span class="line">[combineSignal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;RACTwoTuple:0xxx&gt;(1,2)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h5><p>用于信号发出的内容是元组，把信号发出元组的值聚合成一个值</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">RACSignal *signalA = [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">   [subscriber sendNext:@<span class="number">1</span>];</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line">RACSignal *signalB = [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">   [subscriber sendNext:@<span class="number">2</span>];</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 聚合</span></span><br><span class="line"><span class="comment">// 常见的用法，（先组合在聚合）。combineLatest:(id&lt;NSFastEnumeration&gt;)signals reduce:(id (^)())reduceBlock</span></span><br><span class="line"><span class="comment">// reduce中的block简介:</span></span><br><span class="line"><span class="comment">// reduceblcok中的参数，有多少信号组合，reduceblcok就有多少参数，每个参数就是之前信号发出的内容</span></span><br><span class="line"><span class="comment">// reduceblcok的返回值：聚合信号之后的内容</span></span><br><span class="line">RACSignal *reduceSignal = [RACSignal combineLatest:@[signalA, signalB] reduce:^<span class="keyword">id</span>(<span class="built_in">NSNumber</span> *num1 ,<span class="built_in">NSNumber</span> *num2)&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@ %@&quot;</span>,num1,num2];</span><br><span class="line">&#125;];</span><br><span class="line">[reduceSignal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h5 id="过滤-filter"><a href="#过滤-filter" class="headerlink" title="过滤 filter"></a>过滤 filter</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每次信号发出，会先执行过滤条件判断.</span></span><br><span class="line">[_textField.rac_textSignal filter:^<span class="built_in">BOOL</span>(<span class="built_in">NSString</span> *value) &#123;</span><br><span class="line">    <span class="keyword">return</span> value.length &gt; <span class="number">3</span>;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h5 id="ignore"><a href="#ignore" class="headerlink" title="ignore"></a>ignore</h5><p>忽略完某些值的信号</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内部调用filter过滤，忽略掉ignore的值</span></span><br><span class="line">[[_textField.rac_textSignal ignore:<span class="string">@&quot;1&quot;</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h5 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在开始前添加数据 打印 hello world 1 2 3 4</span></span><br><span class="line">RACSignal *signal = @[@<span class="number">1</span>,@<span class="number">2</span>,@<span class="number">3</span>,@<span class="number">4</span>].rac_sequence.signal;</span><br><span class="line">RACSignal *signal2 = [signal startWith:<span class="string">@&quot;hello world&quot;</span>];</span><br><span class="line">[signal2 subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h5 id="distinctUntilChanged"><a href="#distinctUntilChanged" class="headerlink" title="distinctUntilChanged"></a>distinctUntilChanged</h5><p>当上一次的值和当前的值有明显变化就会发出信号，否则被忽略掉</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 过滤，当上一次和当前的值不一样，就会发出内容。</span></span><br><span class="line"><span class="comment">// 在开发中，刷新UI经常使用，只有两次数据不一样才需要刷新</span></span><br><span class="line">[[_textField.rac_textSignal distinctUntilChanged] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h5 id="take"><a href="#take" class="headerlink" title="take"></a>take</h5><p>从开始一共取 N 次的信号</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、创建信号</span></span><br><span class="line">RACSubject *signal = [RACSubject subject];</span><br><span class="line"><span class="comment">// 2、处理信号，订阅信号</span></span><br><span class="line">[[signal take:<span class="number">1</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.发送信号</span></span><br><span class="line">[signal sendNext:@<span class="number">1</span>];</span><br><span class="line">[signal sendNext:@<span class="number">2</span>];</span><br></pre></td></tr></table></figure>

<h5 id="takeLast"><a href="#takeLast" class="headerlink" title="takeLast"></a>takeLast</h5><p>取最后 N 次的信号，前提条件，订阅者必须调用完成</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、创建信号</span></span><br><span class="line">RACSubject *signal = [RACSubject subject];</span><br><span class="line"><span class="comment">// 2、处理信号，订阅信号</span></span><br><span class="line">[[signal takeLast:<span class="number">1</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.发送信号</span></span><br><span class="line">[signal sendNext:@<span class="number">1</span>];</span><br><span class="line">[signal sendNext:@<span class="number">2</span>];</span><br><span class="line">[signal sendCompleted];</span><br></pre></td></tr></table></figure>

<h5 id="takeUntil"><a href="#takeUntil" class="headerlink" title="takeUntil"></a>takeUntil</h5><p>获取信号值直到某个信号执行完成</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听文本框的改变直到当前对象被销毁</span></span><br><span class="line">[_textField.rac_textSignal takeUntil:<span class="keyword">self</span>.rac_willDeallocSignal];</span><br></pre></td></tr></table></figure>

<h5 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h5><p>跳过几个信号</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示输入第一次，不会被监听到，跳过第一次发出的信号</span></span><br><span class="line">[[_textField.rac_textSignal skip:<span class="number">1</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h5 id="switchToLatest"><a href="#switchToLatest" class="headerlink" title="switchToLatest"></a>switchToLatest</h5><p>用于 signalOfSignals（信号的信号），有时候信号也会发出信号，获取 signalOfSignals 发送的最新信号</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">RACSubject *signalOfSignals = [RACSubject subject];</span><br><span class="line">RACSubject *signal = [RACSubject subject];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取信号中信号最近发出信号，订阅最近发出的信号。</span></span><br><span class="line"><span class="comment">// 注意switchToLatest：只能用于信号中的信号</span></span><br><span class="line">[signalOfSignals.switchToLatest subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br><span class="line">[signalOfSignals sendNext:signal];</span><br><span class="line">[signal sendNext:@<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<h5 id="ifThenElse"><a href="#ifThenElse" class="headerlink" title="ifThenElse"></a>ifThenElse</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">RACSignal *signalA = @[@<span class="number">1</span>, @<span class="number">2</span>, @<span class="number">3</span>].rac_sequence.signal;</span><br><span class="line">RACSignal *signalB = @[<span class="string">@&quot;a&quot;</span>, <span class="string">@&quot;b&quot;</span>, <span class="string">@&quot;c&quot;</span>].rac_sequence.signal;</span><br><span class="line">RACSubject *subject = [RACSubject subject];</span><br><span class="line">[[RACSignal <span class="keyword">if</span>:subject then:signalA <span class="keyword">else</span>:signalB] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line">[subject sendNext:@<span class="number">1</span>];</span><br><span class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, <span class="number">2</span>), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    [subject sendNext:@<span class="number">0</span>];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="doNext，doCompleted"><a href="#doNext，doCompleted" class="headerlink" title="doNext，doCompleted"></a>doNext，doCompleted</h5><p>doNext 执行 Next 之前，会先执行这个 block</p>
<p>doCompleted 执行 sendCompleted 之前，会先执行这个 block</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"> [[[[RACSignal createSignal:^RACDisposable * (<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">    [subscriber sendNext:@<span class="number">1</span>];</span><br><span class="line">    [subscriber sendCompleted];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;] doNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;doNext&quot;</span>);</span><br><span class="line">&#125;] doCompleted:^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;doCompleted&quot;</span>);</span><br><span class="line">&#125;] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">doNext</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">doCompleted</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h5 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h5><p>deliverOn：内容传递切换到指定线程中，副作用在原来线程中，把在创建信号时 block 中的代码称之为副作用</p>
<p>subscribeOn：内容传递和副作用都会切换到指定线程中</p>
<h5 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h5><p>超时，让一个信号在一定时间后自动报错</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">RACSignal *signal = [[RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;] timeout:<span class="number">1</span> onScheduler:[RACScheduler currentScheduler]];</span><br><span class="line"></span><br><span class="line">[signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125; error:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">    <span class="comment">// 1秒后会自动调用</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,error);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h5 id="interval"><a href="#interval" class="headerlink" title="interval"></a>interval</h5><p>定时，每隔一段时间发出信号</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[[RACSignal interval:<span class="number">1</span> onScheduler:[RACScheduler currentScheduler]] subscribeNext:^(<span class="keyword">id</span> x) &#123;   </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h5 id="delay"><a href="#delay" class="headerlink" title="delay"></a>delay</h5><p>延迟发送 next</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">RACSignal *signal = [[[RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">    [subscriber sendNext:@<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;] delay:<span class="number">2</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h5 id="retry"><a href="#retry" class="headerlink" title="retry"></a>retry</h5><p>重试，只要失败，就会重新执行创建信号中的 block，直到成功</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">__block <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">[[[RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">10</span>) &#123;</span><br><span class="line">      [subscriber sendNext:@<span class="number">1</span>];</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@&quot;接收到错误&quot;</span>);</span><br><span class="line">      [subscriber sendError:<span class="literal">nil</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  i++;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;] retry] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125; error:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line"></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h5 id="replay"><a href="#replay" class="headerlink" title="replay"></a>replay</h5><p><a href="https://www.cnblogs.com/zz-vv/p/4834042.html">replay、replayLast、replayLazily</a></p>
<p>对于普通的信号，每次订阅都会导致信号中的代码被执行一遍（block中的代码）</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">__block <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">    num ++;</span><br><span class="line">    [subscriber sendNext:@(num)];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line">[signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;s1:%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line">[signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;s2:%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line">[signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;s3:%@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">s1:1</span></span><br><span class="line"><span class="comment">s2:2</span></span><br><span class="line"><span class="comment">s3:3</span></span><br><span class="line"><span class="comment">block 中的代码被执行了3次</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>replay 返回一个新的信号，源信号被订阅时，会立即发送订阅者全部历史的值，不会重复执行源信号中的订阅代码，订阅者还将接收未来发送过去的值</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//演示：每个新添加的订阅者接收到信号中全部的值（不管之前还是将来发出的值）</span></span><br><span class="line">RACSubject *letters = [RACSubject subject];</span><br><span class="line">RACSignal *signal = [letters replay]; </span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Subscribe S1&quot;</span>);</span><br><span class="line">[signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;S1: %@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Send A&quot;</span>);</span><br><span class="line">[letters sendNext:<span class="string">@&quot;A&quot;</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Send B&quot;</span>);</span><br><span class="line">[letters sendNext:<span class="string">@&quot;B&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Subscribe S2&quot;</span>);</span><br><span class="line">[signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;S2: %@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Send C&quot;</span>);</span><br><span class="line">[letters sendNext:<span class="string">@&quot;C&quot;</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Send D&quot;</span>);</span><br><span class="line">[letters sendNext:<span class="string">@&quot;D&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Subscribe S3&quot;</span>);</span><br><span class="line">[signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;S3: %@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Subscribe S1   </span></span><br><span class="line"><span class="comment">Send A   </span></span><br><span class="line"><span class="comment">S1: A</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">Send B</span></span><br><span class="line"><span class="comment">S1: B</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">Subscribe S2</span></span><br><span class="line"><span class="comment">S2: A</span></span><br><span class="line"><span class="comment">S2: B //发送历史值</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">Send C</span></span><br><span class="line"><span class="comment">S1: C</span></span><br><span class="line"><span class="comment">S2: C</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">Send D</span></span><br><span class="line"><span class="comment">S1: D</span></span><br><span class="line"><span class="comment">S2: D</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">Subscribe S3</span></span><br><span class="line"><span class="comment">S3: A</span></span><br><span class="line"><span class="comment">S3: B</span></span><br><span class="line"><span class="comment">S3: C</span></span><br><span class="line"><span class="comment">S3: D //发送历史值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h5 id="replayLast"><a href="#replayLast" class="headerlink" title="replayLast"></a>replayLast</h5><p>返回一个新的信号，源信号被订阅时，会立即发送给订阅者最新的值，不会重复执行源信号中的订阅代码，订阅者还将接收未来发送过去的值</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">Subscribe S1</span><br><span class="line">Send A</span><br><span class="line">S1: A</span><br><span class="line"> </span><br><span class="line">Send B</span><br><span class="line">S1: B</span><br><span class="line"> </span><br><span class="line">Subscribe S2</span><br><span class="line">S2: B <span class="comment">//接收最新值</span></span><br><span class="line"> </span><br><span class="line">Send C</span><br><span class="line">S1: C</span><br><span class="line">S2: C</span><br><span class="line"> </span><br><span class="line">Send D</span><br><span class="line">S1: D</span><br><span class="line">S2: D</span><br><span class="line"> </span><br><span class="line">Subscribe S3</span><br><span class="line">S3: D</span><br></pre></td></tr></table></figure>





<h5 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h5><p>当某个信号发送比较频繁时，可以使用节流，在某一段时间不发送信号内容，过了一段时间获取信号的最新内容发出</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">RACSubject *signal = [RACSubject subject];</span><br><span class="line">_signal = signal;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节流，在一定时间（1秒）内，不接收任何信号内容，过了这个时间（1秒）获取最后发送的信号内容发出。</span></span><br><span class="line">[[signal throttle:<span class="number">1</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>





<p> <a href="https://www.jianshu.com/p/ceebb496c226">RAC资源帖</a></p>
<p><a href="https://www.jianshu.com/p/87ef6720a096">ReactiveCocoa基础篇</a></p>
<p><a href="https://www.jianshu.com/p/e10e5ca413b7">ReactiveCocoa进阶篇</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>逆向-Frida</title>
    <url>/2022/06/13/%E9%80%86%E5%90%91-Frida/</url>
    <content><![CDATA[<p><a href="https://frida.re/docs/home/">https://frida.re/docs/home/</a></p>
<p><a href="https://www.frida.re/docs/javascript-api">https://www.frida.re/docs/javascript-api</a></p>
<p><a href="https://zhuanlan.kanxue.com/article-342.htm">JavaScript API 一</a></p>
<p><a href="https://zhuanlan.kanxue.com/article-414.htm">JavaScript API 二</a></p>
<p><a href="https://www.dazhuanlan.com/workant/topics/1230751">非越狱环境使用Frida</a>   </p>
<p><a href="https://www.jianshu.com/p/86c1ca71e73a">Frida集成到iOS项目</a></p>
<p><a href="https://codeshare.frida.re/">https://codeshare.frida.re/</a> 中其它共享的脚本， <code>$ frida --codeshare 脚本路径 -f YOUR_BINARY </code> 将其加载进来</p>
<p>Frida 跨平台的轻量级 Hook 框架</p>
<p>使用 Frida 可以获取进程详细信息、拦截和调用指定函数、注入代码、修改参数、从iOS应用程序中dump类和类方法信息等</p>
<h4 id="Frida-安装"><a href="#Frida-安装" class="headerlink" title="Frida 安装"></a>Frida 安装</h4><ul>
<li>iOS 端</li>
</ul>
<p>Cydia 添加源 <a href="https://build.frida.re/">https://build.frida.re/</a> 安装 Frida for A12+ devices，最新版本 14.2.13</p>
<ul>
<li>macOS 端</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo pip3 install frida</span><br><span class="line">$ sudo pip3 install frida-tools</span><br><span class="line">$ frida --version</span><br><span class="line">#升级</span><br><span class="line">$ sudo pip3 install frida --upgrade</span><br><span class="line">$ sudo pip3 install frida-tools --upgrade</span><br><span class="line"></span><br><span class="line">frida                 15.1.3</span><br><span class="line">frida-tools           10.6.2</span><br></pre></td></tr></table></figure>

<h4 id="Frida"><a href="#Frida" class="headerlink" title="Frida"></a>Frida</h4><p>frada-tools 里面还提供了五个使用工具：frida-discover、frida-kill、friaa-ls-devices、frida-ps 以及 frida-trace</p>
<p><code>.bash_profile</code> 添加环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export frida-discover&#x3D;&#39;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.8&#x2F;bin&#x2F;frida-discover&#39;</span><br><span class="line">export frida-kill&#x3D;&#39;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.8&#x2F;bin&#x2F;frida-kill&#39;</span><br><span class="line">export frida-trace&#x3D;&#39;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.8&#x2F;bin&#x2F;frida-trace&#39;</span><br><span class="line">export frida-ps&#x3D;&#39;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.8&#x2F;bin&#x2F;frida-ps&#39;</span><br><span class="line">export frida-ls-devices&#x3D;&#39;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.8&#x2F;bin&#x2F;frida-ls-devices&#39;</span><br></pre></td></tr></table></figure>



<p>这些工具都是基于 Frida 的 Python 接口实现的</p>
<p>使用帮助 <a href="https://frida.re/docs/home/">https://frida.re/docs/home/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ which frida</span><br><span class="line">&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.8&#x2F;bin&#x2F;frida</span><br></pre></td></tr></table></figure>

<h5 id="获取可用设备列表"><a href="#获取可用设备列表" class="headerlink" title="获取可用设备列表"></a>获取可用设备列表</h5><p>frida-ls-devices 获取到 id 之后就可以在 frida-ps 等工具中使用了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.8&#x2F;bin 目录</span><br><span class="line">$ frida-ls-devices</span><br><span class="line">Id                                        Type    Name</span><br><span class="line">----------------------------------------  ------  ------------</span><br><span class="line">local                                     local   Local System</span><br><span class="line">4ce52917e9a0932f3c821e2418a03d2a993c5650  usb     iPhone</span><br><span class="line">socket                                    remote  Local Socket</span><br></pre></td></tr></table></figure>

<h5 id="获取设备进程列表"><a href="#获取设备进程列表" class="headerlink" title="获取设备进程列表"></a>获取设备进程列表</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ frida-ps --help</span><br><span class="line">-U	连接到USB设备</span><br><span class="line">-D  如果有多个USB设备，可以用该选项指定设备UDID</span><br><span class="line">-R&#x2F;-H 连接到远程frida-server,主要用于远程调试</span><br><span class="line">-a  仅显示正在运行的应用</span><br><span class="line">-i  显示所有已安装的应用</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#连接到设备查看进程列表</span><br><span class="line">$ frida-ps -U </span><br><span class="line"> 845      ASPCarryLog</span><br><span class="line">1032      AppNotification</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">#连接到设备查看正在运行的应用</span><br><span class="line">$ frida-ps -U -a</span><br><span class="line">或者</span><br><span class="line">$ frida-ps -Ua</span><br><span class="line"></span><br><span class="line">#指定查看某个设备</span><br><span class="line">$ frida-ps -D 00008030-001C19C12281802E</span><br></pre></td></tr></table></figure>

<h5 id="结束设备上某个进程"><a href="#结束设备上某个进程" class="headerlink" title="结束设备上某个进程"></a>结束设备上某个进程</h5><p>frida-kill</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ frida-kill -U &lt;PID&gt;&#x2F;&lt;Name&gt;</span><br><span class="line">$ frida-kill -D &lt;DEVICE-ID&gt; &lt;PID&gt;&#x2F;&lt;Name&gt;</span><br><span class="line"></span><br><span class="line">$ frida-kill -U 2441</span><br><span class="line">$ frida-kill -U 微信</span><br></pre></td></tr></table></figure>

<h5 id="跟踪函数-方法调用"><a href="#跟踪函数-方法调用" class="headerlink" title="跟踪函数/方法调用"></a>跟踪函数/方法调用</h5><p>frida-trace</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ frida-trace -h</span><br></pre></td></tr></table></figure>

<h6 id="跟踪函数调用"><a href="#跟踪函数调用" class="headerlink" title="跟踪函数调用"></a>跟踪函数调用</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ frida-trace -U -i compress -i &quot;recv*&quot; -x &quot;recvmsg*&quot; -x recvfrom 微信</span><br><span class="line"></span><br><span class="line">跟踪名为compress的函数和recv开头的函数</span><br><span class="line">排除recvmsg开头的函数和名为recvfrom的函数，模糊匹配内容要用双引号</span><br><span class="line"></span><br><span class="line">-i 表示包含某个函数</span><br><span class="line">-x 表示排查某个函数，都支持模糊匹配，可以组合使用</span><br><span class="line">命令执行后会生成基本JS文件，仅输出一些日志，开发者可以根据需要修改它们</span><br></pre></td></tr></table></figure>

<p>上面是附加到目标进程再操作，如果要强制启动进程进行跟踪，可以使用 -f 选项加上 BundleID</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ frida-trace -U -f com.tencent.xin -i compress -i &quot;recv*&quot; -x &quot;recvmsg*&quot; -x recvfrom</span><br></pre></td></tr></table></figure>

<p>跟踪后，在当前目录会生成一个<code> __handlers__</code> 文件夹，里面就是 frida-trace 自动生成的 js 脚本文件</p>
<img src="逆向-Frida/frida-trace.png" alt="frida-trace" style="zoom:80%;" />

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跟踪函数调用后会生成对应跟踪函数的 js 文件</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="title">onEnter</span>(<span class="params">log, args, state</span>)</span> &#123;</span><br><span class="line">    log(<span class="string">`+[LCdes encryptUseDES:<span class="subst">$&#123;args[<span class="number">2</span>]&#125;</span> key:<span class="subst">$&#123;args[<span class="number">3</span>]&#125;</span>]`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">onLeave</span>(<span class="params">log, retval, state</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>frida-trace 启动时不会覆盖已有脚本文件，所以可以随时修改这些 JS 文件来添加自己的功能</p>
<h6 id="跟踪OC方法调用"><a href="#跟踪OC方法调用" class="headerlink" title="跟踪OC方法调用"></a>跟踪OC方法调用</h6><p>-m 表示包含某个方法</p>
<p>-M 表示排除某个方法，支持模糊匹配，可以组合使用</p>
<img src="逆向-Frida/图片 2.png" alt="图片 2" style="zoom:80%;" />

<h6 id="跟踪导出函数"><a href="#跟踪导出函数" class="headerlink" title="跟踪导出函数"></a>跟踪导出函数</h6><p>-I 表示包含某个模块</p>
<p>-X 表示排除某个模块，支持模糊匹配，可以混合使用</p>
<p>![图片 3](逆向-Frida/图片 3.png)</p>
<h6 id="跟踪导入函数"><a href="#跟踪导入函数" class="headerlink" title="跟踪导入函数"></a>跟踪导入函数</h6><p>-t 表示包含某个模块</p>
<p>-T 表示包含主程序</p>
<p>![图片 4](逆向-Frida/图片 4.png)</p>
<h6 id="跟踪偏移地址"><a href="#跟踪偏移地址" class="headerlink" title="跟踪偏移地址"></a>跟踪偏移地址</h6><p>-a 添加模块内偏移地址的监控，”MODULE!OFFSET“</p>
<p>由于 macOS 终端会把 ！转义，所以需要输入 <code>\!</code> 才能正常使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#对Aweme模块中偏移地址为0x2A65CCC的函数进行追踪</span><br><span class="line">$ frida-trace -U -f com.ss.iphone.ugc.Aweme -a Aweme\!2A65CCC</span><br></pre></td></tr></table></figure>

<h6 id="跟踪调用栈"><a href="#跟踪调用栈" class="headerlink" title="跟踪调用栈"></a>跟踪调用栈</h6><p>利用 Frida 可以非常方便跟踪某个方法的调用栈，只需要在 JS 里面添加下面代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">log(<span class="string">&#x27;\tBacktrace:\n\t&#x27;</span> + Thread.backtrace(<span class="built_in">this</span>.context, Backtracer.ACCURATE).map(DebugSymbol.fromAddress).join(<span class="string">&#x27;\n\t&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h5 id="进入交互模式"><a href="#进入交互模式" class="headerlink" title="进入交互模式"></a>进入交互模式</h5><p>进入交互模式两种方法</p>
<ul>
<li>通过应用名或PID附加</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ frida -U 微信</span><br><span class="line">$ frida -U -p PID</span><br></pre></td></tr></table></figure>

<ul>
<li>直接启动进程</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ frida -U -f com.tencent.xin</span><br><span class="line">#或者不中断应用程序启动</span><br><span class="line">$ frida -U -f com.tencent.xin --no-pause</span><br></pre></td></tr></table></figure>

<p>进入交互模式后就可以访问目标进程的所有属性、方法</p>
<h5 id="Frida使用"><a href="#Frida使用" class="headerlink" title="Frida使用"></a>Frida使用</h5><h6 id="加载脚本"><a href="#加载脚本" class="headerlink" title="加载脚本"></a>加载脚本</h6><p>越狱英文名 JailBroke 或 JailBreak，使用关键词 jial 对当前进程的所有类及方法进行检索。</p>
<p>Frida 提供的 JavaScript API 里面，由 <code>ObjC.classes</code> 能得到当前应用中所有已经注册的类，对它进行遍历就可以得到符合要求的类名</p>
<p>写一段JS代码</p>
<p><code>ObjC.classes.XXXClass.$methods</code> 就可以得到 XXXClass 类的所有方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ObjC.available) &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> className <span class="keyword">in</span> ObjC.classes) &#123;</span><br><span class="line">		<span class="keyword">if</span> (className.toLowerCase().indexOf(<span class="string">&#x27;jail&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;[#]ClassName--------&gt;&#x27;</span> + className)</span><br><span class="line"></span><br><span class="line">			<span class="keyword">var</span> methods = <span class="built_in">eval</span>(<span class="string">&#x27;ObjC.classes.&#x27;</span> + className + <span class="string">&#x27;.$methods&#x27;</span>) <span class="comment">//类中所有方法</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="keyword">if</span> (methods[i].toLowerCase().indexOf(<span class="string">&#x27;jail&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">						<span class="built_in">console</span>.log(<span class="string">&#x27;[-]&#x27;</span> + methods[i])</span><br><span class="line">					&#125;</span><br><span class="line">				&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">&#x27;[!] Exception:&#x27;</span> + err.message)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两种方法加载。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#-l 选项加载脚本</span><br><span class="line">$ frida -U -l WeChat.js 微信</span><br><span class="line"></span><br><span class="line">#进入交互界面后使用 %load path&#x2F;to&#x2F;WeChat.js</span><br><span class="line"></span><br><span class="line">#结果</span><br><span class="line">Attaching...</span><br><span class="line">[#]ClassName--------&gt;JailBreakHelper</span><br><span class="line">[-]+ getJailbreakRootDir</span><br><span class="line">[-]+ getJailbreakPath</span><br><span class="line">[-]+ JailBroken</span><br><span class="line">[-]- IsJailBreak</span><br><span class="line">[-]- HasInstallJailbreakPlugin:</span><br></pre></td></tr></table></figure>

<p>从输出信息可以看到一个 JailBreakHelper 类</p>
<h6 id="拦截"><a href="#拦截" class="headerlink" title="拦截"></a>拦截</h6><p>Frida 提供的 JavaScript API 里面有一个 <code>Interceptor</code> 拦截器，将它附加到某个函数后，可以在调用前和调用后分别进行拦截，以获取函数的参数和返回值</p>
<p>编写脚本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ObjC.available) &#123; <span class="comment">//判断Object-C类方法是否已经加载进来</span></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> className = <span class="string">&#x27;JailBreakHelper&#x27;</span>;</span><br><span class="line">		<span class="keyword">var</span> methodNames = [<span class="string">&#x27;+ JailBroken&#x27;</span>, <span class="string">&#x27;- IsJailBreak&#x27;</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> methodNames) &#123;</span><br><span class="line">			<span class="keyword">var</span> methodName = methodNames[index];</span><br><span class="line">			<span class="keyword">var</span> hook = <span class="built_in">eval</span>(<span class="string">&#x27;ObjC.classes.&#x27;</span> + className + <span class="string">&#x27;[&quot;&#x27;</span> + methodName + <span class="string">&#x27;&quot;]&#x27;</span>);</span><br><span class="line">			<span class="comment">//或者 var hook = ObjC.classes[class_name][method_name]</span></span><br><span class="line">      </span><br><span class="line">			Interceptor.attach(hook.implementation,&#123;</span><br><span class="line">				onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">&#x27;===onEnter===&#x27;</span>);</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">&#x27;className:&#x27;</span> + className);</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">&#x27;Method Name:&#x27;</span> + methodName);</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">&#x27;======&#x27;</span>);</span><br><span class="line">				&#125;,</span><br><span class="line">				onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">&#x27;===onLeave===&#x27;</span>);</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">&#x27;className:&#x27;</span> + className);</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">&#x27;Method Name:&#x27;</span> + methodName);</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">&#x27;\t[-] Return Value:&#x27;</span> + retval);</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">&#x27;======&#x27;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;[!] Exception:&#x27;</span> + err.message);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击微信的支付处方方法，打印结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;onEnter&#x3D;&#x3D;&#x3D;</span><br><span class="line">className:JailBreakHelper</span><br><span class="line">Method Name:- IsJailBreak</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;onLeave&#x3D;&#x3D;&#x3D;</span><br><span class="line">className:JailBreakHelper</span><br><span class="line">Method Name:- IsJailBreak</span><br><span class="line">        [-] Return Value:0x1</span><br></pre></td></tr></table></figure>

<p>onEnter 和 onLeave 是两个回调函数，分别处理原始方法调用前和后的逻辑。</p>
<p>Frida 支持脚本热更新，当 JS 文件被修改并保存后，能够实时生效</p>
<p>修改脚本将返回值改成NO</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ObjC.available) &#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		Interceptor.attach(ObjC.classes.JailBreakHelper[<span class="string">&#x27;- IsJailBreak&#x27;</span>].implementation, &#123;</span><br><span class="line">			onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">&#x27;return = NO&#x27;</span>);</span><br><span class="line">				retval.replace(ptr(<span class="number">0x0</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;[!] Exception:&#x27;</span> + err.message);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="JS脚本"><a href="#JS脚本" class="headerlink" title="JS脚本"></a>JS脚本</h6><p>打印参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;0--: &#x27;</span>+ObjC.Object(args[<span class="number">0</span>]).toString())</span><br></pre></td></tr></table></figure>

<p>如果变量类型不确定，可以使用如下代码确定类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Type of args[2] -&gt; &quot;</span> + <span class="keyword">new</span> ObjC.Object(args[<span class="number">2</span>]).$className)</span><br></pre></td></tr></table></figure>

<p>常用数据类型转换</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//NSData转String</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> ObjC.Object(args[<span class="number">2</span>]);</span><br><span class="line">Memory.readUtf8String(data.bytes(), data.length());</span><br><span class="line"></span><br><span class="line"><span class="comment">//NSData转二进制数据</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> ObjC.Object(args[<span class="number">2</span>]);</span><br><span class="line">Memory.readByteArray(data.bytes(), data.length());</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历NSArray</span></span><br><span class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> ObjC.Object(args[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Be sure to use valueOf() as NSUInteger is a Number in</span></span><br><span class="line"><span class="comment"> * 32-bit processes, and UInt64 in 64-bit processes. This</span></span><br><span class="line"><span class="comment"> * coerces it into a Number in the latter case.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> count = array.count().valueOf();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i !== count; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> element = array.objectAtIndex_(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历NSDictionary</span></span><br><span class="line"><span class="keyword">var</span> dict = <span class="keyword">new</span> ObjC.Object(args[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">var</span> enumerator = dict.keyEnumerator();</span><br><span class="line"><span class="keyword">var</span> key;</span><br><span class="line"><span class="keyword">while</span> ((key = enumerator.nextObject()) !== <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> value = dict.objectForKey_(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> param_dict = ObjC.classes.NSMutableDictionary.alloc().init();</span><br><span class="line">param_dict.setObject_forKey_(body,<span class="string">&quot;body&quot;</span>);</span><br><span class="line"></span><br><span class="line">NSArray *arr3 = [NSArray arrayWithObjects:@<span class="string">&quot;one&quot;</span>,@<span class="string">&quot;two&quot;</span>,@<span class="number">1</span>, nil];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> param_Key_Array = ObjC.classes.NSMutableArray.arrayWithObject_(sBody);</span><br><span class="line">param_Key_Array.addObject_(sClient);</span><br><span class="line">param_Key_Array.addObject_(sClientVersion);</span><br><span class="line">param_Key_Array.addObject_(sFunctionId);</span><br><span class="line">param_Key_Array.addObject_(sOpenudid);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读一个结构体</span></span><br><span class="line">Memory.readU32(args[<span class="number">0</span>].add(<span class="number">4</span>));</span><br></pre></td></tr></table></figure>

<h6 id="常用脚本"><a href="#常用脚本" class="headerlink" title="常用脚本"></a>常用脚本</h6><ul>
<li>枚举所有类</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> className <span class="keyword">in</span> ObjC.classes) &#123;</span><br><span class="line">  <span class="keyword">if</span> (ObjC.classes.hasOwnProperty(className)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(className);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>枚举一个类的所有method</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ObjC.available) &#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> className = <span class="string">&quot;NSURL&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> methods = <span class="built_in">eval</span>(<span class="string">&#x27;ObjC.classes.&#x27;</span> + className + <span class="string">&#x27;.$methods&#x27;</span>); <span class="comment">//一个类的所有方法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (methods[i].indexOf(<span class="string">&quot;fileURLWithPath&quot;</span>) &gt; -<span class="number">1</span>)</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;[-] &quot;</span>+methods[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="title">catch</span>(<span class="params">err</span>)</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;[!] Exception1: &quot;</span> + err.message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">catch</span>(<span class="params">err</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[!] Exception2: &quot;</span> + err.message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>打印调用栈</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">log, args, state</span>) </span>&#123;</span><br><span class="line">    log(<span class="string">&#x27;\tBacktrace:\n\t&#x27;</span> + Thread.backtrace(<span class="built_in">this</span>.context,Backtracer.ACCURATE).map(DebugSymbol.fromAddress).join(<span class="string">&#x27;\n\t&#x27;</span>));</span><br><span class="line">  &#125;,</span><br><span class="line">  onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">log, retval, state</span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>hook 一个method</li>
</ul>
<blockquote>
<p>打印参数注意</p>
<p>args[0]：self</p>
<p>args[1]：The selector (openURL:)</p>
<p>args[2]：The first param</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ObjC.available)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> className = <span class="string">&quot;JailbreakDetectionVC&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> funcName = <span class="string">&quot;- isJailbroken&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> hook = <span class="built_in">eval</span>(<span class="string">&#x27;ObjC.classes.&#x27;</span> + className + <span class="string">&#x27;[&quot;&#x27;</span> + funcName + <span class="string">&#x27;&quot;]&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[*] Class Name: &quot;</span> + className);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[*] Method Name: &quot;</span> + funcName);</span><br><span class="line">        Interceptor.attach(hook.implementation, &#123;</span><br><span class="line">          onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;param:&quot;</span>+args[<span class="number">2</span>]+<span class="string">&quot; type:&quot;</span>+<span class="keyword">typeof</span> args[<span class="number">2</span>]);</span><br><span class="line">          &#125;,</span><br><span class="line">          onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Return value-&gt; (type:&quot;</span>+<span class="keyword">typeof</span> retval+<span class="string">&quot;,value:&quot;</span>+retval+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//修改返回值</span></span><br><span class="line">            newretval = ptr(<span class="string">&quot;0x0&quot;</span>)</span><br><span class="line">            retval.replace(newretval)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(err)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[!] Exception2: &quot;</span> + err.message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h6><ul>
<li>函数名以”+”开头的，如：“+ URLWithString:”，可以直接通过类名调用方法，相当于java中的static函数</li>
<li>函数名以“-”开头的需要找到一个实例化的对象，然后再调用方法</li>
</ul>
<p>如果内存中没有这样的对象<br>这种情况需要手动生成一个实例,用法为ObjC.classes.类名.alloc()</p>
<p>如果内存中存在实例化后的对象<br>这种情况需要先找出一个类的实例,使用var tmp=ObjC.chooseSync(ObjC.classes.类名),例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ObjC.chooseSync(ObjC.classes.PARSHealthPedometer10thHomeViewController)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>其中[0]表示取找到的实例中的第一个实例,可根据实际情况换成其他的实例。<br>调用函数时，以my_obj <code>- requestUploadWithSure</code> 的函数，如果有参数直接附在括号中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ObjC.available) &#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//var my_obj=ObjC.chooseSync(ObjC.classes.PARSHealthPedometer10thHomeViewController)[0]</span></span><br><span class="line">        <span class="keyword">var</span> my_obj=ObjC.classes.PARSHealthPedometer10thHomeViewController.alloc()</span><br><span class="line">        my_obj[<span class="string">&quot;- requestUploadWithSure:&quot;</span>](<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">catch</span>(<span class="params">err</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[!] Exception2: &quot;</span> + err.message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Objective-C Runtime is not available!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h5 id="Frida进阶"><a href="#Frida进阶" class="headerlink" title="Frida进阶"></a>Frida进阶</h5><h6 id="Python-交互"><a href="#Python-交互" class="headerlink" title="Python 交互"></a>Python 交互</h6><p>Frida 提供了 Python 和 JS 脚本的交互</p>
<h6 id="获取设备"><a href="#获取设备" class="headerlink" title="获取设备"></a>获取设备</h6><p>DeviceManager 类获取设备信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 获取设备管理器</span></span><br><span class="line">    deviceManager = frida.get_device_manager()</span><br><span class="line">    <span class="comment"># 枚举所有连接的设备</span></span><br><span class="line">    print(deviceManager.enumerate_devices())</span><br><span class="line">    <span class="comment"># 根据UDID获取设备</span></span><br><span class="line">    print(deviceManager.get_device(<span class="string">&#x27;00008030-001C19C12281802E&#x27;</span>))</span><br><span class="line">    <span class="comment"># 获取当前连接设备</span></span><br><span class="line">    print(deviceManager.get_usb_device())</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出 </span></span><br><span class="line"><span class="comment">#[Device(id=&quot;local&quot;, name=&quot;Local System&quot;, type=&#x27;local&#x27;), Device(id=&quot;socket&quot;, name=&quot;Local Socket&quot;, type=&#x27;remote&#x27;), Device(id=&quot;00008030-001C19C12281802E&quot;, name=&quot;iPhone&quot;, type=&#x27;usb&#x27;)]</span></span><br><span class="line"><span class="comment">#Device(id=&quot;00008030-001C19C12281802E&quot;, name=&quot;iPhone&quot;, type=&#x27;usb&#x27;)</span></span><br><span class="line"><span class="comment">#Device(id=&quot;00008030-001C19C12281802E&quot;, name=&quot;iPhone&quot;, type=&#x27;usb&#x27;)</span></span><br></pre></td></tr></table></figure>

<h6 id="附加进程"><a href="#附加进程" class="headerlink" title="附加进程"></a>附加进程</h6><p>attach() 附加目标进程，返回一个 Session 实例，参数支持进程名和PID</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">from</span> frida.core <span class="keyword">import</span> Device</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    device = frida.get_usb_device() <span class="comment"># type: Device</span></span><br><span class="line">    session = device.attach(<span class="string">u&#x27;微信&#x27;</span>)</span><br><span class="line">    print(session)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#Session(pid=3608)</span></span><br></pre></td></tr></table></figure>

<h6 id="启动进程"><a href="#启动进程" class="headerlink" title="启动进程"></a>启动进程</h6><p>spawn() 启动进程，此时进程处于挂起状态，需要配合 resume() 才能唤醒，这时还可以使用 attach() 附加上去</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">from</span> frida.core <span class="keyword">import</span> Device</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    device = frida.get_usb_device() <span class="comment"># type: Device</span></span><br><span class="line">    pid = device.spawn(<span class="string">&#x27;com.tencent.xin&#x27;</span>)</span><br><span class="line">    device.resume(pid)</span><br></pre></td></tr></table></figure>

<p>device.spawn()  允许带参数执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pid &#x3D; device.spawn(&#39;com.apple.mobilesafari&#39;, url&#x3D;&quot;https:&#x2F;&#x2F;www.chinapyg.com&quot;)</span><br></pre></td></tr></table></figure>

<h6 id="脱离进程"><a href="#脱离进程" class="headerlink" title="脱离进程"></a>脱离进程</h6><p>得到 Session 并操作完毕后，需要使用 detach() 脱离进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.detach()</span><br></pre></td></tr></table></figure>

<h6 id="注入JS脚本"><a href="#注入JS脚本" class="headerlink" title="注入JS脚本"></a>注入JS脚本</h6><p>得到Session就可以使用 create_script() 创建一个脚本对象，然后调用 load() 方法将脚本载入。此时 python 的任务完成，主要工作就交给 JS 了</p>
<ul>
<li>枚举指定进程的所有模块信息</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">from</span> frida.core <span class="keyword">import</span> Device</span><br><span class="line"><span class="keyword">from</span> frida.core <span class="keyword">import</span> Session</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enumerateModules</span>(<span class="params">target_process</span>):</span></span><br><span class="line">    session = frida.get_usb_device().attach(target_process) <span class="comment"># type: Session</span></span><br><span class="line">    script = session.create_script(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Process.enumerateModules(&#123;</span></span><br><span class="line"><span class="string">        onMatch: function(module) &#123;</span></span><br><span class="line"><span class="string">            console.log(&#x27;Module name:&#x27; + module.name + &#x27;-&#x27; + &#x27;Base Address:&#x27; + module.base);</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        onComplete: function() &#123;&#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    )</span><br><span class="line">    script.load()</span><br><span class="line">    session.detach()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    enumerateModules(<span class="string">&#x27;微信&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>可以将JS脚本嵌套在Python源文件中，也可以将JS保存到专门文件中再读取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs  </span><br><span class="line">...</span><br><span class="line"><span class="keyword">with</span> codecs.<span class="built_in">open</span>(<span class="string">&#x27;./WeChat.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">   source = f.read()</span><br><span class="line">script = session.create_script(source)</span><br></pre></td></tr></table></figure>

<ul>
<li>获取应用沙河路径</li>
</ul>
<img src="逆向-Frida/图片 6.png" alt="图片 6" style="zoom:80%;" />

<h6 id="Python与JS交互传值"><a href="#Python与JS交互传值" class="headerlink" title="Python与JS交互传值"></a>Python与JS交互传值</h6><ul>
<li>获取指定进程的指定模块信息</li>
</ul>
<p>上面JS脚本都是不需要传递参数，需要参数时，Python与JS如何交互</p>
<p>Script 类可以设置回调函数，用来处理JS端传来的消息；JS端设置 recv() 的回调来接收Python端的消息</p>
<img src="逆向-Frida/图片 7.png" alt="图片 7" style="zoom:40%;" />

<img src="逆向-Frida/图片 8.png" alt="图片 8" style="zoom:90%;" />

<img src="逆向-Frida/图片 9.png" alt="图片 9" style="zoom:80%;" />

<p>g_event是保证同步的，Python端使用script.post()将参数发送出去之后就调用g_event.wait()进入等待状态，当JS处理完成后，会将status设为“success”，再使用send()发送给Python端设置的on_message()回调，最终在payload_message()函数中完成逻辑处理，当识别到status为“success”后，调用g_event.set()使主线程继续执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通用hook</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hookClassMethod</span>(<span class="params">classname, methodname, infotip</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">var</span> hooking = ObjC.classes[classname][methodname]</span><br><span class="line">			Interceptor.attach(hooking.implementation,&#123;</span><br><span class="line">			onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">				<span class="comment">//args[0]:self</span></span><br><span class="line">				<span class="comment">//args[1]:The selector</span></span><br><span class="line">				<span class="comment">//args[2]:方法的第一个参数开始</span></span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">&#x27;\n&#x27;</span> + infotip + <span class="string">&#x27; Hook Success&#x27;</span>)</span><br><span class="line">				<span class="built_in">this</span>.class_name  = ObjC.Object(args[<span class="number">0</span>]).toString()</span><br><span class="line">				<span class="built_in">this</span>.method_name = ObjC.selectorAsString(args[<span class="number">1</span>])</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">&#x27;\t[-] &#x27;</span> + <span class="string">&#x27;onEnter args[0] class_name: &#x27;</span> + <span class="built_in">this</span>.class_name)</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">&#x27;\t[-] &#x27;</span> + <span class="string">&#x27;onEnter args[1] method_name: &#x27;</span> + <span class="built_in">this</span>.method_name)</span><br><span class="line">			&#125;,</span><br><span class="line">			onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>)</span>&#123;</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">&#x27;\t[-]Return value: &#x27;</span>)</span><br><span class="line">				<span class="comment">//返回值类型</span></span><br><span class="line">				<span class="keyword">var</span> typeValue = <span class="built_in">Object</span>.prototype.toString.call(retval)</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">&#x27;\t[-] Type of return value: &#x27;</span> + typeValue)</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">&#x27;\t[-] Return value: &#x27;</span>, retval)</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">&#x27;\t[-] &#x27;</span> + <span class="string">&#x27;返回值: &#x27;</span> + ObjC.Object(retval).toString())</span><br><span class="line"></span><br><span class="line">                send(&#123;<span class="attr">msg</span>: ObjC.Object(retval).toString()&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;<span class="function"><span class="title">catch</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&quot;\t[!] &quot;</span> + infotip + <span class="string">&quot; Exception: &quot;</span> + err.message);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle_py_message</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;接收到python发送的消息&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (message[<span class="string">&#x27;cmd&#x27;</span>] == <span class="string">&#x27;cmd111&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//根据cmd调用js方法</span></span><br><span class="line">        <span class="built_in">console</span>.log(message[<span class="string">&#x27;cmd&#x27;</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    send(&#123;<span class="attr">status</span>: <span class="string">&#x27;success&#x27;</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ObjC.available) &#123; <span class="comment">//OC类加载完成</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;\n[*] Starting Hooking&#x27;</span>)</span><br><span class="line">	hookClassMethod(<span class="string">&#x27;SGSCorpusPageView&#x27;</span>, <span class="string">&#x27;- pageDataList&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>)</span><br><span class="line">	recv(handle_py_message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">bundle = <span class="string">&#x27;com.sogou.sogouinput&#x27;</span></span><br><span class="line"></span><br><span class="line">g_event = threading.Event()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">payload_message</span>(<span class="params">payload</span>):</span></span><br><span class="line">	<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">	处理消息逻辑</span></span><br><span class="line"><span class="string">	:param payload:</span></span><br><span class="line"><span class="string">	:return:</span></span><br><span class="line"><span class="string">	&#x27;&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">if</span> <span class="string">&#x27;msg&#x27;</span> <span class="keyword">in</span> payload:</span><br><span class="line">		print(payload[<span class="string">&#x27;msg&#x27;</span>])</span><br><span class="line">	<span class="keyword">if</span> <span class="string">&#x27;status&#x27;</span> <span class="keyword">in</span> payload:</span><br><span class="line">		<span class="keyword">if</span> payload[<span class="string">&#x27;status&#x27;</span>] == <span class="string">&#x27;success&#x27;</span>:</span><br><span class="line">			<span class="comment">#调用g_event.set()使主线程继续执行</span></span><br><span class="line">			g_event.<span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_js_message</span>(<span class="params">message, data</span>):</span></span><br><span class="line">	<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">	接收到JS消息</span></span><br><span class="line"><span class="string">	&#123;&#x27;type&#x27;: &#x27;send&#x27;, &#x27;payload&#x27;: &#123;&#x27;status&#x27;: &#x27;success&#x27;&#125;&#125;</span></span><br><span class="line"><span class="string">	:param message:</span></span><br><span class="line"><span class="string">	:return:</span></span><br><span class="line"><span class="string">	&#x27;&#x27;&#x27;</span></span><br><span class="line">	<span class="comment"># print(message)</span></span><br><span class="line">	<span class="comment"># print(data)</span></span><br><span class="line">	<span class="keyword">if</span> message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">		payload_message(message[<span class="string">&#x27;payload&#x27;</span>])</span><br><span class="line">	<span class="keyword">elif</span> message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;error&#x27;</span>:</span><br><span class="line">		print(message[<span class="string">&#x27;stack&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> codecs.<span class="built_in">open</span>(<span class="string">&#x27;sougou.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    source = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	device = frida.get_usb_device(<span class="number">1000</span>) <span class="comment">#连接usb设备 1000表示超时</span></span><br><span class="line">	pid = device.spawn(bundle) <span class="comment">#启动指定bundleId的app</span></span><br><span class="line">	session = device.attach(pid)  <span class="comment">#附加到app</span></span><br><span class="line">	<span class="comment"># 创建frida javaScript脚本</span></span><br><span class="line">	script = session.create_script(source) <span class="comment"># type: frida.core.Script</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#参数：信号single 回调callback， single固定message</span></span><br><span class="line">	script.on(<span class="string">&#x27;message&#x27;</span>, handle_js_message)</span><br><span class="line">	script.load() <span class="comment">#load脚本到app进程中 这样即注入成功</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#发送消息</span></span><br><span class="line">	script.post(&#123;<span class="string">&#x27;cmd&#x27;</span>: <span class="string">&#x27;cmd111&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;nameValue&#x27;</span>&#125;)</span><br><span class="line">	<span class="comment">#消息发送给JS后，调用g_event.wait进入等待 当JS处理完成后，会将status设为“success”</span></span><br><span class="line">	g_event.wait()</span><br><span class="line"></span><br><span class="line">	device.resume(pid) <span class="comment">#恢复app运行</span></span><br><span class="line">	sys.stdin.read()<span class="comment">#读取打印日志</span></span><br></pre></td></tr></table></figure>





<h6 id="JS脚本-1"><a href="#JS脚本-1" class="headerlink" title="JS脚本"></a>JS脚本</h6><p>hook.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ObjC.available) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hook.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line">bundle = <span class="string">&#x27;com.CMake&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    device = frida.get_usb_device()</span><br><span class="line">    pid = device.spawn(bundle) <span class="comment">#启动指定bundleid进程</span></span><br><span class="line">    session = device.attach(pid) <span class="comment">#附加app</span></span><br><span class="line">    <span class="keyword">with</span> codecs.<span class="built_in">open</span>(<span class="string">&#x27;./hook.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        source = f.read() <span class="comment">#读取脚本文件</span></span><br><span class="line">    script = session.create_script(source) <span class="comment">#创建 frida JavaScript脚本</span></span><br><span class="line">    script.load() <span class="comment">#加载脚本</span></span><br><span class="line">    device.resume(pid) <span class="comment">#唤醒回复app运行</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#云行后打印 hello world</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>可以用来代替 vmmap 来获取加载基地址</p>
</blockquote>
<h6 id="拦截某个类的所有方法"><a href="#拦截某个类的所有方法" class="headerlink" title="拦截某个类的所有方法"></a>拦截某个类的所有方法</h6><p>API里提供了ApiResolver接口，能够根据正则表达式获取符合条件的所有方法</p>
<p>获取微信红包相关的 WCRedEnvelopesLogicMgr 类的所有方法，JS代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> resolver = <span class="keyword">new</span> ApiResolver(<span class="string">&#x27;objc&#x27;</span>);<span class="comment">//创建已加载OC类方法的API查找器</span></span><br><span class="line"><span class="keyword">var</span> matches = resolver.enumerateMatches(<span class="string">&#x27;*[WCRedEnvelopesLogicMgr *]&#x27;</span>, &#123;</span><br><span class="line">  onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">match</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(match[<span class="string">&#x27;name&#x27;</span>] + <span class="string">&#x27;:&#x27;</span> + match[<span class="string">&#x27;address&#x27;</span>]);</span><br><span class="line">  &#125;,</span><br><span class="line">  onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//再attach</span></span><br><span class="line">Interceptor.attach(ptr(matches[<span class="number">0</span>][<span class="string">&#x27;address&#x27;</span>]), &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>eg: 绕过AFNetworking证书校验</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> resolver = <span class="keyword">new</span> ApiResolver(<span class="string">&#x27;objc&#x27;</span>);<span class="comment">//创建已加载Object-C类方法的API查找器</span></span><br><span class="line">	<span class="keyword">var</span> matches = resolver.enumerateMatchesSync(<span class="string">&quot;-[AFSecurityPolicy evaluateServerTrust:forDomain:]&quot;</span>);<span class="comment">//查找evaluateServerTrust:forDomain函数，返回数组类型</span></span><br><span class="line">	<span class="keyword">if</span> (matches.lenght == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&quot;\n[E] -[AFSecurityPolicy evaluateServerTrust:forDomain:] is not found!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Interceptor.attach(ptr(matches[<span class="number">0</span>][<span class="string">&quot;address&quot;</span>]),&#123;</span><br><span class="line">			onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">&quot;[I] -[AFSecurityPolicy evaluateServerTrust:forDomain:] hits!&quot;</span>);</span><br><span class="line">				retval.replace(<span class="number">1</span>);<span class="comment">//将返回值修改为1</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;[I] -[AFSecurityPolicy evaluateServerTrust:forDomain:] is hooked!\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure>



<p>脚本执行后，将 WCRedEnvelopesLogicMgr 类的所有方法和内存地址都打印出来了</p>
<p>获取所有方法后，可以使用 Interceptor.attach() 对每个方法进行拦截，然后打印参数和返回值</p>
<img src="逆向-Frida/图片 10.png" alt="图片 10" style="zoom:80%;" />

<img src="逆向-Frida/图片 11.png" alt="图片 11" style="zoom:40%;" />

<p>将拦截器中将调用的方法、传入参数及返回值都打印出来，就可以分析调用顺序了</p>
<h6 id="拦截C函数"><a href="#拦截C函数" class="headerlink" title="拦截C函数"></a>拦截C函数</h6><p>逆向分析时会遇到 sub_xxx 的C函数，如果要获取参数除了动态调试，还可以用 Frida 来操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_rva</span>(<span class="params"><span class="built_in">module</span>, offset</span>) </span>&#123;</span><br><span class="line">	<span class="comment">//获取基地址</span></span><br><span class="line">	<span class="keyword">var</span> base_addr = Module.findBaseAddress(<span class="built_in">module</span>)</span><br><span class="line">	<span class="comment">//函数地址 = 基地址+偏移地址</span></span><br><span class="line">	<span class="keyword">var</span> target_addr = base_addr.add(offset) </span><br><span class="line">	<span class="keyword">if</span> (Process.arch == <span class="string">&#x27;arm&#x27;</span>) &#123; <span class="comment">//如果是32位地址+1</span></span><br><span class="line">		<span class="keyword">return</span> target_addr.add(<span class="number">1</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> target_addr</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数偏移地址 可以通过 IDA 查看</span></span><br><span class="line"><span class="keyword">var</span> target_addr = get_rva(<span class="string">&#x27;mars&#x27;</span>, <span class="number">0x23adf6</span>);</span><br><span class="line">Interceptor.attach(ptr(target_addr), &#123;</span><br><span class="line">  onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;mars::stn::MMTLsCtrlInfo::IsMMTLSEnabled=&#x27;</span> + Memory.readU8(args[<span class="number">0</span>].add(<span class="number">8</span>)));</span><br><span class="line">  &#125;,</span><br><span class="line">  onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;</span><br><span class="line">    retval.replace(ptr(<span class="number">0</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>0x23adf6 是C函数的偏移地址，args[0].add(8) 相当于ARM指令的 LDRB W0, [X0,#8] 也就是访问第一个成员变量</p>
<p>。。</p>
<h6 id="替换原方法"><a href="#替换原方法" class="headerlink" title="替换原方法"></a>替换原方法</h6><p>Interceptor.attach() 拦截目标后，可以打印参数、修改返回值，但无法阻止方法的执行</p>
<p>例如，某个类存在一个 update 方法</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)update:(<span class="keyword">id</span>)args;</span><br></pre></td></tr></table></figure>

<p>当需要准确知道是否因为这个方法的执行而导致页面发生了变化时，可以将原方法替换掉进行测试</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">update.implementation = ObjC.implement(update, <span class="function"><span class="keyword">function</span>(<span class="params">handle,selector,args</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> self = ObjC.Object(handle);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;self:&#x27;</span> + self);</span><br><span class="line">	<span class="comment">//这样原始方法就不会被执行，也就达到了屏蔽的效果</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果要在某个时刻调回原方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先获取原方法</span></span><br><span class="line"><span class="keyword">var</span> oldImp = update.implementation;</span><br><span class="line"><span class="comment">//需要的时候调用</span></span><br><span class="line">oldImp(handle,selector,args);</span><br></pre></td></tr></table></figure>

<p>对于C函数，操作稍微复杂些，需要使用NativeFunction定义原函数与新函数，然后使用 Interceptor.replace() 进行替换</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dlopenPtr = Module.findExportByName(<span class="literal">null</span>, <span class="string">&#x27;dlopen&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> dlopen = <span class="keyword">new</span> NativeFunction(dlopenPtr, <span class="string">&#x27;pointer&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>])</span><br><span class="line">Interceptor.replace(dlopenPtr, <span class="keyword">new</span> NativeCallBack(<span class="function"><span class="keyword">function</span>(<span class="params">path, mode</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//新函数逻辑</span></span><br><span class="line">  <span class="keyword">var</span> name = Memory.readUtf8String(path)</span><br><span class="line">  <span class="keyword">if</span> (name != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;name:&#x27;</span> + name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//调用原函数</span></span><br><span class="line">  <span class="keyword">return</span> dlopen(path, mode)</span><br><span class="line">&#125;,<span class="string">&#x27;pointer&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h6 id="替换原方法-replace"><a href="#替换原方法-replace" class="headerlink" title="替换原方法 replace"></a>替换原方法 replace</h6><p>Interceptor.replace(target, replacement)</p>
<p>replacement 是 NativeCallback 类型</p>
<p>new NativeCallback(func, returnType, argTypes[,abi]) //函数 返回值 参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> target_addr = get_rva(<span class="string">&#x27;XinHuaShe&#x27;</span>, <span class="number">0xBF9A0</span>)</span><br><span class="line">	<span class="comment">//NativeCallback(func, returnType, argTypes[,abi])</span></span><br><span class="line">	<span class="comment">//或者不用参数</span></span><br><span class="line">	Interceptor.replace(ptr(target_addr), <span class="keyword">new</span> NativeCallback(<span class="function"><span class="keyword">function</span>(<span class="params">argc, argv</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;hook sub_ptrace bypass&#x27;</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;, int, [int, int]))</span><br></pre></td></tr></table></figure>

<h6 id="替换原方法-1"><a href="#替换原方法-1" class="headerlink" title="替换原方法"></a>替换原方法</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//didTap 需要传递两个参数 ObjC.implement回调中也需要两个参数</span></span><br><span class="line"><span class="keyword">var</span> didTap = ObjC.classes.T1TranslateButton[<span class="string">&#x27;- _didTap:forEvent:&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> didTapOldImp = didTap.implementation</span><br><span class="line"></span><br><span class="line"><span class="comment">// 覆盖实现</span></span><br><span class="line">didTap.implementation = ObjC.implement(setTitle, <span class="function"><span class="keyword">function</span>(<span class="params">handle, selector, arg1, arg2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = ObjC.Object(handle)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;self -- &quot;</span>, self) </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用旧实现</span></span><br><span class="line">  <span class="comment">// didTapOldImp(handle, selector, arg1, arg2)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Module模块</span><br><span class="line">Module.findExportByName(moduleName|null, exportName)</span><br><span class="line">	moduleName：lib名字</span><br><span class="line">	exportName：函数名字</span><br><span class="line">	返回exportName的地址</span><br><span class="line">Module.findBaseAddress(moduleName)</span><br><span class="line">	moduleName：lib名字</span><br><span class="line">	返回lib的基地址</span><br><span class="line"></span><br><span class="line">Process模块</span><br><span class="line">Process.findModuleByAddress(address)</span><br><span class="line">	address：lib的指针地址</span><br><span class="line">	返回一个Module对象</span><br><span class="line"></span><br><span class="line">Momery模块</span><br><span class="line">Memory.readCString(pointer)</span><br><span class="line">	pointer:指针地址</span><br><span class="line">	把pointer还原成字符串</span><br><span class="line">Memory.readUtf8String(pointer);</span><br><span class="line">Memory.readAnsiString(pointer)</span><br><span class="line"></span><br><span class="line">Interceptor模块：监听</span><br><span class="line">.attach(target, callbacks)</span><br><span class="line">	target:指针地址</span><br><span class="line">	callbacks:回调函数</span><br><span class="line">		onEnter</span><br><span class="line">		onLeave</span><br><span class="line"></span><br><span class="line">使用objection</span><br><span class="line">ios hooking watchmethod“+[RSAencryptString:privateKey:]”–dump-args</span><br><span class="line">ios hooking watchmethod“+[RSAencryptString:privateKey:]”–dump-return</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="加密参数打印"><a href="#加密参数打印" class="headerlink" title="加密参数打印"></a>加密参数打印</h5><p>下载工程 <a href="https://github.com/GuanlinORZ/friDemo">https://github.com/GuanlinORZ/friDemo</a> 或加代理下载 <a href="https://gh.fakev.cn/GuanlinORZ/friDemo">https://gh.fakev.cn/GuanlinORZ/friDemo</a></p>
<p>跟踪函数</p>
<p>分析 CCCrypt 函数的加密</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">CCCryptorStatus CCCrypt( </span><br><span class="line">  CCOperation op, <span class="comment">//kCCEncrypt为加密，kCCDecrypt为解密 </span></span><br><span class="line">  CCAlgorithm alg, <span class="comment">//加密方式 kCCAlgorithmAES128为AES加密</span></span><br><span class="line">  CCOptions options, <span class="comment">//增充方式</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">void</span> *key,   <span class="comment">//密钥</span></span><br><span class="line">  size_t keyLength,  <span class="comment">//密钥长度</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">void</span> *iv,    <span class="comment">// IV</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">void</span> *dataIn, <span class="comment">//待加密的原文</span></span><br><span class="line">  size_t dataInLength, <span class="comment">//原文长度</span></span><br><span class="line">  <span class="keyword">void</span> *dataOut,       <span class="comment">//加密后输出的数据</span></span><br><span class="line">  size_t dataOutAvailable,  </span><br><span class="line">  size_t *dataOutMoved)</span><br></pre></td></tr></table></figure>

<p>运行项目，跟踪函数调用</p>
<p>点击项目按钮，调用加密方法，可以看到跟踪函数调用的参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#-i 跟踪函数</span><br><span class="line">$ frida-trace -U -i CCCrypt DesDemo </span><br><span class="line">Instrumenting...</span><br><span class="line">CCCrypt: Auto-generated handler at &quot;&#x2F;Users&#x2F;xxx&#x2F;Desktop&#x2F;WeChat&#x2F;__handlers__&#x2F;libcommonCrypto.dylib&#x2F;CCCrypt.js&quot;</span><br><span class="line">Started tracing 1 function. Press Ctrl+C to stop.</span><br><span class="line">           &#x2F;* TID 0x103 *&#x2F;</span><br><span class="line">  9217 ms  CCCrypt(op&#x3D;0x0, alg&#x3D;0x1, options&#x3D;0x1, key&#x3D;0x102363d50, keyLength&#x3D;0x8, iv&#x3D;0x16daa4e20, dataIn&#x3D;0x280a01531, dataInLength&#x3D;0xa, dataOut&#x3D;0x16daa4e28, dataOutAvailable&#x3D;0x400, dataOutMoved&#x3D;0x16daa4de0)</span><br></pre></td></tr></table></figure>

<p>并且生成了 handlers/CCCrypt.js 文件</p>
<p>有两个函数，onEnter 是进入函数时会执行的代码，onLeave是函数执行完离开时会执行的代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="title">onEnter</span>(<span class="params">log, args, state</span>)</span> &#123;</span><br><span class="line">    log(<span class="string">`CCCrypt(op=<span class="subst">$&#123;args[<span class="number">0</span>]&#125;</span>, alg=<span class="subst">$&#123;args[<span class="number">1</span>]&#125;</span>, options=<span class="subst">$&#123;args[<span class="number">2</span>]&#125;</span>, key=<span class="subst">$&#123;args[<span class="number">3</span>]&#125;</span>, keyLength=<span class="subst">$&#123;args[<span class="number">4</span>]&#125;</span>, iv=<span class="subst">$&#123;args[<span class="number">5</span>]&#125;</span>, dataIn=<span class="subst">$&#123;args[<span class="number">6</span>]&#125;</span>, dataInLength=<span class="subst">$&#123;args[<span class="number">7</span>]&#125;</span>, dataOut=<span class="subst">$&#123;args[<span class="number">8</span>]&#125;</span>, dataOutAvailable=<span class="subst">$&#123;args[<span class="number">9</span>]&#125;</span>, dataOutMoved=<span class="subst">$&#123;args[<span class="number">10</span>]&#125;</span>)`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">onLeave</span>(<span class="params">log, retval, state</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改内容 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">log, args, state</span>) </span>&#123;</span><br><span class="line">    log(<span class="string">&#x27;CCCrypt(&#x27;</span> +</span><br><span class="line">      <span class="string">&#x27;op=&#x27;</span> + args[<span class="number">0</span>] +</span><br><span class="line">      <span class="string">&#x27;, alg=&#x27;</span> + args[<span class="number">1</span>] +</span><br><span class="line">      <span class="string">&#x27;, options=&#x27;</span> + args[<span class="number">2</span>] +</span><br><span class="line">      <span class="string">&#x27;, key=&#x27;</span> + args[<span class="number">3</span>] +</span><br><span class="line">      <span class="string">&#x27;, keyLength=&#x27;</span> + args[<span class="number">4</span>] +</span><br><span class="line">      <span class="string">&#x27;, iv=&#x27;</span> + args[<span class="number">5</span>] +</span><br><span class="line">      <span class="string">&#x27;, dataIn=&#x27;</span> + args[<span class="number">6</span>] +</span><br><span class="line">      <span class="string">&#x27;, dataInLength=&#x27;</span> + args[<span class="number">7</span>] +</span><br><span class="line">      <span class="string">&#x27;, dataOut=&#x27;</span> + args[<span class="number">8</span>] +</span><br><span class="line">      <span class="string">&#x27;, dataOutAvailable=&#x27;</span> + args[<span class="number">9</span>] +</span><br><span class="line">      <span class="string">&#x27;, dataOutMoved=&#x27;</span> + args[<span class="number">10</span>] +</span><br><span class="line">    <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">    <span class="comment">//保存参数</span></span><br><span class="line">    <span class="built_in">this</span>.operation   = args[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">this</span>.CCAlgorithm = args[<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">this</span>.CCOptions   = args[<span class="number">2</span>]</span><br><span class="line">    <span class="built_in">this</span>.keyBytes    = args[<span class="number">3</span>]</span><br><span class="line">    <span class="built_in">this</span>.keyLength   = args[<span class="number">4</span>]</span><br><span class="line">    <span class="built_in">this</span>.ivBuffer    = args[<span class="number">5</span>]</span><br><span class="line">    <span class="built_in">this</span>.inBuffer    = args[<span class="number">6</span>]</span><br><span class="line">    <span class="built_in">this</span>.inLength    = args[<span class="number">7</span>]</span><br><span class="line">    <span class="built_in">this</span>.outBuffer   = args[<span class="number">8</span>]</span><br><span class="line">    <span class="built_in">this</span>.outLength   = args[<span class="number">9</span>]</span><br><span class="line">    <span class="built_in">this</span>.outCountPtr = args[<span class="number">10</span>]</span><br><span class="line">    <span class="comment">//this.operation == 0 代表是加密</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.operation == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//打印加密前的原文</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;In buffer:&quot;</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(hexdump(ptr(<span class="built_in">this</span>.inBuffer), &#123;</span><br><span class="line">            length: <span class="built_in">this</span>.inLength.toInt32(),</span><br><span class="line">            header: <span class="literal">true</span>,</span><br><span class="line">            ansi: <span class="literal">true</span></span><br><span class="line">        &#125;))</span><br><span class="line">        <span class="comment">//打印密钥</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Key: &quot;</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(hexdump(ptr(<span class="built_in">this</span>.keyBytes), &#123;</span><br><span class="line">            length: <span class="built_in">this</span>.keyLength.toInt32(),</span><br><span class="line">            header: <span class="literal">true</span>,</span><br><span class="line">            ansi: <span class="literal">true</span></span><br><span class="line">        &#125;))</span><br><span class="line">        <span class="comment">//打印 IV</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;IV: &quot;</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(hexdump(ptr(<span class="built_in">this</span>.ivBuffer), &#123;</span><br><span class="line">            length: <span class="built_in">this</span>.keyLength.toInt32(),</span><br><span class="line">            header: <span class="literal">true</span>,</span><br><span class="line">            ansi: <span class="literal">true</span></span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">log, retval, state</span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ptr(s) 定义一个指针 指针地址为s </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">operation: 0x0代表加密，0x1代表解密</span></span><br><span class="line"><span class="comment">enum &#123;</span></span><br><span class="line"><span class="comment">	kCCEncrypt = 0,	</span></span><br><span class="line"><span class="comment">	kCCDecrypt = 1	</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CCAlgorithm: 0x0指加密方式是AES加密，0x1指DES加密，0x2指3DES加密</span></span><br><span class="line"><span class="comment">enum &#123;</span></span><br><span class="line"><span class="comment">	kCCAlgorithmAES128 = 0,</span></span><br><span class="line"><span class="comment">	kCCAlgorithmAES    = 0,</span></span><br><span class="line"><span class="comment">	kCCAlgorithmDES    = 1,</span></span><br><span class="line"><span class="comment">	kCCAlgorithm3DES   = 2,		</span></span><br><span class="line"><span class="comment">	kCCAlgorithmCAST   = 3,		</span></span><br><span class="line"><span class="comment">	kCCAlgorithmRC4    = 4,</span></span><br><span class="line"><span class="comment">	kCCAlgorithmRC2	   = 5	</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CCOptions: 0x1指模式是CBC，通常0x3指ECB</span></span><br><span class="line"><span class="comment">enum &#123;</span></span><br><span class="line"><span class="comment">	kCCOptionPKCS7Padding	= 0x0001,</span></span><br><span class="line"><span class="comment">	kCCOptionECBMode	= 0x0002</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//或者使用 Interceptor.attach</span></span><br><span class="line">Interceptor.attach(Module.findExportByName(<span class="string">&#x27;libcommonCrypto.dylib&#x27;</span>, <span class="string">&#x27;CCCrypt&#x27;</span>), &#123;</span><br><span class="line">    onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Save the arguments</span></span><br><span class="line">        <span class="built_in">this</span>.operation   = args[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">this</span>.CCAlgorithm = args[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">this</span>.CCOptions   = args[<span class="number">2</span>]</span><br><span class="line">        <span class="built_in">this</span>.keyBytes    = args[<span class="number">3</span>]</span><br><span class="line">        <span class="built_in">this</span>.keyLength   = args[<span class="number">4</span>]</span><br><span class="line">        <span class="built_in">this</span>.ivBuffer    = args[<span class="number">5</span>]</span><br><span class="line">        <span class="built_in">this</span>.inBuffer    = args[<span class="number">6</span>]</span><br><span class="line">        <span class="built_in">this</span>.inLength    = args[<span class="number">7</span>]</span><br><span class="line">        <span class="built_in">this</span>.outBuffer   = args[<span class="number">8</span>]</span><br><span class="line">        <span class="built_in">this</span>.outLength   = args[<span class="number">9</span>]</span><br><span class="line">        <span class="built_in">this</span>.outCountPtr = args[<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;CCCrypt(&#x27;</span> + </span><br><span class="line">            <span class="string">&#x27;operation: &#x27;</span>   + <span class="built_in">this</span>.operation    +<span class="string">&#x27;, &#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;CCAlgorithm: &#x27;</span> + <span class="built_in">this</span>.CCAlgorithm  +<span class="string">&#x27;, &#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;CCOptions: &#x27;</span>   + <span class="built_in">this</span>.CCOptions    +<span class="string">&#x27;, &#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;keyBytes: &#x27;</span>    + <span class="built_in">this</span>.keyBytes     +<span class="string">&#x27;, &#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;keyLength: &#x27;</span>   + <span class="built_in">this</span>.keyLength    +<span class="string">&#x27;, &#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;ivBuffer: &#x27;</span>    + <span class="built_in">this</span>.ivBuffer     +<span class="string">&#x27;, &#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;inBuffer: &#x27;</span>    + <span class="built_in">this</span>.inBuffer     +<span class="string">&#x27;, &#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;inLength: &#x27;</span>    + <span class="built_in">this</span>.inLength     +<span class="string">&#x27;, &#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;outBuffer: &#x27;</span>   + <span class="built_in">this</span>.outBuffer    +<span class="string">&#x27;, &#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;outLength: &#x27;</span>   + <span class="built_in">this</span>.outLength    +<span class="string">&#x27;, &#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;outCountPtr: &#x27;</span> + <span class="built_in">this</span>.outCountPtr  +<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.operation == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Show the buffers here if this an encryption operation</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;In buffer:&quot;</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(hexdump(ptr(<span class="built_in">this</span>.inBuffer), &#123;</span><br><span class="line">                length: <span class="built_in">this</span>.inLength.toInt32(),</span><br><span class="line">                header: <span class="literal">true</span>,</span><br><span class="line">                ansi: <span class="literal">true</span></span><br><span class="line">            &#125;))</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Key: &quot;</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(hexdump(ptr(<span class="built_in">this</span>.keyBytes), &#123;</span><br><span class="line">                length: <span class="built_in">this</span>.keyLength.toInt32(),</span><br><span class="line">                header: <span class="literal">true</span>,</span><br><span class="line">                ansi: <span class="literal">true</span></span><br><span class="line">            &#125;))</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;IV: &quot;</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(hexdump(ptr(<span class="built_in">this</span>.ivBuffer), &#123;</span><br><span class="line">                length: <span class="built_in">this</span>.keyLength.toInt32(),</span><br><span class="line">                header: <span class="literal">true</span>,</span><br><span class="line">                ansi: <span class="literal">true</span></span><br><span class="line">            &#125;))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">retVal</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.operation == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// Show the buffers here if this a decryption operation</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Out buffer:&quot;</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(hexdump(ptr(<span class="built_in">this</span>.outBuffer), &#123;</span><br><span class="line">                length: Memory.readUInt(<span class="built_in">this</span>.outCountPtr),</span><br><span class="line">                header: <span class="literal">true</span>,</span><br><span class="line">                ansi: <span class="literal">true</span></span><br><span class="line">            &#125;))</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Key: &quot;</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(hexdump(ptr(<span class="built_in">this</span>.keyBytes), &#123;</span><br><span class="line">                length: <span class="built_in">this</span>.keyLength.toInt32(),</span><br><span class="line">                header: <span class="literal">true</span>,</span><br><span class="line">                ansi: <span class="literal">true</span></span><br><span class="line">            &#125;))</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;IV: &quot;</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(hexdump(ptr(<span class="built_in">this</span>.ivBuffer), &#123;</span><br><span class="line">                length: <span class="built_in">this</span>.keyLength.toInt32(),</span><br><span class="line">                header: <span class="literal">true</span>,</span><br><span class="line">                ansi: <span class="literal">true</span></span><br><span class="line">            &#125;))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//hexdump 打印内存中的地址</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">var libc = Module.findBaseAddress(&#x27;libc.so&#x27;);</span></span><br><span class="line"><span class="comment">console.log(hexdump(libc, &#123;</span></span><br><span class="line"><span class="comment">  offset: 0,</span></span><br><span class="line"><span class="comment">  length: 64,</span></span><br><span class="line"><span class="comment">  header: true,</span></span><br><span class="line"><span class="comment">  ansi: true</span></span><br><span class="line"><span class="comment">&#125;));</span></span><br><span class="line"><span class="comment">           0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span></span><br><span class="line"><span class="comment">00000000  7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00  .ELF............</span></span><br><span class="line"><span class="comment">00000010  03 00 28 00 01 00 00 00 00 00 00 00 34 00 00 00  ..(.........4...</span></span><br><span class="line"><span class="comment">00000020  34 a8 04 00 00 00 00 05 34 00 20 00 08 00 28 00  4.......4. ...(.</span></span><br><span class="line"><span class="comment">00000030  1e 00 1d 00 06 00 00 00 34 00 00 00 34 00 00 00  ........4...4...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>再次执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ frida-trace -U -i CCCrypt DesDemo</span><br><span class="line"></span><br><span class="line">Started tracing 1 function. Press Ctrl+C to stop.</span><br><span class="line">In buffer:</span><br><span class="line">            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">280a14451  72 32 34 33 34 33 34 33 34 33                    r243434343</span><br><span class="line">Key:</span><br><span class="line">            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">102363d50  78 78 78 78 00 21 2a 27                          xxxx.!*&#39;</span><br><span class="line">IV:</span><br><span class="line">            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">16daa4e20  12 34 56 78 90 ab cd ef                          .4Vx....</span><br><span class="line">           &#x2F;* TID 0x103 *&#x2F;</span><br><span class="line">  1813 ms  CCCrypt(op&#x3D;0x0, alg&#x3D;0x1, options&#x3D;0x1, key&#x3D;0x102363d50, keyLength&#x3D;0x8, iv&#x3D;0x16daa4e20, dataIn&#x3D;0x280a14451, dataInLength&#x3D;0xa, dataOut&#x3D;0x16daa4e28, dataOutAvailable&#x3D;0x400, dataOutMoved&#x3D;0x16daa4de0)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;可以看到加密前字符串 r243434343</span><br></pre></td></tr></table></figure>

<p>CC_MD5 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">CC_MD5(fooData, (CC_LONG)strlen(fooData), result);</span><br><span class="line"></span><br><span class="line"><span class="comment">//参数1:要加密的字符串</span></span><br><span class="line"><span class="comment">//参数2: 获取要加密字符串的长度</span></span><br><span class="line"><span class="comment">//参数3: 接收结果的数组</span></span><br><span class="line"><span class="comment">//返回一个32位长度的加密后的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//js</span></span><br><span class="line">&#123;</span><br><span class="line">  onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">log, args, state</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//将md5参数转成字符串并打印</span></span><br><span class="line">    <span class="keyword">var</span> md5_data = args[<span class="number">0</span>].readUtf8String();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;MD5-参数值:&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.error(md5_data);</span><br><span class="line">  &#125;, </span><br><span class="line">  onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">log, retval, state</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//将md5返回值转码为32位字符串并打印</span></span><br><span class="line">    <span class="keyword">var</span> md5_digest = hexdump(retval, &#123;<span class="attr">length</span>: <span class="number">16</span>&#125;);</span><br><span class="line">    <span class="keyword">var</span> hexified = <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> raw_array = md5_digest.split(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> a=<span class="number">0</span>;a&lt; raw_array.length,a++)&#123;</span><br><span class="line">      <span class="keyword">var</span> line_array = raw_array[a].split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> b=<span class="number">1</span>;b&lt;line_array.length-<span class="number">1</span>;b++)&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">line_array[b].length==<span class="number">2</span></span>)</span>&#123;</span><br><span class="line">          hexified+=line_array[b];</span><br><span class="line">          hexified=hexified.trim()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;MD5-返回值:&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.error(hexified+<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="修改入参-返回值"><a href="#修改入参-返回值" class="headerlink" title="修改入参/返回值"></a>修改入参/返回值</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line">onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;\t[-] &#x27;</span> + <span class="string">&#x27;onEnter args[0] class_name: &#x27;</span> + ObjC.Object(args[<span class="number">0</span>]).toString())</span><br><span class="line">	<span class="keyword">var</span> newval = ObjC.classes.NSString.stringWithString_(<span class="string">&quot;root/0;debug/0;proxy/0;inject/0&quot;</span>)</span><br><span class="line">  args[<span class="number">0</span>] = newval</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;\t[-] &#x27;</span> + <span class="string">&#x27;onEnter args[0] class_name: &#x27;</span> + ObjC.Object(args[<span class="number">0</span>]).toString())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> newuuid = ObjC.classes.NSString.stringWithString_(<span class="string">&quot;32427210-7773-7679-3993-A3F7-E85D212D7D91&quot;</span>)</span><br><span class="line">  retval.replace(newuuid)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str &#x3D; new ObjC.Object(ptr(args[2])).toString();</span><br><span class="line">console.log(&#39;[*] str:] -&gt;&#39; , str);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>













<p><a href="https://la0s.github.io/2018/12/07/iOS_Crypto/">破解iOS加密数据</a></p>
<p><a href="https://github.com/la0s/Frida-scripts">Frida-scripts  (base64|MD5|SHA1)</a></p>
<p><a href="https://github.com/dpnishant/appmon/tree/master/scripts/iOS/Crypto">appmon project 提供的 scripts</a></p>
<p><a href="https://github.com/theart42/hack.lu/blob/master/IOS/Notes/05-Crypt/00-crypto-hooks.md">hack.lu 的 scripts</a></p>
]]></content>
  </entry>
</search>
